
XY-Plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020a94  08008000  08008000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008a28  08028a98  08028a98  00022a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080314c0  080314c0  0002c664  2**0
                  CONTENTS
  4 .ARM          00000008  080314c0  080314c0  0002b4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080314c8  080314c8  0002c664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080314c8  080314c8  0002b4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080314cc  080314cc  0002b4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  080314d0  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000230c  20000664  08031b34  0002c664  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20002970  08031b34  0002c970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002c664  2**0
                  CONTENTS, READONLY
 12 .debug_info   000d8173  00000000  00000000  0002c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b595  00000000  00000000  00104807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000107c7  00000000  00000000  0010fd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d40  00000000  00000000  00120568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001acc  00000000  00000000  001222a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002acb9  00000000  00000000  00123d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000fa0c  00000000  00000000  0014ea2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e439  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fd4  00000000  00000000  0015e47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00165450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	@ (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	@ (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	@ (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000664 	.word	0x20000664
 800801c:	00000000 	.word	0x00000000
 8008020:	08028a7c 	.word	0x08028a7c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	@ (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	@ (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	@ (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000668 	.word	0x20000668
 800803c:	08028a7c 	.word	0x08028a7c

08008040 <strcmp>:
 8008040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008048:	2a01      	cmp	r2, #1
 800804a:	bf28      	it	cs
 800804c:	429a      	cmpcs	r2, r3
 800804e:	d0f7      	beq.n	8008040 <strcmp>
 8008050:	1ad0      	subs	r0, r2, r3
 8008052:	4770      	bx	lr
	...

08008060 <memchr>:
 8008060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008064:	2a10      	cmp	r2, #16
 8008066:	db2b      	blt.n	80080c0 <memchr+0x60>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	d008      	beq.n	8008080 <memchr+0x20>
 800806e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008072:	3a01      	subs	r2, #1
 8008074:	428b      	cmp	r3, r1
 8008076:	d02d      	beq.n	80080d4 <memchr+0x74>
 8008078:	f010 0f07 	tst.w	r0, #7
 800807c:	b342      	cbz	r2, 80080d0 <memchr+0x70>
 800807e:	d1f6      	bne.n	800806e <memchr+0xe>
 8008080:	b4f0      	push	{r4, r5, r6, r7}
 8008082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800808a:	f022 0407 	bic.w	r4, r2, #7
 800808e:	f07f 0700 	mvns.w	r7, #0
 8008092:	2300      	movs	r3, #0
 8008094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008098:	3c08      	subs	r4, #8
 800809a:	ea85 0501 	eor.w	r5, r5, r1
 800809e:	ea86 0601 	eor.w	r6, r6, r1
 80080a2:	fa85 f547 	uadd8	r5, r5, r7
 80080a6:	faa3 f587 	sel	r5, r3, r7
 80080aa:	fa86 f647 	uadd8	r6, r6, r7
 80080ae:	faa5 f687 	sel	r6, r5, r7
 80080b2:	b98e      	cbnz	r6, 80080d8 <memchr+0x78>
 80080b4:	d1ee      	bne.n	8008094 <memchr+0x34>
 80080b6:	bcf0      	pop	{r4, r5, r6, r7}
 80080b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80080bc:	f002 0207 	and.w	r2, r2, #7
 80080c0:	b132      	cbz	r2, 80080d0 <memchr+0x70>
 80080c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080c6:	3a01      	subs	r2, #1
 80080c8:	ea83 0301 	eor.w	r3, r3, r1
 80080cc:	b113      	cbz	r3, 80080d4 <memchr+0x74>
 80080ce:	d1f8      	bne.n	80080c2 <memchr+0x62>
 80080d0:	2000      	movs	r0, #0
 80080d2:	4770      	bx	lr
 80080d4:	3801      	subs	r0, #1
 80080d6:	4770      	bx	lr
 80080d8:	2d00      	cmp	r5, #0
 80080da:	bf06      	itte	eq
 80080dc:	4635      	moveq	r5, r6
 80080de:	3803      	subeq	r0, #3
 80080e0:	3807      	subne	r0, #7
 80080e2:	f015 0f01 	tst.w	r5, #1
 80080e6:	d107      	bne.n	80080f8 <memchr+0x98>
 80080e8:	3001      	adds	r0, #1
 80080ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80080ee:	bf02      	ittt	eq
 80080f0:	3001      	addeq	r0, #1
 80080f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80080f6:	3001      	addeq	r0, #1
 80080f8:	bcf0      	pop	{r4, r5, r6, r7}
 80080fa:	3801      	subs	r0, #1
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <strlen>:
 8008100:	4603      	mov	r3, r0
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	2a00      	cmp	r2, #0
 8008108:	d1fb      	bne.n	8008102 <strlen+0x2>
 800810a:	1a18      	subs	r0, r3, r0
 800810c:	3801      	subs	r0, #1
 800810e:	4770      	bx	lr

08008110 <__aeabi_drsub>:
 8008110:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008114:	e002      	b.n	800811c <__adddf3>
 8008116:	bf00      	nop

08008118 <__aeabi_dsub>:
 8008118:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800811c <__adddf3>:
 800811c:	b530      	push	{r4, r5, lr}
 800811e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008126:	ea94 0f05 	teq	r4, r5
 800812a:	bf08      	it	eq
 800812c:	ea90 0f02 	teqeq	r0, r2
 8008130:	bf1f      	itttt	ne
 8008132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800813a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800813e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008142:	f000 80e2 	beq.w	800830a <__adddf3+0x1ee>
 8008146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800814a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800814e:	bfb8      	it	lt
 8008150:	426d      	neglt	r5, r5
 8008152:	dd0c      	ble.n	800816e <__adddf3+0x52>
 8008154:	442c      	add	r4, r5
 8008156:	ea80 0202 	eor.w	r2, r0, r2
 800815a:	ea81 0303 	eor.w	r3, r1, r3
 800815e:	ea82 0000 	eor.w	r0, r2, r0
 8008162:	ea83 0101 	eor.w	r1, r3, r1
 8008166:	ea80 0202 	eor.w	r2, r0, r2
 800816a:	ea81 0303 	eor.w	r3, r1, r3
 800816e:	2d36      	cmp	r5, #54	@ 0x36
 8008170:	bf88      	it	hi
 8008172:	bd30      	pophi	{r4, r5, pc}
 8008174:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800817c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008184:	d002      	beq.n	800818c <__adddf3+0x70>
 8008186:	4240      	negs	r0, r0
 8008188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800818c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008198:	d002      	beq.n	80081a0 <__adddf3+0x84>
 800819a:	4252      	negs	r2, r2
 800819c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80081a0:	ea94 0f05 	teq	r4, r5
 80081a4:	f000 80a7 	beq.w	80082f6 <__adddf3+0x1da>
 80081a8:	f1a4 0401 	sub.w	r4, r4, #1
 80081ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80081b0:	db0d      	blt.n	80081ce <__adddf3+0xb2>
 80081b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80081b6:	fa22 f205 	lsr.w	r2, r2, r5
 80081ba:	1880      	adds	r0, r0, r2
 80081bc:	f141 0100 	adc.w	r1, r1, #0
 80081c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081c4:	1880      	adds	r0, r0, r2
 80081c6:	fa43 f305 	asr.w	r3, r3, r5
 80081ca:	4159      	adcs	r1, r3
 80081cc:	e00e      	b.n	80081ec <__adddf3+0xd0>
 80081ce:	f1a5 0520 	sub.w	r5, r5, #32
 80081d2:	f10e 0e20 	add.w	lr, lr, #32
 80081d6:	2a01      	cmp	r2, #1
 80081d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081dc:	bf28      	it	cs
 80081de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081e2:	fa43 f305 	asr.w	r3, r3, r5
 80081e6:	18c0      	adds	r0, r0, r3
 80081e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80081f0:	d507      	bpl.n	8008202 <__adddf3+0xe6>
 80081f2:	f04f 0e00 	mov.w	lr, #0
 80081f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8008202:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008206:	d31b      	bcc.n	8008240 <__adddf3+0x124>
 8008208:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800820c:	d30c      	bcc.n	8008228 <__adddf3+0x10c>
 800820e:	0849      	lsrs	r1, r1, #1
 8008210:	ea5f 0030 	movs.w	r0, r0, rrx
 8008214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008218:	f104 0401 	add.w	r4, r4, #1
 800821c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008220:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8008224:	f080 809a 	bcs.w	800835c <__adddf3+0x240>
 8008228:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800822c:	bf08      	it	eq
 800822e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008232:	f150 0000 	adcs.w	r0, r0, #0
 8008236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800823a:	ea41 0105 	orr.w	r1, r1, r5
 800823e:	bd30      	pop	{r4, r5, pc}
 8008240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008244:	4140      	adcs	r0, r0
 8008246:	eb41 0101 	adc.w	r1, r1, r1
 800824a:	3c01      	subs	r4, #1
 800824c:	bf28      	it	cs
 800824e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8008252:	d2e9      	bcs.n	8008228 <__adddf3+0x10c>
 8008254:	f091 0f00 	teq	r1, #0
 8008258:	bf04      	itt	eq
 800825a:	4601      	moveq	r1, r0
 800825c:	2000      	moveq	r0, #0
 800825e:	fab1 f381 	clz	r3, r1
 8008262:	bf08      	it	eq
 8008264:	3320      	addeq	r3, #32
 8008266:	f1a3 030b 	sub.w	r3, r3, #11
 800826a:	f1b3 0220 	subs.w	r2, r3, #32
 800826e:	da0c      	bge.n	800828a <__adddf3+0x16e>
 8008270:	320c      	adds	r2, #12
 8008272:	dd08      	ble.n	8008286 <__adddf3+0x16a>
 8008274:	f102 0c14 	add.w	ip, r2, #20
 8008278:	f1c2 020c 	rsb	r2, r2, #12
 800827c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008280:	fa21 f102 	lsr.w	r1, r1, r2
 8008284:	e00c      	b.n	80082a0 <__adddf3+0x184>
 8008286:	f102 0214 	add.w	r2, r2, #20
 800828a:	bfd8      	it	le
 800828c:	f1c2 0c20 	rsble	ip, r2, #32
 8008290:	fa01 f102 	lsl.w	r1, r1, r2
 8008294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008298:	bfdc      	itt	le
 800829a:	ea41 010c 	orrle.w	r1, r1, ip
 800829e:	4090      	lslle	r0, r2
 80082a0:	1ae4      	subs	r4, r4, r3
 80082a2:	bfa2      	ittt	ge
 80082a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80082a8:	4329      	orrge	r1, r5
 80082aa:	bd30      	popge	{r4, r5, pc}
 80082ac:	ea6f 0404 	mvn.w	r4, r4
 80082b0:	3c1f      	subs	r4, #31
 80082b2:	da1c      	bge.n	80082ee <__adddf3+0x1d2>
 80082b4:	340c      	adds	r4, #12
 80082b6:	dc0e      	bgt.n	80082d6 <__adddf3+0x1ba>
 80082b8:	f104 0414 	add.w	r4, r4, #20
 80082bc:	f1c4 0220 	rsb	r2, r4, #32
 80082c0:	fa20 f004 	lsr.w	r0, r0, r4
 80082c4:	fa01 f302 	lsl.w	r3, r1, r2
 80082c8:	ea40 0003 	orr.w	r0, r0, r3
 80082cc:	fa21 f304 	lsr.w	r3, r1, r4
 80082d0:	ea45 0103 	orr.w	r1, r5, r3
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f1c4 040c 	rsb	r4, r4, #12
 80082da:	f1c4 0220 	rsb	r2, r4, #32
 80082de:	fa20 f002 	lsr.w	r0, r0, r2
 80082e2:	fa01 f304 	lsl.w	r3, r1, r4
 80082e6:	ea40 0003 	orr.w	r0, r0, r3
 80082ea:	4629      	mov	r1, r5
 80082ec:	bd30      	pop	{r4, r5, pc}
 80082ee:	fa21 f004 	lsr.w	r0, r1, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	bd30      	pop	{r4, r5, pc}
 80082f6:	f094 0f00 	teq	r4, #0
 80082fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80082fe:	bf06      	itte	eq
 8008300:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8008304:	3401      	addeq	r4, #1
 8008306:	3d01      	subne	r5, #1
 8008308:	e74e      	b.n	80081a8 <__adddf3+0x8c>
 800830a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800830e:	bf18      	it	ne
 8008310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008314:	d029      	beq.n	800836a <__adddf3+0x24e>
 8008316:	ea94 0f05 	teq	r4, r5
 800831a:	bf08      	it	eq
 800831c:	ea90 0f02 	teqeq	r0, r2
 8008320:	d005      	beq.n	800832e <__adddf3+0x212>
 8008322:	ea54 0c00 	orrs.w	ip, r4, r0
 8008326:	bf04      	itt	eq
 8008328:	4619      	moveq	r1, r3
 800832a:	4610      	moveq	r0, r2
 800832c:	bd30      	pop	{r4, r5, pc}
 800832e:	ea91 0f03 	teq	r1, r3
 8008332:	bf1e      	ittt	ne
 8008334:	2100      	movne	r1, #0
 8008336:	2000      	movne	r0, #0
 8008338:	bd30      	popne	{r4, r5, pc}
 800833a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800833e:	d105      	bne.n	800834c <__adddf3+0x230>
 8008340:	0040      	lsls	r0, r0, #1
 8008342:	4149      	adcs	r1, r1
 8008344:	bf28      	it	cs
 8008346:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800834a:	bd30      	pop	{r4, r5, pc}
 800834c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8008350:	bf3c      	itt	cc
 8008352:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8008356:	bd30      	popcc	{r4, r5, pc}
 8008358:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800835c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8008360:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008364:	f04f 0000 	mov.w	r0, #0
 8008368:	bd30      	pop	{r4, r5, pc}
 800836a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800836e:	bf1a      	itte	ne
 8008370:	4619      	movne	r1, r3
 8008372:	4610      	movne	r0, r2
 8008374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008378:	bf1c      	itt	ne
 800837a:	460b      	movne	r3, r1
 800837c:	4602      	movne	r2, r0
 800837e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008382:	bf06      	itte	eq
 8008384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008388:	ea91 0f03 	teqeq	r1, r3
 800838c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8008390:	bd30      	pop	{r4, r5, pc}
 8008392:	bf00      	nop

08008394 <__aeabi_ui2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083a8:	f04f 0500 	mov.w	r5, #0
 80083ac:	f04f 0100 	mov.w	r1, #0
 80083b0:	e750      	b.n	8008254 <__adddf3+0x138>
 80083b2:	bf00      	nop

080083b4 <__aeabi_i2d>:
 80083b4:	f090 0f00 	teq	r0, #0
 80083b8:	bf04      	itt	eq
 80083ba:	2100      	moveq	r1, #0
 80083bc:	4770      	bxeq	lr
 80083be:	b530      	push	{r4, r5, lr}
 80083c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80083c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80083c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80083cc:	bf48      	it	mi
 80083ce:	4240      	negmi	r0, r0
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	e73e      	b.n	8008254 <__adddf3+0x138>
 80083d6:	bf00      	nop

080083d8 <__aeabi_f2d>:
 80083d8:	0042      	lsls	r2, r0, #1
 80083da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083de:	ea4f 0131 	mov.w	r1, r1, rrx
 80083e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083e6:	bf1f      	itttt	ne
 80083e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80083ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80083f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80083f4:	4770      	bxne	lr
 80083f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80083fa:	bf08      	it	eq
 80083fc:	4770      	bxeq	lr
 80083fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8008402:	bf04      	itt	eq
 8008404:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8008408:	4770      	bxeq	lr
 800840a:	b530      	push	{r4, r5, lr}
 800840c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8008410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8008414:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008418:	e71c      	b.n	8008254 <__adddf3+0x138>
 800841a:	bf00      	nop

0800841c <__aeabi_ul2d>:
 800841c:	ea50 0201 	orrs.w	r2, r0, r1
 8008420:	bf08      	it	eq
 8008422:	4770      	bxeq	lr
 8008424:	b530      	push	{r4, r5, lr}
 8008426:	f04f 0500 	mov.w	r5, #0
 800842a:	e00a      	b.n	8008442 <__aeabi_l2d+0x16>

0800842c <__aeabi_l2d>:
 800842c:	ea50 0201 	orrs.w	r2, r0, r1
 8008430:	bf08      	it	eq
 8008432:	4770      	bxeq	lr
 8008434:	b530      	push	{r4, r5, lr}
 8008436:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800843a:	d502      	bpl.n	8008442 <__aeabi_l2d+0x16>
 800843c:	4240      	negs	r0, r0
 800843e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008442:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8008446:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800844a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800844e:	f43f aed8 	beq.w	8008202 <__adddf3+0xe6>
 8008452:	f04f 0203 	mov.w	r2, #3
 8008456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800845a:	bf18      	it	ne
 800845c:	3203      	addne	r2, #3
 800845e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008462:	bf18      	it	ne
 8008464:	3203      	addne	r2, #3
 8008466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800846a:	f1c2 0320 	rsb	r3, r2, #32
 800846e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008472:	fa20 f002 	lsr.w	r0, r0, r2
 8008476:	fa01 fe03 	lsl.w	lr, r1, r3
 800847a:	ea40 000e 	orr.w	r0, r0, lr
 800847e:	fa21 f102 	lsr.w	r1, r1, r2
 8008482:	4414      	add	r4, r2
 8008484:	e6bd      	b.n	8008202 <__adddf3+0xe6>
 8008486:	bf00      	nop

08008488 <__aeabi_dmul>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800848e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8008492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008496:	bf1d      	ittte	ne
 8008498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800849c:	ea94 0f0c 	teqne	r4, ip
 80084a0:	ea95 0f0c 	teqne	r5, ip
 80084a4:	f000 f8de 	bleq	8008664 <__aeabi_dmul+0x1dc>
 80084a8:	442c      	add	r4, r5
 80084aa:	ea81 0603 	eor.w	r6, r1, r3
 80084ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80084b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80084b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80084ba:	bf18      	it	ne
 80084bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80084c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084c8:	d038      	beq.n	800853c <__aeabi_dmul+0xb4>
 80084ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ce:	f04f 0500 	mov.w	r5, #0
 80084d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80084da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084de:	f04f 0600 	mov.w	r6, #0
 80084e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084e6:	f09c 0f00 	teq	ip, #0
 80084ea:	bf18      	it	ne
 80084ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80084f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80084f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80084f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80084fc:	d204      	bcs.n	8008508 <__aeabi_dmul+0x80>
 80084fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008502:	416d      	adcs	r5, r5
 8008504:	eb46 0606 	adc.w	r6, r6, r6
 8008508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800850c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800851c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8008520:	bf88      	it	hi
 8008522:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008526:	d81e      	bhi.n	8008566 <__aeabi_dmul+0xde>
 8008528:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800852c:	bf08      	it	eq
 800852e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008532:	f150 0000 	adcs.w	r0, r0, #0
 8008536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8008540:	ea46 0101 	orr.w	r1, r6, r1
 8008544:	ea40 0002 	orr.w	r0, r0, r2
 8008548:	ea81 0103 	eor.w	r1, r1, r3
 800854c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008550:	bfc2      	ittt	gt
 8008552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800855a:	bd70      	popgt	{r4, r5, r6, pc}
 800855c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008560:	f04f 0e00 	mov.w	lr, #0
 8008564:	3c01      	subs	r4, #1
 8008566:	f300 80ab 	bgt.w	80086c0 <__aeabi_dmul+0x238>
 800856a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800856e:	bfde      	ittt	le
 8008570:	2000      	movle	r0, #0
 8008572:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8008576:	bd70      	pople	{r4, r5, r6, pc}
 8008578:	f1c4 0400 	rsb	r4, r4, #0
 800857c:	3c20      	subs	r4, #32
 800857e:	da35      	bge.n	80085ec <__aeabi_dmul+0x164>
 8008580:	340c      	adds	r4, #12
 8008582:	dc1b      	bgt.n	80085bc <__aeabi_dmul+0x134>
 8008584:	f104 0414 	add.w	r4, r4, #20
 8008588:	f1c4 0520 	rsb	r5, r4, #32
 800858c:	fa00 f305 	lsl.w	r3, r0, r5
 8008590:	fa20 f004 	lsr.w	r0, r0, r4
 8008594:	fa01 f205 	lsl.w	r2, r1, r5
 8008598:	ea40 0002 	orr.w	r0, r0, r2
 800859c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80085a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80085a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085a8:	fa21 f604 	lsr.w	r6, r1, r4
 80085ac:	eb42 0106 	adc.w	r1, r2, r6
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 040c 	rsb	r4, r4, #12
 80085c0:	f1c4 0520 	rsb	r5, r4, #32
 80085c4:	fa00 f304 	lsl.w	r3, r0, r4
 80085c8:	fa20 f005 	lsr.w	r0, r0, r5
 80085cc:	fa01 f204 	lsl.w	r2, r1, r4
 80085d0:	ea40 0002 	orr.w	r0, r0, r2
 80085d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80085d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085dc:	f141 0100 	adc.w	r1, r1, #0
 80085e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085e4:	bf08      	it	eq
 80085e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f1c4 0520 	rsb	r5, r4, #32
 80085f0:	fa00 f205 	lsl.w	r2, r0, r5
 80085f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085f8:	fa20 f304 	lsr.w	r3, r0, r4
 80085fc:	fa01 f205 	lsl.w	r2, r1, r5
 8008600:	ea43 0302 	orr.w	r3, r3, r2
 8008604:	fa21 f004 	lsr.w	r0, r1, r4
 8008608:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800860c:	fa21 f204 	lsr.w	r2, r1, r4
 8008610:	ea20 0002 	bic.w	r0, r0, r2
 8008614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800861c:	bf08      	it	eq
 800861e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f094 0f00 	teq	r4, #0
 8008628:	d10f      	bne.n	800864a <__aeabi_dmul+0x1c2>
 800862a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800862e:	0040      	lsls	r0, r0, #1
 8008630:	eb41 0101 	adc.w	r1, r1, r1
 8008634:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8008638:	bf08      	it	eq
 800863a:	3c01      	subeq	r4, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1a6>
 800863e:	ea41 0106 	orr.w	r1, r1, r6
 8008642:	f095 0f00 	teq	r5, #0
 8008646:	bf18      	it	ne
 8008648:	4770      	bxne	lr
 800864a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800864e:	0052      	lsls	r2, r2, #1
 8008650:	eb43 0303 	adc.w	r3, r3, r3
 8008654:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8008658:	bf08      	it	eq
 800865a:	3d01      	subeq	r5, #1
 800865c:	d0f7      	beq.n	800864e <__aeabi_dmul+0x1c6>
 800865e:	ea43 0306 	orr.w	r3, r3, r6
 8008662:	4770      	bx	lr
 8008664:	ea94 0f0c 	teq	r4, ip
 8008668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800866c:	bf18      	it	ne
 800866e:	ea95 0f0c 	teqne	r5, ip
 8008672:	d00c      	beq.n	800868e <__aeabi_dmul+0x206>
 8008674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008678:	bf18      	it	ne
 800867a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867e:	d1d1      	bne.n	8008624 <__aeabi_dmul+0x19c>
 8008680:	ea81 0103 	eor.w	r1, r1, r3
 8008684:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8008688:	f04f 0000 	mov.w	r0, #0
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008692:	bf06      	itte	eq
 8008694:	4610      	moveq	r0, r2
 8008696:	4619      	moveq	r1, r3
 8008698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800869c:	d019      	beq.n	80086d2 <__aeabi_dmul+0x24a>
 800869e:	ea94 0f0c 	teq	r4, ip
 80086a2:	d102      	bne.n	80086aa <__aeabi_dmul+0x222>
 80086a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80086a8:	d113      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086aa:	ea95 0f0c 	teq	r5, ip
 80086ae:	d105      	bne.n	80086bc <__aeabi_dmul+0x234>
 80086b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80086b4:	bf1c      	itt	ne
 80086b6:	4610      	movne	r0, r2
 80086b8:	4619      	movne	r1, r3
 80086ba:	d10a      	bne.n	80086d2 <__aeabi_dmul+0x24a>
 80086bc:	ea81 0103 	eor.w	r1, r1, r3
 80086c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80086c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086cc:	f04f 0000 	mov.w	r0, #0
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80086d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80086da:	bd70      	pop	{r4, r5, r6, pc}

080086dc <__aeabi_ddiv>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80086e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80086e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ea:	bf1d      	ittte	ne
 80086ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086f0:	ea94 0f0c 	teqne	r4, ip
 80086f4:	ea95 0f0c 	teqne	r5, ip
 80086f8:	f000 f8a7 	bleq	800884a <__aeabi_ddiv+0x16e>
 80086fc:	eba4 0405 	sub.w	r4, r4, r5
 8008700:	ea81 0e03 	eor.w	lr, r1, r3
 8008704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800870c:	f000 8088 	beq.w	8008820 <__aeabi_ddiv+0x144>
 8008710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008714:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800871c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800872c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008730:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8008734:	429d      	cmp	r5, r3
 8008736:	bf08      	it	eq
 8008738:	4296      	cmpeq	r6, r2
 800873a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800873e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8008742:	d202      	bcs.n	800874a <__aeabi_ddiv+0x6e>
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	ea4f 0232 	mov.w	r2, r2, rrx
 800874a:	1ab6      	subs	r6, r6, r2
 800874c:	eb65 0503 	sbc.w	r5, r5, r3
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800875a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008788:	085b      	lsrs	r3, r3, #1
 800878a:	ea4f 0232 	mov.w	r2, r2, rrx
 800878e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008796:	bf22      	ittt	cs
 8008798:	1ab6      	subcs	r6, r6, r2
 800879a:	4675      	movcs	r5, lr
 800879c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80087aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087ae:	bf22      	ittt	cs
 80087b0:	1ab6      	subcs	r6, r6, r2
 80087b2:	4675      	movcs	r5, lr
 80087b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80087b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80087bc:	d018      	beq.n	80087f0 <__aeabi_ddiv+0x114>
 80087be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087da:	d1c0      	bne.n	800875e <__aeabi_ddiv+0x82>
 80087dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087e0:	d10b      	bne.n	80087fa <__aeabi_ddiv+0x11e>
 80087e2:	ea41 0100 	orr.w	r1, r1, r0
 80087e6:	f04f 0000 	mov.w	r0, #0
 80087ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80087ee:	e7b6      	b.n	800875e <__aeabi_ddiv+0x82>
 80087f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80087f4:	bf04      	itt	eq
 80087f6:	4301      	orreq	r1, r0
 80087f8:	2000      	moveq	r0, #0
 80087fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80087fe:	bf88      	it	hi
 8008800:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8008804:	f63f aeaf 	bhi.w	8008566 <__aeabi_dmul+0xde>
 8008808:	ebb5 0c03 	subs.w	ip, r5, r3
 800880c:	bf04      	itt	eq
 800880e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008816:	f150 0000 	adcs.w	r0, r0, #0
 800881a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8008824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800882c:	bfc2      	ittt	gt
 800882e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008836:	bd70      	popgt	{r4, r5, r6, pc}
 8008838:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800883c:	f04f 0e00 	mov.w	lr, #0
 8008840:	3c01      	subs	r4, #1
 8008842:	e690      	b.n	8008566 <__aeabi_dmul+0xde>
 8008844:	ea45 0e06 	orr.w	lr, r5, r6
 8008848:	e68d      	b.n	8008566 <__aeabi_dmul+0xde>
 800884a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800884e:	ea94 0f0c 	teq	r4, ip
 8008852:	bf08      	it	eq
 8008854:	ea95 0f0c 	teqeq	r5, ip
 8008858:	f43f af3b 	beq.w	80086d2 <__aeabi_dmul+0x24a>
 800885c:	ea94 0f0c 	teq	r4, ip
 8008860:	d10a      	bne.n	8008878 <__aeabi_ddiv+0x19c>
 8008862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008866:	f47f af34 	bne.w	80086d2 <__aeabi_dmul+0x24a>
 800886a:	ea95 0f0c 	teq	r5, ip
 800886e:	f47f af25 	bne.w	80086bc <__aeabi_dmul+0x234>
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	e72c      	b.n	80086d2 <__aeabi_dmul+0x24a>
 8008878:	ea95 0f0c 	teq	r5, ip
 800887c:	d106      	bne.n	800888c <__aeabi_ddiv+0x1b0>
 800887e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008882:	f43f aefd 	beq.w	8008680 <__aeabi_dmul+0x1f8>
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	e722      	b.n	80086d2 <__aeabi_dmul+0x24a>
 800888c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008890:	bf18      	it	ne
 8008892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008896:	f47f aec5 	bne.w	8008624 <__aeabi_dmul+0x19c>
 800889a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800889e:	f47f af0d 	bne.w	80086bc <__aeabi_dmul+0x234>
 80088a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80088a6:	f47f aeeb 	bne.w	8008680 <__aeabi_dmul+0x1f8>
 80088aa:	e712      	b.n	80086d2 <__aeabi_dmul+0x24a>

080088ac <__gedf2>:
 80088ac:	f04f 3cff 	mov.w	ip, #4294967295
 80088b0:	e006      	b.n	80088c0 <__cmpdf2+0x4>
 80088b2:	bf00      	nop

080088b4 <__ledf2>:
 80088b4:	f04f 0c01 	mov.w	ip, #1
 80088b8:	e002      	b.n	80088c0 <__cmpdf2+0x4>
 80088ba:	bf00      	nop

080088bc <__cmpdf2>:
 80088bc:	f04f 0c01 	mov.w	ip, #1
 80088c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088d0:	bf18      	it	ne
 80088d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088d6:	d01b      	beq.n	8008910 <__cmpdf2+0x54>
 80088d8:	b001      	add	sp, #4
 80088da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088de:	bf0c      	ite	eq
 80088e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088e4:	ea91 0f03 	teqne	r1, r3
 80088e8:	bf02      	ittt	eq
 80088ea:	ea90 0f02 	teqeq	r0, r2
 80088ee:	2000      	moveq	r0, #0
 80088f0:	4770      	bxeq	lr
 80088f2:	f110 0f00 	cmn.w	r0, #0
 80088f6:	ea91 0f03 	teq	r1, r3
 80088fa:	bf58      	it	pl
 80088fc:	4299      	cmppl	r1, r3
 80088fe:	bf08      	it	eq
 8008900:	4290      	cmpeq	r0, r2
 8008902:	bf2c      	ite	cs
 8008904:	17d8      	asrcs	r0, r3, #31
 8008906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800890a:	f040 0001 	orr.w	r0, r0, #1
 800890e:	4770      	bx	lr
 8008910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008918:	d102      	bne.n	8008920 <__cmpdf2+0x64>
 800891a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800891e:	d107      	bne.n	8008930 <__cmpdf2+0x74>
 8008920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008928:	d1d6      	bne.n	80088d8 <__cmpdf2+0x1c>
 800892a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800892e:	d0d3      	beq.n	80088d8 <__cmpdf2+0x1c>
 8008930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <__aeabi_cdrcmple>:
 8008938:	4684      	mov	ip, r0
 800893a:	4610      	mov	r0, r2
 800893c:	4662      	mov	r2, ip
 800893e:	468c      	mov	ip, r1
 8008940:	4619      	mov	r1, r3
 8008942:	4663      	mov	r3, ip
 8008944:	e000      	b.n	8008948 <__aeabi_cdcmpeq>
 8008946:	bf00      	nop

08008948 <__aeabi_cdcmpeq>:
 8008948:	b501      	push	{r0, lr}
 800894a:	f7ff ffb7 	bl	80088bc <__cmpdf2>
 800894e:	2800      	cmp	r0, #0
 8008950:	bf48      	it	mi
 8008952:	f110 0f00 	cmnmi.w	r0, #0
 8008956:	bd01      	pop	{r0, pc}

08008958 <__aeabi_dcmpeq>:
 8008958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800895c:	f7ff fff4 	bl	8008948 <__aeabi_cdcmpeq>
 8008960:	bf0c      	ite	eq
 8008962:	2001      	moveq	r0, #1
 8008964:	2000      	movne	r0, #0
 8008966:	f85d fb08 	ldr.w	pc, [sp], #8
 800896a:	bf00      	nop

0800896c <__aeabi_dcmplt>:
 800896c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008970:	f7ff ffea 	bl	8008948 <__aeabi_cdcmpeq>
 8008974:	bf34      	ite	cc
 8008976:	2001      	movcc	r0, #1
 8008978:	2000      	movcs	r0, #0
 800897a:	f85d fb08 	ldr.w	pc, [sp], #8
 800897e:	bf00      	nop

08008980 <__aeabi_dcmple>:
 8008980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008984:	f7ff ffe0 	bl	8008948 <__aeabi_cdcmpeq>
 8008988:	bf94      	ite	ls
 800898a:	2001      	movls	r0, #1
 800898c:	2000      	movhi	r0, #0
 800898e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008992:	bf00      	nop

08008994 <__aeabi_dcmpge>:
 8008994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008998:	f7ff ffce 	bl	8008938 <__aeabi_cdrcmple>
 800899c:	bf94      	ite	ls
 800899e:	2001      	movls	r0, #1
 80089a0:	2000      	movhi	r0, #0
 80089a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089a6:	bf00      	nop

080089a8 <__aeabi_dcmpgt>:
 80089a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089ac:	f7ff ffc4 	bl	8008938 <__aeabi_cdrcmple>
 80089b0:	bf34      	ite	cc
 80089b2:	2001      	movcc	r0, #1
 80089b4:	2000      	movcs	r0, #0
 80089b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80089ba:	bf00      	nop

080089bc <__aeabi_dcmpun>:
 80089bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089c4:	d102      	bne.n	80089cc <__aeabi_dcmpun+0x10>
 80089c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089ca:	d10a      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089d4:	d102      	bne.n	80089dc <__aeabi_dcmpun+0x20>
 80089d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089da:	d102      	bne.n	80089e2 <__aeabi_dcmpun+0x26>
 80089dc:	f04f 0000 	mov.w	r0, #0
 80089e0:	4770      	bx	lr
 80089e2:	f04f 0001 	mov.w	r0, #1
 80089e6:	4770      	bx	lr

080089e8 <__aeabi_d2iz>:
 80089e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80089f0:	d215      	bcs.n	8008a1e <__aeabi_d2iz+0x36>
 80089f2:	d511      	bpl.n	8008a18 <__aeabi_d2iz+0x30>
 80089f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80089f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089fc:	d912      	bls.n	8008a24 <__aeabi_d2iz+0x3c>
 80089fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8008a12:	bf18      	it	ne
 8008a14:	4240      	negne	r0, r0
 8008a16:	4770      	bx	lr
 8008a18:	f04f 0000 	mov.w	r0, #0
 8008a1c:	4770      	bx	lr
 8008a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a22:	d105      	bne.n	8008a30 <__aeabi_d2iz+0x48>
 8008a24:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8008a28:	bf08      	it	eq
 8008a2a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8008a2e:	4770      	bx	lr
 8008a30:	f04f 0000 	mov.w	r0, #0
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop

08008a38 <__aeabi_d2uiz>:
 8008a38:	004a      	lsls	r2, r1, #1
 8008a3a:	d211      	bcs.n	8008a60 <__aeabi_d2uiz+0x28>
 8008a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8008a40:	d211      	bcs.n	8008a66 <__aeabi_d2uiz+0x2e>
 8008a42:	d50d      	bpl.n	8008a60 <__aeabi_d2uiz+0x28>
 8008a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8008a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a4c:	d40e      	bmi.n	8008a6c <__aeabi_d2uiz+0x34>
 8008a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a5e:	4770      	bx	lr
 8008a60:	f04f 0000 	mov.w	r0, #0
 8008a64:	4770      	bx	lr
 8008a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a6a:	d102      	bne.n	8008a72 <__aeabi_d2uiz+0x3a>
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	4770      	bx	lr
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	4770      	bx	lr

08008a78 <__aeabi_d2f>:
 8008a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8008a80:	bf24      	itt	cs
 8008a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8008a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8008a8a:	d90d      	bls.n	8008aa8 <__aeabi_d2f+0x30>
 8008a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8008a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8008a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008aa0:	bf08      	it	eq
 8008aa2:	f020 0001 	biceq.w	r0, r0, #1
 8008aa6:	4770      	bx	lr
 8008aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8008aac:	d121      	bne.n	8008af2 <__aeabi_d2f+0x7a>
 8008aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8008ab2:	bfbc      	itt	lt
 8008ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8008ab8:	4770      	bxlt	lr
 8008aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8008abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008ac2:	f1c2 0218 	rsb	r2, r2, #24
 8008ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8008ace:	fa20 f002 	lsr.w	r0, r0, r2
 8008ad2:	bf18      	it	ne
 8008ad4:	f040 0001 	orrne.w	r0, r0, #1
 8008ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ae4:	ea40 000c 	orr.w	r0, r0, ip
 8008ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8008aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008af0:	e7cc      	b.n	8008a8c <__aeabi_d2f+0x14>
 8008af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008af6:	d107      	bne.n	8008b08 <__aeabi_d2f+0x90>
 8008af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008afc:	bf1e      	ittt	ne
 8008afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8008b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8008b06:	4770      	bxne	lr
 8008b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8008b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8008b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop

08008b18 <__aeabi_uldivmod>:
 8008b18:	b953      	cbnz	r3, 8008b30 <__aeabi_uldivmod+0x18>
 8008b1a:	b94a      	cbnz	r2, 8008b30 <__aeabi_uldivmod+0x18>
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	bf08      	it	eq
 8008b20:	2800      	cmpeq	r0, #0
 8008b22:	bf1c      	itt	ne
 8008b24:	f04f 31ff 	movne.w	r1, #4294967295
 8008b28:	f04f 30ff 	movne.w	r0, #4294967295
 8008b2c:	f000 b9a0 	b.w	8008e70 <__aeabi_idiv0>
 8008b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b38:	f000 f83c 	bl	8008bb4 <__udivmoddi4>
 8008b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b44:	b004      	add	sp, #16
 8008b46:	4770      	bx	lr

08008b48 <__aeabi_d2lz>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4604      	mov	r4, r0
 8008b50:	460d      	mov	r5, r1
 8008b52:	f7ff ff0b 	bl	800896c <__aeabi_dcmplt>
 8008b56:	b928      	cbnz	r0, 8008b64 <__aeabi_d2lz+0x1c>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b60:	f000 b80a 	b.w	8008b78 <__aeabi_d2ulz>
 8008b64:	4620      	mov	r0, r4
 8008b66:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8008b6a:	f000 f805 	bl	8008b78 <__aeabi_d2ulz>
 8008b6e:	4240      	negs	r0, r0
 8008b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop

08008b78 <__aeabi_d2ulz>:
 8008b78:	b5d0      	push	{r4, r6, r7, lr}
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bac <__aeabi_d2ulz+0x34>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460f      	mov	r7, r1
 8008b82:	f7ff fc81 	bl	8008488 <__aeabi_dmul>
 8008b86:	f7ff ff57 	bl	8008a38 <__aeabi_d2uiz>
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	f7ff fc02 	bl	8008394 <__aeabi_ui2d>
 8008b90:	4b07      	ldr	r3, [pc, #28]	@ (8008bb0 <__aeabi_d2ulz+0x38>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	f7ff fc78 	bl	8008488 <__aeabi_dmul>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7ff faba 	bl	8008118 <__aeabi_dsub>
 8008ba4:	f7ff ff48 	bl	8008a38 <__aeabi_d2uiz>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	bdd0      	pop	{r4, r6, r7, pc}
 8008bac:	3df00000 	.word	0x3df00000
 8008bb0:	41f00000 	.word	0x41f00000

08008bb4 <__udivmoddi4>:
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	9d08      	ldr	r5, [sp, #32]
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d14e      	bne.n	8008c5e <__udivmoddi4+0xaa>
 8008bc0:	4694      	mov	ip, r2
 8008bc2:	458c      	cmp	ip, r1
 8008bc4:	4686      	mov	lr, r0
 8008bc6:	fab2 f282 	clz	r2, r2
 8008bca:	d962      	bls.n	8008c92 <__udivmoddi4+0xde>
 8008bcc:	b14a      	cbz	r2, 8008be2 <__udivmoddi4+0x2e>
 8008bce:	f1c2 0320 	rsb	r3, r2, #32
 8008bd2:	4091      	lsls	r1, r2
 8008bd4:	fa20 f303 	lsr.w	r3, r0, r3
 8008bd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8008bdc:	4319      	orrs	r1, r3
 8008bde:	fa00 fe02 	lsl.w	lr, r0, r2
 8008be2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008be6:	fa1f f68c 	uxth.w	r6, ip
 8008bea:	fbb1 f4f7 	udiv	r4, r1, r7
 8008bee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008bf2:	fb07 1114 	mls	r1, r7, r4, r1
 8008bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bfa:	fb04 f106 	mul.w	r1, r4, r6
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	d90a      	bls.n	8008c18 <__udivmoddi4+0x64>
 8008c02:	eb1c 0303 	adds.w	r3, ip, r3
 8008c06:	f104 30ff 	add.w	r0, r4, #4294967295
 8008c0a:	f080 8112 	bcs.w	8008e32 <__udivmoddi4+0x27e>
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	f240 810f 	bls.w	8008e32 <__udivmoddi4+0x27e>
 8008c14:	3c02      	subs	r4, #2
 8008c16:	4463      	add	r3, ip
 8008c18:	1a59      	subs	r1, r3, r1
 8008c1a:	fa1f f38e 	uxth.w	r3, lr
 8008c1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8008c22:	fb07 1110 	mls	r1, r7, r0, r1
 8008c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c2a:	fb00 f606 	mul.w	r6, r0, r6
 8008c2e:	429e      	cmp	r6, r3
 8008c30:	d90a      	bls.n	8008c48 <__udivmoddi4+0x94>
 8008c32:	eb1c 0303 	adds.w	r3, ip, r3
 8008c36:	f100 31ff 	add.w	r1, r0, #4294967295
 8008c3a:	f080 80fc 	bcs.w	8008e36 <__udivmoddi4+0x282>
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	f240 80f9 	bls.w	8008e36 <__udivmoddi4+0x282>
 8008c44:	4463      	add	r3, ip
 8008c46:	3802      	subs	r0, #2
 8008c48:	1b9b      	subs	r3, r3, r6
 8008c4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008c4e:	2100      	movs	r1, #0
 8008c50:	b11d      	cbz	r5, 8008c5a <__udivmoddi4+0xa6>
 8008c52:	40d3      	lsrs	r3, r2
 8008c54:	2200      	movs	r2, #0
 8008c56:	e9c5 3200 	strd	r3, r2, [r5]
 8008c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	d905      	bls.n	8008c6e <__udivmoddi4+0xba>
 8008c62:	b10d      	cbz	r5, 8008c68 <__udivmoddi4+0xb4>
 8008c64:	e9c5 0100 	strd	r0, r1, [r5]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	e7f5      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008c6e:	fab3 f183 	clz	r1, r3
 8008c72:	2900      	cmp	r1, #0
 8008c74:	d146      	bne.n	8008d04 <__udivmoddi4+0x150>
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d302      	bcc.n	8008c80 <__udivmoddi4+0xcc>
 8008c7a:	4290      	cmp	r0, r2
 8008c7c:	f0c0 80f0 	bcc.w	8008e60 <__udivmoddi4+0x2ac>
 8008c80:	1a86      	subs	r6, r0, r2
 8008c82:	eb64 0303 	sbc.w	r3, r4, r3
 8008c86:	2001      	movs	r0, #1
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	d0e6      	beq.n	8008c5a <__udivmoddi4+0xa6>
 8008c8c:	e9c5 6300 	strd	r6, r3, [r5]
 8008c90:	e7e3      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008c92:	2a00      	cmp	r2, #0
 8008c94:	f040 8090 	bne.w	8008db8 <__udivmoddi4+0x204>
 8008c98:	eba1 040c 	sub.w	r4, r1, ip
 8008c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008ca0:	fa1f f78c 	uxth.w	r7, ip
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fbb4 f6f8 	udiv	r6, r4, r8
 8008caa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8008cae:	fb08 4416 	mls	r4, r8, r6, r4
 8008cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008cb6:	fb07 f006 	mul.w	r0, r7, r6
 8008cba:	4298      	cmp	r0, r3
 8008cbc:	d908      	bls.n	8008cd0 <__udivmoddi4+0x11c>
 8008cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8008cc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8008cc6:	d202      	bcs.n	8008cce <__udivmoddi4+0x11a>
 8008cc8:	4298      	cmp	r0, r3
 8008cca:	f200 80cd 	bhi.w	8008e68 <__udivmoddi4+0x2b4>
 8008cce:	4626      	mov	r6, r4
 8008cd0:	1a1c      	subs	r4, r3, r0
 8008cd2:	fa1f f38e 	uxth.w	r3, lr
 8008cd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8008cda:	fb08 4410 	mls	r4, r8, r0, r4
 8008cde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ce2:	fb00 f707 	mul.w	r7, r0, r7
 8008ce6:	429f      	cmp	r7, r3
 8008ce8:	d908      	bls.n	8008cfc <__udivmoddi4+0x148>
 8008cea:	eb1c 0303 	adds.w	r3, ip, r3
 8008cee:	f100 34ff 	add.w	r4, r0, #4294967295
 8008cf2:	d202      	bcs.n	8008cfa <__udivmoddi4+0x146>
 8008cf4:	429f      	cmp	r7, r3
 8008cf6:	f200 80b0 	bhi.w	8008e5a <__udivmoddi4+0x2a6>
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	1bdb      	subs	r3, r3, r7
 8008cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008d02:	e7a5      	b.n	8008c50 <__udivmoddi4+0x9c>
 8008d04:	f1c1 0620 	rsb	r6, r1, #32
 8008d08:	408b      	lsls	r3, r1
 8008d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8008d0e:	431f      	orrs	r7, r3
 8008d10:	fa20 fc06 	lsr.w	ip, r0, r6
 8008d14:	fa04 f301 	lsl.w	r3, r4, r1
 8008d18:	ea43 030c 	orr.w	r3, r3, ip
 8008d1c:	40f4      	lsrs	r4, r6
 8008d1e:	fa00 f801 	lsl.w	r8, r0, r1
 8008d22:	0c38      	lsrs	r0, r7, #16
 8008d24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008d28:	fbb4 fef0 	udiv	lr, r4, r0
 8008d2c:	fa1f fc87 	uxth.w	ip, r7
 8008d30:	fb00 441e 	mls	r4, r0, lr, r4
 8008d34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008d38:	fb0e f90c 	mul.w	r9, lr, ip
 8008d3c:	45a1      	cmp	r9, r4
 8008d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8008d42:	d90a      	bls.n	8008d5a <__udivmoddi4+0x1a6>
 8008d44:	193c      	adds	r4, r7, r4
 8008d46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008d4a:	f080 8084 	bcs.w	8008e56 <__udivmoddi4+0x2a2>
 8008d4e:	45a1      	cmp	r9, r4
 8008d50:	f240 8081 	bls.w	8008e56 <__udivmoddi4+0x2a2>
 8008d54:	f1ae 0e02 	sub.w	lr, lr, #2
 8008d58:	443c      	add	r4, r7
 8008d5a:	eba4 0409 	sub.w	r4, r4, r9
 8008d5e:	fa1f f983 	uxth.w	r9, r3
 8008d62:	fbb4 f3f0 	udiv	r3, r4, r0
 8008d66:	fb00 4413 	mls	r4, r0, r3, r4
 8008d6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008d6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8008d72:	45a4      	cmp	ip, r4
 8008d74:	d907      	bls.n	8008d86 <__udivmoddi4+0x1d2>
 8008d76:	193c      	adds	r4, r7, r4
 8008d78:	f103 30ff 	add.w	r0, r3, #4294967295
 8008d7c:	d267      	bcs.n	8008e4e <__udivmoddi4+0x29a>
 8008d7e:	45a4      	cmp	ip, r4
 8008d80:	d965      	bls.n	8008e4e <__udivmoddi4+0x29a>
 8008d82:	3b02      	subs	r3, #2
 8008d84:	443c      	add	r4, r7
 8008d86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008d8a:	fba0 9302 	umull	r9, r3, r0, r2
 8008d8e:	eba4 040c 	sub.w	r4, r4, ip
 8008d92:	429c      	cmp	r4, r3
 8008d94:	46ce      	mov	lr, r9
 8008d96:	469c      	mov	ip, r3
 8008d98:	d351      	bcc.n	8008e3e <__udivmoddi4+0x28a>
 8008d9a:	d04e      	beq.n	8008e3a <__udivmoddi4+0x286>
 8008d9c:	b155      	cbz	r5, 8008db4 <__udivmoddi4+0x200>
 8008d9e:	ebb8 030e 	subs.w	r3, r8, lr
 8008da2:	eb64 040c 	sbc.w	r4, r4, ip
 8008da6:	fa04 f606 	lsl.w	r6, r4, r6
 8008daa:	40cb      	lsrs	r3, r1
 8008dac:	431e      	orrs	r6, r3
 8008dae:	40cc      	lsrs	r4, r1
 8008db0:	e9c5 6400 	strd	r6, r4, [r5]
 8008db4:	2100      	movs	r1, #0
 8008db6:	e750      	b.n	8008c5a <__udivmoddi4+0xa6>
 8008db8:	f1c2 0320 	rsb	r3, r2, #32
 8008dbc:	fa20 f103 	lsr.w	r1, r0, r3
 8008dc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8008dc4:	fa24 f303 	lsr.w	r3, r4, r3
 8008dc8:	4094      	lsls	r4, r2
 8008dca:	430c      	orrs	r4, r1
 8008dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008dd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8008dd4:	fa1f f78c 	uxth.w	r7, ip
 8008dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ddc:	fb08 3110 	mls	r1, r8, r0, r3
 8008de0:	0c23      	lsrs	r3, r4, #16
 8008de2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008de6:	fb00 f107 	mul.w	r1, r0, r7
 8008dea:	4299      	cmp	r1, r3
 8008dec:	d908      	bls.n	8008e00 <__udivmoddi4+0x24c>
 8008dee:	eb1c 0303 	adds.w	r3, ip, r3
 8008df2:	f100 36ff 	add.w	r6, r0, #4294967295
 8008df6:	d22c      	bcs.n	8008e52 <__udivmoddi4+0x29e>
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	d92a      	bls.n	8008e52 <__udivmoddi4+0x29e>
 8008dfc:	3802      	subs	r0, #2
 8008dfe:	4463      	add	r3, ip
 8008e00:	1a5b      	subs	r3, r3, r1
 8008e02:	b2a4      	uxth	r4, r4
 8008e04:	fbb3 f1f8 	udiv	r1, r3, r8
 8008e08:	fb08 3311 	mls	r3, r8, r1, r3
 8008e0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008e10:	fb01 f307 	mul.w	r3, r1, r7
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d908      	bls.n	8008e2a <__udivmoddi4+0x276>
 8008e18:	eb1c 0404 	adds.w	r4, ip, r4
 8008e1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8008e20:	d213      	bcs.n	8008e4a <__udivmoddi4+0x296>
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	d911      	bls.n	8008e4a <__udivmoddi4+0x296>
 8008e26:	3902      	subs	r1, #2
 8008e28:	4464      	add	r4, ip
 8008e2a:	1ae4      	subs	r4, r4, r3
 8008e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e30:	e739      	b.n	8008ca6 <__udivmoddi4+0xf2>
 8008e32:	4604      	mov	r4, r0
 8008e34:	e6f0      	b.n	8008c18 <__udivmoddi4+0x64>
 8008e36:	4608      	mov	r0, r1
 8008e38:	e706      	b.n	8008c48 <__udivmoddi4+0x94>
 8008e3a:	45c8      	cmp	r8, r9
 8008e3c:	d2ae      	bcs.n	8008d9c <__udivmoddi4+0x1e8>
 8008e3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8008e42:	eb63 0c07 	sbc.w	ip, r3, r7
 8008e46:	3801      	subs	r0, #1
 8008e48:	e7a8      	b.n	8008d9c <__udivmoddi4+0x1e8>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	e7ed      	b.n	8008e2a <__udivmoddi4+0x276>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	e799      	b.n	8008d86 <__udivmoddi4+0x1d2>
 8008e52:	4630      	mov	r0, r6
 8008e54:	e7d4      	b.n	8008e00 <__udivmoddi4+0x24c>
 8008e56:	46d6      	mov	lr, sl
 8008e58:	e77f      	b.n	8008d5a <__udivmoddi4+0x1a6>
 8008e5a:	4463      	add	r3, ip
 8008e5c:	3802      	subs	r0, #2
 8008e5e:	e74d      	b.n	8008cfc <__udivmoddi4+0x148>
 8008e60:	4606      	mov	r6, r0
 8008e62:	4623      	mov	r3, r4
 8008e64:	4608      	mov	r0, r1
 8008e66:	e70f      	b.n	8008c88 <__udivmoddi4+0xd4>
 8008e68:	3e02      	subs	r6, #2
 8008e6a:	4463      	add	r3, ip
 8008e6c:	e730      	b.n	8008cd0 <__udivmoddi4+0x11c>
 8008e6e:	bf00      	nop

08008e70 <__aeabi_idiv0>:
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop

08008e74 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8008e74:	4770      	bx	lr
	...

08008e78 <HAL_DeInit>:
{
 8008e78:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8008e7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ea0 <HAL_DeInit+0x28>)
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008e82:	2400      	movs	r4, #0
 8008e84:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 8008e86:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8008e88:	625c      	str	r4, [r3, #36]	@ 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 8008e8a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8008e8c:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 8008e8e:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8008e90:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 8008e92:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8008e94:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 8008e96:	f7ff ffed 	bl	8008e74 <HAL_MspDeInit>
}
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023800 	.word	0x40023800

08008ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee4 <HAL_InitTick+0x40>)
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee8 <HAL_InitTick+0x44>)
 8008eb6:	6810      	ldr	r0, [r2, #0]
 8008eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8008ebc:	f000 f8d2 	bl	8009064 <HAL_SYSTICK_Config>
 8008ec0:	b968      	cbnz	r0, 8008ede <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ec2:	2c0f      	cmp	r4, #15
 8008ec4:	d901      	bls.n	8008eca <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e00a      	b.n	8008ee0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	f000 f8a5 	bl	8009020 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ed6:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <HAL_InitTick+0x48>)
 8008ed8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008eda:	2000      	movs	r0, #0
 8008edc:	e000      	b.n	8008ee0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8008ede:	2001      	movs	r0, #1
}
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000000 	.word	0x20000000
 8008ee8:	2000018c 	.word	0x2000018c
 8008eec:	20000004 	.word	0x20000004

08008ef0 <HAL_Init>:
{
 8008ef0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <HAL_Init+0x30>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008efa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f0a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f0c:	2003      	movs	r0, #3
 8008f0e:	f000 f875 	bl	8008ffc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f12:	2000      	movs	r0, #0
 8008f14:	f7ff ffc6 	bl	8008ea4 <HAL_InitTick>
  HAL_MspInit();
 8008f18:	f003 fb8a 	bl	800c630 <HAL_MspInit>
}
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	bd08      	pop	{r3, pc}
 8008f20:	40023c00 	.word	0x40023c00

08008f24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008f24:	4a03      	ldr	r2, [pc, #12]	@ (8008f34 <HAL_IncTick+0x10>)
 8008f26:	6811      	ldr	r1, [r2, #0]
 8008f28:	4b03      	ldr	r3, [pc, #12]	@ (8008f38 <HAL_IncTick+0x14>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	440b      	add	r3, r1
 8008f2e:	6013      	str	r3, [r2, #0]
}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000680 	.word	0x20000680
 8008f38:	20000000 	.word	0x20000000

08008f3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008f3c:	4b01      	ldr	r3, [pc, #4]	@ (8008f44 <HAL_GetTick+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
}
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20000680 	.word	0x20000680

08008f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008f4c:	f7ff fff6 	bl	8008f3c <HAL_GetTick>
 8008f50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f52:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008f56:	d002      	beq.n	8008f5e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f58:	4b04      	ldr	r3, [pc, #16]	@ (8008f6c <HAL_Delay+0x24>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f5e:	f7ff ffed 	bl	8008f3c <HAL_GetTick>
 8008f62:	1b40      	subs	r0, r0, r5
 8008f64:	42a0      	cmp	r0, r4
 8008f66:	d3fa      	bcc.n	8008f5e <HAL_Delay+0x16>
  {
  }
}
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000000 	.word	0x20000000

08008f70 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8008f70:	2800      	cmp	r0, #0
 8008f72:	db0c      	blt.n	8008f8e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f74:	f000 021f 	and.w	r2, r0, #31
 8008f78:	0940      	lsrs	r0, r0, #5
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4093      	lsls	r3, r2
 8008f7e:	3020      	adds	r0, #32
 8008f80:	4a03      	ldr	r2, [pc, #12]	@ (8008f90 <__NVIC_DisableIRQ+0x20>)
 8008f82:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008f86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008f8a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8008f8e:	4770      	bx	lr
 8008f90:	e000e100 	.word	0xe000e100

08008f94 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8008f94:	2800      	cmp	r0, #0
 8008f96:	db08      	blt.n	8008faa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f98:	0109      	lsls	r1, r1, #4
 8008f9a:	b2c9      	uxtb	r1, r1
 8008f9c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008fa0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008fa4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8008fa8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008faa:	f000 000f 	and.w	r0, r0, #15
 8008fae:	0109      	lsls	r1, r1, #4
 8008fb0:	b2c9      	uxtb	r1, r1
 8008fb2:	4b01      	ldr	r3, [pc, #4]	@ (8008fb8 <__NVIC_SetPriority+0x24>)
 8008fb4:	5419      	strb	r1, [r3, r0]
  }
}
 8008fb6:	4770      	bx	lr
 8008fb8:	e000ed14 	.word	0xe000ed14

08008fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fbc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fbe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fc2:	f1c0 0c07 	rsb	ip, r0, #7
 8008fc6:	f1bc 0f04 	cmp.w	ip, #4
 8008fca:	bf28      	it	cs
 8008fcc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fd0:	1d03      	adds	r3, r0, #4
 8008fd2:	2b06      	cmp	r3, #6
 8008fd4:	d90f      	bls.n	8008ff6 <NVIC_EncodePriority+0x3a>
 8008fd6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fd8:	f04f 3eff 	mov.w	lr, #4294967295
 8008fdc:	fa0e f00c 	lsl.w	r0, lr, ip
 8008fe0:	ea21 0100 	bic.w	r1, r1, r0
 8008fe4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fe6:	fa0e fe03 	lsl.w	lr, lr, r3
 8008fea:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8008fee:	ea41 0002 	orr.w	r0, r1, r2
 8008ff2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e7ee      	b.n	8008fd8 <NVIC_EncodePriority+0x1c>
	...

08008ffc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ffc:	4a07      	ldr	r2, [pc, #28]	@ (800901c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008ffe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009000:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009004:	041b      	lsls	r3, r3, #16
 8009006:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009008:	0200      	lsls	r0, r0, #8
 800900a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800900e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8009010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8009018:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800901a:	4770      	bx	lr
 800901c:	e000ed00 	.word	0xe000ed00

08009020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009020:	b510      	push	{r4, lr}
 8009022:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009024:	4b05      	ldr	r3, [pc, #20]	@ (800903c <HAL_NVIC_SetPriority+0x1c>)
 8009026:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009028:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800902c:	f7ff ffc6 	bl	8008fbc <NVIC_EncodePriority>
 8009030:	4601      	mov	r1, r0
 8009032:	4620      	mov	r0, r4
 8009034:	f7ff ffae 	bl	8008f94 <__NVIC_SetPriority>
}
 8009038:	bd10      	pop	{r4, pc}
 800903a:	bf00      	nop
 800903c:	e000ed00 	.word	0xe000ed00

08009040 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009040:	2800      	cmp	r0, #0
 8009042:	db07      	blt.n	8009054 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009044:	f000 021f 	and.w	r2, r0, #31
 8009048:	0940      	lsrs	r0, r0, #5
 800904a:	2301      	movs	r3, #1
 800904c:	4093      	lsls	r3, r2
 800904e:	4a02      	ldr	r2, [pc, #8]	@ (8009058 <HAL_NVIC_EnableIRQ+0x18>)
 8009050:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	e000e100 	.word	0xe000e100

0800905c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800905c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800905e:	f7ff ff87 	bl	8008f70 <__NVIC_DisableIRQ>
}
 8009062:	bd08      	pop	{r3, pc}

08009064 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009064:	3801      	subs	r0, #1
 8009066:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800906a:	d20b      	bcs.n	8009084 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800906c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009070:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009072:	4a05      	ldr	r2, [pc, #20]	@ (8009088 <HAL_SYSTICK_Config+0x24>)
 8009074:	21f0      	movs	r1, #240	@ 0xf0
 8009076:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800907a:	2000      	movs	r0, #0
 800907c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800907e:	2207      	movs	r2, #7
 8009080:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009082:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8009084:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8009086:	4770      	bx	lr
 8009088:	e000ed00 	.word	0xe000ed00

0800908c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800908c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800908e:	490a      	ldr	r1, [pc, #40]	@ (80090b8 <FLASH_Program_DoubleWord+0x2c>)
 8009090:	690c      	ldr	r4, [r1, #16]
 8009092:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 8009096:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009098:	690c      	ldr	r4, [r1, #16]
 800909a:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 800909e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090a0:	690c      	ldr	r4, [r1, #16]
 80090a2:	f044 0401 	orr.w	r4, r4, #1
 80090a6:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80090a8:	6002      	str	r2, [r0, #0]
 80090aa:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80090ae:	6043      	str	r3, [r0, #4]
}
 80090b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40023c00 	.word	0x40023c00

080090bc <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090bc:	4b07      	ldr	r3, [pc, #28]	@ (80090dc <FLASH_Program_Word+0x20>)
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80090c6:	691a      	ldr	r2, [r3, #16]
 80090c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	f042 0201 	orr.w	r2, r2, #1
 80090d4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80090d6:	6001      	str	r1, [r0, #0]
}
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40023c00 	.word	0x40023c00

080090e0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090e0:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <FLASH_Program_HalfWord+0x20>)
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	f042 0201 	orr.w	r2, r2, #1
 80090f8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80090fa:	8001      	strh	r1, [r0, #0]
}
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	40023c00 	.word	0x40023c00

08009104 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009104:	4b06      	ldr	r3, [pc, #24]	@ (8009120 <FLASH_Program_Byte+0x1c>)
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800910c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	f042 0201 	orr.w	r2, r2, #1
 8009118:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800911a:	7001      	strb	r1, [r0, #0]
}
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	40023c00 	.word	0x40023c00

08009124 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009124:	4b20      	ldr	r3, [pc, #128]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f013 0f10 	tst.w	r3, #16
 800912c:	d007      	beq.n	800913e <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800912e:	4a1f      	ldr	r2, [pc, #124]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 8009130:	69d3      	ldr	r3, [r2, #28]
 8009132:	f043 0310 	orr.w	r3, r3, #16
 8009136:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009138:	4b1b      	ldr	r3, [pc, #108]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 800913a:	2210      	movs	r2, #16
 800913c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800913e:	4b1a      	ldr	r3, [pc, #104]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f013 0f20 	tst.w	r3, #32
 8009146:	d007      	beq.n	8009158 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009148:	4a18      	ldr	r2, [pc, #96]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 800914a:	69d3      	ldr	r3, [r2, #28]
 800914c:	f043 0308 	orr.w	r3, r3, #8
 8009150:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009152:	4b15      	ldr	r3, [pc, #84]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009154:	2220      	movs	r2, #32
 8009156:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009158:	4b13      	ldr	r3, [pc, #76]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009160:	d007      	beq.n	8009172 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009162:	4a12      	ldr	r2, [pc, #72]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 8009164:	69d3      	ldr	r3, [r2, #28]
 8009166:	f043 0304 	orr.w	r3, r3, #4
 800916a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800916c:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 800916e:	2240      	movs	r2, #64	@ 0x40
 8009170:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800917a:	d007      	beq.n	800918c <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800917c:	4a0b      	ldr	r2, [pc, #44]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 800917e:	69d3      	ldr	r3, [r2, #28]
 8009180:	f043 0302 	orr.w	r3, r3, #2
 8009184:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009186:	4b08      	ldr	r3, [pc, #32]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 8009188:	2280      	movs	r2, #128	@ 0x80
 800918a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800918c:	4b06      	ldr	r3, [pc, #24]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f013 0f02 	tst.w	r3, #2
 8009194:	d007      	beq.n	80091a6 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009196:	4a05      	ldr	r2, [pc, #20]	@ (80091ac <FLASH_SetErrorCode+0x88>)
 8009198:	69d3      	ldr	r3, [r2, #28]
 800919a:	f043 0320 	orr.w	r3, r3, #32
 800919e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80091a0:	4b01      	ldr	r3, [pc, #4]	@ (80091a8 <FLASH_SetErrorCode+0x84>)
 80091a2:	2202      	movs	r2, #2
 80091a4:	60da      	str	r2, [r3, #12]
  }
}
 80091a6:	4770      	bx	lr
 80091a8:	40023c00 	.word	0x40023c00
 80091ac:	20000684 	.word	0x20000684

080091b0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80091b0:	4b09      	ldr	r3, [pc, #36]	@ (80091d8 <HAL_FLASH_Unlock+0x28>)
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	db01      	blt.n	80091bc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80091b8:	2000      	movs	r0, #0
 80091ba:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80091bc:	4b06      	ldr	r3, [pc, #24]	@ (80091d8 <HAL_FLASH_Unlock+0x28>)
 80091be:	4a07      	ldr	r2, [pc, #28]	@ (80091dc <HAL_FLASH_Unlock+0x2c>)
 80091c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80091c2:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80091c6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	db01      	blt.n	80091d2 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80091ce:	2000      	movs	r0, #0
 80091d0:	4770      	bx	lr
      status = HAL_ERROR;
 80091d2:	2001      	movs	r0, #1
}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	40023c00 	.word	0x40023c00
 80091dc:	45670123 	.word	0x45670123

080091e0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80091e0:	4a03      	ldr	r2, [pc, #12]	@ (80091f0 <HAL_FLASH_Lock+0x10>)
 80091e2:	6913      	ldr	r3, [r2, #16]
 80091e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091e8:	6113      	str	r3, [r2, #16]
}
 80091ea:	2000      	movs	r0, #0
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	40023c00 	.word	0x40023c00

080091f4 <FLASH_WaitForLastOperation>:
{ 
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091f8:	4b14      	ldr	r3, [pc, #80]	@ (800924c <FLASH_WaitForLastOperation+0x58>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80091fe:	f7ff fe9d 	bl	8008f3c <HAL_GetTick>
 8009202:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009204:	4b12      	ldr	r3, [pc, #72]	@ (8009250 <FLASH_WaitForLastOperation+0x5c>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800920c:	d00a      	beq.n	8009224 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 800920e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009212:	d0f7      	beq.n	8009204 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009214:	b124      	cbz	r4, 8009220 <FLASH_WaitForLastOperation+0x2c>
 8009216:	f7ff fe91 	bl	8008f3c <HAL_GetTick>
 800921a:	1b40      	subs	r0, r0, r5
 800921c:	42a0      	cmp	r0, r4
 800921e:	d9f1      	bls.n	8009204 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8009220:	2003      	movs	r0, #3
 8009222:	e00d      	b.n	8009240 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009224:	4b0a      	ldr	r3, [pc, #40]	@ (8009250 <FLASH_WaitForLastOperation+0x5c>)
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f013 0f01 	tst.w	r3, #1
 800922c:	d002      	beq.n	8009234 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800922e:	4b08      	ldr	r3, [pc, #32]	@ (8009250 <FLASH_WaitForLastOperation+0x5c>)
 8009230:	2201      	movs	r2, #1
 8009232:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009234:	4b06      	ldr	r3, [pc, #24]	@ (8009250 <FLASH_WaitForLastOperation+0x5c>)
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 800923c:	d101      	bne.n	8009242 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 800923e:	2000      	movs	r0, #0
}  
 8009240:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8009242:	f7ff ff6f 	bl	8009124 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009246:	2001      	movs	r0, #1
 8009248:	e7fa      	b.n	8009240 <FLASH_WaitForLastOperation+0x4c>
 800924a:	bf00      	nop
 800924c:	20000684 	.word	0x20000684
 8009250:	40023c00 	.word	0x40023c00

08009254 <HAL_FLASH_Program>:
{
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8009258:	4a1b      	ldr	r2, [pc, #108]	@ (80092c8 <HAL_FLASH_Program+0x74>)
 800925a:	7e12      	ldrb	r2, [r2, #24]
 800925c:	2a01      	cmp	r2, #1
 800925e:	d030      	beq.n	80092c2 <HAL_FLASH_Program+0x6e>
 8009260:	4604      	mov	r4, r0
 8009262:	460d      	mov	r5, r1
 8009264:	461f      	mov	r7, r3
 8009266:	4b18      	ldr	r3, [pc, #96]	@ (80092c8 <HAL_FLASH_Program+0x74>)
 8009268:	2201      	movs	r2, #1
 800926a:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800926c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009270:	f7ff ffc0 	bl	80091f4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8009274:	b990      	cbnz	r0, 800929c <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009276:	b1ac      	cbz	r4, 80092a4 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009278:	2c01      	cmp	r4, #1
 800927a:	d018      	beq.n	80092ae <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800927c:	2c02      	cmp	r4, #2
 800927e:	d01b      	beq.n	80092b8 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8009280:	4632      	mov	r2, r6
 8009282:	463b      	mov	r3, r7
 8009284:	4628      	mov	r0, r5
 8009286:	f7ff ff01 	bl	800908c <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800928a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800928e:	f7ff ffb1 	bl	80091f4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8009292:	4a0e      	ldr	r2, [pc, #56]	@ (80092cc <HAL_FLASH_Program+0x78>)
 8009294:	6913      	ldr	r3, [r2, #16]
 8009296:	f023 0301 	bic.w	r3, r3, #1
 800929a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800929c:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <HAL_FLASH_Program+0x74>)
 800929e:	2200      	movs	r2, #0
 80092a0:	761a      	strb	r2, [r3, #24]
}
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80092a4:	b2f1      	uxtb	r1, r6
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7ff ff2c 	bl	8009104 <FLASH_Program_Byte>
 80092ac:	e7ed      	b.n	800928a <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80092ae:	b2b1      	uxth	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	f7ff ff15 	bl	80090e0 <FLASH_Program_HalfWord>
 80092b6:	e7e8      	b.n	800928a <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	f7ff fefe 	bl	80090bc <FLASH_Program_Word>
 80092c0:	e7e3      	b.n	800928a <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80092c2:	2002      	movs	r0, #2
 80092c4:	e7ed      	b.n	80092a2 <HAL_FLASH_Program+0x4e>
 80092c6:	bf00      	nop
 80092c8:	20000684 	.word	0x20000684
 80092cc:	40023c00 	.word	0x40023c00

080092d0 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092d0:	4b07      	ldr	r3, [pc, #28]	@ (80092f0 <FLASH_MassErase+0x20>)
 80092d2:	691a      	ldr	r2, [r3, #16]
 80092d4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	f042 0204 	orr.w	r2, r2, #4
 80092e0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80092e2:	691a      	ldr	r2, [r3, #16]
 80092e4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80092e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80092ec:	611a      	str	r2, [r3, #16]
}
 80092ee:	4770      	bx	lr
 80092f0:	40023c00 	.word	0x40023c00

080092f4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80092f4:	2901      	cmp	r1, #1
 80092f6:	d01b      	beq.n	8009330 <FLASH_Erase_Sector+0x3c>
 80092f8:	2902      	cmp	r1, #2
 80092fa:	d01c      	beq.n	8009336 <FLASH_Erase_Sector+0x42>
 80092fc:	b109      	cbz	r1, 8009302 <FLASH_Erase_Sector+0xe>
{
 80092fe:	f44f 7140 	mov.w	r1, #768	@ 0x300
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009302:	4b0e      	ldr	r3, [pc, #56]	@ (800933c <FLASH_Erase_Sector+0x48>)
 8009304:	691a      	ldr	r2, [r3, #16]
 8009306:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800930a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800930c:	691a      	ldr	r2, [r3, #16]
 800930e:	430a      	orrs	r2, r1
 8009310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8009318:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8009320:	f040 0002 	orr.w	r0, r0, #2
 8009324:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800932c:	611a      	str	r2, [r3, #16]
}
 800932e:	4770      	bx	lr
{
 8009330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009334:	e7e5      	b.n	8009302 <FLASH_Erase_Sector+0xe>
 8009336:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800933a:	e7e2      	b.n	8009302 <FLASH_Erase_Sector+0xe>
 800933c:	40023c00 	.word	0x40023c00

08009340 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8009340:	4b16      	ldr	r3, [pc, #88]	@ (800939c <FLASH_FlushCaches+0x5c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8009348:	d010      	beq.n	800936c <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800934a:	4b14      	ldr	r3, [pc, #80]	@ (800939c <FLASH_FlushCaches+0x5c>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009352:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009362:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800936a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800936c:	4b0b      	ldr	r3, [pc, #44]	@ (800939c <FLASH_FlushCaches+0x5c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009374:	d010      	beq.n	8009398 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009376:	4b09      	ldr	r3, [pc, #36]	@ (800939c <FLASH_FlushCaches+0x5c>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800937e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800938e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009396:	601a      	str	r2, [r3, #0]
  }
}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40023c00 	.word	0x40023c00

080093a0 <HAL_FLASHEx_Erase>:
{
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80093a2:	4b22      	ldr	r3, [pc, #136]	@ (800942c <HAL_FLASHEx_Erase+0x8c>)
 80093a4:	7e1b      	ldrb	r3, [r3, #24]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d03e      	beq.n	8009428 <HAL_FLASHEx_Erase+0x88>
 80093aa:	4604      	mov	r4, r0
 80093ac:	460e      	mov	r6, r1
 80093ae:	4b1f      	ldr	r3, [pc, #124]	@ (800942c <HAL_FLASHEx_Erase+0x8c>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093b8:	f7ff ff1c 	bl	80091f4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80093bc:	4607      	mov	r7, r0
 80093be:	bb70      	cbnz	r0, 800941e <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295
 80093c4:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d016      	beq.n	80093fa <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80093cc:	68a5      	ldr	r5, [r4, #8]
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	68a2      	ldr	r2, [r4, #8]
 80093d2:	4413      	add	r3, r2
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	d920      	bls.n	800941a <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80093d8:	7c21      	ldrb	r1, [r4, #16]
 80093da:	4628      	mov	r0, r5
 80093dc:	f7ff ff8a 	bl	80092f4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093e4:	f7ff ff06 	bl	80091f4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80093e8:	4a11      	ldr	r2, [pc, #68]	@ (8009430 <HAL_FLASHEx_Erase+0x90>)
 80093ea:	6913      	ldr	r3, [r2, #16]
 80093ec:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80093f0:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 80093f2:	4607      	mov	r7, r0
 80093f4:	b980      	cbnz	r0, 8009418 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80093f6:	3501      	adds	r5, #1
 80093f8:	e7e9      	b.n	80093ce <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80093fa:	6861      	ldr	r1, [r4, #4]
 80093fc:	7c20      	ldrb	r0, [r4, #16]
 80093fe:	f7ff ff67 	bl	80092d0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009402:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009406:	f7ff fef5 	bl	80091f4 <FLASH_WaitForLastOperation>
 800940a:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800940c:	4a08      	ldr	r2, [pc, #32]	@ (8009430 <HAL_FLASHEx_Erase+0x90>)
 800940e:	6913      	ldr	r3, [r2, #16]
 8009410:	f023 0304 	bic.w	r3, r3, #4
 8009414:	6113      	str	r3, [r2, #16]
 8009416:	e000      	b.n	800941a <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8009418:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 800941a:	f7ff ff91 	bl	8009340 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800941e:	4b03      	ldr	r3, [pc, #12]	@ (800942c <HAL_FLASHEx_Erase+0x8c>)
 8009420:	2200      	movs	r2, #0
 8009422:	761a      	strb	r2, [r3, #24]
}
 8009424:	4638      	mov	r0, r7
 8009426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8009428:	2702      	movs	r7, #2
 800942a:	e7fb      	b.n	8009424 <HAL_FLASHEx_Erase+0x84>
 800942c:	20000684 	.word	0x20000684
 8009430:	40023c00 	.word	0x40023c00

08009434 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009434:	2300      	movs	r3, #0
 8009436:	2b0f      	cmp	r3, #15
 8009438:	f200 80da 	bhi.w	80095f0 <HAL_GPIO_Init+0x1bc>
{
 800943c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943e:	b083      	sub	sp, #12
 8009440:	e03a      	b.n	80094b8 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009442:	2207      	movs	r2, #7
 8009444:	e000      	b.n	8009448 <HAL_GPIO_Init+0x14>
 8009446:	2200      	movs	r2, #0
 8009448:	40aa      	lsls	r2, r5
 800944a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800944c:	3402      	adds	r4, #2
 800944e:	4d69      	ldr	r5, [pc, #420]	@ (80095f4 <HAL_GPIO_Init+0x1c0>)
 8009450:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009454:	4a68      	ldr	r2, [pc, #416]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 8009456:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009458:	ea6f 020c 	mvn.w	r2, ip
 800945c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009460:	684e      	ldr	r6, [r1, #4]
 8009462:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8009466:	d001      	beq.n	800946c <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8009468:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 800946c:	4c62      	ldr	r4, [pc, #392]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 800946e:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8009470:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8009472:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009476:	684e      	ldr	r6, [r1, #4]
 8009478:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800947c:	d001      	beq.n	8009482 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 800947e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8009482:	4c5d      	ldr	r4, [pc, #372]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 8009484:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009486:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8009488:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800948c:	684e      	ldr	r6, [r1, #4]
 800948e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8009492:	d001      	beq.n	8009498 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8009494:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8009498:	4c57      	ldr	r4, [pc, #348]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 800949a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800949c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800949e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80094a0:	684d      	ldr	r5, [r1, #4]
 80094a2:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 80094a6:	d001      	beq.n	80094ac <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80094a8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80094ac:	4c52      	ldr	r4, [pc, #328]	@ (80095f8 <HAL_GPIO_Init+0x1c4>)
 80094ae:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094b0:	3301      	adds	r3, #1
 80094b2:	2b0f      	cmp	r3, #15
 80094b4:	f200 809a 	bhi.w	80095ec <HAL_GPIO_Init+0x1b8>
    ioposition = 0x01U << position;
 80094b8:	2201      	movs	r2, #1
 80094ba:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094bc:	680c      	ldr	r4, [r1, #0]
 80094be:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80094c2:	ea32 0404 	bics.w	r4, r2, r4
 80094c6:	d1f3      	bne.n	80094b0 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80094c8:	684c      	ldr	r4, [r1, #4]
 80094ca:	1e65      	subs	r5, r4, #1
 80094cc:	2d01      	cmp	r5, #1
 80094ce:	d903      	bls.n	80094d8 <HAL_GPIO_Init+0xa4>
 80094d0:	2c11      	cmp	r4, #17
 80094d2:	d001      	beq.n	80094d8 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80094d4:	2c12      	cmp	r4, #18
 80094d6:	d112      	bne.n	80094fe <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 80094d8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094da:	005e      	lsls	r6, r3, #1
 80094dc:	2403      	movs	r4, #3
 80094de:	40b4      	lsls	r4, r6
 80094e0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094e4:	68cc      	ldr	r4, [r1, #12]
 80094e6:	40b4      	lsls	r4, r6
 80094e8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80094ea:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80094ec:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094ee:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80094f2:	684a      	ldr	r2, [r1, #4]
 80094f4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80094f8:	409a      	lsls	r2, r3
 80094fa:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80094fc:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80094fe:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009500:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8009504:	2203      	movs	r2, #3
 8009506:	fa02 f20e 	lsl.w	r2, r2, lr
 800950a:	43d4      	mvns	r4, r2
 800950c:	ea25 0502 	bic.w	r5, r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009510:	688a      	ldr	r2, [r1, #8]
 8009512:	fa02 f20e 	lsl.w	r2, r2, lr
 8009516:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8009518:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800951a:	684a      	ldr	r2, [r1, #4]
 800951c:	2a02      	cmp	r2, #2
 800951e:	d001      	beq.n	8009524 <HAL_GPIO_Init+0xf0>
 8009520:	2a12      	cmp	r2, #18
 8009522:	d10f      	bne.n	8009544 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 8009524:	08dd      	lsrs	r5, r3, #3
 8009526:	3508      	adds	r5, #8
 8009528:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800952c:	f003 0607 	and.w	r6, r3, #7
 8009530:	00b6      	lsls	r6, r6, #2
 8009532:	220f      	movs	r2, #15
 8009534:	40b2      	lsls	r2, r6
 8009536:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800953a:	690a      	ldr	r2, [r1, #16]
 800953c:	40b2      	lsls	r2, r6
 800953e:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8009540:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8009544:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009546:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009548:	684a      	ldr	r2, [r1, #4]
 800954a:	f002 0203 	and.w	r2, r2, #3
 800954e:	fa02 f20e 	lsl.w	r2, r2, lr
 8009552:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8009554:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009556:	684a      	ldr	r2, [r1, #4]
 8009558:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 800955c:	d0a8      	beq.n	80094b0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800955e:	2200      	movs	r2, #0
 8009560:	9201      	str	r2, [sp, #4]
 8009562:	4a26      	ldr	r2, [pc, #152]	@ (80095fc <HAL_GPIO_Init+0x1c8>)
 8009564:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8009566:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800956a:	6454      	str	r4, [r2, #68]	@ 0x44
 800956c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800956e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8009572:	9201      	str	r2, [sp, #4]
 8009574:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009576:	089c      	lsrs	r4, r3, #2
 8009578:	1ca5      	adds	r5, r4, #2
 800957a:	4a1e      	ldr	r2, [pc, #120]	@ (80095f4 <HAL_GPIO_Init+0x1c0>)
 800957c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009580:	f003 0503 	and.w	r5, r3, #3
 8009584:	00ad      	lsls	r5, r5, #2
 8009586:	220f      	movs	r2, #15
 8009588:	40aa      	lsls	r2, r5
 800958a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800958e:	4a1c      	ldr	r2, [pc, #112]	@ (8009600 <HAL_GPIO_Init+0x1cc>)
 8009590:	4290      	cmp	r0, r2
 8009592:	f43f af58 	beq.w	8009446 <HAL_GPIO_Init+0x12>
 8009596:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800959a:	4290      	cmp	r0, r2
 800959c:	d01a      	beq.n	80095d4 <HAL_GPIO_Init+0x1a0>
 800959e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095a2:	4290      	cmp	r0, r2
 80095a4:	d018      	beq.n	80095d8 <HAL_GPIO_Init+0x1a4>
 80095a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095aa:	4290      	cmp	r0, r2
 80095ac:	d016      	beq.n	80095dc <HAL_GPIO_Init+0x1a8>
 80095ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095b2:	4290      	cmp	r0, r2
 80095b4:	d014      	beq.n	80095e0 <HAL_GPIO_Init+0x1ac>
 80095b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095ba:	4290      	cmp	r0, r2
 80095bc:	d012      	beq.n	80095e4 <HAL_GPIO_Init+0x1b0>
 80095be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095c2:	4290      	cmp	r0, r2
 80095c4:	d010      	beq.n	80095e8 <HAL_GPIO_Init+0x1b4>
 80095c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095ca:	4290      	cmp	r0, r2
 80095cc:	f43f af39 	beq.w	8009442 <HAL_GPIO_Init+0xe>
 80095d0:	2208      	movs	r2, #8
 80095d2:	e739      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095d4:	2201      	movs	r2, #1
 80095d6:	e737      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095d8:	2202      	movs	r2, #2
 80095da:	e735      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095dc:	2203      	movs	r2, #3
 80095de:	e733      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095e0:	2204      	movs	r2, #4
 80095e2:	e731      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095e4:	2205      	movs	r2, #5
 80095e6:	e72f      	b.n	8009448 <HAL_GPIO_Init+0x14>
 80095e8:	2206      	movs	r2, #6
 80095ea:	e72d      	b.n	8009448 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80095ec:	b003      	add	sp, #12
 80095ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40013800 	.word	0x40013800
 80095f8:	40013c00 	.word	0x40013c00
 80095fc:	40023800 	.word	0x40023800
 8009600:	40020000 	.word	0x40020000

08009604 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009604:	2800      	cmp	r0, #0
 8009606:	f000 81da 	beq.w	80099be <HAL_RCC_OscConfig+0x3ba>
{
 800960a:	b570      	push	{r4, r5, r6, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009610:	6803      	ldr	r3, [r0, #0]
 8009612:	f013 0f01 	tst.w	r3, #1
 8009616:	d03b      	beq.n	8009690 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009618:	4b9f      	ldr	r3, [pc, #636]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f003 030c 	and.w	r3, r3, #12
 8009620:	2b04      	cmp	r3, #4
 8009622:	d02c      	beq.n	800967e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009624:	4b9c      	ldr	r3, [pc, #624]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800962c:	2b08      	cmp	r3, #8
 800962e:	d021      	beq.n	8009674 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009630:	6863      	ldr	r3, [r4, #4]
 8009632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009636:	d04f      	beq.n	80096d8 <HAL_RCC_OscConfig+0xd4>
 8009638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800963c:	d052      	beq.n	80096e4 <HAL_RCC_OscConfig+0xe0>
 800963e:	4b96      	ldr	r3, [pc, #600]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800964e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009650:	6863      	ldr	r3, [r4, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d050      	beq.n	80096f8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009656:	f7ff fc71 	bl	8008f3c <HAL_GetTick>
 800965a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800965c:	4b8e      	ldr	r3, [pc, #568]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009664:	d114      	bne.n	8009690 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009666:	f7ff fc69 	bl	8008f3c <HAL_GetTick>
 800966a:	1b40      	subs	r0, r0, r5
 800966c:	2864      	cmp	r0, #100	@ 0x64
 800966e:	d9f5      	bls.n	800965c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8009670:	2003      	movs	r0, #3
 8009672:	e1ab      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009674:	4b88      	ldr	r3, [pc, #544]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800967c:	d0d8      	beq.n	8009630 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800967e:	4b86      	ldr	r3, [pc, #536]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009686:	d003      	beq.n	8009690 <HAL_RCC_OscConfig+0x8c>
 8009688:	6863      	ldr	r3, [r4, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 8199 	beq.w	80099c2 <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	f013 0f02 	tst.w	r3, #2
 8009696:	d054      	beq.n	8009742 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009698:	4b7f      	ldr	r3, [pc, #508]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f013 0f0c 	tst.w	r3, #12
 80096a0:	d03e      	beq.n	8009720 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096a2:	4b7d      	ldr	r3, [pc, #500]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d033      	beq.n	8009716 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80096ae:	68e3      	ldr	r3, [r4, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d068      	beq.n	8009786 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80096b4:	4b79      	ldr	r3, [pc, #484]	@ (800989c <HAL_RCC_OscConfig+0x298>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096ba:	f7ff fc3f 	bl	8008f3c <HAL_GetTick>
 80096be:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096c0:	4b75      	ldr	r3, [pc, #468]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f013 0f02 	tst.w	r3, #2
 80096c8:	d154      	bne.n	8009774 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096ca:	f7ff fc37 	bl	8008f3c <HAL_GetTick>
 80096ce:	1b40      	subs	r0, r0, r5
 80096d0:	2802      	cmp	r0, #2
 80096d2:	d9f5      	bls.n	80096c0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80096d4:	2003      	movs	r0, #3
 80096d6:	e179      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096d8:	4a6f      	ldr	r2, [pc, #444]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80096da:	6813      	ldr	r3, [r2, #0]
 80096dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	e7b5      	b.n	8009650 <HAL_RCC_OscConfig+0x4c>
 80096e4:	4b6c      	ldr	r3, [pc, #432]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	e7ab      	b.n	8009650 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80096f8:	f7ff fc20 	bl	8008f3c <HAL_GetTick>
 80096fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096fe:	4b66      	ldr	r3, [pc, #408]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009706:	d0c3      	beq.n	8009690 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009708:	f7ff fc18 	bl	8008f3c <HAL_GetTick>
 800970c:	1b40      	subs	r0, r0, r5
 800970e:	2864      	cmp	r0, #100	@ 0x64
 8009710:	d9f5      	bls.n	80096fe <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8009712:	2003      	movs	r0, #3
 8009714:	e15a      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009716:	4b60      	ldr	r3, [pc, #384]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800971e:	d1c6      	bne.n	80096ae <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009720:	4b5d      	ldr	r3, [pc, #372]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f013 0f02 	tst.w	r3, #2
 8009728:	d003      	beq.n	8009732 <HAL_RCC_OscConfig+0x12e>
 800972a:	68e3      	ldr	r3, [r4, #12]
 800972c:	2b01      	cmp	r3, #1
 800972e:	f040 814a 	bne.w	80099c6 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009732:	4a59      	ldr	r2, [pc, #356]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009734:	6813      	ldr	r3, [r2, #0]
 8009736:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800973a:	6921      	ldr	r1, [r4, #16]
 800973c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009740:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	f013 0f08 	tst.w	r3, #8
 8009748:	d042      	beq.n	80097d0 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800974a:	6963      	ldr	r3, [r4, #20]
 800974c:	b36b      	cbz	r3, 80097aa <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800974e:	4b53      	ldr	r3, [pc, #332]	@ (800989c <HAL_RCC_OscConfig+0x298>)
 8009750:	2201      	movs	r2, #1
 8009752:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009756:	f7ff fbf1 	bl	8008f3c <HAL_GetTick>
 800975a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800975c:	4b4e      	ldr	r3, [pc, #312]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 800975e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009760:	f013 0f02 	tst.w	r3, #2
 8009764:	d134      	bne.n	80097d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009766:	f7ff fbe9 	bl	8008f3c <HAL_GetTick>
 800976a:	1b40      	subs	r0, r0, r5
 800976c:	2802      	cmp	r0, #2
 800976e:	d9f5      	bls.n	800975c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8009770:	2003      	movs	r0, #3
 8009772:	e12b      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009774:	4a48      	ldr	r2, [pc, #288]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009776:	6813      	ldr	r3, [r2, #0]
 8009778:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800977c:	6921      	ldr	r1, [r4, #16]
 800977e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	e7dd      	b.n	8009742 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8009786:	4b45      	ldr	r3, [pc, #276]	@ (800989c <HAL_RCC_OscConfig+0x298>)
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800978c:	f7ff fbd6 	bl	8008f3c <HAL_GetTick>
 8009790:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009792:	4b41      	ldr	r3, [pc, #260]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f013 0f02 	tst.w	r3, #2
 800979a:	d0d2      	beq.n	8009742 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800979c:	f7ff fbce 	bl	8008f3c <HAL_GetTick>
 80097a0:	1b40      	subs	r0, r0, r5
 80097a2:	2802      	cmp	r0, #2
 80097a4:	d9f5      	bls.n	8009792 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80097a6:	2003      	movs	r0, #3
 80097a8:	e110      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097aa:	4b3c      	ldr	r3, [pc, #240]	@ (800989c <HAL_RCC_OscConfig+0x298>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097b2:	f7ff fbc3 	bl	8008f3c <HAL_GetTick>
 80097b6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097b8:	4b37      	ldr	r3, [pc, #220]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80097ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097bc:	f013 0f02 	tst.w	r3, #2
 80097c0:	d006      	beq.n	80097d0 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097c2:	f7ff fbbb 	bl	8008f3c <HAL_GetTick>
 80097c6:	1b40      	subs	r0, r0, r5
 80097c8:	2802      	cmp	r0, #2
 80097ca:	d9f5      	bls.n	80097b8 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80097cc:	2003      	movs	r0, #3
 80097ce:	e0fd      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	f013 0f04 	tst.w	r3, #4
 80097d6:	d077      	beq.n	80098c8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097d8:	4b2f      	ldr	r3, [pc, #188]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80097e0:	d133      	bne.n	800984a <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097e2:	2300      	movs	r3, #0
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 80097e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80097ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80097f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80097fa:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097fc:	4b28      	ldr	r3, [pc, #160]	@ (80098a0 <HAL_RCC_OscConfig+0x29c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009804:	d023      	beq.n	800984e <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d034      	beq.n	8009876 <HAL_RCC_OscConfig+0x272>
 800980c:	2b05      	cmp	r3, #5
 800980e:	d038      	beq.n	8009882 <HAL_RCC_OscConfig+0x27e>
 8009810:	4b21      	ldr	r3, [pc, #132]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009812:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009814:	f022 0201 	bic.w	r2, r2, #1
 8009818:	671a      	str	r2, [r3, #112]	@ 0x70
 800981a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800981c:	f022 0204 	bic.w	r2, r2, #4
 8009820:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d03d      	beq.n	80098a4 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009828:	f7ff fb88 	bl	8008f3c <HAL_GetTick>
 800982c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800982e:	4b1a      	ldr	r3, [pc, #104]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009832:	f013 0f02 	tst.w	r3, #2
 8009836:	d146      	bne.n	80098c6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009838:	f7ff fb80 	bl	8008f3c <HAL_GetTick>
 800983c:	1b80      	subs	r0, r0, r6
 800983e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009842:	4298      	cmp	r0, r3
 8009844:	d9f3      	bls.n	800982e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8009846:	2003      	movs	r0, #3
 8009848:	e0c0      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
    FlagStatus       pwrclkchanged = RESET;
 800984a:	2500      	movs	r5, #0
 800984c:	e7d6      	b.n	80097fc <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800984e:	4a14      	ldr	r2, [pc, #80]	@ (80098a0 <HAL_RCC_OscConfig+0x29c>)
 8009850:	6813      	ldr	r3, [r2, #0]
 8009852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009856:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009858:	f7ff fb70 	bl	8008f3c <HAL_GetTick>
 800985c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800985e:	4b10      	ldr	r3, [pc, #64]	@ (80098a0 <HAL_RCC_OscConfig+0x29c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009866:	d1ce      	bne.n	8009806 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009868:	f7ff fb68 	bl	8008f3c <HAL_GetTick>
 800986c:	1b80      	subs	r0, r0, r6
 800986e:	2802      	cmp	r0, #2
 8009870:	d9f5      	bls.n	800985e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8009872:	2003      	movs	r0, #3
 8009874:	e0aa      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009876:	4a08      	ldr	r2, [pc, #32]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009878:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800987a:	f043 0301 	orr.w	r3, r3, #1
 800987e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009880:	e7cf      	b.n	8009822 <HAL_RCC_OscConfig+0x21e>
 8009882:	4b05      	ldr	r3, [pc, #20]	@ (8009898 <HAL_RCC_OscConfig+0x294>)
 8009884:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009886:	f042 0204 	orr.w	r2, r2, #4
 800988a:	671a      	str	r2, [r3, #112]	@ 0x70
 800988c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	671a      	str	r2, [r3, #112]	@ 0x70
 8009894:	e7c5      	b.n	8009822 <HAL_RCC_OscConfig+0x21e>
 8009896:	bf00      	nop
 8009898:	40023800 	.word	0x40023800
 800989c:	42470000 	.word	0x42470000
 80098a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098a4:	f7ff fb4a 	bl	8008f3c <HAL_GetTick>
 80098a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098aa:	4b4f      	ldr	r3, [pc, #316]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 80098ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ae:	f013 0f02 	tst.w	r3, #2
 80098b2:	d008      	beq.n	80098c6 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098b4:	f7ff fb42 	bl	8008f3c <HAL_GetTick>
 80098b8:	1b80      	subs	r0, r0, r6
 80098ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80098be:	4298      	cmp	r0, r3
 80098c0:	d9f3      	bls.n	80098aa <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80098c2:	2003      	movs	r0, #3
 80098c4:	e082      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098c6:	b9e5      	cbnz	r5, 8009902 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098c8:	69a3      	ldr	r3, [r4, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d07d      	beq.n	80099ca <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098ce:	4a46      	ldr	r2, [pc, #280]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 80098d0:	6892      	ldr	r2, [r2, #8]
 80098d2:	f002 020c 	and.w	r2, r2, #12
 80098d6:	2a08      	cmp	r2, #8
 80098d8:	d051      	beq.n	800997e <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d017      	beq.n	800990e <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098de:	4b43      	ldr	r3, [pc, #268]	@ (80099ec <HAL_RCC_OscConfig+0x3e8>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e4:	f7ff fb2a 	bl	8008f3c <HAL_GetTick>
 80098e8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ea:	4b3f      	ldr	r3, [pc, #252]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80098f2:	d042      	beq.n	800997a <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098f4:	f7ff fb22 	bl	8008f3c <HAL_GetTick>
 80098f8:	1b00      	subs	r0, r0, r4
 80098fa:	2802      	cmp	r0, #2
 80098fc:	d9f5      	bls.n	80098ea <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80098fe:	2003      	movs	r0, #3
 8009900:	e064      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009902:	4a39      	ldr	r2, [pc, #228]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 8009904:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800990a:	6413      	str	r3, [r2, #64]	@ 0x40
 800990c:	e7dc      	b.n	80098c8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800990e:	4b37      	ldr	r3, [pc, #220]	@ (80099ec <HAL_RCC_OscConfig+0x3e8>)
 8009910:	2200      	movs	r2, #0
 8009912:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8009914:	f7ff fb12 	bl	8008f3c <HAL_GetTick>
 8009918:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800991a:	4b33      	ldr	r3, [pc, #204]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009922:	d006      	beq.n	8009932 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009924:	f7ff fb0a 	bl	8008f3c <HAL_GetTick>
 8009928:	1b40      	subs	r0, r0, r5
 800992a:	2802      	cmp	r0, #2
 800992c:	d9f5      	bls.n	800991a <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 800992e:	2003      	movs	r0, #3
 8009930:	e04c      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009932:	69e3      	ldr	r3, [r4, #28]
 8009934:	6a22      	ldr	r2, [r4, #32]
 8009936:	4313      	orrs	r3, r2
 8009938:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800993a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800993e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009940:	0852      	lsrs	r2, r2, #1
 8009942:	3a01      	subs	r2, #1
 8009944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009948:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800994a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800994e:	4a26      	ldr	r2, [pc, #152]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 8009950:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8009952:	4b26      	ldr	r3, [pc, #152]	@ (80099ec <HAL_RCC_OscConfig+0x3e8>)
 8009954:	2201      	movs	r2, #1
 8009956:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8009958:	f7ff faf0 	bl	8008f3c <HAL_GetTick>
 800995c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800995e:	4b22      	ldr	r3, [pc, #136]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009966:	d106      	bne.n	8009976 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009968:	f7ff fae8 	bl	8008f3c <HAL_GetTick>
 800996c:	1b00      	subs	r0, r0, r4
 800996e:	2802      	cmp	r0, #2
 8009970:	d9f5      	bls.n	800995e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8009972:	2003      	movs	r0, #3
 8009974:	e02a      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8009976:	2000      	movs	r0, #0
 8009978:	e028      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 800997a:	2000      	movs	r0, #0
 800997c:	e026      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800997e:	2b01      	cmp	r3, #1
 8009980:	d026      	beq.n	80099d0 <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 8009982:	4b19      	ldr	r3, [pc, #100]	@ (80099e8 <HAL_RCC_OscConfig+0x3e4>)
 8009984:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009986:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800998a:	69e2      	ldr	r2, [r4, #28]
 800998c:	4291      	cmp	r1, r2
 800998e:	d121      	bne.n	80099d4 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009990:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009994:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009996:	428a      	cmp	r2, r1
 8009998:	d11e      	bne.n	80099d8 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800999a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800999c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80099a0:	401a      	ands	r2, r3
 80099a2:	428a      	cmp	r2, r1
 80099a4:	d11a      	bne.n	80099dc <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80099a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80099aa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80099ac:	428a      	cmp	r2, r1
 80099ae:	d117      	bne.n	80099e0 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80099b0:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80099b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d114      	bne.n	80099e4 <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 80099ba:	2000      	movs	r0, #0
 80099bc:	e006      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 80099be:	2001      	movs	r0, #1
}
 80099c0:	4770      	bx	lr
        return HAL_ERROR;
 80099c2:	2001      	movs	r0, #1
 80099c4:	e002      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 80099c6:	2001      	movs	r0, #1
 80099c8:	e000      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80099ca:	2000      	movs	r0, #0
}
 80099cc:	b002      	add	sp, #8
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80099d0:	2001      	movs	r0, #1
 80099d2:	e7fb      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
          return HAL_ERROR;
 80099d4:	2001      	movs	r0, #1
 80099d6:	e7f9      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099d8:	2001      	movs	r0, #1
 80099da:	e7f7      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099dc:	2001      	movs	r0, #1
 80099de:	e7f5      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099e0:	2001      	movs	r0, #1
 80099e2:	e7f3      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099e4:	2001      	movs	r0, #1
 80099e6:	e7f1      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
 80099e8:	40023800 	.word	0x40023800
 80099ec:	42470000 	.word	0x42470000

080099f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099f0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099f2:	4b33      	ldr	r3, [pc, #204]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f003 030c 	and.w	r3, r3, #12
 80099fa:	2b04      	cmp	r3, #4
 80099fc:	d05b      	beq.n	8009ab6 <HAL_RCC_GetSysClockFreq+0xc6>
 80099fe:	2b08      	cmp	r3, #8
 8009a00:	d15b      	bne.n	8009aba <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a02:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009a10:	d02c      	beq.n	8009a6c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a12:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a14:	6858      	ldr	r0, [r3, #4]
 8009a16:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009a1a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8009a1e:	ebbc 0c00 	subs.w	ip, ip, r0
 8009a22:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8009a26:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009a2a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009a2e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009a32:	ebb1 010c 	subs.w	r1, r1, ip
 8009a36:	eb63 030e 	sbc.w	r3, r3, lr
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a40:	00c9      	lsls	r1, r1, #3
 8009a42:	eb11 0c00 	adds.w	ip, r1, r0
 8009a46:	f143 0300 	adc.w	r3, r3, #0
 8009a4a:	0259      	lsls	r1, r3, #9
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8009a52:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8009a56:	f7ff f85f 	bl	8008b18 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a5a:	4b19      	ldr	r3, [pc, #100]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8009a62:	3301      	adds	r3, #1
 8009a64:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009a66:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009a6a:	e027      	b.n	8009abc <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a6c:	4b14      	ldr	r3, [pc, #80]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a6e:	6858      	ldr	r0, [r3, #4]
 8009a70:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009a74:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8009a78:	ebbc 0c00 	subs.w	ip, ip, r0
 8009a7c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8009a80:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8009a84:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8009a88:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8009a8c:	ebb1 010c 	subs.w	r1, r1, ip
 8009a90:	eb63 030e 	sbc.w	r3, r3, lr
 8009a94:	00db      	lsls	r3, r3, #3
 8009a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a9a:	00c9      	lsls	r1, r1, #3
 8009a9c:	eb11 0c00 	adds.w	ip, r1, r0
 8009aa0:	f143 0300 	adc.w	r3, r3, #0
 8009aa4:	0299      	lsls	r1, r3, #10
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8009aac:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8009ab0:	f7ff f832 	bl	8008b18 <__aeabi_uldivmod>
 8009ab4:	e7d1      	b.n	8009a5a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8009ab6:	4803      	ldr	r0, [pc, #12]	@ (8009ac4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009ab8:	e000      	b.n	8009abc <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009aba:	4803      	ldr	r0, [pc, #12]	@ (8009ac8 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009abc:	bd08      	pop	{r3, pc}
 8009abe:	bf00      	nop
 8009ac0:	40023800 	.word	0x40023800
 8009ac4:	007a1200 	.word	0x007a1200
 8009ac8:	00f42400 	.word	0x00f42400

08009acc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f000 809b 	beq.w	8009c08 <HAL_RCC_ClockConfig+0x13c>
{
 8009ad2:	b570      	push	{r4, r5, r6, lr}
 8009ad4:	460d      	mov	r5, r1
 8009ad6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8009c18 <HAL_RCC_ClockConfig+0x14c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 030f 	and.w	r3, r3, #15
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	d208      	bcs.n	8009af6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae4:	b2cb      	uxtb	r3, r1
 8009ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8009c18 <HAL_RCC_ClockConfig+0x14c>)
 8009ae8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	f003 030f 	and.w	r3, r3, #15
 8009af0:	428b      	cmp	r3, r1
 8009af2:	f040 808b 	bne.w	8009c0c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	f013 0f02 	tst.w	r3, #2
 8009afc:	d017      	beq.n	8009b2e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009afe:	f013 0f04 	tst.w	r3, #4
 8009b02:	d004      	beq.n	8009b0e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b04:	4a45      	ldr	r2, [pc, #276]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b06:	6893      	ldr	r3, [r2, #8]
 8009b08:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009b0c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	f013 0f08 	tst.w	r3, #8
 8009b14:	d004      	beq.n	8009b20 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b16:	4a41      	ldr	r2, [pc, #260]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b18:	6893      	ldr	r3, [r2, #8]
 8009b1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009b1e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b20:	4a3e      	ldr	r2, [pc, #248]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b22:	6893      	ldr	r3, [r2, #8]
 8009b24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b28:	68a1      	ldr	r1, [r4, #8]
 8009b2a:	430b      	orrs	r3, r1
 8009b2c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	f013 0f01 	tst.w	r3, #1
 8009b34:	d032      	beq.n	8009b9c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b36:	6863      	ldr	r3, [r4, #4]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d021      	beq.n	8009b80 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b3c:	1e9a      	subs	r2, r3, #2
 8009b3e:	2a01      	cmp	r2, #1
 8009b40:	d925      	bls.n	8009b8e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b42:	4a36      	ldr	r2, [pc, #216]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	f012 0f02 	tst.w	r2, #2
 8009b4a:	d061      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b4c:	4933      	ldr	r1, [pc, #204]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b4e:	688a      	ldr	r2, [r1, #8]
 8009b50:	f022 0203 	bic.w	r2, r2, #3
 8009b54:	4313      	orrs	r3, r2
 8009b56:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8009b58:	f7ff f9f0 	bl	8008f3c <HAL_GetTick>
 8009b5c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 030c 	and.w	r3, r3, #12
 8009b66:	6862      	ldr	r2, [r4, #4]
 8009b68:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009b6c:	d016      	beq.n	8009b9c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b6e:	f7ff f9e5 	bl	8008f3c <HAL_GetTick>
 8009b72:	1b80      	subs	r0, r0, r6
 8009b74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b78:	4298      	cmp	r0, r3
 8009b7a:	d9f0      	bls.n	8009b5e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8009b7c:	2003      	movs	r0, #3
 8009b7e:	e042      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b80:	4a26      	ldr	r2, [pc, #152]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b82:	6812      	ldr	r2, [r2, #0]
 8009b84:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8009b88:	d1e0      	bne.n	8009b4c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e03b      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b8e:	4a23      	ldr	r2, [pc, #140]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009b96:	d1d9      	bne.n	8009b4c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8009b98:	2001      	movs	r0, #1
 8009b9a:	e034      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8009c18 <HAL_RCC_ClockConfig+0x14c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	d907      	bls.n	8009bb8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ba8:	b2ea      	uxtb	r2, r5
 8009baa:	4b1b      	ldr	r3, [pc, #108]	@ (8009c18 <HAL_RCC_ClockConfig+0x14c>)
 8009bac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	42ab      	cmp	r3, r5
 8009bb6:	d12d      	bne.n	8009c14 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	f013 0f04 	tst.w	r3, #4
 8009bbe:	d006      	beq.n	8009bce <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bc0:	4a16      	ldr	r2, [pc, #88]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009bc2:	6893      	ldr	r3, [r2, #8]
 8009bc4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8009bc8:	68e1      	ldr	r1, [r4, #12]
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	f013 0f08 	tst.w	r3, #8
 8009bd4:	d007      	beq.n	8009be6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bd6:	4a11      	ldr	r2, [pc, #68]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009bd8:	6893      	ldr	r3, [r2, #8]
 8009bda:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009bde:	6921      	ldr	r1, [r4, #16]
 8009be0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009be4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009be6:	f7ff ff03 	bl	80099f0 <HAL_RCC_GetSysClockFreq>
 8009bea:	4b0c      	ldr	r3, [pc, #48]	@ (8009c1c <HAL_RCC_ClockConfig+0x150>)
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8009c20 <HAL_RCC_ClockConfig+0x154>)
 8009bf4:	5cd3      	ldrb	r3, [r2, r3]
 8009bf6:	40d8      	lsrs	r0, r3
 8009bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c24 <HAL_RCC_ClockConfig+0x158>)
 8009bfa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009c28 <HAL_RCC_ClockConfig+0x15c>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	f7ff f950 	bl	8008ea4 <HAL_InitTick>
  return HAL_OK;
 8009c04:	2000      	movs	r0, #0
}
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009c08:	2001      	movs	r0, #1
}
 8009c0a:	4770      	bx	lr
      return HAL_ERROR;
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	e7fa      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8009c10:	2001      	movs	r0, #1
 8009c12:	e7f8      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8009c14:	2001      	movs	r0, #1
 8009c16:	e7f6      	b.n	8009c06 <HAL_RCC_ClockConfig+0x13a>
 8009c18:	40023c00 	.word	0x40023c00
 8009c1c:	40023800 	.word	0x40023800
 8009c20:	08028bb8 	.word	0x08028bb8
 8009c24:	2000018c 	.word	0x2000018c
 8009c28:	20000004 	.word	0x20000004

08009c2c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8009c2c:	4b01      	ldr	r3, [pc, #4]	@ (8009c34 <HAL_RCC_GetHCLKFreq+0x8>)
 8009c2e:	6818      	ldr	r0, [r3, #0]
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	2000018c 	.word	0x2000018c

08009c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009c3a:	f7ff fff7 	bl	8009c2c <HAL_RCC_GetHCLKFreq>
 8009c3e:	4b04      	ldr	r3, [pc, #16]	@ (8009c50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009c46:	4a03      	ldr	r2, [pc, #12]	@ (8009c54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009c48:	5cd3      	ldrb	r3, [r2, r3]
}
 8009c4a:	40d8      	lsrs	r0, r3
 8009c4c:	bd08      	pop	{r3, pc}
 8009c4e:	bf00      	nop
 8009c50:	40023800 	.word	0x40023800
 8009c54:	08028bb0 	.word	0x08028bb0

08009c58 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009c58:	230f      	movs	r3, #15
 8009c5a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c8c <HAL_RCC_GetClockConfig+0x34>)
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	f002 0203 	and.w	r2, r2, #3
 8009c64:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8009c6c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8009c74:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	08db      	lsrs	r3, r3, #3
 8009c7a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8009c7e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c80:	4b03      	ldr	r3, [pc, #12]	@ (8009c90 <HAL_RCC_GetClockConfig+0x38>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 030f 	and.w	r3, r3, #15
 8009c88:	600b      	str	r3, [r1, #0]
}
 8009c8a:	4770      	bx	lr
 8009c8c:	40023800 	.word	0x40023800
 8009c90:	40023c00 	.word	0x40023c00

08009c94 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8009c94:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009c96:	f7ff f951 	bl	8008f3c <HAL_GetTick>
 8009c9a:	4604      	mov	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009c9c:	4a46      	ldr	r2, [pc, #280]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009c9e:	6813      	ldr	r3, [r2, #0]
 8009ca0:	f043 0301 	orr.w	r3, r3, #1
 8009ca4:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009ca6:	4b44      	ldr	r3, [pc, #272]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f013 0f02 	tst.w	r3, #2
 8009cae:	d106      	bne.n	8009cbe <HAL_RCC_DeInit+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cb0:	f7ff f944 	bl	8008f3c <HAL_GetTick>
 8009cb4:	1b00      	subs	r0, r0, r4
 8009cb6:	2802      	cmp	r0, #2
 8009cb8:	d9f5      	bls.n	8009ca6 <HAL_RCC_DeInit+0x12>
    {
      return HAL_TIMEOUT;
 8009cba:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8009cbc:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8009cbe:	4d3e      	ldr	r5, [pc, #248]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8009cc8:	f7ff f938 	bl	8008f3c <HAL_GetTick>
 8009ccc:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009cd2:	4b39      	ldr	r3, [pc, #228]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f013 0f0c 	tst.w	r3, #12
 8009cda:	d008      	beq.n	8009cee <HAL_RCC_DeInit+0x5a>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cdc:	f7ff f92e 	bl	8008f3c <HAL_GetTick>
 8009ce0:	1b00      	subs	r0, r0, r4
 8009ce2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009ce6:	4298      	cmp	r0, r3
 8009ce8:	d9f3      	bls.n	8009cd2 <HAL_RCC_DeInit+0x3e>
      return HAL_TIMEOUT;
 8009cea:	2003      	movs	r0, #3
 8009cec:	e7e6      	b.n	8009cbc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009cee:	f7ff f925 	bl	8008f3c <HAL_GetTick>
 8009cf2:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009cf4:	4a30      	ldr	r2, [pc, #192]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009cf6:	6813      	ldr	r3, [r2, #0]
 8009cf8:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009cfc:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009d06:	d006      	beq.n	8009d16 <HAL_RCC_DeInit+0x82>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d08:	f7ff f918 	bl	8008f3c <HAL_GetTick>
 8009d0c:	1b00      	subs	r0, r0, r4
 8009d0e:	2864      	cmp	r0, #100	@ 0x64
 8009d10:	d9f5      	bls.n	8009cfe <HAL_RCC_DeInit+0x6a>
      return HAL_TIMEOUT;
 8009d12:	2003      	movs	r0, #3
 8009d14:	e7d2      	b.n	8009cbc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009d16:	f7ff f911 	bl	8008f3c <HAL_GetTick>
 8009d1a:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009d1c:	4a26      	ldr	r2, [pc, #152]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009d1e:	6813      	ldr	r3, [r2, #0]
 8009d20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d24:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009d26:	4b24      	ldr	r3, [pc, #144]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009d2e:	d006      	beq.n	8009d3e <HAL_RCC_DeInit+0xaa>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d30:	f7ff f904 	bl	8008f3c <HAL_GetTick>
 8009d34:	1b00      	subs	r0, r0, r4
 8009d36:	2802      	cmp	r0, #2
 8009d38:	d9f5      	bls.n	8009d26 <HAL_RCC_DeInit+0x92>
      return HAL_TIMEOUT;
 8009d3a:	2003      	movs	r0, #3
 8009d3c:	e7be      	b.n	8009cbc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8009d3e:	f7ff f8fd 	bl	8008f3c <HAL_GetTick>
 8009d42:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8009d44:	4a1c      	ldr	r2, [pc, #112]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009d46:	6813      	ldr	r3, [r2, #0]
 8009d48:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d4c:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8009d56:	d006      	beq.n	8009d66 <HAL_RCC_DeInit+0xd2>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d58:	f7ff f8f0 	bl	8008f3c <HAL_GetTick>
 8009d5c:	1b00      	subs	r0, r0, r4
 8009d5e:	2802      	cmp	r0, #2
 8009d60:	d9f5      	bls.n	8009d4e <HAL_RCC_DeInit+0xba>
      return HAL_TIMEOUT;
 8009d62:	2003      	movs	r0, #3
 8009d64:	e7aa      	b.n	8009cbc <HAL_RCC_DeInit+0x28>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8009d66:	4b14      	ldr	r3, [pc, #80]	@ (8009db8 <HAL_RCC_DeInit+0x124>)
 8009d68:	4a14      	ldr	r2, [pc, #80]	@ (8009dbc <HAL_RCC_DeInit+0x128>)
 8009d6a:	605a      	str	r2, [r3, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8009d6c:	4a14      	ldr	r2, [pc, #80]	@ (8009dc0 <HAL_RCC_DeInit+0x12c>)
 8009d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009d78:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d80:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8009d82:	68da      	ldr	r2, [r3, #12]
 8009d84:	f442 021f 	orr.w	r2, r2, #10420224	@ 0x9f0000
 8009d88:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8009d90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8009d92:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009d94:	f022 0201 	bic.w	r2, r2, #1
 8009d98:	675a      	str	r2, [r3, #116]	@ 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009d9a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009d9c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8009da0:	675a      	str	r2, [r3, #116]	@ 0x74
  SystemCoreClock = HSI_VALUE;
 8009da2:	4b08      	ldr	r3, [pc, #32]	@ (8009dc4 <HAL_RCC_DeInit+0x130>)
 8009da4:	4a08      	ldr	r2, [pc, #32]	@ (8009dc8 <HAL_RCC_DeInit+0x134>)
 8009da6:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009da8:	4b08      	ldr	r3, [pc, #32]	@ (8009dcc <HAL_RCC_DeInit+0x138>)
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	f7ff f87a 	bl	8008ea4 <HAL_InitTick>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d083      	beq.n	8009cbc <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 8009db4:	2001      	movs	r0, #1
 8009db6:	e781      	b.n	8009cbc <HAL_RCC_DeInit+0x28>
 8009db8:	40023800 	.word	0x40023800
 8009dbc:	04003010 	.word	0x04003010
 8009dc0:	20003000 	.word	0x20003000
 8009dc4:	2000018c 	.word	0x2000018c
 8009dc8:	00f42400 	.word	0x00f42400
 8009dcc:	20000004 	.word	0x20000004

08009dd0 <__enable_irq>:
  __ASM volatile ("cpsie i" : : : "memory");
 8009dd0:	b662      	cpsie	i
}
 8009dd2:	4770      	bx	lr

08009dd4 <__disable_irq>:
  __ASM volatile ("cpsid i" : : : "memory");
 8009dd4:	b672      	cpsid	i
}
 8009dd6:	4770      	bx	lr

08009dd8 <motor_iterator>:

static void motor_iterator (motor_iterator_callback_ptr callback)
{
    motor_map_t motor;

    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 8009dd8:	b180      	cbz	r0, 8009dfc <motor_iterator+0x24>
{
 8009dda:	b570      	push	{r4, r5, r6, lr}
 8009ddc:	4606      	mov	r6, r0
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 8009dde:	2500      	movs	r5, #0
 8009de0:	f36f 0507 	bfc	r5, #0, #8
 8009de4:	e006      	b.n	8009df4 <motor_iterator+0x1c>
    {
        if(motor.id < N_AXIS)
            motor.axis = motor.id;
 8009de6:	f364 250f 	bfi	r5, r4, #8, #8
            case Z2_MOTOR:
                motor.axis = Z_AXIS;
                break;
#endif
        }
        callback(motor);
 8009dea:	4628      	mov	r0, r5
 8009dec:	47b0      	blx	r6
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 8009dee:	3401      	adds	r4, #1
 8009df0:	f364 0507 	bfi	r5, r4, #0, #8
 8009df4:	b2ec      	uxtb	r4, r5
 8009df6:	2c02      	cmp	r4, #2
 8009df8:	d9f5      	bls.n	8009de6 <motor_iterator+0xe>
    }
}
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	4770      	bx	lr
	...

08009e00 <aux_ctrl_remap_explicit>:
    { .function = Input_ProbeDisconnect, .aux_port = 0xFF, .irq_mode = (pin_irq_mode_t)(IRQ_Mode_Rising|IRQ_Mode_Falling), .cap = { .probe_disconnected = On }, .pin = 0xFF, .port = NULL },
#endif
};

static inline aux_ctrl_t *aux_ctrl_remap_explicit (void *port, uint8_t pin, uint8_t aux_port, void *input)
{
 8009e00:	b530      	push	{r4, r5, lr}
 8009e02:	4686      	mov	lr, r0
    aux_ctrl_t *ctrl_pin = NULL;

    uint_fast8_t idx = sizeof(aux_ctrl) / sizeof(aux_ctrl_t);
 8009e04:	2400      	movs	r4, #0
    aux_ctrl_t *ctrl_pin = NULL;
 8009e06:	4620      	mov	r0, r4
 8009e08:	e001      	b.n	8009e0e <aux_ctrl_remap_explicit+0xe>
        if(aux_ctrl[idx].port == port && aux_ctrl[idx].pin == pin) {
            ctrl_pin = &aux_ctrl[idx];
            ctrl_pin->aux_port = aux_port;
            ctrl_pin->input = input;
        }
    } while(idx && ctrl_pin == NULL);
 8009e0a:	b194      	cbz	r4, 8009e32 <aux_ctrl_remap_explicit+0x32>
 8009e0c:	b988      	cbnz	r0, 8009e32 <aux_ctrl_remap_explicit+0x32>
        idx--;
 8009e0e:	3c01      	subs	r4, #1
        if(aux_ctrl[idx].port == port && aux_ctrl[idx].pin == pin) {
 8009e10:	4d08      	ldr	r5, [pc, #32]	@ (8009e34 <aux_ctrl_remap_explicit+0x34>)
 8009e12:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8009e16:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8009e1a:	4575      	cmp	r5, lr
 8009e1c:	d1f5      	bne.n	8009e0a <aux_ctrl_remap_explicit+0xa>
 8009e1e:	f89c 5006 	ldrb.w	r5, [ip, #6]
 8009e22:	428d      	cmp	r5, r1
 8009e24:	d1f1      	bne.n	8009e0a <aux_ctrl_remap_explicit+0xa>
            ctrl_pin = &aux_ctrl[idx];
 8009e26:	4660      	mov	r0, ip
            ctrl_pin->aux_port = aux_port;
 8009e28:	f88c 2001 	strb.w	r2, [ip, #1]
            ctrl_pin->input = input;
 8009e2c:	f8cc 300c 	str.w	r3, [ip, #12]
 8009e30:	e7eb      	b.n	8009e0a <aux_ctrl_remap_explicit+0xa>

    return ctrl_pin;
}
 8009e32:	bd30      	pop	{r4, r5, pc}
 8009e34:	20000754 	.word	0x20000754

08009e38 <stepperEnable>:
   #ifdef C_ENABLE_PORT
    DIGITAL_OUT(C_ENABLE_PORT, C_ENABLE_PIN, enable.c);
   #endif
  #endif
#endif
}
 8009e38:	4770      	bx	lr
	...

08009e3c <stepperWakeUp>:

// Starts stepper driver ISR timer and forces a stepper driver interrupt callback
static void stepperWakeUp (void)
{
 8009e3c:	b510      	push	{r4, lr}
    hal.stepper.enable((axes_signals_t){AXES_BITMASK});
 8009e3e:	4c0b      	ldr	r4, [pc, #44]	@ (8009e6c <stepperWakeUp+0x30>)
 8009e40:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8009e44:	f04f 0007 	mov.w	r0, #7
 8009e48:	4798      	blx	r3

    STEPPER_TIMER->ARR = hal.f_step_timer / 500; // ~2ms delay to allow drivers time to wake up.
 8009e4a:	69e2      	ldr	r2, [r4, #28]
 8009e4c:	4b08      	ldr	r3, [pc, #32]	@ (8009e70 <stepperWakeUp+0x34>)
 8009e4e:	fba3 3202 	umull	r3, r2, r3, r2
 8009e52:	0952      	lsrs	r2, r2, #5
 8009e54:	4b07      	ldr	r3, [pc, #28]	@ (8009e74 <stepperWakeUp+0x38>)
 8009e56:	62da      	str	r2, [r3, #44]	@ 0x2c
    STEPPER_TIMER->EGR = TIM_EGR_UG;
 8009e58:	2201      	movs	r2, #1
 8009e5a:	615a      	str	r2, [r3, #20]
    STEPPER_TIMER->SR = ~TIM_SR_UIF;
 8009e5c:	f06f 0201 	mvn.w	r2, #1
 8009e60:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->CR1 |= TIM_CR1_CEN;
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	f042 0201 	orr.w	r2, r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
}
 8009e6a:	bd10      	pop	{r4, pc}
 8009e6c:	200011c0 	.word	0x200011c0
 8009e70:	10624dd3 	.word	0x10624dd3
 8009e74:	40000c00 	.word	0x40000c00

08009e78 <stepperGoIdle>:

// Disables stepper driver interrupts
static void stepperGoIdle (bool clear_signals)
{
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 8009e78:	4b03      	ldr	r3, [pc, #12]	@ (8009e88 <stepperGoIdle+0x10>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	f022 0201 	bic.w	r2, r2, #1
 8009e80:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->CNT = 0;
 8009e82:	2200      	movs	r2, #0
 8009e84:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009e86:	4770      	bx	lr
 8009e88:	40000c00 	.word	0x40000c00

08009e8c <stepperCyclesPerTick>:

// Sets up stepper driver interrupt timeout, "Normal" version
static void stepperCyclesPerTick (uint32_t cycles_per_tick)
{
    STEPPER_TIMER->ARR = cycles_per_tick < (1UL << 20) ? cycles_per_tick : 0x000FFFFFUL;
 8009e8c:	4b03      	ldr	r3, [pc, #12]	@ (8009e9c <stepperCyclesPerTick+0x10>)
 8009e8e:	4298      	cmp	r0, r3
 8009e90:	bf28      	it	cs
 8009e92:	4618      	movcs	r0, r3
 8009e94:	4b02      	ldr	r3, [pc, #8]	@ (8009ea0 <stepperCyclesPerTick+0x14>)
 8009e96:	62d8      	str	r0, [r3, #44]	@ 0x2c
}
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	000fffff 	.word	0x000fffff
 8009ea0:	40000c00 	.word	0x40000c00

08009ea4 <stepperPulseStart>:
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change)
 8009ea4:	7b43      	ldrb	r3, [r0, #13]
 8009ea6:	b1ab      	cbz	r3, 8009ed4 <stepperPulseStart+0x30>
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 8009ea8:	7bc3      	ldrb	r3, [r0, #15]
 8009eaa:	4a19      	ldr	r2, [pc, #100]	@ (8009f10 <stepperPulseStart+0x6c>)
 8009eac:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 8009eb0:	4053      	eors	r3, r2
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 8009eb2:	f3c3 0100 	ubfx	r1, r3, #0, #1
 8009eb6:	4a17      	ldr	r2, [pc, #92]	@ (8009f14 <stepperPulseStart+0x70>)
 8009eb8:	f882 10b0 	strb.w	r1, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 8009ebc:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8009ec0:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8009ec4:	f882 10bc 	strb.w	r1, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 8009ec8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ecc:	f502 32c0 	add.w	r2, r2, #98304	@ 0x18000
 8009ed0:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
        stepperSetDirOutputs(stepper->dir_outbits);

    if(stepper->step_outbits.value) {
 8009ed4:	7b83      	ldrb	r3, [r0, #14]
 8009ed6:	b1cb      	cbz	r3, 8009f0c <stepperPulseStart+0x68>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8009ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8009f10 <stepperPulseStart+0x6c>)
 8009eda:	f892 20e8 	ldrb.w	r2, [r2, #232]	@ 0xe8
 8009ede:	4053      	eors	r3, r2
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 8009ee0:	f3c3 0100 	ubfx	r1, r3, #0, #1
 8009ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8009f14 <stepperPulseStart+0x70>)
 8009ee6:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 8009eea:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8009eee:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 8009ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ef6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8009efa:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 8009efe:	4b06      	ldr	r3, [pc, #24]	@ (8009f18 <stepperPulseStart+0x74>)
 8009f00:	2201      	movs	r2, #1
 8009f02:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]
    }
}
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	20001bd8 	.word	0x20001bd8
 8009f14:	42418200 	.word	0x42418200
 8009f18:	40000800 	.word	0x40000800

08009f1c <stepperPulseStartDelayed>:
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change) {
 8009f1c:	7b43      	ldrb	r3, [r0, #13]
 8009f1e:	b9e3      	cbnz	r3, 8009f5a <stepperPulseStartDelayed+0x3e>
        }

        return;
    }

    if(stepper->step_outbits.value) {
 8009f20:	7b83      	ldrb	r3, [r0, #14]
 8009f22:	b1cb      	cbz	r3, 8009f58 <stepperPulseStartDelayed+0x3c>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8009f24:	4a20      	ldr	r2, [pc, #128]	@ (8009fa8 <stepperPulseStartDelayed+0x8c>)
 8009f26:	f892 20e8 	ldrb.w	r2, [r2, #232]	@ 0xe8
 8009f2a:	4053      	eors	r3, r2
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 8009f2c:	f3c3 0100 	ubfx	r1, r3, #0, #1
 8009f30:	4a1e      	ldr	r2, [pc, #120]	@ (8009fac <stepperPulseStartDelayed+0x90>)
 8009f32:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 8009f36:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8009f3a:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 8009f3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f42:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8009f46:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 8009f4a:	4b19      	ldr	r3, [pc, #100]	@ (8009fb0 <stepperPulseStartDelayed+0x94>)
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	f042 0201 	orr.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]
    }
}
 8009f58:	4770      	bx	lr
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 8009f5a:	7bc3      	ldrb	r3, [r0, #15]
 8009f5c:	4a12      	ldr	r2, [pc, #72]	@ (8009fa8 <stepperPulseStartDelayed+0x8c>)
 8009f5e:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 8009f62:	4053      	eors	r3, r2
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 8009f64:	f3c3 0100 	ubfx	r1, r3, #0, #1
 8009f68:	4a10      	ldr	r2, [pc, #64]	@ (8009fac <stepperPulseStartDelayed+0x90>)
 8009f6a:	f882 10b0 	strb.w	r1, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 8009f6e:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8009f72:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8009f76:	f882 10bc 	strb.w	r1, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 8009f7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f7e:	f502 32c0 	add.w	r2, r2, #98304	@ 0x18000
 8009f82:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
        if(stepper->step_outbits.value) {
 8009f86:	7b83      	ldrb	r3, [r0, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0e5      	beq.n	8009f58 <stepperPulseStartDelayed+0x3c>
            next_step_outbits = stepper->step_outbits; // Store out_bits
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	4b09      	ldr	r3, [pc, #36]	@ (8009fb4 <stepperPulseStartDelayed+0x98>)
 8009f90:	701a      	strb	r2, [r3, #0]
            PULSE_TIMER->ARR = pulse_delay;
 8009f92:	4b09      	ldr	r3, [pc, #36]	@ (8009fb8 <stepperPulseStartDelayed+0x9c>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	4b06      	ldr	r3, [pc, #24]	@ (8009fb0 <stepperPulseStartDelayed+0x94>)
 8009f98:	62da      	str	r2, [r3, #44]	@ 0x2c
            PULSE_TIMER->EGR = TIM_EGR_UG;
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	615a      	str	r2, [r3, #20]
            PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	f042 0201 	orr.w	r2, r2, #1
 8009fa4:	601a      	str	r2, [r3, #0]
        return;
 8009fa6:	4770      	bx	lr
 8009fa8:	20001bd8 	.word	0x20001bd8
 8009fac:	42418200 	.word	0x42418200
 8009fb0:	40000800 	.word	0x40000800
 8009fb4:	2000072c 	.word	0x2000072c
 8009fb8:	20000740 	.word	0x20000740

08009fbc <limitsGetState>:
}

// Returns limit state as an limit_signals_t variable.
// Each bitfield bit indicates an axis limit, where triggered is 1 and not triggered is 0.
inline static limit_signals_t limitsGetState (void)
{
 8009fbc:	b082      	sub	sp, #8
    limit_signals_t signals = {0};
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9300      	str	r3, [sp, #0]

    signals.min.mask = settings.limits.invert.mask;
 8009fc2:	4b1c      	ldr	r3, [pc, #112]	@ (800a034 <limitsGetState+0x78>)
 8009fc4:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8009fc8:	f88d 3000 	strb.w	r3, [sp]
#ifdef MAX_LIMIT_SWITCHES
    signals.max.mask = settings.limits.invert.mask;
#endif

#if LIMIT_INMODE == GPIO_BITBAND
    signals.min.x = DIGITAL_IN(X_LIMIT_PORT, X_LIMIT_PIN);
 8009fcc:	4a1a      	ldr	r2, [pc, #104]	@ (800a038 <limitsGetState+0x7c>)
 8009fce:	f892 002c 	ldrb.w	r0, [r2, #44]	@ 0x2c
 8009fd2:	b2d9      	uxtb	r1, r3
 8009fd4:	f360 0100 	bfi	r1, r0, #0, #1
 8009fd8:	f88d 1000 	strb.w	r1, [sp]
    signals.min.y = DIGITAL_IN(Y_LIMIT_PORT, Y_LIMIT_PIN);
 8009fdc:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 8009fe0:	f89d 2000 	ldrb.w	r2, [sp]
 8009fe4:	f361 0241 	bfi	r2, r1, #1, #1
 8009fe8:	f88d 2000 	strb.w	r2, [sp]
    signals.min.z = DIGITAL_IN(Z_LIMIT_PORT, Z_LIMIT_PIN);
 8009fec:	4a13      	ldr	r2, [pc, #76]	@ (800a03c <limitsGetState+0x80>)
 8009fee:	f892 1030 	ldrb.w	r1, [r2, #48]	@ 0x30
 8009ff2:	f89d 2000 	ldrb.w	r2, [sp]
 8009ff6:	f361 0282 	bfi	r2, r1, #2, #1
 8009ffa:	f88d 2000 	strb.w	r2, [sp]
#endif
#ifdef Z_LIMIT_PIN_MAX
    signals.max.z = DIGITAL_IN(Z_LIMIT_PORT_MAX, Z_LIMIT_PIN_MAX);
#endif

    if (settings.limits.invert.mask) {
 8009ffe:	b11b      	cbz	r3, 800a008 <limitsGetState+0x4c>
        signals.min.value ^= settings.limits.invert.mask;
 800a000:	b2d2      	uxtb	r2, r2
 800a002:	4053      	eors	r3, r2
 800a004:	f88d 3000 	strb.w	r3, [sp]
#ifdef MAX_LIMIT_SWITCHES
        signals.max.value ^= settings.limits.invert.mask;
#endif
    }

    return signals;
 800a008:	9b00      	ldr	r3, [sp, #0]
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	2000      	movs	r0, #0
 800a00e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a012:	f363 0007 	bfi	r0, r3, #0, #8
 800a016:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a01a:	f363 200f 	bfi	r0, r3, #8, #8
 800a01e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a022:	f363 4017 	bfi	r0, r3, #16, #8
 800a026:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a02a:	f363 601f 	bfi	r0, r3, #24, #8
}
 800a02e:	b002      	add	sp, #8
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	20001bd8 	.word	0x20001bd8
 800a038:	42400200 	.word	0x42400200
 800a03c:	42408200 	.word	0x42408200

0800a040 <systemGetState>:
// Each bitfield bit indicates a control signal, where triggered is 1 and not triggered is 0.
static control_signals_t systemGetState (void)
{
    control_signals_t signals;

    signals.mask = settings.control_invert.mask;
 800a040:	4a06      	ldr	r2, [pc, #24]	@ (800a05c <systemGetState+0x1c>)
 800a042:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 800a046:	4618      	mov	r0, r3
  #endif
#else
//    signals.value &= ~(CONTROL_MASK >> CONTROL_INMODE);
//    signals.value |= (uint16_t)((CONTROL_PORT->IDR & CONTROL_MASK) >> CONTROL_INMODE);
  #if ESTOP_ENABLE
    signals.e_stop = signals.reset;
 800a048:	f363 1086 	bfi	r0, r3, #6, #1
    signals.reset = settings.control_invert.reset;
 800a04c:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 800a050:	f362 0000 	bfi	r0, r2, #0, #1
  #endif
  #ifdef MOTOR_WARNING_PIN
    signals.motor_warning = DIGITAL_IN(MOTOR_WARNING_PORT, MOTOR_WARNING_PIN);
  #endif

    if(settings.control_invert.mask)
 800a054:	b10b      	cbz	r3, 800a05a <systemGetState+0x1a>
        signals.value ^= settings.control_invert.mask;
 800a056:	b280      	uxth	r0, r0
 800a058:	4058      	eors	r0, r3

#endif // AUX_CONTROLS_ENABLED


    return signals;
}
 800a05a:	4770      	bx	lr
 800a05c:	20001bd8 	.word	0x20001bd8

0800a060 <coolantSetState>:
#endif // SPINDLE_ENCODER_ENABLE

// Start/stop coolant (and mist if enabled)
static void coolantSetState (coolant_state_t mode)
{
    mode.value ^= settings.coolant_invert.mask;
 800a060:	b2c0      	uxtb	r0, r0
 800a062:	4b08      	ldr	r3, [pc, #32]	@ (800a084 <coolantSetState+0x24>)
 800a064:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800a068:	4058      	eors	r0, r3
    DIGITAL_OUT(COOLANT_FLOOD_PORT, COOLANT_FLOOD_PIN, mode.flood);
 800a06a:	f3c0 0200 	ubfx	r2, r0, #0, #1
 800a06e:	4b06      	ldr	r3, [pc, #24]	@ (800a088 <coolantSetState+0x28>)
 800a070:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
#ifdef COOLANT_MIST_PIN
    DIGITAL_OUT(COOLANT_MIST_PORT, COOLANT_MIST_PIN, mode.mist);
 800a074:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800a078:	f5a3 33c0 	sub.w	r3, r3, #98304	@ 0x18000
 800a07c:	f883 0094 	strb.w	r0, [r3, #148]	@ 0x94
#endif
}
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20001bd8 	.word	0x20001bd8
 800a088:	42420200 	.word	0x42420200

0800a08c <coolantGetState>:

// Returns coolant state in a coolant_state_t variable
static coolant_state_t coolantGetState (void)
{
    coolant_state_t state = (coolant_state_t){settings.coolant_invert.mask};
 800a08c:	4b07      	ldr	r3, [pc, #28]	@ (800a0ac <coolantGetState+0x20>)
 800a08e:	f893 0070 	ldrb.w	r0, [r3, #112]	@ 0x70
 800a092:	4603      	mov	r3, r0

    state.flood = DIGITAL_IN(COOLANT_FLOOD_PORT, COOLANT_FLOOD_PIN);
 800a094:	4a06      	ldr	r2, [pc, #24]	@ (800a0b0 <coolantGetState+0x24>)
 800a096:	7812      	ldrb	r2, [r2, #0]
 800a098:	f362 0300 	bfi	r3, r2, #0, #1
#ifdef COOLANT_MIST_PIN
    state.mist  = DIGITAL_IN(COOLANT_MIST_PORT, COOLANT_MIST_PIN);
 800a09c:	4a05      	ldr	r2, [pc, #20]	@ (800a0b4 <coolantGetState+0x28>)
 800a09e:	7d12      	ldrb	r2, [r2, #20]
 800a0a0:	f362 0341 	bfi	r3, r2, #1, #1
#endif
    state.value ^= settings.coolant_invert.mask;
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	4058      	eors	r0, r3

    return state;
}
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	20001bd8 	.word	0x20001bd8
 800a0b0:	42420200 	.word	0x42420200
 800a0b4:	42408200 	.word	0x42408200

0800a0b8 <bitsSetAtomic>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a0b8:	b672      	cpsid	i

// Helper functions for setting/clearing/inverting individual bits atomically (uninterruptable)
static void bitsSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
    __disable_irq();
    *ptr |= bits;
 800a0ba:	6803      	ldr	r3, [r0, #0]
 800a0bc:	4319      	orrs	r1, r3
 800a0be:	6001      	str	r1, [r0, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a0c0:	b662      	cpsie	i
    __enable_irq();
}
 800a0c2:	4770      	bx	lr

0800a0c4 <bitsClearAtomic>:

static uint_fast16_t bitsClearAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
 800a0c4:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a0c6:	b672      	cpsid	i
    __disable_irq();
    uint_fast16_t prev = *ptr;
 800a0c8:	6800      	ldr	r0, [r0, #0]
    *ptr &= ~bits;
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	ea22 0101 	bic.w	r1, r2, r1
 800a0d0:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a0d2:	b662      	cpsie	i
    __enable_irq();

    return prev;
}
 800a0d4:	4770      	bx	lr

0800a0d6 <valueSetAtomic>:

static uint_fast16_t valueSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t value)
{
 800a0d6:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800a0d8:	b672      	cpsid	i
    __disable_irq();
    uint_fast16_t prev = *ptr;
 800a0da:	6800      	ldr	r0, [r0, #0]
    *ptr = value;
 800a0dc:	6019      	str	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a0de:	b662      	cpsie	i
    __enable_irq();

    return prev;
}
 800a0e0:	4770      	bx	lr
	...

0800a0e4 <getElapsedMicros>:

static uint64_t getElapsedMicros (void)
{
 800a0e4:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a124 <getElapsedMicros+0x40>)
 800a0e8:	e852 3f00 	ldrex	r3, [r2]
    uint32_t ms, cycles;
    do {
        __LDREXW(&systick_safe_read);
        ms = uwTick;
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a128 <getElapsedMicros+0x44>)
 800a0ee:	681c      	ldr	r4, [r3, #0]
        cycles = cycle_count;
 800a0f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a12c <getElapsedMicros+0x48>)
 800a0f2:	6818      	ldr	r0, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e842 3100 	strex	r1, r3, [r2]
    } while(__STREXW(1, &systick_safe_read));
 800a0fa:	2900      	cmp	r1, #0
 800a0fc:	d1f3      	bne.n	800a0e6 <getElapsedMicros+0x2>

    uint32_t cyccnt = DWT->CYCCNT;
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <getElapsedMicros+0x4c>)
 800a100:	685b      	ldr	r3, [r3, #4]
    asm volatile("" : : : "memory");
    uint32_t ccdelta = cyccnt - cycles;
 800a102:	1a18      	subs	r0, r3, r0
    uint32_t frac = ((uint64_t)ccdelta * cycles2us_factor) >> 32;
 800a104:	4b0b      	ldr	r3, [pc, #44]	@ (800a134 <getElapsedMicros+0x50>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	fba3 3000 	umull	r3, r0, r3, r0

    return ms * 1000 + (frac > 1000 ? 1000 : frac);
 800a10c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a110:	bf28      	it	cs
 800a112:	f44f 707a 	movcs.w	r0, #1000	@ 0x3e8
}
 800a116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a11a:	fb03 0004 	mla	r0, r3, r4, r0
 800a11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	2000074c 	.word	0x2000074c
 800a128:	20000680 	.word	0x20000680
 800a12c:	20000dc8 	.word	0x20000dc8
 800a130:	e0001000 	.word	0xe0001000
 800a134:	20000748 	.word	0x20000748

0800a138 <getElapsedTicks>:

static uint32_t getElapsedTicks (void)
{
    return uwTick;
 800a138:	4b01      	ldr	r3, [pc, #4]	@ (800a140 <getElapsedTicks+0x8>)
 800a13a:	6818      	ldr	r0, [r3, #0]
}
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	20000680 	.word	0x20000680

0800a144 <port2char>:

static char *port2char (GPIO_TypeDef *port)
{
    static char name[3] = "P?";

    name[1] = 'A' + GPIO_GET_INDEX(port);
 800a144:	4b19      	ldr	r3, [pc, #100]	@ (800a1ac <port2char+0x68>)
 800a146:	4298      	cmp	r0, r3
 800a148:	d01f      	beq.n	800a18a <port2char+0x46>
 800a14a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a14e:	4298      	cmp	r0, r3
 800a150:	d01f      	beq.n	800a192 <port2char+0x4e>
 800a152:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a156:	4298      	cmp	r0, r3
 800a158:	d01d      	beq.n	800a196 <port2char+0x52>
 800a15a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a15e:	4298      	cmp	r0, r3
 800a160:	d01b      	beq.n	800a19a <port2char+0x56>
 800a162:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a166:	4298      	cmp	r0, r3
 800a168:	d019      	beq.n	800a19e <port2char+0x5a>
 800a16a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a16e:	4298      	cmp	r0, r3
 800a170:	d017      	beq.n	800a1a2 <port2char+0x5e>
 800a172:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a176:	4298      	cmp	r0, r3
 800a178:	d015      	beq.n	800a1a6 <port2char+0x62>
 800a17a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a17e:	4298      	cmp	r0, r3
 800a180:	d001      	beq.n	800a186 <port2char+0x42>
 800a182:	2349      	movs	r3, #73	@ 0x49
 800a184:	e002      	b.n	800a18c <port2char+0x48>
 800a186:	2348      	movs	r3, #72	@ 0x48
 800a188:	e000      	b.n	800a18c <port2char+0x48>
 800a18a:	2341      	movs	r3, #65	@ 0x41
 800a18c:	4808      	ldr	r0, [pc, #32]	@ (800a1b0 <port2char+0x6c>)
 800a18e:	7043      	strb	r3, [r0, #1]

    return name;
}
 800a190:	4770      	bx	lr
    name[1] = 'A' + GPIO_GET_INDEX(port);
 800a192:	2342      	movs	r3, #66	@ 0x42
 800a194:	e7fa      	b.n	800a18c <port2char+0x48>
 800a196:	2343      	movs	r3, #67	@ 0x43
 800a198:	e7f8      	b.n	800a18c <port2char+0x48>
 800a19a:	2344      	movs	r3, #68	@ 0x44
 800a19c:	e7f6      	b.n	800a18c <port2char+0x48>
 800a19e:	2345      	movs	r3, #69	@ 0x45
 800a1a0:	e7f4      	b.n	800a18c <port2char+0x48>
 800a1a2:	2346      	movs	r3, #70	@ 0x46
 800a1a4:	e7f2      	b.n	800a18c <port2char+0x48>
 800a1a6:	2347      	movs	r3, #71	@ 0x47
 800a1a8:	e7f0      	b.n	800a18c <port2char+0x48>
 800a1aa:	bf00      	nop
 800a1ac:	40020000 	.word	0x40020000
 800a1b0:	20000008 	.word	0x20000008

0800a1b4 <enumeratePins>:

static void enumeratePins (bool low_level, pin_info_ptr pin_info, void *data)
{
 800a1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	460f      	mov	r7, r1
 800a1bc:	4690      	mov	r8, r2
    static xbar_t pin = {0};

    uint8_t i, id = 0;

    pin.mode.input = On;
 800a1be:	4a53      	ldr	r2, [pc, #332]	@ (800a30c <enumeratePins+0x158>)
 800a1c0:	7d93      	ldrb	r3, [r2, #22]
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	7593      	strb	r3, [r2, #22]
    uint8_t i, id = 0;
 800a1c8:	2500      	movs	r5, #0

    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a1ca:	462c      	mov	r4, r5
 800a1cc:	e01f      	b.n	800a20e <enumeratePins+0x5a>
        pin.id = id++;
        pin.pin = inputpin[i].pin;
        pin.function = inputpin[i].id;
        pin.group = inputpin[i].group;
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 800a1ce:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800a310 <enumeratePins+0x15c>)
 800a1d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a1d8:	68d8      	ldr	r0, [r3, #12]
 800a1da:	f7ff ffb3 	bl	800a144 <port2char>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	484a      	ldr	r0, [pc, #296]	@ (800a30c <enumeratePins+0x158>)
 800a1e2:	6083      	str	r3, [r0, #8]
        pin.description = inputpin[i].description;
 800a1e4:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800a1e8:	4b49      	ldr	r3, [pc, #292]	@ (800a310 <enumeratePins+0x15c>)
 800a1ea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	60c3      	str	r3, [r0, #12]
        pin.mode.pwm = pin.group == PinGroup_SpindlePWM;
 800a1f2:	6843      	ldr	r3, [r0, #4]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	bf14      	ite	ne
 800a1f8:	2300      	movne	r3, #0
 800a1fa:	2301      	moveq	r3, #1
 800a1fc:	7dc2      	ldrb	r2, [r0, #23]
 800a1fe:	f363 1204 	bfi	r2, r3, #4, #1
 800a202:	75c2      	strb	r2, [r0, #23]

        pin_info(&pin, data);
 800a204:	4641      	mov	r1, r8
 800a206:	47b8      	blx	r7
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a208:	3401      	adds	r4, #1
 800a20a:	b2e4      	uxtb	r4, r4
        pin.id = id++;
 800a20c:	464d      	mov	r5, r9
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800a20e:	2c02      	cmp	r4, #2
 800a210:	d81b      	bhi.n	800a24a <enumeratePins+0x96>
        pin.id = id++;
 800a212:	f105 0901 	add.w	r9, r5, #1
 800a216:	fa5f f989 	uxtb.w	r9, r9
 800a21a:	4b3c      	ldr	r3, [pc, #240]	@ (800a30c <enumeratePins+0x158>)
 800a21c:	701d      	strb	r5, [r3, #0]
        pin.pin = inputpin[i].pin;
 800a21e:	4625      	mov	r5, r4
 800a220:	493b      	ldr	r1, [pc, #236]	@ (800a310 <enumeratePins+0x15c>)
 800a222:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a226:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a22a:	f892 c006 	ldrb.w	ip, [r2, #6]
 800a22e:	f8c3 c010 	str.w	ip, [r3, #16]
        pin.function = inputpin[i].id;
 800a232:	f811 1020 	ldrb.w	r1, [r1, r0, lsl #2]
 800a236:	7059      	strb	r1, [r3, #1]
        pin.group = inputpin[i].group;
 800a238:	6912      	ldr	r2, [r2, #16]
 800a23a:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 800a23c:	2e00      	cmp	r6, #0
 800a23e:	d0c6      	beq.n	800a1ce <enumeratePins+0x1a>
 800a240:	4b33      	ldr	r3, [pc, #204]	@ (800a310 <enumeratePins+0x15c>)
 800a242:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	e7ca      	b.n	800a1e0 <enumeratePins+0x2c>
    };

    pin.mode.mask = 0;
 800a24a:	4b30      	ldr	r3, [pc, #192]	@ (800a30c <enumeratePins+0x158>)
 800a24c:	2400      	movs	r4, #0
 800a24e:	82dc      	strh	r4, [r3, #22]
    pin.mode.output = On;
 800a250:	7d9a      	ldrb	r2, [r3, #22]
 800a252:	f042 0202 	orr.w	r2, r2, #2
 800a256:	759a      	strb	r2, [r3, #22]

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a258:	e011      	b.n	800a27e <enumeratePins+0xca>
        pin.id = id++;
        pin.pin = outputpin[i].pin;
        pin.function = outputpin[i].id;
        pin.group = outputpin[i].group;
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800a25a:	4b2e      	ldr	r3, [pc, #184]	@ (800a314 <enumeratePins+0x160>)
 800a25c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	482a      	ldr	r0, [pc, #168]	@ (800a30c <enumeratePins+0x158>)
 800a264:	6083      	str	r3, [r0, #8]
        pin.description = outputpin[i].description;
 800a266:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 800a26a:	4b2a      	ldr	r3, [pc, #168]	@ (800a314 <enumeratePins+0x160>)
 800a26c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	60c3      	str	r3, [r0, #12]

        pin_info(&pin, data);
 800a274:	4641      	mov	r1, r8
 800a276:	47b8      	blx	r7
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a278:	3401      	adds	r4, #1
 800a27a:	b2e4      	uxtb	r4, r4
        pin.id = id++;
 800a27c:	464d      	mov	r5, r9
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800a27e:	2c07      	cmp	r4, #7
 800a280:	d820      	bhi.n	800a2c4 <enumeratePins+0x110>
        pin.id = id++;
 800a282:	f105 0901 	add.w	r9, r5, #1
 800a286:	fa5f f989 	uxtb.w	r9, r9
 800a28a:	4b20      	ldr	r3, [pc, #128]	@ (800a30c <enumeratePins+0x158>)
 800a28c:	701d      	strb	r5, [r3, #0]
        pin.pin = outputpin[i].pin;
 800a28e:	4625      	mov	r5, r4
 800a290:	4920      	ldr	r1, [pc, #128]	@ (800a314 <enumeratePins+0x160>)
 800a292:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800a296:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800a29a:	f892 c008 	ldrb.w	ip, [r2, #8]
 800a29e:	f8c3 c010 	str.w	ip, [r3, #16]
        pin.function = outputpin[i].id;
 800a2a2:	f811 1020 	ldrb.w	r1, [r1, r0, lsl #2]
 800a2a6:	7059      	strb	r1, [r3, #1]
        pin.group = outputpin[i].group;
 800a2a8:	68d2      	ldr	r2, [r2, #12]
 800a2aa:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800a2ac:	2e00      	cmp	r6, #0
 800a2ae:	d1d4      	bne.n	800a25a <enumeratePins+0xa6>
 800a2b0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800a2b4:	4b17      	ldr	r3, [pc, #92]	@ (800a314 <enumeratePins+0x160>)
 800a2b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a2ba:	6858      	ldr	r0, [r3, #4]
 800a2bc:	f7ff ff42 	bl	800a144 <port2char>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	e7ce      	b.n	800a262 <enumeratePins+0xae>
    };

    periph_signal_t *ppin = periph_pins;
 800a2c4:	4b14      	ldr	r3, [pc, #80]	@ (800a318 <enumeratePins+0x164>)
 800a2c6:	681c      	ldr	r4, [r3, #0]

    if(ppin) do {
 800a2c8:	b984      	cbnz	r4, 800a2ec <enumeratePins+0x138>
        pin.mode = ppin->pin.mode;
        pin.description = ppin->pin.description;

        pin_info(&pin, data);
    } while((ppin = ppin->next));
}
 800a2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 800a2ce:	68a0      	ldr	r0, [r4, #8]
 800a2d0:	f7ff ff38 	bl	800a144 <port2char>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	480d      	ldr	r0, [pc, #52]	@ (800a30c <enumeratePins+0x158>)
 800a2d8:	6083      	str	r3, [r0, #8]
        pin.mode = ppin->pin.mode;
 800a2da:	8a23      	ldrh	r3, [r4, #16]
 800a2dc:	82c3      	strh	r3, [r0, #22]
        pin.description = ppin->pin.description;
 800a2de:	6963      	ldr	r3, [r4, #20]
 800a2e0:	60c3      	str	r3, [r0, #12]
        pin_info(&pin, data);
 800a2e2:	4641      	mov	r1, r8
 800a2e4:	47b8      	blx	r7
    } while((ppin = ppin->next));
 800a2e6:	69a4      	ldr	r4, [r4, #24]
 800a2e8:	2c00      	cmp	r4, #0
 800a2ea:	d0ee      	beq.n	800a2ca <enumeratePins+0x116>
        pin.id = id++;
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	3501      	adds	r5, #1
 800a2f0:	b2ed      	uxtb	r5, r5
 800a2f2:	4b06      	ldr	r3, [pc, #24]	@ (800a30c <enumeratePins+0x158>)
 800a2f4:	701a      	strb	r2, [r3, #0]
        pin.pin = ppin->pin.pin;
 800a2f6:	68e2      	ldr	r2, [r4, #12]
 800a2f8:	611a      	str	r2, [r3, #16]
        pin.function = ppin->pin.function;
 800a2fa:	7822      	ldrb	r2, [r4, #0]
 800a2fc:	705a      	strb	r2, [r3, #1]
        pin.group = ppin->pin.group;
 800a2fe:	6862      	ldr	r2, [r4, #4]
 800a300:	605a      	str	r2, [r3, #4]
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 800a302:	2e00      	cmp	r6, #0
 800a304:	d0e3      	beq.n	800a2ce <enumeratePins+0x11a>
 800a306:	68a3      	ldr	r3, [r4, #8]
 800a308:	e7e5      	b.n	800a2d6 <enumeratePins+0x122>
 800a30a:	bf00      	nop
 800a30c:	200006a4 	.word	0x200006a4
 800a310:	200000f4 	.word	0x200000f4
 800a314:	20000014 	.word	0x20000014
 800a318:	20000750 	.word	0x20000750

0800a31c <setPeriphPinDescription>:
    }
}

void setPeriphPinDescription (const pin_function_t function, const pin_group_t group, const char *description)
{
    periph_signal_t *ppin = periph_pins;
 800a31c:	4b0e      	ldr	r3, [pc, #56]	@ (800a358 <setPeriphPinDescription+0x3c>)
 800a31e:	681b      	ldr	r3, [r3, #0]

    if(ppin) do {
 800a320:	b943      	cbnz	r3, 800a334 <setPeriphPinDescription+0x18>
 800a322:	4770      	bx	lr
        if(ppin->pin.function == function && ppin->pin.group == group) {
            ppin->pin.description = description;
 800a324:	615a      	str	r2, [r3, #20]
            ppin = NULL;
 800a326:	2300      	movs	r3, #0
 800a328:	e00d      	b.n	800a346 <setPeriphPinDescription+0x2a>
        } else
            ppin = ppin->next;
    } while(ppin);
}
 800a32a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a32e:	4770      	bx	lr
            ppin = ppin->next;
 800a330:	699b      	ldr	r3, [r3, #24]
    } while(ppin);
 800a332:	b17b      	cbz	r3, 800a354 <setPeriphPinDescription+0x38>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a334:	f893 c000 	ldrb.w	ip, [r3]
 800a338:	4584      	cmp	ip, r0
 800a33a:	d1f9      	bne.n	800a330 <setPeriphPinDescription+0x14>
{
 800a33c:	b410      	push	{r4}
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a33e:	685c      	ldr	r4, [r3, #4]
 800a340:	428c      	cmp	r4, r1
 800a342:	d0ef      	beq.n	800a324 <setPeriphPinDescription+0x8>
            ppin = ppin->next;
 800a344:	699b      	ldr	r3, [r3, #24]
    } while(ppin);
 800a346:	2b00      	cmp	r3, #0
 800a348:	d0ef      	beq.n	800a32a <setPeriphPinDescription+0xe>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 800a34a:	f893 c000 	ldrb.w	ip, [r3]
 800a34e:	4584      	cmp	ip, r0
 800a350:	d1f8      	bne.n	800a344 <setPeriphPinDescription+0x28>
 800a352:	e7f4      	b.n	800a33e <setPeriphPinDescription+0x22>
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	20000750 	.word	0x20000750

0800a35c <settings_changed>:
    if(IOInitDone) {
 800a35c:	4bbe      	ldr	r3, [pc, #760]	@ (800a658 <settings_changed+0x2fc>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 8398 	beq.w	800aa96 <settings_changed+0x73a>
{
 800a366:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a368:	b087      	sub	sp, #28
 800a36a:	4605      	mov	r5, r0
        GPIO_InitTypeDef GPIO_Init = {
 800a36c:	2300      	movs	r3, #0
 800a36e:	9301      	str	r3, [sp, #4]
 800a370:	9302      	str	r3, [sp, #8]
 800a372:	9303      	str	r3, [sp, #12]
 800a374:	9304      	str	r3, [sp, #16]
 800a376:	9305      	str	r3, [sp, #20]
 800a378:	2302      	movs	r3, #2
 800a37a:	9304      	str	r3, [sp, #16]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800a37c:	48b7      	ldr	r0, [pc, #732]	@ (800a65c <settings_changed+0x300>)
 800a37e:	f890 30e8 	ldrb.w	r3, [r0, #232]	@ 0xe8
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800a382:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800a386:	4ab6      	ldr	r2, [pc, #728]	@ (800a660 <settings_changed+0x304>)
 800a388:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800a38c:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800a390:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800a394:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a398:	49b2      	ldr	r1, [pc, #712]	@ (800a664 <settings_changed+0x308>)
 800a39a:	f881 3088 	strb.w	r3, [r1, #136]	@ 0x88
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 800a39e:	f890 30e9 	ldrb.w	r3, [r0, #233]	@ 0xe9
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_PIN, dir_outbits.x);
 800a3a2:	f3c3 0000 	ubfx	r0, r3, #0, #1
 800a3a6:	f882 00b0 	strb.w	r0, [r2, #176]	@ 0xb0
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_PIN, dir_outbits.y);
 800a3aa:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800a3ae:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800a3b2:	f882 00bc 	strb.w	r0, [r2, #188]	@ 0xbc
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_PIN, dir_outbits.z);
 800a3b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a3ba:	f881 308c 	strb.w	r3, [r1, #140]	@ 0x8c
        pulse_length = (uint32_t)(10.0f * (settings->steppers.pulse_microseconds - STEP_PULSE_LATENCY)) - 1;
 800a3be:	edd5 7a3c 	vldr	s15, [r5, #240]	@ 0xf0
 800a3c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3ca:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a3ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d6:	ee17 3a90 	vmov	r3, s15
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	4aa2      	ldr	r2, [pc, #648]	@ (800a668 <settings_changed+0x30c>)
 800a3de:	6013      	str	r3, [r2, #0]
        if(hal.driver_cap.step_pulse_delay && settings->steppers.pulse_delay_microseconds > 0.0f) {
 800a3e0:	4aa2      	ldr	r2, [pc, #648]	@ (800a66c <settings_changed+0x310>)
 800a3e2:	f892 21d8 	ldrb.w	r2, [r2, #472]	@ 0x1d8
 800a3e6:	f012 0f02 	tst.w	r2, #2
 800a3ea:	d025      	beq.n	800a438 <settings_changed+0xdc>
 800a3ec:	edd5 7a3d 	vldr	s15, [r5, #244]	@ 0xf4
 800a3f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f8:	dd1e      	ble.n	800a438 <settings_changed+0xdc>
            pulse_delay = (uint32_t)(10.0f * (settings->steppers.pulse_delay_microseconds - 1.0f));
 800a3fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a402:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a40a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a40e:	ee17 2a90 	vmov	r2, s15
 800a412:	4997      	ldr	r1, [pc, #604]	@ (800a670 <settings_changed+0x314>)
 800a414:	edc1 7a00 	vstr	s15, [r1]
            if(pulse_delay < 2)
 800a418:	2a01      	cmp	r2, #1
 800a41a:	d905      	bls.n	800a428 <settings_changed+0xcc>
            else if(pulse_delay == pulse_length)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d106      	bne.n	800a42e <settings_changed+0xd2>
                pulse_delay++;
 800a420:	3201      	adds	r2, #1
 800a422:	4993      	ldr	r1, [pc, #588]	@ (800a670 <settings_changed+0x314>)
 800a424:	600a      	str	r2, [r1, #0]
 800a426:	e002      	b.n	800a42e <settings_changed+0xd2>
                pulse_delay = 2;
 800a428:	460a      	mov	r2, r1
 800a42a:	2102      	movs	r1, #2
 800a42c:	6011      	str	r1, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStartDelayed;
 800a42e:	4a8f      	ldr	r2, [pc, #572]	@ (800a66c <settings_changed+0x310>)
 800a430:	4990      	ldr	r1, [pc, #576]	@ (800a674 <settings_changed+0x318>)
 800a432:	f8c2 1094 	str.w	r1, [r2, #148]	@ 0x94
 800a436:	e006      	b.n	800a446 <settings_changed+0xea>
            pulse_delay = 0;
 800a438:	4a8d      	ldr	r2, [pc, #564]	@ (800a670 <settings_changed+0x314>)
 800a43a:	2100      	movs	r1, #0
 800a43c:	6011      	str	r1, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStart;
 800a43e:	4a8b      	ldr	r2, [pc, #556]	@ (800a66c <settings_changed+0x310>)
 800a440:	498d      	ldr	r1, [pc, #564]	@ (800a678 <settings_changed+0x31c>)
 800a442:	f8c2 1094 	str.w	r1, [r2, #148]	@ 0x94
        PULSE_TIMER->ARR = pulse_length;
 800a446:	4a8d      	ldr	r2, [pc, #564]	@ (800a67c <settings_changed+0x320>)
 800a448:	62d3      	str	r3, [r2, #44]	@ 0x2c
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800a44a:	2301      	movs	r3, #1
 800a44c:	6153      	str	r3, [r2, #20]
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800a44e:	2028      	movs	r0, #40	@ 0x28
 800a450:	f7fe fe04 	bl	800905c <HAL_NVIC_DisableIRQ>
        control_fei.mask = settings->control_disable_pullup.mask ^ settings->control_invert.mask;
 800a454:	f8b5 706e 	ldrh.w	r7, [r5, #110]	@ 0x6e
 800a458:	f8b5 306c 	ldrh.w	r3, [r5, #108]	@ 0x6c
 800a45c:	405f      	eors	r7, r3
        limit_fei.mask = settings->limits.disable_pullup.mask ^ settings->limits.invert.mask;
 800a45e:	f895 6126 	ldrb.w	r6, [r5, #294]	@ 0x126
 800a462:	f895 3125 	ldrb.w	r3, [r5, #293]	@ 0x125
 800a466:	405e      	eors	r6, r3
        uint32_t i = sizeof(inputpin) / sizeof(input_signal_t);
 800a468:	2403      	movs	r4, #3
 800a46a:	e224      	b.n	800a8b6 <settings_changed+0x55a>
            switch(input->id) {
 800a46c:	2b99      	cmp	r3, #153	@ 0x99
 800a46e:	d12b      	bne.n	800a4c8 <settings_changed+0x16c>
                    input->mode.pull_mode = true;
 800a470:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a474:	4b82      	ldr	r3, [pc, #520]	@ (800a680 <settings_changed+0x324>)
 800a476:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a47a:	7919      	ldrb	r1, [r3, #4]
 800a47c:	2001      	movs	r0, #1
 800a47e:	f360 01c4 	bfi	r1, r0, #3, #2
 800a482:	7119      	strb	r1, [r3, #4]
                    input->mode.irq_mode = IRQ_Mode_Falling;
 800a484:	8899      	ldrh	r1, [r3, #4]
 800a486:	2002      	movs	r0, #2
 800a488:	f360 1149 	bfi	r1, r0, #5, #5
 800a48c:	8099      	strh	r1, [r3, #4]
                    break;
 800a48e:	e01b      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.pull_mode = settings->control_disable_pullup.reset ? PullMode_None : PullMode_Up;
 800a490:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a494:	f083 0301 	eor.w	r3, r3, #1
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a4a0:	4977      	ldr	r1, [pc, #476]	@ (800a680 <settings_changed+0x324>)
 800a4a2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a4a6:	7908      	ldrb	r0, [r1, #4]
 800a4a8:	f363 00c4 	bfi	r0, r3, #3, #2
 800a4ac:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a4ae:	f017 0f01 	tst.w	r7, #1
 800a4b2:	d030      	beq.n	800a516 <settings_changed+0x1ba>
 800a4b4:	2002      	movs	r0, #2
 800a4b6:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a4ba:	4b71      	ldr	r3, [pc, #452]	@ (800a680 <settings_changed+0x324>)
 800a4bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a4c0:	8899      	ldrh	r1, [r3, #4]
 800a4c2:	f360 1149 	bfi	r1, r0, #5, #5
 800a4c6:	8099      	strh	r1, [r3, #4]
            if(input->group == PinGroup_AuxInput) {
 800a4c8:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a4cc:	f000 818a 	beq.w	800a7e4 <settings_changed+0x488>
            GPIO_Init.Pin = input->bit;
 800a4d0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a4d4:	4b6a      	ldr	r3, [pc, #424]	@ (800a680 <settings_changed+0x324>)
 800a4d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a4da:	689a      	ldr	r2, [r3, #8]
 800a4dc:	9201      	str	r2, [sp, #4]
            GPIO_Init.Pull = input->mode.pull_mode == PullMode_Up ? GPIO_PULLUP : GPIO_NOPULL;
 800a4de:	791b      	ldrb	r3, [r3, #4]
 800a4e0:	f003 0318 	and.w	r3, r3, #24
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	f000 81d6 	beq.w	800a896 <settings_changed+0x53a>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9303      	str	r3, [sp, #12]
            switch(input->mode.irq_mode) {
 800a4ee:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a4f2:	4b63      	ldr	r3, [pc, #396]	@ (800a680 <settings_changed+0x324>)
 800a4f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a4f8:	889b      	ldrh	r3, [r3, #4]
 800a4fa:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	f000 8262 	beq.w	800a9c8 <settings_changed+0x66c>
 800a504:	2b04      	cmp	r3, #4
 800a506:	f000 8262 	beq.w	800a9ce <settings_changed+0x672>
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	f000 81c5 	beq.w	800a89a <settings_changed+0x53e>
                    GPIO_Init.Mode = GPIO_MODE_INPUT;
 800a510:	2300      	movs	r3, #0
 800a512:	9302      	str	r3, [sp, #8]
                    break;
 800a514:	e1c3      	b.n	800a89e <settings_changed+0x542>
                    input->mode.irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a516:	2001      	movs	r0, #1
 800a518:	e7cd      	b.n	800a4b6 <settings_changed+0x15a>
                    input->mode.pull_mode = settings->control_disable_pullup.e_stop ? PullMode_None : PullMode_Up;
 800a51a:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a51e:	099b      	lsrs	r3, r3, #6
 800a520:	f083 0301 	eor.w	r3, r3, #1
 800a524:	f003 0301 	and.w	r3, r3, #1
 800a528:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a52c:	4954      	ldr	r1, [pc, #336]	@ (800a680 <settings_changed+0x324>)
 800a52e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a532:	7908      	ldrb	r0, [r1, #4]
 800a534:	f363 00c4 	bfi	r0, r3, #3, #2
 800a538:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a53a:	f017 0f40 	tst.w	r7, #64	@ 0x40
 800a53e:	d00a      	beq.n	800a556 <settings_changed+0x1fa>
 800a540:	2002      	movs	r0, #2
 800a542:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a546:	4b4e      	ldr	r3, [pc, #312]	@ (800a680 <settings_changed+0x324>)
 800a548:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a54c:	8899      	ldrh	r1, [r3, #4]
 800a54e:	f360 1149 	bfi	r1, r0, #5, #5
 800a552:	8099      	strh	r1, [r3, #4]
                    break;
 800a554:	e7b8      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a556:	2001      	movs	r0, #1
 800a558:	e7f3      	b.n	800a542 <settings_changed+0x1e6>
                    input->mode.pull_mode = settings->control_disable_pullup.feed_hold ? PullMode_None : PullMode_Up;
 800a55a:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a55e:	085b      	lsrs	r3, r3, #1
 800a560:	f083 0301 	eor.w	r3, r3, #1
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a56c:	4944      	ldr	r1, [pc, #272]	@ (800a680 <settings_changed+0x324>)
 800a56e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a572:	7908      	ldrb	r0, [r1, #4]
 800a574:	f363 00c4 	bfi	r0, r3, #3, #2
 800a578:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a57a:	f017 0f02 	tst.w	r7, #2
 800a57e:	d00a      	beq.n	800a596 <settings_changed+0x23a>
 800a580:	2002      	movs	r0, #2
 800a582:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a586:	4b3e      	ldr	r3, [pc, #248]	@ (800a680 <settings_changed+0x324>)
 800a588:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a58c:	8899      	ldrh	r1, [r3, #4]
 800a58e:	f360 1149 	bfi	r1, r0, #5, #5
 800a592:	8099      	strh	r1, [r3, #4]
                    break;
 800a594:	e798      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a596:	2001      	movs	r0, #1
 800a598:	e7f3      	b.n	800a582 <settings_changed+0x226>
                    input->mode.pull_mode = settings->control_disable_pullup.cycle_start ? PullMode_None : PullMode_Up;
 800a59a:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a59e:	089b      	lsrs	r3, r3, #2
 800a5a0:	f083 0301 	eor.w	r3, r3, #1
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a5ac:	4934      	ldr	r1, [pc, #208]	@ (800a680 <settings_changed+0x324>)
 800a5ae:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a5b2:	7908      	ldrb	r0, [r1, #4]
 800a5b4:	f363 00c4 	bfi	r0, r3, #3, #2
 800a5b8:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a5ba:	f017 0f04 	tst.w	r7, #4
 800a5be:	d00a      	beq.n	800a5d6 <settings_changed+0x27a>
 800a5c0:	2002      	movs	r0, #2
 800a5c2:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a5c6:	4b2e      	ldr	r3, [pc, #184]	@ (800a680 <settings_changed+0x324>)
 800a5c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a5cc:	8899      	ldrh	r1, [r3, #4]
 800a5ce:	f360 1149 	bfi	r1, r0, #5, #5
 800a5d2:	8099      	strh	r1, [r3, #4]
                    break;
 800a5d4:	e778      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	e7f3      	b.n	800a5c2 <settings_changed+0x266>
                    input->mode.pull_mode = settings->control_disable_pullup.safety_door_ajar ? PullMode_None : PullMode_Up;
 800a5da:	f895 306e 	ldrb.w	r3, [r5, #110]	@ 0x6e
 800a5de:	08db      	lsrs	r3, r3, #3
 800a5e0:	f083 0301 	eor.w	r3, r3, #1
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a5ec:	4924      	ldr	r1, [pc, #144]	@ (800a680 <settings_changed+0x324>)
 800a5ee:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a5f2:	7908      	ldrb	r0, [r1, #4]
 800a5f4:	f363 00c4 	bfi	r0, r3, #3, #2
 800a5f8:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a5fa:	f017 0f08 	tst.w	r7, #8
 800a5fe:	d00a      	beq.n	800a616 <settings_changed+0x2ba>
 800a600:	2002      	movs	r0, #2
 800a602:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a606:	4b1e      	ldr	r3, [pc, #120]	@ (800a680 <settings_changed+0x324>)
 800a608:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a60c:	8899      	ldrh	r1, [r3, #4]
 800a60e:	f360 1149 	bfi	r1, r0, #5, #5
 800a612:	8099      	strh	r1, [r3, #4]
                    break;
 800a614:	e758      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a616:	2001      	movs	r0, #1
 800a618:	e7f3      	b.n	800a602 <settings_changed+0x2a6>
                    input->mode.pull_mode = settings->limits.disable_pullup.x ? PullMode_None : PullMode_Up;
 800a61a:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a61e:	f083 0301 	eor.w	r3, r3, #1
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a62a:	4915      	ldr	r1, [pc, #84]	@ (800a680 <settings_changed+0x324>)
 800a62c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a630:	7908      	ldrb	r0, [r1, #4]
 800a632:	f363 00c4 	bfi	r0, r3, #3, #2
 800a636:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a638:	f016 0f01 	tst.w	r6, #1
 800a63c:	d00a      	beq.n	800a654 <settings_changed+0x2f8>
 800a63e:	2002      	movs	r0, #2
 800a640:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a644:	4b0e      	ldr	r3, [pc, #56]	@ (800a680 <settings_changed+0x324>)
 800a646:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a64a:	8899      	ldrh	r1, [r3, #4]
 800a64c:	f360 1149 	bfi	r1, r0, #5, #5
 800a650:	8099      	strh	r1, [r3, #4]
                    break;
 800a652:	e739      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a654:	2001      	movs	r0, #1
 800a656:	e7f3      	b.n	800a640 <settings_changed+0x2e4>
 800a658:	20000738 	.word	0x20000738
 800a65c:	20001bd8 	.word	0x20001bd8
 800a660:	42418200 	.word	0x42418200
 800a664:	42420200 	.word	0x42420200
 800a668:	20000744 	.word	0x20000744
 800a66c:	200011c0 	.word	0x200011c0
 800a670:	20000740 	.word	0x20000740
 800a674:	08009f1d 	.word	0x08009f1d
 800a678:	08009ea5 	.word	0x08009ea5
 800a67c:	40000800 	.word	0x40000800
 800a680:	200000f4 	.word	0x200000f4
                    input->mode.pull_mode = settings->limits.disable_pullup.y ? PullMode_None : PullMode_Up;
 800a684:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a688:	085b      	lsrs	r3, r3, #1
 800a68a:	f083 0301 	eor.w	r3, r3, #1
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a696:	49c8      	ldr	r1, [pc, #800]	@ (800a9b8 <settings_changed+0x65c>)
 800a698:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a69c:	7908      	ldrb	r0, [r1, #4]
 800a69e:	f363 00c4 	bfi	r0, r3, #3, #2
 800a6a2:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a6a4:	f016 0f02 	tst.w	r6, #2
 800a6a8:	d00a      	beq.n	800a6c0 <settings_changed+0x364>
 800a6aa:	2002      	movs	r0, #2
 800a6ac:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a6b0:	4bc1      	ldr	r3, [pc, #772]	@ (800a9b8 <settings_changed+0x65c>)
 800a6b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a6b6:	8899      	ldrh	r1, [r3, #4]
 800a6b8:	f360 1149 	bfi	r1, r0, #5, #5
 800a6bc:	8099      	strh	r1, [r3, #4]
                    break;
 800a6be:	e703      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	e7f3      	b.n	800a6ac <settings_changed+0x350>
                    input->mode.pull_mode = settings->limits.disable_pullup.z ? PullMode_None : PullMode_Up;
 800a6c4:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a6c8:	089b      	lsrs	r3, r3, #2
 800a6ca:	f083 0301 	eor.w	r3, r3, #1
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a6d6:	49b8      	ldr	r1, [pc, #736]	@ (800a9b8 <settings_changed+0x65c>)
 800a6d8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a6dc:	7908      	ldrb	r0, [r1, #4]
 800a6de:	f363 00c4 	bfi	r0, r3, #3, #2
 800a6e2:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a6e4:	f016 0f04 	tst.w	r6, #4
 800a6e8:	d00a      	beq.n	800a700 <settings_changed+0x3a4>
 800a6ea:	2002      	movs	r0, #2
 800a6ec:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a6f0:	4bb1      	ldr	r3, [pc, #708]	@ (800a9b8 <settings_changed+0x65c>)
 800a6f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a6f6:	8899      	ldrh	r1, [r3, #4]
 800a6f8:	f360 1149 	bfi	r1, r0, #5, #5
 800a6fc:	8099      	strh	r1, [r3, #4]
                    break;
 800a6fe:	e6e3      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a700:	2001      	movs	r0, #1
 800a702:	e7f3      	b.n	800a6ec <settings_changed+0x390>
                    input->mode.pull_mode = settings->limits.disable_pullup.a ? PullMode_None : PullMode_Up;
 800a704:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a708:	08db      	lsrs	r3, r3, #3
 800a70a:	f083 0301 	eor.w	r3, r3, #1
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a716:	49a8      	ldr	r1, [pc, #672]	@ (800a9b8 <settings_changed+0x65c>)
 800a718:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a71c:	7908      	ldrb	r0, [r1, #4]
 800a71e:	f363 00c4 	bfi	r0, r3, #3, #2
 800a722:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a724:	f016 0f08 	tst.w	r6, #8
 800a728:	d00a      	beq.n	800a740 <settings_changed+0x3e4>
 800a72a:	2002      	movs	r0, #2
 800a72c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a730:	4ba1      	ldr	r3, [pc, #644]	@ (800a9b8 <settings_changed+0x65c>)
 800a732:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a736:	8899      	ldrh	r1, [r3, #4]
 800a738:	f360 1149 	bfi	r1, r0, #5, #5
 800a73c:	8099      	strh	r1, [r3, #4]
                    break;
 800a73e:	e6c3      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a740:	2001      	movs	r0, #1
 800a742:	e7f3      	b.n	800a72c <settings_changed+0x3d0>
                    input->mode.pull_mode = settings->limits.disable_pullup.b ? PullMode_None : PullMode_Up;
 800a744:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a748:	091b      	lsrs	r3, r3, #4
 800a74a:	f083 0301 	eor.w	r3, r3, #1
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a756:	4998      	ldr	r1, [pc, #608]	@ (800a9b8 <settings_changed+0x65c>)
 800a758:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a75c:	7908      	ldrb	r0, [r1, #4]
 800a75e:	f363 00c4 	bfi	r0, r3, #3, #2
 800a762:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a764:	f016 0f10 	tst.w	r6, #16
 800a768:	d00a      	beq.n	800a780 <settings_changed+0x424>
 800a76a:	2002      	movs	r0, #2
 800a76c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a770:	4b91      	ldr	r3, [pc, #580]	@ (800a9b8 <settings_changed+0x65c>)
 800a772:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a776:	8899      	ldrh	r1, [r3, #4]
 800a778:	f360 1149 	bfi	r1, r0, #5, #5
 800a77c:	8099      	strh	r1, [r3, #4]
                    break;
 800a77e:	e6a3      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a780:	2001      	movs	r0, #1
 800a782:	e7f3      	b.n	800a76c <settings_changed+0x410>
                    input->mode.pull_mode = settings->limits.disable_pullup.c ? PullMode_None : PullMode_Up;
 800a784:	f895 3126 	ldrb.w	r3, [r5, #294]	@ 0x126
 800a788:	095b      	lsrs	r3, r3, #5
 800a78a:	f083 0301 	eor.w	r3, r3, #1
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800a796:	4988      	ldr	r1, [pc, #544]	@ (800a9b8 <settings_changed+0x65c>)
 800a798:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a79c:	7908      	ldrb	r0, [r1, #4]
 800a79e:	f363 00c4 	bfi	r0, r3, #3, #2
 800a7a2:	7108      	strb	r0, [r1, #4]
                    input->mode.irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a7a4:	f016 0f20 	tst.w	r6, #32
 800a7a8:	d00a      	beq.n	800a7c0 <settings_changed+0x464>
 800a7aa:	2002      	movs	r0, #2
 800a7ac:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a7b0:	4b81      	ldr	r3, [pc, #516]	@ (800a9b8 <settings_changed+0x65c>)
 800a7b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a7b6:	8899      	ldrh	r1, [r3, #4]
 800a7b8:	f360 1149 	bfi	r1, r0, #5, #5
 800a7bc:	8099      	strh	r1, [r3, #4]
                    break;
 800a7be:	e683      	b.n	800a4c8 <settings_changed+0x16c>
                    input->mode.irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	e7f3      	b.n	800a7ac <settings_changed+0x450>
                    input->mode.pull_mode = true;
 800a7c4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a7c8:	4b7b      	ldr	r3, [pc, #492]	@ (800a9b8 <settings_changed+0x65c>)
 800a7ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a7ce:	7919      	ldrb	r1, [r3, #4]
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	f360 01c4 	bfi	r1, r0, #3, #2
 800a7d6:	7119      	strb	r1, [r3, #4]
                    input->mode.irq_mode = IRQ_Mode_Falling;
 800a7d8:	8899      	ldrh	r1, [r3, #4]
 800a7da:	2002      	movs	r0, #2
 800a7dc:	f360 1149 	bfi	r1, r0, #5, #5
 800a7e0:	8099      	strh	r1, [r3, #4]
                    break;
 800a7e2:	e671      	b.n	800a4c8 <settings_changed+0x16c>
                if(input->cap.irq_mode != IRQ_Mode_None) {
 800a7e4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a7e8:	4b73      	ldr	r3, [pc, #460]	@ (800a9b8 <settings_changed+0x65c>)
 800a7ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a7ee:	885b      	ldrh	r3, [r3, #2]
 800a7f0:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f43f ae6b 	beq.w	800a4d0 <settings_changed+0x174>
                    uint32_t extireg = SYSCFG->EXTICR[input->pin >> 2] & ~(0b1111 << ((input->pin & 0b11) << 2));
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	4a6e      	ldr	r2, [pc, #440]	@ (800a9b8 <settings_changed+0x65c>)
 800a7fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a802:	7993      	ldrb	r3, [r2, #6]
 800a804:	0899      	lsrs	r1, r3, #2
 800a806:	f101 0c02 	add.w	ip, r1, #2
 800a80a:	486c      	ldr	r0, [pc, #432]	@ (800a9bc <settings_changed+0x660>)
 800a80c:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	f003 030c 	and.w	r3, r3, #12
 800a816:	f04f 0c0f 	mov.w	ip, #15
 800a81a:	fa0c fc03 	lsl.w	ip, ip, r3
 800a81e:	ea20 000c 	bic.w	r0, r0, ip
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
 800a822:	68d2      	ldr	r2, [r2, #12]
 800a824:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 800a9c4 <settings_changed+0x668>
 800a828:	4562      	cmp	r2, ip
 800a82a:	d01f      	beq.n	800a86c <settings_changed+0x510>
 800a82c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a830:	4562      	cmp	r2, ip
 800a832:	d024      	beq.n	800a87e <settings_changed+0x522>
 800a834:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a838:	4562      	cmp	r2, ip
 800a83a:	d022      	beq.n	800a882 <settings_changed+0x526>
 800a83c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a840:	4562      	cmp	r2, ip
 800a842:	d020      	beq.n	800a886 <settings_changed+0x52a>
 800a844:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a848:	4562      	cmp	r2, ip
 800a84a:	d01e      	beq.n	800a88a <settings_changed+0x52e>
 800a84c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a850:	4562      	cmp	r2, ip
 800a852:	d01c      	beq.n	800a88e <settings_changed+0x532>
 800a854:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a858:	4562      	cmp	r2, ip
 800a85a:	d01a      	beq.n	800a892 <settings_changed+0x536>
 800a85c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800a860:	4562      	cmp	r2, ip
 800a862:	d001      	beq.n	800a868 <settings_changed+0x50c>
 800a864:	2208      	movs	r2, #8
 800a866:	e002      	b.n	800a86e <settings_changed+0x512>
 800a868:	2207      	movs	r2, #7
 800a86a:	e000      	b.n	800a86e <settings_changed+0x512>
 800a86c:	2200      	movs	r2, #0
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	4303      	orrs	r3, r0
                    SYSCFG->EXTICR[input->pin >> 2] = extireg;
 800a874:	1c8a      	adds	r2, r1, #2
 800a876:	4951      	ldr	r1, [pc, #324]	@ (800a9bc <settings_changed+0x660>)
 800a878:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a87c:	e628      	b.n	800a4d0 <settings_changed+0x174>
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
 800a87e:	2201      	movs	r2, #1
 800a880:	e7f5      	b.n	800a86e <settings_changed+0x512>
 800a882:	2202      	movs	r2, #2
 800a884:	e7f3      	b.n	800a86e <settings_changed+0x512>
 800a886:	2203      	movs	r2, #3
 800a888:	e7f1      	b.n	800a86e <settings_changed+0x512>
 800a88a:	2204      	movs	r2, #4
 800a88c:	e7ef      	b.n	800a86e <settings_changed+0x512>
 800a88e:	2205      	movs	r2, #5
 800a890:	e7ed      	b.n	800a86e <settings_changed+0x512>
 800a892:	2206      	movs	r2, #6
 800a894:	e7eb      	b.n	800a86e <settings_changed+0x512>
            GPIO_Init.Pull = input->mode.pull_mode == PullMode_Up ? GPIO_PULLUP : GPIO_NOPULL;
 800a896:	2301      	movs	r3, #1
 800a898:	e628      	b.n	800a4ec <settings_changed+0x190>
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 800a89a:	4b49      	ldr	r3, [pc, #292]	@ (800a9c0 <settings_changed+0x664>)
 800a89c:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(input->port, &GPIO_Init);
 800a89e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a8a2:	4b45      	ldr	r3, [pc, #276]	@ (800a9b8 <settings_changed+0x65c>)
 800a8a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a8a8:	a901      	add	r1, sp, #4
 800a8aa:	68d8      	ldr	r0, [r3, #12]
 800a8ac:	f7fe fdc2 	bl	8009434 <HAL_GPIO_Init>
        } while(i);
 800a8b0:	2c00      	cmp	r4, #0
 800a8b2:	f000 808f 	beq.w	800a9d4 <settings_changed+0x678>
            input = &inputpin[--i];
 800a8b6:	3c01      	subs	r4, #1
            if(input->group == PinGroup_AuxInputAnalog)
 800a8b8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800a8bc:	4b3e      	ldr	r3, [pc, #248]	@ (800a9b8 <settings_changed+0x65c>)
 800a8be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a8c2:	691a      	ldr	r2, [r3, #16]
 800a8c4:	2a0a      	cmp	r2, #10
 800a8c6:	d0f3      	beq.n	800a8b0 <settings_changed+0x554>
            if(input->group != PinGroup_AuxInput)
 800a8c8:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a8cc:	d008      	beq.n	800a8e0 <settings_changed+0x584>
                input->mode.irq_mode = IRQ_Mode_None;
 800a8ce:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800a8d2:	4b39      	ldr	r3, [pc, #228]	@ (800a9b8 <settings_changed+0x65c>)
 800a8d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a8d8:	8899      	ldrh	r1, [r3, #4]
 800a8da:	f36f 1149 	bfc	r1, #5, #5
 800a8de:	8099      	strh	r1, [r3, #4]
            switch(input->id) {
 800a8e0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800a8e4:	4934      	ldr	r1, [pc, #208]	@ (800a9b8 <settings_changed+0x65c>)
 800a8e6:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a8ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8ec:	f63f adbe 	bhi.w	800a46c <settings_changed+0x110>
 800a8f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8f2:	f63f ade9 	bhi.w	800a4c8 <settings_changed+0x16c>
 800a8f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a8fc <settings_changed+0x5a0>)
 800a8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8fc:	0800a491 	.word	0x0800a491
 800a900:	0800a55b 	.word	0x0800a55b
 800a904:	0800a59b 	.word	0x0800a59b
 800a908:	0800a5db 	.word	0x0800a5db
 800a90c:	0800a4c9 	.word	0x0800a4c9
 800a910:	0800a4c9 	.word	0x0800a4c9
 800a914:	0800a51b 	.word	0x0800a51b
 800a918:	0800a4c9 	.word	0x0800a4c9
 800a91c:	0800a4c9 	.word	0x0800a4c9
 800a920:	0800a4c9 	.word	0x0800a4c9
 800a924:	0800a4c9 	.word	0x0800a4c9
 800a928:	0800a4c9 	.word	0x0800a4c9
 800a92c:	0800a4c9 	.word	0x0800a4c9
 800a930:	0800a4c9 	.word	0x0800a4c9
 800a934:	0800a4c9 	.word	0x0800a4c9
 800a938:	0800a4c9 	.word	0x0800a4c9
 800a93c:	0800a61b 	.word	0x0800a61b
 800a940:	0800a61b 	.word	0x0800a61b
 800a944:	0800a61b 	.word	0x0800a61b
 800a948:	0800a4c9 	.word	0x0800a4c9
 800a94c:	0800a4c9 	.word	0x0800a4c9
 800a950:	0800a685 	.word	0x0800a685
 800a954:	0800a685 	.word	0x0800a685
 800a958:	0800a685 	.word	0x0800a685
 800a95c:	0800a4c9 	.word	0x0800a4c9
 800a960:	0800a4c9 	.word	0x0800a4c9
 800a964:	0800a6c5 	.word	0x0800a6c5
 800a968:	0800a6c5 	.word	0x0800a6c5
 800a96c:	0800a6c5 	.word	0x0800a6c5
 800a970:	0800a4c9 	.word	0x0800a4c9
 800a974:	0800a4c9 	.word	0x0800a4c9
 800a978:	0800a705 	.word	0x0800a705
 800a97c:	0800a705 	.word	0x0800a705
 800a980:	0800a4c9 	.word	0x0800a4c9
 800a984:	0800a745 	.word	0x0800a745
 800a988:	0800a745 	.word	0x0800a745
 800a98c:	0800a4c9 	.word	0x0800a4c9
 800a990:	0800a785 	.word	0x0800a785
 800a994:	0800a785 	.word	0x0800a785
 800a998:	0800a4c9 	.word	0x0800a4c9
 800a99c:	0800a4c9 	.word	0x0800a4c9
 800a9a0:	0800a4c9 	.word	0x0800a4c9
 800a9a4:	0800a4c9 	.word	0x0800a4c9
 800a9a8:	0800a4c9 	.word	0x0800a4c9
 800a9ac:	0800a4c9 	.word	0x0800a4c9
 800a9b0:	0800a4c9 	.word	0x0800a4c9
 800a9b4:	0800a7c5 	.word	0x0800a7c5
 800a9b8:	200000f4 	.word	0x200000f4
 800a9bc:	40013800 	.word	0x40013800
 800a9c0:	10110000 	.word	0x10110000
 800a9c4:	40020000 	.word	0x40020000
                    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 800a9c8:	4b33      	ldr	r3, [pc, #204]	@ (800aa98 <settings_changed+0x73c>)
 800a9ca:	9302      	str	r3, [sp, #8]
                    break;
 800a9cc:	e767      	b.n	800a89e <settings_changed+0x542>
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a9ce:	4b33      	ldr	r3, [pc, #204]	@ (800aa9c <settings_changed+0x740>)
 800a9d0:	9302      	str	r3, [sp, #8]
                    break;
 800a9d2:	e764      	b.n	800a89e <settings_changed+0x542>
        uint32_t irq_mask = DRIVER_IRQMASK|aux_irq;
 800a9d4:	4b32      	ldr	r3, [pc, #200]	@ (800aaa0 <settings_changed+0x744>)
 800a9d6:	681c      	ldr	r4, [r3, #0]
 800a9d8:	f444 52c0 	orr.w	r2, r4, #6144	@ 0x1800
        __HAL_GPIO_EXTI_CLEAR_IT(irq_mask);
 800a9dc:	4b31      	ldr	r3, [pc, #196]	@ (800aaa4 <settings_changed+0x748>)
 800a9de:	615a      	str	r2, [r3, #20]
        if(irq_mask & (1<<0)) {
 800a9e0:	f014 0f01 	tst.w	r4, #1
 800a9e4:	d121      	bne.n	800aa2a <settings_changed+0x6ce>
        if(irq_mask & (1<<1)) {
 800a9e6:	f014 0f02 	tst.w	r4, #2
 800a9ea:	d127      	bne.n	800aa3c <settings_changed+0x6e0>
        if(irq_mask & (1<<2)) {
 800a9ec:	f014 0f04 	tst.w	r4, #4
 800a9f0:	d12d      	bne.n	800aa4e <settings_changed+0x6f2>
        if(irq_mask & (1<<3)) {
 800a9f2:	f014 0f08 	tst.w	r4, #8
 800a9f6:	d133      	bne.n	800aa60 <settings_changed+0x704>
        if(irq_mask & (1<<4)) {
 800a9f8:	f014 0f10 	tst.w	r4, #16
 800a9fc:	d139      	bne.n	800aa72 <settings_changed+0x716>
        if(irq_mask & 0x03E0) {
 800a9fe:	f414 7f78 	tst.w	r4, #992	@ 0x3e0
 800aa02:	d13f      	bne.n	800aa84 <settings_changed+0x728>
            HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800aa04:	2200      	movs	r2, #0
 800aa06:	2102      	movs	r1, #2
 800aa08:	2028      	movs	r0, #40	@ 0x28
 800aa0a:	f7fe fb09 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800aa0e:	2028      	movs	r0, #40	@ 0x28
 800aa10:	f7fe fb16 	bl	8009040 <HAL_NVIC_EnableIRQ>
        hal.limits.enable(settings->limits.flags.hard_enabled, (axes_signals_t){0});
 800aa14:	4b24      	ldr	r3, [pc, #144]	@ (800aaa8 <settings_changed+0x74c>)
 800aa16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa18:	f895 0124 	ldrb.w	r0, [r5, #292]	@ 0x124
 800aa1c:	f04f 0100 	mov.w	r1, #0
 800aa20:	f000 0001 	and.w	r0, r0, #1
 800aa24:	4798      	blx	r3
}
 800aa26:	b007      	add	sp, #28
 800aa28:	bdf0      	pop	{r4, r5, r6, r7, pc}
            HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	2102      	movs	r1, #2
 800aa2e:	2006      	movs	r0, #6
 800aa30:	f7fe faf6 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800aa34:	2006      	movs	r0, #6
 800aa36:	f7fe fb03 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800aa3a:	e7d4      	b.n	800a9e6 <settings_changed+0x68a>
            HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	2102      	movs	r1, #2
 800aa40:	2007      	movs	r0, #7
 800aa42:	f7fe faed 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800aa46:	2007      	movs	r0, #7
 800aa48:	f7fe fafa 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800aa4c:	e7ce      	b.n	800a9ec <settings_changed+0x690>
            HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2102      	movs	r1, #2
 800aa52:	2008      	movs	r0, #8
 800aa54:	f7fe fae4 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800aa58:	2008      	movs	r0, #8
 800aa5a:	f7fe faf1 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800aa5e:	e7c8      	b.n	800a9f2 <settings_changed+0x696>
            HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800aa60:	2200      	movs	r2, #0
 800aa62:	2102      	movs	r1, #2
 800aa64:	2009      	movs	r0, #9
 800aa66:	f7fe fadb 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800aa6a:	2009      	movs	r0, #9
 800aa6c:	f7fe fae8 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800aa70:	e7c2      	b.n	800a9f8 <settings_changed+0x69c>
            HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800aa72:	2200      	movs	r2, #0
 800aa74:	2102      	movs	r1, #2
 800aa76:	200a      	movs	r0, #10
 800aa78:	f7fe fad2 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800aa7c:	200a      	movs	r0, #10
 800aa7e:	f7fe fadf 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800aa82:	e7bc      	b.n	800a9fe <settings_changed+0x6a2>
            HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800aa84:	2200      	movs	r2, #0
 800aa86:	2102      	movs	r1, #2
 800aa88:	2017      	movs	r0, #23
 800aa8a:	f7fe fac9 	bl	8009020 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800aa8e:	2017      	movs	r0, #23
 800aa90:	f7fe fad6 	bl	8009040 <HAL_NVIC_EnableIRQ>
 800aa94:	e7b6      	b.n	800aa04 <settings_changed+0x6a8>
 800aa96:	4770      	bx	lr
 800aa98:	10210000 	.word	0x10210000
 800aa9c:	10310000 	.word	0x10310000
 800aaa0:	2000073c 	.word	0x2000073c
 800aaa4:	40013c00 	.word	0x40013c00
 800aaa8:	200011c0 	.word	0x200011c0

0800aaac <registerPeriphPin>:
{
 800aaac:	b510      	push	{r4, lr}
 800aaae:	4604      	mov	r4, r0
    periph_signal_t *add_pin = malloc(sizeof(periph_signal_t));
 800aab0:	201c      	movs	r0, #28
 800aab2:	f017 fcf3 	bl	802249c <malloc>
    if(!add_pin)
 800aab6:	b1c0      	cbz	r0, 800aaea <registerPeriphPin+0x3e>
 800aab8:	4602      	mov	r2, r0
    memcpy(&add_pin->pin, pin, sizeof(periph_pin_t));
 800aaba:	6821      	ldr	r1, [r4, #0]
 800aabc:	6863      	ldr	r3, [r4, #4]
 800aabe:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800aac2:	68e0      	ldr	r0, [r4, #12]
 800aac4:	6011      	str	r1, [r2, #0]
 800aac6:	6053      	str	r3, [r2, #4]
 800aac8:	f8c2 c008 	str.w	ip, [r2, #8]
 800aacc:	60d0      	str	r0, [r2, #12]
 800aace:	6921      	ldr	r1, [r4, #16]
 800aad0:	6963      	ldr	r3, [r4, #20]
 800aad2:	6111      	str	r1, [r2, #16]
 800aad4:	6153      	str	r3, [r2, #20]
    add_pin->next = NULL;
 800aad6:	2300      	movs	r3, #0
 800aad8:	6193      	str	r3, [r2, #24]
    if(periph_pins == NULL) {
 800aada:	4b06      	ldr	r3, [pc, #24]	@ (800aaf4 <registerPeriphPin+0x48>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	b12b      	cbz	r3, 800aaec <registerPeriphPin+0x40>
        while(last->next)
 800aae0:	4619      	mov	r1, r3
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1fb      	bne.n	800aae0 <registerPeriphPin+0x34>
        last->next = add_pin;
 800aae8:	618a      	str	r2, [r1, #24]
}
 800aaea:	bd10      	pop	{r4, pc}
        periph_pins = add_pin;
 800aaec:	4b01      	ldr	r3, [pc, #4]	@ (800aaf4 <registerPeriphPin+0x48>)
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e7fb      	b.n	800aaea <registerPeriphPin+0x3e>
 800aaf2:	bf00      	nop
 800aaf4:	20000750 	.word	0x20000750

0800aaf8 <driver_setup>:
#endif // ETHERNET_ENABLE

// Initializes MCU peripherals for grblHAL use

static bool driver_setup (settings_t *settings)
{
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	b08e      	sub	sp, #56	@ 0x38
 800aafc:	4605      	mov	r5, r0
    uint32_t latency;
    RCC_ClkInitTypeDef clock_cfg;

    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 800aafe:	a90d      	add	r1, sp, #52	@ 0x34
 800ab00:	a808      	add	r0, sp, #32
 800ab02:	f7ff f8a9 	bl	8009c58 <HAL_RCC_GetClockConfig>

    GPIO_InitTypeDef GPIO_Init = {
 800ab06:	2400      	movs	r4, #0
 800ab08:	9403      	str	r4, [sp, #12]
 800ab0a:	9404      	str	r4, [sp, #16]
 800ab0c:	9405      	str	r4, [sp, #20]
 800ab0e:	9406      	str	r4, [sp, #24]
 800ab10:	9407      	str	r4, [sp, #28]
 800ab12:	2301      	movs	r3, #1
 800ab14:	9304      	str	r3, [sp, #16]
 800ab16:	2302      	movs	r3, #2
 800ab18:	9306      	str	r3, [sp, #24]
     *************************/

    uint32_t i;

    // Switch on stepper driver power before enabling other output pins
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ab1a:	e013      	b.n	800ab44 <driver_setup+0x4c>
        if(outputpin[i].group == PinGroup_StepperPower) {
            GPIO_Init.Pin = 1 << outputpin[i].pin;
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 800ab20:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800ab24:	4e6d      	ldr	r6, [pc, #436]	@ (800acdc <driver_setup+0x1e4>)
 800ab26:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800ab2a:	a903      	add	r1, sp, #12
 800ab2c:	6870      	ldr	r0, [r6, #4]
 800ab2e:	f7fe fc81 	bl	8009434 <HAL_GPIO_Init>
            DIGITAL_OUT(outputpin[i].port, outputpin[i].pin, 1);
 800ab32:	6872      	ldr	r2, [r6, #4]
 800ab34:	4b6a      	ldr	r3, [pc, #424]	@ (800ace0 <driver_setup+0x1e8>)
 800ab36:	4413      	add	r3, r2
 800ab38:	015b      	lsls	r3, r3, #5
 800ab3a:	7a32      	ldrb	r2, [r6, #8]
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ab42:	3401      	adds	r4, #1
 800ab44:	2c07      	cmp	r4, #7
 800ab46:	d814      	bhi.n	800ab72 <driver_setup+0x7a>
        if(outputpin[i].group == PinGroup_StepperPower) {
 800ab48:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800ab4c:	4b63      	ldr	r3, [pc, #396]	@ (800acdc <driver_setup+0x1e4>)
 800ab4e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	2b05      	cmp	r3, #5
 800ab56:	d1f4      	bne.n	800ab42 <driver_setup+0x4a>
            GPIO_Init.Pin = 1 << outputpin[i].pin;
 800ab58:	4b60      	ldr	r3, [pc, #384]	@ (800acdc <driver_setup+0x1e4>)
 800ab5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab5e:	7a19      	ldrb	r1, [r3, #8]
 800ab60:	2201      	movs	r2, #1
 800ab62:	408a      	lsls	r2, r1
 800ab64:	9203      	str	r2, [sp, #12]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ab66:	7c1b      	ldrb	r3, [r3, #16]
 800ab68:	f013 0f04 	tst.w	r3, #4
 800ab6c:	d0d6      	beq.n	800ab1c <driver_setup+0x24>
 800ab6e:	2311      	movs	r3, #17
 800ab70:	e7d5      	b.n	800ab1e <driver_setup+0x26>
        }
    }

    hal.delay_ms(100, NULL);
 800ab72:	4b5c      	ldr	r3, [pc, #368]	@ (800ace4 <driver_setup+0x1ec>)
 800ab74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab76:	2100      	movs	r1, #0
 800ab78:	2064      	movs	r0, #100	@ 0x64
 800ab7a:	4798      	blx	r3

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800ab7c:	2400      	movs	r4, #0
 800ab7e:	e014      	b.n	800abaa <driver_setup+0xb2>
              outputpin[i].group == PinGroup_AuxOutputAnalog ||
               outputpin[i].id == Output_SpindlePWM ||
                outputpin[i].id == Output_Spindle1PWM)) {

            GPIO_Init.Pin = 1 << outputpin[i].pin;
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800ab80:	2001      	movs	r0, #1
 800ab82:	e033      	b.n	800abec <driver_setup+0xf4>

            if(outputpin[i].group == PinGroup_MotorChipSelect ||
                outputpin[i].group == PinGroup_MotorUART ||
                 outputpin[i].id == Output_SPICS ||
                  outputpin[i].group == PinGroup_StepperEnable)
                outputpin[i].port->ODR |= GPIO_Init.Pin;
 800ab84:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800ab88:	4b54      	ldr	r3, [pc, #336]	@ (800acdc <driver_setup+0x1e4>)
 800ab8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	695a      	ldr	r2, [r3, #20]
 800ab92:	4311      	orrs	r1, r2
 800ab94:	6159      	str	r1, [r3, #20]

            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 800ab96:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800ab9a:	4b50      	ldr	r3, [pc, #320]	@ (800acdc <driver_setup+0x1e4>)
 800ab9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800aba0:	a903      	add	r1, sp, #12
 800aba2:	6858      	ldr	r0, [r3, #4]
 800aba4:	f7fe fc46 	bl	8009434 <HAL_GPIO_Init>
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800aba8:	3401      	adds	r4, #1
 800abaa:	2c07      	cmp	r4, #7
 800abac:	d828      	bhi.n	800ac00 <driver_setup+0x108>
        if(!(outputpin[i].group == PinGroup_StepperPower ||
 800abae:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800abb2:	4b4a      	ldr	r3, [pc, #296]	@ (800acdc <driver_setup+0x1e4>)
 800abb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	2b05      	cmp	r3, #5
 800abbc:	d0f4      	beq.n	800aba8 <driver_setup+0xb0>
 800abbe:	2b0b      	cmp	r3, #11
 800abc0:	d0f2      	beq.n	800aba8 <driver_setup+0xb0>
               outputpin[i].id == Output_SpindlePWM ||
 800abc2:	4946      	ldr	r1, [pc, #280]	@ (800acdc <driver_setup+0x1e4>)
 800abc4:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
              outputpin[i].group == PinGroup_AuxOutputAnalog ||
 800abc8:	2a71      	cmp	r2, #113	@ 0x71
 800abca:	d0ed      	beq.n	800aba8 <driver_setup+0xb0>
        if(!(outputpin[i].group == PinGroup_StepperPower ||
 800abcc:	2a74      	cmp	r2, #116	@ 0x74
 800abce:	d0eb      	beq.n	800aba8 <driver_setup+0xb0>
            GPIO_Init.Pin = 1 << outputpin[i].pin;
 800abd0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 800abd4:	4841      	ldr	r0, [pc, #260]	@ (800acdc <driver_setup+0x1e4>)
 800abd6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800abda:	7a06      	ldrb	r6, [r0, #8]
 800abdc:	2101      	movs	r1, #1
 800abde:	40b1      	lsls	r1, r6
 800abe0:	9103      	str	r1, [sp, #12]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800abe2:	7c00      	ldrb	r0, [r0, #16]
 800abe4:	f010 0f04 	tst.w	r0, #4
 800abe8:	d0ca      	beq.n	800ab80 <driver_setup+0x88>
 800abea:	2011      	movs	r0, #17
 800abec:	9004      	str	r0, [sp, #16]
            if(outputpin[i].group == PinGroup_MotorChipSelect ||
 800abee:	f1a3 000d 	sub.w	r0, r3, #13
 800abf2:	2801      	cmp	r0, #1
 800abf4:	d9c6      	bls.n	800ab84 <driver_setup+0x8c>
                outputpin[i].group == PinGroup_MotorUART ||
 800abf6:	2a95      	cmp	r2, #149	@ 0x95
 800abf8:	d0c4      	beq.n	800ab84 <driver_setup+0x8c>
                 outputpin[i].id == Output_SPICS ||
 800abfa:	2b06      	cmp	r3, #6
 800abfc:	d1cb      	bne.n	800ab96 <driver_setup+0x9e>
 800abfe:	e7c1      	b.n	800ab84 <driver_setup+0x8c>
        }
    }

    GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 800ac00:	2301      	movs	r3, #1
 800ac02:	9304      	str	r3, [sp, #16]

 // Stepper init

    STEPPER_TIMER_CLKEN();
 800ac04:	2600      	movs	r6, #0
 800ac06:	9601      	str	r6, [sp, #4]
 800ac08:	4c37      	ldr	r4, [pc, #220]	@ (800ace8 <driver_setup+0x1f0>)
 800ac0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac0c:	f043 0308 	orr.w	r3, r3, #8
 800ac10:	6423      	str	r3, [r4, #64]	@ 0x40
 800ac12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac14:	f003 0308 	and.w	r3, r3, #8
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	9b01      	ldr	r3, [sp, #4]
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 800ac1c:	4b33      	ldr	r3, [pc, #204]	@ (800acec <driver_setup+0x1f4>)
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	f022 0201 	bic.w	r2, r2, #1
 800ac24:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->SR &= ~TIM_SR_UIF;
 800ac26:	691a      	ldr	r2, [r3, #16]
 800ac28:	f022 0201 	bic.w	r2, r2, #1
 800ac2c:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->PSC = STEPPER_TIMER_DIV - 1;
 800ac2e:	2203      	movs	r2, #3
 800ac30:	629a      	str	r2, [r3, #40]	@ 0x28
    STEPPER_TIMER->CNT = 0;
 800ac32:	625e      	str	r6, [r3, #36]	@ 0x24
    STEPPER_TIMER->CR1 |= TIM_CR1_DIR;
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	f042 0210 	orr.w	r2, r2, #16
 800ac3a:	601a      	str	r2, [r3, #0]
    STEPPER_TIMER->DIER |= TIM_DIER_UIE;
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	f042 0201 	orr.w	r2, r2, #1
 800ac42:	60da      	str	r2, [r3, #12]

    HAL_NVIC_SetPriority(STEPPER_TIMER_IRQn, 0, 2);
 800ac44:	2202      	movs	r2, #2
 800ac46:	4631      	mov	r1, r6
 800ac48:	2032      	movs	r0, #50	@ 0x32
 800ac4a:	f7fe f9e9 	bl	8009020 <HAL_NVIC_SetPriority>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac4e:	4b28      	ldr	r3, [pc, #160]	@ (800acf0 <driver_setup+0x1f8>)
 800ac50:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ac54:	605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(STEPPER_TIMER_IRQn);

 // Single-shot 100 ns per tick

    PULSE_TIMER_CLKEN();
 800ac56:	9602      	str	r6, [sp, #8]
 800ac58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac5a:	f043 0304 	orr.w	r3, r3, #4
 800ac5e:	6423      	str	r3, [r4, #64]	@ 0x40
 800ac60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac62:	f003 0304 	and.w	r3, r3, #4
 800ac66:	9302      	str	r3, [sp, #8]
 800ac68:	9b02      	ldr	r3, [sp, #8]
    PULSE_TIMER->CR1 |= TIM_CR1_OPM|TIM_CR1_DIR|TIM_CR1_CKD_1|TIM_CR1_ARPE|TIM_CR1_URS;
 800ac6a:	4a22      	ldr	r2, [pc, #136]	@ (800acf4 <driver_setup+0x1fc>)
 800ac6c:	6813      	ldr	r3, [r2, #0]
 800ac6e:	f443 7327 	orr.w	r3, r3, #668	@ 0x29c
 800ac72:	6013      	str	r3, [r2, #0]
    PULSE_TIMER->PSC = (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / 10000000UL) - 1;
 800ac74:	f7fe ffe0 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800ac78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac7a:	bb63      	cbnz	r3, 800acd6 <driver_setup+0x1de>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	fb00 f303 	mul.w	r3, r0, r3
 800ac82:	4a1d      	ldr	r2, [pc, #116]	@ (800acf8 <driver_setup+0x200>)
 800ac84:	fba2 2303 	umull	r2, r3, r2, r3
 800ac88:	0d9b      	lsrs	r3, r3, #22
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	4a19      	ldr	r2, [pc, #100]	@ (800acf4 <driver_setup+0x1fc>)
 800ac8e:	6293      	str	r3, [r2, #40]	@ 0x28
    PULSE_TIMER->SR &= ~(TIM_SR_UIF|TIM_SR_CC1IF);
 800ac90:	6913      	ldr	r3, [r2, #16]
 800ac92:	f023 0303 	bic.w	r3, r3, #3
 800ac96:	6113      	str	r3, [r2, #16]
    PULSE_TIMER->CNT = 0;
 800ac98:	2400      	movs	r4, #0
 800ac9a:	6254      	str	r4, [r2, #36]	@ 0x24
    PULSE_TIMER->DIER |= TIM_DIER_UIE;
 800ac9c:	68d3      	ldr	r3, [r2, #12]
 800ac9e:	f043 0301 	orr.w	r3, r3, #1
 800aca2:	60d3      	str	r3, [r2, #12]

    HAL_NVIC_SetPriority(PULSE_TIMER_IRQn, 0, 1);
 800aca4:	2201      	movs	r2, #1
 800aca6:	4621      	mov	r1, r4
 800aca8:	201e      	movs	r0, #30
 800acaa:	f7fe f9b9 	bl	8009020 <HAL_NVIC_SetPriority>
 800acae:	4b10      	ldr	r3, [pc, #64]	@ (800acf0 <driver_setup+0x1f8>)
 800acb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800acb4:	601a      	str	r2, [r3, #0]

    hal.periph_port.register_pin(&ssp);

#endif // SPINDLE_ENCODER_ENABLE

    IOInitDone = settings->version == 22;
 800acb6:	682b      	ldr	r3, [r5, #0]
 800acb8:	2b16      	cmp	r3, #22
 800acba:	bf14      	ite	ne
 800acbc:	2300      	movne	r3, #0
 800acbe:	2301      	moveq	r3, #1
 800acc0:	4e0e      	ldr	r6, [pc, #56]	@ (800acfc <driver_setup+0x204>)
 800acc2:	7033      	strb	r3, [r6, #0]

    hal.settings_changed(settings, (settings_changed_flags_t){0});
 800acc4:	4b07      	ldr	r3, [pc, #28]	@ (800ace4 <driver_setup+0x1ec>)
 800acc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800acca:	4621      	mov	r1, r4
 800accc:	4628      	mov	r0, r5
 800acce:	4798      	blx	r3
    if(qei_enable)
        encoder_start(&qei.encoder);
#endif

    return IOInitDone;
}
 800acd0:	7830      	ldrb	r0, [r6, #0]
 800acd2:	b00e      	add	sp, #56	@ 0x38
 800acd4:	bd70      	pop	{r4, r5, r6, pc}
    PULSE_TIMER->PSC = (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / 10000000UL) - 1;
 800acd6:	2302      	movs	r3, #2
 800acd8:	e7d1      	b.n	800ac7e <driver_setup+0x186>
 800acda:	bf00      	nop
 800acdc:	20000014 	.word	0x20000014
 800ace0:	c2100014 	.word	0xc2100014
 800ace4:	200011c0 	.word	0x200011c0
 800ace8:	40023800 	.word	0x40023800
 800acec:	40000c00 	.word	0x40000c00
 800acf0:	e000e100 	.word	0xe000e100
 800acf4:	40000800 	.word	0x40000800
 800acf8:	6b5fca6b 	.word	0x6b5fca6b
 800acfc:	20000738 	.word	0x20000738

0800ad00 <driver_delay>:
{
 800ad00:	b510      	push	{r4, lr}
    if((delay.ms = ms) > 0) {
 800ad02:	4b0b      	ldr	r3, [pc, #44]	@ (800ad30 <driver_delay+0x30>)
 800ad04:	6018      	str	r0, [r3, #0]
 800ad06:	b160      	cbz	r0, 800ad22 <driver_delay+0x22>
        if(!(delay.callback = callback)) {
 800ad08:	6059      	str	r1, [r3, #4]
 800ad0a:	b129      	cbz	r1, 800ad18 <driver_delay+0x18>
}
 800ad0c:	bd10      	pop	{r4, pc}
                grbl.on_execute_delay(state_get());
 800ad0e:	4b09      	ldr	r3, [pc, #36]	@ (800ad34 <driver_delay+0x34>)
 800ad10:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ad12:	f013 fd99 	bl	801e848 <state_get>
 800ad16:	47a0      	blx	r4
            while(delay.ms)
 800ad18:	4b05      	ldr	r3, [pc, #20]	@ (800ad30 <driver_delay+0x30>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1f6      	bne.n	800ad0e <driver_delay+0xe>
 800ad20:	e7f4      	b.n	800ad0c <driver_delay+0xc>
        delay.callback = NULL;
 800ad22:	4b03      	ldr	r3, [pc, #12]	@ (800ad30 <driver_delay+0x30>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	605a      	str	r2, [r3, #4]
        if(callback)
 800ad28:	2900      	cmp	r1, #0
 800ad2a:	d0ef      	beq.n	800ad0c <driver_delay+0xc>
            callback();
 800ad2c:	4788      	blx	r1
}
 800ad2e:	e7ed      	b.n	800ad0c <driver_delay+0xc>
 800ad30:	2000000c 	.word	0x2000000c
 800ad34:	200013a8 	.word	0x200013a8

0800ad38 <get_free_mem>:
}

#endif

static uint32_t get_free_mem (void)
{
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	b08a      	sub	sp, #40	@ 0x28
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;

    return stack_limit - (uint32_t)&_end - mallinfo().uordblks;
 800ad3c:	4c05      	ldr	r4, [pc, #20]	@ (800ad54 <get_free_mem+0x1c>)
 800ad3e:	4668      	mov	r0, sp
 800ad40:	f017 fc6a 	bl	8022618 <mallinfo>
 800ad44:	4b04      	ldr	r3, [pc, #16]	@ (800ad58 <get_free_mem+0x20>)
 800ad46:	9a07      	ldr	r2, [sp, #28]
 800ad48:	4413      	add	r3, r2
}
 800ad4a:	4804      	ldr	r0, [pc, #16]	@ (800ad5c <get_free_mem+0x24>)
 800ad4c:	1a20      	subs	r0, r4, r0
 800ad4e:	1ac0      	subs	r0, r0, r3
 800ad50:	b00a      	add	sp, #40	@ 0x28
 800ad52:	bd10      	pop	{r4, pc}
 800ad54:	20010000 	.word	0x20010000
 800ad58:	00000400 	.word	0x00000400
 800ad5c:	20002970 	.word	0x20002970

0800ad60 <core_pin_debounce>:
#endif

#endif // SPINDLE_ENCODER_ENABLE

void core_pin_debounce (void *pin)
{
 800ad60:	b530      	push	{r4, r5, lr}
 800ad62:	b083      	sub	sp, #12
 800ad64:	4604      	mov	r4, r0
    input_signal_t *input = (input_signal_t *)pin;

    if(input->mode.irq_mode == IRQ_Mode_Change ||
 800ad66:	8883      	ldrh	r3, [r0, #4]
 800ad68:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800ad6c:	2b80      	cmp	r3, #128	@ 0x80
 800ad6e:	d015      	beq.n	800ad9c <core_pin_debounce+0x3c>
         DIGITAL_IN(input->port, input->pin) == (input->mode.irq_mode == IRQ_Mode_Falling ? 0 : 1)) {
 800ad70:	68c2      	ldr	r2, [r0, #12]
 800ad72:	f102 4242 	add.w	r2, r2, #3254779904	@ 0xc2000000
 800ad76:	f102 1210 	add.w	r2, r2, #1048592	@ 0x100010
 800ad7a:	0152      	lsls	r2, r2, #5
 800ad7c:	7981      	ldrb	r1, [r0, #6]
 800ad7e:	f812 2021 	ldrb.w	r2, [r2, r1, lsl #2]
 800ad82:	b2d2      	uxtb	r2, r2
 800ad84:	3b40      	subs	r3, #64	@ 0x40
 800ad86:	bf18      	it	ne
 800ad88:	2301      	movne	r3, #1
    if(input->mode.irq_mode == IRQ_Mode_Change ||
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d006      	beq.n	800ad9c <core_pin_debounce+0x3c>
    }

#ifdef Z_LIMIT_POLL
    if(input != z_limit_pin)
#endif
    EXTI->IMR |= input->bit; // Reenable pin interrupt
 800ad8e:	4a10      	ldr	r2, [pc, #64]	@ (800add0 <core_pin_debounce+0x70>)
 800ad90:	6813      	ldr	r3, [r2, #0]
 800ad92:	68a1      	ldr	r1, [r4, #8]
 800ad94:	430b      	orrs	r3, r1
 800ad96:	6013      	str	r3, [r2, #0]
}
 800ad98:	b003      	add	sp, #12
 800ad9a:	bd30      	pop	{r4, r5, pc}
        if(input->group & (PinGroup_Control)) {
 800ad9c:	6923      	ldr	r3, [r4, #16]
 800ad9e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800ada2:	d004      	beq.n	800adae <core_pin_debounce+0x4e>
            hal.control.interrupt_callback(systemGetState());
 800ada4:	4b0b      	ldr	r3, [pc, #44]	@ (800add4 <core_pin_debounce+0x74>)
 800ada6:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 800ada8:	f7ff f94a 	bl	800a040 <systemGetState>
 800adac:	47a8      	blx	r5
        if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 800adb4:	d0eb      	beq.n	800ad8e <core_pin_debounce+0x2e>
            limit_signals_t state = limitsGetState();
 800adb6:	f7ff f901 	bl	8009fbc <limitsGetState>
 800adba:	9001      	str	r0, [sp, #4]
            if(limit_signals_merge(state).value) //TODO: add check for limit switches having same state as when limit_isr were invoked?
 800adbc:	f007 fee2 	bl	8012b84 <limit_signals_merge>
 800adc0:	b2c0      	uxtb	r0, r0
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d0e3      	beq.n	800ad8e <core_pin_debounce+0x2e>
                hal.limits.interrupt_callback(state);
 800adc6:	4b03      	ldr	r3, [pc, #12]	@ (800add4 <core_pin_debounce+0x74>)
 800adc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adca:	9801      	ldr	r0, [sp, #4]
 800adcc:	4798      	blx	r3
 800adce:	e7de      	b.n	800ad8e <core_pin_debounce+0x2e>
 800add0:	40013c00 	.word	0x40013c00
 800add4:	200011c0 	.word	0x200011c0

0800add8 <core_pin_irq>:

static inline void core_pin_irq (uint32_t bit)
{
 800add8:	b510      	push	{r4, lr}
    input_signal_t *input;

    if((input = pin_irq[__builtin_ffs(bit) - 1])) {
 800adda:	fa90 f3a0 	rbit	r3, r0
 800adde:	fab3 f383 	clz	r3, r3
 800ade2:	b908      	cbnz	r0, 800ade8 <core_pin_irq+0x10>
 800ade4:	f04f 33ff 	mov.w	r3, #4294967295
 800ade8:	4a0c      	ldr	r2, [pc, #48]	@ (800ae1c <core_pin_irq+0x44>)
 800adea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adee:	b134      	cbz	r4, 800adfe <core_pin_irq+0x26>
        if(input->mode.debounce && task_add_delayed(core_pin_debounce, input, 40)) {
 800adf0:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	db03      	blt.n	800ae00 <core_pin_irq+0x28>
            EXTI->IMR &= ~input->bit; // Disable pin interrupt
        } else
            core_pin_debounce(input);
 800adf8:	4620      	mov	r0, r4
 800adfa:	f7ff ffb1 	bl	800ad60 <core_pin_debounce>
    }
}
 800adfe:	bd10      	pop	{r4, pc}
        if(input->mode.debounce && task_add_delayed(core_pin_debounce, input, 40)) {
 800ae00:	2228      	movs	r2, #40	@ 0x28
 800ae02:	4621      	mov	r1, r4
 800ae04:	4806      	ldr	r0, [pc, #24]	@ (800ae20 <core_pin_irq+0x48>)
 800ae06:	f006 fa27 	bl	8011258 <task_add_delayed>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d0f4      	beq.n	800adf8 <core_pin_irq+0x20>
            EXTI->IMR &= ~input->bit; // Disable pin interrupt
 800ae0e:	4a05      	ldr	r2, [pc, #20]	@ (800ae24 <core_pin_irq+0x4c>)
 800ae10:	6813      	ldr	r3, [r2, #0]
 800ae12:	68a1      	ldr	r1, [r4, #8]
 800ae14:	ea23 0301 	bic.w	r3, r3, r1
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	e7f0      	b.n	800adfe <core_pin_irq+0x26>
 800ae1c:	200006ec 	.word	0x200006ec
 800ae20:	0800ad61 	.word	0x0800ad61
 800ae24:	40013c00 	.word	0x40013c00

0800ae28 <gpio_irq_enable>:
{
 800ae28:	b410      	push	{r4}
    if(irq_mode == IRQ_Mode_Rising) {
 800ae2a:	2901      	cmp	r1, #1
 800ae2c:	d00a      	beq.n	800ae44 <gpio_irq_enable+0x1c>
    } else if(irq_mode == IRQ_Mode_Falling) {
 800ae2e:	2902      	cmp	r1, #2
 800ae30:	d01b      	beq.n	800ae6a <gpio_irq_enable+0x42>
    } else if(irq_mode == IRQ_Mode_Change) {
 800ae32:	2904      	cmp	r1, #4
 800ae34:	d024      	beq.n	800ae80 <gpio_irq_enable+0x58>
        EXTI->IMR &= ~input->bit;   // Disable pin interrupt
 800ae36:	4a17      	ldr	r2, [pc, #92]	@ (800ae94 <gpio_irq_enable+0x6c>)
 800ae38:	6813      	ldr	r3, [r2, #0]
 800ae3a:	6884      	ldr	r4, [r0, #8]
 800ae3c:	ea23 0304 	bic.w	r3, r3, r4
 800ae40:	6013      	str	r3, [r2, #0]
 800ae42:	e009      	b.n	800ae58 <gpio_irq_enable+0x30>
        EXTI->RTSR |= input->bit;
 800ae44:	4b13      	ldr	r3, [pc, #76]	@ (800ae94 <gpio_irq_enable+0x6c>)
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	6884      	ldr	r4, [r0, #8]
 800ae4a:	4322      	orrs	r2, r4
 800ae4c:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~input->bit;
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	6884      	ldr	r4, [r0, #8]
 800ae52:	ea22 0204 	bic.w	r2, r2, r4
 800ae56:	60da      	str	r2, [r3, #12]
    if(irq_mode != IRQ_Mode_None)
 800ae58:	b121      	cbz	r1, 800ae64 <gpio_irq_enable+0x3c>
        EXTI->IMR |= input->bit;    // Enable pin interrupt
 800ae5a:	4a0e      	ldr	r2, [pc, #56]	@ (800ae94 <gpio_irq_enable+0x6c>)
 800ae5c:	6813      	ldr	r3, [r2, #0]
 800ae5e:	6881      	ldr	r1, [r0, #8]
 800ae60:	430b      	orrs	r3, r1
 800ae62:	6013      	str	r3, [r2, #0]
}
 800ae64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae68:	4770      	bx	lr
        EXTI->RTSR &= ~input->bit;
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae94 <gpio_irq_enable+0x6c>)
 800ae6c:	689a      	ldr	r2, [r3, #8]
 800ae6e:	6884      	ldr	r4, [r0, #8]
 800ae70:	ea22 0204 	bic.w	r2, r2, r4
 800ae74:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= input->bit;
 800ae76:	68da      	ldr	r2, [r3, #12]
 800ae78:	6884      	ldr	r4, [r0, #8]
 800ae7a:	4322      	orrs	r2, r4
 800ae7c:	60da      	str	r2, [r3, #12]
 800ae7e:	e7eb      	b.n	800ae58 <gpio_irq_enable+0x30>
        EXTI->RTSR |= input->bit;
 800ae80:	4b04      	ldr	r3, [pc, #16]	@ (800ae94 <gpio_irq_enable+0x6c>)
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	6884      	ldr	r4, [r0, #8]
 800ae86:	4322      	orrs	r2, r4
 800ae88:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= input->bit;
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	6884      	ldr	r4, [r0, #8]
 800ae8e:	4322      	orrs	r2, r4
 800ae90:	60da      	str	r2, [r3, #12]
 800ae92:	e7e1      	b.n	800ae58 <gpio_irq_enable+0x30>
 800ae94:	40013c00 	.word	0x40013c00

0800ae98 <limitsEnable>:
{
 800ae98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	4606      	mov	r6, r0
 800aea0:	4688      	mov	r8, r1
    bool disable = !on;
 800aea2:	f080 0701 	eor.w	r7, r0, #1
    uint_fast8_t idx = limit_inputs.n_pins;
 800aea6:	4b1c      	ldr	r3, [pc, #112]	@ (800af18 <limitsEnable+0x80>)
 800aea8:	781c      	ldrb	r4, [r3, #0]
    limit_signals_t homing_source = xbar_get_homing_source_from_cycle(homing_cycle);
 800aeaa:	4608      	mov	r0, r1
 800aeac:	f001 fd50 	bl	800c950 <xbar_get_homing_source_from_cycle>
 800aeb0:	9001      	str	r0, [sp, #4]
    while(idx--) {
 800aeb2:	e019      	b.n	800aee8 <limitsEnable+0x50>
            pin = xbar_fn_to_axismask(limit->id);
 800aeb4:	5c50      	ldrb	r0, [r2, r1]
 800aeb6:	f001 fcf1 	bl	800c89c <xbar_fn_to_axismask>
            disable = limit->group == PinGroup_Limit ? (pin.mask & homing_source.min.mask) : (pin.mask & homing_source.max.mask);
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aec0:	d006      	beq.n	800aed0 <limitsEnable+0x38>
 800aec2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aec6:	4203      	tst	r3, r0
 800aec8:	bf14      	ite	ne
 800aeca:	2701      	movne	r7, #1
 800aecc:	2700      	moveq	r7, #0
 800aece:	e019      	b.n	800af04 <limitsEnable+0x6c>
 800aed0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aed4:	4203      	tst	r3, r0
 800aed6:	bf14      	ite	ne
 800aed8:	2701      	movne	r7, #1
 800aeda:	2700      	moveq	r7, #0
 800aedc:	e012      	b.n	800af04 <limitsEnable+0x6c>
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->mode.irq_mode);
 800aede:	2100      	movs	r1, #0
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7ff ffa1 	bl	800ae28 <gpio_irq_enable>
    while(idx--) {
 800aee6:	462c      	mov	r4, r5
 800aee8:	1e65      	subs	r5, r4, #1
 800aeea:	b18c      	cbz	r4, 800af10 <limitsEnable+0x78>
        limit = &limit_inputs.pins.inputs[idx];
 800aeec:	4b0a      	ldr	r3, [pc, #40]	@ (800af18 <limitsEnable+0x80>)
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800aef4:	0099      	lsls	r1, r3, #2
 800aef6:	eb02 0483 	add.w	r4, r2, r3, lsl #2
        if(on && homing_cycle.mask) {
 800aefa:	b11e      	cbz	r6, 800af04 <limitsEnable+0x6c>
 800aefc:	fa5f f388 	uxtb.w	r3, r8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1d7      	bne.n	800aeb4 <limitsEnable+0x1c>
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->mode.irq_mode);
 800af04:	2f00      	cmp	r7, #0
 800af06:	d1ea      	bne.n	800aede <limitsEnable+0x46>
 800af08:	88a1      	ldrh	r1, [r4, #4]
 800af0a:	f3c1 1144 	ubfx	r1, r1, #5, #5
 800af0e:	e7e7      	b.n	800aee0 <limitsEnable+0x48>
}
 800af10:	b002      	add	sp, #8
 800af12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af16:	bf00      	nop
 800af18:	20000730 	.word	0x20000730

0800af1c <driver_init>:
{
 800af1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af1e:	b08d      	sub	sp, #52	@ 0x34
    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 800af20:	a907      	add	r1, sp, #28
 800af22:	a802      	add	r0, sp, #8
 800af24:	f7fe fe98 	bl	8009c58 <HAL_RCC_GetClockConfig>
    hal.info = "STM32F407";
 800af28:	4c9c      	ldr	r4, [pc, #624]	@ (800b19c <driver_init+0x280>)
 800af2a:	4b9d      	ldr	r3, [pc, #628]	@ (800b1a0 <driver_init+0x284>)
 800af2c:	6063      	str	r3, [r4, #4]
    hal.driver_version = "240624";
 800af2e:	4b9d      	ldr	r3, [pc, #628]	@ (800b1a4 <driver_init+0x288>)
 800af30:	60a3      	str	r3, [r4, #8]
    hal.driver_url = GRBL_URL "/STM32F4xx";
 800af32:	4b9d      	ldr	r3, [pc, #628]	@ (800b1a8 <driver_init+0x28c>)
 800af34:	6123      	str	r3, [r4, #16]
    hal.board = BOARD_NAME;
 800af36:	4b9d      	ldr	r3, [pc, #628]	@ (800b1ac <driver_init+0x290>)
 800af38:	6163      	str	r3, [r4, #20]
    hal.driver_setup = driver_setup;
 800af3a:	4b9d      	ldr	r3, [pc, #628]	@ (800b1b0 <driver_init+0x294>)
 800af3c:	6363      	str	r3, [r4, #52]	@ 0x34
    hal.f_mcu = HAL_RCC_GetHCLKFreq() / 1000000UL;
 800af3e:	f7fe fe75 	bl	8009c2c <HAL_RCC_GetHCLKFreq>
 800af42:	4b9c      	ldr	r3, [pc, #624]	@ (800b1b4 <driver_init+0x298>)
 800af44:	fba3 2300 	umull	r2, r3, r3, r0
 800af48:	0c9b      	lsrs	r3, r3, #18
 800af4a:	6223      	str	r3, [r4, #32]
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 800af4c:	f7fe fe74 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800af50:	9b05      	ldr	r3, [sp, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d154      	bne.n	800b000 <driver_init+0xe4>
 800af56:	2301      	movs	r3, #1
 800af58:	fb03 f200 	mul.w	r2, r3, r0
 800af5c:	0892      	lsrs	r2, r2, #2
 800af5e:	4b8f      	ldr	r3, [pc, #572]	@ (800b19c <driver_init+0x280>)
 800af60:	61da      	str	r2, [r3, #28]
    hal.rx_buffer_size = RX_BUFFER_SIZE;
 800af62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800af66:	625a      	str	r2, [r3, #36]	@ 0x24
    hal.get_free_mem = get_free_mem;
 800af68:	4a93      	ldr	r2, [pc, #588]	@ (800b1b8 <driver_init+0x29c>)
 800af6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hal.delay_ms = &driver_delay;
 800af6c:	4a93      	ldr	r2, [pc, #588]	@ (800b1bc <driver_init+0x2a0>)
 800af6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hal.settings_changed = settings_changed;
 800af70:	4a93      	ldr	r2, [pc, #588]	@ (800b1c0 <driver_init+0x2a4>)
 800af72:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    cycles2us_factor = 0xFFFFFFFFU / hal.f_mcu;
 800af76:	6a19      	ldr	r1, [r3, #32]
 800af78:	f04f 32ff 	mov.w	r2, #4294967295
 800af7c:	fbb2 f2f1 	udiv	r2, r2, r1
 800af80:	4990      	ldr	r1, [pc, #576]	@ (800b1c4 <driver_init+0x2a8>)
 800af82:	600a      	str	r2, [r1, #0]
    hal.stepper.wake_up = stepperWakeUp;
 800af84:	4a90      	ldr	r2, [pc, #576]	@ (800b1c8 <driver_init+0x2ac>)
 800af86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hal.stepper.go_idle = stepperGoIdle;
 800af8a:	4a90      	ldr	r2, [pc, #576]	@ (800b1cc <driver_init+0x2b0>)
 800af8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hal.stepper.enable = stepperEnable;
 800af90:	4a8f      	ldr	r2, [pc, #572]	@ (800b1d0 <driver_init+0x2b4>)
 800af92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hal.stepper.cycles_per_tick = stepperCyclesPerTick;
 800af96:	4a8f      	ldr	r2, [pc, #572]	@ (800b1d4 <driver_init+0x2b8>)
 800af98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hal.stepper.pulse_start = stepperPulseStart;
 800af9c:	4a8e      	ldr	r2, [pc, #568]	@ (800b1d8 <driver_init+0x2bc>)
 800af9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hal.stepper.motor_iterator = motor_iterator;
 800afa2:	4a8e      	ldr	r2, [pc, #568]	@ (800b1dc <driver_init+0x2c0>)
 800afa4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hal.limits.enable = limitsEnable;
 800afa8:	4a8d      	ldr	r2, [pc, #564]	@ (800b1e0 <driver_init+0x2c4>)
 800afaa:	655a      	str	r2, [r3, #84]	@ 0x54
    hal.limits.get_state = limitsGetState;
 800afac:	4a8d      	ldr	r2, [pc, #564]	@ (800b1e4 <driver_init+0x2c8>)
 800afae:	659a      	str	r2, [r3, #88]	@ 0x58
    hal.coolant.set_state = coolantSetState;
 800afb0:	4a8d      	ldr	r2, [pc, #564]	@ (800b1e8 <driver_init+0x2cc>)
 800afb2:	671a      	str	r2, [r3, #112]	@ 0x70
    hal.coolant.get_state = coolantGetState;
 800afb4:	4a8d      	ldr	r2, [pc, #564]	@ (800b1ec <driver_init+0x2d0>)
 800afb6:	675a      	str	r2, [r3, #116]	@ 0x74
    hal.control.get_state = systemGetState;
 800afb8:	4a8d      	ldr	r2, [pc, #564]	@ (800b1f0 <driver_init+0x2d4>)
 800afba:	669a      	str	r2, [r3, #104]	@ 0x68
    hal.irq_enable = __enable_irq;
 800afbc:	4a8d      	ldr	r2, [pc, #564]	@ (800b1f4 <driver_init+0x2d8>)
 800afbe:	649a      	str	r2, [r3, #72]	@ 0x48
    hal.irq_disable = __disable_irq;
 800afc0:	4a8d      	ldr	r2, [pc, #564]	@ (800b1f8 <driver_init+0x2dc>)
 800afc2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hal.set_bits_atomic = bitsSetAtomic;
 800afc4:	4a8d      	ldr	r2, [pc, #564]	@ (800b1fc <driver_init+0x2e0>)
 800afc6:	63da      	str	r2, [r3, #60]	@ 0x3c
    hal.clear_bits_atomic = bitsClearAtomic;
 800afc8:	4a8d      	ldr	r2, [pc, #564]	@ (800b200 <driver_init+0x2e4>)
 800afca:	641a      	str	r2, [r3, #64]	@ 0x40
    hal.set_value_atomic = valueSetAtomic;
 800afcc:	4a8d      	ldr	r2, [pc, #564]	@ (800b204 <driver_init+0x2e8>)
 800afce:	645a      	str	r2, [r3, #68]	@ 0x44
    hal.get_micros = getElapsedMicros;
 800afd0:	4a8d      	ldr	r2, [pc, #564]	@ (800b208 <driver_init+0x2ec>)
 800afd2:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    hal.get_elapsed_ticks = getElapsedTicks;
 800afd6:	4a8d      	ldr	r2, [pc, #564]	@ (800b20c <driver_init+0x2f0>)
 800afd8:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    hal.enumerate_pins = enumeratePins;
 800afdc:	4a8c      	ldr	r2, [pc, #560]	@ (800b210 <driver_init+0x2f4>)
 800afde:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    hal.periph_port.register_pin = registerPeriphPin;
 800afe2:	4a8c      	ldr	r2, [pc, #560]	@ (800b214 <driver_init+0x2f8>)
 800afe4:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    hal.periph_port.set_pin_description = setPeriphPinDescription;
 800afe8:	4a8b      	ldr	r2, [pc, #556]	@ (800b218 <driver_init+0x2fc>)
 800afea:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    serialRegisterStreams();
 800afee:	f001 fac5 	bl	800c57c <serialRegisterStreams>
    if(!stream_connect_instance(SERIAL_STREAM, BAUD_RATE))
 800aff2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800aff6:	2000      	movs	r0, #0
 800aff8:	f015 fc48 	bl	802088c <stream_connect_instance>
 800affc:	b910      	cbnz	r0, 800b004 <driver_init+0xe8>
        while(true); // Cannot boot if no communication channel is available!
 800affe:	e7fe      	b.n	800affe <driver_init+0xe2>
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 800b000:	2302      	movs	r3, #2
 800b002:	e7a9      	b.n	800af58 <driver_init+0x3c>
    hal.nvs.type = NVS_Flash;
 800b004:	4b65      	ldr	r3, [pc, #404]	@ (800b19c <driver_init+0x280>)
 800b006:	2203      	movs	r2, #3
 800b008:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
    hal.nvs.memcpy_from_flash = memcpy_from_flash;
 800b00c:	4a83      	ldr	r2, [pc, #524]	@ (800b21c <driver_init+0x300>)
 800b00e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    hal.nvs.memcpy_to_flash = memcpy_to_flash;
 800b012:	4a83      	ldr	r2, [pc, #524]	@ (800b220 <driver_init+0x304>)
 800b014:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
    hal.signals_cap.reset = Off;
 800b018:	f893 21dc 	ldrb.w	r2, [r3, #476]	@ 0x1dc
 800b01c:	f36f 0200 	bfc	r2, #0, #1
 800b020:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    hal.signals_cap.feed_hold = Off;
 800b024:	b2d2      	uxtb	r2, r2
 800b026:	f36f 0241 	bfc	r2, #1, #1
 800b02a:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
    hal.signals_cap.cycle_start = Off;
 800b02e:	b2d2      	uxtb	r2, r2
 800b030:	f36f 0282 	bfc	r2, #2, #1
 800b034:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc

static inline limit_signals_t get_limits_cap (void)
{
    limit_signals_t limits = {0};
 800b038:	2400      	movs	r4, #0
 800b03a:	9401      	str	r4, [sp, #4]

#if X_LIMIT_BIT
    limits.min.x = On;
 800b03c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b040:	f042 0201 	orr.w	r2, r2, #1
 800b044:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if Y_LIMIT_BIT
    limits.min.y = On;
 800b048:	b2d2      	uxtb	r2, r2
 800b04a:	f042 0202 	orr.w	r2, r2, #2
 800b04e:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if Z_LIMIT_BIT
    limits.min.z = On;
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	f042 0204 	orr.w	r2, r2, #4
 800b058:	f88d 2004 	strb.w	r2, [sp, #4]
#endif
#if V_LIMIT_BIT_MAX
    limits.max.v = On;
#endif

    return limits;
 800b05c:	9a01      	ldr	r2, [sp, #4]
 800b05e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b060:	920a      	str	r2, [sp, #40]	@ 0x28
    hal.limits_cap = get_limits_cap();
 800b062:	f8c3 21de 	str.w	r2, [r3, #478]	@ 0x1de
}

static inline home_signals_t get_home_cap (void)
{
    home_signals_t home = {0};
 800b066:	f8ad 4004 	strh.w	r4, [sp, #4]
    home.b.z = On;
#endif

#endif // HOME_MASK

    return home;
 800b06a:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
 800b06e:	f8ad 4020 	strh.w	r4, [sp, #32]
    hal.home_cap = get_home_cap();
 800b072:	f8a3 41e2 	strh.w	r4, [r3, #482]	@ 0x1e2
    hal.coolant_cap.flood = On;
 800b076:	f893 21e4 	ldrb.w	r2, [r3, #484]	@ 0x1e4
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    hal.coolant_cap.mist = On;
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	f042 0202 	orr.w	r2, r2, #2
 800b088:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
    hal.driver_cap.software_debounce = On;
 800b08c:	f893 21d8 	ldrb.w	r2, [r3, #472]	@ 0x1d8
 800b090:	f042 0201 	orr.w	r2, r2, #1
 800b094:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.step_pulse_delay = On;
 800b098:	b2d2      	uxtb	r2, r2
 800b09a:	f042 0202 	orr.w	r2, r2, #2
 800b09e:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.amass_level = 3;
 800b0a2:	b2d2      	uxtb	r2, r2
 800b0a4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b0a8:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.control_pull_up = On;
 800b0ac:	b2d2      	uxtb	r2, r2
 800b0ae:	f042 0208 	orr.w	r2, r2, #8
 800b0b2:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    hal.driver_cap.limits_pull_up = On;
 800b0b6:	b2d2      	uxtb	r2, r2
 800b0b8:	f042 0204 	orr.w	r2, r2, #4
 800b0bc:	f883 21d8 	strb.w	r2, [r3, #472]	@ 0x1d8
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800b0c0:	e0d2      	b.n	800b268 <driver_init+0x34c>
            if(aux_digital_in.pins.inputs == NULL)
 800b0c2:	4a58      	ldr	r2, [pc, #352]	@ (800b224 <driver_init+0x308>)
 800b0c4:	6852      	ldr	r2, [r2, #4]
 800b0c6:	2a00      	cmp	r2, #0
 800b0c8:	d062      	beq.n	800b190 <driver_init+0x274>
            input->user_port = aux_digital_in.n_pins++;
 800b0ca:	4d56      	ldr	r5, [pc, #344]	@ (800b224 <driver_init+0x308>)
 800b0cc:	782a      	ldrb	r2, [r5, #0]
 800b0ce:	1c56      	adds	r6, r2, #1
 800b0d0:	702e      	strb	r6, [r5, #0]
 800b0d2:	4d55      	ldr	r5, [pc, #340]	@ (800b228 <driver_init+0x30c>)
 800b0d4:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800b0d8:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800b0dc:	f88c 2014 	strb.w	r2, [ip, #20]
            input->id = (pin_function_t)(Input_Aux0 + input->user_port);
 800b0e0:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 800b0e4:	f805 e026 	strb.w	lr, [r5, r6, lsl #2]
            input->mode.pull_mode = PullMode_Up;
 800b0e8:	f89c 5004 	ldrb.w	r5, [ip, #4]
 800b0ec:	2601      	movs	r6, #1
 800b0ee:	f366 05c4 	bfi	r5, r6, #3, #2
 800b0f2:	f88c 5004 	strb.w	r5, [ip, #4]
            input->cap.pull_mode = PullMode_UpDown;
 800b0f6:	f89c e002 	ldrb.w	lr, [ip, #2]
 800b0fa:	f04e 0e18 	orr.w	lr, lr, #24
 800b0fe:	f88c e002 	strb.w	lr, [ip, #2]
            if((input->cap.irq_mode = ((DRIVER_IRQMASK|aux_irq) & input->bit) ? IRQ_Mode_None : IRQ_Mode_Edges) != IRQ_Mode_None) {
 800b102:	4d4a      	ldr	r5, [pc, #296]	@ (800b22c <driver_init+0x310>)
 800b104:	682d      	ldr	r5, [r5, #0]
 800b106:	f445 56c0 	orr.w	r6, r5, #6144	@ 0x1800
 800b10a:	4230      	tst	r0, r6
 800b10c:	d043      	beq.n	800b196 <driver_init+0x27a>
 800b10e:	2600      	movs	r6, #0
 800b110:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 800b114:	4f44      	ldr	r7, [pc, #272]	@ (800b228 <driver_init+0x30c>)
 800b116:	eb07 0c8e 	add.w	ip, r7, lr, lsl #2
 800b11a:	f8bc e002 	ldrh.w	lr, [ip, #2]
 800b11e:	f366 1e49 	bfi	lr, r6, #5, #5
 800b122:	f8ac e002 	strh.w	lr, [ip, #2]
 800b126:	b166      	cbz	r6, 800b142 <driver_init+0x226>
                aux_irq |= input->bit;
 800b128:	4305      	orrs	r5, r0
 800b12a:	4e40      	ldr	r6, [pc, #256]	@ (800b22c <driver_init+0x310>)
 800b12c:	6035      	str	r5, [r6, #0]
                pin_irq[__builtin_ffs(input->bit) - 1] = input;
 800b12e:	fa90 f5a0 	rbit	r5, r0
 800b132:	fab5 f585 	clz	r5, r5
 800b136:	b908      	cbnz	r0, 800b13c <driver_init+0x220>
 800b138:	f04f 35ff 	mov.w	r5, #4294967295
 800b13c:	483c      	ldr	r0, [pc, #240]	@ (800b230 <driver_init+0x314>)
 800b13e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            input->cap.debounce = !!input->cap.irq_mode;
 800b142:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 800b146:	4838      	ldr	r0, [pc, #224]	@ (800b228 <driver_init+0x30c>)
 800b148:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800b14c:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800b150:	f40c 7c78 	and.w	ip, ip, #992	@ 0x3e0
 800b154:	f1bc 0c00 	subs.w	ip, ip, #0
 800b158:	bf18      	it	ne
 800b15a:	f04f 0c01 	movne.w	ip, #1
 800b15e:	78c5      	ldrb	r5, [r0, #3]
 800b160:	f36c 15c7 	bfi	r5, ip, #7, #1
 800b164:	70c5      	strb	r5, [r0, #3]
            if((aux_remap = aux_ctrl_remap_explicit(input->port, input->pin, input->user_port, input))) {
 800b166:	68c0      	ldr	r0, [r0, #12]
 800b168:	f7fe fe4a 	bl	8009e00 <aux_ctrl_remap_explicit>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d07a      	beq.n	800b266 <driver_init+0x34a>
                if(aux_remap->function == Input_Probe && input->cap.irq_mode == IRQ_Mode_Edges)
 800b170:	7802      	ldrb	r2, [r0, #0]
 800b172:	2a0e      	cmp	r2, #14
 800b174:	d177      	bne.n	800b266 <driver_init+0x34a>
 800b176:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800b17a:	4a2b      	ldr	r2, [pc, #172]	@ (800b228 <driver_init+0x30c>)
 800b17c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b180:	8852      	ldrh	r2, [r2, #2]
 800b182:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
 800b186:	2ae0      	cmp	r2, #224	@ 0xe0
 800b188:	d16d      	bne.n	800b266 <driver_init+0x34a>
                    aux_remap->irq_mode = IRQ_Mode_Change;
 800b18a:	2204      	movs	r2, #4
 800b18c:	7082      	strb	r2, [r0, #2]
 800b18e:	e06a      	b.n	800b266 <driver_init+0x34a>
                aux_digital_in.pins.inputs = input;
 800b190:	4a24      	ldr	r2, [pc, #144]	@ (800b224 <driver_init+0x308>)
 800b192:	6053      	str	r3, [r2, #4]
 800b194:	e799      	b.n	800b0ca <driver_init+0x1ae>
            if((input->cap.irq_mode = ((DRIVER_IRQMASK|aux_irq) & input->bit) ? IRQ_Mode_None : IRQ_Mode_Edges) != IRQ_Mode_None) {
 800b196:	2607      	movs	r6, #7
 800b198:	e7ba      	b.n	800b110 <driver_init+0x1f4>
 800b19a:	bf00      	nop
 800b19c:	200011c0 	.word	0x200011c0
 800b1a0:	08028ac0 	.word	0x08028ac0
 800b1a4:	08028acc 	.word	0x08028acc
 800b1a8:	08028ad4 	.word	0x08028ad4
 800b1ac:	08028afc 	.word	0x08028afc
 800b1b0:	0800aaf9 	.word	0x0800aaf9
 800b1b4:	431bde83 	.word	0x431bde83
 800b1b8:	0800ad39 	.word	0x0800ad39
 800b1bc:	0800ad01 	.word	0x0800ad01
 800b1c0:	0800a35d 	.word	0x0800a35d
 800b1c4:	20000748 	.word	0x20000748
 800b1c8:	08009e3d 	.word	0x08009e3d
 800b1cc:	08009e79 	.word	0x08009e79
 800b1d0:	08009e39 	.word	0x08009e39
 800b1d4:	08009e8d 	.word	0x08009e8d
 800b1d8:	08009ea5 	.word	0x08009ea5
 800b1dc:	08009dd9 	.word	0x08009dd9
 800b1e0:	0800ae99 	.word	0x0800ae99
 800b1e4:	08009fbd 	.word	0x08009fbd
 800b1e8:	0800a061 	.word	0x0800a061
 800b1ec:	0800a08d 	.word	0x0800a08d
 800b1f0:	0800a041 	.word	0x0800a041
 800b1f4:	08009dd1 	.word	0x08009dd1
 800b1f8:	08009dd5 	.word	0x08009dd5
 800b1fc:	0800a0b9 	.word	0x0800a0b9
 800b200:	0800a0c5 	.word	0x0800a0c5
 800b204:	0800a0d7 	.word	0x0800a0d7
 800b208:	0800a0e5 	.word	0x0800a0e5
 800b20c:	0800a139 	.word	0x0800a139
 800b210:	0800a1b5 	.word	0x0800a1b5
 800b214:	0800aaad 	.word	0x0800aaad
 800b218:	0800a31d 	.word	0x0800a31d
 800b21c:	0800b4a1 	.word	0x0800b4a1
 800b220:	0800b4bd 	.word	0x0800b4bd
 800b224:	200006e4 	.word	0x200006e4
 800b228:	200000f4 	.word	0x200000f4
 800b22c:	2000073c 	.word	0x2000073c
 800b230:	200006ec 	.word	0x200006ec
            if(aux_analog_in.pins.inputs == NULL)
 800b234:	4a50      	ldr	r2, [pc, #320]	@ (800b378 <driver_init+0x45c>)
 800b236:	6852      	ldr	r2, [r2, #4]
 800b238:	2a00      	cmp	r2, #0
 800b23a:	d047      	beq.n	800b2cc <driver_init+0x3b0>
            input->id = (pin_function_t)(Input_Analog_Aux0 + aux_analog_in.n_pins++);
 800b23c:	4a4e      	ldr	r2, [pc, #312]	@ (800b378 <driver_init+0x45c>)
 800b23e:	7813      	ldrb	r3, [r2, #0]
 800b240:	1c59      	adds	r1, r3, #1
 800b242:	7011      	strb	r1, [r2, #0]
 800b244:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800b248:	494c      	ldr	r1, [pc, #304]	@ (800b37c <driver_init+0x460>)
 800b24a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800b24e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800b252:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
            input->mode.analog = input->cap.analog = On;
 800b256:	78da      	ldrb	r2, [r3, #3]
 800b258:	f042 0208 	orr.w	r2, r2, #8
 800b25c:	70da      	strb	r2, [r3, #3]
 800b25e:	795a      	ldrb	r2, [r3, #5]
 800b260:	f042 0208 	orr.w	r2, r2, #8
 800b264:	715a      	strb	r2, [r3, #5]
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 800b266:	3401      	adds	r4, #1
 800b268:	2c02      	cmp	r4, #2
 800b26a:	d835      	bhi.n	800b2d8 <driver_init+0x3bc>
        input = &inputpin[i];
 800b26c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b270:	4b42      	ldr	r3, [pc, #264]	@ (800b37c <driver_init+0x460>)
 800b272:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        input->mode.input = input->cap.input = On;
 800b276:	789a      	ldrb	r2, [r3, #2]
 800b278:	f042 0201 	orr.w	r2, r2, #1
 800b27c:	709a      	strb	r2, [r3, #2]
 800b27e:	791a      	ldrb	r2, [r3, #4]
 800b280:	f042 0201 	orr.w	r2, r2, #1
 800b284:	711a      	strb	r2, [r3, #4]
        input->bit = 1 << input->pin;
 800b286:	7999      	ldrb	r1, [r3, #6]
 800b288:	2001      	movs	r0, #1
 800b28a:	4088      	lsls	r0, r1
 800b28c:	6098      	str	r0, [r3, #8]
        if(input->group == PinGroup_AuxInput) {
 800b28e:	691a      	ldr	r2, [r3, #16]
 800b290:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800b294:	f43f af15 	beq.w	800b0c2 <driver_init+0x1a6>
        } else if(input->group == PinGroup_AuxInputAnalog) {
 800b298:	2a0a      	cmp	r2, #10
 800b29a:	d0cb      	beq.n	800b234 <driver_init+0x318>
        }  else if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 800b29c:	f412 6fc0 	tst.w	r2, #1536	@ 0x600
 800b2a0:	d0e1      	beq.n	800b266 <driver_init+0x34a>
            if(limit_inputs.pins.inputs == NULL)
 800b2a2:	4a37      	ldr	r2, [pc, #220]	@ (800b380 <driver_init+0x464>)
 800b2a4:	6852      	ldr	r2, [r2, #4]
 800b2a6:	b1a2      	cbz	r2, 800b2d2 <driver_init+0x3b6>
            if(LIMIT_MASK & input->bit)
 800b2a8:	f410 5fc0 	tst.w	r0, #6144	@ 0x1800
 800b2ac:	d009      	beq.n	800b2c2 <driver_init+0x3a6>
                pin_irq[__builtin_ffs(input->bit) - 1] = input;
 800b2ae:	fa90 f2a0 	rbit	r2, r0
 800b2b2:	fab2 f282 	clz	r2, r2
 800b2b6:	b908      	cbnz	r0, 800b2bc <driver_init+0x3a0>
 800b2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2bc:	4931      	ldr	r1, [pc, #196]	@ (800b384 <driver_init+0x468>)
 800b2be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
            limit_inputs.n_pins++;
 800b2c2:	4a2f      	ldr	r2, [pc, #188]	@ (800b380 <driver_init+0x464>)
 800b2c4:	7813      	ldrb	r3, [r2, #0]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	7013      	strb	r3, [r2, #0]
 800b2ca:	e7cc      	b.n	800b266 <driver_init+0x34a>
                aux_analog_in.pins.inputs = input;
 800b2cc:	4a2a      	ldr	r2, [pc, #168]	@ (800b378 <driver_init+0x45c>)
 800b2ce:	6053      	str	r3, [r2, #4]
 800b2d0:	e7b4      	b.n	800b23c <driver_init+0x320>
                limit_inputs.pins.inputs = input;
 800b2d2:	4a2b      	ldr	r2, [pc, #172]	@ (800b380 <driver_init+0x464>)
 800b2d4:	6053      	str	r3, [r2, #4]
 800b2d6:	e7e7      	b.n	800b2a8 <driver_init+0x38c>
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e00e      	b.n	800b2fa <driver_init+0x3de>
            if(aux_digital_out.pins.outputs == NULL)
 800b2dc:	492a      	ldr	r1, [pc, #168]	@ (800b388 <driver_init+0x46c>)
 800b2de:	6849      	ldr	r1, [r1, #4]
 800b2e0:	b379      	cbz	r1, 800b342 <driver_init+0x426>
            output->id = (pin_function_t)(Output_Aux0 + aux_digital_out.n_pins);
 800b2e2:	4829      	ldr	r0, [pc, #164]	@ (800b388 <driver_init+0x46c>)
 800b2e4:	7802      	ldrb	r2, [r0, #0]
 800b2e6:	f102 0c77 	add.w	ip, r2, #119	@ 0x77
 800b2ea:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b2ee:	4c27      	ldr	r4, [pc, #156]	@ (800b38c <driver_init+0x470>)
 800b2f0:	f804 c021 	strb.w	ip, [r4, r1, lsl #2]
            aux_digital_out.n_pins++;
 800b2f4:	3201      	adds	r2, #1
 800b2f6:	7002      	strb	r2, [r0, #0]
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	2b07      	cmp	r3, #7
 800b2fc:	d827      	bhi.n	800b34e <driver_init+0x432>
        output = &outputpin[i];
 800b2fe:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800b302:	4a22      	ldr	r2, [pc, #136]	@ (800b38c <driver_init+0x470>)
 800b304:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        output->mode.output = On;
 800b308:	7c11      	ldrb	r1, [r2, #16]
 800b30a:	f041 0102 	orr.w	r1, r1, #2
 800b30e:	7411      	strb	r1, [r2, #16]
        if(output->group == PinGroup_AuxOutput) {
 800b310:	68d1      	ldr	r1, [r2, #12]
 800b312:	2909      	cmp	r1, #9
 800b314:	d0e2      	beq.n	800b2dc <driver_init+0x3c0>
        } else if(output->group == PinGroup_AuxOutputAnalog) {
 800b316:	290b      	cmp	r1, #11
 800b318:	d1ee      	bne.n	800b2f8 <driver_init+0x3dc>
            if(aux_analog_out.pins.outputs == NULL)
 800b31a:	491d      	ldr	r1, [pc, #116]	@ (800b390 <driver_init+0x474>)
 800b31c:	6849      	ldr	r1, [r1, #4]
 800b31e:	b199      	cbz	r1, 800b348 <driver_init+0x42c>
            output->mode.analog = On;
 800b320:	491a      	ldr	r1, [pc, #104]	@ (800b38c <driver_init+0x470>)
 800b322:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 800b326:	eb01 0480 	add.w	r4, r1, r0, lsl #2
 800b32a:	7c62      	ldrb	r2, [r4, #17]
 800b32c:	f042 0208 	orr.w	r2, r2, #8
 800b330:	7462      	strb	r2, [r4, #17]
            output->id = (pin_function_t)(Output_Analog_Aux0 + aux_analog_out.n_pins++);
 800b332:	4c17      	ldr	r4, [pc, #92]	@ (800b390 <driver_init+0x474>)
 800b334:	7822      	ldrb	r2, [r4, #0]
 800b336:	1c55      	adds	r5, r2, #1
 800b338:	7025      	strb	r5, [r4, #0]
 800b33a:	3a7d      	subs	r2, #125	@ 0x7d
 800b33c:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
 800b340:	e7da      	b.n	800b2f8 <driver_init+0x3dc>
                aux_digital_out.pins.outputs = output;
 800b342:	4911      	ldr	r1, [pc, #68]	@ (800b388 <driver_init+0x46c>)
 800b344:	604a      	str	r2, [r1, #4]
 800b346:	e7cc      	b.n	800b2e2 <driver_init+0x3c6>
                aux_analog_out.pins.outputs = output;
 800b348:	4911      	ldr	r1, [pc, #68]	@ (800b390 <driver_init+0x474>)
 800b34a:	604a      	str	r2, [r1, #4]
 800b34c:	e7e8      	b.n	800b320 <driver_init+0x404>
    if(aux_digital_in.n_pins || aux_digital_out.n_pins)
 800b34e:	4b11      	ldr	r3, [pc, #68]	@ (800b394 <driver_init+0x478>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	b913      	cbnz	r3, 800b35a <driver_init+0x43e>
 800b354:	4b0c      	ldr	r3, [pc, #48]	@ (800b388 <driver_init+0x46c>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	b11b      	cbz	r3, 800b362 <driver_init+0x446>
        ioports_init(&aux_digital_in, &aux_digital_out);
 800b35a:	490b      	ldr	r1, [pc, #44]	@ (800b388 <driver_init+0x46c>)
 800b35c:	480d      	ldr	r0, [pc, #52]	@ (800b394 <driver_init+0x478>)
 800b35e:	f000 fd93 	bl	800be88 <ioports_init>
    extern void embroidery_init (void);
    embroidery_init();
#endif

    extern void my_plugin_init (void);
    my_plugin_init();
 800b362:	f000 ff1f 	bl	800c1a4 <my_plugin_init>
    return hal.version == 10;
 800b366:	4b0c      	ldr	r3, [pc, #48]	@ (800b398 <driver_init+0x47c>)
 800b368:	6818      	ldr	r0, [r3, #0]
}
 800b36a:	280a      	cmp	r0, #10
 800b36c:	bf14      	ite	ne
 800b36e:	2000      	movne	r0, #0
 800b370:	2001      	moveq	r0, #1
 800b372:	b00d      	add	sp, #52	@ 0x34
 800b374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b376:	bf00      	nop
 800b378:	200006dc 	.word	0x200006dc
 800b37c:	200000f4 	.word	0x200000f4
 800b380:	20000730 	.word	0x20000730
 800b384:	200006ec 	.word	0x200006ec
 800b388:	200006d4 	.word	0x200006d4
 800b38c:	20000014 	.word	0x20000014
 800b390:	200006cc 	.word	0x200006cc
 800b394:	200006e4 	.word	0x200006e4
 800b398:	200011c0 	.word	0x200011c0

0800b39c <TIM5_IRQHandler>:
{
 800b39c:	b508      	push	{r3, lr}
    if((STEPPER_TIMER->SR & TIM_SR_UIF) != 0) {    // check interrupt source
 800b39e:	4b07      	ldr	r3, [pc, #28]	@ (800b3bc <TIM5_IRQHandler+0x20>)
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f013 0f01 	tst.w	r3, #1
 800b3a6:	d007      	beq.n	800b3b8 <TIM5_IRQHandler+0x1c>
        STEPPER_TIMER->SR = ~TIM_SR_UIF;            // clear UIF flag
 800b3a8:	4b04      	ldr	r3, [pc, #16]	@ (800b3bc <TIM5_IRQHandler+0x20>)
 800b3aa:	f06f 0201 	mvn.w	r2, #1
 800b3ae:	611a      	str	r2, [r3, #16]
        hal.stepper.interrupt_callback();
 800b3b0:	4b03      	ldr	r3, [pc, #12]	@ (800b3c0 <TIM5_IRQHandler+0x24>)
 800b3b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b3b6:	4798      	blx	r3
}
 800b3b8:	bd08      	pop	{r3, pc}
 800b3ba:	bf00      	nop
 800b3bc:	40000c00 	.word	0x40000c00
 800b3c0:	200011c0 	.word	0x200011c0

0800b3c4 <TIM4_IRQHandler>:
    PULSE_TIMER->SR &= ~TIM_SR_UIF;                 // Clear UIF flag
 800b3c4:	4b1e      	ldr	r3, [pc, #120]	@ (800b440 <TIM4_IRQHandler+0x7c>)
 800b3c6:	691a      	ldr	r2, [r3, #16]
 800b3c8:	f022 0201 	bic.w	r2, r2, #1
 800b3cc:	611a      	str	r2, [r3, #16]
    if(PULSE_TIMER->ARR == pulse_delay) {          // Delayed step pulse?
 800b3ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b444 <TIM4_IRQHandler+0x80>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d012      	beq.n	800b3fe <TIM4_IRQHandler+0x3a>
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800b3d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b448 <TIM4_IRQHandler+0x84>)
 800b3da:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800b3de:	f3c3 0100 	ubfx	r1, r3, #0, #1
 800b3e2:	4a1a      	ldr	r2, [pc, #104]	@ (800b44c <TIM4_IRQHandler+0x88>)
 800b3e4:	f882 10b4 	strb.w	r1, [r2, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800b3e8:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800b3ec:	f882 10ac 	strb.w	r1, [r2, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800b3f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b3f4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800b3f8:	f882 3088 	strb.w	r3, [r2, #136]	@ 0x88
}
 800b3fc:	4770      	bx	lr
        PULSE_TIMER->ARR = pulse_length;
 800b3fe:	4b14      	ldr	r3, [pc, #80]	@ (800b450 <TIM4_IRQHandler+0x8c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a0f      	ldr	r2, [pc, #60]	@ (800b440 <TIM4_IRQHandler+0x7c>)
 800b404:	62d3      	str	r3, [r2, #44]	@ 0x2c
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800b406:	4b13      	ldr	r3, [pc, #76]	@ (800b454 <TIM4_IRQHandler+0x90>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	490f      	ldr	r1, [pc, #60]	@ (800b448 <TIM4_IRQHandler+0x84>)
 800b40c:	f891 10e8 	ldrb.w	r1, [r1, #232]	@ 0xe8
 800b410:	404b      	eors	r3, r1
    DIGITAL_OUT(X_STEP_PORT, X_STEP_PIN, step_outbits.x);
 800b412:	f3c3 0000 	ubfx	r0, r3, #0, #1
 800b416:	490d      	ldr	r1, [pc, #52]	@ (800b44c <TIM4_IRQHandler+0x88>)
 800b418:	f881 00b4 	strb.w	r0, [r1, #180]	@ 0xb4
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_PIN, step_outbits.y);
 800b41c:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800b420:	f881 00ac 	strb.w	r0, [r1, #172]	@ 0xac
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_PIN, step_outbits.z);
 800b424:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b428:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800b42c:	f881 3088 	strb.w	r3, [r1, #136]	@ 0x88
        PULSE_TIMER->EGR = TIM_EGR_UG;
 800b430:	2301      	movs	r3, #1
 800b432:	6153      	str	r3, [r2, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 800b434:	6813      	ldr	r3, [r2, #0]
 800b436:	f043 0301 	orr.w	r3, r3, #1
 800b43a:	6013      	str	r3, [r2, #0]
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	40000800 	.word	0x40000800
 800b444:	20000740 	.word	0x20000740
 800b448:	20001bd8 	.word	0x20001bd8
 800b44c:	42418200 	.word	0x42418200
 800b450:	20000744 	.word	0x20000744
 800b454:	2000072c 	.word	0x2000072c

0800b458 <EXTI15_10_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|AUXINPUT_MASK) & (0xFC00)

void EXTI15_10_IRQHandler(void)
{
 800b458:	b508      	push	{r3, lr}
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(0xFC00);
 800b45a:	4b07      	ldr	r3, [pc, #28]	@ (800b478 <EXTI15_10_IRQHandler+0x20>)
 800b45c:	695b      	ldr	r3, [r3, #20]

    if(ifg) {
 800b45e:	f413 407c 	ands.w	r0, r3, #64512	@ 0xfc00
 800b462:	d004      	beq.n	800b46e <EXTI15_10_IRQHandler+0x16>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 800b464:	4a04      	ldr	r2, [pc, #16]	@ (800b478 <EXTI15_10_IRQHandler+0x20>)
 800b466:	6150      	str	r0, [r2, #20]
#if CONTROL_MASK & 0xFC00
        if(ifg & CONTROL_MASK)
            hal.control.interrupt_callback(systemGetState());
#endif
#if LIMIT_MASK & 0xFC00
        if(ifg & LIMIT_MASK)
 800b468:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 800b46c:	d100      	bne.n	800b470 <EXTI15_10_IRQHandler+0x18>
#if AUXINPUT_MASK & 0xFC00
        if(ifg & aux_irq)
            aux_pin_irq(ifg & aux_irq);
#endif
    }
}
 800b46e:	bd08      	pop	{r3, pc}
            core_pin_irq(ifg);
 800b470:	f7ff fcb2 	bl	800add8 <core_pin_irq>
}
 800b474:	e7fb      	b.n	800b46e <EXTI15_10_IRQHandler+0x16>
 800b476:	bf00      	nop
 800b478:	40013c00 	.word	0x40013c00

0800b47c <Driver_IncTick>:

#endif

// Interrupt handler for 1 ms interval timer
void Driver_IncTick (void)
{
 800b47c:	b508      	push	{r3, lr}
            }
        }
    }
#endif

    if(delay.ms && !(--delay.ms)) {
 800b47e:	4b07      	ldr	r3, [pc, #28]	@ (800b49c <Driver_IncTick+0x20>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	b153      	cbz	r3, 800b49a <Driver_IncTick+0x1e>
 800b484:	4a05      	ldr	r2, [pc, #20]	@ (800b49c <Driver_IncTick+0x20>)
 800b486:	6813      	ldr	r3, [r2, #0]
 800b488:	3b01      	subs	r3, #1
 800b48a:	6013      	str	r3, [r2, #0]
 800b48c:	b92b      	cbnz	r3, 800b49a <Driver_IncTick+0x1e>
        if(delay.callback) {
 800b48e:	6853      	ldr	r3, [r2, #4]
 800b490:	b11b      	cbz	r3, 800b49a <Driver_IncTick+0x1e>
            delay.callback();
 800b492:	4798      	blx	r3
            delay.callback = NULL;
 800b494:	4b01      	ldr	r3, [pc, #4]	@ (800b49c <Driver_IncTick+0x20>)
 800b496:	2200      	movs	r2, #0
 800b498:	605a      	str	r2, [r3, #4]
        }
    }
}
 800b49a:	bd08      	pop	{r3, pc}
 800b49c:	2000000c 	.word	0x2000000c

0800b4a0 <memcpy_from_flash>:

extern void *_EEPROM_Emul_Start;
extern uint8_t _EEPROM_Emul_Sector;

bool memcpy_from_flash (uint8_t *dest)
{
 800b4a0:	b508      	push	{r3, lr}
    memcpy(dest, &_EEPROM_Emul_Start, hal.nvs.size);
 800b4a2:	4b04      	ldr	r3, [pc, #16]	@ (800b4b4 <memcpy_from_flash+0x14>)
 800b4a4:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800b4a8:	4903      	ldr	r1, [pc, #12]	@ (800b4b8 <memcpy_from_flash+0x18>)
 800b4aa:	f019 fa20 	bl	80248ee <memcpy>

    return true;
}
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	bd08      	pop	{r3, pc}
 800b4b2:	bf00      	nop
 800b4b4:	200011c0 	.word	0x200011c0
 800b4b8:	08004000 	.word	0x08004000

0800b4bc <memcpy_to_flash>:

bool memcpy_to_flash (uint8_t *source)
{
 800b4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c0:	b082      	sub	sp, #8
 800b4c2:	4605      	mov	r5, r0
    if (!memcmp(source, &_EEPROM_Emul_Start, hal.nvs.size))
 800b4c4:	4b21      	ldr	r3, [pc, #132]	@ (800b54c <memcpy_to_flash+0x90>)
 800b4c6:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800b4ca:	4921      	ldr	r1, [pc, #132]	@ (800b550 <memcpy_to_flash+0x94>)
 800b4cc:	f019 f885 	bl	80245da <memcmp>
 800b4d0:	b918      	cbnz	r0, 800b4da <memcpy_to_flash+0x1e>
        return true;
 800b4d2:	2001      	movs	r0, #1

        HAL_FLASH_Lock();
    }

    return status == HAL_OK;
}
 800b4d4:	b002      	add	sp, #8
 800b4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((status = HAL_FLASH_Unlock()) == HAL_OK) {
 800b4da:	f7fd fe69 	bl	80091b0 <HAL_FLASH_Unlock>
 800b4de:	4604      	mov	r4, r0
 800b4e0:	b118      	cbz	r0, 800b4ea <memcpy_to_flash+0x2e>
    return status == HAL_OK;
 800b4e2:	fab4 f084 	clz	r0, r4
 800b4e6:	0940      	lsrs	r0, r0, #5
 800b4e8:	e7f4      	b.n	800b4d4 <memcpy_to_flash+0x18>
        if((status = HAL_FLASHEx_Erase(&erase, &error)) != HAL_OK)
 800b4ea:	a901      	add	r1, sp, #4
 800b4ec:	4819      	ldr	r0, [pc, #100]	@ (800b554 <memcpy_to_flash+0x98>)
 800b4ee:	f7fd ff57 	bl	80093a0 <HAL_FLASHEx_Erase>
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	b920      	cbnz	r0, 800b500 <memcpy_to_flash+0x44>
        uint32_t address = (uint32_t)&_EEPROM_Emul_Start, remaining = (uint32_t)hal.nvs.size;
 800b4f6:	4f16      	ldr	r7, [pc, #88]	@ (800b550 <memcpy_to_flash+0x94>)
 800b4f8:	4b14      	ldr	r3, [pc, #80]	@ (800b54c <memcpy_to_flash+0x90>)
 800b4fa:	f8d3 8178 	ldr.w	r8, [r3, #376]	@ 0x178
        while(remaining && status == HAL_OK) {
 800b4fe:	e009      	b.n	800b514 <memcpy_to_flash+0x58>
            status = HAL_FLASHEx_Erase(&erase, &error);
 800b500:	a901      	add	r1, sp, #4
 800b502:	4814      	ldr	r0, [pc, #80]	@ (800b554 <memcpy_to_flash+0x98>)
 800b504:	f7fd ff4c 	bl	80093a0 <HAL_FLASHEx_Erase>
 800b508:	4604      	mov	r4, r0
 800b50a:	e7f4      	b.n	800b4f6 <memcpy_to_flash+0x3a>
            address += 4;
 800b50c:	3704      	adds	r7, #4
            remaining -= 4;
 800b50e:	f1a8 0804 	sub.w	r8, r8, #4
 800b512:	4635      	mov	r5, r6
        while(remaining && status == HAL_OK) {
 800b514:	f1b8 0f00 	cmp.w	r8, #0
 800b518:	d014      	beq.n	800b544 <memcpy_to_flash+0x88>
 800b51a:	b99c      	cbnz	r4, 800b544 <memcpy_to_flash+0x88>
            if((status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++)) == HAL_OK)
 800b51c:	462e      	mov	r6, r5
 800b51e:	f836 2b02 	ldrh.w	r2, [r6], #2
 800b522:	2300      	movs	r3, #0
 800b524:	4639      	mov	r1, r7
 800b526:	2001      	movs	r0, #1
 800b528:	f7fd fe94 	bl	8009254 <HAL_FLASH_Program>
 800b52c:	4604      	mov	r4, r0
 800b52e:	2800      	cmp	r0, #0
 800b530:	d1ec      	bne.n	800b50c <memcpy_to_flash+0x50>
                status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, *data++);
 800b532:	1d2e      	adds	r6, r5, #4
 800b534:	886a      	ldrh	r2, [r5, #2]
 800b536:	2300      	movs	r3, #0
 800b538:	1cb9      	adds	r1, r7, #2
 800b53a:	2001      	movs	r0, #1
 800b53c:	f7fd fe8a 	bl	8009254 <HAL_FLASH_Program>
 800b540:	4604      	mov	r4, r0
 800b542:	e7e3      	b.n	800b50c <memcpy_to_flash+0x50>
        HAL_FLASH_Lock();
 800b544:	f7fd fe4c 	bl	80091e0 <HAL_FLASH_Lock>
 800b548:	e7cb      	b.n	800b4e2 <memcpy_to_flash+0x26>
 800b54a:	bf00      	nop
 800b54c:	200011c0 	.word	0x200011c0
 800b550:	08004000 	.word	0x08004000
 800b554:	20000160 	.word	0x20000160

0800b558 <digital_out>:
    return output->id < digital.out.n_ports;
}

static void digital_out (uint8_t port, bool on)
{
    if(port < digital.out.n_ports) {
 800b558:	4b0d      	ldr	r3, [pc, #52]	@ (800b590 <digital_out+0x38>)
 800b55a:	7b1b      	ldrb	r3, [r3, #12]
 800b55c:	4283      	cmp	r3, r0
 800b55e:	d916      	bls.n	800b58e <digital_out+0x36>
        port = ioports_map(digital.out, port);
 800b560:	4b0b      	ldr	r3, [pc, #44]	@ (800b590 <digital_out+0x38>)
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	b103      	cbz	r3, 800b568 <digital_out+0x10>
 800b566:	5c18      	ldrb	r0, [r3, r0]
        DIGITAL_OUT(aux_out[port].port, aux_out[port].pin, aux_out[port].mode.inverted ? !on : on);
 800b568:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800b56c:	4b09      	ldr	r3, [pc, #36]	@ (800b594 <digital_out+0x3c>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b574:	7c53      	ldrb	r3, [r2, #17]
 800b576:	f013 0f04 	tst.w	r3, #4
 800b57a:	d001      	beq.n	800b580 <digital_out+0x28>
 800b57c:	f081 0101 	eor.w	r1, r1, #1
 800b580:	6850      	ldr	r0, [r2, #4]
 800b582:	4b05      	ldr	r3, [pc, #20]	@ (800b598 <digital_out+0x40>)
 800b584:	4403      	add	r3, r0
 800b586:	015b      	lsls	r3, r3, #5
 800b588:	7a12      	ldrb	r2, [r2, #8]
 800b58a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    }
}
 800b58e:	4770      	bx	lr
 800b590:	20000788 	.word	0x20000788
 800b594:	20000780 	.word	0x20000780
 800b598:	c2100014 	.word	0xc2100014

0800b59c <digital_out_state>:

static float digital_out_state (xbar_t *output)
{
    float value = -1.0f;

    if(output->id < digital.out.n_ports)
 800b59c:	7803      	ldrb	r3, [r0, #0]
 800b59e:	4a0f      	ldr	r2, [pc, #60]	@ (800b5dc <digital_out_state+0x40>)
 800b5a0:	7b12      	ldrb	r2, [r2, #12]
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d217      	bcs.n	800b5d6 <digital_out_state+0x3a>
        value = (float)(DIGITAL_IN(aux_out[output->id].port, aux_out[output->id].pin) ^ aux_out[output->id].mode.inverted);
 800b5a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b5aa:	4a0d      	ldr	r2, [pc, #52]	@ (800b5e0 <digital_out_state+0x44>)
 800b5ac:	6812      	ldr	r2, [r2, #0]
 800b5ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b5b2:	6853      	ldr	r3, [r2, #4]
 800b5b4:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800b5b8:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800b5bc:	015b      	lsls	r3, r3, #5
 800b5be:	7a11      	ldrb	r1, [r2, #8]
 800b5c0:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 800b5c4:	7c52      	ldrb	r2, [r2, #17]
 800b5c6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b5ca:	4053      	eors	r3, r2
 800b5cc:	ee00 3a10 	vmov	s0, r3
 800b5d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b5d4:	4770      	bx	lr
    float value = -1.0f;
 800b5d6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    return value;
}
 800b5da:	4770      	bx	lr
 800b5dc:	20000788 	.word	0x20000788
 800b5e0:	20000780 	.word	0x20000780

0800b5e4 <digital_in_state>:

static float digital_in_state (xbar_t *input)
{
    float value = -1.0f;

    if(input->id < digital.in.n_ports)
 800b5e4:	7803      	ldrb	r3, [r0, #0]
 800b5e6:	4a0f      	ldr	r2, [pc, #60]	@ (800b624 <digital_in_state+0x40>)
 800b5e8:	7912      	ldrb	r2, [r2, #4]
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d217      	bcs.n	800b61e <digital_in_state+0x3a>
        value = (float)(DIGITAL_IN(aux_in[input->id].port, aux_in[input->id].pin) ^ aux_in[input->id].mode.inverted);
 800b5ee:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b5f2:	4a0d      	ldr	r2, [pc, #52]	@ (800b628 <digital_in_state+0x44>)
 800b5f4:	6812      	ldr	r2, [r2, #0]
 800b5f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b5fa:	68d3      	ldr	r3, [r2, #12]
 800b5fc:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800b600:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800b604:	015b      	lsls	r3, r3, #5
 800b606:	7991      	ldrb	r1, [r2, #6]
 800b608:	f813 3021 	ldrb.w	r3, [r3, r1, lsl #2]
 800b60c:	7952      	ldrb	r2, [r2, #5]
 800b60e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b612:	4053      	eors	r3, r2
 800b614:	ee00 3a10 	vmov	s0, r3
 800b618:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b61c:	4770      	bx	lr
    float value = -1.0f;
 800b61e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0

    return value;
}
 800b622:	4770      	bx	lr
 800b624:	20000788 	.word	0x20000788
 800b628:	20000784 	.word	0x20000784

0800b62c <get_pin_info>:
{
    static xbar_t pin;

    xbar_t *info = NULL;

    if(type == Port_Digital) {
 800b62c:	2801      	cmp	r0, #1
 800b62e:	d16f      	bne.n	800b710 <get_pin_info+0xe4>
{
 800b630:	b530      	push	{r4, r5, lr}

        if(dir == Port_Input && port < digital.in.n_ports) {
 800b632:	2900      	cmp	r1, #0
 800b634:	d136      	bne.n	800b6a4 <get_pin_info+0x78>
 800b636:	4b37      	ldr	r3, [pc, #220]	@ (800b714 <get_pin_info+0xe8>)
 800b638:	791b      	ldrb	r3, [r3, #4]
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d936      	bls.n	800b6ac <get_pin_info+0x80>
            XBAR_SET_DIN_INFO(pin, ioports_map(digital.in, port), aux_in[pin.id], digital_in_cfg, digital_in_state);
 800b63e:	4b35      	ldr	r3, [pc, #212]	@ (800b714 <get_pin_info+0xe8>)
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d02c      	beq.n	800b6a0 <get_pin_info+0x74>
 800b646:	5c9b      	ldrb	r3, [r3, r2]
 800b648:	4833      	ldr	r0, [pc, #204]	@ (800b718 <get_pin_info+0xec>)
 800b64a:	7003      	strb	r3, [r0, #0]
 800b64c:	eb03 0ec3 	add.w	lr, r3, r3, lsl #3
 800b650:	4b32      	ldr	r3, [pc, #200]	@ (800b71c <get_pin_info+0xf0>)
 800b652:	681c      	ldr	r4, [r3, #0]
 800b654:	eb04 038e 	add.w	r3, r4, lr, lsl #2
 800b658:	889d      	ldrh	r5, [r3, #4]
 800b65a:	82c5      	strh	r5, [r0, #22]
 800b65c:	885d      	ldrh	r5, [r3, #2]
 800b65e:	8285      	strh	r5, [r0, #20]
 800b660:	f890 c015 	ldrb.w	ip, [r0, #21]
 800b664:	f04c 0c04 	orr.w	ip, ip, #4
 800b668:	f880 c015 	strb.w	ip, [r0, #21]
 800b66c:	f893 c005 	ldrb.w	ip, [r3, #5]
 800b670:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800b674:	f08c 0c01 	eor.w	ip, ip, #1
 800b678:	7d45      	ldrb	r5, [r0, #21]
 800b67a:	f36c 1586 	bfi	r5, ip, #6, #1
 800b67e:	7545      	strb	r5, [r0, #21]
 800b680:	f814 402e 	ldrb.w	r4, [r4, lr, lsl #2]
 800b684:	7044      	strb	r4, [r0, #1]
 800b686:	691c      	ldr	r4, [r3, #16]
 800b688:	6044      	str	r4, [r0, #4]
 800b68a:	799c      	ldrb	r4, [r3, #6]
 800b68c:	6104      	str	r4, [r0, #16]
 800b68e:	68dc      	ldr	r4, [r3, #12]
 800b690:	6084      	str	r4, [r0, #8]
 800b692:	6a1b      	ldr	r3, [r3, #32]
 800b694:	60c3      	str	r3, [r0, #12]
 800b696:	4b22      	ldr	r3, [pc, #136]	@ (800b720 <get_pin_info+0xf4>)
 800b698:	6183      	str	r3, [r0, #24]
 800b69a:	4b22      	ldr	r3, [pc, #136]	@ (800b724 <get_pin_info+0xf8>)
 800b69c:	61c3      	str	r3, [r0, #28]
            info = &pin;
 800b69e:	e002      	b.n	800b6a6 <get_pin_info+0x7a>
            XBAR_SET_DIN_INFO(pin, ioports_map(digital.in, port), aux_in[pin.id], digital_in_cfg, digital_in_state);
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	e7d1      	b.n	800b648 <get_pin_info+0x1c>
    xbar_t *info = NULL;
 800b6a4:	2000      	movs	r0, #0
        }

        if(dir == Port_Output && port < digital.out.n_ports) {
 800b6a6:	2901      	cmp	r1, #1
 800b6a8:	d002      	beq.n	800b6b0 <get_pin_info+0x84>
            info = &pin;
        }
    }

    return info;
}
 800b6aa:	bd30      	pop	{r4, r5, pc}
    xbar_t *info = NULL;
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	e7fa      	b.n	800b6a6 <get_pin_info+0x7a>
        if(dir == Port_Output && port < digital.out.n_ports) {
 800b6b0:	4b18      	ldr	r3, [pc, #96]	@ (800b714 <get_pin_info+0xe8>)
 800b6b2:	7b1b      	ldrb	r3, [r3, #12]
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d9f8      	bls.n	800b6aa <get_pin_info+0x7e>
            XBAR_SET_DOUT_INFO(pin, ioports_map(digital.out, port), aux_out[pin.id], digital_out_cfg, digital_out_state);
 800b6b8:	4b16      	ldr	r3, [pc, #88]	@ (800b714 <get_pin_info+0xe8>)
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	b103      	cbz	r3, 800b6c0 <get_pin_info+0x94>
 800b6be:	5c9a      	ldrb	r2, [r3, r2]
 800b6c0:	4815      	ldr	r0, [pc, #84]	@ (800b718 <get_pin_info+0xec>)
 800b6c2:	7002      	strb	r2, [r0, #0]
 800b6c4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b6c8:	4b17      	ldr	r3, [pc, #92]	@ (800b728 <get_pin_info+0xfc>)
 800b6ca:	681c      	ldr	r4, [r3, #0]
 800b6cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6d0:	8a19      	ldrh	r1, [r3, #16]
 800b6d2:	82c1      	strh	r1, [r0, #22]
 800b6d4:	8a19      	ldrh	r1, [r3, #16]
 800b6d6:	8281      	strh	r1, [r0, #20]
 800b6d8:	7d41      	ldrb	r1, [r0, #21]
 800b6da:	f041 0104 	orr.w	r1, r1, #4
 800b6de:	7541      	strb	r1, [r0, #21]
 800b6e0:	7c59      	ldrb	r1, [r3, #17]
 800b6e2:	0989      	lsrs	r1, r1, #6
 800b6e4:	f081 0101 	eor.w	r1, r1, #1
 800b6e8:	7d45      	ldrb	r5, [r0, #21]
 800b6ea:	f361 1586 	bfi	r5, r1, #6, #1
 800b6ee:	7545      	strb	r5, [r0, #21]
 800b6f0:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
 800b6f4:	7042      	strb	r2, [r0, #1]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	6042      	str	r2, [r0, #4]
 800b6fa:	7a1a      	ldrb	r2, [r3, #8]
 800b6fc:	6102      	str	r2, [r0, #16]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	6082      	str	r2, [r0, #8]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	60c3      	str	r3, [r0, #12]
 800b706:	4b09      	ldr	r3, [pc, #36]	@ (800b72c <get_pin_info+0x100>)
 800b708:	6183      	str	r3, [r0, #24]
 800b70a:	4b09      	ldr	r3, [pc, #36]	@ (800b730 <get_pin_info+0x104>)
 800b70c:	61c3      	str	r3, [r0, #28]
            info = &pin;
 800b70e:	e7cc      	b.n	800b6aa <get_pin_info+0x7e>
    xbar_t *info = NULL;
 800b710:	2000      	movs	r0, #0
}
 800b712:	4770      	bx	lr
 800b714:	20000788 	.word	0x20000788
 800b718:	20000754 	.word	0x20000754
 800b71c:	20000784 	.word	0x20000784
 800b720:	0800b885 	.word	0x0800b885
 800b724:	0800b5e5 	.word	0x0800b5e5
 800b728:	20000780 	.word	0x20000780
 800b72c:	0800b7a5 	.word	0x0800b7a5
 800b730:	0800b59d 	.word	0x0800b59d

0800b734 <set_pin_description>:

static void set_pin_description (io_port_type_t type, io_port_direction_t dir, uint8_t port, const char *s)
{
    if(type == Port_Digital) {
 800b734:	2801      	cmp	r0, #1
 800b736:	d000      	beq.n	800b73a <set_pin_description+0x6>
 800b738:	4770      	bx	lr
{
 800b73a:	b410      	push	{r4}
        if(dir == Port_Input && port < digital.in.n_ports)
 800b73c:	b971      	cbnz	r1, 800b75c <set_pin_description+0x28>
 800b73e:	4816      	ldr	r0, [pc, #88]	@ (800b798 <set_pin_description+0x64>)
 800b740:	7900      	ldrb	r0, [r0, #4]
 800b742:	4290      	cmp	r0, r2
 800b744:	d90a      	bls.n	800b75c <set_pin_description+0x28>
            aux_in[ioports_map(digital.in, port)].description = s;
 800b746:	4815      	ldr	r0, [pc, #84]	@ (800b79c <set_pin_description+0x68>)
 800b748:	6804      	ldr	r4, [r0, #0]
 800b74a:	4813      	ldr	r0, [pc, #76]	@ (800b798 <set_pin_description+0x64>)
 800b74c:	6880      	ldr	r0, [r0, #8]
 800b74e:	b150      	cbz	r0, 800b766 <set_pin_description+0x32>
 800b750:	5c80      	ldrb	r0, [r0, r2]
 800b752:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800b756:	0080      	lsls	r0, r0, #2
 800b758:	4420      	add	r0, r4
 800b75a:	6203      	str	r3, [r0, #32]
        if(dir == Port_Output && port < digital.out.n_ports)
 800b75c:	2901      	cmp	r1, #1
 800b75e:	d006      	beq.n	800b76e <set_pin_description+0x3a>
            aux_out[ioports_map(digital.out, port)].description = s;
    }
}
 800b760:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b764:	4770      	bx	lr
            aux_in[ioports_map(digital.in, port)].description = s;
 800b766:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 800b76a:	0080      	lsls	r0, r0, #2
 800b76c:	e7f4      	b.n	800b758 <set_pin_description+0x24>
        if(dir == Port_Output && port < digital.out.n_ports)
 800b76e:	490a      	ldr	r1, [pc, #40]	@ (800b798 <set_pin_description+0x64>)
 800b770:	7b09      	ldrb	r1, [r1, #12]
 800b772:	4291      	cmp	r1, r2
 800b774:	d9f4      	bls.n	800b760 <set_pin_description+0x2c>
            aux_out[ioports_map(digital.out, port)].description = s;
 800b776:	490a      	ldr	r1, [pc, #40]	@ (800b7a0 <set_pin_description+0x6c>)
 800b778:	6809      	ldr	r1, [r1, #0]
 800b77a:	4807      	ldr	r0, [pc, #28]	@ (800b798 <set_pin_description+0x64>)
 800b77c:	6900      	ldr	r0, [r0, #16]
 800b77e:	b130      	cbz	r0, 800b78e <set_pin_description+0x5a>
 800b780:	5c82      	ldrb	r2, [r0, r2]
 800b782:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b786:	0092      	lsls	r2, r2, #2
 800b788:	440a      	add	r2, r1
 800b78a:	6153      	str	r3, [r2, #20]
}
 800b78c:	e7e8      	b.n	800b760 <set_pin_description+0x2c>
            aux_out[ioports_map(digital.out, port)].description = s;
 800b78e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b792:	0092      	lsls	r2, r2, #2
 800b794:	e7f8      	b.n	800b788 <set_pin_description+0x54>
 800b796:	bf00      	nop
 800b798:	20000788 	.word	0x20000788
 800b79c:	20000784 	.word	0x20000784
 800b7a0:	20000780 	.word	0x20000780

0800b7a4 <digital_out_cfg>:
{
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	4604      	mov	r4, r0
    if(output->id < digital.out.n_ports) {
 800b7a8:	7803      	ldrb	r3, [r0, #0]
 800b7aa:	4833      	ldr	r0, [pc, #204]	@ (800b878 <digital_out_cfg+0xd4>)
 800b7ac:	7b00      	ldrb	r0, [r0, #12]
 800b7ae:	4283      	cmp	r3, r0
 800b7b0:	d248      	bcs.n	800b844 <digital_out_cfg+0xa0>
        if(config->inverted != aux_out[output->id].mode.inverted) {
 800b7b2:	780d      	ldrb	r5, [r1, #0]
 800b7b4:	4831      	ldr	r0, [pc, #196]	@ (800b87c <digital_out_cfg+0xd8>)
 800b7b6:	6800      	ldr	r0, [r0, #0]
 800b7b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b7bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b7c0:	f893 c011 	ldrb.w	ip, [r3, #17]
 800b7c4:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 800b7c8:	4565      	cmp	r5, ip
 800b7ca:	d01b      	beq.n	800b804 <digital_out_cfg+0x60>
            aux_out[output->id].mode.inverted = config->inverted;
 800b7cc:	7c5e      	ldrb	r6, [r3, #17]
 800b7ce:	f365 0682 	bfi	r6, r5, #2, #1
 800b7d2:	745e      	strb	r6, [r3, #17]
            DIGITAL_OUT(aux_out[output->id].port, aux_out[output->id].pin, !DIGITAL_IN(aux_out[output->id].port, aux_out[output->id].pin));
 800b7d4:	7823      	ldrb	r3, [r4, #0]
 800b7d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b7da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b7de:	685e      	ldr	r6, [r3, #4]
 800b7e0:	f106 4c42 	add.w	ip, r6, #3254779904	@ 0xc2000000
 800b7e4:	f10c 1c10 	add.w	ip, ip, #1048592	@ 0x100010
 800b7e8:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 800b7ec:	7a1d      	ldrb	r5, [r3, #8]
 800b7ee:	f81c c025 	ldrb.w	ip, [ip, r5, lsl #2]
 800b7f2:	4b23      	ldr	r3, [pc, #140]	@ (800b880 <digital_out_cfg+0xdc>)
 800b7f4:	4433      	add	r3, r6
 800b7f6:	015b      	lsls	r3, r3, #5
 800b7f8:	fabc fc8c 	clz	ip, ip
 800b7fc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b800:	f803 c025 	strb.w	ip, [r3, r5, lsl #2]
        if(config->open_drain != aux_out[output->id].mode.open_drain) {
 800b804:	784d      	ldrb	r5, [r1, #1]
 800b806:	7823      	ldrb	r3, [r4, #0]
 800b808:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b80c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b810:	f893 c010 	ldrb.w	ip, [r3, #16]
 800b814:	f3cc 0c80 	ubfx	ip, ip, #2, #1
 800b818:	4565      	cmp	r5, ip
 800b81a:	d012      	beq.n	800b842 <digital_out_cfg+0x9e>
            if((aux_out[output->id].mode.open_drain = config->open_drain))
 800b81c:	f893 c010 	ldrb.w	ip, [r3, #16]
 800b820:	f365 0c82 	bfi	ip, r5, #2, #1
 800b824:	f883 c010 	strb.w	ip, [r3, #16]
 800b828:	b1a5      	cbz	r5, 800b854 <digital_out_cfg+0xb0>
                aux_out[output->id].port->OTYPER |= (GPIO_OTYPER_OT_0 << aux_out[output->id].pin);
 800b82a:	7823      	ldrb	r3, [r4, #0]
 800b82c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b830:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b834:	685d      	ldr	r5, [r3, #4]
 800b836:	6868      	ldr	r0, [r5, #4]
 800b838:	7a1e      	ldrb	r6, [r3, #8]
 800b83a:	2301      	movs	r3, #1
 800b83c:	40b3      	lsls	r3, r6
 800b83e:	4303      	orrs	r3, r0
 800b840:	606b      	str	r3, [r5, #4]
        if(persistent)
 800b842:	b9aa      	cbnz	r2, 800b870 <digital_out_cfg+0xcc>
    return output->id < digital.out.n_ports;
 800b844:	7820      	ldrb	r0, [r4, #0]
 800b846:	4b0c      	ldr	r3, [pc, #48]	@ (800b878 <digital_out_cfg+0xd4>)
 800b848:	7b1b      	ldrb	r3, [r3, #12]
}
 800b84a:	4298      	cmp	r0, r3
 800b84c:	bf2c      	ite	cs
 800b84e:	2000      	movcs	r0, #0
 800b850:	2001      	movcc	r0, #1
 800b852:	bd70      	pop	{r4, r5, r6, pc}
                aux_out[output->id].port->OTYPER &= ~(GPIO_OTYPER_OT_0 << aux_out[output->id].pin);
 800b854:	7823      	ldrb	r3, [r4, #0]
 800b856:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b85a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b85e:	6845      	ldr	r5, [r0, #4]
 800b860:	686b      	ldr	r3, [r5, #4]
 800b862:	7a06      	ldrb	r6, [r0, #8]
 800b864:	2001      	movs	r0, #1
 800b866:	40b0      	lsls	r0, r6
 800b868:	ea23 0300 	bic.w	r3, r3, r0
 800b86c:	606b      	str	r3, [r5, #4]
 800b86e:	e7e8      	b.n	800b842 <digital_out_cfg+0x9e>
            ioport_save_output_settings(output, config);
 800b870:	4620      	mov	r0, r4
 800b872:	f006 fbf9 	bl	8012068 <ioport_save_output_settings>
 800b876:	e7e5      	b.n	800b844 <digital_out_cfg+0xa0>
 800b878:	20000788 	.word	0x20000788
 800b87c:	20000780 	.word	0x20000780
 800b880:	c2100014 	.word	0xc2100014

0800b884 <digital_in_cfg>:
{
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	4604      	mov	r4, r0
    if(input->id < digital.in.n_ports && config->pull_mode != PullMode_UpDown) {
 800b888:	7803      	ldrb	r3, [r0, #0]
 800b88a:	482b      	ldr	r0, [pc, #172]	@ (800b938 <digital_in_cfg+0xb4>)
 800b88c:	7900      	ldrb	r0, [r0, #4]
 800b88e:	4283      	cmp	r3, r0
 800b890:	d245      	bcs.n	800b91e <digital_in_cfg+0x9a>
 800b892:	7888      	ldrb	r0, [r1, #2]
 800b894:	2803      	cmp	r0, #3
 800b896:	d042      	beq.n	800b91e <digital_in_cfg+0x9a>
        aux_in[input->id].mode.inverted = config->inverted;
 800b898:	4828      	ldr	r0, [pc, #160]	@ (800b93c <digital_in_cfg+0xb8>)
 800b89a:	6800      	ldr	r0, [r0, #0]
 800b89c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b8a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b8a4:	f891 c000 	ldrb.w	ip, [r1]
 800b8a8:	795d      	ldrb	r5, [r3, #5]
 800b8aa:	f36c 0582 	bfi	r5, ip, #2, #1
 800b8ae:	715d      	strb	r5, [r3, #5]
        aux_in[input->id].mode.debounce = config->debounce;
 800b8b0:	7823      	ldrb	r3, [r4, #0]
 800b8b2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b8b6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b8ba:	f891 c001 	ldrb.w	ip, [r1, #1]
 800b8be:	795d      	ldrb	r5, [r3, #5]
 800b8c0:	f36c 15c7 	bfi	r5, ip, #7, #1
 800b8c4:	715d      	strb	r5, [r3, #5]
        aux_in[input->id].mode.pull_mode = config->pull_mode;
 800b8c6:	7823      	ldrb	r3, [r4, #0]
 800b8c8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b8cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b8d0:	f891 c002 	ldrb.w	ip, [r1, #2]
 800b8d4:	791d      	ldrb	r5, [r3, #4]
 800b8d6:	f36c 05c4 	bfi	r5, ip, #3, #2
 800b8da:	711d      	strb	r5, [r3, #4]
        aux_in[input->id].port->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (input->pin << 1));
 800b8dc:	7823      	ldrb	r3, [r4, #0]
 800b8de:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b8e2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b8e6:	68dd      	ldr	r5, [r3, #12]
 800b8e8:	68eb      	ldr	r3, [r5, #12]
 800b8ea:	6926      	ldr	r6, [r4, #16]
 800b8ec:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800b8f0:	f04f 0c03 	mov.w	ip, #3
 800b8f4:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b8f8:	ea23 030c 	bic.w	r3, r3, ip
 800b8fc:	60eb      	str	r3, [r5, #12]
        aux_in[input->id].port->PUPDR |= (config->pull_mode << (input->pin << 1));
 800b8fe:	7823      	ldrb	r3, [r4, #0]
 800b900:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800b904:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b908:	68c5      	ldr	r5, [r0, #12]
 800b90a:	68eb      	ldr	r3, [r5, #12]
 800b90c:	7888      	ldrb	r0, [r1, #2]
 800b90e:	6926      	ldr	r6, [r4, #16]
 800b910:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 800b914:	fa00 f00c 	lsl.w	r0, r0, ip
 800b918:	4303      	orrs	r3, r0
 800b91a:	60eb      	str	r3, [r5, #12]
        if(persistent)
 800b91c:	b93a      	cbnz	r2, 800b92e <digital_in_cfg+0xaa>
    return input->id < digital.in.n_ports;
 800b91e:	7820      	ldrb	r0, [r4, #0]
 800b920:	4b05      	ldr	r3, [pc, #20]	@ (800b938 <digital_in_cfg+0xb4>)
 800b922:	791b      	ldrb	r3, [r3, #4]
}
 800b924:	4298      	cmp	r0, r3
 800b926:	bf2c      	ite	cs
 800b928:	2000      	movcs	r0, #0
 800b92a:	2001      	movcc	r0, #1
 800b92c:	bd70      	pop	{r4, r5, r6, pc}
            ioport_save_input_settings(input, config);
 800b92e:	4620      	mov	r0, r4
 800b930:	f006 fb4e 	bl	8011fd0 <ioport_save_input_settings>
 800b934:	e7f3      	b.n	800b91e <digital_in_cfg+0x9a>
 800b936:	bf00      	nop
 800b938:	20000788 	.word	0x20000788
 800b93c:	20000784 	.word	0x20000784

0800b940 <swap_pins>:

    return ok;
}

static bool swap_pins (io_port_type_t type, io_port_direction_t dir, uint8_t port_a, uint8_t port_b)
{
 800b940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b944:	b08a      	sub	sp, #40	@ 0x28
 800b946:	4686      	mov	lr, r0
    bool ok = port_a == port_b;
 800b948:	429a      	cmp	r2, r3
 800b94a:	bf0c      	ite	eq
 800b94c:	2001      	moveq	r0, #1
 800b94e:	2000      	movne	r0, #0

    if(!ok && type == Port_Digital) {
 800b950:	d005      	beq.n	800b95e <swap_pins+0x1e>
 800b952:	460d      	mov	r5, r1
 800b954:	4694      	mov	ip, r2
 800b956:	461c      	mov	r4, r3
 800b958:	f1be 0f01 	cmp.w	lr, #1
 800b95c:	d002      	beq.n	800b964 <swap_pins+0x24>
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
        }
    }

    return ok;
}
 800b95e:	b00a      	add	sp, #40	@ 0x28
 800b960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  aux_in[port_a].interrupt_callback == NULL &&
 800b964:	b971      	cbnz	r1, 800b984 <swap_pins+0x44>
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 800b966:	4b56      	ldr	r3, [pc, #344]	@ (800bac0 <swap_pins+0x180>)
 800b968:	791b      	ldrb	r3, [r3, #4]
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d90a      	bls.n	800b984 <swap_pins+0x44>
 800b96e:	42a3      	cmp	r3, r4
 800b970:	d908      	bls.n	800b984 <swap_pins+0x44>
                  aux_in[port_a].interrupt_callback == NULL &&
 800b972:	4b54      	ldr	r3, [pc, #336]	@ (800bac4 <swap_pins+0x184>)
 800b974:	681e      	ldr	r6, [r3, #0]
 800b976:	eb02 0ec2 	add.w	lr, r2, r2, lsl #3
 800b97a:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 800b97e:	f8de 2018 	ldr.w	r2, [lr, #24]
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 800b982:	b11a      	cbz	r2, 800b98c <swap_pins+0x4c>
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800b984:	2d01      	cmp	r5, #1
 800b986:	d04b      	beq.n	800ba20 <swap_pins+0xe0>
 800b988:	2000      	movs	r0, #0
 800b98a:	e7e8      	b.n	800b95e <swap_pins+0x1e>
                   aux_in[port_b].interrupt_callback == NULL)) {
 800b98c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800b990:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800b994:	69b3      	ldr	r3, [r6, #24]
                  aux_in[port_a].interrupt_callback == NULL &&
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1f4      	bne.n	800b984 <swap_pins+0x44>
            memcpy(&tmp, &aux_in[port_a], sizeof(input_signal_t));
 800b99a:	4677      	mov	r7, lr
 800b99c:	f10d 0904 	add.w	r9, sp, #4
 800b9a0:	f10e 0a20 	add.w	sl, lr, #32
 800b9a4:	46c8      	mov	r8, r9
 800b9a6:	6838      	ldr	r0, [r7, #0]
 800b9a8:	6879      	ldr	r1, [r7, #4]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46c1      	mov	r9, r8
 800b9b6:	4557      	cmp	r7, sl
 800b9b8:	d1f4      	bne.n	800b9a4 <swap_pins+0x64>
 800b9ba:	6838      	ldr	r0, [r7, #0]
 800b9bc:	f8c8 0000 	str.w	r0, [r8]
            memcpy(&aux_in[port_a], &aux_in[port_b], sizeof(input_signal_t));
 800b9c0:	4633      	mov	r3, r6
 800b9c2:	4672      	mov	r2, lr
 800b9c4:	f106 0920 	add.w	r9, r6, #32
 800b9c8:	f8d3 8000 	ldr.w	r8, [r3]
 800b9cc:	685f      	ldr	r7, [r3, #4]
 800b9ce:	6898      	ldr	r0, [r3, #8]
 800b9d0:	68d9      	ldr	r1, [r3, #12]
 800b9d2:	f8c2 8000 	str.w	r8, [r2]
 800b9d6:	6057      	str	r7, [r2, #4]
 800b9d8:	6090      	str	r0, [r2, #8]
 800b9da:	60d1      	str	r1, [r2, #12]
 800b9dc:	3310      	adds	r3, #16
 800b9de:	3210      	adds	r2, #16
 800b9e0:	454b      	cmp	r3, r9
 800b9e2:	d1f1      	bne.n	800b9c8 <swap_pins+0x88>
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6013      	str	r3, [r2, #0]
            aux_in[port_a].description = tmp.description;
 800b9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ea:	f8ce 3020 	str.w	r3, [lr, #32]
            tmp.description = aux_in[port_b].description;
 800b9ee:	6a33      	ldr	r3, [r6, #32]
 800b9f0:	9309      	str	r3, [sp, #36]	@ 0x24
            memcpy(&aux_in[port_b], &tmp, sizeof(input_signal_t));
 800b9f2:	af01      	add	r7, sp, #4
 800b9f4:	46b6      	mov	lr, r6
 800b9f6:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800b9fa:	463e      	mov	r6, r7
 800b9fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b9fe:	f8ce 0000 	str.w	r0, [lr]
 800ba02:	f8ce 1004 	str.w	r1, [lr, #4]
 800ba06:	f8ce 2008 	str.w	r2, [lr, #8]
 800ba0a:	f8ce 300c 	str.w	r3, [lr, #12]
 800ba0e:	4637      	mov	r7, r6
 800ba10:	f10e 0e10 	add.w	lr, lr, #16
 800ba14:	4546      	cmp	r6, r8
 800ba16:	d1f0      	bne.n	800b9fa <swap_pins+0xba>
 800ba18:	6830      	ldr	r0, [r6, #0]
 800ba1a:	f8ce 0000 	str.w	r0, [lr]
 800ba1e:	e7b1      	b.n	800b984 <swap_pins+0x44>
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800ba20:	4b27      	ldr	r3, [pc, #156]	@ (800bac0 <swap_pins+0x180>)
 800ba22:	7b1b      	ldrb	r3, [r3, #12]
 800ba24:	4563      	cmp	r3, ip
 800ba26:	d949      	bls.n	800babc <swap_pins+0x17c>
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	d801      	bhi.n	800ba30 <swap_pins+0xf0>
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	e796      	b.n	800b95e <swap_pins+0x1e>
            memcpy(&tmp, &aux_out[port_a], sizeof(output_signal_t));
 800ba30:	4b25      	ldr	r3, [pc, #148]	@ (800bac8 <swap_pins+0x188>)
 800ba32:	681e      	ldr	r6, [r3, #0]
 800ba34:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 800ba38:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 800ba3c:	f10d 0e04 	add.w	lr, sp, #4
 800ba40:	f856 002c 	ldr.w	r0, [r6, ip, lsl #2]
 800ba44:	6869      	ldr	r1, [r5, #4]
 800ba46:	68aa      	ldr	r2, [r5, #8]
 800ba48:	68eb      	ldr	r3, [r5, #12]
 800ba4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ba4e:	6928      	ldr	r0, [r5, #16]
 800ba50:	6969      	ldr	r1, [r5, #20]
 800ba52:	69aa      	ldr	r2, [r5, #24]
 800ba54:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
            memcpy(&aux_out[port_a], &aux_out[port_b], sizeof(output_signal_t));
 800ba58:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800ba5c:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 800ba60:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800ba64:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ba68:	f8de 3008 	ldr.w	r3, [lr, #8]
 800ba6c:	f8de 000c 	ldr.w	r0, [lr, #12]
 800ba70:	f846 102c 	str.w	r1, [r6, ip, lsl #2]
 800ba74:	606a      	str	r2, [r5, #4]
 800ba76:	60ab      	str	r3, [r5, #8]
 800ba78:	60e8      	str	r0, [r5, #12]
 800ba7a:	f8de 1010 	ldr.w	r1, [lr, #16]
 800ba7e:	f8de 2014 	ldr.w	r2, [lr, #20]
 800ba82:	f8de 3018 	ldr.w	r3, [lr, #24]
 800ba86:	6129      	str	r1, [r5, #16]
 800ba88:	616a      	str	r2, [r5, #20]
 800ba8a:	61ab      	str	r3, [r5, #24]
            aux_out[port_a].description = tmp.description;
 800ba8c:	9b06      	ldr	r3, [sp, #24]
 800ba8e:	616b      	str	r3, [r5, #20]
            tmp.description = aux_out[port_b].description;
 800ba90:	f8de 3014 	ldr.w	r3, [lr, #20]
 800ba94:	9306      	str	r3, [sp, #24]
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
 800ba96:	ad01      	add	r5, sp, #4
 800ba98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba9a:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 800ba9e:	f8ce 1004 	str.w	r1, [lr, #4]
 800baa2:	f8ce 2008 	str.w	r2, [lr, #8]
 800baa6:	f8ce 300c 	str.w	r3, [lr, #12]
 800baaa:	cd07      	ldmia	r5!, {r0, r1, r2}
 800baac:	f8ce 0010 	str.w	r0, [lr, #16]
 800bab0:	f8ce 1014 	str.w	r1, [lr, #20]
 800bab4:	f8ce 2018 	str.w	r2, [lr, #24]
        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 800bab8:	2001      	movs	r0, #1
 800baba:	e750      	b.n	800b95e <swap_pins+0x1e>
 800babc:	2000      	movs	r0, #0
 800babe:	e74e      	b.n	800b95e <swap_pins+0x1e>
 800bac0:	20000788 	.word	0x20000788
 800bac4:	20000784 	.word	0x20000784
 800bac8:	20000780 	.word	0x20000780

0800bacc <claim>:
    if(type == Port_Digital) {
 800bacc:	2801      	cmp	r0, #1
 800bace:	d001      	beq.n	800bad4 <claim+0x8>
    bool ok = false;
 800bad0:	2000      	movs	r0, #0
}
 800bad2:	4770      	bx	lr
{
 800bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	4615      	mov	r5, r2
 800bada:	461c      	mov	r4, r3
        if(dir == Port_Input) {
 800badc:	2900      	cmp	r1, #0
 800bade:	d166      	bne.n	800bbae <claim+0xe2>
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bae0:	4b62      	ldr	r3, [pc, #392]	@ (800bc6c <claim+0x1a0>)
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 80b8 	beq.w	800bc5a <claim+0x18e>
 800baea:	7813      	ldrb	r3, [r2, #0]
 800baec:	4a5f      	ldr	r2, [pc, #380]	@ (800bc6c <claim+0x1a0>)
 800baee:	7912      	ldrb	r2, [r2, #4]
 800baf0:	4293      	cmp	r3, r2
 800baf2:	f080 80b4 	bcs.w	800bc5e <claim+0x192>
 800baf6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bafa:	4a5d      	ldr	r2, [pc, #372]	@ (800bc70 <claim+0x1a4>)
 800bafc:	6812      	ldr	r2, [r2, #0]
 800bafe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb02:	795b      	ldrb	r3, [r3, #5]
 800bb04:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bb08:	d001      	beq.n	800bb0e <claim+0x42>
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	e0a8      	b.n	800bc60 <claim+0x194>
                hal.port.num_digital_in--;
 800bb0e:	4a59      	ldr	r2, [pc, #356]	@ (800bc74 <claim+0x1a8>)
 800bb10:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 800bb14:	3b01      	subs	r3, #1
 800bb16:	f882 3114 	strb.w	r3, [r2, #276]	@ 0x114
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 800bb1a:	7829      	ldrb	r1, [r5, #0]
 800bb1c:	4856      	ldr	r0, [pc, #344]	@ (800bc78 <claim+0x1ac>)
 800bb1e:	f006 f82f 	bl	8011b80 <ioports_map_reverse>
 800bb22:	4606      	mov	r6, r0
 800bb24:	e019      	b.n	800bb5a <claim+0x8e>
                    digital.in.map[i] = digital.in.map[i + 1];
 800bb26:	4851      	ldr	r0, [pc, #324]	@ (800bc6c <claim+0x1a0>)
 800bb28:	6883      	ldr	r3, [r0, #8]
 800bb2a:	199a      	adds	r2, r3, r6
 800bb2c:	7852      	ldrb	r2, [r2, #1]
 800bb2e:	559a      	strb	r2, [r3, r6]
                    aux_in[digital.in.map[i]].user_port = i;
 800bb30:	4b4f      	ldr	r3, [pc, #316]	@ (800bc70 <claim+0x1a4>)
 800bb32:	681f      	ldr	r7, [r3, #0]
 800bb34:	6881      	ldr	r1, [r0, #8]
 800bb36:	5d8b      	ldrb	r3, [r1, r6]
 800bb38:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb3c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bb40:	751e      	strb	r6, [r3, #20]
                    aux_in[digital.in.map[i]].description = iports_get_pnum(digital, i);
 800bb42:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800bb46:	5d8b      	ldrb	r3, [r1, r6]
 800bb48:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb4c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800bb50:	4631      	mov	r1, r6
 800bb52:	47c0      	blx	r8
 800bb54:	6238      	str	r0, [r7, #32]
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 800bb56:	3601      	adds	r6, #1
 800bb58:	b2f6      	uxtb	r6, r6
 800bb5a:	4b46      	ldr	r3, [pc, #280]	@ (800bc74 <claim+0x1a8>)
 800bb5c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800bb60:	42b3      	cmp	r3, r6
 800bb62:	d8e0      	bhi.n	800bb26 <claim+0x5a>
                aux_in[*port].mode.claimed = On;
 800bb64:	4b42      	ldr	r3, [pc, #264]	@ (800bc70 <claim+0x1a4>)
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	782b      	ldrb	r3, [r5, #0]
 800bb6a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb72:	7959      	ldrb	r1, [r3, #5]
 800bb74:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800bb78:	7159      	strb	r1, [r3, #5]
                aux_in[*port].user_port = hal.port.num_digital_in;
 800bb7a:	782b      	ldrb	r3, [r5, #0]
 800bb7c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb84:	493b      	ldr	r1, [pc, #236]	@ (800bc74 <claim+0x1a8>)
 800bb86:	f891 0114 	ldrb.w	r0, [r1, #276]	@ 0x114
 800bb8a:	7518      	strb	r0, [r3, #20]
                aux_in[*port].description = description;
 800bb8c:	782b      	ldrb	r3, [r5, #0]
 800bb8e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800bb92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bb96:	6214      	str	r4, [r2, #32]
                digital.in.map[hal.port.num_digital_in] = *port;
 800bb98:	4b34      	ldr	r3, [pc, #208]	@ (800bc6c <claim+0x1a0>)
 800bb9a:	689a      	ldr	r2, [r3, #8]
 800bb9c:	f891 3114 	ldrb.w	r3, [r1, #276]	@ 0x114
 800bba0:	7828      	ldrb	r0, [r5, #0]
 800bba2:	54d0      	strb	r0, [r2, r3]
                *port = hal.port.num_digital_in;
 800bba4:	f891 3114 	ldrb.w	r3, [r1, #276]	@ 0x114
 800bba8:	702b      	strb	r3, [r5, #0]
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bbaa:	2001      	movs	r0, #1
 800bbac:	e058      	b.n	800bc60 <claim+0x194>
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bbae:	4b2f      	ldr	r3, [pc, #188]	@ (800bc6c <claim+0x1a0>)
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d056      	beq.n	800bc64 <claim+0x198>
 800bbb6:	7813      	ldrb	r3, [r2, #0]
 800bbb8:	4a2c      	ldr	r2, [pc, #176]	@ (800bc6c <claim+0x1a0>)
 800bbba:	7b12      	ldrb	r2, [r2, #12]
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d253      	bcs.n	800bc68 <claim+0x19c>
 800bbc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bbc4:	4a2d      	ldr	r2, [pc, #180]	@ (800bc7c <claim+0x1b0>)
 800bbc6:	6812      	ldr	r2, [r2, #0]
 800bbc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbcc:	7c5b      	ldrb	r3, [r3, #17]
 800bbce:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bbd2:	d001      	beq.n	800bbd8 <claim+0x10c>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	e043      	b.n	800bc60 <claim+0x194>
            hal.port.num_digital_out--;
 800bbd8:	4a26      	ldr	r2, [pc, #152]	@ (800bc74 <claim+0x1a8>)
 800bbda:	f892 3115 	ldrb.w	r3, [r2, #277]	@ 0x115
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 800bbe4:	7829      	ldrb	r1, [r5, #0]
 800bbe6:	4826      	ldr	r0, [pc, #152]	@ (800bc80 <claim+0x1b4>)
 800bbe8:	f005 ffca 	bl	8011b80 <ioports_map_reverse>
 800bbec:	4606      	mov	r6, r0
 800bbee:	e012      	b.n	800bc16 <claim+0x14a>
                digital.out.map[i] = digital.out.map[i + 1];
 800bbf0:	481e      	ldr	r0, [pc, #120]	@ (800bc6c <claim+0x1a0>)
 800bbf2:	6903      	ldr	r3, [r0, #16]
 800bbf4:	199a      	adds	r2, r3, r6
 800bbf6:	7852      	ldrb	r2, [r2, #1]
 800bbf8:	559a      	strb	r2, [r3, r6]
                aux_out[digital.out.map[i]].description = iports_get_pnum(digital, i);
 800bbfa:	6942      	ldr	r2, [r0, #20]
 800bbfc:	6903      	ldr	r3, [r0, #16]
 800bbfe:	5d9b      	ldrb	r3, [r3, r6]
 800bc00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bc04:	491d      	ldr	r1, [pc, #116]	@ (800bc7c <claim+0x1b0>)
 800bc06:	680f      	ldr	r7, [r1, #0]
 800bc08:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4790      	blx	r2
 800bc10:	6178      	str	r0, [r7, #20]
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 800bc12:	3601      	adds	r6, #1
 800bc14:	b2f6      	uxtb	r6, r6
 800bc16:	4b17      	ldr	r3, [pc, #92]	@ (800bc74 <claim+0x1a8>)
 800bc18:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800bc1c:	42b3      	cmp	r3, r6
 800bc1e:	d8e7      	bhi.n	800bbf0 <claim+0x124>
            aux_out[*port].mode.claimed = On;
 800bc20:	4b16      	ldr	r3, [pc, #88]	@ (800bc7c <claim+0x1b0>)
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	782b      	ldrb	r3, [r5, #0]
 800bc26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bc2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc2e:	7c59      	ldrb	r1, [r3, #17]
 800bc30:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800bc34:	7459      	strb	r1, [r3, #17]
            aux_out[*port].description = description;
 800bc36:	782b      	ldrb	r3, [r5, #0]
 800bc38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800bc3c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bc40:	6154      	str	r4, [r2, #20]
            digital.out.map[hal.port.num_digital_out] = *port;
 800bc42:	4b0a      	ldr	r3, [pc, #40]	@ (800bc6c <claim+0x1a0>)
 800bc44:	6919      	ldr	r1, [r3, #16]
 800bc46:	4b0b      	ldr	r3, [pc, #44]	@ (800bc74 <claim+0x1a8>)
 800bc48:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 800bc4c:	7828      	ldrb	r0, [r5, #0]
 800bc4e:	5488      	strb	r0, [r1, r2]
            *port = hal.port.num_digital_out;
 800bc50:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800bc54:	702b      	strb	r3, [r5, #0]
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bc56:	2001      	movs	r0, #1
 800bc58:	e002      	b.n	800bc60 <claim+0x194>
            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].mode.claimed)) {
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	e000      	b.n	800bc60 <claim+0x194>
 800bc5e:	2000      	movs	r0, #0
}
 800bc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800bc64:	2000      	movs	r0, #0
 800bc66:	e7fb      	b.n	800bc60 <claim+0x194>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e7f9      	b.n	800bc60 <claim+0x194>
 800bc6c:	20000788 	.word	0x20000788
 800bc70:	20000784 	.word	0x20000784
 800bc74:	200011c0 	.word	0x200011c0
 800bc78:	2000078c 	.word	0x2000078c
 800bc7c:	20000780 	.word	0x20000780
 800bc80:	20000794 	.word	0x20000794

0800bc84 <register_interrupt_handler>:
{
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	460c      	mov	r4, r1
    port = ioports_map(digital.in, port);
 800bc88:	4b1f      	ldr	r3, [pc, #124]	@ (800bd08 <register_interrupt_handler+0x84>)
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	b103      	cbz	r3, 800bc90 <register_interrupt_handler+0xc>
 800bc8e:	5c18      	ldrb	r0, [r3, r0]
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bc90:	4b1d      	ldr	r3, [pc, #116]	@ (800bd08 <register_interrupt_handler+0x84>)
 800bc92:	791b      	ldrb	r3, [r3, #4]
 800bc94:	4283      	cmp	r3, r0
 800bc96:	d932      	bls.n	800bcfe <register_interrupt_handler+0x7a>
 800bc98:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800bc9c:	4b1b      	ldr	r3, [pc, #108]	@ (800bd0c <register_interrupt_handler+0x88>)
 800bc9e:	681d      	ldr	r5, [r3, #0]
 800bca0:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800bca4:	886b      	ldrh	r3, [r5, #2]
 800bca6:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 800bcaa:	b35b      	cbz	r3, 800bd04 <register_interrupt_handler+0x80>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bcac:	886b      	ldrh	r3, [r5, #2]
 800bcae:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800bcb2:	ea34 0303 	bics.w	r3, r4, r3
 800bcb6:	d014      	beq.n	800bce2 <register_interrupt_handler+0x5e>
 800bcb8:	2600      	movs	r6, #0
        if(irq_mode == IRQ_Mode_None || !ok) {
 800bcba:	b104      	cbz	r4, 800bcbe <register_interrupt_handler+0x3a>
 800bcbc:	bb06      	cbnz	r6, 800bd00 <register_interrupt_handler+0x7c>
            hal.irq_disable();
 800bcbe:	4c14      	ldr	r4, [pc, #80]	@ (800bd10 <register_interrupt_handler+0x8c>)
 800bcc0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800bcc2:	4798      	blx	r3
            EXTI->IMR &= ~input->bit;     // Disable pin interrupt
 800bcc4:	4a13      	ldr	r2, [pc, #76]	@ (800bd14 <register_interrupt_handler+0x90>)
 800bcc6:	6813      	ldr	r3, [r2, #0]
 800bcc8:	68a9      	ldr	r1, [r5, #8]
 800bcca:	ea23 0301 	bic.w	r3, r3, r1
 800bcce:	6013      	str	r3, [r2, #0]
            input->mode.irq_mode = IRQ_Mode_None;
 800bcd0:	88ab      	ldrh	r3, [r5, #4]
 800bcd2:	f36f 1349 	bfc	r3, #5, #5
 800bcd6:	80ab      	strh	r3, [r5, #4]
            input->interrupt_callback = NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	61ab      	str	r3, [r5, #24]
            hal.irq_enable();
 800bcdc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800bcde:	4798      	blx	r3
 800bce0:	e00e      	b.n	800bd00 <register_interrupt_handler+0x7c>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bce2:	b152      	cbz	r2, 800bcfa <register_interrupt_handler+0x76>
            input->mode.irq_mode = irq_mode;
 800bce4:	88ab      	ldrh	r3, [r5, #4]
 800bce6:	f364 1349 	bfi	r3, r4, #5, #5
 800bcea:	80ab      	strh	r3, [r5, #4]
            input->interrupt_callback = interrupt_callback;
 800bcec:	61aa      	str	r2, [r5, #24]
            gpio_irq_enable(input, irq_mode);
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f7ff f899 	bl	800ae28 <gpio_irq_enable>
        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800bcf6:	2601      	movs	r6, #1
 800bcf8:	e7df      	b.n	800bcba <register_interrupt_handler+0x36>
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	e7dd      	b.n	800bcba <register_interrupt_handler+0x36>
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bcfe:	2600      	movs	r6, #0
}
 800bd00:	4630      	mov	r0, r6
 800bd02:	bd70      	pop	{r4, r5, r6, pc}
    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 800bd04:	2600      	movs	r6, #0
 800bd06:	e7fb      	b.n	800bd00 <register_interrupt_handler+0x7c>
 800bd08:	20000788 	.word	0x20000788
 800bd0c:	20000784 	.word	0x20000784
 800bd10:	200011c0 	.word	0x200011c0
 800bd14:	40013c00 	.word	0x40013c00

0800bd18 <wait_on_input>:
{
 800bd18:	b570      	push	{r4, r5, r6, lr}
    if(type == Port_Digital && port < digital.in.n_ports) {
 800bd1a:	2801      	cmp	r0, #1
 800bd1c:	f040 809a 	bne.w	800be54 <wait_on_input+0x13c>
 800bd20:	4616      	mov	r6, r2
 800bd22:	4b54      	ldr	r3, [pc, #336]	@ (800be74 <wait_on_input+0x15c>)
 800bd24:	791b      	ldrb	r3, [r3, #4]
 800bd26:	428b      	cmp	r3, r1
 800bd28:	f240 8097 	bls.w	800be5a <wait_on_input+0x142>
        port = ioports_map(digital.in, port);
 800bd2c:	4b51      	ldr	r3, [pc, #324]	@ (800be74 <wait_on_input+0x15c>)
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	b103      	cbz	r3, 800bd34 <wait_on_input+0x1c>
 800bd32:	5c59      	ldrb	r1, [r3, r1]
        value = get_input(&aux_in[port], wait_mode, timeout);
 800bd34:	4b50      	ldr	r3, [pc, #320]	@ (800be78 <wait_on_input+0x160>)
 800bd36:	681d      	ldr	r5, [r3, #0]
 800bd38:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800bd3c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    if(wait_mode == WaitMode_Immediate)
 800bd40:	2e00      	cmp	r6, #0
 800bd42:	d032      	beq.n	800bdaa <wait_on_input+0x92>
    uint_fast16_t delay = (uint_fast16_t)ceilf((1000.0f / 50.0f) * timeout) + 1;
 800bd44:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 800bd48:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bd4c:	f01b fade 	bl	802730c <ceilf>
 800bd50:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800bd54:	ee10 4a10 	vmov	r4, s0
 800bd58:	3401      	adds	r4, #1
    if(wait_mode == WaitMode_Rise || wait_mode == WaitMode_Fall) {
 800bd5a:	1e73      	subs	r3, r6, #1
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d932      	bls.n	800bdc8 <wait_on_input+0xb0>
        bool wait_for = wait_mode != WaitMode_Low;
 800bd62:	3e04      	subs	r6, #4
 800bd64:	bf18      	it	ne
 800bd66:	2601      	movne	r6, #1
            if((DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted) == wait_for) {
 800bd68:	68eb      	ldr	r3, [r5, #12]
 800bd6a:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800bd6e:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800bd72:	015b      	lsls	r3, r3, #5
 800bd74:	79a8      	ldrb	r0, [r5, #6]
 800bd76:	f813 1020 	ldrb.w	r1, [r3, r0, lsl #2]
 800bd7a:	796a      	ldrb	r2, [r5, #5]
 800bd7c:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800bd80:	4051      	eors	r1, r2
 800bd82:	42b1      	cmp	r1, r6
 800bd84:	d062      	beq.n	800be4c <wait_on_input+0x134>
            if(delay) {
 800bd86:	2c00      	cmp	r4, #0
 800bd88:	d06d      	beq.n	800be66 <wait_on_input+0x14e>
                protocol_execute_realtime();
 800bd8a:	f00b f9f5 	bl	8017178 <protocol_execute_realtime>
                hal.delay_ms(50, NULL);
 800bd8e:	4b3b      	ldr	r3, [pc, #236]	@ (800be7c <wait_on_input+0x164>)
 800bd90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd92:	2100      	movs	r1, #0
 800bd94:	2032      	movs	r0, #50	@ 0x32
 800bd96:	4798      	blx	r3
        } while(--delay && !sys.abort);
 800bd98:	3c01      	subs	r4, #1
 800bd9a:	d067      	beq.n	800be6c <wait_on_input+0x154>
 800bd9c:	4b38      	ldr	r3, [pc, #224]	@ (800be80 <wait_on_input+0x168>)
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0e1      	beq.n	800bd68 <wait_on_input+0x50>
    int32_t value = -1;
 800bda4:	f04f 34ff 	mov.w	r4, #4294967295
 800bda8:	e00c      	b.n	800bdc4 <wait_on_input+0xac>
        return DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800bdaa:	68eb      	ldr	r3, [r5, #12]
 800bdac:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800bdb0:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800bdb4:	015b      	lsls	r3, r3, #5
 800bdb6:	79aa      	ldrb	r2, [r5, #6]
 800bdb8:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800bdbc:	796b      	ldrb	r3, [r5, #5]
 800bdbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bdc2:	405c      	eors	r4, r3
}
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}
        pin_irq_mode_t irq_mode = wait_mode == WaitMode_Rise ? IRQ_Mode_Rising : IRQ_Mode_Falling;
 800bdc8:	2e01      	cmp	r6, #1
 800bdca:	d000      	beq.n	800bdce <wait_on_input+0xb6>
 800bdcc:	2602      	movs	r6, #2
        if(input->cap.irq_mode & irq_mode) {
 800bdce:	886b      	ldrh	r3, [r5, #2]
 800bdd0:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800bdd4:	421e      	tst	r6, r3
 800bdd6:	d043      	beq.n	800be60 <wait_on_input+0x148>
            event_bits &= ~input->bit;
 800bdd8:	68a9      	ldr	r1, [r5, #8]
 800bdda:	4a2a      	ldr	r2, [pc, #168]	@ (800be84 <wait_on_input+0x16c>)
 800bddc:	6813      	ldr	r3, [r2, #0]
 800bdde:	ea23 0301 	bic.w	r3, r3, r1
 800bde2:	6013      	str	r3, [r2, #0]
            gpio_irq_enable(input, irq_mode);
 800bde4:	4631      	mov	r1, r6
 800bde6:	4628      	mov	r0, r5
 800bde8:	f7ff f81e 	bl	800ae28 <gpio_irq_enable>
                if(event_bits & input->bit) {
 800bdec:	68aa      	ldr	r2, [r5, #8]
 800bdee:	4b25      	ldr	r3, [pc, #148]	@ (800be84 <wait_on_input+0x16c>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	421a      	tst	r2, r3
 800bdf4:	d110      	bne.n	800be18 <wait_on_input+0x100>
                if(delay) {
 800bdf6:	b31c      	cbz	r4, 800be40 <wait_on_input+0x128>
                    protocol_execute_realtime();
 800bdf8:	f00b f9be 	bl	8017178 <protocol_execute_realtime>
                    hal.delay_ms(50, NULL);
 800bdfc:	4b1f      	ldr	r3, [pc, #124]	@ (800be7c <wait_on_input+0x164>)
 800bdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be00:	2100      	movs	r1, #0
 800be02:	2032      	movs	r0, #50	@ 0x32
 800be04:	4798      	blx	r3
            } while(--delay && !sys.abort);
 800be06:	3c01      	subs	r4, #1
 800be08:	d01d      	beq.n	800be46 <wait_on_input+0x12e>
 800be0a:	4b1d      	ldr	r3, [pc, #116]	@ (800be80 <wait_on_input+0x168>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d0ec      	beq.n	800bdec <wait_on_input+0xd4>
    int32_t value = -1;
 800be12:	f04f 34ff 	mov.w	r4, #4294967295
 800be16:	e00c      	b.n	800be32 <wait_on_input+0x11a>
                    value = DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800be18:	68eb      	ldr	r3, [r5, #12]
 800be1a:	f103 4342 	add.w	r3, r3, #3254779904	@ 0xc2000000
 800be1e:	f103 1310 	add.w	r3, r3, #1048592	@ 0x100010
 800be22:	015b      	lsls	r3, r3, #5
 800be24:	79aa      	ldrb	r2, [r5, #6]
 800be26:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 800be2a:	796b      	ldrb	r3, [r5, #5]
 800be2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800be30:	405c      	eors	r4, r3
            gpio_irq_enable(input, input->mode.irq_mode);    // Restore pin interrupt status
 800be32:	88a9      	ldrh	r1, [r5, #4]
 800be34:	f3c1 1144 	ubfx	r1, r1, #5, #5
 800be38:	4628      	mov	r0, r5
 800be3a:	f7fe fff5 	bl	800ae28 <gpio_irq_enable>
 800be3e:	e7c1      	b.n	800bdc4 <wait_on_input+0xac>
    int32_t value = -1;
 800be40:	f04f 34ff 	mov.w	r4, #4294967295
 800be44:	e7f5      	b.n	800be32 <wait_on_input+0x11a>
 800be46:	f04f 34ff 	mov.w	r4, #4294967295
 800be4a:	e7f2      	b.n	800be32 <wait_on_input+0x11a>
                value = DIGITAL_IN(input->port, input->pin) ^ input->mode.inverted;
 800be4c:	f813 4020 	ldrb.w	r4, [r3, r0, lsl #2]
 800be50:	4054      	eors	r4, r2
                break;
 800be52:	e7b7      	b.n	800bdc4 <wait_on_input+0xac>
    int32_t value = -1;
 800be54:	f04f 34ff 	mov.w	r4, #4294967295
 800be58:	e7b4      	b.n	800bdc4 <wait_on_input+0xac>
 800be5a:	f04f 34ff 	mov.w	r4, #4294967295
 800be5e:	e7b1      	b.n	800bdc4 <wait_on_input+0xac>
    int32_t value = -1;
 800be60:	f04f 34ff 	mov.w	r4, #4294967295
 800be64:	e7ae      	b.n	800bdc4 <wait_on_input+0xac>
 800be66:	f04f 34ff 	mov.w	r4, #4294967295
 800be6a:	e7ab      	b.n	800bdc4 <wait_on_input+0xac>
 800be6c:	f04f 34ff 	mov.w	r4, #4294967295
    return value;
 800be70:	e7a8      	b.n	800bdc4 <wait_on_input+0xac>
 800be72:	bf00      	nop
 800be74:	20000788 	.word	0x20000788
 800be78:	20000784 	.word	0x20000784
 800be7c:	200011c0 	.word	0x200011c0
 800be80:	200014a0 	.word	0x200014a0
 800be84:	2000077c 	.word	0x2000077c

0800be88 <ioports_init>:

void ioports_init (pin_group_pins_t *aux_inputs, pin_group_pins_t *aux_outputs)
{
 800be88:	b508      	push	{r3, lr}
    aux_in = aux_inputs->pins.inputs;
 800be8a:	6842      	ldr	r2, [r0, #4]
 800be8c:	4b1a      	ldr	r3, [pc, #104]	@ (800bef8 <ioports_init+0x70>)
 800be8e:	601a      	str	r2, [r3, #0]
    aux_out = aux_outputs->pins.outputs;
 800be90:	684a      	ldr	r2, [r1, #4]
 800be92:	4b1a      	ldr	r3, [pc, #104]	@ (800befc <ioports_init+0x74>)
 800be94:	601a      	str	r2, [r3, #0]

    hal.port.set_pin_description = set_pin_description;
 800be96:	4b1a      	ldr	r3, [pc, #104]	@ (800bf00 <ioports_init+0x78>)
 800be98:	4a1a      	ldr	r2, [pc, #104]	@ (800bf04 <ioports_init+0x7c>)
 800be9a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if(ioports_add(&digital, Port_Digital, aux_inputs->n_pins, aux_outputs->n_pins))  {
 800be9e:	780b      	ldrb	r3, [r1, #0]
 800bea0:	7802      	ldrb	r2, [r0, #0]
 800bea2:	2101      	movs	r1, #1
 800bea4:	4818      	ldr	r0, [pc, #96]	@ (800bf08 <ioports_init+0x80>)
 800bea6:	f005 fd4f 	bl	8011948 <ioports_add>
 800beaa:	b1f8      	cbz	r0, 800beec <ioports_init+0x64>

        if(digital.in.n_ports) {
 800beac:	4b16      	ldr	r3, [pc, #88]	@ (800bf08 <ioports_init+0x80>)
 800beae:	791b      	ldrb	r3, [r3, #4]
 800beb0:	b133      	cbz	r3, 800bec0 <ioports_init+0x38>
            hal.port.wait_on_input = wait_on_input;
 800beb2:	4b13      	ldr	r3, [pc, #76]	@ (800bf00 <ioports_init+0x78>)
 800beb4:	4a15      	ldr	r2, [pc, #84]	@ (800bf0c <ioports_init+0x84>)
 800beb6:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            hal.port.register_interrupt_handler = register_interrupt_handler;
 800beba:	4a15      	ldr	r2, [pc, #84]	@ (800bf10 <ioports_init+0x88>)
 800bebc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        }

        if(digital.out.n_ports)
 800bec0:	4b11      	ldr	r3, [pc, #68]	@ (800bf08 <ioports_init+0x80>)
 800bec2:	7b1b      	ldrb	r3, [r3, #12]
 800bec4:	b11b      	cbz	r3, 800bece <ioports_init+0x46>
            hal.port.digital_out = digital_out;
 800bec6:	4b0e      	ldr	r3, [pc, #56]	@ (800bf00 <ioports_init+0x78>)
 800bec8:	4a12      	ldr	r2, [pc, #72]	@ (800bf14 <ioports_init+0x8c>)
 800beca:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

        hal.port.claim = claim;
 800bece:	4b0c      	ldr	r3, [pc, #48]	@ (800bf00 <ioports_init+0x78>)
 800bed0:	4a11      	ldr	r2, [pc, #68]	@ (800bf18 <ioports_init+0x90>)
 800bed2:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        hal.port.swap_pins = swap_pins;
 800bed6:	4a11      	ldr	r2, [pc, #68]	@ (800bf1c <ioports_init+0x94>)
 800bed8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        hal.port.get_pin_info = get_pin_info;
 800bedc:	4a10      	ldr	r2, [pc, #64]	@ (800bf20 <ioports_init+0x98>)
 800bede:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

        ioports_add_settings(NULL, NULL);
 800bee2:	2100      	movs	r1, #0
 800bee4:	4608      	mov	r0, r1
 800bee6:	f006 f9d1 	bl	801228c <ioports_add_settings>

    } else
        hal.port.set_pin_description = NULL;
}
 800beea:	bd08      	pop	{r3, pc}
        hal.port.set_pin_description = NULL;
 800beec:	4b04      	ldr	r3, [pc, #16]	@ (800bf00 <ioports_init+0x78>)
 800beee:	2200      	movs	r2, #0
 800bef0:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
}
 800bef4:	e7f9      	b.n	800beea <ioports_init+0x62>
 800bef6:	bf00      	nop
 800bef8:	20000784 	.word	0x20000784
 800befc:	20000780 	.word	0x20000780
 800bf00:	200011c0 	.word	0x200011c0
 800bf04:	0800b735 	.word	0x0800b735
 800bf08:	20000788 	.word	0x20000788
 800bf0c:	0800bd19 	.word	0x0800bd19
 800bf10:	0800bc85 	.word	0x0800bc85
 800bf14:	0800b559 	.word	0x0800b559
 800bf18:	0800bacd 	.word	0x0800bacd
 800bf1c:	0800b941 	.word	0x0800b941
 800bf20:	0800b62d 	.word	0x0800b62d

0800bf24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bf24:	b088      	sub	sp, #32
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf26:	2200      	movs	r2, #0
 800bf28:	9200      	str	r2, [sp, #0]
 800bf2a:	4b29      	ldr	r3, [pc, #164]	@ (800bfd0 <MX_GPIO_Init+0xac>)
 800bf2c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf2e:	f041 0101 	orr.w	r1, r1, #1
 800bf32:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf36:	f001 0101 	and.w	r1, r1, #1
 800bf3a:	9100      	str	r1, [sp, #0]
 800bf3c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf3e:	9201      	str	r2, [sp, #4]
 800bf40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf42:	f041 0102 	orr.w	r1, r1, #2
 800bf46:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf4a:	f001 0102 	and.w	r1, r1, #2
 800bf4e:	9101      	str	r1, [sp, #4]
 800bf50:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf52:	9202      	str	r2, [sp, #8]
 800bf54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf56:	f041 0104 	orr.w	r1, r1, #4
 800bf5a:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf5e:	f001 0104 	and.w	r1, r1, #4
 800bf62:	9102      	str	r1, [sp, #8]
 800bf64:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bf66:	9203      	str	r2, [sp, #12]
 800bf68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf6a:	f041 0108 	orr.w	r1, r1, #8
 800bf6e:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf72:	f001 0108 	and.w	r1, r1, #8
 800bf76:	9103      	str	r1, [sp, #12]
 800bf78:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800bf7a:	9204      	str	r2, [sp, #16]
 800bf7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf7e:	f041 0110 	orr.w	r1, r1, #16
 800bf82:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf86:	f001 0110 	and.w	r1, r1, #16
 800bf8a:	9104      	str	r1, [sp, #16]
 800bf8c:	9904      	ldr	r1, [sp, #16]
#ifdef GPIOF
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800bf8e:	9205      	str	r2, [sp, #20]
 800bf90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf92:	f041 0120 	orr.w	r1, r1, #32
 800bf96:	6319      	str	r1, [r3, #48]	@ 0x30
 800bf98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bf9a:	f001 0120 	and.w	r1, r1, #32
 800bf9e:	9105      	str	r1, [sp, #20]
 800bfa0:	9905      	ldr	r1, [sp, #20]
#endif
#ifdef GPIOG
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bfa2:	9206      	str	r2, [sp, #24]
 800bfa4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bfa6:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800bfaa:	6319      	str	r1, [r3, #48]	@ 0x30
 800bfac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bfae:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 800bfb2:	9106      	str	r1, [sp, #24]
 800bfb4:	9906      	ldr	r1, [sp, #24]
#endif
#ifdef GPIOH
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bfb6:	9207      	str	r2, [sp, #28]
 800bfb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bfbe:	631a      	str	r2, [r3, #48]	@ 0x30
 800bfc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfc6:	9307      	str	r3, [sp, #28]
 800bfc8:	9b07      	ldr	r3, [sp, #28]
#endif
}
 800bfca:	b008      	add	sp, #32
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	40023800 	.word	0x40023800

0800bfd4 <SystemClock_Config>:
{
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	b094      	sub	sp, #80	@ 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 800bfd8:	2100      	movs	r1, #0
 800bfda:	9101      	str	r1, [sp, #4]
 800bfdc:	4b1e      	ldr	r3, [pc, #120]	@ (800c058 <SystemClock_Config+0x84>)
 800bfde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bfe0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800bfe4:	641a      	str	r2, [r3, #64]	@ 0x40
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfec:	9301      	str	r3, [sp, #4]
 800bfee:	9b01      	ldr	r3, [sp, #4]
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bff0:	9102      	str	r1, [sp, #8]
 800bff2:	4b1a      	ldr	r3, [pc, #104]	@ (800c05c <SystemClock_Config+0x88>)
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c002:	9302      	str	r3, [sp, #8]
 800c004:	9b02      	ldr	r3, [sp, #8]
    RCC_OscInitTypeDef RCC_OscInitStruct = {
 800c006:	2230      	movs	r2, #48	@ 0x30
 800c008:	a808      	add	r0, sp, #32
 800c00a:	f018 fb10 	bl	802462e <memset>
 800c00e:	2301      	movs	r3, #1
 800c010:	9308      	str	r3, [sp, #32]
 800c012:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c016:	9309      	str	r3, [sp, #36]	@ 0x24
 800c018:	2302      	movs	r3, #2
 800c01a:	930e      	str	r3, [sp, #56]	@ 0x38
 800c01c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c020:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c022:	2208      	movs	r2, #8
 800c024:	9210      	str	r2, [sp, #64]	@ 0x40
 800c026:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800c02a:	9211      	str	r2, [sp, #68]	@ 0x44
 800c02c:	9312      	str	r3, [sp, #72]	@ 0x48
 800c02e:	2307      	movs	r3, #7
 800c030:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c032:	a808      	add	r0, sp, #32
 800c034:	f7fd fae6 	bl	8009604 <HAL_RCC_OscConfig>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 800c038:	f10d 0c0c 	add.w	ip, sp, #12
 800c03c:	4c08      	ldr	r4, [pc, #32]	@ (800c060 <SystemClock_Config+0x8c>)
 800c03e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c040:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	f8cc 3000 	str.w	r3, [ip]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY) != HAL_OK) {
 800c04a:	2105      	movs	r1, #5
 800c04c:	a803      	add	r0, sp, #12
 800c04e:	f7fd fd3d 	bl	8009acc <HAL_RCC_ClockConfig>
}
 800c052:	b014      	add	sp, #80	@ 0x50
 800c054:	bd10      	pop	{r4, pc}
 800c056:	bf00      	nop
 800c058:	40023800 	.word	0x40023800
 800c05c:	40007000 	.word	0x40007000
 800c060:	08028a98 	.word	0x08028a98

0800c064 <main>:
{
 800c064:	b508      	push	{r3, lr}
    HAL_Init();
 800c066:	f7fc ff43 	bl	8008ef0 <HAL_Init>
    SystemClock_Config();
 800c06a:	f7ff ffb3 	bl	800bfd4 <SystemClock_Config>
    MX_GPIO_Init();
 800c06e:	f7ff ff59 	bl	800bf24 <MX_GPIO_Init>
    if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800c072:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a4 <main+0x40>)
 800c074:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800c078:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800c07c:	d10d      	bne.n	800c09a <main+0x36>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800c07e:	4a09      	ldr	r2, [pc, #36]	@ (800c0a4 <main+0x40>)
 800c080:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800c084:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c088:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
        DWT->CYCCNT = 0;
 800c08c:	4b06      	ldr	r3, [pc, #24]	@ (800c0a8 <main+0x44>)
 800c08e:	2200      	movs	r2, #0
 800c090:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	f042 0201 	orr.w	r2, r2, #1
 800c098:	601a      	str	r2, [r3, #0]
    grbl_enter();
 800c09a:	f005 f919 	bl	80112d0 <grbl_enter>
}
 800c09e:	2000      	movs	r0, #0
 800c0a0:	bd08      	pop	{r3, pc}
 800c0a2:	bf00      	nop
 800c0a4:	e000ed00 	.word	0xe000ed00
 800c0a8:	e0001000 	.word	0xe0001000

0800c0ac <flush_input_buffer>:
// Function prototypes
static void poll_for_received_data(void);
static void flush_input_buffer(void);

// Function to flush the input buffer
static void flush_input_buffer(void) {
 800c0ac:	b508      	push	{r3, lr}
    int16_t c;
    // Read and discard all data from the stream until the buffer is empty
    while ((c = hal.stream.read()) != -1) {
 800c0ae:	4b04      	ldr	r3, [pc, #16]	@ (800c0c0 <flush_input_buffer+0x14>)
 800c0b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c0b4:	4798      	blx	r3
 800c0b6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c0ba:	d1f8      	bne.n	800c0ae <flush_input_buffer+0x2>
        // Discard data
    }
}
 800c0bc:	bd08      	pop	{r3, pc}
 800c0be:	bf00      	nop
 800c0c0:	200011c0 	.word	0x200011c0

0800c0c4 <on_report_my_options>:
    // Continue with any other real-time execution tasks
    on_execute_realtime(state);
}

// Add info about our plugin to the $I report
static void on_report_my_options(bool newopt) {
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	b08a      	sub	sp, #40	@ 0x28
 800c0c8:	4604      	mov	r4, r0
    if (on_report_options) {
 800c0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c0fc <on_report_my_options+0x38>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <on_report_my_options+0xe>
        on_report_options(newopt);
 800c0d0:	4798      	blx	r3
    }

    if (!newopt) {
 800c0d2:	b984      	cbnz	r4, 800c0f6 <on_report_my_options+0x32>
        // Add ASCII_EOL after the plugin information string
        const char plugin_info[] = "[PLUGIN:Register Monitor v1.00]" ASCII_EOL;
 800c0d4:	f10d 0c04 	add.w	ip, sp, #4
 800c0d8:	4c09      	ldr	r4, [pc, #36]	@ (800c100 <on_report_my_options+0x3c>)
 800c0da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	f8ac 3000 	strh.w	r3, [ip]
        hal.stream.write((uint8_t*)plugin_info);
 800c0ec:	4b05      	ldr	r3, [pc, #20]	@ (800c104 <on_report_my_options+0x40>)
 800c0ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c0f2:	a801      	add	r0, sp, #4
 800c0f4:	4798      	blx	r3
    }
}
 800c0f6:	b00a      	add	sp, #40	@ 0x28
 800c0f8:	bd10      	pop	{r4, pc}
 800c0fa:	bf00      	nop
 800c0fc:	200007b0 	.word	0x200007b0
 800c100:	08028b08 	.word	0x08028b08
 800c104:	200011c0 	.word	0x200011c0

0800c108 <poll_for_received_data>:
static void poll_for_received_data(void) {
 800c108:	b538      	push	{r3, r4, r5, lr}
        rx_buffer_count = hal.stream.get_rx_buffer_count();
 800c10a:	4b1c      	ldr	r3, [pc, #112]	@ (800c17c <poll_for_received_data+0x74>)
 800c10c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c110:	4798      	blx	r3
        if (rx_buffer_count >= RX_DATA_SIZE) {
 800c112:	2807      	cmp	r0, #7
 800c114:	d803      	bhi.n	800c11e <poll_for_received_data+0x16>
            HAL_Delay(10);  // Adjust delay as necessary
 800c116:	200a      	movs	r0, #10
 800c118:	f7fc ff16 	bl	8008f48 <HAL_Delay>
        rx_buffer_count = hal.stream.get_rx_buffer_count();
 800c11c:	e7f5      	b.n	800c10a <poll_for_received_data+0x2>
 800c11e:	4605      	mov	r5, r0
            rx_index = 0;  // Reset index for new message
 800c120:	4b17      	ldr	r3, [pc, #92]	@ (800c180 <poll_for_received_data+0x78>)
 800c122:	2200      	movs	r2, #0
 800c124:	801a      	strh	r2, [r3, #0]
            while (rx_index < RX_DATA_SIZE && (c = hal.stream.read()) != -1) {
 800c126:	e005      	b.n	800c134 <poll_for_received_data+0x2c>
                RxData[rx_index++] = (uint8_t)c;  // Store received character in RxData
 800c128:	4a15      	ldr	r2, [pc, #84]	@ (800c180 <poll_for_received_data+0x78>)
 800c12a:	8813      	ldrh	r3, [r2, #0]
 800c12c:	1c59      	adds	r1, r3, #1
 800c12e:	8011      	strh	r1, [r2, #0]
 800c130:	4a14      	ldr	r2, [pc, #80]	@ (800c184 <poll_for_received_data+0x7c>)
 800c132:	54d0      	strb	r0, [r2, r3]
            while (rx_index < RX_DATA_SIZE && (c = hal.stream.read()) != -1) {
 800c134:	4b12      	ldr	r3, [pc, #72]	@ (800c180 <poll_for_received_data+0x78>)
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	2b07      	cmp	r3, #7
 800c13a:	d806      	bhi.n	800c14a <poll_for_received_data+0x42>
 800c13c:	4b0f      	ldr	r3, [pc, #60]	@ (800c17c <poll_for_received_data+0x74>)
 800c13e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c142:	4798      	blx	r3
 800c144:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c148:	d1ee      	bne.n	800c128 <poll_for_received_data+0x20>
static void poll_for_received_data(void) {
 800c14a:	2400      	movs	r4, #0
            for (uint16_t i = 0; i < rx_index; i++) {
 800c14c:	4b0c      	ldr	r3, [pc, #48]	@ (800c180 <poll_for_received_data+0x78>)
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	42a3      	cmp	r3, r4
 800c152:	d908      	bls.n	800c166 <poll_for_received_data+0x5e>
                hal.stream.write(RxData[i]);       // Echo the received character
 800c154:	4b09      	ldr	r3, [pc, #36]	@ (800c17c <poll_for_received_data+0x74>)
 800c156:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c15a:	4a0a      	ldr	r2, [pc, #40]	@ (800c184 <poll_for_received_data+0x7c>)
 800c15c:	5d10      	ldrb	r0, [r2, r4]
 800c15e:	4798      	blx	r3
            for (uint16_t i = 0; i < rx_index; i++) {
 800c160:	3401      	adds	r4, #1
 800c162:	b2a4      	uxth	r4, r4
 800c164:	e7f2      	b.n	800c14c <poll_for_received_data+0x44>
            hal.stream.write(ASCII_EOL);           // Write ASCII end-of-line character
 800c166:	4b05      	ldr	r3, [pc, #20]	@ (800c17c <poll_for_received_data+0x74>)
 800c168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c16c:	4806      	ldr	r0, [pc, #24]	@ (800c188 <poll_for_received_data+0x80>)
 800c16e:	4798      	blx	r3
            if (rx_buffer_count > RX_DATA_SIZE) {
 800c170:	2d08      	cmp	r5, #8
 800c172:	d800      	bhi.n	800c176 <poll_for_received_data+0x6e>
}
 800c174:	bd38      	pop	{r3, r4, r5, pc}
                flush_input_buffer();
 800c176:	f7ff ff99 	bl	800c0ac <flush_input_buffer>
 800c17a:	e7fb      	b.n	800c174 <poll_for_received_data+0x6c>
 800c17c:	200011c0 	.word	0x200011c0
 800c180:	200007a0 	.word	0x200007a0
 800c184:	200007a4 	.word	0x200007a4
 800c188:	0802bc30 	.word	0x0802bc30

0800c18c <check_register_and_execute_gcode>:
static void check_register_and_execute_gcode(sys_state_t state) {
 800c18c:	b510      	push	{r4, lr}
 800c18e:	4604      	mov	r4, r0
    poll_for_received_data();
 800c190:	f7ff ffba 	bl	800c108 <poll_for_received_data>
    on_execute_realtime(state);
 800c194:	4b02      	ldr	r3, [pc, #8]	@ (800c1a0 <check_register_and_execute_gcode+0x14>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4620      	mov	r0, r4
 800c19a:	4798      	blx	r3
}
 800c19c:	bd10      	pop	{r4, pc}
 800c19e:	bf00      	nop
 800c1a0:	200007ac 	.word	0x200007ac

0800c1a4 <my_plugin_init>:

void my_plugin_init(void) {
    // Add info about our plugin to the $I report
    on_report_options = grbl.on_report_options;
 800c1a4:	4b05      	ldr	r3, [pc, #20]	@ (800c1bc <my_plugin_init+0x18>)
 800c1a6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c1a8:	4a05      	ldr	r2, [pc, #20]	@ (800c1c0 <my_plugin_init+0x1c>)
 800c1aa:	6011      	str	r1, [r2, #0]
    grbl.on_report_options = on_report_my_options;
 800c1ac:	4a05      	ldr	r2, [pc, #20]	@ (800c1c4 <my_plugin_init+0x20>)
 800c1ae:	655a      	str	r2, [r3, #84]	@ 0x54

    // Add check register and execute G-code function to grblHAL foreground process
    on_execute_realtime = grbl.on_execute_realtime;
 800c1b0:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800c1b2:	4a05      	ldr	r2, [pc, #20]	@ (800c1c8 <my_plugin_init+0x24>)
 800c1b4:	6011      	str	r1, [r2, #0]
    grbl.on_execute_realtime = check_register_and_execute_gcode;
 800c1b6:	4a05      	ldr	r2, [pc, #20]	@ (800c1cc <my_plugin_init+0x28>)
 800c1b8:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800c1ba:	4770      	bx	lr
 800c1bc:	200013a8 	.word	0x200013a8
 800c1c0:	200007b0 	.word	0x200007b0
 800c1c4:	0800c0c5 	.word	0x0800c0c5
 800c1c8:	200007ac 	.word	0x200007ac
 800c1cc:	0800c18d 	.word	0x0800c18d

0800c1d0 <serialClaimPort>:
{
    bool ok = false;
    uint_fast8_t idx = sizeof(serial) / sizeof(io_stream_properties_t);

    do {
        if(serial[--idx].instance == instance) {
 800c1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c204 <serialClaimPort+0x34>)
 800c1d2:	785b      	ldrb	r3, [r3, #1]
 800c1d4:	4283      	cmp	r3, r0
 800c1d6:	d001      	beq.n	800c1dc <serialClaimPort+0xc>
    bool ok = false;
 800c1d8:	2000      	movs	r0, #0
 800c1da:	4770      	bx	lr
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 800c1dc:	4b09      	ldr	r3, [pc, #36]	@ (800c204 <serialClaimPort+0x34>)
 800c1de:	789b      	ldrb	r3, [r3, #2]
 800c1e0:	f3c3 0040 	ubfx	r0, r3, #1, #1
 800c1e4:	f013 0f02 	tst.w	r3, #2
 800c1e8:	d00a      	beq.n	800c200 <serialClaimPort+0x30>
 800c1ea:	4b06      	ldr	r3, [pc, #24]	@ (800c204 <serialClaimPort+0x34>)
 800c1ec:	789b      	ldrb	r3, [r3, #2]
 800c1ee:	f013 0f04 	tst.w	r3, #4
 800c1f2:	d104      	bne.n	800c1fe <serialClaimPort+0x2e>
                serial[idx].flags.claimed = On;
 800c1f4:	4a03      	ldr	r2, [pc, #12]	@ (800c204 <serialClaimPort+0x34>)
 800c1f6:	f043 0304 	orr.w	r3, r3, #4
 800c1fa:	7093      	strb	r3, [r2, #2]
 800c1fc:	4770      	bx	lr
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 800c1fe:	2000      	movs	r0, #0
        }

    } while(idx);

    return ok;
}
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	20000180 	.word	0x20000180

0800c208 <serialRxFree>:
//
// Returns number of free characters in serial input buffer
//
static uint16_t serialRxFree (void)
{
    uint16_t tail = rxbuf.tail, head = rxbuf.head;
 800c208:	4b08      	ldr	r3, [pc, #32]	@ (800c22c <serialRxFree+0x24>)
 800c20a:	6858      	ldr	r0, [r3, #4]
 800c20c:	b280      	uxth	r0, r0
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	b29b      	uxth	r3, r3

    return (RX_BUFFER_SIZE - 1) - BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c212:	4298      	cmp	r0, r3
 800c214:	d804      	bhi.n	800c220 <serialRxFree+0x18>
 800c216:	1ac0      	subs	r0, r0, r3
 800c218:	f200 30ff 	addw	r0, r0, #1023	@ 0x3ff
 800c21c:	b280      	uxth	r0, r0
 800c21e:	4770      	bx	lr
 800c220:	1ac0      	subs	r0, r0, r3
 800c222:	b280      	uxth	r0, r0
 800c224:	3801      	subs	r0, #1
 800c226:	b280      	uxth	r0, r0
}
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	200009bc 	.word	0x200009bc

0800c230 <serialRxCount>:
//
// Returns number of characters in serial input buffer
//
static uint16_t serialRxCount (void)
{
    uint32_t tail = rxbuf.tail, head = rxbuf.head;
 800c230:	4a07      	ldr	r2, [pc, #28]	@ (800c250 <serialRxCount+0x20>)
 800c232:	6853      	ldr	r3, [r2, #4]
 800c234:	6810      	ldr	r0, [r2, #0]

    return BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 800c236:	4283      	cmp	r3, r0
 800c238:	d804      	bhi.n	800c244 <serialRxCount+0x14>
 800c23a:	b280      	uxth	r0, r0
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	1ac0      	subs	r0, r0, r3
 800c240:	b280      	uxth	r0, r0
 800c242:	4770      	bx	lr
 800c244:	1ac0      	subs	r0, r0, r3
 800c246:	b280      	uxth	r0, r0
 800c248:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800c24c:	b280      	uxth	r0, r0
}
 800c24e:	4770      	bx	lr
 800c250:	200009bc 	.word	0x200009bc

0800c254 <serialRxFlush>:
//
// Flushes the serial input buffer
//
static void serialRxFlush (void)
{
    rxbuf.tail = rxbuf.head;
 800c254:	4b01      	ldr	r3, [pc, #4]	@ (800c25c <serialRxFlush+0x8>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	605a      	str	r2, [r3, #4]
}
 800c25a:	4770      	bx	lr
 800c25c:	200009bc 	.word	0x200009bc

0800c260 <serialRxCancel>:
//
// Flushes and adds a CAN character to the serial input buffer
//
static void serialRxCancel (void)
{
    rxbuf.data[rxbuf.head] = ASCII_CAN;
 800c260:	4b06      	ldr	r3, [pc, #24]	@ (800c27c <serialRxCancel+0x1c>)
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	441a      	add	r2, r3
 800c266:	2118      	movs	r1, #24
 800c268:	72d1      	strb	r1, [r2, #11]
    rxbuf.tail = rxbuf.head;
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	605a      	str	r2, [r3, #4]
    rxbuf.head = BUFNEXT(rxbuf.head, rxbuf);
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	3201      	adds	r2, #1
 800c272:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c276:	601a      	str	r2, [r3, #0]
}
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	200009bc 	.word	0x200009bc

0800c280 <serialPutC>:

//
// Writes a character to the serial output stream
//
static bool serialPutC (const char c)
{
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4605      	mov	r5, r0
    uint16_t next_head = BUFNEXT(txbuf.head, txbuf);    // Get pointer to next free slot in buffer
 800c284:	4b0e      	ldr	r3, [pc, #56]	@ (800c2c0 <serialPutC+0x40>)
 800c286:	681c      	ldr	r4, [r3, #0]
 800c288:	3401      	adds	r4, #1
 800c28a:	f3c4 0408 	ubfx	r4, r4, #0, #9

    while(txbuf.tail == next_head) {                    // While TX buffer full
 800c28e:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c0 <serialPutC+0x40>)
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	42a3      	cmp	r3, r4
 800c294:	d107      	bne.n	800c2a6 <serialPutC+0x26>
        if(!hal.stream_blocking_callback())             // check if blocking for space,
 800c296:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c4 <serialPutC+0x44>)
 800c298:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800c29c:	4798      	blx	r3
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d1f4      	bne.n	800c28e <serialPutC+0xe>
 800c2a4:	e00a      	b.n	800c2bc <serialPutC+0x3c>
            return false;                               // exit if not (leaves TX buffer in an inconsistent state)
    }
    txbuf.data[txbuf.head] = c;                         // Add data to buffer,
 800c2a6:	4b06      	ldr	r3, [pc, #24]	@ (800c2c0 <serialPutC+0x40>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	441a      	add	r2, r3
 800c2ac:	7215      	strb	r5, [r2, #8]
    txbuf.head = next_head;                             // update head pointer and
 800c2ae:	601c      	str	r4, [r3, #0]
    UART0->CR1 |= USART_CR1_TXEIE;                      // enable TX interrupts
 800c2b0:	4a05      	ldr	r2, [pc, #20]	@ (800c2c8 <serialPutC+0x48>)
 800c2b2:	68d3      	ldr	r3, [r2, #12]
 800c2b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2b8:	60d3      	str	r3, [r2, #12]

    return true;
 800c2ba:	2301      	movs	r3, #1
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	200007b4 	.word	0x200007b4
 800c2c4:	200011c0 	.word	0x200011c0
 800c2c8:	40004400 	.word	0x40004400

0800c2cc <serialWriteS>:

//
// Writes a null terminated string to the serial output stream, blocks if buffer full
//
static void serialWriteS (const char *s)
{
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	4604      	mov	r4, r0
    char c, *ptr = (char *)s;

    while((c = *ptr++) != '\0')
 800c2d0:	e001      	b.n	800c2d6 <serialWriteS+0xa>
        serialPutC(c);
 800c2d2:	f7ff ffd5 	bl	800c280 <serialPutC>
    while((c = *ptr++) != '\0')
 800c2d6:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	d1f9      	bne.n	800c2d2 <serialWriteS+0x6>
}
 800c2de:	bd10      	pop	{r4, pc}

0800c2e0 <serialWrite>:

//
// Writes a number of characters from string to the serial output stream followed by EOL, blocks if buffer full
//
static void serialWrite (const char *s, uint16_t length)
{
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4604      	mov	r4, r0
    char *ptr = (char *)s;

    while(length--)
 800c2e4:	e004      	b.n	800c2f0 <serialWrite+0x10>
        serialPutC(*ptr++);
 800c2e6:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c2ea:	f7ff ffc9 	bl	800c280 <serialPutC>
    while(length--)
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	1e4b      	subs	r3, r1, #1
 800c2f2:	b29d      	uxth	r5, r3
 800c2f4:	2900      	cmp	r1, #0
 800c2f6:	d1f6      	bne.n	800c2e6 <serialWrite+0x6>
}
 800c2f8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c2fc <serialTxFlush>:
//
// Flushes the serial output buffer
//
static void serialTxFlush (void)
{
    UART0->CR1 &= ~USART_CR1_TXEIE;     // Disable TX interrupts
 800c2fc:	4a04      	ldr	r2, [pc, #16]	@ (800c310 <serialTxFlush+0x14>)
 800c2fe:	68d3      	ldr	r3, [r2, #12]
 800c300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c304:	60d3      	str	r3, [r2, #12]
    txbuf.tail = txbuf.head;
 800c306:	4b03      	ldr	r3, [pc, #12]	@ (800c314 <serialTxFlush+0x18>)
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	605a      	str	r2, [r3, #4]
}
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	40004400 	.word	0x40004400
 800c314:	200007b4 	.word	0x200007b4

0800c318 <serialTxCount>:
//
// Returns number of characters pending transmission
//
static uint16_t serialTxCount (void)
{
    uint32_t tail = txbuf.tail, head = txbuf.head;
 800c318:	4b0c      	ldr	r3, [pc, #48]	@ (800c34c <serialTxCount+0x34>)
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]

    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->SR & USART_SR_TC ? 0 : 1);
 800c31e:	429a      	cmp	r2, r3
 800c320:	d80d      	bhi.n	800c33e <serialTxCount+0x26>
 800c322:	b29b      	uxth	r3, r3
 800c324:	b292      	uxth	r2, r2
 800c326:	1a9b      	subs	r3, r3, r2
 800c328:	b29b      	uxth	r3, r3
 800c32a:	4a09      	ldr	r2, [pc, #36]	@ (800c350 <serialTxCount+0x38>)
 800c32c:	6812      	ldr	r2, [r2, #0]
 800c32e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800c332:	bf0c      	ite	eq
 800c334:	2001      	moveq	r0, #1
 800c336:	2000      	movne	r0, #0
 800c338:	4418      	add	r0, r3
}
 800c33a:	b280      	uxth	r0, r0
 800c33c:	4770      	bx	lr
    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->SR & USART_SR_TC ? 0 : 1);
 800c33e:	1a9b      	subs	r3, r3, r2
 800c340:	b29b      	uxth	r3, r3
 800c342:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800c346:	b29b      	uxth	r3, r3
 800c348:	e7ef      	b.n	800c32a <serialTxCount+0x12>
 800c34a:	bf00      	nop
 800c34c:	200007b4 	.word	0x200007b4
 800c350:	40004400 	.word	0x40004400

0800c354 <serialGetC>:
//
// serialGetC - returns -1 if no data available
//
static int16_t serialGetC (void)
{
    uint_fast16_t tail = rxbuf.tail;    // Get buffer pointer
 800c354:	4a07      	ldr	r2, [pc, #28]	@ (800c374 <serialGetC+0x20>)
 800c356:	6853      	ldr	r3, [r2, #4]

    if(tail == rxbuf.head)
 800c358:	6812      	ldr	r2, [r2, #0]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d007      	beq.n	800c36e <serialGetC+0x1a>
        return -1; // no data available

    char data = rxbuf.data[tail];       // Get next character
 800c35e:	4a05      	ldr	r2, [pc, #20]	@ (800c374 <serialGetC+0x20>)
 800c360:	18d1      	adds	r1, r2, r3
    rxbuf.tail = BUFNEXT(tail, rxbuf);  // and update pointer
 800c362:	3301      	adds	r3, #1
 800c364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c368:	6053      	str	r3, [r2, #4]

    return (int16_t)data;
 800c36a:	7ac8      	ldrb	r0, [r1, #11]
 800c36c:	4770      	bx	lr
        return -1; // no data available
 800c36e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c372:	4770      	bx	lr
 800c374:	200009bc 	.word	0x200009bc

0800c378 <serialDisable>:
    return true;
}

static bool serialDisable (bool disable)
{
    if(disable)
 800c378:	b130      	cbz	r0, 800c388 <serialDisable+0x10>
        UART0->CR1 &= ~USART_CR1_RXNEIE;
 800c37a:	4a06      	ldr	r2, [pc, #24]	@ (800c394 <serialDisable+0x1c>)
 800c37c:	68d3      	ldr	r3, [r2, #12]
 800c37e:	f023 0320 	bic.w	r3, r3, #32
 800c382:	60d3      	str	r3, [r2, #12]
    else
        UART0->CR1 |= USART_CR1_RXNEIE;

    return true;
}
 800c384:	2001      	movs	r0, #1
 800c386:	4770      	bx	lr
        UART0->CR1 |= USART_CR1_RXNEIE;
 800c388:	4a02      	ldr	r2, [pc, #8]	@ (800c394 <serialDisable+0x1c>)
 800c38a:	68d3      	ldr	r3, [r2, #12]
 800c38c:	f043 0320 	orr.w	r3, r3, #32
 800c390:	60d3      	str	r3, [r2, #12]
 800c392:	e7f7      	b.n	800c384 <serialDisable+0xc>
 800c394:	40004400 	.word	0x40004400

0800c398 <serialEnqueueRtCommand>:

static bool serialEnqueueRtCommand (char c)
{
 800c398:	b508      	push	{r3, lr}
    return enqueue_realtime_command(c);
 800c39a:	4b02      	ldr	r3, [pc, #8]	@ (800c3a4 <serialEnqueueRtCommand+0xc>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4798      	blx	r3
}
 800c3a0:	bd08      	pop	{r3, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000188 	.word	0x20000188

0800c3a8 <serialSetRtHandler>:

static enqueue_realtime_command_ptr serialSetRtHandler (enqueue_realtime_command_ptr handler)
{
 800c3a8:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 800c3aa:	4a03      	ldr	r2, [pc, #12]	@ (800c3b8 <serialSetRtHandler+0x10>)
 800c3ac:	6810      	ldr	r0, [r2, #0]

    if(handler)
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	b10b      	cbz	r3, 800c3b6 <serialSetRtHandler+0xe>
        enqueue_realtime_command = handler;
 800c3b2:	4b01      	ldr	r3, [pc, #4]	@ (800c3b8 <serialSetRtHandler+0x10>)
 800c3b4:	601a      	str	r2, [r3, #0]

    return prev;
}
 800c3b6:	4770      	bx	lr
 800c3b8:	20000188 	.word	0x20000188

0800c3bc <serialSetBaudRate>:
{
 800c3bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	4607      	mov	r7, r0
    UART0->CR1 = USART_CR1_RE|USART_CR1_TE;
 800c3c2:	f8df a130 	ldr.w	sl, [pc, #304]	@ 800c4f4 <serialSetBaudRate+0x138>
 800c3c6:	230c      	movs	r3, #12
 800c3c8:	f8ca 300c 	str.w	r3, [sl, #12]
    UART0->BRR = UART_BRR_SAMPLING16(UART0_CLK, baud_rate);
 800c3cc:	f7fd fc34 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800c3d0:	2400      	movs	r4, #0
 800c3d2:	1803      	adds	r3, r0, r0
 800c3d4:	eb44 0104 	adc.w	r1, r4, r4
 800c3d8:	181b      	adds	r3, r3, r0
 800c3da:	f141 0100 	adc.w	r1, r1, #0
 800c3de:	00c9      	lsls	r1, r1, #3
 800c3e0:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c3e4:	00db      	lsls	r3, r3, #3
 800c3e6:	1818      	adds	r0, r3, r0
 800c3e8:	ea4f 7997 	mov.w	r9, r7, lsr #30
 800c3ec:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800c3f0:	463a      	mov	r2, r7
 800c3f2:	464b      	mov	r3, r9
 800c3f4:	f141 0100 	adc.w	r1, r1, #0
 800c3f8:	f7fc fb8e 	bl	8008b18 <__aeabi_uldivmod>
 800c3fc:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800c4f8 <serialSetBaudRate+0x13c>
 800c400:	fba8 3500 	umull	r3, r5, r8, r0
 800c404:	096d      	lsrs	r5, r5, #5
 800c406:	012d      	lsls	r5, r5, #4
 800c408:	f7fd fc16 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800c40c:	1803      	adds	r3, r0, r0
 800c40e:	eb44 0104 	adc.w	r1, r4, r4
 800c412:	181b      	adds	r3, r3, r0
 800c414:	f141 0100 	adc.w	r1, r1, #0
 800c418:	00c9      	lsls	r1, r1, #3
 800c41a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	1818      	adds	r0, r3, r0
 800c422:	463a      	mov	r2, r7
 800c424:	464b      	mov	r3, r9
 800c426:	f141 0100 	adc.w	r1, r1, #0
 800c42a:	f7fc fb75 	bl	8008b18 <__aeabi_uldivmod>
 800c42e:	4606      	mov	r6, r0
 800c430:	f7fd fc02 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800c434:	1803      	adds	r3, r0, r0
 800c436:	eb44 0104 	adc.w	r1, r4, r4
 800c43a:	181b      	adds	r3, r3, r0
 800c43c:	f141 0100 	adc.w	r1, r1, #0
 800c440:	00c9      	lsls	r1, r1, #3
 800c442:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	1818      	adds	r0, r3, r0
 800c44a:	463a      	mov	r2, r7
 800c44c:	464b      	mov	r3, r9
 800c44e:	f141 0100 	adc.w	r1, r1, #0
 800c452:	f7fc fb61 	bl	8008b18 <__aeabi_uldivmod>
 800c456:	fba8 3000 	umull	r3, r0, r8, r0
 800c45a:	0940      	lsrs	r0, r0, #5
 800c45c:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 800c460:	fb0b 6310 	mls	r3, fp, r0, r6
 800c464:	011b      	lsls	r3, r3, #4
 800c466:	3332      	adds	r3, #50	@ 0x32
 800c468:	fba8 2303 	umull	r2, r3, r8, r3
 800c46c:	095b      	lsrs	r3, r3, #5
 800c46e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c472:	441d      	add	r5, r3
 800c474:	f7fd fbe0 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800c478:	1803      	adds	r3, r0, r0
 800c47a:	eb44 0104 	adc.w	r1, r4, r4
 800c47e:	181b      	adds	r3, r3, r0
 800c480:	f141 0100 	adc.w	r1, r1, #0
 800c484:	00c9      	lsls	r1, r1, #3
 800c486:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	1818      	adds	r0, r3, r0
 800c48e:	463a      	mov	r2, r7
 800c490:	464b      	mov	r3, r9
 800c492:	f141 0100 	adc.w	r1, r1, #0
 800c496:	f7fc fb3f 	bl	8008b18 <__aeabi_uldivmod>
 800c49a:	4606      	mov	r6, r0
 800c49c:	f7fd fbcc 	bl	8009c38 <HAL_RCC_GetPCLK1Freq>
 800c4a0:	1803      	adds	r3, r0, r0
 800c4a2:	4164      	adcs	r4, r4
 800c4a4:	181b      	adds	r3, r3, r0
 800c4a6:	f144 0100 	adc.w	r1, r4, #0
 800c4aa:	00c9      	lsls	r1, r1, #3
 800c4ac:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	1818      	adds	r0, r3, r0
 800c4b4:	463a      	mov	r2, r7
 800c4b6:	464b      	mov	r3, r9
 800c4b8:	f141 0100 	adc.w	r1, r1, #0
 800c4bc:	f7fc fb2c 	bl	8008b18 <__aeabi_uldivmod>
 800c4c0:	fba8 3000 	umull	r3, r0, r8, r0
 800c4c4:	0940      	lsrs	r0, r0, #5
 800c4c6:	fb0b 6310 	mls	r3, fp, r0, r6
 800c4ca:	011b      	lsls	r3, r3, #4
 800c4cc:	3332      	adds	r3, #50	@ 0x32
 800c4ce:	fba8 8303 	umull	r8, r3, r8, r3
 800c4d2:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800c4d6:	441d      	add	r5, r3
 800c4d8:	f8ca 5008 	str.w	r5, [sl, #8]
    UART0->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 800c4dc:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c4e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c4e4:	f043 0320 	orr.w	r3, r3, #32
 800c4e8:	f8ca 300c 	str.w	r3, [sl, #12]
}
 800c4ec:	2001      	movs	r0, #1
 800c4ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f2:	bf00      	nop
 800c4f4:	40004400 	.word	0x40004400
 800c4f8:	51eb851f 	.word	0x51eb851f

0800c4fc <serialInit>:

static const io_stream_t *serialInit (uint32_t baud_rate)
{
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	4605      	mov	r5, r0
        .disable_rx = serialDisable,
        .set_baud_rate = serialSetBaudRate,
        .set_enqueue_rt_handler = serialSetRtHandler
    };

    if(!serialClaimPort(stream.instance))
 800c502:	2000      	movs	r0, #0
 800c504:	f7ff fe64 	bl	800c1d0 <serialClaimPort>
 800c508:	b330      	cbz	r0, 800c558 <serialInit+0x5c>
        return NULL;

    UART0_CLK_En();
 800c50a:	2600      	movs	r6, #0
 800c50c:	9600      	str	r6, [sp, #0]
 800c50e:	4b13      	ldr	r3, [pc, #76]	@ (800c55c <serialInit+0x60>)
 800c510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c512:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c516:	641a      	str	r2, [r3, #64]	@ 0x40
 800c518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c51a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	9b00      	ldr	r3, [sp, #0]

    GPIO_InitTypeDef GPIO_InitStructure = {
 800c522:	f10d 0c04 	add.w	ip, sp, #4
 800c526:	4c0e      	ldr	r4, [pc, #56]	@ (800c560 <serialInit+0x64>)
 800c528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c52a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	f8cc 3000 	str.w	r3, [ip]
        .Pull      = GPIO_NOPULL,
        .Speed     = GPIO_SPEED_FREQ_VERY_HIGH,
        .Pin       = (1 << UART0_RX_PIN)|(1 << UART0_TX_PIN),
        .Alternate = UART0_AF
    };
    HAL_GPIO_Init(UART0_PORT, &GPIO_InitStructure);
 800c534:	a901      	add	r1, sp, #4
 800c536:	480b      	ldr	r0, [pc, #44]	@ (800c564 <serialInit+0x68>)
 800c538:	f7fc ff7c 	bl	8009434 <HAL_GPIO_Init>

    serialSetBaudRate(baud_rate);
 800c53c:	4628      	mov	r0, r5
 800c53e:	f7ff ff3d 	bl	800c3bc <serialSetBaudRate>

    HAL_NVIC_SetPriority(UART0_IRQ, 0, 0);
 800c542:	4632      	mov	r2, r6
 800c544:	4631      	mov	r1, r6
 800c546:	2026      	movs	r0, #38	@ 0x26
 800c548:	f7fc fd6a 	bl	8009020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART0_IRQ);
 800c54c:	2026      	movs	r0, #38	@ 0x26
 800c54e:	f7fc fd77 	bl	8009040 <HAL_NVIC_EnableIRQ>

    return &stream;
 800c552:	4805      	ldr	r0, [pc, #20]	@ (800c568 <serialInit+0x6c>)
}
 800c554:	b006      	add	sp, #24
 800c556:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 800c558:	2000      	movs	r0, #0
 800c55a:	e7fb      	b.n	800c554 <serialInit+0x58>
 800c55c:	40023800 	.word	0x40023800
 800c560:	08028aac 	.word	0x08028aac
 800c564:	40020000 	.word	0x40020000
 800c568:	08028b2c 	.word	0x08028b2c

0800c56c <serialSuspendInput>:
{
 800c56c:	b508      	push	{r3, lr}
 800c56e:	4601      	mov	r1, r0
    return stream_rx_suspend(&rxbuf, suspend);
 800c570:	4801      	ldr	r0, [pc, #4]	@ (800c578 <serialSuspendInput+0xc>)
 800c572:	f013 ff0b 	bl	802038c <stream_rx_suspend>
}
 800c576:	bd08      	pop	{r3, pc}
 800c578:	200009bc 	.word	0x200009bc

0800c57c <serialRegisterStreams>:
{
 800c57c:	b510      	push	{r4, lr}
    hal.periph_port.register_pin(&rx0);
 800c57e:	4c06      	ldr	r4, [pc, #24]	@ (800c598 <serialRegisterStreams+0x1c>)
 800c580:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800c584:	4805      	ldr	r0, [pc, #20]	@ (800c59c <serialRegisterStreams+0x20>)
 800c586:	4798      	blx	r3
    hal.periph_port.register_pin(&tx0);
 800c588:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 800c58c:	4804      	ldr	r0, [pc, #16]	@ (800c5a0 <serialRegisterStreams+0x24>)
 800c58e:	4798      	blx	r3
    stream_register_streams(&streams);
 800c590:	4804      	ldr	r0, [pc, #16]	@ (800c5a4 <serialRegisterStreams+0x28>)
 800c592:	f013 fec1 	bl	8020318 <stream_register_streams>
}
 800c596:	bd10      	pop	{r4, pc}
 800c598:	200011c0 	.word	0x200011c0
 800c59c:	08028b98 	.word	0x08028b98
 800c5a0:	08028b80 	.word	0x08028b80
 800c5a4:	20000174 	.word	0x20000174

0800c5a8 <USART2_IRQHandler>:

void UART0_IRQHandler (void)
{
 800c5a8:	b510      	push	{r4, lr}
    if(UART0->SR & USART_SR_RXNE) {
 800c5aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c620 <USART2_IRQHandler+0x78>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f013 0f20 	tst.w	r3, #32
 800c5b2:	d014      	beq.n	800c5de <USART2_IRQHandler+0x36>
        uint32_t data = UART0->DR;
 800c5b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c620 <USART2_IRQHandler+0x78>)
 800c5b6:	685c      	ldr	r4, [r3, #4]
        if(!enqueue_realtime_command((char)data)) {             // Check and strip realtime commands...
 800c5b8:	b2e4      	uxtb	r4, r4
 800c5ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c624 <USART2_IRQHandler+0x7c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4620      	mov	r0, r4
 800c5c0:	4798      	blx	r3
 800c5c2:	b960      	cbnz	r0, 800c5de <USART2_IRQHandler+0x36>
            uint16_t next_head = BUFNEXT(rxbuf.head, rxbuf);    // Get and increment buffer pointer
 800c5c4:	4a18      	ldr	r2, [pc, #96]	@ (800c628 <USART2_IRQHandler+0x80>)
 800c5c6:	6813      	ldr	r3, [r2, #0]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if(next_head == rxbuf.tail)                         // If buffer full
 800c5ce:	6852      	ldr	r2, [r2, #4]
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d01c      	beq.n	800c60e <USART2_IRQHandler+0x66>
                rxbuf.overflow = 1;                             // flag overflow
            else {
                rxbuf.data[rxbuf.head] = (char)data;            // if not add data to buffer
 800c5d4:	4a14      	ldr	r2, [pc, #80]	@ (800c628 <USART2_IRQHandler+0x80>)
 800c5d6:	6811      	ldr	r1, [r2, #0]
 800c5d8:	4411      	add	r1, r2
 800c5da:	72cc      	strb	r4, [r1, #11]
                rxbuf.head = next_head;                         // and update pointer
 800c5dc:	6013      	str	r3, [r2, #0]
            }
        }
    }

    if((UART0->SR & USART_SR_TXE) && (UART0->CR1 & USART_CR1_TXEIE)) {
 800c5de:	4b10      	ldr	r3, [pc, #64]	@ (800c620 <USART2_IRQHandler+0x78>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5e6:	d011      	beq.n	800c60c <USART2_IRQHandler+0x64>
 800c5e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c620 <USART2_IRQHandler+0x78>)
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5f0:	d00c      	beq.n	800c60c <USART2_IRQHandler+0x64>
        uint_fast16_t tail = txbuf.tail;            // Get buffer pointer
 800c5f2:	4a0e      	ldr	r2, [pc, #56]	@ (800c62c <USART2_IRQHandler+0x84>)
 800c5f4:	6853      	ldr	r3, [r2, #4]
        UART0->DR = txbuf.data[tail];               // Send next character
 800c5f6:	18d1      	adds	r1, r2, r3
 800c5f8:	7a08      	ldrb	r0, [r1, #8]
 800c5fa:	4909      	ldr	r1, [pc, #36]	@ (800c620 <USART2_IRQHandler+0x78>)
 800c5fc:	6048      	str	r0, [r1, #4]
        txbuf.tail = tail = BUFNEXT(tail, txbuf);   // and increment pointer
 800c5fe:	3301      	adds	r3, #1
 800c600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c604:	6053      	str	r3, [r2, #4]
        if(tail == txbuf.head)                      // If buffer empty then
 800c606:	6812      	ldr	r2, [r2, #0]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d004      	beq.n	800c616 <USART2_IRQHandler+0x6e>
            UART0->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
   }
}
 800c60c:	bd10      	pop	{r4, pc}
                rxbuf.overflow = 1;                             // flag overflow
 800c60e:	4b06      	ldr	r3, [pc, #24]	@ (800c628 <USART2_IRQHandler+0x80>)
 800c610:	2201      	movs	r2, #1
 800c612:	725a      	strb	r2, [r3, #9]
 800c614:	e7e3      	b.n	800c5de <USART2_IRQHandler+0x36>
            UART0->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 800c616:	68cb      	ldr	r3, [r1, #12]
 800c618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c61c:	60cb      	str	r3, [r1, #12]
}
 800c61e:	e7f5      	b.n	800c60c <USART2_IRQHandler+0x64>
 800c620:	40004400 	.word	0x40004400
 800c624:	20000188 	.word	0x20000188
 800c628:	200009bc 	.word	0x200009bc
 800c62c:	200007b4 	.word	0x200007b4

0800c630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c630:	b500      	push	{lr}
 800c632:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c634:	2100      	movs	r1, #0
 800c636:	9100      	str	r1, [sp, #0]
 800c638:	4b0c      	ldr	r3, [pc, #48]	@ (800c66c <HAL_MspInit+0x3c>)
 800c63a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c63c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c640:	645a      	str	r2, [r3, #68]	@ 0x44
 800c642:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c644:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800c648:	9200      	str	r2, [sp, #0]
 800c64a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c64c:	9101      	str	r1, [sp, #4]
 800c64e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c650:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c654:	641a      	str	r2, [r3, #64]	@ 0x40
 800c656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800c660:	2005      	movs	r0, #5
 800c662:	f7fc fccb 	bl	8008ffc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c666:	b003      	add	sp, #12
 800c668:	f85d fb04 	ldr.w	pc, [sp], #4
 800c66c:	40023800 	.word	0x40023800

0800c670 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c670:	4770      	bx	lr

0800c672 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c672:	e7fe      	b.n	800c672 <HardFault_Handler>

0800c674 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c674:	e7fe      	b.n	800c674 <MemManage_Handler>

0800c676 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c676:	e7fe      	b.n	800c676 <BusFault_Handler>

0800c678 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c678:	e7fe      	b.n	800c678 <UsageFault_Handler>

0800c67a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c67a:	4770      	bx	lr

0800c67c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c67c:	4770      	bx	lr

0800c67e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c67e:	4770      	bx	lr

0800c680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c680:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  cycle_count = DWT->CYCCNT;
 800c682:	4b04      	ldr	r3, [pc, #16]	@ (800c694 <SysTick_Handler+0x14>)
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	4b04      	ldr	r3, [pc, #16]	@ (800c698 <SysTick_Handler+0x18>)
 800c688:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c68a:	f7fc fc4b 	bl	8008f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Driver_IncTick();
 800c68e:	f7fe fef5 	bl	800b47c <Driver_IncTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800c692:	bd08      	pop	{r3, pc}
 800c694:	e0001000 	.word	0xe0001000
 800c698:	20000dc8 	.word	0x20000dc8

0800c69c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800c69c:	2001      	movs	r0, #1
 800c69e:	4770      	bx	lr

0800c6a0 <_kill>:

int _kill(int pid, int sig)
{
 800c6a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 800c6a2:	f018 f8ef 	bl	8024884 <__errno>
 800c6a6:	2316      	movs	r3, #22
 800c6a8:	6003      	str	r3, [r0, #0]
	return -1;
}
 800c6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ae:	bd08      	pop	{r3, pc}

0800c6b0 <_exit>:

void _exit (int status)
{
 800c6b0:	b508      	push	{r3, lr}
	_kill(status, -1);
 800c6b2:	f04f 31ff 	mov.w	r1, #4294967295
 800c6b6:	f7ff fff3 	bl	800c6a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800c6ba:	e7fe      	b.n	800c6ba <_exit+0xa>

0800c6bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	460c      	mov	r4, r1
 800c6c0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c6c2:	2500      	movs	r5, #0
 800c6c4:	e006      	b.n	800c6d4 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800c6c6:	f3af 8000 	nop.w
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c6d0:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800c6d2:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c6d4:	42b5      	cmp	r5, r6
 800c6d6:	dbf6      	blt.n	800c6c6 <_read+0xa>
	}

return len;
}
 800c6d8:	4630      	mov	r0, r6
 800c6da:	bd70      	pop	{r4, r5, r6, pc}

0800c6dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	460c      	mov	r4, r1
 800c6e0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	e004      	b.n	800c6f0 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800c6e6:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c6ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c6ee:	3501      	adds	r5, #1
 800c6f0:	42b5      	cmp	r5, r6
 800c6f2:	dbf8      	blt.n	800c6e6 <_write+0xa>
	}
	return len;
}
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}

0800c6f8 <_close>:

int _close(int file)
{
	return -1;
}
 800c6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fc:	4770      	bx	lr

0800c6fe <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800c6fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c702:	604b      	str	r3, [r1, #4]
	return 0;
}
 800c704:	2000      	movs	r0, #0
 800c706:	4770      	bx	lr

0800c708 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800c708:	2001      	movs	r0, #1
 800c70a:	4770      	bx	lr

0800c70c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800c70c:	2000      	movs	r0, #0
 800c70e:	4770      	bx	lr

0800c710 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void *_sbrk(int incr)
{
 800c710:	b508      	push	{r3, lr}
 800c712:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c714:	4a0b      	ldr	r2, [pc, #44]	@ (800c744 <_sbrk+0x34>)
 800c716:	6812      	ldr	r2, [r2, #0]
 800c718:	b142      	cbz	r2, 800c72c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800c71a:	4a0a      	ldr	r2, [pc, #40]	@ (800c744 <_sbrk+0x34>)
 800c71c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800c71e:	4403      	add	r3, r0
 800c720:	466a      	mov	r2, sp
 800c722:	4293      	cmp	r3, r2
 800c724:	d806      	bhi.n	800c734 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (void *)-1;
	}

	heap_end += incr;
 800c726:	4a07      	ldr	r2, [pc, #28]	@ (800c744 <_sbrk+0x34>)
 800c728:	6013      	str	r3, [r2, #0]

	return (void *)prev_heap_end;
}
 800c72a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800c72c:	4a05      	ldr	r2, [pc, #20]	@ (800c744 <_sbrk+0x34>)
 800c72e:	4906      	ldr	r1, [pc, #24]	@ (800c748 <_sbrk+0x38>)
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	e7f2      	b.n	800c71a <_sbrk+0xa>
		errno = ENOMEM;
 800c734:	f018 f8a6 	bl	8024884 <__errno>
 800c738:	230c      	movs	r3, #12
 800c73a:	6003      	str	r3, [r0, #0]
		return (void *)-1;
 800c73c:	f04f 30ff 	mov.w	r0, #4294967295
 800c740:	e7f3      	b.n	800c72a <_sbrk+0x1a>
 800c742:	bf00      	nop
 800c744:	20000dcc 	.word	0x20000dcc
 800c748:	20002970 	.word	0x20002970

0800c74c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c74c:	b508      	push	{r3, lr}
    extern uint8_t _estack; /* Symbol defined in the linker script */

    uint32_t *addr;

    addr = (uint32_t *)(((uint32_t)&_estack - 1) & 0xFFFFFFE0);
 800c74e:	4b20      	ldr	r3, [pc, #128]	@ (800c7d0 <SystemInit+0x84>)
 800c750:	f023 031f 	bic.w	r3, r3, #31

    if(*addr == 0xDEADBEEF) {
 800c754:	6819      	ldr	r1, [r3, #0]
 800c756:	4a1f      	ldr	r2, [pc, #124]	@ (800c7d4 <SystemInit+0x88>)
 800c758:	4291      	cmp	r1, r2
 800c75a:	d00a      	beq.n	800c772 <SystemInit+0x26>
        while(1) {};
    }

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c75c:	4b1e      	ldr	r3, [pc, #120]	@ (800c7d8 <SystemInit+0x8c>)
 800c75e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c762:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800c766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c76a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c76e:	609a      	str	r2, [r3, #8]
#endif
}
 800c770:	bd08      	pop	{r3, pc}
        *addr = 0xCAFEFEED; // Reset our trigger
 800c772:	4a1a      	ldr	r2, [pc, #104]	@ (800c7dc <SystemInit+0x90>)
 800c774:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800c776:	b672      	cpsid	i
        HAL_RCC_DeInit();
 800c778:	f7fd fa8c 	bl	8009c94 <HAL_RCC_DeInit>
        HAL_DeInit();
 800c77c:	f7fc fb7c 	bl	8008e78 <HAL_DeInit>
        for(i = 0; i < 5; i++) {
 800c780:	2300      	movs	r3, #0
 800c782:	e00b      	b.n	800c79c <SystemInit+0x50>
            NVIC->ICER[i] = 0xFFFFFFFF;
 800c784:	4a16      	ldr	r2, [pc, #88]	@ (800c7e0 <SystemInit+0x94>)
 800c786:	f103 0020 	add.w	r0, r3, #32
 800c78a:	f04f 31ff 	mov.w	r1, #4294967295
 800c78e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
            NVIC->ICPR[i] = 0xFFFFFFFF;
 800c792:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800c796:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        for(i = 0; i < 5; i++) {
 800c79a:	3301      	adds	r3, #1
 800c79c:	2b04      	cmp	r3, #4
 800c79e:	d9f1      	bls.n	800c784 <SystemInit+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 800c7a0:	b662      	cpsie	i
        SysTick->CTRL = SysTick->LOAD = SysTick->VAL = 0;
 800c7a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	619a      	str	r2, [r3, #24]
 800c7aa:	615a      	str	r2, [r3, #20]
 800c7ac:	611a      	str	r2, [r3, #16]
        __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 800c7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c7e4 <SystemInit+0x98>)
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	f022 0203 	bic.w	r2, r2, #3
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	f042 0201 	orr.w	r2, r2, #1
 800c7be:	601a      	str	r2, [r3, #0]
        __set_MSP(*(uint32_t *)0x1FFF0000);
 800c7c0:	4b09      	ldr	r3, [pc, #36]	@ (800c7e8 <SystemInit+0x9c>)
 800c7c2:	681a      	ldr	r2, [r3, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800c7c4:	f382 8808 	msr	MSP, r2
        SysMemBootJump = (void(*)(void))(*((uint32_t *)0x1FFF0004));
 800c7c8:	685b      	ldr	r3, [r3, #4]
        SysMemBootJump();
 800c7ca:	4798      	blx	r3
        while(1) {};
 800c7cc:	e7fe      	b.n	800c7cc <SystemInit+0x80>
 800c7ce:	bf00      	nop
 800c7d0:	2000ffff 	.word	0x2000ffff
 800c7d4:	deadbeef 	.word	0xdeadbeef
 800c7d8:	e000ed00 	.word	0xe000ed00
 800c7dc:	cafefeed 	.word	0xcafefeed
 800c7e0:	e000e100 	.word	0xe000e100
 800c7e4:	40013800 	.word	0x40013800
 800c7e8:	1fff0000 	.word	0x1fff0000

0800c7ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c7ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800c824 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c7f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c7f2:	e003      	b.n	800c7fc <LoopCopyDataInit>

0800c7f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c828 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c7f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c7f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c7fa:	3104      	adds	r1, #4

0800c7fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c7fc:	480b      	ldr	r0, [pc, #44]	@ (800c82c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c7fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c830 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c800:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c802:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c804:	d3f6      	bcc.n	800c7f4 <CopyDataInit>
  ldr  r2, =_sbss
 800c806:	4a0b      	ldr	r2, [pc, #44]	@ (800c834 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c808:	e002      	b.n	800c810 <LoopFillZerobss>

0800c80a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c80a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c80c:	f842 3b04 	str.w	r3, [r2], #4

0800c810 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c810:	4b09      	ldr	r3, [pc, #36]	@ (800c838 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c812:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c814:	d3f9      	bcc.n	800c80a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c816:	f7ff ff99 	bl	800c74c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c81a:	f018 f839 	bl	8024890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c81e:	f7ff fc21 	bl	800c064 <main>
  bx  lr    
 800c822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c824:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800c828:	080314d0 	.word	0x080314d0
  ldr  r0, =_sdata
 800c82c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c830:	20000664 	.word	0x20000664
  ldr  r2, =_sbss
 800c834:	20000664 	.word	0x20000664
  ldr  r3, = _ebss
 800c838:	20002970 	.word	0x20002970

0800c83c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c83c:	e7fe      	b.n	800c83c <ADC_IRQHandler>
	...

0800c840 <alarms_get_details>:
}

alarm_details_t *alarms_get_details (void)
{
    return &details;
}
 800c840:	4800      	ldr	r0, [pc, #0]	@ (800c844 <alarms_get_details+0x4>)
 800c842:	4770      	bx	lr
 800c844:	20000190 	.word	0x20000190

0800c848 <canbus_enabled>:
// Public API

bool canbus_enabled (void)
{
    return isEnabled;
}
 800c848:	4b01      	ldr	r3, [pc, #4]	@ (800c850 <canbus_enabled+0x8>)
 800c84a:	7818      	ldrb	r0, [r3, #0]
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	20000dd0 	.word	0x20000dd0

0800c854 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant,
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state (coolant_state_t mode)
{
 800c854:	b508      	push	{r3, lr}
    if (!ABORTED) { // Block during abort.
 800c856:	4b06      	ldr	r3, [pc, #24]	@ (800c870 <coolant_set_state+0x1c>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	b943      	cbnz	r3, 800c86e <coolant_set_state+0x1a>
 800c85c:	4b04      	ldr	r3, [pc, #16]	@ (800c870 <coolant_set_state+0x1c>)
 800c85e:	785b      	ldrb	r3, [r3, #1]
 800c860:	b92b      	cbnz	r3, 800c86e <coolant_set_state+0x1a>
        hal.coolant.set_state(mode);
 800c862:	4b04      	ldr	r3, [pc, #16]	@ (800c874 <coolant_set_state+0x20>)
 800c864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c866:	4798      	blx	r3
        system_add_rt_report(Report_Coolant); // Set to report change immediately
 800c868:	2020      	movs	r0, #32
 800c86a:	f014 ffab 	bl	80217c4 <system_add_rt_report>
    }
}
 800c86e:	bd08      	pop	{r3, pc}
 800c870:	200014a0 	.word	0x200014a0
 800c874:	200011c0 	.word	0x200011c0

0800c878 <coolant_sync>:

// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails
// if an abort or check-mode is active.
bool coolant_sync (coolant_state_t mode)
{
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4604      	mov	r4, r0
    bool ok = true;
    if (state_get() != STATE_CHECK_MODE) {
 800c87c:	f011 ffe4 	bl	801e848 <state_get>
 800c880:	2802      	cmp	r0, #2
 800c882:	d102      	bne.n	800c88a <coolant_sync+0x12>
    bool ok = true;
 800c884:	2501      	movs	r5, #1
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
            coolant_set_state(mode);
    }

    return ok;
}
 800c886:	4628      	mov	r0, r5
 800c888:	bd38      	pop	{r3, r4, r5, pc}
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
 800c88a:	f00a ff43 	bl	8017714 <protocol_buffer_synchronize>
 800c88e:	4605      	mov	r5, r0
 800c890:	2800      	cmp	r0, #0
 800c892:	d0f8      	beq.n	800c886 <coolant_sync+0xe>
            coolant_set_state(mode);
 800c894:	4620      	mov	r0, r4
 800c896:	f7ff ffdd 	bl	800c854 <coolant_set_state>
 800c89a:	e7f4      	b.n	800c886 <coolant_sync+0xe>

0800c89c <xbar_fn_to_axismask>:
#include "hal.h"

static limit_signals_t home_source = {0};

axes_signals_t xbar_fn_to_axismask (pin_function_t fn)
{
 800c89c:	4603      	mov	r3, r0
    axes_signals_t mask = {0};
 800c89e:	f04f 0000 	mov.w	r0, #0

    switch(fn) {
 800c8a2:	2b18      	cmp	r3, #24
 800c8a4:	d809      	bhi.n	800c8ba <xbar_fn_to_axismask+0x1e>
 800c8a6:	2b15      	cmp	r3, #21
 800c8a8:	d20f      	bcs.n	800c8ca <xbar_fn_to_axismask+0x2e>
 800c8aa:	3b10      	subs	r3, #16
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b03      	cmp	r3, #3
 800c8b0:	d802      	bhi.n	800c8b8 <xbar_fn_to_axismask+0x1c>

        case Input_LimitX:
        case Input_LimitX_Max:
        case Input_LimitX_2:
        case Input_HomeX:
            mask.x = On;
 800c8b2:	f04f 0001 	mov.w	r0, #1
            break;
 800c8b6:	4770      	bx	lr
 800c8b8:	4770      	bx	lr
    switch(fn) {
 800c8ba:	3b1a      	subs	r3, #26
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d802      	bhi.n	800c8c8 <xbar_fn_to_axismask+0x2c>

        case Input_LimitZ:
        case Input_LimitZ_Max:
        case Input_LimitZ_2:
        case Input_HomeZ:
            mask.z = On;
 800c8c2:	f04f 0004 	mov.w	r0, #4
        default:
            break;
    }

    return mask;
}
 800c8c6:	4770      	bx	lr
 800c8c8:	4770      	bx	lr
            mask.y = On;
 800c8ca:	f04f 0002 	mov.w	r0, #2
            break;
 800c8ce:	4770      	bx	lr

0800c8d0 <xbar_set_homing_source>:

// Sets limit signals used by homing when home signals are not available.
// For internal use, called by settings.c when homing direction mask is changed.
void xbar_set_homing_source (void)
{
    if(hal.home_cap.a.mask == 0) {
 800c8d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c910 <xbar_set_homing_source+0x40>)
 800c8d2:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800c8d6:	b9d3      	cbnz	r3, 800c90e <xbar_set_homing_source+0x3e>
        home_source.max.mask = hal.limits_cap.max.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800c8d8:	480d      	ldr	r0, [pc, #52]	@ (800c910 <xbar_set_homing_source+0x40>)
 800c8da:	f890 31df 	ldrb.w	r3, [r0, #479]	@ 0x1df
 800c8de:	4a0d      	ldr	r2, [pc, #52]	@ (800c914 <xbar_set_homing_source+0x44>)
 800c8e0:	f892 1110 	ldrb.w	r1, [r2, #272]	@ 0x110
 800c8e4:	ea23 0301 	bic.w	r3, r3, r1
 800c8e8:	f003 0307 	and.w	r3, r3, #7
 800c8ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c918 <xbar_set_homing_source+0x48>)
 800c8ee:	7053      	strb	r3, [r2, #1]
        home_source.min.mask = (~home_source.max.mask) & AXES_BITMASK;
 800c8f0:	43db      	mvns	r3, r3
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	7013      	strb	r3, [r2, #0]
        home_source.max2.mask = hal.limits_cap.max2.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800c8f8:	f890 31e1 	ldrb.w	r3, [r0, #481]	@ 0x1e1
 800c8fc:	ea23 0301 	bic.w	r3, r3, r1
 800c900:	f003 0307 	and.w	r3, r3, #7
 800c904:	70d3      	strb	r3, [r2, #3]
        home_source.min2.mask = (~home_source.max2.mask) & AXES_BITMASK;
 800c906:	43db      	mvns	r3, r3
 800c908:	f003 0307 	and.w	r3, r3, #7
 800c90c:	7093      	strb	r3, [r2, #2]
    }
}
 800c90e:	4770      	bx	lr
 800c910:	200011c0 	.word	0x200011c0
 800c914:	20001bd8 	.word	0x20001bd8
 800c918:	20000dd4 	.word	0x20000dd4

0800c91c <xbar_get_homing_source>:

// Returns limit signals used by homing when home signals are not available.
limit_signals_t xbar_get_homing_source (void)
{
 800c91c:	b082      	sub	sp, #8
    return home_source;
 800c91e:	4b0b      	ldr	r3, [pc, #44]	@ (800c94c <xbar_get_homing_source+0x30>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	2000      	movs	r0, #0
 800c926:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c92a:	f363 0007 	bfi	r0, r3, #0, #8
 800c92e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c932:	f363 200f 	bfi	r0, r3, #8, #8
 800c936:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c93a:	f363 4017 	bfi	r0, r3, #16, #8
 800c93e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c942:	f363 601f 	bfi	r0, r3, #24, #8
}
 800c946:	b002      	add	sp, #8
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20000dd4 	.word	0x20000dd4

0800c950 <xbar_get_homing_source_from_cycle>:

// Returns limit signals used by homing cycle when home signals are not available.
limit_signals_t xbar_get_homing_source_from_cycle (axes_signals_t homing_cycle)
{
 800c950:	b082      	sub	sp, #8
    limit_signals_t source = home_source;
 800c952:	4b1e      	ldr	r3, [pc, #120]	@ (800c9cc <xbar_get_homing_source_from_cycle+0x7c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	9300      	str	r3, [sp, #0]

    if(hal.home_cap.a.mask == 0) {
 800c958:	4b1d      	ldr	r3, [pc, #116]	@ (800c9d0 <xbar_get_homing_source_from_cycle+0x80>)
 800c95a:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 800c95e:	b9fb      	cbnz	r3, 800c9a0 <xbar_get_homing_source_from_cycle+0x50>
        source.min.mask &= homing_cycle.mask;
 800c960:	f89d 3000 	ldrb.w	r3, [sp]
 800c964:	b2c2      	uxtb	r2, r0
 800c966:	ea03 0100 	and.w	r1, r3, r0
 800c96a:	f88d 1000 	strb.w	r1, [sp]
        source.min2.mask &= homing_cycle.mask;
 800c96e:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800c972:	ea01 0c00 	and.w	ip, r1, r0
 800c976:	f88d c002 	strb.w	ip, [sp, #2]
        source.min.mask |= source.min2.mask;
 800c97a:	430b      	orrs	r3, r1
 800c97c:	4003      	ands	r3, r0
 800c97e:	f88d 3000 	strb.w	r3, [sp]
        source.max.mask &= homing_cycle.mask;
 800c982:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c986:	ea03 0100 	and.w	r1, r3, r0
 800c98a:	f88d 1001 	strb.w	r1, [sp, #1]
        source.max2.mask &= homing_cycle.mask;
 800c98e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800c992:	4008      	ands	r0, r1
 800c994:	f88d 0003 	strb.w	r0, [sp, #3]
        source.max.mask |= source.max2.mask;
 800c998:	430b      	orrs	r3, r1
 800c99a:	4013      	ands	r3, r2
 800c99c:	f88d 3001 	strb.w	r3, [sp, #1]
    }

    return source;
 800c9a0:	9b00      	ldr	r3, [sp, #0]
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c9aa:	f363 0007 	bfi	r0, r3, #0, #8
 800c9ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c9b2:	f363 200f 	bfi	r0, r3, #8, #8
 800c9b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c9ba:	f363 4017 	bfi	r0, r3, #16, #8
 800c9be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c9c2:	f363 601f 	bfi	r0, r3, #24, #8
}
 800c9c6:	b002      	add	sp, #8
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	20000dd4 	.word	0x20000dd4
 800c9d0:	200011c0 	.word	0x200011c0

0800c9d4 <xbar_fn_to_pinname>:

const char *xbar_fn_to_pinname (pin_function_t fn)
{
 800c9d4:	4601      	mov	r1, r0
    const char *name = NULL;
    uint_fast8_t idx = sizeof(pin_names) / sizeof(pin_name_t);
 800c9d6:	238d      	movs	r3, #141	@ 0x8d
    const char *name = NULL;
 800c9d8:	2000      	movs	r0, #0
 800c9da:	e001      	b.n	800c9e0 <xbar_fn_to_pinname+0xc>

    do {
        if(pin_names[--idx].function == fn)
            name = pin_names[idx].name;
    } while(idx && !name);
 800c9dc:	b15b      	cbz	r3, 800c9f6 <xbar_fn_to_pinname+0x22>
 800c9de:	b950      	cbnz	r0, 800c9f6 <xbar_fn_to_pinname+0x22>
        if(pin_names[--idx].function == fn)
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	4a07      	ldr	r2, [pc, #28]	@ (800ca00 <xbar_fn_to_pinname+0x2c>)
 800c9e4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800c9e8:	428a      	cmp	r2, r1
 800c9ea:	d1f7      	bne.n	800c9dc <xbar_fn_to_pinname+0x8>
            name = pin_names[idx].name;
 800c9ec:	4a04      	ldr	r2, [pc, #16]	@ (800ca00 <xbar_fn_to_pinname+0x2c>)
 800c9ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c9f2:	6850      	ldr	r0, [r2, #4]
 800c9f4:	e7f2      	b.n	800c9dc <xbar_fn_to_pinname+0x8>

    return name ? name : "N/A";
 800c9f6:	b100      	cbz	r0, 800c9fa <xbar_fn_to_pinname+0x26>
}
 800c9f8:	4770      	bx	lr
    return name ? name : "N/A";
 800c9fa:	4802      	ldr	r0, [pc, #8]	@ (800ca04 <xbar_fn_to_pinname+0x30>)
 800c9fc:	e7fc      	b.n	800c9f8 <xbar_fn_to_pinname+0x24>
 800c9fe:	bf00      	nop
 800ca00:	080298bc 	.word	0x080298bc
 800ca04:	08029208 	.word	0x08029208

0800ca08 <xbar_fn_to_signals_mask>:

control_signals_t xbar_fn_to_signals_mask (pin_function_t fn)
{
    control_signals_t signals;

    signals.mask = fn >= Input_Probe ? 0 : 1 << (uint32_t)fn;
 800ca08:	280d      	cmp	r0, #13
 800ca0a:	d804      	bhi.n	800ca16 <xbar_fn_to_signals_mask+0xe>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ca12:	b280      	uxth	r0, r0
 800ca14:	4770      	bx	lr
 800ca16:	2000      	movs	r0, #0

    return signals;
}
 800ca18:	4770      	bx	lr
	...

0800ca1c <errors_get_details>:
}

error_details_t *errors_get_details (void)
{
    return &details;
}
 800ca1c:	4800      	ldr	r0, [pc, #0]	@ (800ca20 <errors_get_details+0x4>)
 800ca1e:	4770      	bx	lr
 800ca20:	2000019c 	.word	0x2000019c

0800ca24 <init_sync_motion>:

    return add_cmd != NULL;
}

static status_code_t init_sync_motion (plan_line_data_t *pl_data, float pitch)
{
 800ca24:	b508      	push	{r3, lr}
 800ca26:	ed2d 8b02 	vpush	{d8}
    if(pl_data->spindle.hal->get_data == NULL)
 800ca2a:	6903      	ldr	r3, [r0, #16]
 800ca2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d049      	beq.n	800cac6 <init_sync_motion+0xa2>
        FAIL(Status_GcodeUnsupportedCommand); // [Spindle not sync capable]

    pl_data->condition.inverse_time = Off;
 800ca32:	7d03      	ldrb	r3, [r0, #20]
 800ca34:	f36f 1345 	bfc	r3, #5, #1
 800ca38:	7503      	strb	r3, [r0, #20]
    pl_data->feed_rate = gc_state.distance_per_rev = pitch;
 800ca3a:	4b26      	ldr	r3, [pc, #152]	@ (800cad4 <init_sync_motion+0xb0>)
 800ca3c:	ed83 0a19 	vstr	s0, [r3, #100]	@ 0x64
 800ca40:	ed80 0a00 	vstr	s0, [r0]
    pl_data->spindle.css = NULL;                    // Switch off CSS.
 800ca44:	2300      	movs	r3, #0
 800ca46:	60c3      	str	r3, [r0, #12]
    pl_data->overrides = sys.override.control;      // Use current override flags and
 800ca48:	4b23      	ldr	r3, [pc, #140]	@ (800cad8 <init_sync_motion+0xb4>)
 800ca4a:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800ca4e:	7602      	strb	r2, [r0, #24]
    pl_data->overrides.sync = On;                   // set to sync overrides on execution of motion.
 800ca50:	b2d2      	uxtb	r2, r2
 800ca52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ca56:	7602      	strb	r2, [r0, #24]

    // Disable feed rate and spindle overrides for the duration of the cycle.
    pl_data->overrides.spindle_rpm_disable = sys.override.control.spindle_rpm_disable = On;
 800ca58:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800ca5c:	f042 0204 	orr.w	r2, r2, #4
 800ca60:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800ca64:	7e02      	ldrb	r2, [r0, #24]
 800ca66:	f042 0204 	orr.w	r2, r2, #4
 800ca6a:	7602      	strb	r2, [r0, #24]
    pl_data->overrides.feed_rate_disable = sys.override.control.feed_rate_disable = On;
 800ca6c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800ca70:	f042 0201 	orr.w	r2, r2, #1
 800ca74:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 800ca78:	7e03      	ldrb	r3, [r0, #24]
 800ca7a:	f043 0301 	orr.w	r3, r3, #1
 800ca7e:	7603      	strb	r3, [r0, #24]
    pl_data->spindle.hal->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 800ca80:	6903      	ldr	r3, [r0, #16]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	2264      	movs	r2, #100	@ 0x64
 800ca86:	60da      	str	r2, [r3, #12]
    // TODO: need for gc_state.distance_per_rev to be reset on modal change?
    float feed_rate = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm;
 800ca88:	ed90 8a00 	vldr	s16, [r0]
 800ca8c:	6903      	ldr	r3, [r0, #16]
 800ca8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca90:	2001      	movs	r0, #1
 800ca92:	4798      	blx	r3
 800ca94:	edd0 7a00 	vldr	s15, [r0]
 800ca98:	ee68 7a27 	vmul.f32	s15, s16, s15

    if(feed_rate == 0.0f)
 800ca9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800caa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa4:	d011      	beq.n	800caca <init_sync_motion+0xa6>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]

    if(feed_rate > settings.axis[Z_AXIS].max_rate * 0.9f)
 800caa6:	4b0d      	ldr	r3, [pc, #52]	@ (800cadc <init_sync_motion+0xb8>)
 800caa8:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800caac:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800cae0 <init_sync_motion+0xbc>
 800cab0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cabc:	d407      	bmi.n	800cace <init_sync_motion+0xaa>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]

    return Status_OK;
 800cabe:	2000      	movs	r0, #0
}
 800cac0:	ecbd 8b02 	vpop	{d8}
 800cac4:	bd08      	pop	{r3, pc}
        FAIL(Status_GcodeUnsupportedCommand); // [Spindle not sync capable]
 800cac6:	2014      	movs	r0, #20
 800cac8:	e7fa      	b.n	800cac0 <init_sync_motion+0x9c>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]
 800caca:	2029      	movs	r0, #41	@ 0x29
 800cacc:	e7f8      	b.n	800cac0 <init_sync_motion+0x9c>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]
 800cace:	202b      	movs	r0, #43	@ 0x2b
 800cad0:	e7f6      	b.n	800cac0 <init_sync_motion+0x9c>
 800cad2:	bf00      	nop
 800cad4:	20000ef8 	.word	0x20000ef8
 800cad8:	200014a0 	.word	0x200014a0
 800cadc:	20001bd8 	.word	0x20001bd8
 800cae0:	3f666666 	.word	0x3f666666

0800cae4 <tool_get_pending>:
{
 800cae4:	b470      	push	{r4, r5, r6}
 800cae6:	4604      	mov	r4, r0
    if(grbl.tool_table.n_tools)
 800cae8:	4b0d      	ldr	r3, [pc, #52]	@ (800cb20 <tool_get_pending+0x3c>)
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	b13b      	cbz	r3, 800cafe <tool_get_pending+0x1a>
        return &grbl.tool_table.tool[tool_id];
 800caee:	4b0c      	ldr	r3, [pc, #48]	@ (800cb20 <tool_get_pending+0x3c>)
 800caf0:	69d8      	ldr	r0, [r3, #28]
 800caf2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800caf6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800cafa:	bc70      	pop	{r4, r5, r6}
 800cafc:	4770      	bx	lr
    memcpy(&tool_data, gc_state.tool, sizeof(tool_data_t));
 800cafe:	4b09      	ldr	r3, [pc, #36]	@ (800cb24 <tool_get_pending+0x40>)
 800cb00:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 800cb04:	4d08      	ldr	r5, [pc, #32]	@ (800cb28 <tool_get_pending+0x44>)
 800cb06:	46ac      	mov	ip, r5
 800cb08:	6830      	ldr	r0, [r6, #0]
 800cb0a:	6871      	ldr	r1, [r6, #4]
 800cb0c:	68b2      	ldr	r2, [r6, #8]
 800cb0e:	68f3      	ldr	r3, [r6, #12]
 800cb10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb14:	6930      	ldr	r0, [r6, #16]
 800cb16:	f8cc 0000 	str.w	r0, [ip]
    tool_data.tool_id = tool_id;
 800cb1a:	612c      	str	r4, [r5, #16]
    return &tool_data;
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	e7ec      	b.n	800cafa <tool_get_pending+0x16>
 800cb20:	200013a8 	.word	0x200013a8
 800cb24:	20000ef8 	.word	0x20000ef8
 800cb28:	20000dd8 	.word	0x20000dd8

0800cb2c <add_offset>:
{
 800cb2c:	b508      	push	{r3, lr}
    gc_state.offset_id = (gc_state.offset_id + 1) & (MAX_OFFSET_ENTRIES - 1);
 800cb2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb64 <add_offset+0x38>)
 800cb30:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 800cb34:	3201      	adds	r2, #1
 800cb36:	f002 0203 	and.w	r2, r2, #3
 800cb3a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    memcpy(&gc_state.offset_queue[gc_state.offset_id], &gc_state.g92_coord_offset, sizeof(coord_data_t));
 800cb3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cb42:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800cb46:	f10c 0c80 	add.w	ip, ip, #128	@ 0x80
 800cb4a:	449c      	add	ip, r3
 800cb4c:	33b8      	adds	r3, #184	@ 0xb8
 800cb4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb50:	f8cc 0004 	str.w	r0, [ip, #4]
 800cb54:	f8cc 1008 	str.w	r1, [ip, #8]
 800cb58:	f8cc 200c 	str.w	r2, [ip, #12]
    system_flag_wco_change();
 800cb5c:	f014 febe 	bl	80218dc <system_flag_wco_change>
}
 800cb60:	bd08      	pop	{r3, pc}
 800cb62:	bf00      	nop
 800cb64:	20000ef8 	.word	0x20000ef8

0800cb68 <add_output_command>:
{
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	4604      	mov	r4, r0
    if((add_cmd = malloc(sizeof(output_command_t)))) {
 800cb6c:	200c      	movs	r0, #12
 800cb6e:	f015 fc95 	bl	802249c <malloc>
 800cb72:	4601      	mov	r1, r0
 800cb74:	b168      	cbz	r0, 800cb92 <add_output_command+0x2a>
        memcpy(add_cmd, command, sizeof(output_command_t));
 800cb76:	6820      	ldr	r0, [r4, #0]
 800cb78:	6862      	ldr	r2, [r4, #4]
 800cb7a:	68a3      	ldr	r3, [r4, #8]
 800cb7c:	6008      	str	r0, [r1, #0]
 800cb7e:	604a      	str	r2, [r1, #4]
 800cb80:	608b      	str	r3, [r1, #8]
        if(output_commands == NULL)
 800cb82:	4b07      	ldr	r3, [pc, #28]	@ (800cba0 <add_output_command+0x38>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	b143      	cbz	r3, 800cb9a <add_output_command+0x32>
            while(cmd->next)
 800cb88:	461a      	mov	r2, r3
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1fb      	bne.n	800cb88 <add_output_command+0x20>
            cmd->next = add_cmd;
 800cb90:	6091      	str	r1, [r2, #8]
}
 800cb92:	1e08      	subs	r0, r1, #0
 800cb94:	bf18      	it	ne
 800cb96:	2001      	movne	r0, #1
 800cb98:	bd10      	pop	{r4, pc}
            output_commands = add_cmd;
 800cb9a:	4b01      	ldr	r3, [pc, #4]	@ (800cba0 <add_output_command+0x38>)
 800cb9c:	6019      	str	r1, [r3, #0]
 800cb9e:	e7f8      	b.n	800cb92 <add_output_command+0x2a>
 800cba0:	20000ec4 	.word	0x20000ec4

0800cba4 <gc_get_scaling>:
}
 800cba4:	4800      	ldr	r0, [pc, #0]	@ (800cba8 <gc_get_scaling+0x4>)
 800cba6:	4770      	bx	lr
 800cba8:	200001b4 	.word	0x200001b4

0800cbac <gc_get_g51_state>:
    axes_signals_t scaled = {0};
 800cbac:	f04f 0000 	mov.w	r0, #0
    uint_fast8_t idx = N_AXIS;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e002      	b.n	800cbba <gc_get_g51_state+0xe>
            scaled.value |= 0x01;
 800cbb4:	f041 0001 	orr.w	r0, r1, #1
    } while(idx);
 800cbb8:	b19b      	cbz	r3, 800cbe2 <gc_get_g51_state+0x36>
        scaled.value <<= 1;
 800cbba:	b2c0      	uxtb	r0, r0
 800cbbc:	0040      	lsls	r0, r0, #1
 800cbbe:	b2c1      	uxtb	r1, r0
 800cbc0:	4608      	mov	r0, r1
        if(scale_factor.ijk[--idx] != 1.0f)
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	f103 0c02 	add.w	ip, r3, #2
 800cbc8:	4a06      	ldr	r2, [pc, #24]	@ (800cbe4 <gc_get_g51_state+0x38>)
 800cbca:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800cbce:	ed92 7a01 	vldr	s14, [r2, #4]
 800cbd2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cbd6:	eeb4 7a67 	vcmp.f32	s14, s15
 800cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbde:	d0eb      	beq.n	800cbb8 <gc_get_g51_state+0xc>
 800cbe0:	e7e8      	b.n	800cbb4 <gc_get_g51_state+0x8>
}
 800cbe2:	4770      	bx	lr
 800cbe4:	200001a8 	.word	0x200001a8

0800cbe8 <set_scaling>:
{
 800cbe8:	b510      	push	{r4, lr}
 800cbea:	ed2d 8b02 	vpush	{d8}
 800cbee:	eeb0 8a40 	vmov.f32	s16, s0
    axes_signals_t state = gc_get_g51_state();
 800cbf2:	f7ff ffdb 	bl	800cbac <gc_get_g51_state>
    uint_fast8_t idx = N_AXIS;
 800cbf6:	2303      	movs	r3, #3
        scale_factor.ijk[--idx] = factor;
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	4a12      	ldr	r2, [pc, #72]	@ (800cc44 <set_scaling+0x5c>)
 800cbfc:	1c99      	adds	r1, r3, #2
 800cbfe:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800cc02:	ed81 8a01 	vstr	s16, [r1, #4]
        scale_factor.xyz[idx] = 0.0f;
 800cc06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	6011      	str	r1, [r2, #0]
    } while(idx);
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1f2      	bne.n	800cbf8 <set_scaling+0x10>
    gc_state.modal.scaling_active = factor != 1.0f;
 800cc12:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cc16:	eeb4 8a67 	vcmp.f32	s16, s15
 800cc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc1e:	bf14      	ite	ne
 800cc20:	2201      	movne	r2, #1
 800cc22:	2200      	moveq	r2, #0
 800cc24:	4b08      	ldr	r3, [pc, #32]	@ (800cc48 <set_scaling+0x60>)
 800cc26:	779a      	strb	r2, [r3, #30]
    if(state.value != gc_get_g51_state().value)
 800cc28:	b2c4      	uxtb	r4, r0
 800cc2a:	f7ff ffbf 	bl	800cbac <gc_get_g51_state>
 800cc2e:	b2c0      	uxtb	r0, r0
 800cc30:	4284      	cmp	r4, r0
 800cc32:	d102      	bne.n	800cc3a <set_scaling+0x52>
}
 800cc34:	ecbd 8b02 	vpop	{d8}
 800cc38:	bd10      	pop	{r4, pc}
        system_add_rt_report(Report_Scaling);
 800cc3a:	2002      	movs	r0, #2
 800cc3c:	f014 fdc2 	bl	80217c4 <system_add_rt_report>
}
 800cc40:	e7f8      	b.n	800cc34 <set_scaling+0x4c>
 800cc42:	bf00      	nop
 800cc44:	200001a8 	.word	0x200001a8
 800cc48:	20000ef8 	.word	0x20000ef8

0800cc4c <gc_get_offset>:
{
 800cc4c:	b510      	push	{r4, lr}
 800cc4e:	4604      	mov	r4, r0
    if(real_time &&
 800cc50:	b311      	cbz	r1, 800cc98 <gc_get_offset+0x4c>
        !(settings.status_report.machine_position && settings.status_report.sync_on_wco_change) &&
 800cc52:	4b1c      	ldr	r3, [pc, #112]	@ (800ccc4 <gc_get_offset+0x78>)
 800cc54:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	@ 0xfc
    if(real_time &&
 800cc58:	f240 1301 	movw	r3, #257	@ 0x101
 800cc5c:	4393      	bics	r3, r2
 800cc5e:	d01b      	beq.n	800cc98 <gc_get_offset+0x4c>
          (offset_id = st_get_offset_id()) >= 0)
 800cc60:	f013 fa58 	bl	8020114 <st_get_offset_id>
        !(settings.status_report.machine_position && settings.status_report.sync_on_wco_change) &&
 800cc64:	2800      	cmp	r0, #0
 800cc66:	db17      	blt.n	800cc98 <gc_get_offset+0x4c>
        return gc_state.modal.coord_system.xyz[idx] + gc_state.offset_queue[offset_id].values[idx] + gc_state.tool_length_offset[idx];
 800cc68:	4a17      	ldr	r2, [pc, #92]	@ (800ccc8 <gc_get_offset+0x7c>)
 800cc6a:	1ca3      	adds	r3, r4, #2
 800cc6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc70:	ed93 0a00 	vldr	s0, [r3]
 800cc74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cc78:	1903      	adds	r3, r0, r4
 800cc7a:	3320      	adds	r3, #32
 800cc7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc80:	edd3 7a01 	vldr	s15, [r3, #4]
 800cc84:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc88:	3430      	adds	r4, #48	@ 0x30
 800cc8a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800cc8e:	edd2 7a01 	vldr	s15, [r2, #4]
 800cc92:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc96:	e014      	b.n	800ccc2 <gc_get_offset+0x76>
        return gc_state.modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800cc98:	4b0b      	ldr	r3, [pc, #44]	@ (800ccc8 <gc_get_offset+0x7c>)
 800cc9a:	1ca2      	adds	r2, r4, #2
 800cc9c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cca0:	ed92 0a00 	vldr	s0, [r2]
 800cca4:	f104 022e 	add.w	r2, r4, #46	@ 0x2e
 800cca8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ccac:	edd2 7a00 	vldr	s15, [r2]
 800ccb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ccb4:	3430      	adds	r4, #48	@ 0x30
 800ccb6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ccba:	edd3 7a01 	vldr	s15, [r3, #4]
 800ccbe:	ee30 0a27 	vadd.f32	s0, s0, s15
}
 800ccc2:	bd10      	pop	{r4, pc}
 800ccc4:	20001bd8 	.word	0x20001bd8
 800ccc8:	20000ef8 	.word	0x20000ef8

0800cccc <gc_set_tool_offset>:
{
 800cccc:	b500      	push	{lr}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	9201      	str	r2, [sp, #4]
    switch(mode) {
 800ccd2:	4684      	mov	ip, r0
 800ccd4:	b120      	cbz	r0, 800cce0 <gc_set_tool_offset+0x14>
 800ccd6:	2802      	cmp	r0, #2
 800ccd8:	d023      	beq.n	800cd22 <gc_set_tool_offset+0x56>
    gc_state.modal.tool_offset_mode = mode;
 800ccda:	4b2c      	ldr	r3, [pc, #176]	@ (800cd8c <gc_set_tool_offset+0xc0>)
 800ccdc:	71d8      	strb	r0, [r3, #7]
    if(tlo_changed) {
 800ccde:	e04b      	b.n	800cd78 <gc_set_tool_offset+0xac>
    switch(mode) {
 800cce0:	2000      	movs	r0, #0
 800cce2:	2203      	movs	r2, #3
 800cce4:	e007      	b.n	800ccf6 <gc_set_tool_offset+0x2a>
                    gc_state.tool->offset[idx] = 0.0f;
 800cce6:	4b29      	ldr	r3, [pc, #164]	@ (800cd8c <gc_set_tool_offset+0xc0>)
 800cce8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ccec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ccf0:	6019      	str	r1, [r3, #0]
            } while(idx);
 800ccf2:	2a00      	cmp	r2, #0
 800ccf4:	d03c      	beq.n	800cd70 <gc_set_tool_offset+0xa4>
                idx--;
 800ccf6:	3a01      	subs	r2, #1
                tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 800ccf8:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 800ccfc:	4b23      	ldr	r3, [pc, #140]	@ (800cd8c <gc_set_tool_offset+0xc0>)
 800ccfe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd02:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd06:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0e:	bf18      	it	ne
 800cd10:	f040 0001 	orrne.w	r0, r0, #1
                gc_state.tool_length_offset[idx] = 0.0f;
 800cd14:	2100      	movs	r1, #0
 800cd16:	6059      	str	r1, [r3, #4]
                if(grbl.tool_table.n_tools == 0)
 800cd18:	4b1d      	ldr	r3, [pc, #116]	@ (800cd90 <gc_set_tool_offset+0xc4>)
 800cd1a:	699b      	ldr	r3, [r3, #24]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1e8      	bne.n	800ccf2 <gc_set_tool_offset+0x26>
 800cd20:	e7e1      	b.n	800cce6 <gc_set_tool_offset+0x1a>
                float new_offset = offset / settings.axis[idx].steps_per_mm;
 800cd22:	eddd 7a01 	vldr	s15, [sp, #4]
 800cd26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd2a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800cd2e:	4b19      	ldr	r3, [pc, #100]	@ (800cd94 <gc_set_tool_offset+0xc8>)
 800cd30:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cd34:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800cd38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                tlo_changed |= gc_state.tool_length_offset[idx] != new_offset;
 800cd3c:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800cd40:	4b12      	ldr	r3, [pc, #72]	@ (800cd8c <gc_set_tool_offset+0xc0>)
 800cd42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cd46:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd4a:	eef4 7a47 	vcmp.f32	s15, s14
 800cd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd52:	bf14      	ite	ne
 800cd54:	2001      	movne	r0, #1
 800cd56:	2000      	moveq	r0, #0
                gc_state.tool_length_offset[idx] = new_offset;
 800cd58:	ed83 7a01 	vstr	s14, [r3, #4]
                if(grbl.tool_table.n_tools == 0)
 800cd5c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd90 <gc_set_tool_offset+0xc4>)
 800cd5e:	699b      	ldr	r3, [r3, #24]
 800cd60:	b933      	cbnz	r3, 800cd70 <gc_set_tool_offset+0xa4>
                    gc_state.tool->offset[idx] = new_offset;
 800cd62:	4b0a      	ldr	r3, [pc, #40]	@ (800cd8c <gc_set_tool_offset+0xc0>)
 800cd64:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800cd68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd6c:	ed83 7a00 	vstr	s14, [r3]
    gc_state.modal.tool_offset_mode = mode;
 800cd70:	4b06      	ldr	r3, [pc, #24]	@ (800cd8c <gc_set_tool_offset+0xc0>)
 800cd72:	f883 c007 	strb.w	ip, [r3, #7]
    if(tlo_changed) {
 800cd76:	b910      	cbnz	r0, 800cd7e <gc_set_tool_offset+0xb2>
}
 800cd78:	b003      	add	sp, #12
 800cd7a:	f85d fb04 	ldr.w	pc, [sp], #4
        system_add_rt_report(Report_ToolOffset);
 800cd7e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cd82:	f014 fd1f 	bl	80217c4 <system_add_rt_report>
        system_flag_wco_change();
 800cd86:	f014 fda9 	bl	80218dc <system_flag_wco_change>
}
 800cd8a:	e7f5      	b.n	800cd78 <gc_set_tool_offset+0xac>
 800cd8c:	20000ef8 	.word	0x20000ef8
 800cd90:	200013a8 	.word	0x200013a8
 800cd94:	20001bd8 	.word	0x20001bd8

0800cd98 <gc_get_plane_data>:
    switch (select) {
 800cd98:	b141      	cbz	r1, 800cdac <gc_get_plane_data+0x14>
 800cd9a:	2901      	cmp	r1, #1
 800cd9c:	d00d      	beq.n	800cdba <gc_get_plane_data+0x22>
            plane->axis_0 = Y_AXIS;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = Z_AXIS;
 800cda2:	2302      	movs	r3, #2
 800cda4:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = X_AXIS;
 800cda6:	2300      	movs	r3, #0
 800cda8:	7083      	strb	r3, [r0, #2]
}
 800cdaa:	4770      	bx	lr
            plane->axis_0 = X_AXIS;
 800cdac:	2300      	movs	r3, #0
 800cdae:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = Y_AXIS;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = Z_AXIS;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	7083      	strb	r3, [r0, #2]
            break;
 800cdb8:	4770      	bx	lr
            plane->axis_0 = Z_AXIS;
 800cdba:	2302      	movs	r3, #2
 800cdbc:	7003      	strb	r3, [r0, #0]
            plane->axis_1 = X_AXIS;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	7043      	strb	r3, [r0, #1]
            plane->axis_linear = Y_AXIS;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	7083      	strb	r3, [r0, #2]
            break;
 800cdc6:	4770      	bx	lr

0800cdc8 <gc_init>:
{
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	b086      	sub	sp, #24
    if(sys.cold_start) {
 800cdcc:	4b46      	ldr	r3, [pc, #280]	@ (800cee8 <gc_init+0x120>)
 800cdce:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cdd2:	b18b      	cbz	r3, 800cdf8 <gc_init+0x30>
        memset(&gc_state, 0, sizeof(parser_state_t));
 800cdd4:	4c45      	ldr	r4, [pc, #276]	@ (800ceec <gc_init+0x124>)
 800cdd6:	22d4      	movs	r2, #212	@ 0xd4
 800cdd8:	2100      	movs	r1, #0
 800cdda:	4620      	mov	r0, r4
 800cddc:	f017 fc27 	bl	802462e <memset>
        gc_state.tool = &grbl.tool_table.tool[0];
 800cde0:	4a43      	ldr	r2, [pc, #268]	@ (800cef0 <gc_init+0x128>)
 800cde2:	69d3      	ldr	r3, [r2, #28]
 800cde4:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
        if(grbl.tool_table.n_tools == 0)
 800cde8:	6992      	ldr	r2, [r2, #24]
 800cdea:	b9da      	cbnz	r2, 800ce24 <gc_init+0x5c>
            memset(grbl.tool_table.tool, 0, sizeof(tool_data_t));
 800cdec:	601a      	str	r2, [r3, #0]
 800cdee:	605a      	str	r2, [r3, #4]
 800cdf0:	609a      	str	r2, [r3, #8]
 800cdf2:	60da      	str	r2, [r3, #12]
 800cdf4:	611a      	str	r2, [r3, #16]
 800cdf6:	e015      	b.n	800ce24 <gc_init+0x5c>
        memset(&gc_state, 0, offsetof(parser_state_t, g92_coord_offset));
 800cdf8:	4c3c      	ldr	r4, [pc, #240]	@ (800ceec <gc_init+0x124>)
 800cdfa:	22b8      	movs	r2, #184	@ 0xb8
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f017 fc15 	bl	802462e <memset>
        gc_state.tool_pending = gc_state.tool->tool_id;
 800ce04:	f8d4 00d0 	ldr.w	r0, [r4, #208]	@ 0xd0
 800ce08:	6903      	ldr	r3, [r0, #16]
 800ce0a:	67a3      	str	r3, [r4, #120]	@ 0x78
        if(hal.tool.select)
 800ce0c:	4b39      	ldr	r3, [pc, #228]	@ (800cef4 <gc_init+0x12c>)
 800ce0e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800ce12:	b13b      	cbz	r3, 800ce24 <gc_init+0x5c>
            hal.tool.select(gc_state.tool, false);
 800ce14:	2100      	movs	r1, #0
 800ce16:	4798      	blx	r3
 800ce18:	e004      	b.n	800ce24 <gc_init+0x5c>
        output_command_t *next = output_commands->next;
 800ce1a:	6884      	ldr	r4, [r0, #8]
        free(output_commands);
 800ce1c:	f015 fb46 	bl	80224ac <free>
        output_commands = next;
 800ce20:	4b35      	ldr	r3, [pc, #212]	@ (800cef8 <gc_init+0x130>)
 800ce22:	601c      	str	r4, [r3, #0]
    while(output_commands) {
 800ce24:	4b34      	ldr	r3, [pc, #208]	@ (800cef8 <gc_init+0x130>)
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d1f6      	bne.n	800ce1a <gc_init+0x52>
    gc_state.modal.override_ctrl = sys.override.control;
 800ce2c:	4c2f      	ldr	r4, [pc, #188]	@ (800ceec <gc_init+0x124>)
 800ce2e:	4b2e      	ldr	r3, [pc, #184]	@ (800cee8 <gc_init+0x120>)
 800ce30:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ce34:	7723      	strb	r3, [r4, #28]
    gc_state.spindle.hal = spindle_get(0);
 800ce36:	f011 f877 	bl	801df28 <spindle_get>
 800ce3a:	65e0      	str	r0, [r4, #92]	@ 0x5c
    set_scaling(1.0f);
 800ce3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ce40:	f7ff fed2 	bl	800cbe8 <set_scaling>
    if (!settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz))
 800ce44:	f104 0108 	add.w	r1, r4, #8
 800ce48:	7d20      	ldrb	r0, [r4, #20]
 800ce4a:	f010 f8a3 	bl	801cf94 <settings_read_coord_data>
 800ce4e:	b918      	cbnz	r0, 800ce58 <gc_init+0x90>
        grbl.report.status_message(Status_SettingReadFail);
 800ce50:	4b27      	ldr	r3, [pc, #156]	@ (800cef0 <gc_init+0x128>)
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	2007      	movs	r0, #7
 800ce56:	4798      	blx	r3
    if(sys.cold_start && !settings.flags.g92_is_volatile) {
 800ce58:	4b23      	ldr	r3, [pc, #140]	@ (800cee8 <gc_init+0x120>)
 800ce5a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ce5e:	b12b      	cbz	r3, 800ce6c <gc_init+0xa4>
 800ce60:	4b26      	ldr	r3, [pc, #152]	@ (800cefc <gc_init+0x134>)
 800ce62:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 800ce66:	f013 0f02 	tst.w	r3, #2
 800ce6a:	d025      	beq.n	800ceb8 <gc_init+0xf0>
    if(grbl.on_wco_changed && (!sys.cold_start ||
 800ce6c:	4b20      	ldr	r3, [pc, #128]	@ (800cef0 <gc_init+0x128>)
 800ce6e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800ce70:	b1cc      	cbz	r4, 800cea6 <gc_init+0xde>
 800ce72:	4b1d      	ldr	r3, [pc, #116]	@ (800cee8 <gc_init+0x120>)
 800ce74:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ce78:	b1a3      	cbz	r3, 800cea4 <gc_init+0xdc>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	9301      	str	r3, [sp, #4]
 800ce80:	9302      	str	r3, [sp, #8]
 800ce82:	220c      	movs	r2, #12
 800ce84:	4669      	mov	r1, sp
 800ce86:	481e      	ldr	r0, [pc, #120]	@ (800cf00 <gc_init+0x138>)
 800ce88:	f017 fba7 	bl	80245da <memcmp>
    if(grbl.on_wco_changed && (!sys.cold_start ||
 800ce8c:	b950      	cbnz	r0, 800cea4 <gc_init+0xdc>
                                 !is0_position_vector(gc_state.g92_coord_offset)))
 800ce8e:	2300      	movs	r3, #0
 800ce90:	9303      	str	r3, [sp, #12]
 800ce92:	9304      	str	r3, [sp, #16]
 800ce94:	9305      	str	r3, [sp, #20]
 800ce96:	220c      	movs	r2, #12
 800ce98:	eb0d 0102 	add.w	r1, sp, r2
 800ce9c:	4819      	ldr	r0, [pc, #100]	@ (800cf04 <gc_init+0x13c>)
 800ce9e:	f017 fb9c 	bl	80245da <memcmp>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800cea2:	b100      	cbz	r0, 800cea6 <gc_init+0xde>
        grbl.on_wco_changed();
 800cea4:	47a0      	blx	r4
    ngc_modal_state_invalidate();
 800cea6:	f007 ffd5 	bl	8014e54 <ngc_modal_state_invalidate>
    if(grbl.on_parser_init)
 800ceaa:	4b11      	ldr	r3, [pc, #68]	@ (800cef0 <gc_init+0x128>)
 800ceac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceae:	b10b      	cbz	r3, 800ceb4 <gc_init+0xec>
        grbl.on_parser_init(&gc_state);
 800ceb0:	480e      	ldr	r0, [pc, #56]	@ (800ceec <gc_init+0x124>)
 800ceb2:	4798      	blx	r3
}
 800ceb4:	b006      	add	sp, #24
 800ceb6:	bd10      	pop	{r4, pc}
        if(!settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset))
 800ceb8:	4912      	ldr	r1, [pc, #72]	@ (800cf04 <gc_init+0x13c>)
 800ceba:	200b      	movs	r0, #11
 800cebc:	f010 f86a 	bl	801cf94 <settings_read_coord_data>
 800cec0:	b920      	cbnz	r0, 800cecc <gc_init+0x104>
            grbl.report.status_message(Status_SettingReadFail);
 800cec2:	4b0b      	ldr	r3, [pc, #44]	@ (800cef0 <gc_init+0x128>)
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	2007      	movs	r0, #7
 800cec8:	4798      	blx	r3
 800ceca:	e7cf      	b.n	800ce6c <gc_init+0xa4>
            memcpy(&gc_state.offset_queue[gc_state.offset_id], &gc_state.g92_coord_offset, sizeof(coord_data_t));
 800cecc:	4c07      	ldr	r4, [pc, #28]	@ (800ceec <gc_init+0x124>)
 800cece:	f994 3082 	ldrsb.w	r3, [r4, #130]	@ 0x82
 800ced2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	3380      	adds	r3, #128	@ 0x80
 800ceda:	4423      	add	r3, r4
 800cedc:	34b8      	adds	r4, #184	@ 0xb8
 800cede:	cc07      	ldmia	r4!, {r0, r1, r2}
 800cee0:	6058      	str	r0, [r3, #4]
 800cee2:	6099      	str	r1, [r3, #8]
 800cee4:	60da      	str	r2, [r3, #12]
 800cee6:	e7c1      	b.n	800ce6c <gc_init+0xa4>
 800cee8:	200014a0 	.word	0x200014a0
 800ceec:	20000ef8 	.word	0x20000ef8
 800cef0:	200013a8 	.word	0x200013a8
 800cef4:	200011c0 	.word	0x200011c0
 800cef8:	20000ec4 	.word	0x20000ec4
 800cefc:	20001bd8 	.word	0x20001bd8
 800cf00:	20000f00 	.word	0x20000f00
 800cf04:	20000fb0 	.word	0x20000fb0

0800cf08 <gc_spindle_off>:
{
 800cf08:	b508      	push	{r3, lr}
    gc_state.spindle.rpm = 0.0f;
 800cf0a:	4b05      	ldr	r3, [pc, #20]	@ (800cf20 <gc_spindle_off+0x18>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	651a      	str	r2, [r3, #80]	@ 0x50
    gc_state.modal.spindle.state.value = 0;
 800cf10:	2200      	movs	r2, #0
 800cf12:	769a      	strb	r2, [r3, #26]
    spindle_all_off();
 800cf14:	f011 fa14 	bl	801e340 <spindle_all_off>
    system_add_rt_report(Report_Spindle);
 800cf18:	2010      	movs	r0, #16
 800cf1a:	f014 fc53 	bl	80217c4 <system_add_rt_report>
}
 800cf1e:	bd08      	pop	{r3, pc}
 800cf20:	20000ef8 	.word	0x20000ef8

0800cf24 <gc_coolant>:
{
 800cf24:	b508      	push	{r3, lr}
    gc_state.modal.coolant = state;
 800cf26:	4b05      	ldr	r3, [pc, #20]	@ (800cf3c <gc_coolant+0x18>)
 800cf28:	7658      	strb	r0, [r3, #25]
    hal.coolant.set_state(gc_state.modal.coolant);
 800cf2a:	4a05      	ldr	r2, [pc, #20]	@ (800cf40 <gc_coolant+0x1c>)
 800cf2c:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800cf2e:	b2c0      	uxtb	r0, r0
 800cf30:	4790      	blx	r2
    system_add_rt_report(Report_Coolant);
 800cf32:	2020      	movs	r0, #32
 800cf34:	f014 fc46 	bl	80217c4 <system_add_rt_report>
}
 800cf38:	bd08      	pop	{r3, pc}
 800cf3a:	bf00      	nop
 800cf3c:	20000ef8 	.word	0x20000ef8
 800cf40:	200011c0 	.word	0x200011c0

0800cf44 <gc_spindle_get>:
}
 800cf44:	4b01      	ldr	r3, [pc, #4]	@ (800cf4c <gc_spindle_get+0x8>)
 800cf46:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	20000ef8 	.word	0x20000ef8

0800cf50 <gc_output_message>:

// Output and free previously allocated message
void gc_output_message (char *message)
{
    if(message) {
 800cf50:	b188      	cbz	r0, 800cf76 <gc_output_message+0x26>
{
 800cf52:	b510      	push	{r4, lr}
 800cf54:	4604      	mov	r4, r0

        if(grbl.on_gcode_message)
 800cf56:	4b08      	ldr	r3, [pc, #32]	@ (800cf78 <gc_output_message+0x28>)
 800cf58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cf5c:	b103      	cbz	r3, 800cf60 <gc_output_message+0x10>
            grbl.on_gcode_message(message);
 800cf5e:	4798      	blx	r3

        if(*message)
 800cf60:	7823      	ldrb	r3, [r4, #0]
 800cf62:	b91b      	cbnz	r3, 800cf6c <gc_output_message+0x1c>
            report_message(message, Message_Plain);

        free(message);
 800cf64:	4620      	mov	r0, r4
 800cf66:	f015 faa1 	bl	80224ac <free>
    }
}
 800cf6a:	bd10      	pop	{r4, pc}
            report_message(message, Message_Plain);
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f00c f862 	bl	8019038 <report_message>
 800cf74:	e7f6      	b.n	800cf64 <gc_output_message+0x14>
 800cf76:	4770      	bx	lr
 800cf78:	200013a8 	.word	0x200013a8

0800cf7c <gc_modal_state_restore>:

bool gc_modal_state_restore (gc_modal_t *copy)
{
    bool ok = false;

    if((ok = !!copy && !ABORTED)) {
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d04f      	beq.n	800d020 <gc_modal_state_restore+0xa4>
{
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4604      	mov	r4, r0
    if((ok = !!copy && !ABORTED)) {
 800cf84:	4b28      	ldr	r3, [pc, #160]	@ (800d028 <gc_modal_state_restore+0xac>)
 800cf86:	7818      	ldrb	r0, [r3, #0]
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d14b      	bne.n	800d024 <gc_modal_state_restore+0xa8>
 800cf8c:	785b      	ldrb	r3, [r3, #1]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d149      	bne.n	800d026 <gc_modal_state_restore+0xaa>

        copy->auto_restore = false;
 800cf92:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        copy->motion = gc_state.modal.motion;
 800cf96:	4b25      	ldr	r3, [pc, #148]	@ (800d02c <gc_modal_state_restore+0xb0>)
 800cf98:	881a      	ldrh	r2, [r3, #0]
 800cf9a:	8022      	strh	r2, [r4, #0]

        if(copy->coolant.value != gc_state.modal.coolant.value) {
 800cf9c:	7e62      	ldrb	r2, [r4, #25]
 800cf9e:	7e5b      	ldrb	r3, [r3, #25]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d009      	beq.n	800cfb8 <gc_modal_state_restore+0x3c>
            hal.coolant.set_state(copy->coolant);
 800cfa4:	4b22      	ldr	r3, [pc, #136]	@ (800d030 <gc_modal_state_restore+0xb4>)
 800cfa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfa8:	7e60      	ldrb	r0, [r4, #25]
 800cfaa:	4798      	blx	r3
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 800cfac:	2001      	movs	r0, #1
 800cfae:	4b21      	ldr	r3, [pc, #132]	@ (800d034 <gc_modal_state_restore+0xb8>)
 800cfb0:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 800cfb4:	f008 fb16 	bl	80155e4 <delay_sec>
        }

        if(copy->spindle.state.value != gc_state.modal.spindle.state.value || copy->rpm != gc_state.modal.rpm)
 800cfb8:	7ea2      	ldrb	r2, [r4, #26]
 800cfba:	4b1c      	ldr	r3, [pc, #112]	@ (800d02c <gc_modal_state_restore+0xb0>)
 800cfbc:	7e9b      	ldrb	r3, [r3, #26]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d109      	bne.n	800cfd6 <gc_modal_state_restore+0x5a>
 800cfc2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800cfc6:	4b19      	ldr	r3, [pc, #100]	@ (800d02c <gc_modal_state_restore+0xb0>)
 800cfc8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800cfcc:	eeb4 7a67 	vcmp.f32	s14, s15
 800cfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd4:	d006      	beq.n	800cfe4 <gc_modal_state_restore+0x68>
            spindle_restore(gc_state.spindle.hal, copy->spindle.state, copy->rpm);
 800cfd6:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 800cfda:	7ea1      	ldrb	r1, [r4, #26]
 800cfdc:	4b13      	ldr	r3, [pc, #76]	@ (800d02c <gc_modal_state_restore+0xb0>)
 800cfde:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800cfe0:	f011 f8a0 	bl	801e124 <spindle_restore>

        memcpy(&gc_state.modal, copy, sizeof(gc_modal_t));
 800cfe4:	46a4      	mov	ip, r4
 800cfe6:	4d11      	ldr	r5, [pc, #68]	@ (800d02c <gc_modal_state_restore+0xb0>)
 800cfe8:	3430      	adds	r4, #48	@ 0x30
 800cfea:	46ae      	mov	lr, r5
 800cfec:	f8dc 0000 	ldr.w	r0, [ip]
 800cff0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cff4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800cff8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800cffc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d000:	f10c 0c10 	add.w	ip, ip, #16
 800d004:	4675      	mov	r5, lr
 800d006:	45a4      	cmp	ip, r4
 800d008:	d1ef      	bne.n	800cfea <gc_modal_state_restore+0x6e>
 800d00a:	f8dc 0000 	ldr.w	r0, [ip]
 800d00e:	f8ce 0000 	str.w	r0, [lr]

        gc_state.spindle.rpm = gc_state.modal.rpm;
 800d012:	4b06      	ldr	r3, [pc, #24]	@ (800d02c <gc_modal_state_restore+0xb0>)
 800d014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d016:	651a      	str	r2, [r3, #80]	@ 0x50
        gc_state.feed_rate = gc_state.modal.feed_rate;
 800d018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d01a:	661a      	str	r2, [r3, #96]	@ 0x60
    if((ok = !!copy && !ABORTED)) {
 800d01c:	2001      	movs	r0, #1
 800d01e:	e002      	b.n	800d026 <gc_modal_state_restore+0xaa>
 800d020:	2000      	movs	r0, #0
    }

    return ok;
}
 800d022:	4770      	bx	lr
    if((ok = !!copy && !ABORTED)) {
 800d024:	2000      	movs	r0, #0
}
 800d026:	bd38      	pop	{r3, r4, r5, pc}
 800d028:	200014a0 	.word	0x200014a0
 800d02c:	20000ef8 	.word	0x20000ef8
 800d030:	200011c0 	.word	0x200011c0
 800d034:	20001bd8 	.word	0x20001bd8

0800d038 <gc_normalize_block>:
// else the block delete character. Remaining characters are converted to upper case.
// If the driver handles message comments then the first is extracted and returned in a dynamically
// allocated memory block, the caller must free this after the message has been processed.

char *gc_normalize_block (char *block, char **message)
{
 800d038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d03c:	4604      	mov	r4, r0
 800d03e:	460f      	mov	r7, r1
    char c, *s1, *s2, *comment = NULL;

    // Remove leading whitespace & control characters
    while(*block && *block <= ' ')
 800d040:	e000      	b.n	800d044 <gc_normalize_block+0xc>
        block++;
 800d042:	3401      	adds	r4, #1
    while(*block && *block <= ' ')
 800d044:	7822      	ldrb	r2, [r4, #0]
 800d046:	1e53      	subs	r3, r2, #1
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	2b1f      	cmp	r3, #31
 800d04c:	d9f9      	bls.n	800d042 <gc_normalize_block+0xa>

    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 800d04e:	2a3b      	cmp	r2, #59	@ 0x3b
 800d050:	d00c      	beq.n	800d06c <gc_normalize_block+0x34>
 800d052:	2a2f      	cmp	r2, #47	@ 0x2f
 800d054:	d005      	beq.n	800d062 <gc_normalize_block+0x2a>
        *block = '\0';
        return block;
    }

    if(*block == '/')
 800d056:	2a2f      	cmp	r2, #47	@ 0x2f
 800d058:	d00c      	beq.n	800d074 <gc_normalize_block+0x3c>
        block++;

    s1 = s2 = block;
 800d05a:	46a0      	mov	r8, r4
 800d05c:	4625      	mov	r5, r4
    char c, *s1, *s2, *comment = NULL;
 800d05e:	2600      	movs	r6, #0

    while((c = *s1) != '\0') {
 800d060:	e060      	b.n	800d124 <gc_normalize_block+0xec>
    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 800d062:	4b41      	ldr	r3, [pc, #260]	@ (800d168 <gc_normalize_block+0x130>)
 800d064:	7d9b      	ldrb	r3, [r3, #22]
 800d066:	f013 0f10 	tst.w	r3, #16
 800d06a:	d0f4      	beq.n	800d056 <gc_normalize_block+0x1e>
        *block = '\0';
 800d06c:	2300      	movs	r3, #0
 800d06e:	7023      	strb	r3, [r4, #0]
        return block;
 800d070:	4620      	mov	r0, r4
 800d072:	e076      	b.n	800d162 <gc_normalize_block+0x12a>
        block++;
 800d074:	3401      	adds	r4, #1
 800d076:	e7f0      	b.n	800d05a <gc_normalize_block+0x22>

        if(c > ' ') switch(c) {

            case ';':
                if(!comment) {
 800d078:	2e00      	cmp	r6, #0
 800d07a:	d147      	bne.n	800d10c <gc_normalize_block+0xd4>
                    *s1 = '\0';
 800d07c:	2300      	movs	r3, #0
 800d07e:	702b      	strb	r3, [r5, #0]
                    continue;
 800d080:	e050      	b.n	800d124 <gc_normalize_block+0xec>
                // TODO: generate error if a left parenthesis is found inside a comment...
                comment = s1;
                break;

            case ')':
                if(comment && !gc_state.skip_blocks) {
 800d082:	2e00      	cmp	r6, #0
 800d084:	d04d      	beq.n	800d122 <gc_normalize_block+0xea>
 800d086:	4b39      	ldr	r3, [pc, #228]	@ (800d16c <gc_normalize_block+0x134>)
 800d088:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d15f      	bne.n	800d150 <gc_normalize_block+0x118>
                    *s1 = '\0';
 800d090:	702b      	strb	r3, [r5, #0]
                    if(!hal.driver_cap.no_gcode_message_handling) {
 800d092:	4b37      	ldr	r3, [pc, #220]	@ (800d170 <gc_normalize_block+0x138>)
 800d094:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 800d098:	f013 0f04 	tst.w	r3, #4
 800d09c:	d106      	bne.n	800d0ac <gc_normalize_block+0x74>

                        size_t len = s1 - comment - 4;
 800d09e:	eba5 0906 	sub.w	r9, r5, r6
 800d0a2:	f1a9 0904 	sub.w	r9, r9, #4

                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 800d0a6:	b10f      	cbz	r7, 800d0ac <gc_normalize_block+0x74>
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	b14b      	cbz	r3, 800d0c0 <gc_normalize_block+0x88>
                            *comment = '\0'; // Do not generate grbl.on_gcode_comment event!
                        }
#endif // NGC_EXPRESSIONS_ENABLE
                    }

                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 800d0ac:	7833      	ldrb	r3, [r6, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d050      	beq.n	800d154 <gc_normalize_block+0x11c>
 800d0b2:	f8d7 9000 	ldr.w	r9, [r7]
 800d0b6:	f1b9 0f00 	cmp.w	r9, #0
 800d0ba:	d01b      	beq.n	800d0f4 <gc_normalize_block+0xbc>
                        grbl.on_gcode_comment(comment);
                }
                comment = NULL;
 800d0bc:	2600      	movs	r6, #0
 800d0be:	e030      	b.n	800d122 <gc_normalize_block+0xea>
                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 800d0c0:	2205      	movs	r2, #5
 800d0c2:	492c      	ldr	r1, [pc, #176]	@ (800d174 <gc_normalize_block+0x13c>)
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f017 fad6 	bl	8024676 <strncmp>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d1ee      	bne.n	800d0ac <gc_normalize_block+0x74>
 800d0ce:	4648      	mov	r0, r9
 800d0d0:	f015 f9e4 	bl	802249c <malloc>
 800d0d4:	6038      	str	r0, [r7, #0]
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	d0e8      	beq.n	800d0ac <gc_normalize_block+0x74>
                            comment += 5;
 800d0da:	3605      	adds	r6, #5
                            while(*comment == ' ') {
 800d0dc:	e002      	b.n	800d0e4 <gc_normalize_block+0xac>
                                comment++;
 800d0de:	3601      	adds	r6, #1
                                len--;
 800d0e0:	f109 39ff 	add.w	r9, r9, #4294967295
                            while(*comment == ' ') {
 800d0e4:	7833      	ldrb	r3, [r6, #0]
 800d0e6:	2b20      	cmp	r3, #32
 800d0e8:	d0f9      	beq.n	800d0de <gc_normalize_block+0xa6>
                            memcpy(*message, comment, len);
 800d0ea:	464a      	mov	r2, r9
 800d0ec:	4631      	mov	r1, r6
 800d0ee:	f017 fbfe 	bl	80248ee <memcpy>
 800d0f2:	e7db      	b.n	800d0ac <gc_normalize_block+0x74>
                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 800d0f4:	4b20      	ldr	r3, [pc, #128]	@ (800d178 <gc_normalize_block+0x140>)
 800d0f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d0fa:	b36b      	cbz	r3, 800d158 <gc_normalize_block+0x120>
                        grbl.on_gcode_comment(comment);
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	4798      	blx	r3
                comment = NULL;
 800d100:	464e      	mov	r6, r9
 800d102:	e00e      	b.n	800d122 <gc_normalize_block+0xea>
                break;

            default:
                if(comment == NULL)
                    *s2++ = CAPS(c);
 800d104:	461a      	mov	r2, r3
 800d106:	e020      	b.n	800d14a <gc_normalize_block+0x112>
        if(c > ' ') switch(c) {
 800d108:	462e      	mov	r6, r5

#if NGC_EXPRESSIONS_ENABLE
        if(comment && s1 - comment < (strncmp(comment, "(DEBU,", 5) ? 5 : 7))
            *s1 = CAPS(c);
#else
        if(comment && s1 - comment < 5)
 800d10a:	b156      	cbz	r6, 800d122 <gc_normalize_block+0xea>
 800d10c:	1baa      	subs	r2, r5, r6
 800d10e:	2a04      	cmp	r2, #4
 800d110:	dc07      	bgt.n	800d122 <gc_normalize_block+0xea>
            *s1 = CAPS(c);
 800d112:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d116:	b2d2      	uxtb	r2, r2
 800d118:	2a19      	cmp	r2, #25
 800d11a:	d801      	bhi.n	800d120 <gc_normalize_block+0xe8>
 800d11c:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 800d120:	702b      	strb	r3, [r5, #0]
#endif
        s1++;
 800d122:	3501      	adds	r5, #1
    while((c = *s1) != '\0') {
 800d124:	782b      	ldrb	r3, [r5, #0]
 800d126:	b1cb      	cbz	r3, 800d15c <gc_normalize_block+0x124>
        if(c > ' ') switch(c) {
 800d128:	2b20      	cmp	r3, #32
 800d12a:	d9ee      	bls.n	800d10a <gc_normalize_block+0xd2>
 800d12c:	2b29      	cmp	r3, #41	@ 0x29
 800d12e:	d0a8      	beq.n	800d082 <gc_normalize_block+0x4a>
 800d130:	2b3b      	cmp	r3, #59	@ 0x3b
 800d132:	d0a1      	beq.n	800d078 <gc_normalize_block+0x40>
 800d134:	2b28      	cmp	r3, #40	@ 0x28
 800d136:	d0e7      	beq.n	800d108 <gc_normalize_block+0xd0>
                if(comment == NULL)
 800d138:	2e00      	cmp	r6, #0
 800d13a:	d1e7      	bne.n	800d10c <gc_normalize_block+0xd4>
                    *s2++ = CAPS(c);
 800d13c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d140:	b2d2      	uxtb	r2, r2
 800d142:	2a19      	cmp	r2, #25
 800d144:	d8de      	bhi.n	800d104 <gc_normalize_block+0xcc>
 800d146:	f003 025f 	and.w	r2, r3, #95	@ 0x5f
 800d14a:	f808 2b01 	strb.w	r2, [r8], #1
 800d14e:	e7dc      	b.n	800d10a <gc_normalize_block+0xd2>
                comment = NULL;
 800d150:	2600      	movs	r6, #0
 800d152:	e7e6      	b.n	800d122 <gc_normalize_block+0xea>
 800d154:	2600      	movs	r6, #0
 800d156:	e7e4      	b.n	800d122 <gc_normalize_block+0xea>
 800d158:	464e      	mov	r6, r9
 800d15a:	e7e2      	b.n	800d122 <gc_normalize_block+0xea>
    }

    *s2 = '\0';
 800d15c:	f888 3000 	strb.w	r3, [r8]

    return block;
 800d160:	4620      	mov	r0, r4
}
 800d162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d166:	bf00      	nop
 800d168:	200014a0 	.word	0x200014a0
 800d16c:	20000ef8 	.word	0x20000ef8
 800d170:	200011c0 	.word	0x200011c0
 800d174:	0802aac8 	.word	0x0802aac8
 800d178:	200013a8 	.word	0x200013a8

0800d17c <gc_execute_block>:
// Parses and executes one block (line) of 0-terminated G-Code.
// In this function, all units and positions are converted and exported to internal functions
// in terms of (mm, mm/min) and absolute machine coordinates, respectively.

status_code_t gc_execute_block (char *block)
{
 800d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d180:	ed2d 8b06 	vpush	{d8-d10}
 800d184:	b0a5      	sub	sp, #148	@ 0x94
       { &gc_block.values.xyz[Z_AXIS], ValueType_Float }
    };

#endif

    char *message = NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	9323      	str	r3, [sp, #140]	@ 0x8c

    block = gc_normalize_block(block, &message);
 800d18a:	a923      	add	r1, sp, #140	@ 0x8c
 800d18c:	f7ff ff54 	bl	800d038 <gc_normalize_block>

    if(block[0] == '\0') {
 800d190:	7804      	ldrb	r4, [r0, #0]
 800d192:	2c00      	cmp	r4, #0
 800d194:	d02d      	beq.n	800d1f2 <gc_execute_block+0x76>
 800d196:	4606      	mov	r6, r0
    // Old comment from protocol.c:
    // NOTE: This maybe installed to tell grblHAL when a program is running vs manual input,
    // where, during a program, the system auto-cycle start will continue to execute
    // everything until the next '%' sign. This will help fix resuming issues with certain
    // functions that empty the planner buffer to execute its task on-time.
    if (block[0] == CMD_PROGRAM_DEMARCATION && block[1] == '\0') {
 800d198:	2c25      	cmp	r4, #37	@ 0x25
 800d19a:	d102      	bne.n	800d1a2 <gc_execute_block+0x26>
 800d19c:	7844      	ldrb	r4, [r0, #1]
 800d19e:	2c00      	cmp	r4, #0
 800d1a0:	d02e      	beq.n	800d200 <gc_execute_block+0x84>
     updates these modes and commands as the block line is parsed and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

    memset(&gc_block, 0, sizeof(gc_block));                           // Initialize the parser block struct.
 800d1a2:	4c9c      	ldr	r4, [pc, #624]	@ (800d414 <gc_execute_block+0x298>)
 800d1a4:	22d4      	movs	r2, #212	@ 0xd4
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f017 fa40 	bl	802462e <memset>
    memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_state.modal)); // Copy current modes
 800d1ae:	3408      	adds	r4, #8
 800d1b0:	4d99      	ldr	r5, [pc, #612]	@ (800d418 <gc_execute_block+0x29c>)
 800d1b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1be:	682b      	ldr	r3, [r5, #0]
 800d1c0:	6023      	str	r3, [r4, #0]
    axis_command_t axis_command = AxisCommand_None;
    io_mcode_t port_command = (io_mcode_t)0;
    plane_t plane;

    // Initialize bitflag tracking variables for axis indices compatible operations.
    axes_signals_t axis_words = {0}; // XYZ tracking
 800d1c2:	f04f 0800 	mov.w	r8, #0
 800d1c6:	46c3      	mov	fp, r8
    ijk_words_t ijk_words = {0}; // IJK tracking
 800d1c8:	f8cd 8014 	str.w	r8, [sp, #20]

    // Initialize command and value words and parser flags variables.
    modal_groups_t command_words = {0};         // Bitfield for tracking G and M command words. Also used for modal group violations.
 800d1cc:	4647      	mov	r7, r8
    gc_parser_flags_t gc_parser_flags = {0};    // Parser flags for handling special cases.
    static parameter_words_t user_words = {0};  // User M-code words "taken"

    // Determine if the line is a jogging motion or a normal g-code block.
    if (block[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 800d1ce:	7833      	ldrb	r3, [r6, #0]
 800d1d0:	2b24      	cmp	r3, #36	@ 0x24
 800d1d2:	d023      	beq.n	800d21c <gc_execute_block+0xa0>
     STEP 2: Import all g-code words in the block. A g-code word is a letter followed by
     a number, which can either be a 'G'/'M' command or sets/assigns a command value. Also,
     perform initial error-checks for command word modal group violations, for any repeated
     words, and for negative values set for the value words F, N, P, T, and S. */

    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 800d1d4:	f018 0f01 	tst.w	r8, #1
 800d1d8:	d12b      	bne.n	800d232 <gc_execute_block+0xb6>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	9321      	str	r3, [sp, #132]	@ 0x84
    char letter;
    float value;
    uint32_t int_value = 0;
    uint_fast16_t mantissa = 0;
    bool is_user_mcode = false;
    word_bit_t word_bit = { .parameter = {0}, .modal_group = {0} }; // Bit-value for assigning tracking variables
 800d1de:	2300      	movs	r3, #0
 800d1e0:	931e      	str	r3, [sp, #120]	@ 0x78
 800d1e2:	931f      	str	r3, [sp, #124]	@ 0x7c
    bool is_user_mcode = false;
 800d1e4:	4699      	mov	r9, r3
    uint32_t int_value = 0;
 800d1e6:	461c      	mov	r4, r3
    io_mcode_t port_command = (io_mcode_t)0;
 800d1e8:	9306      	str	r3, [sp, #24]
    axis_command_t axis_command = AxisCommand_None;
 800d1ea:	469a      	mov	sl, r3
    bool set_tool = false, spindle_event = false;
 800d1ec:	9307      	str	r3, [sp, #28]

    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 800d1ee:	f000 bc8b 	b.w	800db08 <gc_execute_block+0x98c>
        if(message)
 800d1f2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	f000 809e 	beq.w	800d336 <gc_execute_block+0x1ba>
            gc_output_message(message);
 800d1fa:	f7ff fea9 	bl	800cf50 <gc_output_message>
        return Status_OK;
 800d1fe:	e09a      	b.n	800d336 <gc_execute_block+0x1ba>
        gc_state.file_run = !gc_state.file_run;
 800d200:	4a85      	ldr	r2, [pc, #532]	@ (800d418 <gc_execute_block+0x29c>)
 800d202:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 800d206:	f083 0301 	eor.w	r3, r3, #1
 800d20a:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
        if(message)
 800d20e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800d210:	2800      	cmp	r0, #0
 800d212:	f000 8090 	beq.w	800d336 <gc_execute_block+0x1ba>
            gc_output_message(message);
 800d216:	f7ff fe9b 	bl	800cf50 <gc_output_message>
        return Status_OK;
 800d21a:	e08c      	b.n	800d336 <gc_execute_block+0x1ba>
        gc_parser_flags.jog_motion = On;
 800d21c:	f04f 0801 	mov.w	r8, #1
        gc_block.modal.motion = MotionMode_Linear;
 800d220:	f1a4 0338 	sub.w	r3, r4, #56	@ 0x38
 800d224:	2201      	movs	r2, #1
 800d226:	811a      	strh	r2, [r3, #8]
        gc_block.modal.feed_mode = FeedMode_UnitsPerMin;
 800d228:	f883 b00a 	strb.w	fp, [r3, #10]
        gc_block.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 800d22c:	f883 b023 	strb.w	fp, [r3, #35]	@ 0x23
        gc_block.values.n = JOG_LINE_NUMBER; // Initialize default line number reported during jog.
 800d230:	e7d0      	b.n	800d1d4 <gc_execute_block+0x58>
    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 800d232:	2303      	movs	r3, #3
 800d234:	e7d2      	b.n	800d1dc <gc_execute_block+0x60>
        if(!is_user_mcode && isnanf(value))
            FAIL(Status_BadNumberFormat);   // [Expected word value]

#else

        if((letter < 'A' && letter != '$') || letter > 'Z')
 800d236:	2d5a      	cmp	r5, #90	@ 0x5a
 800d238:	f240 8473 	bls.w	800db22 <gc_execute_block+0x9a6>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 800d23c:	2401      	movs	r4, #1
 800d23e:	e07a      	b.n	800d336 <gc_execute_block+0x1ba>
        // accurate enough for value words that require integers to within 0.0001. This should be
        // a good enough compromise and catch most all non-integer errors. To make it compliant,
        // we would simply need to change the mantissa to int16, but this add compiled flash space.
        // Maybe update this later.
        if(isnan(value))
            mantissa = 0;
 800d240:	2100      	movs	r1, #0
 800d242:	f000 bc94 	b.w	800db6e <gc_execute_block+0x9f2>
             NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */

            case 'G': // Determine 'G' command and its modal group

                is_user_mcode = false;
                word_bit.modal_group.mask = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	931f      	str	r3, [sp, #124]	@ 0x7c

                switch(int_value) {
 800d24a:	2c41      	cmp	r4, #65	@ 0x41
 800d24c:	d858      	bhi.n	800d300 <gc_execute_block+0x184>
 800d24e:	2c41      	cmp	r4, #65	@ 0x41
 800d250:	f203 8545 	bhi.w	8010cde <gc_execute_block+0x3b62>
 800d254:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d258:	00f200f2 	.word	0x00f200f2
 800d25c:	00f200f2 	.word	0x00f200f2
 800d260:	00f20090 	.word	0x00f20090
 800d264:	00771d43 	.word	0x00771d43
 800d268:	1d430077 	.word	0x1d430077
 800d26c:	1d430089 	.word	0x1d430089
 800d270:	1d431d43 	.word	0x1d431d43
 800d274:	1d431d43 	.word	0x1d431d43
 800d278:	01351d43 	.word	0x01351d43
 800d27c:	01350135 	.word	0x01350135
 800d280:	01720172 	.word	0x01720172
 800d284:	1d431d43 	.word	0x1d431d43
 800d288:	1d431d43 	.word	0x1d431d43
 800d28c:	1d431d43 	.word	0x1d431d43
 800d290:	1d430089 	.word	0x1d430089
 800d294:	1d430089 	.word	0x1d430089
 800d298:	00b71d43 	.word	0x00b71d43
 800d29c:	1d431d43 	.word	0x1d431d43
 800d2a0:	1d431d43 	.word	0x1d431d43
 800d2a4:	1d4300cc 	.word	0x1d4300cc
 800d2a8:	1d43017f 	.word	0x1d43017f
 800d2ac:	01861d43 	.word	0x01861d43
 800d2b0:	1d431d43 	.word	0x1d431d43
 800d2b4:	1d431d43 	.word	0x1d431d43
 800d2b8:	01861d43 	.word	0x01861d43
 800d2bc:	024d024d 	.word	0x024d024d
 800d2c0:	00901d43 	.word	0x00901d43
 800d2c4:	01b401b4 	.word	0x01b401b4
 800d2c8:	01b401b4 	.word	0x01b401b4
 800d2cc:	01b401b4 	.word	0x01b401b4
 800d2d0:	020f1d43 	.word	0x020f1d43
 800d2d4:	1d431d43 	.word	0x1d431d43
 800d2d8:	021a1d43 	.word	0x021a1d43
 800d2dc:	f1a4 0249 	sub.w	r2, r4, #73	@ 0x49
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	4093      	lsls	r3, r2
 800d2e4:	4a4d      	ldr	r2, [pc, #308]	@ (800d41c <gc_execute_block+0x2a0>)
 800d2e6:	401a      	ands	r2, r3
 800d2e8:	2a00      	cmp	r2, #0
 800d2ea:	f040 80d0 	bne.w	800d48e <gc_execute_block+0x312>
 800d2ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2f2:	f040 80a9 	bne.w	800d448 <gc_execute_block+0x2cc>
 800d2f6:	f013 0f08 	tst.w	r3, #8
 800d2fa:	d164      	bne.n	800d3c6 <gc_execute_block+0x24a>
 800d2fc:	2414      	movs	r4, #20
 800d2fe:	e01a      	b.n	800d336 <gc_execute_block+0x1ba>
 800d300:	2c59      	cmp	r4, #89	@ 0x59
 800d302:	d915      	bls.n	800d330 <gc_execute_block+0x1b4>
 800d304:	2c63      	cmp	r4, #99	@ 0x63
 800d306:	f203 84ed 	bhi.w	8010ce4 <gc_execute_block+0x3b68>
 800d30a:	2c5a      	cmp	r4, #90	@ 0x5a
 800d30c:	d319      	bcc.n	800d342 <gc_execute_block+0x1c6>
 800d30e:	f1a4 035a 	sub.w	r3, r4, #90	@ 0x5a
 800d312:	2b09      	cmp	r3, #9
 800d314:	f203 84e0 	bhi.w	8010cd8 <gc_execute_block+0x3b5c>
 800d318:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d31c:	00de00de 	.word	0x00de00de
 800d320:	00fa0027 	.word	0x00fa0027
 800d324:	010600fa 	.word	0x010600fa
 800d328:	01cb01cb 	.word	0x01cb01cb
 800d32c:	01df01df 	.word	0x01df01df
 800d330:	2c49      	cmp	r4, #73	@ 0x49
 800d332:	d2d3      	bcs.n	800d2dc <gc_execute_block+0x160>
 800d334:	2414      	movs	r4, #20
#endif

    // TODO: % to denote start of program.

    return Status_OK;
}
 800d336:	4620      	mov	r0, r4
 800d338:	b025      	add	sp, #148	@ 0x94
 800d33a:	ecbd 8b06 	vpop	{d8-d10}
 800d33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d342:	2414      	movs	r4, #20
 800d344:	e7f7      	b.n	800d336 <gc_execute_block+0x1ba>
                        if(settings.mode == Mode_Lathe) {
 800d346:	4b36      	ldr	r3, [pc, #216]	@ (800d420 <gc_execute_block+0x2a4>)
 800d348:	7e1b      	ldrb	r3, [r3, #24]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	f043 84cd 	bne.w	8010cea <gc_execute_block+0x3b6e>
                            word_bit.modal_group.G15 = On;
 800d350:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d358:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                            gc_block.modal.diameter_mode = int_value == 7; // TODO: find specs for implementation, only affects X calculation? reporting? current position?
 800d35c:	2c07      	cmp	r4, #7
 800d35e:	bf14      	ite	ne
 800d360:	2200      	movne	r2, #0
 800d362:	2201      	moveq	r2, #1
 800d364:	4b2b      	ldr	r3, [pc, #172]	@ (800d414 <gc_execute_block+0x298>)
 800d366:	735a      	strb	r2, [r3, #13]
                        break;
 800d368:	e07c      	b.n	800d464 <gc_execute_block+0x2e8>
                        if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 800d36a:	b929      	cbnz	r1, 800d378 <gc_execute_block+0x1fc>
                            if (axis_command)
 800d36c:	f1ba 0f00 	cmp.w	sl, #0
 800d370:	f043 84be 	bne.w	8010cf0 <gc_execute_block+0x3b74>
                            axis_command = AxisCommand_NonModal;
 800d374:	f04f 0a01 	mov.w	sl, #1
                        word_bit.modal_group.G0 = On;
 800d378:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d37c:	f043 0301 	orr.w	r3, r3, #1
 800d380:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800d384:	b2e3      	uxtb	r3, r4
 800d386:	4a23      	ldr	r2, [pc, #140]	@ (800d414 <gc_execute_block+0x298>)
 800d388:	7013      	strb	r3, [r2, #0]
                        if ((int_value == 28) || (int_value == 30)) {
 800d38a:	2c1c      	cmp	r4, #28
 800d38c:	d00d      	beq.n	800d3aa <gc_execute_block+0x22e>
 800d38e:	2c1e      	cmp	r4, #30
 800d390:	d00b      	beq.n	800d3aa <gc_execute_block+0x22e>
                        } else if (int_value == 92) {
 800d392:	2c5c      	cmp	r4, #92	@ 0x5c
 800d394:	d166      	bne.n	800d464 <gc_execute_block+0x2e8>
                            if (!((mantissa == 0) || (mantissa == 10) || (mantissa == 20) || (mantissa == 30)))
 800d396:	291e      	cmp	r1, #30
 800d398:	f203 84b0 	bhi.w	8010cfc <gc_execute_block+0x3b80>
 800d39c:	4a21      	ldr	r2, [pc, #132]	@ (800d424 <gc_execute_block+0x2a8>)
 800d39e:	40ca      	lsrs	r2, r1
 800d3a0:	f012 0f01 	tst.w	r2, #1
 800d3a4:	d10a      	bne.n	800d3bc <gc_execute_block+0x240>
                        } else if (int_value == 92) {
 800d3a6:	2414      	movs	r4, #20
 800d3a8:	e7c5      	b.n	800d336 <gc_execute_block+0x1ba>
                            if (!((mantissa == 0) || (mantissa == 10)))
 800d3aa:	b111      	cbz	r1, 800d3b2 <gc_execute_block+0x236>
 800d3ac:	290a      	cmp	r1, #10
 800d3ae:	f043 84a2 	bne.w	8010cf6 <gc_execute_block+0x3b7a>
                            gc_block.non_modal_command += mantissa;
 800d3b2:	440b      	add	r3, r1
 800d3b4:	4a17      	ldr	r2, [pc, #92]	@ (800d414 <gc_execute_block+0x298>)
 800d3b6:	7013      	strb	r3, [r2, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	e053      	b.n	800d464 <gc_execute_block+0x2e8>
                            gc_block.non_modal_command += mantissa;
 800d3bc:	440b      	add	r3, r1
 800d3be:	4a15      	ldr	r2, [pc, #84]	@ (800d414 <gc_execute_block+0x298>)
 800d3c0:	7013      	strb	r3, [r2, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	e04e      	b.n	800d464 <gc_execute_block+0x2e8>
                        if(mantissa != 0)
 800d3c6:	2900      	cmp	r1, #0
 800d3c8:	f043 849b 	bne.w	8010d02 <gc_execute_block+0x3b86>
                        if (axis_command)
 800d3cc:	f1ba 0f00 	cmp.w	sl, #0
 800d3d0:	f043 849a 	bne.w	8010d08 <gc_execute_block+0x3b8c>
                        word_bit.modal_group.G1 = On;
 800d3d4:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d3d8:	f043 0302 	orr.w	r3, r3, #2
 800d3dc:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800d3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d414 <gc_execute_block+0x298>)
 800d3e2:	811c      	strh	r4, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                        axis_command = AxisCommand_MotionMode;
 800d3ea:	f04f 0a02 	mov.w	sl, #2
                        break;
 800d3ee:	e039      	b.n	800d464 <gc_execute_block+0x2e8>
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 800d3f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d428 <gc_execute_block+0x2ac>)
 800d3f2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f003 8489 	beq.w	8010d0e <gc_execute_block+0x3b92>
 800d3fc:	f1a1 0214 	sub.w	r2, r1, #20
 800d400:	2a1e      	cmp	r2, #30
 800d402:	f203 8487 	bhi.w	8010d14 <gc_execute_block+0x3b98>
 800d406:	4b07      	ldr	r3, [pc, #28]	@ (800d424 <gc_execute_block+0x2a8>)
 800d408:	40d3      	lsrs	r3, r2
 800d40a:	f013 0f01 	tst.w	r3, #1
 800d40e:	d10d      	bne.n	800d42c <gc_execute_block+0x2b0>
 800d410:	2414      	movs	r4, #20
 800d412:	e790      	b.n	800d336 <gc_execute_block+0x1ba>
 800d414:	20000df0 	.word	0x20000df0
 800d418:	20000ef8 	.word	0x20000ef8
 800d41c:	00013701 	.word	0x00013701
 800d420:	20001bd8 	.word	0x20001bd8
 800d424:	40100401 	.word	0x40100401
 800d428:	200011c0 	.word	0x200011c0
                        int_value += (mantissa / 10) + 100;
 800d42c:	4bb9      	ldr	r3, [pc, #740]	@ (800d714 <gc_execute_block+0x598>)
 800d42e:	fba3 2301 	umull	r2, r3, r3, r1
 800d432:	eb04 03d3 	add.w	r3, r4, r3, lsr #3
 800d436:	f103 0464 	add.w	r4, r3, #100	@ 0x64
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d43a:	2100      	movs	r1, #0
                        if (axis_command)
 800d43c:	f1ba 0f00 	cmp.w	sl, #0
 800d440:	f043 846b 	bne.w	8010d1a <gc_execute_block+0x3b9e>
                        axis_command = AxisCommand_MotionMode;
 800d444:	f04f 0a02 	mov.w	sl, #2
                        word_bit.modal_group.G1 = On;
 800d448:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d44c:	f043 0302 	orr.w	r3, r3, #2
 800d450:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        if(int_value == 5 && mantissa != 0) {
 800d454:	2c05      	cmp	r4, #5
 800d456:	d010      	beq.n	800d47a <gc_execute_block+0x2fe>
                            gc_block.modal.motion = (motion_mode_t)int_value;
 800d458:	4baf      	ldr	r3, [pc, #700]	@ (800d718 <gc_execute_block+0x59c>)
 800d45a:	811c      	strh	r4, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 800d45c:	4bae      	ldr	r3, [pc, #696]	@ (800d718 <gc_execute_block+0x59c>)
 800d45e:	2200      	movs	r2, #0
 800d460:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                if (mantissa > 0)
 800d464:	2900      	cmp	r1, #0
 800d466:	f043 8476 	bne.w	8010d56 <gc_execute_block+0x3bda>
                if (command_words.mask & word_bit.modal_group.mask)
 800d46a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d46c:	421f      	tst	r7, r3
 800d46e:	f043 8475 	bne.w	8010d5c <gc_execute_block+0x3be0>
                command_words.mask |= word_bit.modal_group.mask;
 800d472:	431f      	orrs	r7, r3
                is_user_mcode = false;
 800d474:	f04f 0900 	mov.w	r9, #0
                break;
 800d478:	e346      	b.n	800db08 <gc_execute_block+0x98c>
                        if(int_value == 5 && mantissa != 0) {
 800d47a:	2900      	cmp	r1, #0
 800d47c:	d0ec      	beq.n	800d458 <gc_execute_block+0x2dc>
                            if(mantissa == 10) {
 800d47e:	290a      	cmp	r1, #10
 800d480:	f043 844e 	bne.w	8010d20 <gc_execute_block+0x3ba4>
                                gc_block.modal.motion = MotionMode_QuadraticSpline;
 800d484:	4ba4      	ldr	r3, [pc, #656]	@ (800d718 <gc_execute_block+0x59c>)
 800d486:	2233      	movs	r2, #51	@ 0x33
 800d488:	811a      	strh	r2, [r3, #8]
                                mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d48a:	2100      	movs	r1, #0
                            if(mantissa == 10) {
 800d48c:	e7e6      	b.n	800d45c <gc_execute_block+0x2e0>
                        if (axis_command)
 800d48e:	f1ba 0f00 	cmp.w	sl, #0
 800d492:	f043 8448 	bne.w	8010d26 <gc_execute_block+0x3baa>
                        word_bit.modal_group.G1 = On;
 800d496:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d49a:	f043 0302 	orr.w	r3, r3, #2
 800d49e:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.canned_cycle_active = true;
 800d4a2:	4a9d      	ldr	r2, [pc, #628]	@ (800d718 <gc_execute_block+0x59c>)
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800d4aa:	b2a3      	uxth	r3, r4
 800d4ac:	8113      	strh	r3, [r2, #8]
                        gc_parser_flags.canned_cycle_change = gc_block.modal.motion != gc_state.modal.motion;
 800d4ae:	4a9b      	ldr	r2, [pc, #620]	@ (800d71c <gc_execute_block+0x5a0>)
 800d4b0:	8812      	ldrh	r2, [r2, #0]
 800d4b2:	1a9b      	subs	r3, r3, r2
 800d4b4:	bf18      	it	ne
 800d4b6:	2301      	movne	r3, #1
 800d4b8:	f363 0841 	bfi	r8, r3, #1, #1
                        axis_command = AxisCommand_MotionMode;
 800d4bc:	f04f 0a02 	mov.w	sl, #2
                        break;
 800d4c0:	e7d0      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G2 = On;
 800d4c2:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d4c6:	f043 0304 	orr.w	r3, r3, #4
 800d4ca:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.plane_select = (plane_select_t)(int_value - 17);
 800d4ce:	b2e3      	uxtb	r3, r4
 800d4d0:	3b11      	subs	r3, #17
 800d4d2:	4a91      	ldr	r2, [pc, #580]	@ (800d718 <gc_execute_block+0x59c>)
 800d4d4:	7393      	strb	r3, [r2, #14]
                        break;
 800d4d6:	e7c5      	b.n	800d464 <gc_execute_block+0x2e8>
                        if (mantissa == 0) {
 800d4d8:	b961      	cbnz	r1, 800d4f4 <gc_execute_block+0x378>
                            word_bit.modal_group.G3 = On;
 800d4da:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d4de:	f043 0308 	orr.w	r3, r3, #8
 800d4e2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                            gc_block.modal.distance_incremental = int_value == 91;
 800d4e6:	2c5b      	cmp	r4, #91	@ 0x5b
 800d4e8:	bf14      	ite	ne
 800d4ea:	2200      	movne	r2, #0
 800d4ec:	2201      	moveq	r2, #1
 800d4ee:	4b8a      	ldr	r3, [pc, #552]	@ (800d718 <gc_execute_block+0x59c>)
 800d4f0:	731a      	strb	r2, [r3, #12]
 800d4f2:	e7b7      	b.n	800d464 <gc_execute_block+0x2e8>
                            word_bit.modal_group.G4 = On;
 800d4f4:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d4f8:	f043 0310 	orr.w	r3, r3, #16
 800d4fc:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                            if ((mantissa != 10) || (int_value == 90))
 800d500:	290a      	cmp	r1, #10
 800d502:	f043 8413 	bne.w	8010d2c <gc_execute_block+0x3bb0>
 800d506:	2c5a      	cmp	r4, #90	@ 0x5a
 800d508:	f003 8413 	beq.w	8010d32 <gc_execute_block+0x3bb6>
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d50c:	2100      	movs	r1, #0
 800d50e:	e7a9      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G5 = On;
 800d510:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d514:	f043 0320 	orr.w	r3, r3, #32
 800d518:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.feed_mode = (feed_mode_t)(94 - int_value);
 800d51c:	b2e3      	uxtb	r3, r4
 800d51e:	f1c3 035e 	rsb	r3, r3, #94	@ 0x5e
 800d522:	4a7d      	ldr	r2, [pc, #500]	@ (800d718 <gc_execute_block+0x59c>)
 800d524:	7293      	strb	r3, [r2, #10]
                        break;
 800d526:	e79d      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G5 = On;
 800d528:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d52c:	f043 0320 	orr.w	r3, r3, #32
 800d530:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.feed_mode = FeedMode_UnitsPerRev;
 800d534:	4b78      	ldr	r3, [pc, #480]	@ (800d718 <gc_execute_block+0x59c>)
 800d536:	2202      	movs	r2, #2
 800d538:	729a      	strb	r2, [r3, #10]
                        break;
 800d53a:	e793      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G6 = On;
 800d53c:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d544:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.modal.units_imperial = int_value == 20;
 800d548:	2c14      	cmp	r4, #20
 800d54a:	bf14      	ite	ne
 800d54c:	2200      	movne	r2, #0
 800d54e:	2201      	moveq	r2, #1
 800d550:	4b71      	ldr	r3, [pc, #452]	@ (800d718 <gc_execute_block+0x59c>)
 800d552:	72da      	strb	r2, [r3, #11]
                        break;
 800d554:	e786      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G7 = On;
 800d556:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d55e:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        break;
 800d562:	e77f      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G8 = On;
 800d564:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d568:	f043 0301 	orr.w	r3, r3, #1
 800d56c:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        if(int_value == 49) // G49
 800d570:	2c31      	cmp	r4, #49	@ 0x31
 800d572:	d007      	beq.n	800d584 <gc_execute_block+0x408>
                        else if(mantissa == 0 && grbl.tool_table.n_tools) // G43
 800d574:	b959      	cbnz	r1, 800d58e <gc_execute_block+0x412>
 800d576:	4b6a      	ldr	r3, [pc, #424]	@ (800d720 <gc_execute_block+0x5a4>)
 800d578:	699b      	ldr	r3, [r3, #24]
 800d57a:	b143      	cbz	r3, 800d58e <gc_execute_block+0x412>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Enable;
 800d57c:	4b66      	ldr	r3, [pc, #408]	@ (800d718 <gc_execute_block+0x59c>)
 800d57e:	2201      	movs	r2, #1
 800d580:	73da      	strb	r2, [r3, #15]
 800d582:	e76f      	b.n	800d464 <gc_execute_block+0x2e8>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Cancel;
 800d584:	2300      	movs	r3, #0
 800d586:	4a64      	ldr	r2, [pc, #400]	@ (800d718 <gc_execute_block+0x59c>)
 800d588:	73d3      	strb	r3, [r2, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d58a:	4619      	mov	r1, r3
 800d58c:	e76a      	b.n	800d464 <gc_execute_block+0x2e8>
                        else if(mantissa == 20 && grbl.tool_table.n_tools) // G43.2
 800d58e:	2914      	cmp	r1, #20
 800d590:	d00d      	beq.n	800d5ae <gc_execute_block+0x432>
                        else if(mantissa == 10) { // G43.1
 800d592:	290a      	cmp	r1, #10
 800d594:	f043 83d0 	bne.w	8010d38 <gc_execute_block+0x3bbc>
                            if(axis_command)
 800d598:	f1ba 0f00 	cmp.w	sl, #0
 800d59c:	f043 83cf 	bne.w	8010d3e <gc_execute_block+0x3bc2>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_EnableDynamic;
 800d5a0:	4b5d      	ldr	r3, [pc, #372]	@ (800d718 <gc_execute_block+0x59c>)
 800d5a2:	2202      	movs	r2, #2
 800d5a4:	73da      	strb	r2, [r3, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d5a6:	2100      	movs	r1, #0
                            axis_command = AxisCommand_ToolLengthOffset;
 800d5a8:	f04f 0a03 	mov.w	sl, #3
 800d5ac:	e75a      	b.n	800d464 <gc_execute_block+0x2e8>
                        else if(mantissa == 20 && grbl.tool_table.n_tools) // G43.2
 800d5ae:	4b5c      	ldr	r3, [pc, #368]	@ (800d720 <gc_execute_block+0x5a4>)
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0ed      	beq.n	800d592 <gc_execute_block+0x416>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
 800d5b6:	4b58      	ldr	r3, [pc, #352]	@ (800d718 <gc_execute_block+0x59c>)
 800d5b8:	2203      	movs	r2, #3
 800d5ba:	73da      	strb	r2, [r3, #15]
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800d5bc:	2100      	movs	r1, #0
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
 800d5be:	e751      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G12 = On;
 800d5c0:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d5c4:	f043 0308 	orr.w	r3, r3, #8
 800d5c8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.coord_system.id = (coord_system_id_t)(int_value - 54); // Shift to array indexing.
 800d5cc:	b2e2      	uxtb	r2, r4
 800d5ce:	3a36      	subs	r2, #54	@ 0x36
 800d5d0:	b2d2      	uxtb	r2, r2
 800d5d2:	4b51      	ldr	r3, [pc, #324]	@ (800d718 <gc_execute_block+0x59c>)
 800d5d4:	771a      	strb	r2, [r3, #28]
                        if(int_value == 59 && mantissa > 0) {
 800d5d6:	2c3b      	cmp	r4, #59	@ 0x3b
 800d5d8:	f47f af44 	bne.w	800d464 <gc_execute_block+0x2e8>
 800d5dc:	291e      	cmp	r1, #30
 800d5de:	f203 83b1 	bhi.w	8010d44 <gc_execute_block+0x3bc8>
 800d5e2:	a301      	add	r3, pc, #4	@ (adr r3, 800d5e8 <gc_execute_block+0x46c>)
 800d5e4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800d5e8:	0800d465 	.word	0x0800d465
 800d5ec:	08010d45 	.word	0x08010d45
 800d5f0:	08010d45 	.word	0x08010d45
 800d5f4:	08010d45 	.word	0x08010d45
 800d5f8:	08010d45 	.word	0x08010d45
 800d5fc:	08010d45 	.word	0x08010d45
 800d600:	08010d45 	.word	0x08010d45
 800d604:	08010d45 	.word	0x08010d45
 800d608:	08010d45 	.word	0x08010d45
 800d60c:	08010d45 	.word	0x08010d45
 800d610:	0800d665 	.word	0x0800d665
 800d614:	08010d45 	.word	0x08010d45
 800d618:	08010d45 	.word	0x08010d45
 800d61c:	08010d45 	.word	0x08010d45
 800d620:	08010d45 	.word	0x08010d45
 800d624:	08010d45 	.word	0x08010d45
 800d628:	08010d45 	.word	0x08010d45
 800d62c:	08010d45 	.word	0x08010d45
 800d630:	08010d45 	.word	0x08010d45
 800d634:	08010d45 	.word	0x08010d45
 800d638:	0800d665 	.word	0x0800d665
 800d63c:	08010d45 	.word	0x08010d45
 800d640:	08010d45 	.word	0x08010d45
 800d644:	08010d45 	.word	0x08010d45
 800d648:	08010d45 	.word	0x08010d45
 800d64c:	08010d45 	.word	0x08010d45
 800d650:	08010d45 	.word	0x08010d45
 800d654:	08010d45 	.word	0x08010d45
 800d658:	08010d45 	.word	0x08010d45
 800d65c:	08010d45 	.word	0x08010d45
 800d660:	0800d665 	.word	0x0800d665
                                gc_block.modal.coord_system.id += mantissa / 10;
 800d664:	4b2b      	ldr	r3, [pc, #172]	@ (800d714 <gc_execute_block+0x598>)
 800d666:	fba3 1301 	umull	r1, r3, r3, r1
 800d66a:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 800d66e:	4b2a      	ldr	r3, [pc, #168]	@ (800d718 <gc_execute_block+0x59c>)
 800d670:	771a      	strb	r2, [r3, #28]
                                mantissa = 0;
 800d672:	2100      	movs	r1, #0
 800d674:	e6f6      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G13 = On;
 800d676:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d67a:	f043 0310 	orr.w	r3, r3, #16
 800d67e:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        if (mantissa != 0) // [G61.1 not supported]
 800d682:	2900      	cmp	r1, #0
 800d684:	f43f aeee 	beq.w	800d464 <gc_execute_block+0x2e8>
                            FAIL(Status_GcodeUnsupportedCommand);
 800d688:	2414      	movs	r4, #20
 800d68a:	e654      	b.n	800d336 <gc_execute_block+0x1ba>
                        word_bit.modal_group.G0 = On;
 800d68c:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
 800d690:	f043 0301 	orr.w	r3, r3, #1
 800d694:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800d698:	4b1f      	ldr	r3, [pc, #124]	@ (800d718 <gc_execute_block+0x59c>)
 800d69a:	701c      	strb	r4, [r3, #0]
                        if(mantissa != 0 || grbl.on_macro_execute == NULL)
 800d69c:	2900      	cmp	r1, #0
 800d69e:	f043 8354 	bne.w	8010d4a <gc_execute_block+0x3bce>
 800d6a2:	4b1f      	ldr	r3, [pc, #124]	@ (800d720 <gc_execute_block+0x5a4>)
 800d6a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f47f aedb 	bne.w	800d464 <gc_execute_block+0x2e8>
                            FAIL(Status_GcodeUnsupportedCommand);
 800d6ae:	2414      	movs	r4, #20
 800d6b0:	e641      	b.n	800d336 <gc_execute_block+0x1ba>
                        if(settings.mode == Mode_Lathe) {
 800d6b2:	4b1c      	ldr	r3, [pc, #112]	@ (800d724 <gc_execute_block+0x5a8>)
 800d6b4:	7e1b      	ldrb	r3, [r3, #24]
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	f043 834a 	bne.w	8010d50 <gc_execute_block+0x3bd4>
                            word_bit.modal_group.G14 = On;
 800d6bc:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d6c0:	f043 0320 	orr.w	r3, r3, #32
 800d6c4:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                            gc_block.modal.spindle.rpm_mode = (spindle_rpm_mode_t)((int_value - 96) ^ 1);
 800d6c8:	f1a4 0360 	sub.w	r3, r4, #96	@ 0x60
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	f083 0301 	eor.w	r3, r3, #1
 800d6d2:	4a11      	ldr	r2, [pc, #68]	@ (800d718 <gc_execute_block+0x59c>)
 800d6d4:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
                        break;
 800d6d8:	e6c4      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G10 = On;
 800d6da:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d6de:	f043 0302 	orr.w	r3, r3, #2
 800d6e2:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.retract_mode = (cc_retract_mode_t)(int_value - 98);
 800d6e6:	b2e3      	uxtb	r3, r4
 800d6e8:	3b62      	subs	r3, #98	@ 0x62
 800d6ea:	4a0b      	ldr	r2, [pc, #44]	@ (800d718 <gc_execute_block+0x59c>)
 800d6ec:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
                        break;
 800d6f0:	e6b8      	b.n	800d464 <gc_execute_block+0x2e8>
                        word_bit.modal_group.G11 = On;
 800d6f2:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d6f6:	f043 0304 	orr.w	r3, r3, #4
 800d6fa:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.scaling_active = int_value == 51;
 800d6fe:	2c33      	cmp	r4, #51	@ 0x33
 800d700:	bf14      	ite	ne
 800d702:	2200      	movne	r2, #0
 800d704:	2201      	moveq	r2, #1
 800d706:	4b04      	ldr	r3, [pc, #16]	@ (800d718 <gc_execute_block+0x59c>)
 800d708:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        axis_command = AxisCommand_Scaling;
 800d70c:	f04f 0a04 	mov.w	sl, #4
                        break;
 800d710:	e6a8      	b.n	800d464 <gc_execute_block+0x2e8>
 800d712:	bf00      	nop
 800d714:	cccccccd 	.word	0xcccccccd
 800d718:	20000df0 	.word	0x20000df0
 800d71c:	20000ef8 	.word	0x20000ef8
 800d720:	200013a8 	.word	0x200013a8
 800d724:	20001bd8 	.word	0x20001bd8
                if(gc_block.non_modal_command == NonModal_MacroCall) {
 800d728:	4ba4      	ldr	r3, [pc, #656]	@ (800d9bc <gc_execute_block+0x840>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b41      	cmp	r3, #65	@ 0x41
 800d72e:	d06d      	beq.n	800d80c <gc_execute_block+0x690>
                if(mantissa > 0)
 800d730:	2900      	cmp	r1, #0
 800d732:	f043 8319 	bne.w	8010d68 <gc_execute_block+0x3bec>
                word_bit.modal_group.mask = 0;
 800d736:	2300      	movs	r3, #0
 800d738:	931f      	str	r3, [sp, #124]	@ 0x7c
                switch(int_value) {
 800d73a:	2c63      	cmp	r4, #99	@ 0x63
 800d73c:	f200 81b0 	bhi.w	800daa0 <gc_execute_block+0x924>
 800d740:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d744:	00750075 	.word	0x00750075
 800d748:	00af0075 	.word	0x00af0075
 800d74c:	00af00af 	.word	0x00af00af
 800d750:	00ec00d2 	.word	0x00ec00d2
 800d754:	00ec00ec 	.word	0x00ec00ec
 800d758:	01ae01ae 	.word	0x01ae01ae
 800d75c:	01ae01ae 	.word	0x01ae01ae
 800d760:	01ae01ae 	.word	0x01ae01ae
 800d764:	01ae01ae 	.word	0x01ae01ae
 800d768:	01ae01ae 	.word	0x01ae01ae
 800d76c:	01ae01ae 	.word	0x01ae01ae
 800d770:	01ae01ae 	.word	0x01ae01ae
 800d774:	01ae01ae 	.word	0x01ae01ae
 800d778:	01ae01ae 	.word	0x01ae01ae
 800d77c:	01ae01ae 	.word	0x01ae01ae
 800d780:	01ae0075 	.word	0x01ae0075
 800d784:	01ae01ae 	.word	0x01ae01ae
 800d788:	01ae01ae 	.word	0x01ae01ae
 800d78c:	01ae01ae 	.word	0x01ae01ae
 800d790:	01ae01ae 	.word	0x01ae01ae
 800d794:	01ae01ae 	.word	0x01ae01ae
 800d798:	01ae01ae 	.word	0x01ae01ae
 800d79c:	01ae01ae 	.word	0x01ae01ae
 800d7a0:	01ae01ae 	.word	0x01ae01ae
 800d7a4:	012c012c 	.word	0x012c012c
 800d7a8:	012c012c 	.word	0x012c012c
 800d7ac:	012c01ae 	.word	0x012c01ae
 800d7b0:	01ae01ae 	.word	0x01ae01ae
 800d7b4:	01ae0125 	.word	0x01ae0125
 800d7b8:	01ae01ae 	.word	0x01ae01ae
 800d7bc:	01440075 	.word	0x01440075
 800d7c0:	014f014f 	.word	0x014f014f
 800d7c4:	014f014f 	.word	0x014f014f
 800d7c8:	017e0166 	.word	0x017e0166
 800d7cc:	01ae017e 	.word	0x01ae017e
 800d7d0:	01950195 	.word	0x01950195
 800d7d4:	01950195 	.word	0x01950195
 800d7d8:	01ae01ae 	.word	0x01ae01ae
 800d7dc:	01ae01ae 	.word	0x01ae01ae
 800d7e0:	01ae01ae 	.word	0x01ae01ae
 800d7e4:	01ae01ae 	.word	0x01ae01ae
 800d7e8:	01ae01ae 	.word	0x01ae01ae
 800d7ec:	01ae01ae 	.word	0x01ae01ae
 800d7f0:	01ae01ae 	.word	0x01ae01ae
 800d7f4:	01ae01ae 	.word	0x01ae01ae
 800d7f8:	01ae01ae 	.word	0x01ae01ae
 800d7fc:	01ae01ae 	.word	0x01ae01ae
 800d800:	01ae01ae 	.word	0x01ae01ae
 800d804:	01ae01ae 	.word	0x01ae01ae
 800d808:	019b01ae 	.word	0x019b01ae
                    if(gc_block.words.m)
 800d80c:	4b6b      	ldr	r3, [pc, #428]	@ (800d9bc <gc_execute_block+0x840>)
 800d80e:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800d812:	f013 0f20 	tst.w	r3, #32
 800d816:	f043 82a4 	bne.w	8010d62 <gc_execute_block+0x3be6>
                    gc_block.values.m = value;
 800d81a:	4b68      	ldr	r3, [pc, #416]	@ (800d9bc <gc_execute_block+0x840>)
 800d81c:	ed83 8a16 	vstr	s16, [r3, #88]	@ 0x58
                    gc_block.words.m = On; // Flag to indicate parameter assigned.
 800d820:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800d824:	f042 0220 	orr.w	r2, r2, #32
 800d828:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                    continue;
 800d82c:	e16c      	b.n	800db08 <gc_execute_block+0x98c>
                        word_bit.modal_group.M4 = On;
 800d82e:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800d832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d836:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        switch(int_value) {
 800d83a:	b13c      	cbz	r4, 800d84c <gc_execute_block+0x6d0>
 800d83c:	2c01      	cmp	r4, #1
 800d83e:	d00c      	beq.n	800d85a <gc_execute_block+0x6de>
                                gc_block.modal.program_flow = (program_flow_t)int_value;
 800d840:	4b5e      	ldr	r3, [pc, #376]	@ (800d9bc <gc_execute_block+0x840>)
 800d842:	f883 4020 	strb.w	r4, [r3, #32]
                is_user_mcode = false;
 800d846:	f04f 0900 	mov.w	r9, #0
 800d84a:	e0b1      	b.n	800d9b0 <gc_execute_block+0x834>
                                gc_block.modal.program_flow = ProgramFlow_Paused;
 800d84c:	4b5b      	ldr	r3, [pc, #364]	@ (800d9bc <gc_execute_block+0x840>)
 800d84e:	2203      	movs	r2, #3
 800d850:	f883 2020 	strb.w	r2, [r3, #32]
                is_user_mcode = false;
 800d854:	f04f 0900 	mov.w	r9, #0
                                break;
 800d858:	e0aa      	b.n	800d9b0 <gc_execute_block+0x834>
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 800d85a:	4b59      	ldr	r3, [pc, #356]	@ (800d9c0 <gc_execute_block+0x844>)
 800d85c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 800d860:	f013 0f20 	tst.w	r3, #32
 800d864:	d013      	beq.n	800d88e <gc_execute_block+0x712>
 800d866:	4b56      	ldr	r3, [pc, #344]	@ (800d9c0 <gc_execute_block+0x844>)
 800d868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d86a:	4798      	blx	r3
 800d86c:	f3c0 1942 	ubfx	r9, r0, #5, #3
 800d870:	f089 0901 	eor.w	r9, r9, #1
 800d874:	f009 0901 	and.w	r9, r9, #1
 800d878:	f1b9 0f00 	cmp.w	r9, #0
 800d87c:	f000 8098 	beq.w	800d9b0 <gc_execute_block+0x834>
                                    gc_block.modal.program_flow = ProgramFlow_OptionalStop;
 800d880:	4b4e      	ldr	r3, [pc, #312]	@ (800d9bc <gc_execute_block+0x840>)
 800d882:	2201      	movs	r2, #1
 800d884:	f883 2020 	strb.w	r2, [r3, #32]
                is_user_mcode = false;
 800d888:	f04f 0900 	mov.w	r9, #0
 800d88c:	e090      	b.n	800d9b0 <gc_execute_block+0x834>
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 800d88e:	4b4d      	ldr	r3, [pc, #308]	@ (800d9c4 <gc_execute_block+0x848>)
 800d890:	f893 9016 	ldrb.w	r9, [r3, #22]
 800d894:	ea4f 1999 	mov.w	r9, r9, lsr #6
 800d898:	f089 0901 	eor.w	r9, r9, #1
 800d89c:	f009 0901 	and.w	r9, r9, #1
 800d8a0:	e7ea      	b.n	800d878 <gc_execute_block+0x6fc>
                        word_bit.modal_group.M7 = On;
 800d8a2:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d8a6:	f043 0302 	orr.w	r3, r3, #2
 800d8aa:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        gc_block.modal.spindle.state.on = !(int_value == 5);
 800d8ae:	1f61      	subs	r1, r4, #5
 800d8b0:	bf18      	it	ne
 800d8b2:	2101      	movne	r1, #1
 800d8b4:	4b41      	ldr	r3, [pc, #260]	@ (800d9bc <gc_execute_block+0x840>)
 800d8b6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800d8ba:	f361 0200 	bfi	r2, r1, #0, #1
 800d8be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        gc_block.modal.spindle.state.ccw = int_value == 4;
 800d8c2:	2c04      	cmp	r4, #4
 800d8c4:	bf14      	ite	ne
 800d8c6:	2100      	movne	r1, #0
 800d8c8:	2101      	moveq	r1, #1
 800d8ca:	b2d2      	uxtb	r2, r2
 800d8cc:	f361 0241 	bfi	r2, r1, #1, #1
 800d8d0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        sys.override_delay.spindle = On;
 800d8d4:	4a3b      	ldr	r2, [pc, #236]	@ (800d9c4 <gc_execute_block+0x848>)
 800d8d6:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800d8da:	f043 0304 	orr.w	r3, r3, #4
 800d8de:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                is_user_mcode = false;
 800d8e2:	f04f 0900 	mov.w	r9, #0
                        break;
 800d8e6:	e063      	b.n	800d9b0 <gc_execute_block+0x834>
                        if(settings.tool_change.mode != ToolChange_Ignore) {
 800d8e8:	4b37      	ldr	r3, [pc, #220]	@ (800d9c8 <gc_execute_block+0x84c>)
 800d8ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d8ee:	2b04      	cmp	r3, #4
 800d8f0:	f000 80ea 	beq.w	800dac8 <gc_execute_block+0x94c>
                            if(hal.stream.suspend_read || hal.tool.change)
 800d8f4:	4b32      	ldr	r3, [pc, #200]	@ (800d9c0 <gc_execute_block+0x844>)
 800d8f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d8fa:	b143      	cbz	r3, 800d90e <gc_execute_block+0x792>
                                word_bit.modal_group.M6 = On;
 800d8fc:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d900:	f043 0301 	orr.w	r3, r3, #1
 800d904:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                is_user_mcode = false;
 800d908:	f04f 0900 	mov.w	r9, #0
                                word_bit.modal_group.M6 = On;
 800d90c:	e050      	b.n	800d9b0 <gc_execute_block+0x834>
                            if(hal.stream.suspend_read || hal.tool.change)
 800d90e:	4b2c      	ldr	r3, [pc, #176]	@ (800d9c0 <gc_execute_block+0x844>)
 800d910:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d914:	2b00      	cmp	r3, #0
 800d916:	d1f1      	bne.n	800d8fc <gc_execute_block+0x780>
                                FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 800d918:	2414      	movs	r4, #20
 800d91a:	e50c      	b.n	800d336 <gc_execute_block+0x1ba>
                        word_bit.modal_group.M8 = On;
 800d91c:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d920:	f043 0304 	orr.w	r3, r3, #4
 800d924:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        sys.override_delay.coolant = On;
 800d928:	4a26      	ldr	r2, [pc, #152]	@ (800d9c4 <gc_execute_block+0x848>)
 800d92a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800d92e:	f043 0302 	orr.w	r3, r3, #2
 800d932:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                        gc_parser_flags.set_coolant = On;
 800d936:	f448 7880 	orr.w	r8, r8, #256	@ 0x100
                        switch(int_value) {
 800d93a:	2c08      	cmp	r4, #8
 800d93c:	d017      	beq.n	800d96e <gc_execute_block+0x7f2>
 800d93e:	2c09      	cmp	r4, #9
 800d940:	d01f      	beq.n	800d982 <gc_execute_block+0x806>
 800d942:	2c07      	cmp	r4, #7
 800d944:	d002      	beq.n	800d94c <gc_execute_block+0x7d0>
 800d946:	f04f 0900 	mov.w	r9, #0
 800d94a:	e031      	b.n	800d9b0 <gc_execute_block+0x834>
                                if(!hal.coolant_cap.mist)
 800d94c:	4b1c      	ldr	r3, [pc, #112]	@ (800d9c0 <gc_execute_block+0x844>)
 800d94e:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 800d952:	f013 0f02 	tst.w	r3, #2
 800d956:	f003 820a 	beq.w	8010d6e <gc_execute_block+0x3bf2>
                                gc_block.modal.coolant.mist = On;
 800d95a:	4a18      	ldr	r2, [pc, #96]	@ (800d9bc <gc_execute_block+0x840>)
 800d95c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800d960:	f043 0302 	orr.w	r3, r3, #2
 800d964:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
                is_user_mcode = false;
 800d968:	f04f 0900 	mov.w	r9, #0
                                break;
 800d96c:	e020      	b.n	800d9b0 <gc_execute_block+0x834>
                                gc_block.modal.coolant.flood = On;
 800d96e:	4a13      	ldr	r2, [pc, #76]	@ (800d9bc <gc_execute_block+0x840>)
 800d970:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800d974:	f043 0301 	orr.w	r3, r3, #1
 800d978:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
                is_user_mcode = false;
 800d97c:	f04f 0900 	mov.w	r9, #0
                                break;
 800d980:	e016      	b.n	800d9b0 <gc_execute_block+0x834>
                                gc_block.modal.coolant.value = 0;
 800d982:	f04f 0900 	mov.w	r9, #0
 800d986:	4b0d      	ldr	r3, [pc, #52]	@ (800d9bc <gc_execute_block+0x840>)
 800d988:	f883 9021 	strb.w	r9, [r3, #33]	@ 0x21
                                break;
 800d98c:	e010      	b.n	800d9b0 <gc_execute_block+0x834>
                        if(!settings.parking.flags.enable_override_control) // TODO: check if enabled?
 800d98e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c8 <gc_execute_block+0x84c>)
 800d990:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800d994:	f013 0f04 	tst.w	r3, #4
 800d998:	f003 81ec 	beq.w	8010d74 <gc_execute_block+0x3bf8>
                        word_bit.modal_group.M9 = On;
 800d99c:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d9a0:	f043 0308 	orr.w	r3, r3, #8
 800d9a4:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        gc_block.override_command = (override_mode_t)int_value;
 800d9a8:	4b04      	ldr	r3, [pc, #16]	@ (800d9bc <gc_execute_block+0x840>)
 800d9aa:	705c      	strb	r4, [r3, #1]
                is_user_mcode = false;
 800d9ac:	f04f 0900 	mov.w	r9, #0
                if (command_words.mask & word_bit.modal_group.mask)
 800d9b0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d9b2:	421f      	tst	r7, r3
 800d9b4:	f043 81f6 	bne.w	8010da4 <gc_execute_block+0x3c28>
                command_words.mask |= word_bit.modal_group.mask;
 800d9b8:	431f      	orrs	r7, r3
                break;
 800d9ba:	e0a5      	b.n	800db08 <gc_execute_block+0x98c>
 800d9bc:	20000df0 	.word	0x20000df0
 800d9c0:	200011c0 	.word	0x200011c0
 800d9c4:	200014a0 	.word	0x200014a0
 800d9c8:	20001bd8 	.word	0x20001bd8
                        word_bit.modal_group.M6 = On; //??
 800d9cc:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d9d0:	f043 0301 	orr.w	r3, r3, #1
 800d9d4:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                is_user_mcode = false;
 800d9d8:	f04f 0900 	mov.w	r9, #0
                        set_tool = true;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	9307      	str	r3, [sp, #28]
                        break;
 800d9e0:	e7e6      	b.n	800d9b0 <gc_execute_block+0x834>
                        if(hal.port.digital_out == NULL || hal.port.num_digital_out == 0)
 800d9e2:	4bcc      	ldr	r3, [pc, #816]	@ (800dd14 <gc_execute_block+0xb98>)
 800d9e4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f003 81c6 	beq.w	8010d7a <gc_execute_block+0x3bfe>
 800d9ee:	4bc9      	ldr	r3, [pc, #804]	@ (800dd14 <gc_execute_block+0xb98>)
 800d9f0:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f003 81c3 	beq.w	8010d80 <gc_execute_block+0x3c04>
                        word_bit.modal_group.M10 = On;
 800d9fa:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800d9fe:	f043 0310 	orr.w	r3, r3, #16
 800da02:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800da06:	b2e3      	uxtb	r3, r4
 800da08:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800da0a:	f04f 0900 	mov.w	r9, #0
                        break;
 800da0e:	e7cf      	b.n	800d9b0 <gc_execute_block+0x834>
                        if(hal.port.wait_on_input == NULL || (hal.port.num_digital_in == 0 && hal.port.num_analog_in == 0))
 800da10:	4bc0      	ldr	r3, [pc, #768]	@ (800dd14 <gc_execute_block+0xb98>)
 800da12:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800da16:	2b00      	cmp	r3, #0
 800da18:	f003 81b5 	beq.w	8010d86 <gc_execute_block+0x3c0a>
 800da1c:	4bbd      	ldr	r3, [pc, #756]	@ (800dd14 <gc_execute_block+0xb98>)
 800da1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800da22:	f013 1fff 	tst.w	r3, #16711935	@ 0xff00ff
 800da26:	f003 81b1 	beq.w	8010d8c <gc_execute_block+0x3c10>
                        word_bit.modal_group.M10 = On;
 800da2a:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800da2e:	f043 0310 	orr.w	r3, r3, #16
 800da32:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800da36:	b2e3      	uxtb	r3, r4
 800da38:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800da3a:	f04f 0900 	mov.w	r9, #0
                        break;
 800da3e:	e7b7      	b.n	800d9b0 <gc_execute_block+0x834>
                        if(hal.port.analog_out == NULL || hal.port.num_analog_out == 0)
 800da40:	4bb4      	ldr	r3, [pc, #720]	@ (800dd14 <gc_execute_block+0xb98>)
 800da42:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800da46:	2b00      	cmp	r3, #0
 800da48:	f003 81a3 	beq.w	8010d92 <gc_execute_block+0x3c16>
 800da4c:	4bb1      	ldr	r3, [pc, #708]	@ (800dd14 <gc_execute_block+0xb98>)
 800da4e:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800da52:	2b00      	cmp	r3, #0
 800da54:	f003 81a0 	beq.w	8010d98 <gc_execute_block+0x3c1c>
                        word_bit.modal_group.M10 = On;
 800da58:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800da5c:	f043 0310 	orr.w	r3, r3, #16
 800da60:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                        port_command = (io_mcode_t)int_value;
 800da64:	b2e3      	uxtb	r3, r4
 800da66:	9306      	str	r3, [sp, #24]
                is_user_mcode = false;
 800da68:	f04f 0900 	mov.w	r9, #0
                        break;
 800da6c:	e7a0      	b.n	800d9b0 <gc_execute_block+0x834>
                        gc_block.state_action = (modal_state_action_t)int_value;
 800da6e:	4baa      	ldr	r3, [pc, #680]	@ (800dd18 <gc_execute_block+0xb9c>)
 800da70:	f883 40d0 	strb.w	r4, [r3, #208]	@ 0xd0
                is_user_mcode = false;
 800da74:	f04f 0900 	mov.w	r9, #0
                        break;
 800da78:	e79a      	b.n	800d9b0 <gc_execute_block+0x834>
                        word_bit.modal_group.M4 = On;
 800da7a:	f89d 307d 	ldrb.w	r3, [sp, #125]	@ 0x7d
 800da7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da82:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
                        gc_block.modal.program_flow = ProgramFlow_Return;
 800da86:	4ba4      	ldr	r3, [pc, #656]	@ (800dd18 <gc_execute_block+0xb9c>)
 800da88:	2263      	movs	r2, #99	@ 0x63
 800da8a:	f883 2020 	strb.w	r2, [r3, #32]
                        if(grbl.on_macro_return == NULL)
 800da8e:	4ba3      	ldr	r3, [pc, #652]	@ (800dd1c <gc_execute_block+0xba0>)
 800da90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da94:	2b00      	cmp	r3, #0
 800da96:	f003 8182 	beq.w	8010d9e <gc_execute_block+0x3c22>
                is_user_mcode = false;
 800da9a:	f04f 0900 	mov.w	r9, #0
 800da9e:	e787      	b.n	800d9b0 <gc_execute_block+0x834>
                        if(hal.user_mcode.check && (gc_block.user_mcode = hal.user_mcode.check((user_mcode_t)int_value))) {
 800daa0:	4b9c      	ldr	r3, [pc, #624]	@ (800dd14 <gc_execute_block+0xb98>)
 800daa2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800daa6:	b16b      	cbz	r3, 800dac4 <gc_execute_block+0x948>
 800daa8:	b2a0      	uxth	r0, r4
 800daaa:	4798      	blx	r3
 800daac:	4b9a      	ldr	r3, [pc, #616]	@ (800dd18 <gc_execute_block+0xb9c>)
 800daae:	8058      	strh	r0, [r3, #2]
 800dab0:	b140      	cbz	r0, 800dac4 <gc_execute_block+0x948>
                            word_bit.modal_group.M10 = On;
 800dab2:	f89d 307e 	ldrb.w	r3, [sp, #126]	@ 0x7e
 800dab6:	f043 0310 	orr.w	r3, r3, #16
 800daba:	f88d 307e 	strb.w	r3, [sp, #126]	@ 0x7e
                            is_user_mcode = true;
 800dabe:	f04f 0901 	mov.w	r9, #1
                            word_bit.modal_group.M10 = On;
 800dac2:	e775      	b.n	800d9b0 <gc_execute_block+0x834>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 800dac4:	2414      	movs	r4, #20
 800dac6:	e436      	b.n	800d336 <gc_execute_block+0x1ba>
                is_user_mcode = false;
 800dac8:	f04f 0900 	mov.w	r9, #0
 800dacc:	e770      	b.n	800d9b0 <gc_execute_block+0x834>
                        word_bit.parameter.a = On;
 800dace:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dad2:	f043 0302 	orr.w	r3, r3, #2
 800dad6:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.a = value;
 800dada:	4b8f      	ldr	r3, [pc, #572]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dadc:	ed83 8a1b 	vstr	s16, [r3, #108]	@ 0x6c
                if (gc_block.words.mask & word_bit.parameter.mask)
 800dae0:	4b8d      	ldr	r3, [pc, #564]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dae2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dae6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800dae8:	4213      	tst	r3, r2
 800daea:	f043 8173 	bne.w	8010dd4 <gc_execute_block+0x3c58>
                if ((word_bit.parameter.mask & positive_only_words.mask) && value < 0.0f)
 800daee:	498c      	ldr	r1, [pc, #560]	@ (800dd20 <gc_execute_block+0xba4>)
 800daf0:	420a      	tst	r2, r1
 800daf2:	d005      	beq.n	800db00 <gc_execute_block+0x984>
 800daf4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800daf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dafc:	f103 816d 	bmi.w	8010dda <gc_execute_block+0x3c5e>
                gc_block.words.mask |= word_bit.parameter.mask; // Flag to indicate parameter assigned.
 800db00:	4313      	orrs	r3, r2
 800db02:	4a85      	ldr	r2, [pc, #532]	@ (800dd18 <gc_execute_block+0xb9c>)
 800db04:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 800db08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800db0a:	1c5a      	adds	r2, r3, #1
 800db0c:	9221      	str	r2, [sp, #132]	@ 0x84
 800db0e:	5cf5      	ldrb	r5, [r6, r3]
 800db10:	2d00      	cmp	r5, #0
 800db12:	f000 81fb 	beq.w	800df0c <gc_execute_block+0xd90>
        if((letter < 'A' && letter != '$') || letter > 'Z')
 800db16:	2d40      	cmp	r5, #64	@ 0x40
 800db18:	f63f ab8d 	bhi.w	800d236 <gc_execute_block+0xba>
 800db1c:	2d24      	cmp	r5, #36	@ 0x24
 800db1e:	f043 80d5 	bne.w	8010ccc <gc_execute_block+0x3b50>
        if (!read_float(block, &char_counter, &value)) {
 800db22:	aa20      	add	r2, sp, #128	@ 0x80
 800db24:	a921      	add	r1, sp, #132	@ 0x84
 800db26:	4630      	mov	r0, r6
 800db28:	f007 fccc 	bl	80154c4 <read_float>
 800db2c:	b928      	cbnz	r0, 800db3a <gc_execute_block+0x9be>
            if(is_user_mcode)                   // Valueless parameters allowed for user defined M-codes.
 800db2e:	f1b9 0f00 	cmp.w	r9, #0
 800db32:	f003 80ce 	beq.w	8010cd2 <gc_execute_block+0x3b56>
                value = NAN;                    // Parameter validation deferred to implementation.
 800db36:	4b7b      	ldr	r3, [pc, #492]	@ (800dd24 <gc_execute_block+0xba8>)
 800db38:	9320      	str	r3, [sp, #128]	@ 0x80
        if(isnan(value))
 800db3a:	ed9d 8a20 	vldr	s16, [sp, #128]	@ 0x80
 800db3e:	eeb4 8a48 	vcmp.f32	s16, s16
 800db42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db46:	f5bf ab7b 	bvs.w	800d240 <gc_execute_block+0xc4>
            int_value = (uint32_t)truncf(value);
 800db4a:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800db4e:	ee17 4a90 	vmov	r4, s15
            mantissa = (uint_fast16_t)roundf(100.0f * (value - int_value));
 800db52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db56:	ee78 7a67 	vsub.f32	s15, s16, s15
 800db5a:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 800dd28 <gc_execute_block+0xbac>
 800db5e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800db62:	f019 fc59 	bl	8027418 <roundf>
 800db66:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800db6a:	ee17 1a90 	vmov	r1, s15
        switch(letter) {
 800db6e:	2d47      	cmp	r5, #71	@ 0x47
 800db70:	f43f ab69 	beq.w	800d246 <gc_execute_block+0xca>
 800db74:	2d4d      	cmp	r5, #77	@ 0x4d
 800db76:	f43f add7 	beq.w	800d728 <gc_execute_block+0x5ac>
                word_bit.parameter.mask = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	931e      	str	r3, [sp, #120]	@ 0x78
                switch(letter) {
 800db7e:	3d24      	subs	r5, #36	@ 0x24
 800db80:	2d36      	cmp	r5, #54	@ 0x36
 800db82:	f203 8112 	bhi.w	8010daa <gc_execute_block+0x3c2e>
 800db86:	a301      	add	r3, pc, #4	@ (adr r3, 800db8c <gc_execute_block+0xa10>)
 800db88:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800db8c:	0800deef 	.word	0x0800deef
 800db90:	08010dab 	.word	0x08010dab
 800db94:	08010dab 	.word	0x08010dab
 800db98:	08010dab 	.word	0x08010dab
 800db9c:	08010dab 	.word	0x08010dab
 800dba0:	08010dab 	.word	0x08010dab
 800dba4:	08010dab 	.word	0x08010dab
 800dba8:	08010dab 	.word	0x08010dab
 800dbac:	08010dab 	.word	0x08010dab
 800dbb0:	08010dab 	.word	0x08010dab
 800dbb4:	08010dab 	.word	0x08010dab
 800dbb8:	08010dab 	.word	0x08010dab
 800dbbc:	08010dab 	.word	0x08010dab
 800dbc0:	08010dab 	.word	0x08010dab
 800dbc4:	08010dab 	.word	0x08010dab
 800dbc8:	08010dab 	.word	0x08010dab
 800dbcc:	08010dab 	.word	0x08010dab
 800dbd0:	08010dab 	.word	0x08010dab
 800dbd4:	08010dab 	.word	0x08010dab
 800dbd8:	08010dab 	.word	0x08010dab
 800dbdc:	08010dab 	.word	0x08010dab
 800dbe0:	08010dab 	.word	0x08010dab
 800dbe4:	08010dab 	.word	0x08010dab
 800dbe8:	08010dab 	.word	0x08010dab
 800dbec:	08010dab 	.word	0x08010dab
 800dbf0:	08010dab 	.word	0x08010dab
 800dbf4:	08010dab 	.word	0x08010dab
 800dbf8:	08010dab 	.word	0x08010dab
 800dbfc:	08010dab 	.word	0x08010dab
 800dc00:	0800dacf 	.word	0x0800dacf
 800dc04:	0800dc69 	.word	0x0800dc69
 800dc08:	0800dc7d 	.word	0x0800dc7d
 800dc0c:	0800dc91 	.word	0x0800dc91
 800dc10:	0800dca5 	.word	0x0800dca5
 800dc14:	0800dcb9 	.word	0x0800dcb9
 800dc18:	08010dab 	.word	0x08010dab
 800dc1c:	0800dccd 	.word	0x0800dccd
 800dc20:	0800dcf9 	.word	0x0800dcf9
 800dc24:	0800dd2d 	.word	0x0800dd2d
 800dc28:	0800dd49 	.word	0x0800dd49
 800dc2c:	0800dd65 	.word	0x0800dd65
 800dc30:	08010dab 	.word	0x08010dab
 800dc34:	0800dd8f 	.word	0x0800dd8f
 800dc38:	0800dda7 	.word	0x0800dda7
 800dc3c:	0800ddd3 	.word	0x0800ddd3
 800dc40:	0800dde7 	.word	0x0800dde7
 800dc44:	0800ddfb 	.word	0x0800ddfb
 800dc48:	0800de0f 	.word	0x0800de0f
 800dc4c:	0800de23 	.word	0x0800de23
 800dc50:	0800de6b 	.word	0x0800de6b
 800dc54:	0800de7f 	.word	0x0800de7f
 800dc58:	0800de93 	.word	0x0800de93
 800dc5c:	0800dea7 	.word	0x0800dea7
 800dc60:	0800debf 	.word	0x0800debf
 800dc64:	0800ded7 	.word	0x0800ded7
                        word_bit.parameter.b = On;
 800dc68:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dc6c:	f043 0304 	orr.w	r3, r3, #4
 800dc70:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.b = value;
 800dc74:	4b28      	ldr	r3, [pc, #160]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dc76:	ed83 8a1c 	vstr	s16, [r3, #112]	@ 0x70
                        break;
 800dc7a:	e731      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.c = On;
 800dc7c:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dc80:	f043 0308 	orr.w	r3, r3, #8
 800dc84:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.c = value;
 800dc88:	4b23      	ldr	r3, [pc, #140]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dc8a:	ed83 8a1d 	vstr	s16, [r3, #116]	@ 0x74
                        break;
 800dc8e:	e727      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.d = On;
 800dc90:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dc94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc98:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.d = value;
 800dc9c:	4b1e      	ldr	r3, [pc, #120]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dc9e:	ed83 8a0f 	vstr	s16, [r3, #60]	@ 0x3c
                        break;
 800dca2:	e71d      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.e = On;
 800dca4:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800dca8:	f043 0301 	orr.w	r3, r3, #1
 800dcac:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.e = value;
 800dcb0:	4b19      	ldr	r3, [pc, #100]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dcb2:	ed83 8a10 	vstr	s16, [r3, #64]	@ 0x40
                        break;
 800dcb6:	e713      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.f = On;
 800dcb8:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800dcbc:	f043 0302 	orr.w	r3, r3, #2
 800dcc0:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.f = value;
 800dcc4:	4b14      	ldr	r3, [pc, #80]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dcc6:	ed83 8a11 	vstr	s16, [r3, #68]	@ 0x44
                        break;
 800dcca:	e709      	b.n	800dae0 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800dccc:	2900      	cmp	r1, #0
 800dcce:	f043 806f 	bne.w	8010db0 <gc_execute_block+0x3c34>
                        word_bit.parameter.h = On;
 800dcd2:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800dcd6:	f043 0308 	orr.w	r3, r3, #8
 800dcda:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 800dcde:	eeb4 8a48 	vcmp.f32	s16, s16
 800dce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce6:	d604      	bvs.n	800dcf2 <gc_execute_block+0xb76>
 800dce8:	4622      	mov	r2, r4
 800dcea:	4b0b      	ldr	r3, [pc, #44]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dcec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
                        break;
 800dcf0:	e6f6      	b.n	800dae0 <gc_execute_block+0x964>
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 800dcf2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf6:	e7f8      	b.n	800dcea <gc_execute_block+0xb6e>
                        ijk_words.i = On;
 800dcf8:	9b05      	ldr	r3, [sp, #20]
 800dcfa:	f043 0301 	orr.w	r3, r3, #1
 800dcfe:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.i = On;
 800dd00:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dd04:	f043 0310 	orr.w	r3, r3, #16
 800dd08:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[I_VALUE] = value;
 800dd0c:	4b02      	ldr	r3, [pc, #8]	@ (800dd18 <gc_execute_block+0xb9c>)
 800dd0e:	ed83 8a12 	vstr	s16, [r3, #72]	@ 0x48
                        break;
 800dd12:	e6e5      	b.n	800dae0 <gc_execute_block+0x964>
 800dd14:	200011c0 	.word	0x200011c0
 800dd18:	20000df0 	.word	0x20000df0
 800dd1c:	200013a8 	.word	0x200013a8
 800dd20:	0018ca80 	.word	0x0018ca80
 800dd24:	7fc00000 	.word	0x7fc00000
 800dd28:	42c80000 	.word	0x42c80000
                        ijk_words.j = On;
 800dd2c:	9b05      	ldr	r3, [sp, #20]
 800dd2e:	f043 0302 	orr.w	r3, r3, #2
 800dd32:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.j = On;
 800dd34:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dd38:	f043 0320 	orr.w	r3, r3, #32
 800dd3c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[J_VALUE] = value;
 800dd40:	4bb7      	ldr	r3, [pc, #732]	@ (800e020 <gc_execute_block+0xea4>)
 800dd42:	ed83 8a13 	vstr	s16, [r3, #76]	@ 0x4c
                        break;
 800dd46:	e6cb      	b.n	800dae0 <gc_execute_block+0x964>
                        ijk_words.k = On;
 800dd48:	9b05      	ldr	r3, [sp, #20]
 800dd4a:	f043 0304 	orr.w	r3, r3, #4
 800dd4e:	9305      	str	r3, [sp, #20]
                        word_bit.parameter.k = On;
 800dd50:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800dd54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd58:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.ijk[K_VALUE] = value;
 800dd5c:	4bb0      	ldr	r3, [pc, #704]	@ (800e020 <gc_execute_block+0xea4>)
 800dd5e:	ed83 8a14 	vstr	s16, [r3, #80]	@ 0x50
                        break;
 800dd62:	e6bd      	b.n	800dae0 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800dd64:	2900      	cmp	r1, #0
 800dd66:	f043 8026 	bne.w	8010db6 <gc_execute_block+0x3c3a>
                        word_bit.parameter.l = On;
 800dd6a:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800dd6e:	f043 0310 	orr.w	r3, r3, #16
 800dd72:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 800dd76:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7e:	d604      	bvs.n	800dd8a <gc_execute_block+0xc0e>
 800dd80:	b2e2      	uxtb	r2, r4
 800dd82:	4ba7      	ldr	r3, [pc, #668]	@ (800e020 <gc_execute_block+0xea4>)
 800dd84:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                        break;
 800dd88:	e6aa      	b.n	800dae0 <gc_execute_block+0x964>
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 800dd8a:	22ff      	movs	r2, #255	@ 0xff
 800dd8c:	e7f9      	b.n	800dd82 <gc_execute_block+0xc06>
                        word_bit.parameter.n = On;
 800dd8e:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800dd92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd96:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.n = (int32_t)truncf(value);
 800dd9a:	4aa1      	ldr	r2, [pc, #644]	@ (800e020 <gc_execute_block+0xea4>)
 800dd9c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dda0:	edc2 7a29 	vstr	s15, [r2, #164]	@ 0xa4
                        break;
 800dda4:	e69c      	b.n	800dae0 <gc_execute_block+0x964>
                        if (mantissa > 0)
 800dda6:	2900      	cmp	r1, #0
 800dda8:	f043 8008 	bne.w	8010dbc <gc_execute_block+0x3c40>
                        word_bit.parameter.o = On;
 800ddac:	f89d 3079 	ldrb.w	r3, [sp, #121]	@ 0x79
 800ddb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddb4:	f88d 3079 	strb.w	r3, [sp, #121]	@ 0x79
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 800ddb8:	eeb4 8a48 	vcmp.f32	s16, s16
 800ddbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc0:	d604      	bvs.n	800ddcc <gc_execute_block+0xc50>
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	4b96      	ldr	r3, [pc, #600]	@ (800e020 <gc_execute_block+0xea4>)
 800ddc6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        break;
 800ddca:	e689      	b.n	800dae0 <gc_execute_block+0x964>
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 800ddcc:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd0:	e7f8      	b.n	800ddc4 <gc_execute_block+0xc48>
                        word_bit.parameter.p = On;
 800ddd2:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800ddd6:	f043 0301 	orr.w	r3, r3, #1
 800ddda:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.p = value;
 800ddde:	4b90      	ldr	r3, [pc, #576]	@ (800e020 <gc_execute_block+0xea4>)
 800dde0:	ed83 8a17 	vstr	s16, [r3, #92]	@ 0x5c
                        break;
 800dde4:	e67c      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.q = On;
 800dde6:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800ddea:	f043 0302 	orr.w	r3, r3, #2
 800ddee:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.q = value;
 800ddf2:	4b8b      	ldr	r3, [pc, #556]	@ (800e020 <gc_execute_block+0xea4>)
 800ddf4:	ed83 8a18 	vstr	s16, [r3, #96]	@ 0x60
                        break;
 800ddf8:	e672      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.r = On;
 800ddfa:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800ddfe:	f043 0304 	orr.w	r3, r3, #4
 800de02:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.r = value;
 800de06:	4b86      	ldr	r3, [pc, #536]	@ (800e020 <gc_execute_block+0xea4>)
 800de08:	ed83 8a19 	vstr	s16, [r3, #100]	@ 0x64
                        break;
 800de0c:	e668      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.s = On;
 800de0e:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800de12:	f043 0308 	orr.w	r3, r3, #8
 800de16:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.s = value;
 800de1a:	4b81      	ldr	r3, [pc, #516]	@ (800e020 <gc_execute_block+0xea4>)
 800de1c:	ed83 8a1a 	vstr	s16, [r3, #104]	@ 0x68
                        break;
 800de20:	e65e      	b.n	800dae0 <gc_execute_block+0x964>
                        if(mantissa > 0)
 800de22:	2900      	cmp	r1, #0
 800de24:	f042 87cd 	bne.w	8010dc2 <gc_execute_block+0x3c46>
                        if(int_value > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800de28:	4621      	mov	r1, r4
 800de2a:	4b7e      	ldr	r3, [pc, #504]	@ (800e024 <gc_execute_block+0xea8>)
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	b1ab      	cbz	r3, 800de5c <gc_execute_block+0xce0>
 800de30:	2200      	movs	r2, #0
 800de32:	428b      	cmp	r3, r1
 800de34:	f172 0200 	sbcs.w	r2, r2, #0
 800de38:	f2c2 87c6 	blt.w	8010dc8 <gc_execute_block+0x3c4c>
                        word_bit.parameter.t = On;
 800de3c:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800de40:	f043 0310 	orr.w	r3, r3, #16
 800de44:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 800de48:	eeb4 8a48 	vcmp.f32	s16, s16
 800de4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de50:	d608      	bvs.n	800de64 <gc_execute_block+0xce8>
 800de52:	4622      	mov	r2, r4
 800de54:	4b72      	ldr	r3, [pc, #456]	@ (800e020 <gc_execute_block+0xea4>)
 800de56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
                        break;
 800de5a:	e641      	b.n	800dae0 <gc_execute_block+0x964>
                        if(int_value > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800de5c:	f06f 0301 	mvn.w	r3, #1
 800de60:	2200      	movs	r2, #0
 800de62:	e7e6      	b.n	800de32 <gc_execute_block+0xcb6>
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 800de64:	f04f 32ff 	mov.w	r2, #4294967295
 800de68:	e7f4      	b.n	800de54 <gc_execute_block+0xcd8>
                        word_bit.parameter.u = On;
 800de6a:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800de6e:	f043 0320 	orr.w	r3, r3, #32
 800de72:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.u = value;
 800de76:	4b6a      	ldr	r3, [pc, #424]	@ (800e020 <gc_execute_block+0xea4>)
 800de78:	ed83 8a1e 	vstr	s16, [r3, #120]	@ 0x78
                        break;
 800de7c:	e630      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.v = On;
 800de7e:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800de82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de86:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.v = value;
 800de8a:	4b65      	ldr	r3, [pc, #404]	@ (800e020 <gc_execute_block+0xea4>)
 800de8c:	ed83 8a1f 	vstr	s16, [r3, #124]	@ 0x7c
                        break;
 800de90:	e626      	b.n	800dae0 <gc_execute_block+0x964>
                        word_bit.parameter.w = On;
 800de92:	f89d 307a 	ldrb.w	r3, [sp, #122]	@ 0x7a
 800de96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de9a:	f88d 307a 	strb.w	r3, [sp, #122]	@ 0x7a
                        gc_block.values.w = value;
 800de9e:	4b60      	ldr	r3, [pc, #384]	@ (800e020 <gc_execute_block+0xea4>)
 800dea0:	ed83 8a20 	vstr	s16, [r3, #128]	@ 0x80
                        break;
 800dea4:	e61c      	b.n	800dae0 <gc_execute_block+0x964>
                        axis_words.x = On;
 800dea6:	f04b 0b01 	orr.w	fp, fp, #1
                        word_bit.parameter.x = On;
 800deaa:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800deae:	f043 0301 	orr.w	r3, r3, #1
 800deb2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[X_AXIS] = value;
 800deb6:	4b5a      	ldr	r3, [pc, #360]	@ (800e020 <gc_execute_block+0xea4>)
 800deb8:	ed83 8a21 	vstr	s16, [r3, #132]	@ 0x84
                        break;
 800debc:	e610      	b.n	800dae0 <gc_execute_block+0x964>
                        axis_words.y = On;
 800debe:	f04b 0b02 	orr.w	fp, fp, #2
                        word_bit.parameter.y = On;
 800dec2:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800dec6:	f043 0302 	orr.w	r3, r3, #2
 800deca:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[Y_AXIS] = value;
 800dece:	4b54      	ldr	r3, [pc, #336]	@ (800e020 <gc_execute_block+0xea4>)
 800ded0:	ed83 8a22 	vstr	s16, [r3, #136]	@ 0x88
                        break;
 800ded4:	e604      	b.n	800dae0 <gc_execute_block+0x964>
                        axis_words.z = On;
 800ded6:	f04b 0b04 	orr.w	fp, fp, #4
                        word_bit.parameter.z = On;
 800deda:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800dede:	f043 0304 	orr.w	r3, r3, #4
 800dee2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
                        gc_block.values.xyz[Z_AXIS] = value;
 800dee6:	4b4e      	ldr	r3, [pc, #312]	@ (800e020 <gc_execute_block+0xea4>)
 800dee8:	ed83 8a23 	vstr	s16, [r3, #140]	@ 0x8c
                        break;
 800deec:	e5f8      	b.n	800dae0 <gc_execute_block+0x964>
                        if(mantissa > 0)
 800deee:	2900      	cmp	r1, #0
 800def0:	f042 876d 	bne.w	8010dce <gc_execute_block+0x3c52>
                        word_bit.parameter.$ = On;
 800def4:	f89d 3078 	ldrb.w	r3, [sp, #120]	@ 0x78
 800def8:	f043 0301 	orr.w	r3, r3, #1
 800defc:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
                        gc_block.values.$ = (int32_t)value;
 800df00:	4a47      	ldr	r2, [pc, #284]	@ (800e020 <gc_execute_block+0xea4>)
 800df02:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800df06:	edc2 7a28 	vstr	s15, [r2, #160]	@ 0xa0
                        break;
 800df0a:	e5e9      	b.n	800dae0 <gc_execute_block+0x964>
    if (axis_words.mask && !axis_command)
 800df0c:	fa5f f38b 	uxtb.w	r3, fp
 800df10:	b123      	cbz	r3, 800df1c <gc_execute_block+0xda0>
 800df12:	f1ba 0f00 	cmp.w	sl, #0
 800df16:	d101      	bne.n	800df1c <gc_execute_block+0xda0>
        axis_command = AxisCommand_MotionMode; // Assign implicit motion-mode
 800df18:	f04f 0a02 	mov.w	sl, #2
    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 800df1c:	4b42      	ldr	r3, [pc, #264]	@ (800e028 <gc_execute_block+0xeac>)
 800df1e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800df22:	b113      	cbz	r3, 800df2a <gc_execute_block+0xdae>
 800df24:	f1ba 0f02 	cmp.w	sl, #2
 800df28:	d051      	beq.n	800dfce <gc_execute_block+0xe52>
    if (gc_block.words.n && gc_block.values.n > MAX_LINE_NUMBER)
 800df2a:	4b3d      	ldr	r3, [pc, #244]	@ (800e020 <gc_execute_block+0xea4>)
 800df2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800df30:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800df34:	d006      	beq.n	800df44 <gc_execute_block+0xdc8>
 800df36:	4a3a      	ldr	r2, [pc, #232]	@ (800e020 <gc_execute_block+0xea4>)
 800df38:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800df3c:	4a3b      	ldr	r2, [pc, #236]	@ (800e02c <gc_execute_block+0xeb0>)
 800df3e:	4291      	cmp	r1, r2
 800df40:	f302 874e 	bgt.w	8010de0 <gc_execute_block+0x3c64>
    if (gc_parser_flags.jog_motion) {
 800df44:	f018 0f01 	tst.w	r8, #1
 800df48:	d047      	beq.n	800dfda <gc_execute_block+0xe5e>
        if(!gc_block.words.f)
 800df4a:	f013 0f02 	tst.w	r3, #2
 800df4e:	f002 874a 	beq.w	8010de6 <gc_execute_block+0x3c6a>
        if (gc_block.modal.units_imperial)
 800df52:	4b33      	ldr	r3, [pc, #204]	@ (800e020 <gc_execute_block+0xea4>)
 800df54:	7adb      	ldrb	r3, [r3, #11]
 800df56:	b143      	cbz	r3, 800df6a <gc_execute_block+0xdee>
            gc_block.values.f *= MM_PER_INCH;
 800df58:	4b31      	ldr	r3, [pc, #196]	@ (800e020 <gc_execute_block+0xea4>)
 800df5a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800df5e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e030 <gc_execute_block+0xeb4>
 800df62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df66:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    if(gc_block.words.$) {
 800df6a:	4b2d      	ldr	r3, [pc, #180]	@ (800e020 <gc_execute_block+0xea4>)
 800df6c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800df70:	f013 0f01 	tst.w	r3, #1
 800df74:	f000 80de 	beq.w	800e134 <gc_execute_block+0xfb8>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800df78:	4b29      	ldr	r3, [pc, #164]	@ (800e020 <gc_execute_block+0xea4>)
 800df7a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
                                      command_words.G14 ||
 800df7e:	f013 0f08 	tst.w	r3, #8
 800df82:	d005      	beq.n	800df90 <gc_execute_block+0xe14>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800df84:	4b2b      	ldr	r3, [pc, #172]	@ (800e034 <gc_execute_block+0xeb8>)
 800df86:	789b      	ldrb	r3, [r3, #2]
 800df88:	f013 0f08 	tst.w	r3, #8
 800df8c:	f000 808e 	beq.w	800e0ac <gc_execute_block+0xf30>
 800df90:	f017 0f01 	tst.w	r7, #1
 800df94:	d00c      	beq.n	800dfb0 <gc_execute_block+0xe34>
                                    (command_words.G0 && (gc_block.modal.motion == MotionMode_SpindleSynchronized ||
 800df96:	4b22      	ldr	r3, [pc, #136]	@ (800e020 <gc_execute_block+0xea4>)
 800df98:	891b      	ldrh	r3, [r3, #8]
 800df9a:	2b21      	cmp	r3, #33	@ 0x21
 800df9c:	f000 8091 	beq.w	800e0c2 <gc_execute_block+0xf46>
 800dfa0:	f240 124b 	movw	r2, #331	@ 0x14b
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	f000 808e 	beq.w	800e0c6 <gc_execute_block+0xf4a>
                                                           gc_block.modal.motion == MotionMode_RigidTapping ||
 800dfaa:	2b4c      	cmp	r3, #76	@ 0x4c
 800dfac:	f000 808d 	beq.w	800e0ca <gc_execute_block+0xf4e>
                                                            gc_block.modal.motion == MotionMode_Threading)) ||
 800dfb0:	f417 5f00 	tst.w	r7, #8192	@ 0x2000
 800dfb4:	f040 808b 	bne.w	800e0ce <gc_execute_block+0xf52>
                                      command_words.G14 ||
 800dfb8:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 800dfbc:	f000 8089 	beq.w	800e0d2 <gc_execute_block+0xf56>
                                       (command_words.M9 && gc_block.override_command == Override_SpindleSpeed);
 800dfc0:	4b17      	ldr	r3, [pc, #92]	@ (800e020 <gc_execute_block+0xea4>)
 800dfc2:	785b      	ldrb	r3, [r3, #1]
 800dfc4:	2b33      	cmp	r3, #51	@ 0x33
 800dfc6:	f000 8086 	beq.w	800e0d6 <gc_execute_block+0xf5a>
                                      command_words.G14 ||
 800dfca:	2300      	movs	r3, #0
 800dfcc:	e06f      	b.n	800e0ae <gc_execute_block+0xf32>
    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 800dfce:	f018 0f01 	tst.w	r8, #1
 800dfd2:	d1aa      	bne.n	800df2a <gc_execute_block+0xdae>
        FAIL(Status_GcodeToolChangePending); // [Motions (except jogging) not allowed when changing tool]
 800dfd4:	2428      	movs	r4, #40	@ 0x28
 800dfd6:	f7ff b9ae 	b.w	800d336 <gc_execute_block+0x1ba>
    } else if(gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 800dfda:	4a11      	ldr	r2, [pc, #68]	@ (800e020 <gc_execute_block+0xea4>)
 800dfdc:	8912      	ldrh	r2, [r2, #8]
 800dfde:	2a21      	cmp	r2, #33	@ 0x21
 800dfe0:	d012      	beq.n	800e008 <gc_execute_block+0xe8c>
    } else if (gc_block.modal.feed_mode == FeedMode_InverseTime) { // = G93
 800dfe2:	490f      	ldr	r1, [pc, #60]	@ (800e020 <gc_execute_block+0xea4>)
 800dfe4:	7a89      	ldrb	r1, [r1, #10]
 800dfe6:	2901      	cmp	r1, #1
 800dfe8:	d040      	beq.n	800e06c <gc_execute_block+0xef0>
    } else if (gc_block.modal.feed_mode == FeedMode_UnitsPerMin || gc_block.modal.feed_mode == FeedMode_UnitsPerRev) {
 800dfea:	b109      	cbz	r1, 800dff0 <gc_execute_block+0xe74>
 800dfec:	2902      	cmp	r1, #2
 800dfee:	d1bc      	bne.n	800df6a <gc_execute_block+0xdee>
        if (!gc_block.words.f) {
 800dff0:	f013 0f02 	tst.w	r3, #2
 800dff4:	d14b      	bne.n	800e08e <gc_execute_block+0xf12>
            if(gc_block.modal.feed_mode == gc_state.modal.feed_mode)
 800dff6:	4b0c      	ldr	r3, [pc, #48]	@ (800e028 <gc_execute_block+0xeac>)
 800dff8:	789b      	ldrb	r3, [r3, #2]
 800dffa:	4299      	cmp	r1, r3
 800dffc:	d1b5      	bne.n	800df6a <gc_execute_block+0xdee>
                gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 800dffe:	4b0a      	ldr	r3, [pc, #40]	@ (800e028 <gc_execute_block+0xeac>)
 800e000:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e002:	4b07      	ldr	r3, [pc, #28]	@ (800e020 <gc_execute_block+0xea4>)
 800e004:	645a      	str	r2, [r3, #68]	@ 0x44
 800e006:	e7b0      	b.n	800df6a <gc_execute_block+0xdee>
        if (!gc_block.words.k) {
 800e008:	4b05      	ldr	r3, [pc, #20]	@ (800e020 <gc_execute_block+0xea4>)
 800e00a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e00e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e012:	d111      	bne.n	800e038 <gc_execute_block+0xebc>
            gc_block.values.k = gc_state.distance_per_rev;
 800e014:	4b04      	ldr	r3, [pc, #16]	@ (800e028 <gc_execute_block+0xeac>)
 800e016:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e018:	4b01      	ldr	r3, [pc, #4]	@ (800e020 <gc_execute_block+0xea4>)
 800e01a:	655a      	str	r2, [r3, #84]	@ 0x54
 800e01c:	e7a5      	b.n	800df6a <gc_execute_block+0xdee>
 800e01e:	bf00      	nop
 800e020:	20000df0 	.word	0x20000df0
 800e024:	200013a8 	.word	0x200013a8
 800e028:	20000ef8 	.word	0x20000ef8
 800e02c:	00989680 	.word	0x00989680
 800e030:	41cb3333 	.word	0x41cb3333
 800e034:	20000dec 	.word	0x20000dec
            gc_block.words.k = Off;
 800e038:	4ba7      	ldr	r3, [pc, #668]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e03a:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e03e:	f36f 1286 	bfc	r2, #6, #1
 800e042:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
            gc_block.values.k = gc_block.modal.units_imperial ? gc_block.values.ijk[K_VALUE] *= MM_PER_INCH : gc_block.values.ijk[K_VALUE];
 800e046:	7adb      	ldrb	r3, [r3, #11]
 800e048:	b163      	cbz	r3, 800e064 <gc_execute_block+0xee8>
 800e04a:	4ba3      	ldr	r3, [pc, #652]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e04c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e050:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800e2dc <gc_execute_block+0x1160>
 800e054:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e058:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
 800e05c:	4b9e      	ldr	r3, [pc, #632]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e05e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 800e062:	e782      	b.n	800df6a <gc_execute_block+0xdee>
 800e064:	4b9c      	ldr	r3, [pc, #624]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e066:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e06a:	e7f7      	b.n	800e05c <gc_execute_block+0xee0>
        if (axis_command == AxisCommand_MotionMode) {
 800e06c:	f1ba 0f02 	cmp.w	sl, #2
 800e070:	f47f af7b 	bne.w	800df6a <gc_execute_block+0xdee>
            if (!(gc_block.modal.motion == MotionMode_None || gc_block.modal.motion == MotionMode_Seek)) {
 800e074:	2a50      	cmp	r2, #80	@ 0x50
 800e076:	f43f af78 	beq.w	800df6a <gc_execute_block+0xdee>
 800e07a:	2a00      	cmp	r2, #0
 800e07c:	f43f af75 	beq.w	800df6a <gc_execute_block+0xdee>
                if (!gc_block.words.f)
 800e080:	f013 0f02 	tst.w	r3, #2
 800e084:	f47f af71 	bne.w	800df6a <gc_execute_block+0xdee>
                    FAIL(Status_GcodeUndefinedFeedRate); // [F word missing]
 800e088:	2416      	movs	r4, #22
 800e08a:	f7ff b954 	b.w	800d336 <gc_execute_block+0x1ba>
        } else if (gc_block.modal.units_imperial)
 800e08e:	4b92      	ldr	r3, [pc, #584]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e090:	7adb      	ldrb	r3, [r3, #11]
 800e092:	2b00      	cmp	r3, #0
 800e094:	f43f af69 	beq.w	800df6a <gc_execute_block+0xdee>
            gc_block.values.f *= MM_PER_INCH;
 800e098:	4b8f      	ldr	r3, [pc, #572]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e09a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800e09e:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800e2dc <gc_execute_block+0x1160>
 800e0a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e0a6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 800e0aa:	e75e      	b.n	800df6a <gc_execute_block+0xdee>
                                      command_words.G14 ||
 800e0ac:	2301      	movs	r3, #1
        if(command_words.M7 || single_spindle_only) {
 800e0ae:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800e0b2:	d112      	bne.n	800e0da <gc_execute_block+0xf5e>
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d041      	beq.n	800e13c <gc_execute_block+0xfc0>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e0b8:	4a87      	ldr	r2, [pc, #540]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e0ba:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 800e0be:	2200      	movs	r2, #0
 800e0c0:	e010      	b.n	800e0e4 <gc_execute_block+0xf68>
                                      command_words.G14 ||
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e7f3      	b.n	800e0ae <gc_execute_block+0xf32>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e7f1      	b.n	800e0ae <gc_execute_block+0xf32>
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e7ef      	b.n	800e0ae <gc_execute_block+0xf32>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e7ed      	b.n	800e0ae <gc_execute_block+0xf32>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	e7eb      	b.n	800e0ae <gc_execute_block+0xf32>
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e7e9      	b.n	800e0ae <gc_execute_block+0xf32>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e0da:	4a7f      	ldr	r2, [pc, #508]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e0dc:	f8d2 00a0 	ldr.w	r0, [r2, #160]	@ 0xa0
 800e0e0:	b133      	cbz	r3, 800e0f0 <gc_execute_block+0xf74>
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	4290      	cmp	r0, r2
 800e0e6:	da09      	bge.n	800e0fc <gc_execute_block+0xf80>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800e0e8:	b12b      	cbz	r3, 800e0f6 <gc_execute_block+0xf7a>
 800e0ea:	2404      	movs	r4, #4
 800e0ec:	f7ff b923 	b.w	800d336 <gc_execute_block+0x1ba>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 800e0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f4:	e7f6      	b.n	800e0e4 <gc_execute_block+0xf68>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800e0f6:	2427      	movs	r4, #39	@ 0x27
 800e0f8:	f7ff b91d 	b.w	800d336 <gc_execute_block+0x1ba>
            if(!spindle_is_enabled(gc_block.values.$))
 800e0fc:	b240      	sxtb	r0, r0
 800e0fe:	f00f fefd 	bl	801defc <spindle_is_enabled>
 800e102:	2800      	cmp	r0, #0
 800e104:	f002 8672 	beq.w	8010dec <gc_execute_block+0x3c70>
            if(gc_block.values.$ >= 0)
 800e108:	4b73      	ldr	r3, [pc, #460]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e10a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800e10e:	2800      	cmp	r0, #0
 800e110:	da07      	bge.n	800e122 <gc_execute_block+0xfa6>
            gc_block.words.$ = Off;
 800e112:	4b71      	ldr	r3, [pc, #452]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e114:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e118:	f36f 0200 	bfc	r2, #0, #1
 800e11c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e120:	e00c      	b.n	800e13c <gc_execute_block+0xfc0>
                gc_state.spindle.hal = gc_block.spindle = spindle_get(gc_block.values.$);
 800e122:	b240      	sxtb	r0, r0
 800e124:	f00f ff00 	bl	801df28 <spindle_get>
 800e128:	4a6b      	ldr	r2, [pc, #428]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e12a:	f8c2 00cc 	str.w	r0, [r2, #204]	@ 0xcc
 800e12e:	4a6c      	ldr	r2, [pc, #432]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e130:	65d0      	str	r0, [r2, #92]	@ 0x5c
 800e132:	e7ee      	b.n	800e112 <gc_execute_block+0xf96>
    } else if(gc_block.spindle == NULL)
 800e134:	4b68      	ldr	r3, [pc, #416]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e136:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e13a:	b323      	cbz	r3, 800e186 <gc_execute_block+0x100a>
    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 800e13c:	4b66      	ldr	r3, [pc, #408]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e13e:	7a9b      	ldrb	r3, [r3, #10]
 800e140:	2b02      	cmp	r3, #2
 800e142:	d026      	beq.n	800e192 <gc_execute_block+0x1016>
    if (command_words.G14) {
 800e144:	f3c7 2507 	ubfx	r5, r7, #8, #8
 800e148:	f417 5f00 	tst.w	r7, #8192	@ 0x2000
 800e14c:	d00d      	beq.n	800e16a <gc_execute_block+0xfee>
        if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e14e:	4b62      	ldr	r3, [pc, #392]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e150:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e154:	2b01      	cmp	r3, #1
 800e156:	d024      	beq.n	800e1a2 <gc_execute_block+0x1026>
        } else if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e158:	4b61      	ldr	r3, [pc, #388]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e15a:	7edb      	ldrb	r3, [r3, #27]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d04e      	beq.n	800e1fe <gc_execute_block+0x1082>
        gc_state.modal.spindle.rpm_mode = gc_block.modal.spindle.rpm_mode;
 800e160:	4b5d      	ldr	r3, [pc, #372]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e162:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800e166:	4b5e      	ldr	r3, [pc, #376]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e168:	76da      	strb	r2, [r3, #27]
    spindle_event = gc_block.words.s && !user_words.s;
 800e16a:	4b5b      	ldr	r3, [pc, #364]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e16c:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e170:	f013 0308 	ands.w	r3, r3, #8
 800e174:	d051      	beq.n	800e21a <gc_execute_block+0x109e>
 800e176:	4a5b      	ldr	r2, [pc, #364]	@ (800e2e4 <gc_execute_block+0x1168>)
 800e178:	7892      	ldrb	r2, [r2, #2]
 800e17a:	f012 0f08 	tst.w	r2, #8
 800e17e:	f000 8089 	beq.w	800e294 <gc_execute_block+0x1118>
 800e182:	2200      	movs	r2, #0
 800e184:	e04a      	b.n	800e21c <gc_execute_block+0x10a0>
        gc_block.spindle = gc_state.spindle.hal;
 800e186:	4b56      	ldr	r3, [pc, #344]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e18a:	4b53      	ldr	r3, [pc, #332]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e18c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 800e190:	e7d4      	b.n	800e13c <gc_execute_block+0xfc0>
    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 800e192:	4b53      	ldr	r3, [pc, #332]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1d3      	bne.n	800e144 <gc_execute_block+0xfc8>
        FAIL(Status_GcodeUnsupportedCommand); // [G95 not supported]
 800e19c:	2414      	movs	r4, #20
 800e19e:	f7ff b8ca 	b.w	800d336 <gc_execute_block+0x1ba>
            if(!gc_state.spindle.hal->cap.variable)
 800e1a2:	4b4f      	ldr	r3, [pc, #316]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e1a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1a6:	7a9a      	ldrb	r2, [r3, #10]
 800e1a8:	f012 0f01 	tst.w	r2, #1
 800e1ac:	f002 8621 	beq.w	8010df2 <gc_execute_block+0x3c76>
            if (!gc_block.words.s) // TODO: add check for S0?
 800e1b0:	4a49      	ldr	r2, [pc, #292]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e1b2:	f892 20ba 	ldrb.w	r2, [r2, #186]	@ 0xba
 800e1b6:	f012 0f08 	tst.w	r2, #8
 800e1ba:	f002 861d 	beq.w	8010df8 <gc_execute_block+0x3c7c>
            if (gc_block.words.d) {
 800e1be:	4a46      	ldr	r2, [pc, #280]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e1c0:	f992 20b8 	ldrsb.w	r2, [r2, #184]	@ 0xb8
 800e1c4:	2a00      	cmp	r2, #0
 800e1c6:	db03      	blt.n	800e1d0 <gc_execute_block+0x1054>
                gc_state.spindle.hal->param->css.max_rpm = gc_state.spindle.hal->rpm_max;
 800e1c8:	685a      	ldr	r2, [r3, #4]
 800e1ca:	699b      	ldr	r3, [r3, #24]
 800e1cc:	61d3      	str	r3, [r2, #28]
 800e1ce:	e7c7      	b.n	800e160 <gc_execute_block+0xfe4>
                gc_state.spindle.hal->param->css.max_rpm = min(gc_block.values.d, gc_state.spindle.hal->rpm_max);
 800e1d0:	4a41      	ldr	r2, [pc, #260]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e1d2:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 800e1d6:	edd3 7a06 	vldr	s15, [r3, #24]
 800e1da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e2:	d501      	bpl.n	800e1e8 <gc_execute_block+0x106c>
 800e1e4:	eef0 7a47 	vmov.f32	s15, s14
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	edc3 7a07 	vstr	s15, [r3, #28]
                gc_block.words.d = Off;
 800e1ee:	4b3a      	ldr	r3, [pc, #232]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e1f0:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800e1f4:	f36f 12c7 	bfc	r2, #7, #1
 800e1f8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e1fc:	e7b0      	b.n	800e160 <gc_execute_block+0xfe4>
            if(gc_state.spindle.css) {
 800e1fe:	4b38      	ldr	r3, [pc, #224]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e202:	b123      	cbz	r3, 800e20e <gc_execute_block+0x1092>
                gc_state.spindle.css = NULL;
 800e204:	4b36      	ldr	r3, [pc, #216]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e206:	2200      	movs	r2, #0
 800e208:	659a      	str	r2, [r3, #88]	@ 0x58
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 800e20a:	f009 fa83 	bl	8017714 <protocol_buffer_synchronize>
            gc_state.spindle.rpm = gc_state.spindle.hal->param->rpm; // Is it correct to restore latest spindle RPM here?
 800e20e:	4b34      	ldr	r3, [pc, #208]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e210:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e212:	6852      	ldr	r2, [r2, #4]
 800e214:	6812      	ldr	r2, [r2, #0]
 800e216:	651a      	str	r2, [r3, #80]	@ 0x50
 800e218:	e7a2      	b.n	800e160 <gc_execute_block+0xfe4>
    spindle_event = gc_block.words.s && !user_words.s;
 800e21a:	2200      	movs	r2, #0
 800e21c:	9208      	str	r2, [sp, #32]
    if (!gc_block.words.s)
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d13f      	bne.n	800e2a2 <gc_execute_block+0x1126>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 800e222:	4b2f      	ldr	r3, [pc, #188]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e224:	7edb      	ldrb	r3, [r3, #27]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d136      	bne.n	800e298 <gc_execute_block+0x111c>
 800e22a:	4b2d      	ldr	r3, [pc, #180]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e22c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e22e:	4b2a      	ldr	r3, [pc, #168]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e230:	669a      	str	r2, [r3, #104]	@ 0x68
    if(set_tool) { // M61
 800e232:	9b07      	ldr	r3, [sp, #28]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d064      	beq.n	800e302 <gc_execute_block+0x1186>
        if(!gc_block.words.q)
 800e238:	4b27      	ldr	r3, [pc, #156]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e23a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e23e:	f013 0f02 	tst.w	r3, #2
 800e242:	f002 85dc 	beq.w	8010dfe <gc_execute_block+0x3c82>
        if (floorf(gc_block.values.q) - gc_block.values.q != 0.0f)
 800e246:	4b24      	ldr	r3, [pc, #144]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e248:	ed93 8a18 	vldr	s16, [r3, #96]	@ 0x60
 800e24c:	eeb0 0a48 	vmov.f32	s0, s16
 800e250:	f019 f89e 	bl	8027390 <floorf>
 800e254:	ee70 7a48 	vsub.f32	s15, s0, s16
 800e258:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e260:	f042 85d0 	bne.w	8010e04 <gc_execute_block+0x3c88>
        if ((uint32_t)gc_block.values.q > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e264:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800e268:	ee17 3a90 	vmov	r3, s15
 800e26c:	4a1e      	ldr	r2, [pc, #120]	@ (800e2e8 <gc_execute_block+0x116c>)
 800e26e:	6992      	ldr	r2, [r2, #24]
 800e270:	2a00      	cmp	r2, #0
 800e272:	d042      	beq.n	800e2fa <gc_execute_block+0x117e>
 800e274:	2100      	movs	r1, #0
 800e276:	429a      	cmp	r2, r3
 800e278:	f171 0100 	sbcs.w	r1, r1, #0
 800e27c:	f2c2 85c5 	blt.w	8010e0a <gc_execute_block+0x3c8e>
        gc_block.values.t = (uint32_t)gc_block.values.q;
 800e280:	4a15      	ldr	r2, [pc, #84]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e282:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
        gc_block.words.q = Off;
 800e286:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800e28a:	f36f 0341 	bfc	r3, #1, #1
 800e28e:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
 800e292:	e041      	b.n	800e318 <gc_execute_block+0x119c>
    spindle_event = gc_block.words.s && !user_words.s;
 800e294:	2201      	movs	r2, #1
 800e296:	e7c1      	b.n	800e21c <gc_execute_block+0x10a0>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 800e298:	4b11      	ldr	r3, [pc, #68]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e29a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	69da      	ldr	r2, [r3, #28]
 800e2a0:	e7c5      	b.n	800e22e <gc_execute_block+0x10b2>
    else if(!user_words.s && gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800e2a2:	4b10      	ldr	r3, [pc, #64]	@ (800e2e4 <gc_execute_block+0x1168>)
 800e2a4:	789b      	ldrb	r3, [r3, #2]
 800e2a6:	f013 0f08 	tst.w	r3, #8
 800e2aa:	d1c2      	bne.n	800e232 <gc_execute_block+0x10b6>
 800e2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e2ae:	7edb      	ldrb	r3, [r3, #27]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d1be      	bne.n	800e232 <gc_execute_block+0x10b6>
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800e2b4:	4b08      	ldr	r3, [pc, #32]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e2b6:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800e2ba:	7adb      	ldrb	r3, [r3, #11]
 800e2bc:	b1d3      	cbz	r3, 800e2f4 <gc_execute_block+0x1178>
 800e2be:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800e2ec <gc_execute_block+0x1170>
 800e2c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2c6:	4b04      	ldr	r3, [pc, #16]	@ (800e2d8 <gc_execute_block+0x115c>)
 800e2c8:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
        gc_state.spindle.hal->param->css.surface_speed = gc_block.values.s;
 800e2cc:	4b04      	ldr	r3, [pc, #16]	@ (800e2e0 <gc_execute_block+0x1164>)
 800e2ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	edc3 7a04 	vstr	s15, [r3, #16]
 800e2d6:	e7ac      	b.n	800e232 <gc_execute_block+0x10b6>
 800e2d8:	20000df0 	.word	0x20000df0
 800e2dc:	41cb3333 	.word	0x41cb3333
 800e2e0:	20000ef8 	.word	0x20000ef8
 800e2e4:	20000dec 	.word	0x20000dec
 800e2e8:	200013a8 	.word	0x200013a8
 800e2ec:	43986666 	.word	0x43986666
 800e2f0:	447a0000 	.word	0x447a0000
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800e2f4:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 800e2f0 <gc_execute_block+0x1174>
 800e2f8:	e7e3      	b.n	800e2c2 <gc_execute_block+0x1146>
        if ((uint32_t)gc_block.values.q > (grbl.tool_table.n_tools ? grbl.tool_table.n_tools : MAX_TOOL_NUMBER))
 800e2fa:	f06f 0201 	mvn.w	r2, #1
 800e2fe:	2100      	movs	r1, #0
 800e300:	e7b9      	b.n	800e276 <gc_execute_block+0x10fa>
    } else if (!gc_block.words.t)
 800e302:	4bab      	ldr	r3, [pc, #684]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e304:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e308:	f013 0f10 	tst.w	r3, #16
 800e30c:	d104      	bne.n	800e318 <gc_execute_block+0x119c>
        gc_block.values.t = gc_state.tool_pending;
 800e30e:	4ba9      	ldr	r3, [pc, #676]	@ (800e5b4 <gc_execute_block+0x1438>)
 800e310:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e312:	4ba7      	ldr	r3, [pc, #668]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e314:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if(command_words.M10 && port_command) {
 800e318:	f3c7 4907 	ubfx	r9, r7, #16, #8
 800e31c:	f019 0410 	ands.w	r4, r9, #16
 800e320:	d071      	beq.n	800e406 <gc_execute_block+0x128a>
 800e322:	9b06      	ldr	r3, [sp, #24]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d06e      	beq.n	800e406 <gc_execute_block+0x128a>
        switch(port_command) {
 800e328:	2b42      	cmp	r3, #66	@ 0x42
 800e32a:	f000 80a4 	beq.w	800e476 <gc_execute_block+0x12fa>
 800e32e:	d836      	bhi.n	800e39e <gc_execute_block+0x1222>
 800e330:	3b3e      	subs	r3, #62	@ 0x3e
 800e332:	b2db      	uxtb	r3, r3
 800e334:	2b03      	cmp	r3, #3
 800e336:	d866      	bhi.n	800e406 <gc_execute_block+0x128a>
                if(!gc_block.words.p)
 800e338:	4b9d      	ldr	r3, [pc, #628]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e33a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e33e:	f013 0f01 	tst.w	r3, #1
 800e342:	f002 8565 	beq.w	8010e10 <gc_execute_block+0x3c94>
                if(gc_block.values.p < 0.0f)
 800e346:	4b9a      	ldr	r3, [pc, #616]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e348:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e34c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e354:	f102 855f 	bmi.w	8010e16 <gc_execute_block+0x3c9a>
                if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_out)
 800e358:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e35c:	ee17 3a10 	vmov	r3, s14
 800e360:	3301      	adds	r3, #1
 800e362:	4a95      	ldr	r2, [pc, #596]	@ (800e5b8 <gc_execute_block+0x143c>)
 800e364:	f892 2115 	ldrb.w	r2, [r2, #277]	@ 0x115
 800e368:	4293      	cmp	r3, r2
 800e36a:	f202 8557 	bhi.w	8010e1c <gc_execute_block+0x3ca0>
                gc_block.output_command.is_digital = true;
 800e36e:	4a90      	ldr	r2, [pc, #576]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e370:	2301      	movs	r3, #1
 800e372:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
                gc_block.output_command.port = (uint8_t)gc_block.values.p;
 800e376:	ee17 3a10 	vmov	r3, s14
 800e37a:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 800e37e:	9b06      	ldr	r3, [sp, #24]
 800e380:	2b3e      	cmp	r3, #62	@ 0x3e
 800e382:	d076      	beq.n	800e472 <gc_execute_block+0x12f6>
 800e384:	2b40      	cmp	r3, #64	@ 0x40
 800e386:	d072      	beq.n	800e46e <gc_execute_block+0x12f2>
 800e388:	2200      	movs	r2, #0
 800e38a:	4b89      	ldr	r3, [pc, #548]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e38c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
                gc_block.words.p = Off;
 800e390:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e394:	f36f 0200 	bfc	r2, #0, #1
 800e398:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                break;
 800e39c:	e033      	b.n	800e406 <gc_execute_block+0x128a>
        switch(port_command) {
 800e39e:	9b06      	ldr	r3, [sp, #24]
 800e3a0:	3b43      	subs	r3, #67	@ 0x43
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d82e      	bhi.n	800e406 <gc_execute_block+0x128a>
                if(!(gc_block.words.e || gc_block.words.q))
 800e3a8:	4b81      	ldr	r3, [pc, #516]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e3aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e3ae:	4a83      	ldr	r2, [pc, #524]	@ (800e5bc <gc_execute_block+0x1440>)
 800e3b0:	421a      	tst	r2, r3
 800e3b2:	f002 8569 	beq.w	8010e88 <gc_execute_block+0x3d0c>
                if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_out)
 800e3b6:	4b7e      	ldr	r3, [pc, #504]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e3b8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800e3bc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e3c0:	ee17 3a10 	vmov	r3, s14
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	4a7c      	ldr	r2, [pc, #496]	@ (800e5b8 <gc_execute_block+0x143c>)
 800e3c8:	f892 2117 	ldrb.w	r2, [r2, #279]	@ 0x117
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	f202 855e 	bhi.w	8010e8e <gc_execute_block+0x3d12>
                gc_block.output_command.is_digital = false;
 800e3d2:	4b77      	ldr	r3, [pc, #476]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	f883 10bc 	strb.w	r1, [r3, #188]	@ 0xbc
                gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800e3da:	ee17 2a10 	vmov	r2, s14
 800e3de:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
                gc_block.output_command.value = gc_block.values.q;
 800e3e2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800e3e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3ea:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
                gc_block.words.e = gc_block.words.q = Off;
 800e3ee:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e3f2:	f361 0241 	bfi	r2, r1, #1, #1
 800e3f6:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800e3fa:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800e3fe:	f361 0200 	bfi	r2, r1, #0, #1
 800e402:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if(command_words.M7 && gc_block.modal.spindle.state.ccw) {
 800e406:	f019 0f02 	tst.w	r9, #2
 800e40a:	d010      	beq.n	800e42e <gc_execute_block+0x12b2>
 800e40c:	4b68      	ldr	r3, [pc, #416]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e40e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800e412:	f013 0f02 	tst.w	r3, #2
 800e416:	d00a      	beq.n	800e42e <gc_execute_block+0x12b2>
        if(gc_block.spindle == NULL) {
 800e418:	4b65      	ldr	r3, [pc, #404]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e41a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f000 809c 	beq.w	800e55c <gc_execute_block+0x13e0>
        } else if(!(gc_block.spindle->cap.direction || gc_block.spindle->cap.laser))
 800e424:	7a9b      	ldrb	r3, [r3, #10]
 800e426:	f013 0f0a 	tst.w	r3, #10
 800e42a:	f002 8533 	beq.w	8010e94 <gc_execute_block+0x3d18>
    if (command_words.M9) {
 800e42e:	f019 0f08 	tst.w	r9, #8
 800e432:	f000 80d3 	beq.w	800e5dc <gc_execute_block+0x1460>
        if(!gc_block.words.p)
 800e436:	4b5e      	ldr	r3, [pc, #376]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e438:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e43c:	f013 0f01 	tst.w	r3, #1
 800e440:	f040 80a5 	bne.w	800e58e <gc_execute_block+0x1412>
            gc_block.values.p = 1.0f;
 800e444:	4b5a      	ldr	r3, [pc, #360]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e446:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e44a:	65da      	str	r2, [r3, #92]	@ 0x5c
        switch(gc_block.override_command) {
 800e44c:	4b58      	ldr	r3, [pc, #352]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e44e:	785b      	ldrb	r3, [r3, #1]
 800e450:	3b30      	subs	r3, #48	@ 0x30
 800e452:	2b08      	cmp	r3, #8
 800e454:	f200 80c2 	bhi.w	800e5dc <gc_execute_block+0x1460>
 800e458:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e45c:	00ff00b4 	.word	0x00ff00b4
 800e460:	011d010c 	.word	0x011d010c
 800e464:	012e00c0 	.word	0x012e00c0
 800e468:	00c000c0 	.word	0x00c000c0
 800e46c:	013f      	.short	0x013f
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 800e46e:	2201      	movs	r2, #1
 800e470:	e78b      	b.n	800e38a <gc_execute_block+0x120e>
 800e472:	2201      	movs	r2, #1
 800e474:	e789      	b.n	800e38a <gc_execute_block+0x120e>
                if(!(gc_block.words.l || gc_block.words.q))
 800e476:	4b4e      	ldr	r3, [pc, #312]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e478:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800e47c:	f412 3f04 	tst.w	r2, #135168	@ 0x21000
 800e480:	f002 84cf 	beq.w	8010e22 <gc_execute_block+0x3ca6>
                if(gc_block.words.p && gc_block.words.e)
 800e484:	4b4e      	ldr	r3, [pc, #312]	@ (800e5c0 <gc_execute_block+0x1444>)
 800e486:	4393      	bics	r3, r2
 800e488:	f002 84ce 	beq.w	8010e28 <gc_execute_block+0x3cac>
                if(gc_block.values.l >= (uint8_t)WaitMode_Max)
 800e48c:	4b48      	ldr	r3, [pc, #288]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e48e:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800e492:	2a04      	cmp	r2, #4
 800e494:	f202 84e6 	bhi.w	8010e64 <gc_execute_block+0x3ce8>
                if((wait_mode_t)gc_block.values.l != WaitMode_Immediate && gc_block.values.q == 0.0f)
 800e498:	b13a      	cbz	r2, 800e4aa <gc_execute_block+0x132e>
 800e49a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800e49e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a6:	f002 84e0 	beq.w	8010e6a <gc_execute_block+0x3cee>
                if(gc_block.words.p) {
 800e4aa:	4b41      	ldr	r3, [pc, #260]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e4ac:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e4b0:	f013 0f01 	tst.w	r3, #1
 800e4b4:	d01b      	beq.n	800e4ee <gc_execute_block+0x1372>
                    if(gc_block.values.p < 0.0f)
 800e4b6:	4b3e      	ldr	r3, [pc, #248]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e4b8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e4bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c4:	f102 84d4 	bmi.w	8010e70 <gc_execute_block+0x3cf4>
                    if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_in)
 800e4c8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e4cc:	ee17 3a10 	vmov	r3, s14
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	4939      	ldr	r1, [pc, #228]	@ (800e5b8 <gc_execute_block+0x143c>)
 800e4d4:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 800e4d8:	428b      	cmp	r3, r1
 800e4da:	f202 84cc 	bhi.w	8010e76 <gc_execute_block+0x3cfa>
                    gc_block.output_command.is_digital = true;
 800e4de:	4934      	ldr	r1, [pc, #208]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	f881 30bc 	strb.w	r3, [r1, #188]	@ 0xbc
                    gc_block.output_command.port = (uint8_t)gc_block.values.p;
 800e4e6:	ee17 3a10 	vmov	r3, s14
 800e4ea:	f881 30be 	strb.w	r3, [r1, #190]	@ 0xbe
                if(gc_block.words.e) {
 800e4ee:	4b30      	ldr	r3, [pc, #192]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e4f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e4f4:	f013 0f01 	tst.w	r3, #1
 800e4f8:	d018      	beq.n	800e52c <gc_execute_block+0x13b0>
                    if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_in)
 800e4fa:	4b2d      	ldr	r3, [pc, #180]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e4fc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800e500:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e504:	ee17 3a10 	vmov	r3, s14
 800e508:	3301      	adds	r3, #1
 800e50a:	492b      	ldr	r1, [pc, #172]	@ (800e5b8 <gc_execute_block+0x143c>)
 800e50c:	f891 1116 	ldrb.w	r1, [r1, #278]	@ 0x116
 800e510:	428b      	cmp	r3, r1
 800e512:	f202 84b3 	bhi.w	8010e7c <gc_execute_block+0x3d00>
                    if((wait_mode_t)gc_block.values.l != WaitMode_Immediate)
 800e516:	2a00      	cmp	r2, #0
 800e518:	f042 84b3 	bne.w	8010e82 <gc_execute_block+0x3d06>
                    gc_block.output_command.is_digital = false;
 800e51c:	4a24      	ldr	r2, [pc, #144]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e51e:	2300      	movs	r3, #0
 800e520:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
                    gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800e524:	ee17 3a10 	vmov	r3, s14
 800e528:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
                gc_block.words.e = gc_block.words.l = gc_block.words.p = gc_block.words.q = Off;
 800e52c:	4b20      	ldr	r3, [pc, #128]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e52e:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e532:	f36f 0241 	bfc	r2, #1, #1
 800e536:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800e53a:	b2d2      	uxtb	r2, r2
 800e53c:	f36f 0200 	bfc	r2, #0, #1
 800e540:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800e544:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800e548:	f36f 1204 	bfc	r2, #4, #1
 800e54c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800e550:	b2d2      	uxtb	r2, r2
 800e552:	f36f 0200 	bfc	r2, #0, #1
 800e556:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                break;
 800e55a:	e754      	b.n	800e406 <gc_execute_block+0x128a>
                if(spindle_is_enabled(idx) && !(spindle_get(idx)->cap.direction || spindle_get(idx)->cap.laser))
 800e55c:	2000      	movs	r0, #0
 800e55e:	f00f fccd 	bl	801defc <spindle_is_enabled>
 800e562:	2800      	cmp	r0, #0
 800e564:	f43f af63 	beq.w	800e42e <gc_execute_block+0x12b2>
 800e568:	2000      	movs	r0, #0
 800e56a:	f00f fcdd 	bl	801df28 <spindle_get>
 800e56e:	7a83      	ldrb	r3, [r0, #10]
 800e570:	f013 0f02 	tst.w	r3, #2
 800e574:	f47f af5b 	bne.w	800e42e <gc_execute_block+0x12b2>
 800e578:	2000      	movs	r0, #0
 800e57a:	f00f fcd5 	bl	801df28 <spindle_get>
 800e57e:	7a83      	ldrb	r3, [r0, #10]
 800e580:	f013 0f08 	tst.w	r3, #8
 800e584:	f47f af53 	bne.w	800e42e <gc_execute_block+0x12b2>
                    FAIL(Status_GcodeUnsupportedCommand);
 800e588:	2414      	movs	r4, #20
 800e58a:	f7fe bed4 	b.w	800d336 <gc_execute_block+0x1ba>
            if(gc_block.values.p < 0.0f)
 800e58e:	4b08      	ldr	r3, [pc, #32]	@ (800e5b0 <gc_execute_block+0x1434>)
 800e590:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59c:	f102 847d 	bmi.w	8010e9a <gc_execute_block+0x3d1e>
            gc_block.words.p = Off;
 800e5a0:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e5a4:	f36f 0200 	bfc	r2, #0, #1
 800e5a8:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800e5ac:	e74e      	b.n	800e44c <gc_execute_block+0x12d0>
 800e5ae:	bf00      	nop
 800e5b0:	20000df0 	.word	0x20000df0
 800e5b4:	20000ef8 	.word	0x20000ef8
 800e5b8:	200011c0 	.word	0x200011c0
 800e5bc:	00020100 	.word	0x00020100
 800e5c0:	00010100 	.word	0x00010100
                gc_block.modal.override_ctrl.feed_rate_disable = Off;
 800e5c4:	4ba5      	ldr	r3, [pc, #660]	@ (800e85c <gc_execute_block+0x16e0>)
 800e5c6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e5ca:	f36f 0200 	bfc	r2, #0, #1
 800e5ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = Off;
 800e5d2:	b2d2      	uxtb	r2, r2
 800e5d4:	f36f 0282 	bfc	r2, #2, #1
 800e5d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (command_words.M10 && gc_block.user_mcode) {
 800e5dc:	b1d4      	cbz	r4, 800e614 <gc_execute_block+0x1498>
 800e5de:	4b9f      	ldr	r3, [pc, #636]	@ (800e85c <gc_execute_block+0x16e0>)
 800e5e0:	885b      	ldrh	r3, [r3, #2]
 800e5e2:	b1bb      	cbz	r3, 800e614 <gc_execute_block+0x1498>
        user_words.mask = gc_block.words.mask;
 800e5e4:	489d      	ldr	r0, [pc, #628]	@ (800e85c <gc_execute_block+0x16e0>)
 800e5e6:	4601      	mov	r1, r0
 800e5e8:	f851 2fb8 	ldr.w	r2, [r1, #184]!
 800e5ec:	4b9c      	ldr	r3, [pc, #624]	@ (800e860 <gc_execute_block+0x16e4>)
 800e5ee:	601a      	str	r2, [r3, #0]
        if((int_value = (uint_fast16_t)hal.user_mcode.validate(&gc_block, &gc_block.words)))
 800e5f0:	4b9c      	ldr	r3, [pc, #624]	@ (800e864 <gc_execute_block+0x16e8>)
 800e5f2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800e5f6:	4798      	blx	r3
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	f47e ae9b 	bne.w	800d336 <gc_execute_block+0x1ba>
        user_words.mask ^= gc_block.words.mask; // Flag "taken" words for execution
 800e600:	4a97      	ldr	r2, [pc, #604]	@ (800e860 <gc_execute_block+0x16e4>)
 800e602:	6813      	ldr	r3, [r2, #0]
 800e604:	4995      	ldr	r1, [pc, #596]	@ (800e85c <gc_execute_block+0x16e0>)
 800e606:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
 800e60a:	404b      	eors	r3, r1
 800e60c:	6013      	str	r3, [r2, #0]
        axis_words.mask = ijk_words.mask = 0;
 800e60e:	2300      	movs	r3, #0
 800e610:	9305      	str	r3, [sp, #20]
 800e612:	469b      	mov	fp, r3
    if (gc_block.non_modal_command == NonModal_Dwell) {
 800e614:	4b91      	ldr	r3, [pc, #580]	@ (800e85c <gc_execute_block+0x16e0>)
 800e616:	781c      	ldrb	r4, [r3, #0]
 800e618:	2c04      	cmp	r4, #4
 800e61a:	d114      	bne.n	800e646 <gc_execute_block+0x14ca>
        if (!gc_block.words.p)
 800e61c:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e620:	f013 0f01 	tst.w	r3, #1
 800e624:	f002 843c 	beq.w	8010ea0 <gc_execute_block+0x3d24>
        if(gc_block.values.p < 0.0f)
 800e628:	4b8c      	ldr	r3, [pc, #560]	@ (800e85c <gc_execute_block+0x16e0>)
 800e62a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e62e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e636:	f53e ae7e 	bmi.w	800d336 <gc_execute_block+0x1ba>
        gc_block.words.p = Off;
 800e63a:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e63e:	f36f 0200 	bfc	r2, #0, #1
 800e642:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
    gc_get_plane_data(&plane, gc_block.modal.plane_select);
 800e646:	4c85      	ldr	r4, [pc, #532]	@ (800e85c <gc_execute_block+0x16e0>)
 800e648:	7ba1      	ldrb	r1, [r4, #14]
 800e64a:	a822      	add	r0, sp, #136	@ 0x88
 800e64c:	f7fe fba4 	bl	800cd98 <gc_get_plane_data>
    if (gc_block.modal.units_imperial) do { // Axes indices are consistent, so loop may be used.
 800e650:	7ae3      	ldrb	r3, [r4, #11]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d06f      	beq.n	800e736 <gc_execute_block+0x15ba>
    uint_fast8_t idx = N_AXIS;
 800e656:	2303      	movs	r3, #3
 800e658:	e058      	b.n	800e70c <gc_execute_block+0x1590>
                gc_block.modal.override_ctrl.feed_rate_disable = On;
 800e65a:	4b80      	ldr	r3, [pc, #512]	@ (800e85c <gc_execute_block+0x16e0>)
 800e65c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e660:	f042 0201 	orr.w	r2, r2, #1
 800e664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = On;
 800e668:	b2d2      	uxtb	r2, r2
 800e66a:	f042 0204 	orr.w	r2, r2, #4
 800e66e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800e672:	e7b3      	b.n	800e5dc <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.feed_rate_disable = gc_block.values.p == 0.0f;
 800e674:	4b79      	ldr	r3, [pc, #484]	@ (800e85c <gc_execute_block+0x16e0>)
 800e676:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e67a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e682:	bf0c      	ite	eq
 800e684:	2101      	moveq	r1, #1
 800e686:	2100      	movne	r1, #0
 800e688:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e68c:	f361 0200 	bfi	r2, r1, #0, #1
 800e690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800e694:	e7a2      	b.n	800e5dc <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.spindle_rpm_disable = gc_block.values.p == 0.0f;
 800e696:	4b71      	ldr	r3, [pc, #452]	@ (800e85c <gc_execute_block+0x16e0>)
 800e698:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e69c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a4:	bf0c      	ite	eq
 800e6a6:	2101      	moveq	r1, #1
 800e6a8:	2100      	movne	r1, #0
 800e6aa:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e6ae:	f361 0282 	bfi	r2, r1, #2, #1
 800e6b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800e6b6:	e791      	b.n	800e5dc <gc_execute_block+0x1460>
                gc_block.modal.override_ctrl.feed_hold_disable = gc_block.values.p == 0.0f;
 800e6b8:	4b68      	ldr	r3, [pc, #416]	@ (800e85c <gc_execute_block+0x16e0>)
 800e6ba:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e6be:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c6:	bf0c      	ite	eq
 800e6c8:	2101      	moveq	r1, #1
 800e6ca:	2100      	movne	r1, #0
 800e6cc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e6d0:	f361 0241 	bfi	r2, r1, #1, #1
 800e6d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                break;
 800e6d8:	e780      	b.n	800e5dc <gc_execute_block+0x1460>
                if(settings.parking.flags.enable_override_control)
 800e6da:	4b63      	ldr	r3, [pc, #396]	@ (800e868 <gc_execute_block+0x16ec>)
 800e6dc:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800e6e0:	f013 0f04 	tst.w	r3, #4
 800e6e4:	f43f af7a 	beq.w	800e5dc <gc_execute_block+0x1460>
                    gc_block.modal.override_ctrl.parking_disable = gc_block.values.p == 0.0f;
 800e6e8:	4b5c      	ldr	r3, [pc, #368]	@ (800e85c <gc_execute_block+0x16e0>)
 800e6ea:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e6ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f6:	bf0c      	ite	eq
 800e6f8:	2101      	moveq	r1, #1
 800e6fa:	2100      	movne	r1, #0
 800e6fc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800e700:	f361 02c3 	bfi	r2, r1, #3, #1
 800e704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800e708:	e768      	b.n	800e5dc <gc_execute_block+0x1460>
    } while(idx);
 800e70a:	b1a3      	cbz	r3, 800e736 <gc_execute_block+0x15ba>
        idx--;
 800e70c:	3b01      	subs	r3, #1
        if (bit_istrue(axis_words.mask, bit(idx))) {
 800e70e:	fa5f f28b 	uxtb.w	r2, fp
 800e712:	40da      	lsrs	r2, r3
 800e714:	f012 0f01 	tst.w	r2, #1
 800e718:	d0f7      	beq.n	800e70a <gc_execute_block+0x158e>
            gc_block.values.xyz[idx] *= MM_PER_INCH;
 800e71a:	f103 0120 	add.w	r1, r3, #32
 800e71e:	4a4f      	ldr	r2, [pc, #316]	@ (800e85c <gc_execute_block+0x16e0>)
 800e720:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e724:	edd2 7a01 	vldr	s15, [r2, #4]
 800e728:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800e86c <gc_execute_block+0x16f0>
 800e72c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e730:	edc2 7a01 	vstr	s15, [r2, #4]
 800e734:	e7e9      	b.n	800e70a <gc_execute_block+0x158e>
    if (command_words.G15 && gc_state.modal.diameter_mode != gc_block.modal.diameter_mode) {
 800e736:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800e73a:	d005      	beq.n	800e748 <gc_execute_block+0x15cc>
 800e73c:	4b4c      	ldr	r3, [pc, #304]	@ (800e870 <gc_execute_block+0x16f4>)
 800e73e:	795a      	ldrb	r2, [r3, #5]
 800e740:	4b46      	ldr	r3, [pc, #280]	@ (800e85c <gc_execute_block+0x16e0>)
 800e742:	7b5b      	ldrb	r3, [r3, #13]
 800e744:	429a      	cmp	r2, r3
 800e746:	d118      	bne.n	800e77a <gc_execute_block+0x15fe>
    if(gc_state.modal.diameter_mode && bit_istrue(axis_words.mask, bit(X_AXIS)))
 800e748:	4b49      	ldr	r3, [pc, #292]	@ (800e870 <gc_execute_block+0x16f4>)
 800e74a:	795b      	ldrb	r3, [r3, #5]
 800e74c:	b15b      	cbz	r3, 800e766 <gc_execute_block+0x15ea>
 800e74e:	f01b 0f01 	tst.w	fp, #1
 800e752:	d008      	beq.n	800e766 <gc_execute_block+0x15ea>
        gc_block.values.xyz[X_AXIS] /= 2.0f;
 800e754:	4b41      	ldr	r3, [pc, #260]	@ (800e85c <gc_execute_block+0x16e0>)
 800e756:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 800e75a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e75e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e762:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
    if(axis_command == AxisCommand_Scaling) {
 800e766:	f1ba 0f04 	cmp.w	sl, #4
 800e76a:	d00c      	beq.n	800e786 <gc_execute_block+0x160a>
    if(gc_state.modal.scaling_active) {
 800e76c:	4b40      	ldr	r3, [pc, #256]	@ (800e870 <gc_execute_block+0x16f4>)
 800e76e:	7f9b      	ldrb	r3, [r3, #30]
 800e770:	2b00      	cmp	r3, #0
 800e772:	f000 80b8 	beq.w	800e8e6 <gc_execute_block+0x176a>
        idx = N_AXIS;
 800e776:	2203      	movs	r2, #3
 800e778:	e098      	b.n	800e8ac <gc_execute_block+0x1730>
        gc_state.modal.diameter_mode = gc_block.modal.diameter_mode;
 800e77a:	4a3d      	ldr	r2, [pc, #244]	@ (800e870 <gc_execute_block+0x16f4>)
 800e77c:	7153      	strb	r3, [r2, #5]
        system_add_rt_report(Report_LatheXMode);
 800e77e:	2008      	movs	r0, #8
 800e780:	f013 f820 	bl	80217c4 <system_add_rt_report>
 800e784:	e7e0      	b.n	800e748 <gc_execute_block+0x15cc>
        if(gc_block.modal.scaling_active) {
 800e786:	4b35      	ldr	r3, [pc, #212]	@ (800e85c <gc_execute_block+0x16e0>)
 800e788:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d05f      	beq.n	800e850 <gc_execute_block+0x16d4>
            gc_block.modal.scaling_active = false;
 800e790:	4b32      	ldr	r3, [pc, #200]	@ (800e85c <gc_execute_block+0x16e0>)
 800e792:	2200      	movs	r2, #0
 800e794:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            if (!axis_words.mask)
 800e798:	fa5f f38b 	uxtb.w	r3, fp
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f002 8382 	beq.w	8010ea6 <gc_execute_block+0x3d2a>
            bool report_scaling = false;
 800e7a2:	4616      	mov	r6, r2
            idx = N_AXIS;
 800e7a4:	2403      	movs	r4, #3
 800e7a6:	e024      	b.n	800e7f2 <gc_execute_block+0x1676>
                    report_scaling |= scale_factor.ijk[idx] != gc_block.values.xyz[idx];
 800e7a8:	1ca1      	adds	r1, r4, #2
 800e7aa:	4a32      	ldr	r2, [pc, #200]	@ (800e874 <gc_execute_block+0x16f8>)
 800e7ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e7b0:	ed92 7a01 	vldr	s14, [r2, #4]
 800e7b4:	f104 0020 	add.w	r0, r4, #32
 800e7b8:	4928      	ldr	r1, [pc, #160]	@ (800e85c <gc_execute_block+0x16e0>)
 800e7ba:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e7be:	edd1 7a01 	vldr	s15, [r1, #4]
 800e7c2:	eeb4 7a67 	vcmp.f32	s14, s15
 800e7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ca:	bf18      	it	ne
 800e7cc:	f046 0601 	orrne.w	r6, r6, #1
                    scale_factor.ijk[idx] = gc_block.values.xyz[idx];
 800e7d0:	edc2 7a01 	vstr	s15, [r2, #4]
                    bit_false(axis_words.mask, bit(idx));
 800e7d4:	f04f 0b01 	mov.w	fp, #1
 800e7d8:	fa0b fb04 	lsl.w	fp, fp, r4
 800e7dc:	ea23 0b0b 	bic.w	fp, r3, fp
                    system_add_rt_report(Report_Scaling);
 800e7e0:	2002      	movs	r0, #2
 800e7e2:	f012 ffef 	bl	80217c4 <system_add_rt_report>
 800e7e6:	e00c      	b.n	800e802 <gc_execute_block+0x1686>
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	4a1c      	ldr	r2, [pc, #112]	@ (800e85c <gc_execute_block+0x16e0>)
 800e7ec:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
            } while(idx);
 800e7f0:	b1e4      	cbz	r4, 800e82c <gc_execute_block+0x16b0>
                if(bit_istrue(axis_words.mask, bit(--idx))) {
 800e7f2:	fa5f f38b 	uxtb.w	r3, fp
 800e7f6:	3c01      	subs	r4, #1
 800e7f8:	fa23 f204 	lsr.w	r2, r3, r4
 800e7fc:	f012 0f01 	tst.w	r2, #1
 800e800:	d1d2      	bne.n	800e7a8 <gc_execute_block+0x162c>
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 800e802:	4b16      	ldr	r3, [pc, #88]	@ (800e85c <gc_execute_block+0x16e0>)
 800e804:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1ed      	bne.n	800e7e8 <gc_execute_block+0x166c>
 800e80c:	4b19      	ldr	r3, [pc, #100]	@ (800e874 <gc_execute_block+0x16f8>)
 800e80e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e812:	ed93 7a00 	vldr	s14, [r3]
 800e816:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e81a:	eeb4 7a67 	vcmp.f32	s14, s15
 800e81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e822:	d001      	beq.n	800e828 <gc_execute_block+0x16ac>
 800e824:	2301      	movs	r3, #1
 800e826:	e7e0      	b.n	800e7ea <gc_execute_block+0x166e>
 800e828:	2300      	movs	r3, #0
 800e82a:	e7de      	b.n	800e7ea <gc_execute_block+0x166e>
            gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 800e82c:	4611      	mov	r1, r2
 800e82e:	f8d2 20b8 	ldr.w	r2, [r2, #184]	@ 0xb8
 800e832:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 800e836:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
            report_scaling |= gc_state.modal.scaling_active != gc_block.modal.scaling_active;
 800e83a:	4a0d      	ldr	r2, [pc, #52]	@ (800e870 <gc_execute_block+0x16f4>)
 800e83c:	7f91      	ldrb	r1, [r2, #30]
            gc_state.modal.scaling_active = gc_block.modal.scaling_active;
 800e83e:	7793      	strb	r3, [r2, #30]
            if(report_scaling)
 800e840:	428b      	cmp	r3, r1
 800e842:	d101      	bne.n	800e848 <gc_execute_block+0x16cc>
 800e844:	2e00      	cmp	r6, #0
 800e846:	d091      	beq.n	800e76c <gc_execute_block+0x15f0>
                system_add_rt_report(Report_Scaling);
 800e848:	2002      	movs	r0, #2
 800e84a:	f012 ffbb 	bl	80217c4 <system_add_rt_report>
 800e84e:	e78d      	b.n	800e76c <gc_execute_block+0x15f0>
            set_scaling(1.0f);
 800e850:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e854:	f7fe f9c8 	bl	800cbe8 <set_scaling>
 800e858:	e788      	b.n	800e76c <gc_execute_block+0x15f0>
 800e85a:	bf00      	nop
 800e85c:	20000df0 	.word	0x20000df0
 800e860:	20000dec 	.word	0x20000dec
 800e864:	200011c0 	.word	0x200011c0
 800e868:	20001bd8 	.word	0x20001bd8
 800e86c:	41cb3333 	.word	0x41cb3333
 800e870:	20000ef8 	.word	0x20000ef8
 800e874:	200001a8 	.word	0x200001a8
                     gc_block.values.xyz[idx] = (gc_block.values.xyz[idx] - scale_factor.xyz[idx]) * scale_factor.ijk[idx] + scale_factor.xyz[idx];
 800e878:	f102 0120 	add.w	r1, r2, #32
 800e87c:	4bb2      	ldr	r3, [pc, #712]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e87e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e882:	edd3 7a01 	vldr	s15, [r3, #4]
 800e886:	49b1      	ldr	r1, [pc, #708]	@ (800eb4c <gc_execute_block+0x19d0>)
 800e888:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800e88c:	ed90 7a00 	vldr	s14, [r0]
 800e890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e894:	1c90      	adds	r0, r2, #2
 800e896:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e89a:	edd1 6a01 	vldr	s13, [r1, #4]
 800e89e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e8a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e8a6:	ed83 7a01 	vstr	s14, [r3, #4]
        } while(idx);
 800e8aa:	b1e2      	cbz	r2, 800e8e6 <gc_execute_block+0x176a>
            if(bit_istrue(axis_words.mask, bit(--idx))) {
 800e8ac:	fa5f f38b 	uxtb.w	r3, fp
 800e8b0:	3a01      	subs	r2, #1
 800e8b2:	40d3      	lsrs	r3, r2
 800e8b4:	f013 0f01 	tst.w	r3, #1
 800e8b8:	d0f7      	beq.n	800e8aa <gc_execute_block+0x172e>
                if(gc_block.modal.distance_incremental)
 800e8ba:	4ba3      	ldr	r3, [pc, #652]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e8bc:	7b1b      	ldrb	r3, [r3, #12]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d0da      	beq.n	800e878 <gc_execute_block+0x16fc>
                     gc_block.values.xyz[idx] *= scale_factor.ijk[idx];
 800e8c2:	f102 0120 	add.w	r1, r2, #32
 800e8c6:	4ba0      	ldr	r3, [pc, #640]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e8c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e8cc:	edd3 7a01 	vldr	s15, [r3, #4]
 800e8d0:	1c90      	adds	r0, r2, #2
 800e8d2:	499e      	ldr	r1, [pc, #632]	@ (800eb4c <gc_execute_block+0x19d0>)
 800e8d4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e8d8:	ed91 7a01 	vldr	s14, [r1, #4]
 800e8dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e8e0:	edc3 7a01 	vstr	s15, [r3, #4]
 800e8e4:	e7e1      	b.n	800e8aa <gc_execute_block+0x172e>
    if (command_words.G8) { // Indicates called in block.
 800e8e6:	f015 0301 	ands.w	r3, r5, #1
 800e8ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8ec:	d007      	beq.n	800e8fe <gc_execute_block+0x1782>
        switch(gc_block.modal.tool_offset_mode) {
 800e8ee:	4b96      	ldr	r3, [pc, #600]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e8f0:	7bdb      	ldrb	r3, [r3, #15]
 800e8f2:	2b02      	cmp	r3, #2
 800e8f4:	d01e      	beq.n	800e934 <gc_execute_block+0x17b8>
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	d049      	beq.n	800e98e <gc_execute_block+0x1812>
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d021      	beq.n	800e942 <gc_execute_block+0x17c6>
    if (command_words.G12) { // Check if called in block
 800e8fe:	f015 0f08 	tst.w	r5, #8
 800e902:	d005      	beq.n	800e910 <gc_execute_block+0x1794>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 800e904:	4b92      	ldr	r3, [pc, #584]	@ (800eb50 <gc_execute_block+0x19d4>)
 800e906:	7d1b      	ldrb	r3, [r3, #20]
 800e908:	4a8f      	ldr	r2, [pc, #572]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e90a:	7f10      	ldrb	r0, [r2, #28]
 800e90c:	4283      	cmp	r3, r0
 800e90e:	d15b      	bne.n	800e9c8 <gc_execute_block+0x184c>
    switch (gc_block.non_modal_command) {
 800e910:	4b8d      	ldr	r3, [pc, #564]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	2b0a      	cmp	r3, #10
 800e916:	d060      	beq.n	800e9da <gc_execute_block+0x185e>
 800e918:	2b5c      	cmp	r3, #92	@ 0x5c
 800e91a:	f000 8260 	beq.w	800edde <gc_execute_block+0x1c62>
            if (axis_words.mask && axis_command != AxisCommand_ToolLengthOffset) { // TLO block any axis command.
 800e91e:	fa5f f48b 	uxtb.w	r4, fp
 800e922:	2c00      	cmp	r4, #0
 800e924:	f000 82ef 	beq.w	800ef06 <gc_execute_block+0x1d8a>
 800e928:	f1ba 0f03 	cmp.w	sl, #3
 800e92c:	f000 82eb 	beq.w	800ef06 <gc_execute_block+0x1d8a>
                idx = N_AXIS;
 800e930:	2203      	movs	r2, #3
 800e932:	e2b3      	b.n	800ee9c <gc_execute_block+0x1d20>
                if(!axis_words.mask)
 800e934:	fa5f f38b 	uxtb.w	r3, fp
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1e0      	bne.n	800e8fe <gc_execute_block+0x1782>
                    FAIL(Status_GcodeG43DynamicAxisError);
 800e93c:	2425      	movs	r4, #37	@ 0x25
 800e93e:	f7fe bcfa 	b.w	800d336 <gc_execute_block+0x1ba>
                if(grbl.tool_table.n_tools) {
 800e942:	4b84      	ldr	r3, [pc, #528]	@ (800eb54 <gc_execute_block+0x19d8>)
 800e944:	699a      	ldr	r2, [r3, #24]
 800e946:	2a00      	cmp	r2, #0
 800e948:	f002 82b0 	beq.w	8010eac <gc_execute_block+0x3d30>
                    if(gc_block.words.h) {
 800e94c:	4b7e      	ldr	r3, [pc, #504]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e94e:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e952:	f013 0f08 	tst.w	r3, #8
 800e956:	d014      	beq.n	800e982 <gc_execute_block+0x1806>
                        if(gc_block.values.h > grbl.tool_table.n_tools)
 800e958:	4b7b      	ldr	r3, [pc, #492]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e95a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e95e:	429a      	cmp	r2, r3
 800e960:	f0c2 82a7 	bcc.w	8010eb2 <gc_execute_block+0x3d36>
                        gc_block.words.h = Off;
 800e964:	4a78      	ldr	r2, [pc, #480]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e966:	f892 10b9 	ldrb.w	r1, [r2, #185]	@ 0xb9
 800e96a:	f36f 01c3 	bfc	r1, #3, #1
 800e96e:	f882 10b9 	strb.w	r1, [r2, #185]	@ 0xb9
                        if(gc_block.values.h == 0)
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1c3      	bne.n	800e8fe <gc_execute_block+0x1782>
                            gc_block.values.h = gc_block.values.t;
 800e976:	4613      	mov	r3, r2
 800e978:	f8d2 20b0 	ldr.w	r2, [r2, #176]	@ 0xb0
 800e97c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800e980:	e7bd      	b.n	800e8fe <gc_execute_block+0x1782>
                        gc_block.values.h = gc_block.values.t;
 800e982:	4b71      	ldr	r3, [pc, #452]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e984:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800e988:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800e98c:	e7b7      	b.n	800e8fe <gc_execute_block+0x1782>
                if(grbl.tool_table.n_tools) {
 800e98e:	4b71      	ldr	r3, [pc, #452]	@ (800eb54 <gc_execute_block+0x19d8>)
 800e990:	699a      	ldr	r2, [r3, #24]
 800e992:	2a00      	cmp	r2, #0
 800e994:	f002 8290 	beq.w	8010eb8 <gc_execute_block+0x3d3c>
                    if(gc_block.words.h) {
 800e998:	4b6b      	ldr	r3, [pc, #428]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e99a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e99e:	f013 0f08 	tst.w	r3, #8
 800e9a2:	f002 828c 	beq.w	8010ebe <gc_execute_block+0x3d42>
                        if(gc_block.values.h == 0 || gc_block.values.h > grbl.tool_table.n_tools)
 800e9a6:	4b68      	ldr	r3, [pc, #416]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e9a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f002 8289 	beq.w	8010ec4 <gc_execute_block+0x3d48>
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	f0c2 8289 	bcc.w	8010eca <gc_execute_block+0x3d4e>
                        gc_block.words.h = Off;
 800e9b8:	4b63      	ldr	r3, [pc, #396]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e9ba:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800e9be:	f36f 02c3 	bfc	r2, #3, #1
 800e9c2:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
                        FAIL(Status_GcodeValueWordMissing);
 800e9c6:	e79a      	b.n	800e8fe <gc_execute_block+0x1782>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 800e9c8:	f102 0110 	add.w	r1, r2, #16
 800e9cc:	f00e fae2 	bl	801cf94 <settings_read_coord_data>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d19d      	bne.n	800e910 <gc_execute_block+0x1794>
            FAIL(Status_SettingReadFail);
 800e9d4:	2407      	movs	r4, #7
 800e9d6:	f7fe bcae 	b.w	800d336 <gc_execute_block+0x1ba>
            if (!(axis_words.mask || (gc_block.values.l != 20 && gc_block.words.r)))
 800e9da:	fa5f f68b 	uxtb.w	r6, fp
 800e9de:	b966      	cbnz	r6, 800e9fa <gc_execute_block+0x187e>
 800e9e0:	4b59      	ldr	r3, [pc, #356]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e9e2:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800e9e6:	2b14      	cmp	r3, #20
 800e9e8:	f002 8272 	beq.w	8010ed0 <gc_execute_block+0x3d54>
 800e9ec:	4b56      	ldr	r3, [pc, #344]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e9ee:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800e9f2:	f013 0f04 	tst.w	r3, #4
 800e9f6:	f002 826e 	beq.w	8010ed6 <gc_execute_block+0x3d5a>
            if (!(gc_block.words.p || gc_block.words.l))
 800e9fa:	4b53      	ldr	r3, [pc, #332]	@ (800eb48 <gc_execute_block+0x19cc>)
 800e9fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ea00:	f413 3f88 	tst.w	r3, #69632	@ 0x11000
 800ea04:	f002 826a 	beq.w	8010edc <gc_execute_block+0x3d60>
            if(gc_block.values.p < 0.0f)
 800ea08:	4b4f      	ldr	r3, [pc, #316]	@ (800eb48 <gc_execute_block+0x19cc>)
 800ea0a:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 800ea0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ea12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea16:	f102 8264 	bmi.w	8010ee2 <gc_execute_block+0x3d66>
            p_value = (uint8_t)truncf(gc_block.values.p); // Convert p value to int.
 800ea1a:	f018 fd21 	bl	8027460 <truncf>
 800ea1e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ea22:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 800ea26:	f89d 4028 	ldrb.w	r4, [sp, #40]	@ 0x28
            switch(gc_block.values.l) {
 800ea2a:	4b47      	ldr	r3, [pc, #284]	@ (800eb48 <gc_execute_block+0x19cc>)
 800ea2c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ea30:	3b01      	subs	r3, #1
 800ea32:	2b13      	cmp	r3, #19
 800ea34:	f202 8258 	bhi.w	8010ee8 <gc_execute_block+0x3d6c>
 800ea38:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ea3c:	00140090 	.word	0x00140090
 800ea40:	12561256 	.word	0x12561256
 800ea44:	12561256 	.word	0x12561256
 800ea48:	12561256 	.word	0x12561256
 800ea4c:	00901256 	.word	0x00901256
 800ea50:	12560090 	.word	0x12560090
 800ea54:	12561256 	.word	0x12561256
 800ea58:	12561256 	.word	0x12561256
 800ea5c:	12561256 	.word	0x12561256
 800ea60:	001b1256 	.word	0x001b1256
                    if (gc_block.words.r)
 800ea64:	4b38      	ldr	r3, [pc, #224]	@ (800eb48 <gc_execute_block+0x19cc>)
 800ea66:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ea6a:	f013 0f04 	tst.w	r3, #4
 800ea6e:	f042 823e 	bne.w	8010eee <gc_execute_block+0x3d72>
                    if (p_value > N_WorkCoordinateSystems)
 800ea72:	2c09      	cmp	r4, #9
 800ea74:	f202 823e 	bhi.w	8010ef4 <gc_execute_block+0x3d78>
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 800ea78:	b9ec      	cbnz	r4, 800eab6 <gc_execute_block+0x193a>
 800ea7a:	4b33      	ldr	r3, [pc, #204]	@ (800eb48 <gc_execute_block+0x19cc>)
 800ea7c:	7f18      	ldrb	r0, [r3, #28]
                    gc_block.values.coord_data.id = p_value == 0
 800ea7e:	4932      	ldr	r1, [pc, #200]	@ (800eb48 <gc_execute_block+0x19cc>)
 800ea80:	f881 009c 	strb.w	r0, [r1, #156]	@ 0x9c
                    if (!settings_read_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz))
 800ea84:	3190      	adds	r1, #144	@ 0x90
 800ea86:	f00e fa85 	bl	801cf94 <settings_read_coord_data>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	f002 8235 	beq.w	8010efa <gc_execute_block+0x3d7e>
                    if(settings.offset_lock.mask && gc_block.values.coord_data.id >= CoordinateSystem_G59_1 && gc_block.values.coord_data.id <= CoordinateSystem_G59_3) {
 800ea90:	4b31      	ldr	r3, [pc, #196]	@ (800eb58 <gc_execute_block+0x19dc>)
 800ea92:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 800ea96:	b18a      	cbz	r2, 800eabc <gc_execute_block+0x1940>
 800ea98:	4b2b      	ldr	r3, [pc, #172]	@ (800eb48 <gc_execute_block+0x19cc>)
 800ea9a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800ea9e:	2b05      	cmp	r3, #5
 800eaa0:	d90e      	bls.n	800eac0 <gc_execute_block+0x1944>
 800eaa2:	2b08      	cmp	r3, #8
 800eaa4:	d80e      	bhi.n	800eac4 <gc_execute_block+0x1948>
                        if(bit_istrue(settings.offset_lock.mask, bit(gc_block.values.coord_data.id - CoordinateSystem_G59_1)))
 800eaa6:	3b06      	subs	r3, #6
 800eaa8:	40da      	lsrs	r2, r3
 800eaaa:	f012 0f01 	tst.w	r2, #1
 800eaae:	f042 8227 	bne.w	8010f00 <gc_execute_block+0x3d84>
 800eab2:	2303      	movs	r3, #3
 800eab4:	e031      	b.n	800eb1a <gc_execute_block+0x199e>
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 800eab6:	1e60      	subs	r0, r4, #1
 800eab8:	b2c0      	uxtb	r0, r0
 800eaba:	e7e0      	b.n	800ea7e <gc_execute_block+0x1902>
 800eabc:	2303      	movs	r3, #3
 800eabe:	e02c      	b.n	800eb1a <gc_execute_block+0x199e>
 800eac0:	2303      	movs	r3, #3
 800eac2:	e02a      	b.n	800eb1a <gc_execute_block+0x199e>
 800eac4:	2303      	movs	r3, #3
 800eac6:	e028      	b.n	800eb1a <gc_execute_block+0x199e>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx] - gc_block.values.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_state.tool_length_offset[idx];
 800eac8:	4a21      	ldr	r2, [pc, #132]	@ (800eb50 <gc_execute_block+0x19d4>)
 800eaca:	f103 011a 	add.w	r1, r3, #26
 800eace:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ead2:	edd1 7a00 	vldr	s15, [r1]
 800ead6:	491c      	ldr	r1, [pc, #112]	@ (800eb48 <gc_execute_block+0x19cc>)
 800ead8:	f103 0020 	add.w	r0, r3, #32
 800eadc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800eae0:	ed90 7a01 	vldr	s14, [r0, #4]
 800eae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eae8:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800eaec:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800eaf0:	ed90 7a00 	vldr	s14, [r0]
 800eaf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eaf8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800eafc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800eb00:	ed92 7a01 	vldr	s14, [r2, #4]
 800eb04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb08:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800eb0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eb10:	edc1 7a02 	vstr	s15, [r1, #8]
                    } while(idx);
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	f000 80d5 	beq.w	800ecc4 <gc_execute_block+0x1b48>
                        if (bit_istrue(axis_words.mask, bit(--idx))) {
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	fa26 f203 	lsr.w	r2, r6, r3
 800eb20:	f012 0f01 	tst.w	r2, #1
 800eb24:	d0f6      	beq.n	800eb14 <gc_execute_block+0x1998>
                            if (gc_block.values.l == 20)
 800eb26:	4a08      	ldr	r2, [pc, #32]	@ (800eb48 <gc_execute_block+0x19cc>)
 800eb28:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800eb2c:	2a14      	cmp	r2, #20
 800eb2e:	d0cb      	beq.n	800eac8 <gc_execute_block+0x194c>
                                gc_block.values.coord_data.xyz[idx] = gc_block.values.xyz[idx];
 800eb30:	4a05      	ldr	r2, [pc, #20]	@ (800eb48 <gc_execute_block+0x19cc>)
 800eb32:	f103 0120 	add.w	r1, r3, #32
 800eb36:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800eb3a:	6849      	ldr	r1, [r1, #4]
 800eb3c:	f103 0022 	add.w	r0, r3, #34	@ 0x22
 800eb40:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800eb44:	6091      	str	r1, [r2, #8]
 800eb46:	e7e5      	b.n	800eb14 <gc_execute_block+0x1998>
 800eb48:	20000df0 	.word	0x20000df0
 800eb4c:	200001a8 	.word	0x200001a8
 800eb50:	20000ef8 	.word	0x20000ef8
 800eb54:	200013a8 	.word	0x200013a8
 800eb58:	20001bd8 	.word	0x20001bd8
                    if(grbl.tool_table.n_tools) {
 800eb5c:	4bbf      	ldr	r3, [pc, #764]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800eb5e:	699b      	ldr	r3, [r3, #24]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f002 81d0 	beq.w	8010f06 <gc_execute_block+0x3d8a>
                        if(p_value == 0 || p_value > grbl.tool_table.n_tools)
 800eb66:	2c00      	cmp	r4, #0
 800eb68:	f000 8133 	beq.w	800edd2 <gc_execute_block+0x1c56>
 800eb6c:	42a3      	cmp	r3, r4
 800eb6e:	f0c0 8133 	bcc.w	800edd8 <gc_execute_block+0x1c5c>
                        grbl.tool_table.tool[p_value].tool_id = (tool_id_t)p_value;
 800eb72:	4bba      	ldr	r3, [pc, #744]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800eb74:	69db      	ldr	r3, [r3, #28]
 800eb76:	2514      	movs	r5, #20
 800eb78:	fb04 f505 	mul.w	r5, r4, r5
 800eb7c:	442b      	add	r3, r5
 800eb7e:	611c      	str	r4, [r3, #16]
                        if(gc_block.words.r) {
 800eb80:	4bb7      	ldr	r3, [pc, #732]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800eb82:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800eb86:	f013 0f04 	tst.w	r3, #4
 800eb8a:	d00b      	beq.n	800eba4 <gc_execute_block+0x1a28>
                            grbl.tool_table.tool[p_value].radius = gc_block.values.r;
 800eb8c:	4bb3      	ldr	r3, [pc, #716]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800eb8e:	69da      	ldr	r2, [r3, #28]
 800eb90:	442a      	add	r2, r5
 800eb92:	4bb3      	ldr	r3, [pc, #716]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800eb94:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800eb96:	60d1      	str	r1, [r2, #12]
                            gc_block.words.r = Off;
 800eb98:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800eb9c:	f36f 0282 	bfc	r2, #2, #1
 800eba0:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        if(gc_block.values.l == 11 && !settings_read_coord_data(CoordinateSystem_G59_3, &g59_3_offset))
 800eba4:	4bae      	ldr	r3, [pc, #696]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800eba6:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ebaa:	2b0b      	cmp	r3, #11
 800ebac:	d006      	beq.n	800ebbc <gc_execute_block+0x1a40>
                        if(gc_block.values.l == 1)
 800ebae:	4bac      	ldr	r3, [pc, #688]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ebb0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d00a      	beq.n	800ebce <gc_execute_block+0x1a52>
 800ebb8:	2303      	movs	r3, #3
 800ebba:	e04b      	b.n	800ec54 <gc_execute_block+0x1ad8>
                        if(gc_block.values.l == 11 && !settings_read_coord_data(CoordinateSystem_G59_3, &g59_3_offset))
 800ebbc:	a911      	add	r1, sp, #68	@ 0x44
 800ebbe:	2008      	movs	r0, #8
 800ebc0:	f00e f9e8 	bl	801cf94 <settings_read_coord_data>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d1f2      	bne.n	800ebae <gc_execute_block+0x1a32>
                            FAIL(Status_SettingReadFail);
 800ebc8:	2407      	movs	r4, #7
 800ebca:	f7fe bbb4 	b.w	800d336 <gc_execute_block+0x1ba>
                            grbl.tool_table.read(p_value, &grbl.tool_table.tool[p_value]);
 800ebce:	4ba3      	ldr	r3, [pc, #652]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800ebd0:	6a1a      	ldr	r2, [r3, #32]
 800ebd2:	69d9      	ldr	r1, [r3, #28]
 800ebd4:	4429      	add	r1, r5
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	4790      	blx	r2
 800ebda:	e7ed      	b.n	800ebb8 <gc_execute_block+0x1a3c>
                                    grbl.tool_table.tool[p_value].offset[idx] = gc_block.values.xyz[idx];
 800ebdc:	4a9f      	ldr	r2, [pc, #636]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800ebde:	69d2      	ldr	r2, [r2, #28]
 800ebe0:	442a      	add	r2, r5
 800ebe2:	f103 0020 	add.w	r0, r3, #32
 800ebe6:	499e      	ldr	r1, [pc, #632]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ebe8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ebec:	6849      	ldr	r1, [r1, #4]
 800ebee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ebf2:	6011      	str	r1, [r2, #0]
 800ebf4:	e02d      	b.n	800ec52 <gc_execute_block+0x1ad6>
                                    grbl.tool_table.tool[p_value].offset[idx] = gc_state.position[idx] - gc_state.modal.coord_system.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_block.values.xyz[idx];
 800ebf6:	4a9b      	ldr	r2, [pc, #620]	@ (800ee64 <gc_execute_block+0x1ce8>)
 800ebf8:	f103 011a 	add.w	r1, r3, #26
 800ebfc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ec00:	edd1 7a00 	vldr	s15, [r1]
 800ec04:	1c99      	adds	r1, r3, #2
 800ec06:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ec0a:	ed91 7a00 	vldr	s14, [r1]
 800ec0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec12:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800ec16:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ec1a:	ed92 7a00 	vldr	s14, [r2]
 800ec1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec22:	f103 0120 	add.w	r1, r3, #32
 800ec26:	4a8e      	ldr	r2, [pc, #568]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ec28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ec2c:	ed92 7a01 	vldr	s14, [r2, #4]
 800ec30:	4a8a      	ldr	r2, [pc, #552]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800ec32:	69d2      	ldr	r2, [r2, #28]
 800ec34:	442a      	add	r2, r5
 800ec36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec3a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ec3e:	edc2 7a00 	vstr	s15, [r2]
 800ec42:	e006      	b.n	800ec52 <gc_execute_block+0x1ad6>
                            } else if(gc_block.values.l == 10 || gc_block.values.l == 11)
 800ec44:	4a86      	ldr	r2, [pc, #536]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ec46:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800ec4a:	3a0a      	subs	r2, #10
 800ec4c:	b2d2      	uxtb	r2, r2
 800ec4e:	2a01      	cmp	r2, #1
 800ec50:	d925      	bls.n	800ec9e <gc_execute_block+0x1b22>
                        } while(idx);
 800ec52:	b38b      	cbz	r3, 800ecb8 <gc_execute_block+0x1b3c>
                            if(bit_istrue(axis_words.mask, bit(--idx))) {
 800ec54:	3b01      	subs	r3, #1
 800ec56:	fa26 f203 	lsr.w	r2, r6, r3
 800ec5a:	f012 0f01 	tst.w	r2, #1
 800ec5e:	d0f1      	beq.n	800ec44 <gc_execute_block+0x1ac8>
                                if(gc_block.values.l == 1)
 800ec60:	4a7f      	ldr	r2, [pc, #508]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ec62:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800ec66:	2a01      	cmp	r2, #1
 800ec68:	d0b8      	beq.n	800ebdc <gc_execute_block+0x1a60>
                                else if(gc_block.values.l == 10)
 800ec6a:	2a0a      	cmp	r2, #10
 800ec6c:	d0c3      	beq.n	800ebf6 <gc_execute_block+0x1a7a>
                                else if(gc_block.values.l == 11)
 800ec6e:	2a0b      	cmp	r2, #11
 800ec70:	d1ef      	bne.n	800ec52 <gc_execute_block+0x1ad6>
                                    grbl.tool_table.tool[p_value].offset[idx] = g59_3_offset[idx] - gc_block.values.xyz[idx];
 800ec72:	aa24      	add	r2, sp, #144	@ 0x90
 800ec74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ec78:	ed52 7a13 	vldr	s15, [r2, #-76]	@ 0xffffffb4
 800ec7c:	f103 0120 	add.w	r1, r3, #32
 800ec80:	4a77      	ldr	r2, [pc, #476]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ec82:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ec86:	ed92 7a01 	vldr	s14, [r2, #4]
 800ec8a:	4a74      	ldr	r2, [pc, #464]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800ec8c:	69d2      	ldr	r2, [r2, #28]
 800ec8e:	442a      	add	r2, r5
 800ec90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec94:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ec98:	edc2 7a00 	vstr	s15, [r2]
 800ec9c:	e7d9      	b.n	800ec52 <gc_execute_block+0x1ad6>
                                grbl.tool_table.tool[p_value].offset[idx] = gc_state.tool_length_offset[idx];
 800ec9e:	4a6f      	ldr	r2, [pc, #444]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800eca0:	69d2      	ldr	r2, [r2, #28]
 800eca2:	442a      	add	r2, r5
 800eca4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800eca8:	496e      	ldr	r1, [pc, #440]	@ (800ee64 <gc_execute_block+0x1ce8>)
 800ecaa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ecae:	6849      	ldr	r1, [r1, #4]
 800ecb0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ecb4:	6011      	str	r1, [r2, #0]
 800ecb6:	e7cc      	b.n	800ec52 <gc_execute_block+0x1ad6>
                        if(gc_block.values.l == 1)
 800ecb8:	4b69      	ldr	r3, [pc, #420]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ecba:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	f000 8081 	beq.w	800edc6 <gc_execute_block+0x1c4a>
            gc_block.words.l = gc_block.words.p = Off;
 800ecc4:	4b66      	ldr	r3, [pc, #408]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ecc6:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ecca:	f36f 0200 	bfc	r2, #0, #1
 800ecce:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800ecd2:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800ecd6:	f36f 1204 	bfc	r2, #4, #1
 800ecda:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if (gc_block.modal.motion == MotionMode_None) {
 800ecde:	4b60      	ldr	r3, [pc, #384]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ece0:	891d      	ldrh	r5, [r3, #8]
 800ece2:	2d50      	cmp	r5, #80	@ 0x50
 800ece4:	f000 816e 	beq.w	800efc4 <gc_execute_block+0x1e48>
    } else if (axis_command == AxisCommand_MotionMode) {
 800ece8:	f1ba 0f02 	cmp.w	sl, #2
 800ecec:	f000 8176 	beq.w	800efdc <gc_execute_block+0x1e60>
    if (gc_parser_flags.jog_motion) // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
 800ecf0:	f018 0301 	ands.w	r3, r8, #1
 800ecf4:	9305      	str	r3, [sp, #20]
 800ecf6:	f000 879c 	beq.w	800fc32 <gc_execute_block+0x2ab6>
        gc_block.words.n = gc_block.words.f = Off;
 800ecfa:	4b59      	ldr	r3, [pc, #356]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ecfc:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800ed00:	f36f 0241 	bfc	r2, #1, #1
 800ed04:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800ed08:	b2d2      	uxtb	r2, r2
 800ed0a:	f36f 1286 	bfc	r2, #6, #1
 800ed0e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
    if (axis_command)
 800ed12:	f1ba 0f00 	cmp.w	sl, #0
 800ed16:	d006      	beq.n	800ed26 <gc_execute_block+0x1baa>
        gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 800ed18:	4a51      	ldr	r2, [pc, #324]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ed1a:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 800ed1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800ed22:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
    if (gc_block.words.mask)
 800ed26:	4b4e      	ldr	r3, [pc, #312]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ed28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f042 8180 	bne.w	8011032 <gc_execute_block+0x3eb6>
    memset(&plan_data, 0, sizeof(plan_line_data_t)); // Zero plan_data struct
 800ed32:	2228      	movs	r2, #40	@ 0x28
 800ed34:	2100      	movs	r1, #0
 800ed36:	a814      	add	r0, sp, #80	@ 0x50
 800ed38:	f015 fc79 	bl	802462e <memset>
    plan_data.offset_id = gc_state.offset_id;
 800ed3c:	4b49      	ldr	r3, [pc, #292]	@ (800ee64 <gc_execute_block+0x1ce8>)
 800ed3e:	f993 3082 	ldrsb.w	r3, [r3, #130]	@ 0x82
 800ed42:	f88d 3069 	strb.w	r3, [sp, #105]	@ 0x69
    plan_data.condition.target_validated = plan_data.condition.target_valid = sys.soft_limits.mask == 0;
 800ed46:	4b48      	ldr	r3, [pc, #288]	@ (800ee68 <gc_execute_block+0x1cec>)
 800ed48:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800ed4c:	fab3 f383 	clz	r3, r3
 800ed50:	095b      	lsrs	r3, r3, #5
 800ed52:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 800ed56:	f363 0241 	bfi	r2, r3, #1, #1
 800ed5a:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
 800ed5e:	b2d2      	uxtb	r2, r2
 800ed60:	f363 0282 	bfi	r2, r3, #2, #1
 800ed64:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
    if (gc_parser_flags.jog_motion) {
 800ed68:	9b05      	ldr	r3, [sp, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 8795 	beq.w	800fc9a <gc_execute_block+0x2b1e>
        if (command_words.mask & ~jog_groups.mask)
 800ed70:	f037 0349 	bics.w	r3, r7, #73	@ 0x49
 800ed74:	f042 8160 	bne.w	8011038 <gc_execute_block+0x3ebc>
        if (!(gc_block.non_modal_command == NonModal_AbsoluteOverride || gc_block.non_modal_command == NonModal_NoAction))
 800ed78:	4b39      	ldr	r3, [pc, #228]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	2b35      	cmp	r3, #53	@ 0x35
 800ed7e:	d002      	beq.n	800ed86 <gc_execute_block+0x1c0a>
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f042 815c 	bne.w	801103e <gc_execute_block+0x3ec2>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 800ed86:	4c37      	ldr	r4, [pc, #220]	@ (800ee64 <gc_execute_block+0x1ce8>)
 800ed88:	ad15      	add	r5, sp, #84	@ 0x54
 800ed8a:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 800ed8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ed90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        plan_data.spindle.state = gc_state.modal.spindle.state;
 800ed94:	7ea3      	ldrb	r3, [r4, #26]
 800ed96:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
        plan_data.condition.coolant = gc_state.modal.coolant;
 800ed9a:	7e63      	ldrb	r3, [r4, #25]
 800ed9c:	f88d 3066 	strb.w	r3, [sp, #102]	@ 0x66
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 800eda0:	f894 307e 	ldrb.w	r3, [r4, #126]	@ 0x7e
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	f040 875d 	bne.w	800fc64 <gc_execute_block+0x2ae8>
 800edaa:	7ea3      	ldrb	r3, [r4, #26]
 800edac:	f013 0f02 	tst.w	r3, #2
 800edb0:	f000 876f 	beq.w	800fc92 <gc_execute_block+0x2b16>
 800edb4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800edb6:	7a9b      	ldrb	r3, [r3, #10]
 800edb8:	f013 0f08 	tst.w	r3, #8
 800edbc:	f040 876b 	bne.w	800fc96 <gc_execute_block+0x2b1a>
 800edc0:	2300      	movs	r3, #0
 800edc2:	f000 bf50 	b.w	800fc66 <gc_execute_block+0x2aea>
                            grbl.tool_table.write(&grbl.tool_table.tool[p_value]);
 800edc6:	4b25      	ldr	r3, [pc, #148]	@ (800ee5c <gc_execute_block+0x1ce0>)
 800edc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800edca:	69d8      	ldr	r0, [r3, #28]
 800edcc:	4428      	add	r0, r5
 800edce:	4790      	blx	r2
 800edd0:	e778      	b.n	800ecc4 <gc_execute_block+0x1b48>
                           FAIL(Status_GcodeIllegalToolTableEntry); // [Greater than max allowed tool number]
 800edd2:	2426      	movs	r4, #38	@ 0x26
 800edd4:	f7fe baaf 	b.w	800d336 <gc_execute_block+0x1ba>
 800edd8:	2426      	movs	r4, #38	@ 0x26
 800edda:	f7fe baac 	b.w	800d336 <gc_execute_block+0x1ba>
            if (!axis_words.mask)
 800edde:	fa5f f08b 	uxtb.w	r0, fp
 800ede2:	2800      	cmp	r0, #0
 800ede4:	f002 8092 	beq.w	8010f0c <gc_execute_block+0x3d90>
            idx = N_AXIS;
 800ede8:	2303      	movs	r3, #3
 800edea:	e00e      	b.n	800ee0a <gc_execute_block+0x1c8e>
                    gc_block.values.xyz[idx] = gc_state.g92_coord_offset[idx];
 800edec:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 800edf0:	4a1c      	ldr	r2, [pc, #112]	@ (800ee64 <gc_execute_block+0x1ce8>)
 800edf2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800edf6:	6814      	ldr	r4, [r2, #0]
 800edf8:	f103 0120 	add.w	r1, r3, #32
 800edfc:	4a18      	ldr	r2, [pc, #96]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800edfe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ee02:	6054      	str	r4, [r2, #4]
            } while(idx);
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f43f af6a 	beq.w	800ecde <gc_execute_block+0x1b62>
                if (bit_istrue(axis_words.mask, bit(--idx))) {
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	fa20 f203 	lsr.w	r2, r0, r3
 800ee10:	f012 0f01 	tst.w	r2, #1
 800ee14:	d0ea      	beq.n	800edec <gc_execute_block+0x1c70>
                    gc_block.values.xyz[idx] = gc_state.position[idx] - gc_block.modal.coord_system.xyz[idx] - gc_block.values.xyz[idx] - gc_state.tool_length_offset[idx];
 800ee16:	4913      	ldr	r1, [pc, #76]	@ (800ee64 <gc_execute_block+0x1ce8>)
 800ee18:	f103 021a 	add.w	r2, r3, #26
 800ee1c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ee20:	edd2 7a00 	vldr	s15, [r2]
 800ee24:	4a0e      	ldr	r2, [pc, #56]	@ (800ee60 <gc_execute_block+0x1ce4>)
 800ee26:	1d1c      	adds	r4, r3, #4
 800ee28:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ee2c:	ed94 7a00 	vldr	s14, [r4]
 800ee30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee34:	f103 0420 	add.w	r4, r3, #32
 800ee38:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ee3c:	ed92 7a01 	vldr	s14, [r2, #4]
 800ee40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee44:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800ee48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ee4c:	ed91 7a01 	vldr	s14, [r1, #4]
 800ee50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee54:	edc2 7a01 	vstr	s15, [r2, #4]
 800ee58:	e7d4      	b.n	800ee04 <gc_execute_block+0x1c88>
 800ee5a:	bf00      	nop
 800ee5c:	200013a8 	.word	0x200013a8
 800ee60:	20000df0 	.word	0x20000df0
 800ee64:	20000ef8 	.word	0x20000ef8
 800ee68:	200014a0 	.word	0x200014a0
                    else if(gc_block.non_modal_command != NonModal_AbsoluteOverride) {
 800ee6c:	2b35      	cmp	r3, #53	@ 0x35
 800ee6e:	d014      	beq.n	800ee9a <gc_execute_block+0x1d1e>
                        if(gc_block.modal.distance_incremental)
 800ee70:	49b2      	ldr	r1, [pc, #712]	@ (800f13c <gc_execute_block+0x1fc0>)
 800ee72:	7b09      	ldrb	r1, [r1, #12]
 800ee74:	b329      	cbz	r1, 800eec2 <gc_execute_block+0x1d46>
                            gc_block.values.xyz[idx] += gc_state.position[idx];
 800ee76:	f102 0020 	add.w	r0, r2, #32
 800ee7a:	49b0      	ldr	r1, [pc, #704]	@ (800f13c <gc_execute_block+0x1fc0>)
 800ee7c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ee80:	edd1 7a01 	vldr	s15, [r1, #4]
 800ee84:	f102 051a 	add.w	r5, r2, #26
 800ee88:	48ad      	ldr	r0, [pc, #692]	@ (800f140 <gc_execute_block+0x1fc4>)
 800ee8a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800ee8e:	ed90 7a00 	vldr	s14, [r0]
 800ee92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee96:	edc1 7a01 	vstr	s15, [r1, #4]
                } while(idx);
 800ee9a:	b3a2      	cbz	r2, 800ef06 <gc_execute_block+0x1d8a>
                    if(bit_isfalse(axis_words.mask, bit(--idx)))
 800ee9c:	3a01      	subs	r2, #1
 800ee9e:	fa24 f102 	lsr.w	r1, r4, r2
 800eea2:	f011 0f01 	tst.w	r1, #1
 800eea6:	d1e1      	bne.n	800ee6c <gc_execute_block+0x1cf0>
                        gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800eea8:	f102 001a 	add.w	r0, r2, #26
 800eeac:	49a4      	ldr	r1, [pc, #656]	@ (800f140 <gc_execute_block+0x1fc4>)
 800eeae:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800eeb2:	680d      	ldr	r5, [r1, #0]
 800eeb4:	f102 0020 	add.w	r0, r2, #32
 800eeb8:	49a0      	ldr	r1, [pc, #640]	@ (800f13c <gc_execute_block+0x1fc0>)
 800eeba:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800eebe:	604d      	str	r5, [r1, #4]
 800eec0:	e7eb      	b.n	800ee9a <gc_execute_block+0x1d1e>
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800eec2:	499e      	ldr	r1, [pc, #632]	@ (800f13c <gc_execute_block+0x1fc0>)
 800eec4:	1d10      	adds	r0, r2, #4
 800eec6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800eeca:	ed90 7a00 	vldr	s14, [r0]
 800eece:	489c      	ldr	r0, [pc, #624]	@ (800f140 <gc_execute_block+0x1fc4>)
 800eed0:	f102 052e 	add.w	r5, r2, #46	@ 0x2e
 800eed4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800eed8:	edd5 7a00 	vldr	s15, [r5]
 800eedc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eee0:	f102 0530 	add.w	r5, r2, #48	@ 0x30
 800eee4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800eee8:	ed90 7a01 	vldr	s14, [r0, #4]
 800eeec:	ee37 7a27 	vadd.f32	s14, s14, s15
                            gc_block.values.xyz[idx] += gc_get_block_offset(&gc_block, idx);
 800eef0:	f102 0020 	add.w	r0, r2, #32
 800eef4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800eef8:	edd1 7a01 	vldr	s15, [r1, #4]
 800eefc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef00:	edc1 7a01 	vstr	s15, [r1, #4]
 800ef04:	e7c9      	b.n	800ee9a <gc_execute_block+0x1d1e>
            switch (gc_block.non_modal_command) {
 800ef06:	2b35      	cmp	r3, #53	@ 0x35
 800ef08:	d052      	beq.n	800efb0 <gc_execute_block+0x1e34>
 800ef0a:	d811      	bhi.n	800ef30 <gc_execute_block+0x1db4>
 800ef0c:	2b1c      	cmp	r3, #28
 800ef0e:	d002      	beq.n	800ef16 <gc_execute_block+0x1d9a>
 800ef10:	2b1e      	cmp	r3, #30
 800ef12:	f47f aee4 	bne.w	800ecde <gc_execute_block+0x1b62>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 800ef16:	2b1c      	cmp	r3, #28
 800ef18:	d032      	beq.n	800ef80 <gc_execute_block+0x1e04>
 800ef1a:	200a      	movs	r0, #10
 800ef1c:	4989      	ldr	r1, [pc, #548]	@ (800f144 <gc_execute_block+0x1fc8>)
 800ef1e:	f00e f839 	bl	801cf94 <settings_read_coord_data>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	f001 87f5 	beq.w	8010f12 <gc_execute_block+0x3d96>
                    if (axis_words.mask) {
 800ef28:	2c00      	cmp	r4, #0
 800ef2a:	d049      	beq.n	800efc0 <gc_execute_block+0x1e44>
                        idx = N_AXIS;
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	e02c      	b.n	800ef8a <gc_execute_block+0x1e0e>
 800ef30:	2b41      	cmp	r3, #65	@ 0x41
 800ef32:	f47f aed4 	bne.w	800ecde <gc_execute_block+0x1b62>
                    if(!gc_block.words.p)
 800ef36:	4b81      	ldr	r3, [pc, #516]	@ (800f13c <gc_execute_block+0x1fc0>)
 800ef38:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800ef3c:	f013 0f01 	tst.w	r3, #1
 800ef40:	f001 87ea 	beq.w	8010f18 <gc_execute_block+0x3d9c>
                    if(gc_block.values.p > 65535.0f)
 800ef44:	4b7d      	ldr	r3, [pc, #500]	@ (800f13c <gc_execute_block+0x1fc0>)
 800ef46:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800ef4a:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 800f148 <gc_execute_block+0x1fcc>
 800ef4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef56:	f301 87e2 	bgt.w	8010f1e <gc_execute_block+0x3da2>
                    if(!ngc_call_push(&gc_state + ngc_call_level()))
 800ef5a:	f005 ffc9 	bl	8014ef0 <ngc_call_level>
 800ef5e:	22d4      	movs	r2, #212	@ 0xd4
 800ef60:	4b77      	ldr	r3, [pc, #476]	@ (800f140 <gc_execute_block+0x1fc4>)
 800ef62:	fb02 3000 	mla	r0, r2, r0, r3
 800ef66:	f005 ffa9 	bl	8014ebc <ngc_call_push>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	f001 87da 	beq.w	8010f24 <gc_execute_block+0x3da8>
                    gc_block.words.p = Off;
 800ef70:	4b72      	ldr	r3, [pc, #456]	@ (800f13c <gc_execute_block+0x1fc0>)
 800ef72:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800ef76:	f36f 0200 	bfc	r2, #0, #1
 800ef7a:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                    break;
 800ef7e:	e6ae      	b.n	800ecde <gc_execute_block+0x1b62>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 800ef80:	2009      	movs	r0, #9
 800ef82:	e7cb      	b.n	800ef1c <gc_execute_block+0x1da0>
                        } while(idx);
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f43f aeaa 	beq.w	800ecde <gc_execute_block+0x1b62>
                            if (bit_isfalse(axis_words.mask, bit(--idx)))
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	fa24 f203 	lsr.w	r2, r4, r3
 800ef90:	f012 0f01 	tst.w	r2, #1
 800ef94:	d1f6      	bne.n	800ef84 <gc_execute_block+0x1e08>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx];
 800ef96:	f103 011a 	add.w	r1, r3, #26
 800ef9a:	4a69      	ldr	r2, [pc, #420]	@ (800f140 <gc_execute_block+0x1fc4>)
 800ef9c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800efa0:	6810      	ldr	r0, [r2, #0]
 800efa2:	f103 0122 	add.w	r1, r3, #34	@ 0x22
 800efa6:	4a65      	ldr	r2, [pc, #404]	@ (800f13c <gc_execute_block+0x1fc0>)
 800efa8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800efac:	6090      	str	r0, [r2, #8]
 800efae:	e7e9      	b.n	800ef84 <gc_execute_block+0x1e08>
                    if (!(gc_block.modal.motion == MotionMode_Seek || gc_block.modal.motion == MotionMode_Linear))
 800efb0:	4b62      	ldr	r3, [pc, #392]	@ (800f13c <gc_execute_block+0x1fc0>)
 800efb2:	891b      	ldrh	r3, [r3, #8]
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	f67f ae92 	bls.w	800ecde <gc_execute_block+0x1b62>
                        FAIL(Status_GcodeG53InvalidMotionMode); // [G53 G0/1 not active]
 800efba:	241e      	movs	r4, #30
 800efbc:	f7fe b9bb 	b.w	800d336 <gc_execute_block+0x1ba>
                        axis_command = AxisCommand_None; // Set to none if no intermediate motion.
 800efc0:	46a2      	mov	sl, r4
 800efc2:	e68c      	b.n	800ecde <gc_execute_block+0x1b62>
        if (axis_words.mask && axis_command != AxisCommand_NonModal) // [No axis words allowed]
 800efc4:	fa5f f38b 	uxtb.w	r3, fp
 800efc8:	b11b      	cbz	r3, 800efd2 <gc_execute_block+0x1e56>
 800efca:	f1ba 0f01 	cmp.w	sl, #1
 800efce:	f041 87ac 	bne.w	8010f2a <gc_execute_block+0x3dae>
        gc_block.modal.retract_mode = CCRetractMode_Previous;
 800efd2:	4b5a      	ldr	r3, [pc, #360]	@ (800f13c <gc_execute_block+0x1fc0>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800efda:	e689      	b.n	800ecf0 <gc_execute_block+0x1b74>
        gc_parser_flags.motion_mode_changed = gc_block.modal.motion != gc_state.modal.motion;
 800efdc:	4b58      	ldr	r3, [pc, #352]	@ (800f140 <gc_execute_block+0x1fc4>)
 800efde:	8819      	ldrh	r1, [r3, #0]
 800efe0:	1a6b      	subs	r3, r5, r1
 800efe2:	bf18      	it	ne
 800efe4:	2301      	movne	r3, #1
 800efe6:	f363 2849 	bfi	r8, r3, #9, #1
        if (gc_block.modal.motion == MotionMode_Seek) {
 800efea:	b935      	cbnz	r5, 800effa <gc_execute_block+0x1e7e>
            if (!axis_words.mask)
 800efec:	fa5f f38b 	uxtb.w	r3, fp
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f47f ae7d 	bne.w	800ecf0 <gc_execute_block+0x1b74>
                axis_command = AxisCommand_None;
 800eff6:	469a      	mov	sl, r3
 800eff8:	e67a      	b.n	800ecf0 <gc_execute_block+0x1b74>
            if(!gc_block.modal.canned_cycle_active)
 800effa:	4b50      	ldr	r3, [pc, #320]	@ (800f13c <gc_execute_block+0x1fc0>)
 800effc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800f000:	930a      	str	r3, [sp, #40]	@ 0x28
 800f002:	b91b      	cbnz	r3, 800f00c <gc_execute_block+0x1e90>
                gc_block.modal.retract_mode = CCRetractMode_Previous;
 800f004:	4b4d      	ldr	r3, [pc, #308]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f006:	2200      	movs	r2, #0
 800f008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 800f00c:	4b4b      	ldr	r3, [pc, #300]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f00e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800f012:	2b01      	cmp	r3, #1
 800f014:	d06e      	beq.n	800f0f4 <gc_execute_block+0x1f78>
            if (gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 800f016:	2d21      	cmp	r5, #33	@ 0x21
 800f018:	d07e      	beq.n	800f118 <gc_execute_block+0x1f9c>
            } else if (gc_block.modal.motion == MotionMode_Threading) {
 800f01a:	2d4c      	cmp	r5, #76	@ 0x4c
 800f01c:	f000 8098 	beq.w	800f150 <gc_execute_block+0x1fd4>
            } else if (gc_block.values.f == 0.0f)
 800f020:	4b46      	ldr	r3, [pc, #280]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f022:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800f026:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02e:	f001 87b8 	beq.w	8010fa2 <gc_execute_block+0x3e26>
            if (gc_block.modal.canned_cycle_active) {
 800f032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f034:	2b00      	cmp	r3, #0
 800f036:	f000 832c 	beq.w	800f692 <gc_execute_block+0x2516>
                if(gc_parser_flags.canned_cycle_change) {
 800f03a:	f018 0102 	ands.w	r1, r8, #2
 800f03e:	d029      	beq.n	800f094 <gc_execute_block+0x1f18>
                    if(gc_state.modal.feed_mode == FeedMode_InverseTime)
 800f040:	4b3f      	ldr	r3, [pc, #252]	@ (800f140 <gc_execute_block+0x1fc4>)
 800f042:	789b      	ldrb	r3, [r3, #2]
 800f044:	2b01      	cmp	r3, #1
 800f046:	f001 87af 	beq.w	8010fa8 <gc_execute_block+0x3e2c>
                    if(!gc_block.words.r)
 800f04a:	4b3c      	ldr	r3, [pc, #240]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f04c:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f050:	f013 0f04 	tst.w	r3, #4
 800f054:	f001 87ab 	beq.w	8010fae <gc_execute_block+0x3e32>
                    if(!(axis_words.mask & bit(plane.axis_linear)))
 800f058:	fa5f f38b 	uxtb.w	r3, fp
 800f05c:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800f060:	40d3      	lsrs	r3, r2
 800f062:	f013 0f01 	tst.w	r3, #1
 800f066:	f001 87a5 	beq.w	8010fb4 <gc_execute_block+0x3e38>
                    gc_state.canned.dwell = 0.0f;
 800f06a:	4b35      	ldr	r3, [pc, #212]	@ (800f140 <gc_execute_block+0x1fc4>)
 800f06c:	2000      	movs	r0, #0
 800f06e:	6458      	str	r0, [r3, #68]	@ 0x44
                    gc_state.canned.xyz[plane.axis_0] = 0.0f;
 800f070:	f89d 2088 	ldrb.w	r2, [sp, #136]	@ 0x88
 800f074:	320c      	adds	r2, #12
 800f076:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f07a:	6050      	str	r0, [r2, #4]
                    gc_state.canned.xyz[plane.axis_1] = 0.0f;
 800f07c:	f89d 2089 	ldrb.w	r2, [sp, #137]	@ 0x89
 800f080:	320c      	adds	r2, #12
 800f082:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f086:	6050      	str	r0, [r2, #4]
                    gc_state.canned.rapid_retract = On;
 800f088:	2201      	movs	r2, #1
 800f08a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                    gc_state.canned.spindle_off = Off;
 800f08e:	2200      	movs	r2, #0
 800f090:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
                if(!gc_block.words.l)
 800f094:	4b29      	ldr	r3, [pc, #164]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f096:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800f09a:	f013 0f10 	tst.w	r3, #16
 800f09e:	f040 81eb 	bne.w	800f478 <gc_execute_block+0x22fc>
                    gc_block.values.l = 1;
 800f0a2:	4b26      	ldr	r3, [pc, #152]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                if(gc_block.words.r)
 800f0aa:	4b24      	ldr	r3, [pc, #144]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f0ac:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f0b0:	f013 0f04 	tst.w	r3, #4
 800f0b4:	d01c      	beq.n	800f0f0 <gc_execute_block+0x1f74>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800f0b6:	4b21      	ldr	r3, [pc, #132]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f0b8:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800f0bc:	7adb      	ldrb	r3, [r3, #11]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	f000 81e3 	beq.w	800f48a <gc_execute_block+0x230e>
 800f0c4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800f14c <gc_execute_block+0x1fd0>
 800f0c8:	ee27 7a87 	vmul.f32	s14, s15, s14
                                                        (gc_block.modal.distance_incremental
 800f0cc:	4b1b      	ldr	r3, [pc, #108]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f0ce:	7b1b      	ldrb	r3, [r3, #12]
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f000 81dd 	beq.w	800f490 <gc_execute_block+0x2314>
                                                          ? gc_state.position[plane.axis_linear]
 800f0d6:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800f0da:	321a      	adds	r2, #26
 800f0dc:	4b18      	ldr	r3, [pc, #96]	@ (800f140 <gc_execute_block+0x1fc4>)
 800f0de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f0e2:	edd3 7a00 	vldr	s15, [r3]
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800f0e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0ea:	4b15      	ldr	r3, [pc, #84]	@ (800f140 <gc_execute_block+0x1fc4>)
 800f0ec:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 800f0f0:	2303      	movs	r3, #3
 800f0f2:	e1fd      	b.n	800f4f0 <gc_execute_block+0x2374>
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 800f0f4:	4b11      	ldr	r3, [pc, #68]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f0f6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800f0fa:	f013 0f01 	tst.w	r3, #1
 800f0fe:	f001 8717 	beq.w	8010f30 <gc_execute_block+0x3db4>
 800f102:	4b0e      	ldr	r3, [pc, #56]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f104:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800f108:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f110:	d181      	bne.n	800f016 <gc_execute_block+0x1e9a>
                 FAIL(Status_GcodeSpindleNotRunning);
 800f112:	2429      	movs	r4, #41	@ 0x29
 800f114:	f7fe b90f 	b.w	800d336 <gc_execute_block+0x1ba>
                if(!gc_state.spindle.hal->get_data)
 800f118:	4b09      	ldr	r3, [pc, #36]	@ (800f140 <gc_execute_block+0x1fc4>)
 800f11a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f001 8709 	beq.w	8010f36 <gc_execute_block+0x3dba>
                if(gc_block.values.k == 0.0f)
 800f124:	4b05      	ldr	r3, [pc, #20]	@ (800f13c <gc_execute_block+0x1fc0>)
 800f126:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800f12a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f132:	f001 8703 	beq.w	8010f3c <gc_execute_block+0x3dc0>
                gc_parser_flags.spindle_force_sync = On;
 800f136:	f048 0820 	orr.w	r8, r8, #32
 800f13a:	e77a      	b.n	800f032 <gc_execute_block+0x1eb6>
 800f13c:	20000df0 	.word	0x20000df0
 800f140:	20000ef8 	.word	0x20000ef8
 800f144:	20000e80 	.word	0x20000e80
 800f148:	477fff00 	.word	0x477fff00
 800f14c:	41cb3333 	.word	0x41cb3333
                if(!gc_state.spindle.hal->get_data)
 800f150:	4baf      	ldr	r3, [pc, #700]	@ (800f410 <gc_execute_block+0x2294>)
 800f152:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f154:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800f156:	2b00      	cmp	r3, #0
 800f158:	f001 86f3 	beq.w	8010f42 <gc_execute_block+0x3dc6>
                if(gc_block.modal.plane_select != PlaneSelect_ZX)
 800f15c:	4bad      	ldr	r3, [pc, #692]	@ (800f414 <gc_execute_block+0x2298>)
 800f15e:	7b9b      	ldrb	r3, [r3, #14]
 800f160:	2b01      	cmp	r3, #1
 800f162:	f041 86f1 	bne.w	8010f48 <gc_execute_block+0x3dcc>
                if(axis_words.mask & ~(bit(X_AXIS)|bit(Z_AXIS)))
 800f166:	fa5f f48b 	uxtb.w	r4, fp
 800f16a:	f01b 0ffa 	tst.w	fp, #250	@ 0xfa
 800f16e:	f041 86ee 	bne.w	8010f4e <gc_execute_block+0x3dd2>
                if(gc_block.words.r && gc_block.values.r < 1.0f)
 800f172:	4ba8      	ldr	r3, [pc, #672]	@ (800f414 <gc_execute_block+0x2298>)
 800f174:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f17a:	f013 0304 	ands.w	r3, r3, #4
 800f17e:	930c      	str	r3, [sp, #48]	@ 0x30
 800f180:	d00a      	beq.n	800f198 <gc_execute_block+0x201c>
 800f182:	4ba4      	ldr	r3, [pc, #656]	@ (800f414 <gc_execute_block+0x2298>)
 800f184:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800f188:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f18c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f194:	f101 86de 	bmi.w	8010f54 <gc_execute_block+0x3dd8>
                if(!axis_words.z || !(gc_block.words.i || gc_block.words.j || gc_block.words.k || gc_block.words.p))
 800f198:	f014 0f04 	tst.w	r4, #4
 800f19c:	f001 86dd 	beq.w	8010f5a <gc_execute_block+0x3dde>
 800f1a0:	4b9c      	ldr	r3, [pc, #624]	@ (800f414 <gc_execute_block+0x2298>)
 800f1a2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800f1a6:	4b9c      	ldr	r3, [pc, #624]	@ (800f418 <gc_execute_block+0x229c>)
 800f1a8:	4003      	ands	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f001 86d8 	beq.w	8010f60 <gc_execute_block+0x3de4>
                if(gc_block.values.p < 0.0f || gc_block.values.ijk[J_VALUE] < 0.0f || gc_block.values.ijk[K_VALUE] < 0.0f)
 800f1b0:	4b98      	ldr	r3, [pc, #608]	@ (800f414 <gc_execute_block+0x2298>)
 800f1b2:	ed93 aa17 	vldr	s20, [r3, #92]	@ 0x5c
 800f1b6:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800f1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1be:	f101 86d2 	bmi.w	8010f66 <gc_execute_block+0x3dea>
 800f1c2:	ed93 9a13 	vldr	s18, [r3, #76]	@ 0x4c
 800f1c6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800f1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ce:	f101 86cd 	bmi.w	8010f6c <gc_execute_block+0x3df0>
 800f1d2:	edd3 9a14 	vldr	s19, [r3, #80]	@ 0x50
 800f1d6:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800f1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1de:	f101 86c8 	bmi.w	8010f72 <gc_execute_block+0x3df6>
                if(gc_block.values.ijk[I_VALUE] == 0.0f ||
 800f1e2:	edd3 8a12 	vldr	s17, [r3, #72]	@ 0x48
 800f1e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ee:	f001 86c3 	beq.w	8010f78 <gc_execute_block+0x3dfc>
 800f1f2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fa:	f001 86c0 	beq.w	8010f7e <gc_execute_block+0x3e02>
                    gc_block.values.ijk[J_VALUE] == 0.0f ||
 800f1fe:	eeb4 9ae9 	vcmpe.f32	s18, s19
 800f202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f206:	f281 86bd 	bge.w	8010f84 <gc_execute_block+0x3e08>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 800f20a:	f893 60b9 	ldrb.w	r6, [r3, #185]	@ 0xb9
                     gc_block.values.ijk[K_VALUE] <= gc_block.values.ijk[J_VALUE] ||
 800f20e:	f016 0310 	ands.w	r3, r6, #16
 800f212:	930d      	str	r3, [sp, #52]	@ 0x34
 800f214:	d005      	beq.n	800f222 <gc_execute_block+0x20a6>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 800f216:	4b7f      	ldr	r3, [pc, #508]	@ (800f414 <gc_execute_block+0x2298>)
 800f218:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f21c:	2b03      	cmp	r3, #3
 800f21e:	f201 86b4 	bhi.w	8010f8a <gc_execute_block+0x3e0e>
                if(gc_state.spindle.rpm < gc_state.spindle.hal->rpm_min || gc_state.spindle.rpm > gc_state.spindle.hal->rpm_max)
 800f222:	4b7b      	ldr	r3, [pc, #492]	@ (800f410 <gc_execute_block+0x2294>)
 800f224:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800f228:	ed92 7a05 	vldr	s14, [r2, #20]
 800f22c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f234:	f101 86ac 	bmi.w	8010f90 <gc_execute_block+0x3e14>
 800f238:	ed92 7a06 	vldr	s14, [r2, #24]
 800f23c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f244:	f301 86a7 	bgt.w	8010f96 <gc_execute_block+0x3e1a>
                if(gc_block.modal.motion != gc_state.modal.motion) {
 800f248:	428d      	cmp	r5, r1
 800f24a:	f040 80d4 	bne.w	800f3f6 <gc_execute_block+0x227a>
                thread.pitch = gc_block.values.p;
 800f24e:	4b73      	ldr	r3, [pc, #460]	@ (800f41c <gc_execute_block+0x22a0>)
 800f250:	ed83 aa00 	vstr	s20, [r3]
                thread.z_final = gc_block.values.xyz[Z_AXIS];
 800f254:	4a6f      	ldr	r2, [pc, #444]	@ (800f414 <gc_execute_block+0x2298>)
 800f256:	ed92 8a23 	vldr	s16, [r2, #140]	@ 0x8c
 800f25a:	ed83 8a01 	vstr	s16, [r3, #4]
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 800f25e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f266:	f100 80d0 	bmi.w	800f40a <gc_execute_block+0x228e>
 800f26a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800f26e:	4b6b      	ldr	r3, [pc, #428]	@ (800f41c <gc_execute_block+0x22a0>)
 800f270:	625a      	str	r2, [r3, #36]	@ 0x24
                thread.peak = fabsf(gc_block.values.ijk[I_VALUE]);
 800f272:	eef0 8ae8 	vabs.f32	s17, s17
 800f276:	edc3 8a02 	vstr	s17, [r3, #8]
                thread.initial_depth = gc_block.values.ijk[J_VALUE];
 800f27a:	ed83 9a03 	vstr	s18, [r3, #12]
                thread.depth = gc_block.values.ijk[K_VALUE];
 800f27e:	edc3 9a04 	vstr	s19, [r3, #16]
                if(gc_block.modal.units_imperial) {
 800f282:	4b64      	ldr	r3, [pc, #400]	@ (800f414 <gc_execute_block+0x2298>)
 800f284:	7adb      	ldrb	r3, [r3, #11]
 800f286:	b173      	cbz	r3, 800f2a6 <gc_execute_block+0x212a>
                    thread.peak *= MM_PER_INCH;
 800f288:	4b64      	ldr	r3, [pc, #400]	@ (800f41c <gc_execute_block+0x22a0>)
 800f28a:	eddf 7a65 	vldr	s15, [pc, #404]	@ 800f420 <gc_execute_block+0x22a4>
 800f28e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f292:	edc3 8a02 	vstr	s17, [r3, #8]
                    thread.initial_depth *= MM_PER_INCH;
 800f296:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f29a:	ed83 9a03 	vstr	s18, [r3, #12]
                    thread.depth *= MM_PER_INCH;
 800f29e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800f2a2:	edc3 9a04 	vstr	s19, [r3, #16]
                if(gc_block.modal.diameter_mode) {
 800f2a6:	4b5b      	ldr	r3, [pc, #364]	@ (800f414 <gc_execute_block+0x2298>)
 800f2a8:	7b5b      	ldrb	r3, [r3, #13]
 800f2aa:	b1a3      	cbz	r3, 800f2d6 <gc_execute_block+0x215a>
                    thread.peak /= 2.0f;
 800f2ac:	4b5b      	ldr	r3, [pc, #364]	@ (800f41c <gc_execute_block+0x22a0>)
 800f2ae:	edd3 7a02 	vldr	s15, [r3, #8]
 800f2b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f2b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2ba:	edc3 7a02 	vstr	s15, [r3, #8]
                    thread.initial_depth /= 2.0f;
 800f2be:	edd3 7a03 	vldr	s15, [r3, #12]
 800f2c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2c6:	edc3 7a03 	vstr	s15, [r3, #12]
                    thread.depth /= 2.0f;
 800f2ca:	edd3 7a04 	vldr	s15, [r3, #16]
 800f2ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2d2:	edc3 7a04 	vstr	s15, [r3, #16]
                if(axis_words.x) {
 800f2d6:	f014 0f01 	tst.w	r4, #1
 800f2da:	f040 80a5 	bne.w	800f428 <gc_execute_block+0x22ac>
                if(gc_block.words.h)
 800f2de:	f016 0f08 	tst.w	r6, #8
 800f2e2:	d004      	beq.n	800f2ee <gc_execute_block+0x2172>
                    thread.spring_passes = (uint_fast16_t)gc_block.values.h;
 800f2e4:	4b4b      	ldr	r3, [pc, #300]	@ (800f414 <gc_execute_block+0x2298>)
 800f2e6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800f2ea:	4b4c      	ldr	r3, [pc, #304]	@ (800f41c <gc_execute_block+0x22a0>)
 800f2ec:	629a      	str	r2, [r3, #40]	@ 0x28
                if(gc_block.words.l)
 800f2ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2f0:	b12b      	cbz	r3, 800f2fe <gc_execute_block+0x2182>
                    thread.end_taper_type = (gc_taper_type)gc_block.values.l;
 800f2f2:	4b48      	ldr	r3, [pc, #288]	@ (800f414 <gc_execute_block+0x2298>)
 800f2f4:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 800f2f8:	4b48      	ldr	r3, [pc, #288]	@ (800f41c <gc_execute_block+0x22a0>)
 800f2fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                if(gc_block.words.e)
 800f2fe:	f016 0f01 	tst.w	r6, #1
 800f302:	d003      	beq.n	800f30c <gc_execute_block+0x2190>
                    thread.end_taper_length = gc_block.values.e;
 800f304:	4b43      	ldr	r3, [pc, #268]	@ (800f414 <gc_execute_block+0x2298>)
 800f306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f308:	4b44      	ldr	r3, [pc, #272]	@ (800f41c <gc_execute_block+0x22a0>)
 800f30a:	61da      	str	r2, [r3, #28]
                if(thread.end_taper_length <= 0.0f || thread.end_taper_type == Taper_None) {
 800f30c:	4b43      	ldr	r3, [pc, #268]	@ (800f41c <gc_execute_block+0x22a0>)
 800f30e:	edd3 7a07 	vldr	s15, [r3, #28]
 800f312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31a:	d902      	bls.n	800f322 <gc_execute_block+0x21a6>
 800f31c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f320:	b92b      	cbnz	r3, 800f32e <gc_execute_block+0x21b2>
                    thread.end_taper_length = 0.0f;
 800f322:	4b3e      	ldr	r3, [pc, #248]	@ (800f41c <gc_execute_block+0x22a0>)
 800f324:	2200      	movs	r2, #0
 800f326:	61da      	str	r2, [r3, #28]
                    thread.end_taper_type = Taper_None;
 800f328:	2200      	movs	r2, #0
 800f32a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                if(thread.end_taper_type != Taper_None && thread.end_taper_length > abs(thread.z_final - gc_state.position[Z_AXIS]) / 2.0f)
 800f32e:	4b3b      	ldr	r3, [pc, #236]	@ (800f41c <gc_execute_block+0x22a0>)
 800f330:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f334:	b1e3      	cbz	r3, 800f370 <gc_execute_block+0x21f4>
 800f336:	4b39      	ldr	r3, [pc, #228]	@ (800f41c <gc_execute_block+0x22a0>)
 800f338:	ed93 7a07 	vldr	s14, [r3, #28]
 800f33c:	4b34      	ldr	r3, [pc, #208]	@ (800f410 <gc_execute_block+0x2294>)
 800f33e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 800f342:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f34a:	ee17 3a90 	vmov	r3, s15
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bfb8      	it	lt
 800f352:	425b      	neglt	r3, r3
 800f354:	ee07 3a90 	vmov	s15, r3
 800f358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f35c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800f360:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36c:	f301 8616 	bgt.w	8010f9c <gc_execute_block+0x3e20>
                if(gc_block.words.r)
 800f370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f372:	b11b      	cbz	r3, 800f37c <gc_execute_block+0x2200>
                    thread.depth_degression = gc_block.values.r;
 800f374:	4b27      	ldr	r3, [pc, #156]	@ (800f414 <gc_execute_block+0x2298>)
 800f376:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f378:	4b28      	ldr	r3, [pc, #160]	@ (800f41c <gc_execute_block+0x22a0>)
 800f37a:	615a      	str	r2, [r3, #20]
                if(gc_block.words.q)
 800f37c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f37e:	f013 0f02 	tst.w	r3, #2
 800f382:	d003      	beq.n	800f38c <gc_execute_block+0x2210>
                    thread.infeed_angle = gc_block.values.q;
 800f384:	4b23      	ldr	r3, [pc, #140]	@ (800f414 <gc_execute_block+0x2298>)
 800f386:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f388:	4b24      	ldr	r3, [pc, #144]	@ (800f41c <gc_execute_block+0x22a0>)
 800f38a:	621a      	str	r2, [r3, #32]
                gc_parser_flags.spindle_force_sync = On;
 800f38c:	f048 0820 	orr.w	r8, r8, #32
                gc_block.words.e = gc_block.words.h = gc_block.words.i = gc_block.words.j = gc_block.words.k = gc_block.words.l = gc_block.words.p = gc_block.words.q = gc_block.words.r = Off;
 800f390:	4b20      	ldr	r3, [pc, #128]	@ (800f414 <gc_execute_block+0x2298>)
 800f392:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f396:	f36f 0282 	bfc	r2, #2, #1
 800f39a:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f39e:	b2d2      	uxtb	r2, r2
 800f3a0:	f36f 0241 	bfc	r2, #1, #1
 800f3a4:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f3a8:	b2d2      	uxtb	r2, r2
 800f3aa:	f36f 0200 	bfc	r2, #0, #1
 800f3ae:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f3b2:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f3b6:	f36f 1204 	bfc	r2, #4, #1
 800f3ba:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f3be:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800f3c2:	f36f 1286 	bfc	r2, #6, #1
 800f3c6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f3ca:	b2d2      	uxtb	r2, r2
 800f3cc:	f36f 1245 	bfc	r2, #5, #1
 800f3d0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f3d4:	b2d2      	uxtb	r2, r2
 800f3d6:	f36f 1204 	bfc	r2, #4, #1
 800f3da:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f3de:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f3e2:	f36f 02c3 	bfc	r2, #3, #1
 800f3e6:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f3ea:	b2d2      	uxtb	r2, r2
 800f3ec:	f36f 0200 	bfc	r2, #0, #1
 800f3f0:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f3f4:	e61d      	b.n	800f032 <gc_execute_block+0x1eb6>
                    memset(&thread, 0, sizeof(gc_thread_data));
 800f3f6:	2230      	movs	r2, #48	@ 0x30
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	4808      	ldr	r0, [pc, #32]	@ (800f41c <gc_execute_block+0x22a0>)
 800f3fc:	f015 f917 	bl	802462e <memset>
                    thread.depth_degression = 1.0f;
 800f400:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f404:	4a05      	ldr	r2, [pc, #20]	@ (800f41c <gc_execute_block+0x22a0>)
 800f406:	6153      	str	r3, [r2, #20]
 800f408:	e721      	b.n	800f24e <gc_execute_block+0x20d2>
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 800f40a:	4a06      	ldr	r2, [pc, #24]	@ (800f424 <gc_execute_block+0x22a8>)
 800f40c:	e72f      	b.n	800f26e <gc_execute_block+0x20f2>
 800f40e:	bf00      	nop
 800f410:	20000ef8 	.word	0x20000ef8
 800f414:	20000df0 	.word	0x20000df0
 800f418:	00010070 	.word	0x00010070
 800f41c:	20000ec8 	.word	0x20000ec8
 800f420:	41cb3333 	.word	0x41cb3333
 800f424:	bf800000 	.word	0xbf800000
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 800f428:	4bb4      	ldr	r3, [pc, #720]	@ (800f6fc <gc_execute_block+0x2580>)
 800f42a:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800f42e:	ed93 7a04 	vldr	s14, [r3, #16]
 800f432:	4ab3      	ldr	r2, [pc, #716]	@ (800f700 <gc_execute_block+0x2584>)
 800f434:	edd2 6a2e 	vldr	s13, [r2, #184]	@ 0xb8
 800f438:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f43c:	edd2 6a31 	vldr	s13, [r2, #196]	@ 0xc4
 800f440:	ee37 7a26 	vadd.f32	s14, s14, s13
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 800f444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f448:	4cae      	ldr	r4, [pc, #696]	@ (800f704 <gc_execute_block+0x2588>)
 800f44a:	edc4 7a06 	vstr	s15, [r4, #24]
                    gc_block.values.p = fabsf(thread.z_final - gc_state.position[Z_AXIS]);
 800f44e:	ed92 0a1c 	vldr	s0, [r2, #112]	@ 0x70
 800f452:	ee38 0a40 	vsub.f32	s0, s16, s0
 800f456:	eef0 8ac0 	vabs.f32	s17, s0
 800f45a:	edc3 8a17 	vstr	s17, [r3, #92]	@ 0x5c
    return sqrtf(x * x + y * y);
 800f45e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f462:	ee07 0aa7 	vmla.f32	s0, s15, s15
 800f466:	f017 fe43 	bl	80270f0 <sqrtf>
                    thread.pitch = thread.pitch * hypot_f(thread.main_taper_height, gc_block.values.p) / gc_block.values.p;
 800f46a:	ee2a aa00 	vmul.f32	s20, s20, s0
 800f46e:	eeca 7a28 	vdiv.f32	s15, s20, s17
 800f472:	edc4 7a00 	vstr	s15, [r4]
 800f476:	e732      	b.n	800f2de <gc_execute_block+0x2162>
                else if(gc_block.values.l <= 0)
 800f478:	4ba0      	ldr	r3, [pc, #640]	@ (800f6fc <gc_execute_block+0x2580>)
 800f47a:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f47f ae13 	bne.w	800f0aa <gc_execute_block+0x1f2e>
                    FAIL(Status_NonPositiveValue); // [L <= 0]
 800f484:	2413      	movs	r4, #19
 800f486:	f7fd bf56 	b.w	800d336 <gc_execute_block+0x1ba>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 800f48a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f48e:	e61b      	b.n	800f0c8 <gc_execute_block+0x1f4c>
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 800f490:	f89d 308a 	ldrb.w	r3, [sp, #138]	@ 0x8a
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 800f494:	1d18      	adds	r0, r3, #4
 800f496:	4a99      	ldr	r2, [pc, #612]	@ (800f6fc <gc_execute_block+0x2580>)
 800f498:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f49c:	edd2 7a00 	vldr	s15, [r2]
 800f4a0:	4a97      	ldr	r2, [pc, #604]	@ (800f700 <gc_execute_block+0x2584>)
 800f4a2:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 800f4a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f4aa:	edd0 6a00 	vldr	s13, [r0]
 800f4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4b2:	3330      	adds	r3, #48	@ 0x30
 800f4b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f4b8:	edd2 6a01 	vldr	s13, [r2, #4]
 800f4bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4c0:	e611      	b.n	800f0e6 <gc_execute_block+0x1f6a>
                        else if(gc_block.modal.distance_incremental)
 800f4c2:	4a8e      	ldr	r2, [pc, #568]	@ (800f6fc <gc_execute_block+0x2580>)
 800f4c4:	7b12      	ldrb	r2, [r2, #12]
 800f4c6:	b192      	cbz	r2, 800f4ee <gc_execute_block+0x2372>
                            gc_state.canned.xyz[idx] = gc_state.canned.retract_position + (gc_state.canned.xyz[idx] - gc_state.position[idx]);
 800f4c8:	4a8d      	ldr	r2, [pc, #564]	@ (800f700 <gc_execute_block+0x2584>)
 800f4ca:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 800f4ce:	f103 001a 	add.w	r0, r3, #26
 800f4d2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f4d6:	edd0 6a00 	vldr	s13, [r0]
 800f4da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f4de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4e2:	f103 000c 	add.w	r0, r3, #12
 800f4e6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f4ea:	edc2 7a01 	vstr	s15, [r2, #4]
                } while(idx);
 800f4ee:	b343      	cbz	r3, 800f542 <gc_execute_block+0x23c6>
                    if(bit_istrue(axis_words.mask, bit(--idx))) {
 800f4f0:	fa5f f28b 	uxtb.w	r2, fp
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	40da      	lsrs	r2, r3
 800f4f8:	f012 0f01 	tst.w	r2, #1
 800f4fc:	d0f7      	beq.n	800f4ee <gc_execute_block+0x2372>
                        gc_state.canned.xyz[idx] = gc_block.values.xyz[idx];
 800f4fe:	f103 0020 	add.w	r0, r3, #32
 800f502:	4a7e      	ldr	r2, [pc, #504]	@ (800f6fc <gc_execute_block+0x2580>)
 800f504:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f508:	edd2 7a01 	vldr	s15, [r2, #4]
 800f50c:	f103 000c 	add.w	r0, r3, #12
 800f510:	4a7b      	ldr	r2, [pc, #492]	@ (800f700 <gc_execute_block+0x2584>)
 800f512:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f516:	edc2 7a01 	vstr	s15, [r2, #4]
                        if(idx != plane.axis_linear)
 800f51a:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800f51e:	429a      	cmp	r2, r3
 800f520:	d0cf      	beq.n	800f4c2 <gc_execute_block+0x2346>
                            gc_state.canned.xyz[idx] -= gc_state.position[idx];
 800f522:	4a77      	ldr	r2, [pc, #476]	@ (800f700 <gc_execute_block+0x2584>)
 800f524:	f103 001a 	add.w	r0, r3, #26
 800f528:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f52c:	ed90 7a00 	vldr	s14, [r0]
 800f530:	f103 000c 	add.w	r0, r3, #12
 800f534:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f53c:	edc2 7a01 	vstr	s15, [r2, #4]
 800f540:	e7d5      	b.n	800f4ee <gc_execute_block+0x2372>
                if(gc_state.canned.retract_position < gc_state.canned.xyz[plane.axis_linear])
 800f542:	4b6f      	ldr	r3, [pc, #444]	@ (800f700 <gc_execute_block+0x2584>)
 800f544:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800f548:	f89d 208a 	ldrb.w	r2, [sp, #138]	@ 0x8a
 800f54c:	320c      	adds	r2, #12
 800f54e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f552:	ed93 7a01 	vldr	s14, [r3, #4]
 800f556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55e:	f101 852c 	bmi.w	8010fba <gc_execute_block+0x3e3e>
                gc_block.words.r = gc_block.words.l = Off; // Remove single-meaning value words.
 800f562:	4b66      	ldr	r3, [pc, #408]	@ (800f6fc <gc_execute_block+0x2580>)
 800f564:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800f568:	f36f 1204 	bfc	r2, #4, #1
 800f56c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800f570:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f574:	f36f 0282 	bfc	r2, #2, #1
 800f578:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                switch (gc_block.modal.motion) {
 800f57c:	f1a5 0349 	sub.w	r3, r5, #73	@ 0x49
 800f580:	2b10      	cmp	r3, #16
 800f582:	f63f abb5 	bhi.w	800ecf0 <gc_execute_block+0x1b74>
 800f586:	a201      	add	r2, pc, #4	@ (adr r2, 800f58c <gc_execute_block+0x2410>)
 800f588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f58c:	0800f639 	.word	0x0800f639
 800f590:	0800ecf1 	.word	0x0800ecf1
 800f594:	0800ecf1 	.word	0x0800ecf1
 800f598:	0800ecf1 	.word	0x0800ecf1
 800f59c:	0800ecf1 	.word	0x0800ecf1
 800f5a0:	0800ecf1 	.word	0x0800ecf1
 800f5a4:	0800ecf1 	.word	0x0800ecf1
 800f5a8:	0800ecf1 	.word	0x0800ecf1
 800f5ac:	0800f615 	.word	0x0800f615
 800f5b0:	0800f5e3 	.word	0x0800f5e3
 800f5b4:	0800f639 	.word	0x0800f639
 800f5b8:	0800ecf1 	.word	0x0800ecf1
 800f5bc:	0800f615 	.word	0x0800f615
 800f5c0:	0800f5d1 	.word	0x0800f5d1
 800f5c4:	0800ecf1 	.word	0x0800ecf1
 800f5c8:	0800ecf1 	.word	0x0800ecf1
 800f5cc:	0800f5d1 	.word	0x0800f5d1
                        gc_state.canned.spindle_off = gc_block.modal.motion == MotionMode_CannedCycle86;
 800f5d0:	2d56      	cmp	r5, #86	@ 0x56
 800f5d2:	bf14      	ite	ne
 800f5d4:	2200      	movne	r2, #0
 800f5d6:	2201      	moveq	r2, #1
 800f5d8:	4b49      	ldr	r3, [pc, #292]	@ (800f700 <gc_execute_block+0x2584>)
 800f5da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
                        gc_state.canned.rapid_retract = gc_block.modal.motion == MotionMode_CannedCycle86;
 800f5de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                        if(gc_block.words.p) {
 800f5e2:	4b46      	ldr	r3, [pc, #280]	@ (800f6fc <gc_execute_block+0x2580>)
 800f5e4:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f5e8:	f013 0f01 	tst.w	r3, #1
 800f5ec:	d01f      	beq.n	800f62e <gc_execute_block+0x24b2>
                            if(gc_block.values.p < 0.0f)
 800f5ee:	4b43      	ldr	r3, [pc, #268]	@ (800f6fc <gc_execute_block+0x2580>)
 800f5f0:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800f5f4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fc:	f101 84e0 	bmi.w	8010fc0 <gc_execute_block+0x3e44>
                            gc_state.canned.dwell = gc_block.values.p;
 800f600:	4b3f      	ldr	r3, [pc, #252]	@ (800f700 <gc_execute_block+0x2584>)
 800f602:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
                            gc_block.words.p = Off; // Remove single-meaning value word.
 800f606:	4b3d      	ldr	r3, [pc, #244]	@ (800f6fc <gc_execute_block+0x2580>)
 800f608:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f60c:	f36f 0200 	bfc	r2, #0, #1
 800f610:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        gc_state.canned.delta = - gc_state.canned.xyz[plane.axis_linear] + gc_state.canned.retract_position;
 800f614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f618:	4b39      	ldr	r3, [pc, #228]	@ (800f700 <gc_execute_block+0x2584>)
 800f61a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                        if(gc_block.modal.motion == MotionMode_CannedCycle85)
 800f61e:	2d55      	cmp	r5, #85	@ 0x55
 800f620:	f47f ab66 	bne.w	800ecf0 <gc_execute_block+0x1b74>
                            gc_state.canned.rapid_retract = Off;
 800f624:	2200      	movs	r2, #0
 800f626:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800f62a:	f7ff bb61 	b.w	800ecf0 <gc_execute_block+0x1b74>
                        } else if(gc_parser_flags.canned_cycle_change)
 800f62e:	2900      	cmp	r1, #0
 800f630:	d0f0      	beq.n	800f614 <gc_execute_block+0x2498>
                            FAIL(Status_GcodeValueWordMissing);
 800f632:	241c      	movs	r4, #28
 800f634:	f7fd be7f 	b.w	800d336 <gc_execute_block+0x1ba>
                        if(gc_block.words.q) {
 800f638:	4b30      	ldr	r3, [pc, #192]	@ (800f6fc <gc_execute_block+0x2580>)
 800f63a:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f63e:	f013 0f02 	tst.w	r3, #2
 800f642:	d021      	beq.n	800f688 <gc_execute_block+0x250c>
                            if(gc_block.values.q <= 0.0f)
 800f644:	4b2d      	ldr	r3, [pc, #180]	@ (800f6fc <gc_execute_block+0x2580>)
 800f646:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800f64a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f652:	f241 84b8 	bls.w	8010fc6 <gc_execute_block+0x3e4a>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 800f656:	7adb      	ldrb	r3, [r3, #11]
 800f658:	b19b      	cbz	r3, 800f682 <gc_execute_block+0x2506>
 800f65a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800f708 <gc_execute_block+0x258c>
 800f65e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f662:	4b27      	ldr	r3, [pc, #156]	@ (800f700 <gc_execute_block+0x2584>)
 800f664:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                            gc_block.words.q = Off; // Remove single-meaning value word.
 800f668:	4b24      	ldr	r3, [pc, #144]	@ (800f6fc <gc_execute_block+0x2580>)
 800f66a:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800f66e:	f36f 0241 	bfc	r2, #1, #1
 800f672:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                        gc_state.canned.dwell = 0.25f;
 800f676:	4b22      	ldr	r3, [pc, #136]	@ (800f700 <gc_execute_block+0x2584>)
 800f678:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800f67c:	645a      	str	r2, [r3, #68]	@ 0x44
                        break;
 800f67e:	f7ff bb37 	b.w	800ecf0 <gc_execute_block+0x1b74>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 800f682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f686:	e7ea      	b.n	800f65e <gc_execute_block+0x24e2>
                        } else if(gc_parser_flags.canned_cycle_change)
 800f688:	2900      	cmp	r1, #0
 800f68a:	d0f4      	beq.n	800f676 <gc_execute_block+0x24fa>
                            FAIL(Status_GcodeValueWordMissing);
 800f68c:	241c      	movs	r4, #28
 800f68e:	f7fd be52 	b.w	800d336 <gc_execute_block+0x1ba>
            } else switch (gc_block.modal.motion) {
 800f692:	2d05      	cmp	r5, #5
 800f694:	d814      	bhi.n	800f6c0 <gc_execute_block+0x2544>
 800f696:	b22b      	sxth	r3, r5
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f43f ab29 	beq.w	800ecf0 <gc_execute_block+0x1b74>
 800f69e:	1e6b      	subs	r3, r5, #1
 800f6a0:	2b04      	cmp	r3, #4
 800f6a2:	f63f ab25 	bhi.w	800ecf0 <gc_execute_block+0x1b74>
 800f6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6ac <gc_execute_block+0x2530>)
 800f6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ac:	0800f6ed 	.word	0x0800f6ed
 800f6b0:	0800f70d 	.word	0x0800f70d
 800f6b4:	0800f711 	.word	0x0800f711
 800f6b8:	0800ecf1 	.word	0x0800ecf1
 800f6bc:	0800fa2d 	.word	0x0800fa2d
 800f6c0:	2d33      	cmp	r5, #51	@ 0x33
 800f6c2:	f000 824f 	beq.w	800fb64 <gc_execute_block+0x29e8>
 800f6c6:	f4ff ab13 	bcc.w	800ecf0 <gc_execute_block+0x1b74>
 800f6ca:	2d8f      	cmp	r5, #143	@ 0x8f
 800f6cc:	f63f ab10 	bhi.w	800ecf0 <gc_execute_block+0x1b74>
 800f6d0:	2d8c      	cmp	r5, #140	@ 0x8c
 800f6d2:	f4ff ab0d 	bcc.w	800ecf0 <gc_execute_block+0x1b74>
 800f6d6:	f1a5 038c 	sub.w	r3, r5, #140	@ 0x8c
 800f6da:	2b03      	cmp	r3, #3
 800f6dc:	f63f ab08 	bhi.w	800ecf0 <gc_execute_block+0x1b74>
 800f6e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f6e4:	028d028f 	.word	0x028d028f
 800f6e8:	028d028f 	.word	0x028d028f
                    if (!axis_words.mask)
 800f6ec:	fa5f f38b 	uxtb.w	r3, fp
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f47f aafd 	bne.w	800ecf0 <gc_execute_block+0x1b74>
                        axis_command = AxisCommand_None;
 800f6f6:	469a      	mov	sl, r3
 800f6f8:	f7ff bafa 	b.w	800ecf0 <gc_execute_block+0x1b74>
 800f6fc:	20000df0 	.word	0x20000df0
 800f700:	20000ef8 	.word	0x20000ef8
 800f704:	20000ec8 	.word	0x20000ec8
 800f708:	41cb3333 	.word	0x41cb3333
                    gc_parser_flags.arc_is_clockwise = On;
 800f70c:	f048 0804 	orr.w	r8, r8, #4
                    if (!axis_words.mask)
 800f710:	fa5f f18b 	uxtb.w	r1, fp
 800f714:	2900      	cmp	r1, #0
 800f716:	f001 8459 	beq.w	8010fcc <gc_execute_block+0x3e50>
                    if (!(axis_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 800f71a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 800f71e:	2201      	movs	r2, #1
 800f720:	fa02 f303 	lsl.w	r3, r2, r3
 800f724:	f89d 0089 	ldrb.w	r0, [sp, #137]	@ 0x89
 800f728:	4082      	lsls	r2, r0
 800f72a:	4313      	orrs	r3, r2
 800f72c:	4219      	tst	r1, r3
 800f72e:	f001 8450 	beq.w	8010fd2 <gc_execute_block+0x3e56>
                    if (gc_block.words.p) { // Number of turns
 800f732:	4bb7      	ldr	r3, [pc, #732]	@ (800fa10 <gc_execute_block+0x2894>)
 800f734:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800f738:	f013 0f01 	tst.w	r3, #1
 800f73c:	f040 80a8 	bne.w	800f890 <gc_execute_block+0x2714>
                        gc_block.arc_turns = 1;
 800f740:	4bb3      	ldr	r3, [pc, #716]	@ (800fa10 <gc_execute_block+0x2894>)
 800f742:	2201      	movs	r2, #1
 800f744:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                    x = gc_block.values.xyz[plane.axis_0] - gc_state.position[plane.axis_0]; // Delta x between current position and target
 800f748:	f89d 4088 	ldrb.w	r4, [sp, #136]	@ 0x88
 800f74c:	4ab0      	ldr	r2, [pc, #704]	@ (800fa10 <gc_execute_block+0x2894>)
 800f74e:	f104 0320 	add.w	r3, r4, #32
 800f752:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f756:	edd3 7a01 	vldr	s15, [r3, #4]
 800f75a:	4bae      	ldr	r3, [pc, #696]	@ (800fa14 <gc_execute_block+0x2898>)
 800f75c:	f104 011a 	add.w	r1, r4, #26
 800f760:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f764:	ed91 7a00 	vldr	s14, [r1]
 800f768:	ee37 9ac7 	vsub.f32	s18, s15, s14
                    y = gc_block.values.xyz[plane.axis_1] - gc_state.position[plane.axis_1]; // Delta y between current position and target
 800f76c:	f89d 5089 	ldrb.w	r5, [sp, #137]	@ 0x89
 800f770:	f105 0120 	add.w	r1, r5, #32
 800f774:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f778:	ed91 8a01 	vldr	s16, [r1, #4]
 800f77c:	f105 011a 	add.w	r1, r5, #26
 800f780:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f784:	edd3 7a00 	vldr	s15, [r3]
 800f788:	ee38 8a67 	vsub.f32	s16, s16, s15
                    if (gc_block.words.r) { // Arc Radius Mode
 800f78c:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800f790:	f013 0f04 	tst.w	r3, #4
 800f794:	f000 80a3 	beq.w	800f8de <gc_execute_block+0x2762>
                        gc_block.words.r = Off;
 800f798:	4611      	mov	r1, r2
 800f79a:	f892 30ba 	ldrb.w	r3, [r2, #186]	@ 0xba
 800f79e:	f36f 0382 	bfc	r3, #2, #1
 800f7a2:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
                        if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 800f7a6:	220c      	movs	r2, #12
 800f7a8:	3184      	adds	r1, #132	@ 0x84
 800f7aa:	489b      	ldr	r0, [pc, #620]	@ (800fa18 <gc_execute_block+0x289c>)
 800f7ac:	f014 ff15 	bl	80245da <memcmp>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	f001 8417 	beq.w	8010fe4 <gc_execute_block+0x3e68>
                        if (gc_block.modal.units_imperial)
 800f7b6:	4b96      	ldr	r3, [pc, #600]	@ (800fa10 <gc_execute_block+0x2894>)
 800f7b8:	7adb      	ldrb	r3, [r3, #11]
 800f7ba:	b143      	cbz	r3, 800f7ce <gc_execute_block+0x2652>
                            gc_block.values.r *= MM_PER_INCH;
 800f7bc:	4b94      	ldr	r3, [pc, #592]	@ (800fa10 <gc_execute_block+0x2894>)
 800f7be:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800f7c2:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800fa1c <gc_execute_block+0x28a0>
 800f7c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7ca:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
                        if(gc_state.modal.scaling_active)
 800f7ce:	4b91      	ldr	r3, [pc, #580]	@ (800fa14 <gc_execute_block+0x2898>)
 800f7d0:	7f9b      	ldrb	r3, [r3, #30]
 800f7d2:	b1cb      	cbz	r3, 800f808 <gc_execute_block+0x268c>
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 800f7d4:	4b8e      	ldr	r3, [pc, #568]	@ (800fa10 <gc_execute_block+0x2894>)
 800f7d6:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800f7da:	4b91      	ldr	r3, [pc, #580]	@ (800fa20 <gc_execute_block+0x28a4>)
 800f7dc:	1ca2      	adds	r2, r4, #2
 800f7de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f7e2:	edd2 6a01 	vldr	s13, [r2, #4]
 800f7e6:	1caa      	adds	r2, r5, #2
 800f7e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f7ec:	ed93 7a01 	vldr	s14, [r3, #4]
                                                   : scale_factor.ijk[plane.axis_1]);
 800f7f0:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f8:	dd01      	ble.n	800f7fe <gc_execute_block+0x2682>
 800f7fa:	eeb0 7a66 	vmov.f32	s14, s13
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 800f7fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f802:	4b83      	ldr	r3, [pc, #524]	@ (800fa10 <gc_execute_block+0x2894>)
 800f804:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
                        float h_x2_div_d = 4.0f * gc_block.values.r * gc_block.values.r - x * x - y * y;
 800f808:	4b81      	ldr	r3, [pc, #516]	@ (800fa10 <gc_execute_block+0x2894>)
 800f80a:	edd3 8a19 	vldr	s17, [r3, #100]	@ 0x64
 800f80e:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800f812:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f816:	ee69 aa09 	vmul.f32	s21, s18, s18
 800f81a:	eeb0 0a6a 	vmov.f32	s0, s21
 800f81e:	ee18 0aa7 	vnmls.f32	s0, s17, s15
 800f822:	ee28 aa08 	vmul.f32	s20, s16, s16
 800f826:	ee30 0a4a 	vsub.f32	s0, s0, s20
                        if (h_x2_div_d < 0.0f)
 800f82a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f832:	f101 83da 	bmi.w	8010fea <gc_execute_block+0x3e6e>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 800f836:	f017 fc5b 	bl	80270f0 <sqrtf>
 800f83a:	eef1 9a40 	vneg.f32	s19, s0
    return sqrtf(x * x + y * y);
 800f83e:	ee3a 0a8a 	vadd.f32	s0, s21, s20
 800f842:	f017 fc55 	bl	80270f0 <sqrtf>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 800f846:	eec9 7a80 	vdiv.f32	s15, s19, s0
                        if (gc_block.modal.motion == MotionMode_CcwArc)
 800f84a:	4b71      	ldr	r3, [pc, #452]	@ (800fa10 <gc_execute_block+0x2894>)
 800f84c:	891b      	ldrh	r3, [r3, #8]
 800f84e:	2b03      	cmp	r3, #3
 800f850:	d03a      	beq.n	800f8c8 <gc_execute_block+0x274c>
                        if (gc_block.values.r < 0.0f) {
 800f852:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85a:	d438      	bmi.n	800f8ce <gc_execute_block+0x2752>
                        gc_block.values.ijk[plane.axis_0] = 0.5f * (x - (y * h_x2_div_d));
 800f85c:	eeb0 7a49 	vmov.f32	s14, s18
 800f860:	ee07 7ac8 	vmls.f32	s14, s15, s16
 800f864:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800f868:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f86c:	4b68      	ldr	r3, [pc, #416]	@ (800fa10 <gc_execute_block+0x2894>)
 800f86e:	f104 0210 	add.w	r2, r4, #16
 800f872:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f876:	ed82 7a02 	vstr	s14, [r2, #8]
                        gc_block.values.ijk[plane.axis_1] = 0.5f * (y + (x * h_x2_div_d));
 800f87a:	ee07 8a89 	vmla.f32	s16, s15, s18
 800f87e:	ee68 7a26 	vmul.f32	s15, s16, s13
 800f882:	3510      	adds	r5, #16
 800f884:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f888:	edc3 7a02 	vstr	s15, [r3, #8]
 800f88c:	f7ff ba30 	b.w	800ecf0 <gc_execute_block+0x1b74>
                        if(!isintf(gc_block.values.p))
 800f890:	4b5f      	ldr	r3, [pc, #380]	@ (800fa10 <gc_execute_block+0x2894>)
 800f892:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 800f896:	f005 fe8b 	bl	80155b0 <isintf>
 800f89a:	2800      	cmp	r0, #0
 800f89c:	f001 839c 	beq.w	8010fd8 <gc_execute_block+0x3e5c>
                        gc_block.arc_turns = (uint32_t)truncf(gc_block.values.p);
 800f8a0:	4a5b      	ldr	r2, [pc, #364]	@ (800fa10 <gc_execute_block+0x2894>)
 800f8a2:	edd2 7a17 	vldr	s15, [r2, #92]	@ 0x5c
 800f8a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8aa:	ee17 3a90 	vmov	r3, s15
 800f8ae:	edc2 7a32 	vstr	s15, [r2, #200]	@ 0xc8
                        if(gc_block.arc_turns == 0)
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f001 8393 	beq.w	8010fde <gc_execute_block+0x3e62>
                        gc_block.words.p = Off;
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	f892 20ba 	ldrb.w	r2, [r2, #186]	@ 0xba
 800f8be:	f36f 0200 	bfc	r2, #0, #1
 800f8c2:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800f8c6:	e73f      	b.n	800f748 <gc_execute_block+0x25cc>
                            h_x2_div_d = -h_x2_div_d;
 800f8c8:	eef1 7a67 	vneg.f32	s15, s15
 800f8cc:	e7c1      	b.n	800f852 <gc_execute_block+0x26d6>
                            h_x2_div_d = -h_x2_div_d;
 800f8ce:	eef1 7a67 	vneg.f32	s15, s15
                            gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 800f8d2:	eef1 8a68 	vneg.f32	s17, s17
 800f8d6:	4b4e      	ldr	r3, [pc, #312]	@ (800fa10 <gc_execute_block+0x2894>)
 800f8d8:	edc3 8a19 	vstr	s17, [r3, #100]	@ 0x64
 800f8dc:	e7be      	b.n	800f85c <gc_execute_block+0x26e0>
                        if (!(ijk_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 800f8de:	9805      	ldr	r0, [sp, #20]
 800f8e0:	4601      	mov	r1, r0
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	fa03 f204 	lsl.w	r2, r3, r4
 800f8e8:	40ab      	lsls	r3, r5
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	4218      	tst	r0, r3
 800f8ee:	f001 837f 	beq.w	8010ff0 <gc_execute_block+0x3e74>
                        gc_block.words.i = gc_block.words.j = gc_block.words.k = Off;
 800f8f2:	4b47      	ldr	r3, [pc, #284]	@ (800fa10 <gc_execute_block+0x2894>)
 800f8f4:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800f8f8:	f36f 1286 	bfc	r2, #6, #1
 800f8fc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f900:	b2d2      	uxtb	r2, r2
 800f902:	f36f 1245 	bfc	r2, #5, #1
 800f906:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800f90a:	b2d2      	uxtb	r2, r2
 800f90c:	f36f 1204 	bfc	r2, #4, #1
 800f910:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                        if (gc_block.modal.units_imperial) {
 800f914:	7adb      	ldrb	r3, [r3, #11]
 800f916:	b1b3      	cbz	r3, 800f946 <gc_execute_block+0x27ca>
                            idx = 3;
 800f918:	2303      	movs	r3, #3
 800f91a:	e000      	b.n	800f91e <gc_execute_block+0x27a2>
                            } while(idx);
 800f91c:	b19b      	cbz	r3, 800f946 <gc_execute_block+0x27ca>
                                idx--;
 800f91e:	3b01      	subs	r3, #1
                                if (ijk_words.mask & bit(idx))
 800f920:	fa21 f203 	lsr.w	r2, r1, r3
 800f924:	f012 0f01 	tst.w	r2, #1
 800f928:	d0f8      	beq.n	800f91c <gc_execute_block+0x27a0>
                                    gc_block.values.ijk[idx] *= MM_PER_INCH;
 800f92a:	f103 0010 	add.w	r0, r3, #16
 800f92e:	4a38      	ldr	r2, [pc, #224]	@ (800fa10 <gc_execute_block+0x2894>)
 800f930:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f934:	edd2 7a02 	vldr	s15, [r2, #8]
 800f938:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800fa1c <gc_execute_block+0x28a0>
 800f93c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f940:	edc2 7a02 	vstr	s15, [r2, #8]
 800f944:	e7ea      	b.n	800f91c <gc_execute_block+0x27a0>
                        if(gc_state.modal.scaling_active) {
 800f946:	4b33      	ldr	r3, [pc, #204]	@ (800fa14 <gc_execute_block+0x2898>)
 800f948:	7f9b      	ldrb	r3, [r3, #30]
 800f94a:	b1d3      	cbz	r3, 800f982 <gc_execute_block+0x2806>
                            idx = 3;
 800f94c:	2303      	movs	r3, #3
 800f94e:	e000      	b.n	800f952 <gc_execute_block+0x27d6>
                            } while(idx);
 800f950:	b1bb      	cbz	r3, 800f982 <gc_execute_block+0x2806>
                                if (ijk_words.mask & bit(--idx))
 800f952:	3b01      	subs	r3, #1
 800f954:	fa21 f203 	lsr.w	r2, r1, r3
 800f958:	f012 0f01 	tst.w	r2, #1
 800f95c:	d0f8      	beq.n	800f950 <gc_execute_block+0x27d4>
                                    gc_block.values.ijk[idx] *= scale_factor.ijk[idx];
 800f95e:	f103 0010 	add.w	r0, r3, #16
 800f962:	4a2b      	ldr	r2, [pc, #172]	@ (800fa10 <gc_execute_block+0x2894>)
 800f964:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f968:	edd2 7a02 	vldr	s15, [r2, #8]
 800f96c:	1c9e      	adds	r6, r3, #2
 800f96e:	482c      	ldr	r0, [pc, #176]	@ (800fa20 <gc_execute_block+0x28a4>)
 800f970:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800f974:	ed90 7a01 	vldr	s14, [r0, #4]
 800f978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f97c:	edc2 7a02 	vstr	s15, [r2, #8]
 800f980:	e7e6      	b.n	800f950 <gc_execute_block+0x27d4>
                        x -= gc_block.values.ijk[plane.axis_0]; // Delta x between circle center and target
 800f982:	4e23      	ldr	r6, [pc, #140]	@ (800fa10 <gc_execute_block+0x2894>)
 800f984:	f104 0310 	add.w	r3, r4, #16
 800f988:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f98c:	edd3 9a02 	vldr	s19, [r3, #8]
 800f990:	ee79 7a69 	vsub.f32	s15, s18, s19
                        y -= gc_block.values.ijk[plane.axis_1]; // Delta y between circle center and target
 800f994:	f105 0310 	add.w	r3, r5, #16
 800f998:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f99c:	edd3 8a02 	vldr	s17, [r3, #8]
 800f9a0:	ee38 8a68 	vsub.f32	s16, s16, s17
    return sqrtf(x * x + y * y);
 800f9a4:	ee28 8a08 	vmul.f32	s16, s16, s16
 800f9a8:	eeb0 0a48 	vmov.f32	s0, s16
 800f9ac:	ee07 0aa7 	vmla.f32	s0, s15, s15
 800f9b0:	f017 fb9e 	bl	80270f0 <sqrtf>
 800f9b4:	eeb0 8a40 	vmov.f32	s16, s0
 800f9b8:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f9bc:	eeb0 0a68 	vmov.f32	s0, s17
 800f9c0:	ee09 0aa9 	vmla.f32	s0, s19, s19
 800f9c4:	f017 fb94 	bl	80270f0 <sqrtf>
                        gc_block.values.r = hypot_f(gc_block.values.ijk[plane.axis_0], gc_block.values.ijk[plane.axis_1]);
 800f9c8:	ed86 0a19 	vstr	s0, [r6, #100]	@ 0x64
                        float delta_r = fabsf(target_r - gc_block.values.r);
 800f9cc:	ee78 7a40 	vsub.f32	s15, s16, s0
 800f9d0:	eef0 7ae7 	vabs.f32	s15, s15
                        if (delta_r > 0.005f) {
 800f9d4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800fa24 <gc_execute_block+0x28a8>
 800f9d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e0:	f77f a986 	ble.w	800ecf0 <gc_execute_block+0x1b74>
                            if (delta_r > 0.5f)
 800f9e4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800f9e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f0:	f301 8301 	bgt.w	8010ff6 <gc_execute_block+0x3e7a>
                            if (delta_r > (0.001f * gc_block.values.r))
 800f9f4:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800fa28 <gc_execute_block+0x28ac>
 800f9f8:	ee20 7a26 	vmul.f32	s14, s0, s13
 800f9fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa04:	f57f a974 	bpl.w	800ecf0 <gc_execute_block+0x1b74>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.005mm AND 0.1% radius
 800fa08:	2421      	movs	r4, #33	@ 0x21
 800fa0a:	f7fd bc94 	b.w	800d336 <gc_execute_block+0x1ba>
 800fa0e:	bf00      	nop
 800fa10:	20000df0 	.word	0x20000df0
 800fa14:	20000ef8 	.word	0x20000ef8
 800fa18:	20000f60 	.word	0x20000f60
 800fa1c:	41cb3333 	.word	0x41cb3333
 800fa20:	200001a8 	.word	0x200001a8
 800fa24:	3ba3d70a 	.word	0x3ba3d70a
 800fa28:	3a83126f 	.word	0x3a83126f
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 800fa2c:	4bb5      	ldr	r3, [pc, #724]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fa2e:	7b9b      	ldrb	r3, [r3, #14]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f041 82e3 	bne.w	8010ffc <gc_execute_block+0x3e80>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 800fa36:	fa5f f38b 	uxtb.w	r3, fp
 800fa3a:	2b03      	cmp	r3, #3
 800fa3c:	f201 82e1 	bhi.w	8011002 <gc_execute_block+0x3e86>
                    if((gc_block.words.mask & pq_words.mask) != pq_words.mask)
 800fa40:	4bb0      	ldr	r3, [pc, #704]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fa42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fa46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800fa4a:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 800fa4e:	f041 82db 	bne.w	8011008 <gc_execute_block+0x3e8c>
                    if(gc_parser_flags.motion_mode_changed && (gc_block.words.mask & ij_words.mask) != ij_words.mask)
 800fa52:	f418 7f00 	tst.w	r8, #512	@ 0x200
 800fa56:	d004      	beq.n	800fa62 <gc_execute_block+0x28e6>
 800fa58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fa5c:	2b30      	cmp	r3, #48	@ 0x30
 800fa5e:	f041 82d6 	bne.w	801100e <gc_execute_block+0x3e92>
                    if(!(gc_block.words.i || gc_block.words.j)) {
 800fa62:	4ba8      	ldr	r3, [pc, #672]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fa64:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800fa68:	f013 0f30 	tst.w	r3, #48	@ 0x30
 800fa6c:	d151      	bne.n	800fb12 <gc_execute_block+0x2996>
                        gc_block.values.ijk[I_VALUE] = - gc_block.values.p;
 800fa6e:	4ba5      	ldr	r3, [pc, #660]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fa70:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800fa74:	eef1 7a67 	vneg.f32	s15, s15
 800fa78:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] = - gc_block.values.q;
 800fa7c:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800fa80:	eef1 7a67 	vneg.f32	s15, s15
 800fa84:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    if (gc_block.modal.units_imperial) {
 800fa88:	4b9e      	ldr	r3, [pc, #632]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fa8a:	7adb      	ldrb	r3, [r3, #11]
 800fa8c:	b173      	cbz	r3, 800faac <gc_execute_block+0x2930>
                        gc_block.values.p *= MM_PER_INCH;
 800fa8e:	4b9d      	ldr	r3, [pc, #628]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fa90:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800fa94:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800fd08 <gc_execute_block+0x2b8c>
 800fa98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa9c:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                        gc_block.values.q *= MM_PER_INCH;
 800faa0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800faa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800faa8:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                    if(gc_state.modal.scaling_active) {
 800faac:	4b97      	ldr	r3, [pc, #604]	@ (800fd0c <gc_execute_block+0x2b90>)
 800faae:	7f9b      	ldrb	r3, [r3, #30]
 800fab0:	b18b      	cbz	r3, 800fad6 <gc_execute_block+0x295a>
                        gc_block.values.p *= scale_factor.ijk[X_AXIS];
 800fab2:	4b94      	ldr	r3, [pc, #592]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fab4:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800fab8:	4a95      	ldr	r2, [pc, #596]	@ (800fd10 <gc_execute_block+0x2b94>)
 800faba:	ed92 7a03 	vldr	s14, [r2, #12]
 800fabe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fac2:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
                        gc_block.values.q *= scale_factor.ijk[Y_AXIS];
 800fac6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800faca:	ed92 7a04 	vldr	s14, [r2, #16]
 800face:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fad2:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
                    gc_state.modal.spline_pq[X_AXIS] = gc_block.values.p;
 800fad6:	4b8b      	ldr	r3, [pc, #556]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fad8:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800fada:	4a8c      	ldr	r2, [pc, #560]	@ (800fd0c <gc_execute_block+0x2b90>)
 800fadc:	6211      	str	r1, [r2, #32]
                    gc_state.modal.spline_pq[Y_AXIS] = gc_block.values.q;
 800fade:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800fae0:	6251      	str	r1, [r2, #36]	@ 0x24
                    gc_block.words.p = gc_block.words.q = gc_block.words.i = gc_block.words.j = Off;
 800fae2:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800fae6:	f36f 1245 	bfc	r2, #5, #1
 800faea:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800faee:	b2d2      	uxtb	r2, r2
 800faf0:	f36f 1204 	bfc	r2, #4, #1
 800faf4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800faf8:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fafc:	f36f 0241 	bfc	r2, #1, #1
 800fb00:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fb04:	b2d2      	uxtb	r2, r2
 800fb06:	f36f 0200 	bfc	r2, #0, #1
 800fb0a:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
                    break;
 800fb0e:	f7ff b8ef 	b.w	800ecf0 <gc_execute_block+0x1b74>
                        if (gc_block.modal.units_imperial) {
 800fb12:	4b7c      	ldr	r3, [pc, #496]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fb14:	7adb      	ldrb	r3, [r3, #11]
 800fb16:	b173      	cbz	r3, 800fb36 <gc_execute_block+0x29ba>
                            gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 800fb18:	4b7a      	ldr	r3, [pc, #488]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fb1a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fb1e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800fd08 <gc_execute_block+0x2b8c>
 800fb22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb26:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                            gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 800fb2a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fb2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb32:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                        if(gc_state.modal.scaling_active) {
 800fb36:	4b75      	ldr	r3, [pc, #468]	@ (800fd0c <gc_execute_block+0x2b90>)
 800fb38:	7f9b      	ldrb	r3, [r3, #30]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d0a4      	beq.n	800fa88 <gc_execute_block+0x290c>
                            gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 800fb3e:	4b71      	ldr	r3, [pc, #452]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fb40:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fb44:	4a72      	ldr	r2, [pc, #456]	@ (800fd10 <gc_execute_block+0x2b94>)
 800fb46:	ed92 7a03 	vldr	s14, [r2, #12]
 800fb4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb4e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                            gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 800fb52:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fb56:	ed92 7a04 	vldr	s14, [r2, #16]
 800fb5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb5e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
 800fb62:	e791      	b.n	800fa88 <gc_execute_block+0x290c>
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 800fb64:	4b67      	ldr	r3, [pc, #412]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fb66:	7b9b      	ldrb	r3, [r3, #14]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	f041 8253 	bne.w	8011014 <gc_execute_block+0x3e98>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 800fb6e:	fa5f f38b 	uxtb.w	r3, fp
 800fb72:	2b03      	cmp	r3, #3
 800fb74:	f201 8251 	bhi.w	801101a <gc_execute_block+0x3e9e>
                    if((gc_block.words.mask & ij_words.mask) != ij_words.mask)
 800fb78:	4b62      	ldr	r3, [pc, #392]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fb7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fb7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fb82:	2b30      	cmp	r3, #48	@ 0x30
 800fb84:	f041 824c 	bne.w	8011020 <gc_execute_block+0x3ea4>
                    if(gc_block.values.ijk[I_VALUE] == 0.0f && gc_block.values.ijk[I_VALUE] == 0.0f)
 800fb88:	4b5e      	ldr	r3, [pc, #376]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fb8a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fb8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb96:	f001 8246 	beq.w	8011026 <gc_execute_block+0x3eaa>
                    if (gc_block.modal.units_imperial) {
 800fb9a:	7adb      	ldrb	r3, [r3, #11]
 800fb9c:	b163      	cbz	r3, 800fbb8 <gc_execute_block+0x2a3c>
                        gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 800fb9e:	4b59      	ldr	r3, [pc, #356]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fba0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fd08 <gc_execute_block+0x2b8c>
 800fba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fba8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 800fbac:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fbb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbb4:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    if(gc_state.modal.scaling_active) {
 800fbb8:	4b54      	ldr	r3, [pc, #336]	@ (800fd0c <gc_execute_block+0x2b90>)
 800fbba:	7f9b      	ldrb	r3, [r3, #30]
 800fbbc:	b18b      	cbz	r3, 800fbe2 <gc_execute_block+0x2a66>
                        gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 800fbbe:	4b51      	ldr	r3, [pc, #324]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fbc0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fbc4:	4a52      	ldr	r2, [pc, #328]	@ (800fd10 <gc_execute_block+0x2b94>)
 800fbc6:	ed92 7a03 	vldr	s14, [r2, #12]
 800fbca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbce:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
                        gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 800fbd2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fbd6:	ed92 7a04 	vldr	s14, [r2, #16]
 800fbda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbde:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                    gc_block.words.i = gc_block.words.j = Off;
 800fbe2:	4b48      	ldr	r3, [pc, #288]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fbe4:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 800fbe8:	f36f 1245 	bfc	r2, #5, #1
 800fbec:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800fbf0:	b2d2      	uxtb	r2, r2
 800fbf2:	f36f 1204 	bfc	r2, #4, #1
 800fbf6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
                    break;
 800fbfa:	f7ff b879 	b.w	800ecf0 <gc_execute_block+0x1b74>
                    gc_parser_flags.probe_is_no_error = On;
 800fbfe:	f048 0810 	orr.w	r8, r8, #16
                    if(gc_block.modal.motion == MotionMode_ProbeAway || gc_block.modal.motion == MotionMode_ProbeAwayNoError)
 800fc02:	f1a5 038e 	sub.w	r3, r5, #142	@ 0x8e
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	d90f      	bls.n	800fc2c <gc_execute_block+0x2ab0>
                    if (!axis_words.mask)
 800fc0c:	fa5f f38b 	uxtb.w	r3, fp
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f001 820b 	beq.w	801102c <gc_execute_block+0x3eb0>
                    if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 800fc16:	220c      	movs	r2, #12
 800fc18:	493e      	ldr	r1, [pc, #248]	@ (800fd14 <gc_execute_block+0x2b98>)
 800fc1a:	483f      	ldr	r0, [pc, #252]	@ (800fd18 <gc_execute_block+0x2b9c>)
 800fc1c:	f014 fcdd 	bl	80245da <memcmp>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	f47f a865 	bne.w	800ecf0 <gc_execute_block+0x1b74>
                        FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 800fc26:	2421      	movs	r4, #33	@ 0x21
 800fc28:	f7fd bb85 	b.w	800d336 <gc_execute_block+0x1ba>
                        gc_parser_flags.probe_is_away = On;
 800fc2c:	f048 0808 	orr.w	r8, r8, #8
 800fc30:	e7ec      	b.n	800fc0c <gc_execute_block+0x2a90>
        gc_block.words.n = gc_block.words.f = gc_block.words.s = gc_block.words.t = Off;
 800fc32:	4b34      	ldr	r3, [pc, #208]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fc34:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800fc38:	f36f 1204 	bfc	r2, #4, #1
 800fc3c:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fc40:	b2d2      	uxtb	r2, r2
 800fc42:	f36f 02c3 	bfc	r2, #3, #1
 800fc46:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
 800fc4a:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 800fc4e:	f36f 0241 	bfc	r2, #1, #1
 800fc52:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fc56:	b2d2      	uxtb	r2, r2
 800fc58:	f36f 1286 	bfc	r2, #6, #1
 800fc5c:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
 800fc60:	f7ff b857 	b.w	800ed12 <gc_execute_block+0x1b96>
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 800fc64:	2301      	movs	r3, #1
 800fc66:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800fc6a:	f363 12c7 	bfi	r2, r3, #7, #1
 800fc6e:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
        if ((status_code_t)(int_value = (uint_fast16_t)mc_jog_execute(&plan_data, &gc_block, gc_state.position)) == Status_OK)
 800fc72:	4a29      	ldr	r2, [pc, #164]	@ (800fd18 <gc_execute_block+0x2b9c>)
 800fc74:	4923      	ldr	r1, [pc, #140]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fc76:	a814      	add	r0, sp, #80	@ 0x50
 800fc78:	f004 f9ee 	bl	8014058 <mc_jog_execute>
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	f47d ab59 	bne.w	800d336 <gc_execute_block+0x1ba>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position));
 800fc84:	4b24      	ldr	r3, [pc, #144]	@ (800fd18 <gc_execute_block+0x2b9c>)
 800fc86:	4a23      	ldr	r2, [pc, #140]	@ (800fd14 <gc_execute_block+0x2b98>)
 800fc88:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return (status_code_t)int_value;
 800fc8e:	f7fd bb52 	b.w	800d336 <gc_execute_block+0x1ba>
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 800fc92:	2300      	movs	r3, #0
 800fc94:	e7e7      	b.n	800fc66 <gc_execute_block+0x2aea>
 800fc96:	2301      	movs	r3, #1
 800fc98:	e7e5      	b.n	800fc66 <gc_execute_block+0x2aea>
    if(gc_state.spindle.hal->cap.laser) {
 800fc9a:	4b1c      	ldr	r3, [pc, #112]	@ (800fd0c <gc_execute_block+0x2b90>)
 800fc9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc9e:	7a9b      	ldrb	r3, [r3, #10]
 800fca0:	f013 0f08 	tst.w	r3, #8
 800fca4:	d054      	beq.n	800fd50 <gc_execute_block+0x2bd4>
        if(!motion_is_lasercut(gc_block.modal.motion))
 800fca6:	4b17      	ldr	r3, [pc, #92]	@ (800fd04 <gc_execute_block+0x2b88>)
 800fca8:	891b      	ldrh	r3, [r3, #8]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 800fcaa:	1e5a      	subs	r2, r3, #1
 800fcac:	b292      	uxth	r2, r2
 800fcae:	2a02      	cmp	r2, #2
 800fcb0:	d907      	bls.n	800fcc2 <gc_execute_block+0x2b46>
 800fcb2:	2b05      	cmp	r3, #5
 800fcb4:	d020      	beq.n	800fcf8 <gc_execute_block+0x2b7c>
 800fcb6:	2b33      	cmp	r3, #51	@ 0x33
 800fcb8:	d001      	beq.n	800fcbe <gc_execute_block+0x2b42>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	e002      	b.n	800fcc4 <gc_execute_block+0x2b48>
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	e000      	b.n	800fcc4 <gc_execute_block+0x2b48>
 800fcc2:	2301      	movs	r3, #1
        if(!motion_is_lasercut(gc_block.modal.motion))
 800fcc4:	b90b      	cbnz	r3, 800fcca <gc_execute_block+0x2b4e>
            gc_parser_flags.laser_disable = On;
 800fcc6:	f048 0840 	orr.w	r8, r8, #64	@ 0x40
        if(axis_words.mask && (axis_command == AxisCommand_MotionMode))
 800fcca:	fa5f f38b 	uxtb.w	r3, fp
 800fcce:	b113      	cbz	r3, 800fcd6 <gc_execute_block+0x2b5a>
 800fcd0:	f1ba 0f02 	cmp.w	sl, #2
 800fcd4:	d012      	beq.n	800fcfc <gc_execute_block+0x2b80>
        else if(gc_state.modal.spindle.state.on && !gc_state.modal.spindle.state.ccw) {
 800fcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fd0c <gc_execute_block+0x2b90>)
 800fcd8:	7e9b      	ldrb	r3, [r3, #26]
 800fcda:	f003 0303 	and.w	r3, r3, #3
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d01c      	beq.n	800fd1c <gc_execute_block+0x2ba0>
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 800fce2:	4b0a      	ldr	r3, [pc, #40]	@ (800fd0c <gc_execute_block+0x2b90>)
 800fce4:	7e9b      	ldrb	r3, [r3, #26]
 800fce6:	f013 0f02 	tst.w	r3, #2
 800fcea:	d02d      	beq.n	800fd48 <gc_execute_block+0x2bcc>
 800fcec:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800fcf0:	f000 80a7 	beq.w	800fe42 <gc_execute_block+0x2cc6>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	e028      	b.n	800fd4a <gc_execute_block+0x2bce>
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e7e3      	b.n	800fcc4 <gc_execute_block+0x2b48>
            gc_parser_flags.laser_is_motion = On;
 800fcfc:	f048 0880 	orr.w	r8, r8, #128	@ 0x80
 800fd00:	e7ef      	b.n	800fce2 <gc_execute_block+0x2b66>
 800fd02:	bf00      	nop
 800fd04:	20000df0 	.word	0x20000df0
 800fd08:	41cb3333 	.word	0x41cb3333
 800fd0c:	20000ef8 	.word	0x20000ef8
 800fd10:	200001a8 	.word	0x200001a8
 800fd14:	20000e74 	.word	0x20000e74
 800fd18:	20000f60 	.word	0x20000f60
            if(motion_is_lasercut(gc_state.modal.motion)) {
 800fd1c:	4b9b      	ldr	r3, [pc, #620]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fd1e:	881b      	ldrh	r3, [r3, #0]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 800fd20:	1e5a      	subs	r2, r3, #1
 800fd22:	b292      	uxth	r2, r2
 800fd24:	2a02      	cmp	r2, #2
 800fd26:	d909      	bls.n	800fd3c <gc_execute_block+0x2bc0>
 800fd28:	2b05      	cmp	r3, #5
 800fd2a:	d007      	beq.n	800fd3c <gc_execute_block+0x2bc0>
 800fd2c:	2b33      	cmp	r3, #51	@ 0x33
 800fd2e:	d005      	beq.n	800fd3c <gc_execute_block+0x2bc0>
            } else if(!gc_parser_flags.laser_disable) // When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
 800fd30:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800fd34:	d1d5      	bne.n	800fce2 <gc_execute_block+0x2b66>
                gc_parser_flags.spindle_force_sync = On;
 800fd36:	f048 0820 	orr.w	r8, r8, #32
 800fd3a:	e7d2      	b.n	800fce2 <gc_execute_block+0x2b66>
                if(gc_parser_flags.laser_disable)
 800fd3c:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800fd40:	d0cf      	beq.n	800fce2 <gc_execute_block+0x2b66>
                    gc_parser_flags.spindle_force_sync = On; // Change from G1/2/3 motion mode.
 800fd42:	f048 0820 	orr.w	r8, r8, #32
 800fd46:	e7cc      	b.n	800fce2 <gc_execute_block+0x2b66>
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	4a90      	ldr	r2, [pc, #576]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fd4c:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
    gc_state.line_number = gc_block.values.n;
 800fd50:	4b8f      	ldr	r3, [pc, #572]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fd52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fd56:	4a8d      	ldr	r2, [pc, #564]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fd58:	6753      	str	r3, [r2, #116]	@ 0x74
    plan_data.line_number = gc_state.line_number; // Record data for planner use.
 800fd5a:	931b      	str	r3, [sp, #108]	@ 0x6c
    bool check_mode = state_get() == STATE_CHECK_MODE;
 800fd5c:	f00e fd74 	bl	801e848 <state_get>
 800fd60:	4605      	mov	r5, r0
 800fd62:	2802      	cmp	r0, #2
 800fd64:	bf14      	ite	ne
 800fd66:	2300      	movne	r3, #0
 800fd68:	2301      	moveq	r3, #1
 800fd6a:	930b      	str	r3, [sp, #44]	@ 0x2c
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 800fd6c:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 800fd6e:	b10c      	cbz	r4, 800fd74 <gc_execute_block+0x2bf8>
 800fd70:	2802      	cmp	r0, #2
 800fd72:	d168      	bne.n	800fe46 <gc_execute_block+0x2cca>
    gc_state.modal.feed_mode = gc_block.modal.feed_mode;
 800fd74:	4b86      	ldr	r3, [pc, #536]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fd76:	7a9b      	ldrb	r3, [r3, #10]
 800fd78:	4a84      	ldr	r2, [pc, #528]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fd7a:	7093      	strb	r3, [r2, #2]
    if (gc_state.modal.feed_mode == FeedMode_InverseTime)
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d06f      	beq.n	800fe60 <gc_execute_block+0x2ce4>
    gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800fd80:	4b83      	ldr	r3, [pc, #524]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fd82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd84:	4b81      	ldr	r3, [pc, #516]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fd86:	661a      	str	r2, [r3, #96]	@ 0x60
    plan_data.feed_rate = gc_state.feed_rate; // Record data for planner use.
 800fd88:	9214      	str	r2, [sp, #80]	@ 0x50
    if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800fd8a:	7edb      	ldrb	r3, [r3, #27]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d06e      	beq.n	800fe6e <gc_execute_block+0x2cf2>
    if(!user_words.s && ((gc_state.spindle.rpm != gc_block.values.s) || gc_parser_flags.spindle_force_sync)) {
 800fd90:	4b80      	ldr	r3, [pc, #512]	@ (800ff94 <gc_execute_block+0x2e18>)
 800fd92:	789b      	ldrb	r3, [r3, #2]
 800fd94:	f013 0f08 	tst.w	r3, #8
 800fd98:	d12e      	bne.n	800fdf8 <gc_execute_block+0x2c7c>
 800fd9a:	4b7c      	ldr	r3, [pc, #496]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fd9c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800fda0:	4b7b      	ldr	r3, [pc, #492]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fda2:	ed93 0a1a 	vldr	s0, [r3, #104]	@ 0x68
 800fda6:	eef4 7a40 	vcmp.f32	s15, s0
 800fdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdae:	d102      	bne.n	800fdb6 <gc_execute_block+0x2c3a>
 800fdb0:	f018 0f20 	tst.w	r8, #32
 800fdb4:	d020      	beq.n	800fdf8 <gc_execute_block+0x2c7c>
        if(gc_state.modal.spindle.state.on && !gc_parser_flags.laser_is_motion) {
 800fdb6:	4b75      	ldr	r3, [pc, #468]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fdb8:	7e9b      	ldrb	r3, [r3, #26]
 800fdba:	f013 0f01 	tst.w	r3, #1
 800fdbe:	d017      	beq.n	800fdf0 <gc_execute_block+0x2c74>
 800fdc0:	fa5f f288 	uxtb.w	r2, r8
 800fdc4:	f018 0f80 	tst.w	r8, #128	@ 0x80
 800fdc8:	d112      	bne.n	800fdf0 <gc_execute_block+0x2c74>
            if(gc_block.spindle) {
 800fdca:	4b71      	ldr	r3, [pc, #452]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fdcc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800fdd0:	b173      	cbz	r3, 800fdf0 <gc_execute_block+0x2c74>
                gc_block.spindle->param->rpm = gc_block.values.s;
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	ed83 0a00 	vstr	s0, [r3]
                spindle_sync(gc_block.spindle, gc_state.modal.spindle.state, gc_parser_flags.laser_disable ? 0.0f : gc_block.values.s);
 800fdd8:	4b6d      	ldr	r3, [pc, #436]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fdda:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800fdde:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800fde2:	d001      	beq.n	800fde8 <gc_execute_block+0x2c6c>
 800fde4:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 800ff98 <gc_execute_block+0x2e1c>
 800fde8:	4b68      	ldr	r3, [pc, #416]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fdea:	7e99      	ldrb	r1, [r3, #26]
 800fdec:	f00e f9fe 	bl	801e1ec <spindle_sync>
        gc_state.spindle.rpm = gc_block.values.s; // Update spindle speed state.
 800fdf0:	4b67      	ldr	r3, [pc, #412]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fdf2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fdf4:	4b65      	ldr	r3, [pc, #404]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fdf6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (!gc_parser_flags.laser_disable)
 800fdf8:	fa5f f388 	uxtb.w	r3, r8
 800fdfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800fdfe:	f018 0f40 	tst.w	r8, #64	@ 0x40
 800fe02:	d17d      	bne.n	800ff00 <gc_execute_block+0x2d84>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t)); // Record data for planner use.
 800fe04:	ac15      	add	r4, sp, #84	@ 0x54
 800fe06:	4b65      	ldr	r3, [pc, #404]	@ (800ff9c <gc_execute_block+0x2e20>)
 800fe08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(gc_state.tool_pending != gc_block.values.t && !check_mode) {
 800fe0e:	4b5f      	ldr	r3, [pc, #380]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fe10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe12:	4a5f      	ldr	r2, [pc, #380]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fe14:	f8d2 00b0 	ldr.w	r0, [r2, #176]	@ 0xb0
 800fe18:	4283      	cmp	r3, r0
 800fe1a:	d001      	beq.n	800fe20 <gc_execute_block+0x2ca4>
 800fe1c:	2d02      	cmp	r5, #2
 800fe1e:	d173      	bne.n	800ff08 <gc_execute_block+0x2d8c>
    if(port_command) {
 800fe20:	9b06      	ldr	r3, [sp, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	f000 80d1 	beq.w	800ffca <gc_execute_block+0x2e4e>
        switch(port_command) {
 800fe28:	3b3e      	subs	r3, #62	@ 0x3e
 800fe2a:	2b06      	cmp	r3, #6
 800fe2c:	f200 80cd 	bhi.w	800ffca <gc_execute_block+0x2e4e>
 800fe30:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fe34:	00c800c8 	.word	0x00c800c8
 800fe38:	011f011f 	.word	0x011f011f
 800fe3c:	01460132 	.word	0x01460132
 800fe40:	014a      	.short	0x014a
        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 800fe42:	2301      	movs	r3, #1
 800fe44:	e781      	b.n	800fd4a <gc_execute_block+0x2bce>
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 800fe46:	4620      	mov	r0, r4
 800fe48:	f7f8 f95a 	bl	8008100 <strlen>
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	f012 fb25 	bl	802249c <malloc>
 800fe52:	901c      	str	r0, [sp, #112]	@ 0x70
 800fe54:	2800      	cmp	r0, #0
 800fe56:	d08d      	beq.n	800fd74 <gc_execute_block+0x2bf8>
        strcpy(plan_data.message, message);
 800fe58:	4621      	mov	r1, r4
 800fe5a:	f014 fd40 	bl	80248de <strcpy>
 800fe5e:	e789      	b.n	800fd74 <gc_execute_block+0x2bf8>
        plan_data.condition.inverse_time = On; // Set condition flag for planner use.
 800fe60:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800fe64:	f043 0320 	orr.w	r3, r3, #32
 800fe68:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fe6c:	e788      	b.n	800fd80 <gc_execute_block+0x2c04>
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 800fe6e:	4b48      	ldr	r3, [pc, #288]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fe70:	891b      	ldrh	r3, [r3, #8]
 800fe72:	2b50      	cmp	r3, #80	@ 0x50
 800fe74:	d000      	beq.n	800fe78 <gc_execute_block+0x2cfc>
 800fe76:	b963      	cbnz	r3, 800fe92 <gc_execute_block+0x2d16>
            if(gc_state.spindle.css) {
 800fe78:	4b44      	ldr	r3, [pc, #272]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fe7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe7c:	b123      	cbz	r3, 800fe88 <gc_execute_block+0x2d0c>
                gc_state.spindle.css = NULL;
 800fe7e:	4b43      	ldr	r3, [pc, #268]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	659a      	str	r2, [r3, #88]	@ 0x58
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 800fe84:	f007 fc46 	bl	8017714 <protocol_buffer_synchronize>
            gc_block.values.s = gc_state.spindle.rpm; //gc_state.spindle.hal->param->rpm; // Keep current RPM
 800fe88:	4b40      	ldr	r3, [pc, #256]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fe8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe8c:	4b40      	ldr	r3, [pc, #256]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fe8e:	669a      	str	r2, [r3, #104]	@ 0x68
 800fe90:	e77e      	b.n	800fd90 <gc_execute_block+0x2c14>
            gc_state.spindle.css = &gc_state.spindle.hal->param->css;
 800fe92:	4c3e      	ldr	r4, [pc, #248]	@ (800ff8c <gc_execute_block+0x2e10>)
 800fe94:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	3310      	adds	r3, #16
 800fe9a:	65a3      	str	r3, [r4, #88]	@ 0x58
            gc_state.spindle.css->axis = plane.axis_1;
 800fe9c:	f89d 2089 	ldrb.w	r2, [sp, #137]	@ 0x89
 800fea0:	615a      	str	r2, [r3, #20]
            gc_state.spindle.css->tool_offset = gc_get_offset(gc_state.spindle.css->axis, false);
 800fea2:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 800fea4:	2100      	movs	r1, #0
 800fea6:	6970      	ldr	r0, [r6, #20]
 800fea8:	f7fc fed0 	bl	800cc4c <gc_get_offset>
 800feac:	ed86 0a04 	vstr	s0, [r6, #16]
            float pos = gc_state.position[gc_state.spindle.css->axis] - gc_state.spindle.css->tool_offset;
 800feb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800feb2:	695a      	ldr	r2, [r3, #20]
 800feb4:	321a      	adds	r2, #26
 800feb6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800feba:	edd4 7a00 	vldr	s15, [r4]
 800febe:	ed93 7a04 	vldr	s14, [r3, #16]
 800fec2:	ee77 7ac7 	vsub.f32	s15, s15, s14
            gc_block.values.s = pos <= 0.0f ? gc_state.spindle.css->max_rpm : min(gc_state.spindle.css->max_rpm, gc_state.spindle.css->surface_speed / (pos * (float)(2.0f * M_PI)));
 800fec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800feca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fece:	d911      	bls.n	800fef4 <gc_execute_block+0x2d78>
 800fed0:	edd3 6a03 	vldr	s13, [r3, #12]
 800fed4:	ed93 6a00 	vldr	s12, [r3]
 800fed8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ffa0 <gc_execute_block+0x2e24>
 800fedc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fee0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800fee4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feec:	d504      	bpl.n	800fef8 <gc_execute_block+0x2d7c>
 800feee:	eeb0 7a66 	vmov.f32	s14, s13
 800fef2:	e001      	b.n	800fef8 <gc_execute_block+0x2d7c>
 800fef4:	ed93 7a03 	vldr	s14, [r3, #12]
 800fef8:	4b25      	ldr	r3, [pc, #148]	@ (800ff90 <gc_execute_block+0x2e14>)
 800fefa:	ed83 7a1a 	vstr	s14, [r3, #104]	@ 0x68
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 800fefe:	e747      	b.n	800fd90 <gc_execute_block+0x2c14>
        plan_data.spindle.hal = gc_state.spindle.hal;
 800ff00:	4b22      	ldr	r3, [pc, #136]	@ (800ff8c <gc_execute_block+0x2e10>)
 800ff02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff04:	9318      	str	r3, [sp, #96]	@ 0x60
 800ff06:	e782      	b.n	800fe0e <gc_execute_block+0x2c92>
        tool_data_t *pending_tool = tool_get_pending((gc_state.tool_pending = gc_block.values.t));
 800ff08:	4b20      	ldr	r3, [pc, #128]	@ (800ff8c <gc_execute_block+0x2e10>)
 800ff0a:	6798      	str	r0, [r3, #120]	@ 0x78
 800ff0c:	f7fc fdea 	bl	800cae4 <tool_get_pending>
 800ff10:	4604      	mov	r4, r0
        if(set_tool || settings.tool_change.mode == ToolChange_Ignore || !(hal.stream.suspend_read || hal.tool.change)) {
 800ff12:	9b07      	ldr	r3, [sp, #28]
 800ff14:	b963      	cbnz	r3, 800ff30 <gc_execute_block+0x2db4>
 800ff16:	4b23      	ldr	r3, [pc, #140]	@ (800ffa4 <gc_execute_block+0x2e28>)
 800ff18:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ff1c:	2b04      	cmp	r3, #4
 800ff1e:	d007      	beq.n	800ff30 <gc_execute_block+0x2db4>
 800ff20:	4b21      	ldr	r3, [pc, #132]	@ (800ffa8 <gc_execute_block+0x2e2c>)
 800ff22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ff26:	bb33      	cbnz	r3, 800ff76 <gc_execute_block+0x2dfa>
 800ff28:	4b1f      	ldr	r3, [pc, #124]	@ (800ffa8 <gc_execute_block+0x2e2c>)
 800ff2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ff2e:	bb13      	cbnz	r3, 800ff76 <gc_execute_block+0x2dfa>
    if(grbl.tool_table.n_tools)
 800ff30:	4b1e      	ldr	r3, [pc, #120]	@ (800ffac <gc_execute_block+0x2e30>)
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d03b      	beq.n	800ffb0 <gc_execute_block+0x2e34>
        gc_state.tool = tool;
 800ff38:	4b14      	ldr	r3, [pc, #80]	@ (800ff8c <gc_execute_block+0x2e10>)
 800ff3a:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            if(grbl.on_tool_selected) {
 800ff3e:	4b1b      	ldr	r3, [pc, #108]	@ (800ffac <gc_execute_block+0x2e30>)
 800ff40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ff44:	b163      	cbz	r3, 800ff60 <gc_execute_block+0x2de4>
                spindle_state_t state = gc_state.modal.spindle.state;
 800ff46:	4f11      	ldr	r7, [pc, #68]	@ (800ff8c <gc_execute_block+0x2e10>)
 800ff48:	7ebe      	ldrb	r6, [r7, #26]
                grbl.on_tool_selected(gc_state.tool);
 800ff4a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800ff4e:	4798      	blx	r3
                if(state.value != gc_state.modal.spindle.state.value)
 800ff50:	b2f6      	uxtb	r6, r6
 800ff52:	7ebb      	ldrb	r3, [r7, #26]
 800ff54:	429e      	cmp	r6, r3
 800ff56:	d003      	beq.n	800ff60 <gc_execute_block+0x2de4>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 800ff58:	7eba      	ldrb	r2, [r7, #26]
 800ff5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff90 <gc_execute_block+0x2e14>)
 800ff5c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            if(grbl.on_tool_changed)
 800ff60:	4b12      	ldr	r3, [pc, #72]	@ (800ffac <gc_execute_block+0x2e30>)
 800ff62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ff66:	b11b      	cbz	r3, 800ff70 <gc_execute_block+0x2df4>
                grbl.on_tool_changed(gc_state.tool);
 800ff68:	4a08      	ldr	r2, [pc, #32]	@ (800ff8c <gc_execute_block+0x2e10>)
 800ff6a:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 800ff6e:	4798      	blx	r3
            system_add_rt_report(Report_Tool);
 800ff70:	2080      	movs	r0, #128	@ 0x80
 800ff72:	f011 fc27 	bl	80217c4 <system_add_rt_report>
        if(hal.tool.select)
 800ff76:	4b0c      	ldr	r3, [pc, #48]	@ (800ffa8 <gc_execute_block+0x2e2c>)
 800ff78:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800ff7c:	b1f3      	cbz	r3, 800ffbc <gc_execute_block+0x2e40>
            hal.tool.select(pending_tool, !set_tool);
 800ff7e:	9a07      	ldr	r2, [sp, #28]
 800ff80:	f082 0101 	eor.w	r1, r2, #1
 800ff84:	4620      	mov	r0, r4
 800ff86:	4798      	blx	r3
 800ff88:	e74a      	b.n	800fe20 <gc_execute_block+0x2ca4>
 800ff8a:	bf00      	nop
 800ff8c:	20000ef8 	.word	0x20000ef8
 800ff90:	20000df0 	.word	0x20000df0
 800ff94:	20000dec 	.word	0x20000dec
 800ff98:	00000000 	.word	0x00000000
 800ff9c:	20000f48 	.word	0x20000f48
 800ffa0:	40c90fdb 	.word	0x40c90fdb
 800ffa4:	20001bd8 	.word	0x20001bd8
 800ffa8:	200011c0 	.word	0x200011c0
 800ffac:	200013a8 	.word	0x200013a8
        gc_state.tool->tool_id = tool->tool_id;
 800ffb0:	4ba0      	ldr	r3, [pc, #640]	@ (8010234 <gc_execute_block+0x30b8>)
 800ffb2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ffb6:	6922      	ldr	r2, [r4, #16]
 800ffb8:	611a      	str	r2, [r3, #16]
 800ffba:	e7c0      	b.n	800ff3e <gc_execute_block+0x2dc2>
            system_add_rt_report(Report_Tool);
 800ffbc:	2080      	movs	r0, #128	@ 0x80
 800ffbe:	f011 fc01 	bl	80217c4 <system_add_rt_report>
 800ffc2:	e72d      	b.n	800fe20 <gc_execute_block+0x2ca4>
                add_output_command(&gc_block.output_command);
 800ffc4:	489c      	ldr	r0, [pc, #624]	@ (8010238 <gc_execute_block+0x30bc>)
 800ffc6:	f7fc fdcf 	bl	800cb68 <add_output_command>
    if (command_words.M6 && !set_tool && !check_mode) {
 800ffca:	f019 0f01 	tst.w	r9, #1
 800ffce:	d004      	beq.n	800ffda <gc_execute_block+0x2e5e>
 800ffd0:	9b07      	ldr	r3, [sp, #28]
 800ffd2:	b913      	cbnz	r3, 800ffda <gc_execute_block+0x2e5e>
 800ffd4:	2d02      	cmp	r5, #2
 800ffd6:	f040 8083 	bne.w	80100e0 <gc_execute_block+0x2f64>
    if(gc_state.modal.spindle.state.value != gc_block.modal.spindle.state.value) {
 800ffda:	4b96      	ldr	r3, [pc, #600]	@ (8010234 <gc_execute_block+0x30b8>)
 800ffdc:	7e9a      	ldrb	r2, [r3, #26]
 800ffde:	4b97      	ldr	r3, [pc, #604]	@ (801023c <gc_execute_block+0x30c0>)
 800ffe0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d021      	beq.n	801002c <gc_execute_block+0x2eb0>
        if(gc_block.spindle) {
 800ffe8:	4b94      	ldr	r3, [pc, #592]	@ (801023c <gc_execute_block+0x30c0>)
 800ffea:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 800ffee:	2800      	cmp	r0, #0
 800fff0:	f000 80e5 	beq.w	80101be <gc_execute_block+0x3042>
            if(grbl.on_spindle_programmed)
 800fff4:	4b92      	ldr	r3, [pc, #584]	@ (8010240 <gc_execute_block+0x30c4>)
 800fff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fff8:	b13b      	cbz	r3, 801000a <gc_execute_block+0x2e8e>
                grbl.on_spindle_programmed(gc_block.spindle, gc_block.modal.spindle.state,  plan_data.spindle.rpm, gc_block.modal.spindle.rpm_mode);
 800fffa:	4990      	ldr	r1, [pc, #576]	@ (801023c <gc_execute_block+0x30c0>)
 800fffc:	f891 2023 	ldrb.w	r2, [r1, #35]	@ 0x23
 8010000:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 8010004:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 8010008:	4798      	blx	r3
            if((spindle_ok = spindle_sync(gc_block.spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm)))
 801000a:	4b8c      	ldr	r3, [pc, #560]	@ (801023c <gc_execute_block+0x30c0>)
 801000c:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 8010010:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 8010014:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
 8010018:	f00e f8e8 	bl	801e1ec <spindle_sync>
 801001c:	4603      	mov	r3, r0
 801001e:	2800      	cmp	r0, #0
 8010020:	f040 80bd 	bne.w	801019e <gc_execute_block+0x3022>
        if(!(spindle_event = !spindle_ok))
 8010024:	f080 0301 	eor.w	r3, r0, #1
 8010028:	b2db      	uxtb	r3, r3
 801002a:	9308      	str	r3, [sp, #32]
    if(spindle_event && grbl.on_spindle_programmed)
 801002c:	9b08      	ldr	r3, [sp, #32]
 801002e:	b14b      	cbz	r3, 8010044 <gc_execute_block+0x2ec8>
 8010030:	4b83      	ldr	r3, [pc, #524]	@ (8010240 <gc_execute_block+0x30c4>)
 8010032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010034:	b133      	cbz	r3, 8010044 <gc_execute_block+0x2ec8>
        grbl.on_spindle_programmed(gc_state.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm, gc_state.modal.spindle.rpm_mode);
 8010036:	487f      	ldr	r0, [pc, #508]	@ (8010234 <gc_execute_block+0x30b8>)
 8010038:	7ec2      	ldrb	r2, [r0, #27]
 801003a:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 801003e:	7e81      	ldrb	r1, [r0, #26]
 8010040:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8010042:	4798      	blx	r3
    plan_data.spindle.state = gc_state.modal.spindle.state; // Set condition flag for planner use.
 8010044:	4b7b      	ldr	r3, [pc, #492]	@ (8010234 <gc_execute_block+0x30b8>)
 8010046:	7e9a      	ldrb	r2, [r3, #26]
 8010048:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
    plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted;
 801004c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8010050:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8010054:	f363 12c7 	bfi	r2, r3, #7, #1
 8010058:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 801005c:	2b00      	cmp	r3, #0
 801005e:	f000 80d7 	beq.w	8010210 <gc_execute_block+0x3094>
 8010062:	4b74      	ldr	r3, [pc, #464]	@ (8010234 <gc_execute_block+0x30b8>)
 8010064:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010068:	2b00      	cmp	r3, #0
 801006a:	f000 80d2 	beq.w	8010212 <gc_execute_block+0x3096>
 801006e:	2301      	movs	r3, #1
 8010070:	e0cf      	b.n	8010212 <gc_execute_block+0x3096>
                hal.port.digital_out(gc_block.output_command.port, gc_block.output_command.value != 0.0f);
 8010072:	4b74      	ldr	r3, [pc, #464]	@ (8010244 <gc_execute_block+0x30c8>)
 8010074:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010078:	4b70      	ldr	r3, [pc, #448]	@ (801023c <gc_execute_block+0x30c0>)
 801007a:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 801007e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010082:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801008a:	bf14      	ite	ne
 801008c:	2101      	movne	r1, #1
 801008e:	2100      	moveq	r1, #0
 8010090:	f893 00be 	ldrb.w	r0, [r3, #190]	@ 0xbe
 8010094:	4790      	blx	r2
                break;
 8010096:	e798      	b.n	800ffca <gc_execute_block+0x2e4e>
                sys.var5399 = hal.port.wait_on_input((io_port_type_t)gc_block.output_command.is_digital, gc_block.output_command.port, (wait_mode_t)gc_block.values.l, gc_block.values.q);
 8010098:	4b6a      	ldr	r3, [pc, #424]	@ (8010244 <gc_execute_block+0x30c8>)
 801009a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801009e:	4867      	ldr	r0, [pc, #412]	@ (801023c <gc_execute_block+0x30c0>)
 80100a0:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 80100a4:	f890 20b4 	ldrb.w	r2, [r0, #180]	@ 0xb4
 80100a8:	f890 10be 	ldrb.w	r1, [r0, #190]	@ 0xbe
 80100ac:	f890 00bc 	ldrb.w	r0, [r0, #188]	@ 0xbc
 80100b0:	4798      	blx	r3
 80100b2:	4b65      	ldr	r3, [pc, #404]	@ (8010248 <gc_execute_block+0x30cc>)
 80100b4:	6518      	str	r0, [r3, #80]	@ 0x50
                system_add_rt_report(Report_M66Result);
 80100b6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80100ba:	f011 fb83 	bl	80217c4 <system_add_rt_report>
                break;
 80100be:	e784      	b.n	800ffca <gc_execute_block+0x2e4e>
                add_output_command(&gc_block.output_command);
 80100c0:	485d      	ldr	r0, [pc, #372]	@ (8010238 <gc_execute_block+0x30bc>)
 80100c2:	f7fc fd51 	bl	800cb68 <add_output_command>
                break;
 80100c6:	e780      	b.n	800ffca <gc_execute_block+0x2e4e>
                hal.port.analog_out(gc_block.output_command.port, gc_block.output_command.value);
 80100c8:	4b5e      	ldr	r3, [pc, #376]	@ (8010244 <gc_execute_block+0x30c8>)
 80100ca:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80100ce:	4b5b      	ldr	r3, [pc, #364]	@ (801023c <gc_execute_block+0x30c0>)
 80100d0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80100d4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80100d8:	f893 00be 	ldrb.w	r0, [r3, #190]	@ 0xbe
 80100dc:	4790      	blx	r2
                break;
 80100de:	e774      	b.n	800ffca <gc_execute_block+0x2e4e>
        tool_data_t *pending_tool = tool_get_pending(gc_state.tool_pending);
 80100e0:	4b54      	ldr	r3, [pc, #336]	@ (8010234 <gc_execute_block+0x30b8>)
 80100e2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80100e4:	f7fc fcfe 	bl	800cae4 <tool_get_pending>
 80100e8:	4606      	mov	r6, r0
        protocol_buffer_synchronize();
 80100ea:	f007 fb13 	bl	8017714 <protocol_buffer_synchronize>
        if(plan_data.message) {
 80100ee:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80100f0:	b118      	cbz	r0, 80100fa <gc_execute_block+0x2f7e>
            gc_output_message(plan_data.message);
 80100f2:	f7fc ff2d 	bl	800cf50 <gc_output_message>
            plan_data.message = NULL;
 80100f6:	2300      	movs	r3, #0
 80100f8:	931c      	str	r3, [sp, #112]	@ 0x70
        if(pending_tool->tool_id != gc_state.tool->tool_id) {
 80100fa:	6932      	ldr	r2, [r6, #16]
 80100fc:	4b4d      	ldr	r3, [pc, #308]	@ (8010234 <gc_execute_block+0x30b8>)
 80100fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010102:	691b      	ldr	r3, [r3, #16]
 8010104:	429a      	cmp	r2, r3
 8010106:	f43f af68 	beq.w	800ffda <gc_execute_block+0x2e5e>
            if(grbl.on_tool_selected) {
 801010a:	4b4d      	ldr	r3, [pc, #308]	@ (8010240 <gc_execute_block+0x30c4>)
 801010c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010110:	b15b      	cbz	r3, 801012a <gc_execute_block+0x2fae>
                spindle_state_t state = gc_state.modal.spindle.state;
 8010112:	4f48      	ldr	r7, [pc, #288]	@ (8010234 <gc_execute_block+0x30b8>)
 8010114:	7ebc      	ldrb	r4, [r7, #26]
                grbl.on_tool_selected(pending_tool);
 8010116:	4630      	mov	r0, r6
 8010118:	4798      	blx	r3
                if(state.value != gc_state.modal.spindle.state.value)
 801011a:	b2e4      	uxtb	r4, r4
 801011c:	7ebb      	ldrb	r3, [r7, #26]
 801011e:	429c      	cmp	r4, r3
 8010120:	d003      	beq.n	801012a <gc_execute_block+0x2fae>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 8010122:	7eba      	ldrb	r2, [r7, #26]
 8010124:	4b45      	ldr	r3, [pc, #276]	@ (801023c <gc_execute_block+0x30c0>)
 8010126:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            if(hal.tool.change) { // ATC
 801012a:	4b46      	ldr	r3, [pc, #280]	@ (8010244 <gc_execute_block+0x30c8>)
 801012c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010130:	b313      	cbz	r3, 8010178 <gc_execute_block+0x2ffc>
                if((int_value = (uint_fast16_t)hal.tool.change(&gc_state)) != Status_OK) {
 8010132:	4840      	ldr	r0, [pc, #256]	@ (8010234 <gc_execute_block+0x30b8>)
 8010134:	4798      	blx	r3
 8010136:	4604      	mov	r4, r0
 8010138:	2800      	cmp	r0, #0
 801013a:	f47d a8fc 	bne.w	800d336 <gc_execute_block+0x1ba>
                system_add_rt_report(Report_Tool);
 801013e:	2080      	movs	r0, #128	@ 0x80
 8010140:	f011 fb40 	bl	80217c4 <system_add_rt_report>
    if(grbl.tool_table.n_tools)
 8010144:	4b3e      	ldr	r3, [pc, #248]	@ (8010240 <gc_execute_block+0x30c4>)
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	b31b      	cbz	r3, 8010192 <gc_execute_block+0x3016>
        gc_state.tool = tool;
 801014a:	4b3a      	ldr	r3, [pc, #232]	@ (8010234 <gc_execute_block+0x30b8>)
 801014c:	f8c3 60d0 	str.w	r6, [r3, #208]	@ 0xd0
            if(grbl.on_tool_changed && state_get() != STATE_TOOL_CHANGE)
 8010150:	4b3b      	ldr	r3, [pc, #236]	@ (8010240 <gc_execute_block+0x30c4>)
 8010152:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010156:	2b00      	cmp	r3, #0
 8010158:	f43f af3f 	beq.w	800ffda <gc_execute_block+0x2e5e>
 801015c:	f00e fb74 	bl	801e848 <state_get>
 8010160:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010164:	f43f af39 	beq.w	800ffda <gc_execute_block+0x2e5e>
                grbl.on_tool_changed(gc_state.tool);
 8010168:	4b35      	ldr	r3, [pc, #212]	@ (8010240 <gc_execute_block+0x30c4>)
 801016a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801016e:	4a31      	ldr	r2, [pc, #196]	@ (8010234 <gc_execute_block+0x30b8>)
 8010170:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 8010174:	4798      	blx	r3
 8010176:	e730      	b.n	800ffda <gc_execute_block+0x2e5e>
                gc_state.tool_change = true;
 8010178:	4b2e      	ldr	r3, [pc, #184]	@ (8010234 <gc_execute_block+0x30b8>)
 801017a:	2201      	movs	r2, #1
 801017c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 8010180:	4b30      	ldr	r3, [pc, #192]	@ (8010244 <gc_execute_block+0x30c8>)
 8010182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010184:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010188:	4830      	ldr	r0, [pc, #192]	@ (801024c <gc_execute_block+0x30d0>)
 801018a:	4798      	blx	r3
                protocol_execute_realtime();                    // Execute...
 801018c:	f006 fff4 	bl	8017178 <protocol_execute_realtime>
 8010190:	e7d8      	b.n	8010144 <gc_execute_block+0x2fc8>
        gc_state.tool->tool_id = tool->tool_id;
 8010192:	4b28      	ldr	r3, [pc, #160]	@ (8010234 <gc_execute_block+0x30b8>)
 8010194:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010198:	6932      	ldr	r2, [r6, #16]
 801019a:	611a      	str	r2, [r3, #16]
 801019c:	e7d8      	b.n	8010150 <gc_execute_block+0x2fd4>
                gc_block.spindle->param->state = gc_block.modal.spindle.state;
 801019e:	4a27      	ldr	r2, [pc, #156]	@ (801023c <gc_execute_block+0x30c0>)
 80101a0:	f8d2 10cc 	ldr.w	r1, [r2, #204]	@ 0xcc
 80101a4:	6849      	ldr	r1, [r1, #4]
 80101a6:	f892 0022 	ldrb.w	r0, [r2, #34]	@ 0x22
 80101aa:	7208      	strb	r0, [r1, #8]
        if(!(spindle_event = !spindle_ok))
 80101ac:	f083 0301 	eor.w	r3, r3, #1
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	9308      	str	r3, [sp, #32]
            gc_state.modal.spindle.state = gc_block.modal.spindle.state;
 80101b4:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 80101b8:	4b1e      	ldr	r3, [pc, #120]	@ (8010234 <gc_execute_block+0x30b8>)
 80101ba:	769a      	strb	r2, [r3, #26]
 80101bc:	e736      	b.n	801002c <gc_execute_block+0x2eb0>
                if(spindle_is_enabled(--idx)) {
 80101be:	2000      	movs	r0, #0
 80101c0:	f00d fe9c 	bl	801defc <spindle_is_enabled>
 80101c4:	9008      	str	r0, [sp, #32]
 80101c6:	b910      	cbnz	r0, 80101ce <gc_execute_block+0x3052>
        if(!(spindle_event = !spindle_ok))
 80101c8:	2301      	movs	r3, #1
 80101ca:	9308      	str	r3, [sp, #32]
 80101cc:	e72e      	b.n	801002c <gc_execute_block+0x2eb0>
                    spindle_ptrs_t *spindle = spindle_get(idx);
 80101ce:	2000      	movs	r0, #0
 80101d0:	f00d feaa 	bl	801df28 <spindle_get>
 80101d4:	4604      	mov	r4, r0
                    if(grbl.on_spindle_programmed)
 80101d6:	4b1a      	ldr	r3, [pc, #104]	@ (8010240 <gc_execute_block+0x30c4>)
 80101d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101da:	b13b      	cbz	r3, 80101ec <gc_execute_block+0x3070>
                        grbl.on_spindle_programmed(spindle, gc_block.modal.spindle.state,  plan_data.spindle.rpm, gc_block.modal.spindle.rpm_mode);
 80101dc:	4917      	ldr	r1, [pc, #92]	@ (801023c <gc_execute_block+0x30c0>)
 80101de:	f891 2023 	ldrb.w	r2, [r1, #35]	@ 0x23
 80101e2:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80101e6:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 80101ea:	4798      	blx	r3
                    if(spindle_sync(spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm))
 80101ec:	ed9d 0a15 	vldr	s0, [sp, #84]	@ 0x54
 80101f0:	4b12      	ldr	r3, [pc, #72]	@ (801023c <gc_execute_block+0x30c0>)
 80101f2:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 80101f6:	4620      	mov	r0, r4
 80101f8:	f00d fff8 	bl	801e1ec <spindle_sync>
 80101fc:	2800      	cmp	r0, #0
 80101fe:	f43f af15 	beq.w	801002c <gc_execute_block+0x2eb0>
                        spindle->param->state = gc_block.modal.spindle.state;
 8010202:	6862      	ldr	r2, [r4, #4]
 8010204:	490d      	ldr	r1, [pc, #52]	@ (801023c <gc_execute_block+0x30c0>)
 8010206:	f891 1022 	ldrb.w	r1, [r1, #34]	@ 0x22
 801020a:	7211      	strb	r1, [r2, #8]
        if(!(spindle_event = !spindle_ok))
 801020c:	9008      	str	r0, [sp, #32]
 801020e:	e70d      	b.n	801002c <gc_execute_block+0x2eb0>
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 8010210:	2300      	movs	r3, #0
 8010212:	f89d 2065 	ldrb.w	r2, [sp, #101]	@ 0x65
 8010216:	f363 0200 	bfi	r2, r3, #0, #1
 801021a:	f88d 2065 	strb.w	r2, [sp, #101]	@ 0x65
    switch(gc_block.state_action) {
 801021e:	4b07      	ldr	r3, [pc, #28]	@ (801023c <gc_execute_block+0x30c0>)
 8010220:	f893 10d0 	ldrb.w	r1, [r3, #208]	@ 0xd0
 8010224:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 8010228:	2b03      	cmp	r3, #3
 801022a:	d822      	bhi.n	8010272 <gc_execute_block+0x30f6>
 801022c:	e8df f003 	tbb	[pc, r3]
 8010230:	10851f10 	.word	0x10851f10
 8010234:	20000ef8 	.word	0x20000ef8
 8010238:	20000eac 	.word	0x20000eac
 801023c:	20000df0 	.word	0x20000df0
 8010240:	200013a8 	.word	0x200013a8
 8010244:	200011c0 	.word	0x200011c0
 8010248:	200014a0 	.word	0x200014a0
 801024c:	200014e8 	.word	0x200014e8
            gc_state.modal.rpm = gc_state.spindle.rpm;
 8010250:	48b1      	ldr	r0, [pc, #708]	@ (8010518 <gc_execute_block+0x339c>)
 8010252:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010254:	6303      	str	r3, [r0, #48]	@ 0x30
            gc_state.modal.feed_rate = gc_state.feed_rate;
 8010256:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8010258:	62c3      	str	r3, [r0, #44]	@ 0x2c
            if(!ngc_modal_state_save(&gc_state.modal, gc_block.state_action == ModalState_SaveAutoRestore))
 801025a:	2949      	cmp	r1, #73	@ 0x49
 801025c:	bf14      	ite	ne
 801025e:	2100      	movne	r1, #0
 8010260:	2101      	moveq	r1, #1
 8010262:	f004 fdbf 	bl	8014de4 <ngc_modal_state_save>
 8010266:	b920      	cbnz	r0, 8010272 <gc_execute_block+0x30f6>
                FAIL(Status_FlowControlOutOfMemory); // [Out of memory] TODO: allocate memory during validation? Static allocation?
 8010268:	2453      	movs	r4, #83	@ 0x53
 801026a:	f7fd b864 	b.w	800d336 <gc_execute_block+0x1ba>
            ngc_modal_state_invalidate();
 801026e:	f004 fdf1 	bl	8014e54 <ngc_modal_state_invalidate>
    if (gc_parser_flags.set_coolant && gc_state.modal.coolant.value != gc_block.modal.coolant.value) {
 8010272:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010276:	d006      	beq.n	8010286 <gc_execute_block+0x310a>
 8010278:	4ba7      	ldr	r3, [pc, #668]	@ (8010518 <gc_execute_block+0x339c>)
 801027a:	7e5a      	ldrb	r2, [r3, #25]
 801027c:	4ba7      	ldr	r3, [pc, #668]	@ (801051c <gc_execute_block+0x33a0>)
 801027e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010282:	429a      	cmp	r2, r3
 8010284:	d15c      	bne.n	8010340 <gc_execute_block+0x31c4>
    plan_data.condition.coolant = gc_state.modal.coolant; // Set condition flag for planner use.
 8010286:	4ba4      	ldr	r3, [pc, #656]	@ (8010518 <gc_execute_block+0x339c>)
 8010288:	7e5a      	ldrb	r2, [r3, #25]
 801028a:	f88d 2066 	strb.w	r2, [sp, #102]	@ 0x66
    sys.override_delay.flags = 0;
 801028e:	4aa4      	ldr	r2, [pc, #656]	@ (8010520 <gc_execute_block+0x33a4>)
 8010290:	2100      	movs	r1, #0
 8010292:	f882 102c 	strb.w	r1, [r2, #44]	@ 0x2c
    if (gc_state.modal.override_ctrl.value != gc_block.modal.override_ctrl.value) {
 8010296:	7f1a      	ldrb	r2, [r3, #28]
 8010298:	4ba0      	ldr	r3, [pc, #640]	@ (801051c <gc_execute_block+0x33a0>)
 801029a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801029e:	429a      	cmp	r2, r3
 80102a0:	d01e      	beq.n	80102e0 <gc_execute_block+0x3164>
        gc_state.modal.override_ctrl = gc_block.modal.override_ctrl;
 80102a2:	4a9d      	ldr	r2, [pc, #628]	@ (8010518 <gc_execute_block+0x339c>)
 80102a4:	4b9d      	ldr	r3, [pc, #628]	@ (801051c <gc_execute_block+0x33a0>)
 80102a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80102aa:	7713      	strb	r3, [r2, #28]
        gc_state.modal.spindle.state.override_disable = gc_state.spindle.hal->param->state.override_disable = gc_state.modal.override_ctrl.spindle_rpm_disable;
 80102ac:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80102ae:	6859      	ldr	r1, [r3, #4]
 80102b0:	7f13      	ldrb	r3, [r2, #28]
 80102b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80102b6:	7a08      	ldrb	r0, [r1, #8]
 80102b8:	f363 1004 	bfi	r0, r3, #4, #1
 80102bc:	7208      	strb	r0, [r1, #8]
 80102be:	7e91      	ldrb	r1, [r2, #26]
 80102c0:	f363 1104 	bfi	r1, r3, #4, #1
 80102c4:	7691      	strb	r1, [r2, #26]
        if(gc_state.modal.override_ctrl.feed_rate_disable)
 80102c6:	7f13      	ldrb	r3, [r2, #28]
 80102c8:	f013 0f01 	tst.w	r3, #1
 80102cc:	d145      	bne.n	801035a <gc_execute_block+0x31de>
        if(gc_state.modal.override_ctrl.spindle_rpm_disable)
 80102ce:	4b92      	ldr	r3, [pc, #584]	@ (8010518 <gc_execute_block+0x339c>)
 80102d0:	7f1b      	ldrb	r3, [r3, #28]
 80102d2:	f013 0f04 	tst.w	r3, #4
 80102d6:	d145      	bne.n	8010364 <gc_execute_block+0x31e8>
        mc_override_ctrl_update(gc_state.modal.override_ctrl); // NOTE: must be called last!
 80102d8:	4b8f      	ldr	r3, [pc, #572]	@ (8010518 <gc_execute_block+0x339c>)
 80102da:	7f18      	ldrb	r0, [r3, #28]
 80102dc:	f004 f972 	bl	80145c4 <mc_override_ctrl_update>
    if(gc_block.user_mcode && !check_mode) {
 80102e0:	4b8e      	ldr	r3, [pc, #568]	@ (801051c <gc_execute_block+0x33a0>)
 80102e2:	885b      	ldrh	r3, [r3, #2]
 80102e4:	b1a3      	cbz	r3, 8010310 <gc_execute_block+0x3194>
 80102e6:	2d02      	cmp	r5, #2
 80102e8:	d012      	beq.n	8010310 <gc_execute_block+0x3194>
        if(gc_block.user_mcode_sync)
 80102ea:	4b8c      	ldr	r3, [pc, #560]	@ (801051c <gc_execute_block+0x33a0>)
 80102ec:	791b      	ldrb	r3, [r3, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d13e      	bne.n	8010370 <gc_execute_block+0x31f4>
        gc_block.words.mask = user_words.mask;
 80102f2:	4b8c      	ldr	r3, [pc, #560]	@ (8010524 <gc_execute_block+0x33a8>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4c89      	ldr	r4, [pc, #548]	@ (801051c <gc_execute_block+0x33a0>)
 80102f8:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
        hal.user_mcode.execute(state_get(), &gc_block);
 80102fc:	4b8a      	ldr	r3, [pc, #552]	@ (8010528 <gc_execute_block+0x33ac>)
 80102fe:	f8d3 61c0 	ldr.w	r6, [r3, #448]	@ 0x1c0
 8010302:	f00e faa1 	bl	801e848 <state_get>
 8010306:	4621      	mov	r1, r4
 8010308:	47b0      	blx	r6
        gc_block.words.mask = 0;
 801030a:	2300      	movs	r3, #0
 801030c:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
    if (gc_block.non_modal_command == NonModal_Dwell)
 8010310:	4b82      	ldr	r3, [pc, #520]	@ (801051c <gc_execute_block+0x33a0>)
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	2b04      	cmp	r3, #4
 8010316:	d02e      	beq.n	8010376 <gc_execute_block+0x31fa>
    gc_state.modal.plane_select = gc_block.modal.plane_select;
 8010318:	4a80      	ldr	r2, [pc, #512]	@ (801051c <gc_execute_block+0x33a0>)
 801031a:	7b91      	ldrb	r1, [r2, #14]
 801031c:	4b7e      	ldr	r3, [pc, #504]	@ (8010518 <gc_execute_block+0x339c>)
 801031e:	7199      	strb	r1, [r3, #6]
    gc_state.modal.units_imperial = gc_block.modal.units_imperial;
 8010320:	7ad2      	ldrb	r2, [r2, #11]
 8010322:	70da      	strb	r2, [r3, #3]
    if (command_words.G8) { // Indicates a change.
 8010324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010326:	2b00      	cmp	r3, #0
 8010328:	f000 80b0 	beq.w	801048c <gc_execute_block+0x3310>
        gc_state.modal.tool_offset_mode = gc_block.modal.tool_offset_mode;
 801032c:	4b7b      	ldr	r3, [pc, #492]	@ (801051c <gc_execute_block+0x33a0>)
 801032e:	7bd8      	ldrb	r0, [r3, #15]
 8010330:	4b79      	ldr	r3, [pc, #484]	@ (8010518 <gc_execute_block+0x339c>)
 8010332:	71d8      	strb	r0, [r3, #7]
        bool tlo_changed = false;
 8010334:	2200      	movs	r2, #0
        idx = N_AXIS;
 8010336:	2303      	movs	r3, #3
 8010338:	e035      	b.n	80103a6 <gc_execute_block+0x322a>
            ngc_modal_state_restore();
 801033a:	f004 fda7 	bl	8014e8c <ngc_modal_state_restore>
            break;
 801033e:	e798      	b.n	8010272 <gc_execute_block+0x30f6>
        if(coolant_sync(gc_block.modal.coolant))
 8010340:	4b76      	ldr	r3, [pc, #472]	@ (801051c <gc_execute_block+0x33a0>)
 8010342:	f893 0021 	ldrb.w	r0, [r3, #33]	@ 0x21
 8010346:	f7fc fa97 	bl	800c878 <coolant_sync>
 801034a:	2800      	cmp	r0, #0
 801034c:	d09b      	beq.n	8010286 <gc_execute_block+0x310a>
            gc_state.modal.coolant = gc_block.modal.coolant;
 801034e:	4b73      	ldr	r3, [pc, #460]	@ (801051c <gc_execute_block+0x33a0>)
 8010350:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8010354:	4b70      	ldr	r3, [pc, #448]	@ (8010518 <gc_execute_block+0x339c>)
 8010356:	765a      	strb	r2, [r3, #25]
 8010358:	e795      	b.n	8010286 <gc_execute_block+0x310a>
            plan_feed_override(0, 0);
 801035a:	2100      	movs	r1, #0
 801035c:	4608      	mov	r0, r1
 801035e:	f006 fa05 	bl	801676c <plan_feed_override>
 8010362:	e7b4      	b.n	80102ce <gc_execute_block+0x3152>
            spindle_set_override(gc_state.spindle.hal, DEFAULT_SPINDLE_RPM_OVERRIDE);
 8010364:	2164      	movs	r1, #100	@ 0x64
 8010366:	4b6c      	ldr	r3, [pc, #432]	@ (8010518 <gc_execute_block+0x339c>)
 8010368:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 801036a:	f00d ffa3 	bl	801e2b4 <spindle_set_override>
 801036e:	e7b3      	b.n	80102d8 <gc_execute_block+0x315c>
            protocol_buffer_synchronize(); // Ensure user defined mcode is executed when specified in program.
 8010370:	f007 f9d0 	bl	8017714 <protocol_buffer_synchronize>
 8010374:	e7bd      	b.n	80102f2 <gc_execute_block+0x3176>
        mc_dwell(gc_block.values.p);
 8010376:	4b69      	ldr	r3, [pc, #420]	@ (801051c <gc_execute_block+0x33a0>)
 8010378:	ed93 0a17 	vldr	s0, [r3, #92]	@ 0x5c
 801037c:	f003 fec6 	bl	801410c <mc_dwell>
 8010380:	e7ca      	b.n	8010318 <gc_execute_block+0x319c>
                    tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 8010382:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010386:	4964      	ldr	r1, [pc, #400]	@ (8010518 <gc_execute_block+0x339c>)
 8010388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801038c:	edd1 7a01 	vldr	s15, [r1, #4]
 8010390:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010398:	bf18      	it	ne
 801039a:	f042 0201 	orrne.w	r2, r2, #1
                    gc_state.tool_length_offset[idx] = 0.0f;
 801039e:	2400      	movs	r4, #0
 80103a0:	604c      	str	r4, [r1, #4]
        } while(idx);
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d070      	beq.n	8010488 <gc_execute_block+0x330c>
            idx--;
 80103a6:	3b01      	subs	r3, #1
            switch(gc_state.modal.tool_offset_mode) {
 80103a8:	2803      	cmp	r0, #3
 80103aa:	d8fa      	bhi.n	80103a2 <gc_execute_block+0x3226>
 80103ac:	a101      	add	r1, pc, #4	@ (adr r1, 80103b4 <gc_execute_block+0x3238>)
 80103ae:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80103b2:	bf00      	nop
 80103b4:	08010383 	.word	0x08010383
 80103b8:	080103c5 	.word	0x080103c5
 80103bc:	08010445 	.word	0x08010445
 80103c0:	08010407 	.word	0x08010407
                    if (gc_state.tool_length_offset[idx] != grbl.tool_table.tool[gc_block.values.h].offset[idx]) {
 80103c4:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80103c8:	4953      	ldr	r1, [pc, #332]	@ (8010518 <gc_execute_block+0x339c>)
 80103ca:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80103ce:	ed91 7a01 	vldr	s14, [r1, #4]
 80103d2:	4956      	ldr	r1, [pc, #344]	@ (801052c <gc_execute_block+0x33b0>)
 80103d4:	69c9      	ldr	r1, [r1, #28]
 80103d6:	4c51      	ldr	r4, [pc, #324]	@ (801051c <gc_execute_block+0x33a0>)
 80103d8:	f8d4 40ac 	ldr.w	r4, [r4, #172]	@ 0xac
 80103dc:	2614      	movs	r6, #20
 80103de:	fb06 1104 	mla	r1, r6, r4, r1
 80103e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80103e6:	edd1 7a00 	vldr	s15, [r1]
 80103ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80103ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f2:	d0d6      	beq.n	80103a2 <gc_execute_block+0x3226>
                        gc_state.tool_length_offset[idx] = grbl.tool_table.tool[gc_block.values.h].offset[idx];
 80103f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80103f8:	4a47      	ldr	r2, [pc, #284]	@ (8010518 <gc_execute_block+0x339c>)
 80103fa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80103fe:	edc2 7a01 	vstr	s15, [r2, #4]
                        tlo_changed = true;
 8010402:	2201      	movs	r2, #1
 8010404:	e7cd      	b.n	80103a2 <gc_execute_block+0x3226>
                    tlo_changed |= grbl.tool_table.tool[gc_block.values.h].offset[idx] != 0.0f;
 8010406:	4949      	ldr	r1, [pc, #292]	@ (801052c <gc_execute_block+0x33b0>)
 8010408:	69c9      	ldr	r1, [r1, #28]
 801040a:	4c44      	ldr	r4, [pc, #272]	@ (801051c <gc_execute_block+0x33a0>)
 801040c:	f8d4 40ac 	ldr.w	r4, [r4, #172]	@ 0xac
 8010410:	2614      	movs	r6, #20
 8010412:	fb06 1104 	mla	r1, r6, r4, r1
 8010416:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801041a:	edd1 7a00 	vldr	s15, [r1]
 801041e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010426:	bf18      	it	ne
 8010428:	f042 0201 	orrne.w	r2, r2, #1
                    gc_state.tool_length_offset[idx] += grbl.tool_table.tool[gc_block.values.h].offset[idx];
 801042c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010430:	4939      	ldr	r1, [pc, #228]	@ (8010518 <gc_execute_block+0x339c>)
 8010432:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010436:	ed91 7a01 	vldr	s14, [r1, #4]
 801043a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801043e:	edc1 7a01 	vstr	s15, [r1, #4]
                    break;
 8010442:	e7ae      	b.n	80103a2 <gc_execute_block+0x3226>
                    if (bit_istrue(axis_words.mask, bit(idx)) && gc_state.tool_length_offset[idx] != gc_block.values.xyz[idx]) {
 8010444:	fa5f f18b 	uxtb.w	r1, fp
 8010448:	40d9      	lsrs	r1, r3
 801044a:	f011 0f01 	tst.w	r1, #1
 801044e:	d0a8      	beq.n	80103a2 <gc_execute_block+0x3226>
 8010450:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8010454:	4930      	ldr	r1, [pc, #192]	@ (8010518 <gc_execute_block+0x339c>)
 8010456:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801045a:	ed91 7a01 	vldr	s14, [r1, #4]
 801045e:	f103 0420 	add.w	r4, r3, #32
 8010462:	492e      	ldr	r1, [pc, #184]	@ (801051c <gc_execute_block+0x33a0>)
 8010464:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010468:	edd1 7a01 	vldr	s15, [r1, #4]
 801046c:	eeb4 7a67 	vcmp.f32	s14, s15
 8010470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010474:	d095      	beq.n	80103a2 <gc_execute_block+0x3226>
                        gc_state.tool_length_offset[idx] = gc_block.values.xyz[idx];
 8010476:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801047a:	4a27      	ldr	r2, [pc, #156]	@ (8010518 <gc_execute_block+0x339c>)
 801047c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010480:	edc2 7a01 	vstr	s15, [r2, #4]
                        tlo_changed = true;
 8010484:	2201      	movs	r2, #1
 8010486:	e78c      	b.n	80103a2 <gc_execute_block+0x3226>
        if(tlo_changed) {
 8010488:	2a00      	cmp	r2, #0
 801048a:	d132      	bne.n	80104f2 <gc_execute_block+0x3376>
    if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id) {
 801048c:	4b22      	ldr	r3, [pc, #136]	@ (8010518 <gc_execute_block+0x339c>)
 801048e:	7d1a      	ldrb	r2, [r3, #20]
 8010490:	4b22      	ldr	r3, [pc, #136]	@ (801051c <gc_execute_block+0x33a0>)
 8010492:	7f1b      	ldrb	r3, [r3, #28]
 8010494:	429a      	cmp	r2, r3
 8010496:	d133      	bne.n	8010500 <gc_execute_block+0x3384>
    gc_state.modal.distance_incremental = gc_block.modal.distance_incremental;
 8010498:	4b20      	ldr	r3, [pc, #128]	@ (801051c <gc_execute_block+0x33a0>)
 801049a:	7b19      	ldrb	r1, [r3, #12]
 801049c:	4a1e      	ldr	r2, [pc, #120]	@ (8010518 <gc_execute_block+0x339c>)
 801049e:	7111      	strb	r1, [r2, #4]
    gc_state.modal.retract_mode = gc_block.modal.retract_mode;
 80104a0:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 80104a4:	7751      	strb	r1, [r2, #29]
    switch(gc_block.non_modal_command) {
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	2b41      	cmp	r3, #65	@ 0x41
 80104aa:	d872      	bhi.n	8010592 <gc_execute_block+0x3416>
 80104ac:	2b1c      	cmp	r3, #28
 80104ae:	d245      	bcs.n	801053c <gc_execute_block+0x33c0>
 80104b0:	2b0a      	cmp	r3, #10
 80104b2:	f040 80ae 	bne.w	8010612 <gc_execute_block+0x3496>
            if(gc_block.values.l == 2 || gc_block.values.l == 20) {
 80104b6:	4b19      	ldr	r3, [pc, #100]	@ (801051c <gc_execute_block+0x33a0>)
 80104b8:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80104bc:	2b02      	cmp	r3, #2
 80104be:	d002      	beq.n	80104c6 <gc_execute_block+0x334a>
 80104c0:	2b14      	cmp	r3, #20
 80104c2:	f040 80a6 	bne.w	8010612 <gc_execute_block+0x3496>
                settings_write_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz);
 80104c6:	491a      	ldr	r1, [pc, #104]	@ (8010530 <gc_execute_block+0x33b4>)
 80104c8:	f1a1 0490 	sub.w	r4, r1, #144	@ 0x90
 80104cc:	7b08      	ldrb	r0, [r1, #12]
 80104ce:	f00c fd3d 	bl	801cf4c <settings_write_coord_data>
                if (gc_state.modal.coord_system.id == gc_block.values.coord_data.id) {
 80104d2:	4b11      	ldr	r3, [pc, #68]	@ (8010518 <gc_execute_block+0x339c>)
 80104d4:	7d1a      	ldrb	r2, [r3, #20]
 80104d6:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 80104da:	429a      	cmp	r2, r3
 80104dc:	f040 8099 	bne.w	8010612 <gc_execute_block+0x3496>
                    memcpy(gc_state.modal.coord_system.xyz, gc_block.values.coord_data.xyz, sizeof(gc_state.modal.coord_system.xyz));
 80104e0:	4b14      	ldr	r3, [pc, #80]	@ (8010534 <gc_execute_block+0x33b8>)
 80104e2:	f104 0290 	add.w	r2, r4, #144	@ 0x90
 80104e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80104e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    system_flag_wco_change();
 80104ec:	f011 f9f6 	bl	80218dc <system_flag_wco_change>
 80104f0:	e08f      	b.n	8010612 <gc_execute_block+0x3496>
            system_add_rt_report(Report_ToolOffset);
 80104f2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80104f6:	f011 f965 	bl	80217c4 <system_add_rt_report>
            system_flag_wco_change();
 80104fa:	f011 f9ef 	bl	80218dc <system_flag_wco_change>
 80104fe:	e7c5      	b.n	801048c <gc_execute_block+0x3310>
        memcpy(&gc_state.modal.coord_system, &gc_block.modal.coord_system, sizeof(gc_state.modal.coord_system));
 8010500:	4c0c      	ldr	r4, [pc, #48]	@ (8010534 <gc_execute_block+0x33b8>)
 8010502:	4b0d      	ldr	r3, [pc, #52]	@ (8010538 <gc_execute_block+0x33bc>)
 8010504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        system_add_rt_report(Report_GWCO);
 801050a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801050e:	f011 f959 	bl	80217c4 <system_add_rt_report>
        system_flag_wco_change();
 8010512:	f011 f9e3 	bl	80218dc <system_flag_wco_change>
 8010516:	e7bf      	b.n	8010498 <gc_execute_block+0x331c>
 8010518:	20000ef8 	.word	0x20000ef8
 801051c:	20000df0 	.word	0x20000df0
 8010520:	200014a0 	.word	0x200014a0
 8010524:	20000dec 	.word	0x20000dec
 8010528:	200011c0 	.word	0x200011c0
 801052c:	200013a8 	.word	0x200013a8
 8010530:	20000e80 	.word	0x20000e80
 8010534:	20000f00 	.word	0x20000f00
 8010538:	20000e00 	.word	0x20000e00
    switch(gc_block.non_modal_command) {
 801053c:	3b1c      	subs	r3, #28
 801053e:	2b25      	cmp	r3, #37	@ 0x25
 8010540:	d867      	bhi.n	8010612 <gc_execute_block+0x3496>
 8010542:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010546:	004e      	.short	0x004e
 8010548:	004e0066 	.word	0x004e0066
 801054c:	00660066 	.word	0x00660066
 8010550:	00660066 	.word	0x00660066
 8010554:	00660066 	.word	0x00660066
 8010558:	01010066 	.word	0x01010066
 801055c:	01060066 	.word	0x01060066
 8010560:	00660066 	.word	0x00660066
 8010564:	00660066 	.word	0x00660066
 8010568:	00660066 	.word	0x00660066
 801056c:	00660066 	.word	0x00660066
 8010570:	00660066 	.word	0x00660066
 8010574:	00660066 	.word	0x00660066
 8010578:	00660066 	.word	0x00660066
 801057c:	00660066 	.word	0x00660066
 8010580:	00660066 	.word	0x00660066
 8010584:	00660066 	.word	0x00660066
 8010588:	00660066 	.word	0x00660066
 801058c:	00660066 	.word	0x00660066
 8010590:	010b      	.short	0x010b
 8010592:	2b7a      	cmp	r3, #122	@ 0x7a
 8010594:	d83d      	bhi.n	8010612 <gc_execute_block+0x3496>
 8010596:	2b5c      	cmp	r3, #92	@ 0x5c
 8010598:	d33b      	bcc.n	8010612 <gc_execute_block+0x3496>
 801059a:	3b5c      	subs	r3, #92	@ 0x5c
 801059c:	2b1e      	cmp	r3, #30
 801059e:	d838      	bhi.n	8010612 <gc_execute_block+0x3496>
 80105a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80105a4:	003700fb 	.word	0x003700fb
 80105a8:	00370037 	.word	0x00370037
 80105ac:	00370037 	.word	0x00370037
 80105b0:	00370037 	.word	0x00370037
 80105b4:	00370037 	.word	0x00370037
 80105b8:	00370112 	.word	0x00370112
 80105bc:	00370037 	.word	0x00370037
 80105c0:	00370037 	.word	0x00370037
 80105c4:	00370037 	.word	0x00370037
 80105c8:	00370037 	.word	0x00370037
 80105cc:	0037012b 	.word	0x0037012b
 80105d0:	00370037 	.word	0x00370037
 80105d4:	00370037 	.word	0x00370037
 80105d8:	00370037 	.word	0x00370037
 80105dc:	00370037 	.word	0x00370037
 80105e0:	0138      	.short	0x0138
            plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 80105e2:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80105e6:	f043 0301 	orr.w	r3, r3, #1
 80105ea:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
            if(axis_command)
 80105ee:	f1ba 0f00 	cmp.w	sl, #0
 80105f2:	f040 80a4 	bne.w	801073e <gc_execute_block+0x35c2>
            mc_line(gc_block.values.coord_data.xyz, &plan_data);
 80105f6:	4c8d      	ldr	r4, [pc, #564]	@ (801082c <gc_execute_block+0x36b0>)
 80105f8:	a914      	add	r1, sp, #80	@ 0x50
 80105fa:	4620      	mov	r0, r4
 80105fc:	f002 ff8e 	bl	801351c <mc_line>
            memcpy(gc_state.position, gc_block.values.coord_data.xyz, sizeof(gc_state.position));
 8010600:	4b8b      	ldr	r3, [pc, #556]	@ (8010830 <gc_execute_block+0x36b4>)
 8010602:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010606:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            set_scaling(1.0f);
 801060a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801060e:	f7fc faeb 	bl	800cbe8 <set_scaling>
    gc_state.modal.motion = gc_block.modal.motion;
 8010612:	4a88      	ldr	r2, [pc, #544]	@ (8010834 <gc_execute_block+0x36b8>)
 8010614:	8910      	ldrh	r0, [r2, #8]
 8010616:	4b88      	ldr	r3, [pc, #544]	@ (8010838 <gc_execute_block+0x36bc>)
 8010618:	8018      	strh	r0, [r3, #0]
    gc_state.modal.canned_cycle_active = gc_block.modal.canned_cycle_active;
 801061a:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 801061e:	77da      	strb	r2, [r3, #31]
    if(gc_state.modal.motion != MotionMode_None && axis_command == AxisCommand_MotionMode) {
 8010620:	2850      	cmp	r0, #80	@ 0x50
 8010622:	d003      	beq.n	801062c <gc_execute_block+0x34b0>
 8010624:	f1ba 0f02 	cmp.w	sl, #2
 8010628:	f000 8118 	beq.w	801085c <gc_execute_block+0x36e0>
    if(plan_data.message)
 801062c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801062e:	b108      	cbz	r0, 8010634 <gc_execute_block+0x34b8>
        gc_output_message(plan_data.message);
 8010630:	f7fc fc8e 	bl	800cf50 <gc_output_message>
    gc_state.modal.program_flow = gc_block.modal.program_flow;
 8010634:	4b7f      	ldr	r3, [pc, #508]	@ (8010834 <gc_execute_block+0x36b8>)
 8010636:	f893 4020 	ldrb.w	r4, [r3, #32]
 801063a:	4b7f      	ldr	r3, [pc, #508]	@ (8010838 <gc_execute_block+0x36bc>)
 801063c:	761c      	strb	r4, [r3, #24]
    if(gc_state.modal.program_flow || sys.flags.single_block) {
 801063e:	b92c      	cbnz	r4, 801064c <gc_execute_block+0x34d0>
 8010640:	4b7e      	ldr	r3, [pc, #504]	@ (801083c <gc_execute_block+0x36c0>)
 8010642:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8010646:	2b00      	cmp	r3, #0
 8010648:	f6bc ae75 	bge.w	800d336 <gc_execute_block+0x1ba>
        protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 801064c:	f007 f862 	bl	8017714 <protocol_buffer_synchronize>
        if(gc_state.modal.program_flow == ProgramFlow_Return) {
 8010650:	4b79      	ldr	r3, [pc, #484]	@ (8010838 <gc_execute_block+0x36bc>)
 8010652:	7e1b      	ldrb	r3, [r3, #24]
 8010654:	2b63      	cmp	r3, #99	@ 0x63
 8010656:	f000 82d1 	beq.w	8010bfc <gc_execute_block+0x3a80>
        } else if(gc_state.modal.program_flow == ProgramFlow_Paused || gc_block.modal.program_flow == ProgramFlow_OptionalStop || gc_block.modal.program_flow == ProgramFlow_CompletedM60 || sys.flags.single_block) {
 801065a:	2b03      	cmp	r3, #3
 801065c:	f000 82d4 	beq.w	8010c08 <gc_execute_block+0x3a8c>
 8010660:	4b74      	ldr	r3, [pc, #464]	@ (8010834 <gc_execute_block+0x36b8>)
 8010662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010666:	2b01      	cmp	r3, #1
 8010668:	f000 82ce 	beq.w	8010c08 <gc_execute_block+0x3a8c>
 801066c:	2b3c      	cmp	r3, #60	@ 0x3c
 801066e:	f000 82cb 	beq.w	8010c08 <gc_execute_block+0x3a8c>
 8010672:	4a72      	ldr	r2, [pc, #456]	@ (801083c <gc_execute_block+0x36c0>)
 8010674:	f992 2016 	ldrsb.w	r2, [r2, #22]
 8010678:	2a00      	cmp	r2, #0
 801067a:	f2c0 82c5 	blt.w	8010c08 <gc_execute_block+0x3a8c>
            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 801067e:	2d02      	cmp	r5, #2
 8010680:	d002      	beq.n	8010688 <gc_execute_block+0x350c>
 8010682:	2b1e      	cmp	r3, #30
 8010684:	f000 82db 	beq.w	8010c3e <gc_execute_block+0x3ac2>
            gc_state.file_run = false;
 8010688:	4b6b      	ldr	r3, [pc, #428]	@ (8010838 <gc_execute_block+0x36bc>)
 801068a:	2200      	movs	r2, #0
 801068c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            gc_state.modal.motion = MotionMode_Linear;
 8010690:	2101      	movs	r1, #1
 8010692:	8019      	strh	r1, [r3, #0]
            gc_block.modal.canned_cycle_active = false;
 8010694:	4967      	ldr	r1, [pc, #412]	@ (8010834 <gc_execute_block+0x36b8>)
 8010696:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
            gc_state.modal.plane_select = PlaneSelect_XY;
 801069a:	719a      	strb	r2, [r3, #6]
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM; // NOTE: not compliant with linuxcnc (?)
 801069c:	76da      	strb	r2, [r3, #27]
            gc_state.modal.distance_incremental = false;
 801069e:	711a      	strb	r2, [r3, #4]
            gc_state.modal.feed_mode = FeedMode_UnitsPerMin;
 80106a0:	709a      	strb	r2, [r3, #2]
            if(gc_state.modal.coord_system.id != CoordinateSystem_G54) {
 80106a2:	7d1b      	ldrb	r3, [r3, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	f040 82d2 	bne.w	8010c4e <gc_execute_block+0x3ad2>
            gc_state.modal.spindle.state = (spindle_state_t){0};
 80106aa:	4b63      	ldr	r3, [pc, #396]	@ (8010838 <gc_execute_block+0x36bc>)
 80106ac:	2000      	movs	r0, #0
 80106ae:	7698      	strb	r0, [r3, #26]
            gc_state.modal.coolant = (coolant_state_t){0};
 80106b0:	7658      	strb	r0, [r3, #25]
            gc_state.modal.override_ctrl.feed_rate_disable = Off;
 80106b2:	7f1a      	ldrb	r2, [r3, #28]
 80106b4:	f360 0200 	bfi	r2, r0, #0, #1
 80106b8:	771a      	strb	r2, [r3, #28]
            gc_state.modal.override_ctrl.spindle_rpm_disable = Off;
 80106ba:	b2d2      	uxtb	r2, r2
 80106bc:	f360 0282 	bfi	r2, r0, #2, #1
 80106c0:	771a      	strb	r2, [r3, #28]
                if((spindle = spindle_get(--idx))) {
 80106c2:	f00d fc31 	bl	801df28 <spindle_get>
 80106c6:	b168      	cbz	r0, 80106e4 <gc_execute_block+0x3568>
                    spindle->param->state.override_disable = Off;
 80106c8:	6842      	ldr	r2, [r0, #4]
 80106ca:	7a11      	ldrb	r1, [r2, #8]
 80106cc:	f36f 1104 	bfc	r1, #4, #1
 80106d0:	7211      	strb	r1, [r2, #8]
                    if(settings.flags.restore_overrides)
 80106d2:	4a5b      	ldr	r2, [pc, #364]	@ (8010840 <gc_execute_block+0x36c4>)
 80106d4:	f892 20fe 	ldrb.w	r2, [r2, #254]	@ 0xfe
 80106d8:	f012 0f02 	tst.w	r2, #2
 80106dc:	d002      	beq.n	80106e4 <gc_execute_block+0x3568>
                        spindle->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 80106de:	6843      	ldr	r3, [r0, #4]
 80106e0:	2264      	movs	r2, #100	@ 0x64
 80106e2:	60da      	str	r2, [r3, #12]
            if(settings.parking.flags.enabled)
 80106e4:	4b56      	ldr	r3, [pc, #344]	@ (8010840 <gc_execute_block+0x36c4>)
 80106e6:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80106ea:	f013 0f01 	tst.w	r3, #1
 80106ee:	d00a      	beq.n	8010706 <gc_execute_block+0x358a>
                gc_state.modal.override_ctrl.parking_disable = settings.parking.flags.enable_override_control &&
 80106f0:	f003 0306 	and.w	r3, r3, #6
 80106f4:	2b06      	cmp	r3, #6
 80106f6:	bf14      	ite	ne
 80106f8:	2300      	movne	r3, #0
 80106fa:	2301      	moveq	r3, #1
 80106fc:	4a4e      	ldr	r2, [pc, #312]	@ (8010838 <gc_execute_block+0x36bc>)
 80106fe:	7f11      	ldrb	r1, [r2, #28]
 8010700:	f363 01c3 	bfi	r1, r3, #3, #1
 8010704:	7711      	strb	r1, [r2, #28]
            sys.override.control = gc_state.modal.override_ctrl;
 8010706:	4b4c      	ldr	r3, [pc, #304]	@ (8010838 <gc_execute_block+0x36bc>)
 8010708:	7f1a      	ldrb	r2, [r3, #28]
 801070a:	4b4c      	ldr	r3, [pc, #304]	@ (801083c <gc_execute_block+0x36c0>)
 801070c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            if(settings.flags.restore_overrides) {
 8010710:	4b4b      	ldr	r3, [pc, #300]	@ (8010840 <gc_execute_block+0x36c4>)
 8010712:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8010716:	f013 0f02 	tst.w	r3, #2
 801071a:	d003      	beq.n	8010724 <gc_execute_block+0x35a8>
                sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;
 801071c:	4b47      	ldr	r3, [pc, #284]	@ (801083c <gc_execute_block+0x36c0>)
 801071e:	2264      	movs	r2, #100	@ 0x64
 8010720:	61da      	str	r2, [r3, #28]
                sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;
 8010722:	621a      	str	r2, [r3, #32]
            if (!check_mode) {
 8010724:	2d02      	cmp	r5, #2
 8010726:	f040 8299 	bne.w	8010c5c <gc_execute_block+0x3ae0>
            if(grbl.on_program_completed)
 801072a:	4b46      	ldr	r3, [pc, #280]	@ (8010844 <gc_execute_block+0x36c8>)
 801072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801072e:	2b00      	cmp	r3, #0
 8010730:	f000 82c1 	beq.w	8010cb6 <gc_execute_block+0x3b3a>
                grbl.on_program_completed(gc_state.modal.program_flow, check_mode);
 8010734:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010736:	4a40      	ldr	r2, [pc, #256]	@ (8010838 <gc_execute_block+0x36bc>)
 8010738:	7e10      	ldrb	r0, [r2, #24]
 801073a:	4798      	blx	r3
 801073c:	e2bb      	b.n	8010cb6 <gc_execute_block+0x3b3a>
                mc_line(gc_block.values.xyz, &plan_data);
 801073e:	a914      	add	r1, sp, #80	@ 0x50
 8010740:	4841      	ldr	r0, [pc, #260]	@ (8010848 <gc_execute_block+0x36cc>)
 8010742:	f002 feeb 	bl	801351c <mc_line>
 8010746:	e756      	b.n	80105f6 <gc_execute_block+0x347a>
            settings_write_coord_data(CoordinateSystem_G28, &gc_state.position);
 8010748:	4939      	ldr	r1, [pc, #228]	@ (8010830 <gc_execute_block+0x36b4>)
 801074a:	2009      	movs	r0, #9
 801074c:	f00c fbfe 	bl	801cf4c <settings_write_coord_data>
            break;
 8010750:	e75f      	b.n	8010612 <gc_execute_block+0x3496>
            settings_write_coord_data(CoordinateSystem_G30, &gc_state.position);
 8010752:	4937      	ldr	r1, [pc, #220]	@ (8010830 <gc_execute_block+0x36b4>)
 8010754:	200a      	movs	r0, #10
 8010756:	f00c fbf9 	bl	801cf4c <settings_write_coord_data>
            break;
 801075a:	e75a      	b.n	8010612 <gc_execute_block+0x3496>
                ngc_named_param_set("_value", 0.0f);
 801075c:	ed9f 8a3b 	vldr	s16, [pc, #236]	@ 801084c <gc_execute_block+0x36d0>
 8010760:	eeb0 0a48 	vmov.f32	s0, s16
 8010764:	483a      	ldr	r0, [pc, #232]	@ (8010850 <gc_execute_block+0x36d4>)
 8010766:	f004 facf 	bl	8014d08 <ngc_named_param_set>
                ngc_named_param_set("_value_returned", 0.0f);
 801076a:	eeb0 0a48 	vmov.f32	s0, s16
 801076e:	4839      	ldr	r0, [pc, #228]	@ (8010854 <gc_execute_block+0x36d8>)
 8010770:	f004 faca 	bl	8014d08 <ngc_named_param_set>
                status_code_t status = grbl.on_macro_execute((macro_id_t)gc_block.values.p);
 8010774:	4b33      	ldr	r3, [pc, #204]	@ (8010844 <gc_execute_block+0x36c8>)
 8010776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801077a:	4a2e      	ldr	r2, [pc, #184]	@ (8010834 <gc_execute_block+0x36b8>)
 801077c:	edd2 7a17 	vldr	s15, [r2, #92]	@ 0x5c
 8010780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010784:	ee17 2a90 	vmov	r2, s15
 8010788:	b290      	uxth	r0, r2
 801078a:	4798      	blx	r3
 801078c:	4604      	mov	r4, r0
                return status == Status_Unhandled ? Status_GcodeValueOutOfRange : status;
 801078e:	2854      	cmp	r0, #84	@ 0x54
 8010790:	f47c add1 	bne.w	800d336 <gc_execute_block+0x1ba>
 8010794:	2427      	movs	r4, #39	@ 0x27
 8010796:	f7fc bdce 	b.w	800d336 <gc_execute_block+0x1ba>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 801079a:	4b27      	ldr	r3, [pc, #156]	@ (8010838 <gc_execute_block+0x36bc>)
 801079c:	2201      	movs	r2, #1
 801079e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
            memcpy(gc_state.g92_coord_offset, gc_block.values.xyz, sizeof(gc_state.g92_coord_offset));
 80107a2:	33b8      	adds	r3, #184	@ 0xb8
 80107a4:	4a28      	ldr	r2, [pc, #160]	@ (8010848 <gc_execute_block+0x36cc>)
 80107a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80107a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if(!settings.flags.g92_is_volatile)
 80107ac:	4b24      	ldr	r3, [pc, #144]	@ (8010840 <gc_execute_block+0x36c4>)
 80107ae:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 80107b2:	f013 0f02 	tst.w	r3, #2
 80107b6:	d002      	beq.n	80107be <gc_execute_block+0x3642>
            add_offset();
 80107b8:	f7fc f9b8 	bl	800cb2c <add_offset>
            break;
 80107bc:	e729      	b.n	8010612 <gc_execute_block+0x3496>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 80107be:	4926      	ldr	r1, [pc, #152]	@ (8010858 <gc_execute_block+0x36dc>)
 80107c0:	200b      	movs	r0, #11
 80107c2:	f00c fbc3 	bl	801cf4c <settings_write_coord_data>
 80107c6:	e7f7      	b.n	80107b8 <gc_execute_block+0x363c>
            gc_state.g92_coord_offset_applied = false;
 80107c8:	4a1b      	ldr	r2, [pc, #108]	@ (8010838 <gc_execute_block+0x36bc>)
 80107ca:	2300      	movs	r3, #0
 80107cc:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 80107d0:	f102 01b8 	add.w	r1, r2, #184	@ 0xb8
 80107d4:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
 80107d8:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 80107dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            if(!settings.flags.g92_is_volatile)
 80107e0:	4b17      	ldr	r3, [pc, #92]	@ (8010840 <gc_execute_block+0x36c4>)
 80107e2:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 80107e6:	f013 0f02 	tst.w	r3, #2
 80107ea:	d002      	beq.n	80107f2 <gc_execute_block+0x3676>
            add_offset();
 80107ec:	f7fc f99e 	bl	800cb2c <add_offset>
            break;
 80107f0:	e70f      	b.n	8010612 <gc_execute_block+0x3496>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 80107f2:	200b      	movs	r0, #11
 80107f4:	f00c fbaa 	bl	801cf4c <settings_write_coord_data>
 80107f8:	e7f8      	b.n	80107ec <gc_execute_block+0x3670>
            gc_state.g92_coord_offset_applied = false;
 80107fa:	4a0f      	ldr	r2, [pc, #60]	@ (8010838 <gc_execute_block+0x36bc>)
 80107fc:	2300      	movs	r3, #0
 80107fe:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 8010802:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
 8010806:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 801080a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            add_offset();
 801080e:	f7fc f98d 	bl	800cb2c <add_offset>
            break;
 8010812:	e6fe      	b.n	8010612 <gc_execute_block+0x3496>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 8010814:	4908      	ldr	r1, [pc, #32]	@ (8010838 <gc_execute_block+0x36bc>)
 8010816:	2301      	movs	r3, #1
 8010818:	f881 30b4 	strb.w	r3, [r1, #180]	@ 0xb4
            settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Restore G92 offsets from non-volatile storage
 801081c:	31b8      	adds	r1, #184	@ 0xb8
 801081e:	200b      	movs	r0, #11
 8010820:	f00c fbb8 	bl	801cf94 <settings_read_coord_data>
            add_offset();
 8010824:	f7fc f982 	bl	800cb2c <add_offset>
            break;
 8010828:	e6f3      	b.n	8010612 <gc_execute_block+0x3496>
 801082a:	bf00      	nop
 801082c:	20000e80 	.word	0x20000e80
 8010830:	20000f60 	.word	0x20000f60
 8010834:	20000df0 	.word	0x20000df0
 8010838:	20000ef8 	.word	0x20000ef8
 801083c:	200014a0 	.word	0x200014a0
 8010840:	20001bd8 	.word	0x20001bd8
 8010844:	200013a8 	.word	0x200013a8
 8010848:	20000e74 	.word	0x20000e74
 801084c:	00000000 	.word	0x00000000
 8010850:	0802aad0 	.word	0x0802aad0
 8010854:	0802aad8 	.word	0x0802aad8
 8010858:	20000fb0 	.word	0x20000fb0
        plan_data.output_commands = output_commands;
 801085c:	4ba6      	ldr	r3, [pc, #664]	@ (8010af8 <gc_execute_block+0x397c>)
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	921d      	str	r2, [sp, #116]	@ 0x74
        output_commands = NULL;
 8010862:	2200      	movs	r2, #0
 8010864:	601a      	str	r2, [r3, #0]
        switch(gc_state.modal.motion) {
 8010866:	2853      	cmp	r0, #83	@ 0x53
 8010868:	d858      	bhi.n	801091c <gc_execute_block+0x37a0>
 801086a:	2853      	cmp	r0, #83	@ 0x53
 801086c:	f200 81a5 	bhi.w	8010bba <gc_execute_block+0x3a3e>
 8010870:	e8df f010 	tbh	[pc, r0, lsl #1]
 8010874:	006d0098 	.word	0x006d0098
 8010878:	00a400a4 	.word	0x00a400a4
 801087c:	00d401a3 	.word	0x00d401a3
 8010880:	01a301a3 	.word	0x01a301a3
 8010884:	01a301a3 	.word	0x01a301a3
 8010888:	01a301a3 	.word	0x01a301a3
 801088c:	01a301a3 	.word	0x01a301a3
 8010890:	01a301a3 	.word	0x01a301a3
 8010894:	01a301a3 	.word	0x01a301a3
 8010898:	01a301a3 	.word	0x01a301a3
 801089c:	01a301a3 	.word	0x01a301a3
 80108a0:	01a301a3 	.word	0x01a301a3
 80108a4:	01a301a3 	.word	0x01a301a3
 80108a8:	01a301a3 	.word	0x01a301a3
 80108ac:	01a301a3 	.word	0x01a301a3
 80108b0:	01a301a3 	.word	0x01a301a3
 80108b4:	015001a3 	.word	0x015001a3
 80108b8:	01a301a3 	.word	0x01a301a3
 80108bc:	01a301a3 	.word	0x01a301a3
 80108c0:	01a301a3 	.word	0x01a301a3
 80108c4:	01a301a3 	.word	0x01a301a3
 80108c8:	01a301a3 	.word	0x01a301a3
 80108cc:	01a301a3 	.word	0x01a301a3
 80108d0:	01a301a3 	.word	0x01a301a3
 80108d4:	01a301a3 	.word	0x01a301a3
 80108d8:	010001a3 	.word	0x010001a3
 80108dc:	01a301a3 	.word	0x01a301a3
 80108e0:	01a301a3 	.word	0x01a301a3
 80108e4:	01a301a3 	.word	0x01a301a3
 80108e8:	01a301a3 	.word	0x01a301a3
 80108ec:	01a301a3 	.word	0x01a301a3
 80108f0:	01a301a3 	.word	0x01a301a3
 80108f4:	01a301a3 	.word	0x01a301a3
 80108f8:	01a301a3 	.word	0x01a301a3
 80108fc:	01a301a3 	.word	0x01a301a3
 8010900:	01a301a3 	.word	0x01a301a3
 8010904:	018901a3 	.word	0x018901a3
 8010908:	01a301a3 	.word	0x01a301a3
 801090c:	01a3016f 	.word	0x01a3016f
 8010910:	01a301a3 	.word	0x01a301a3
 8010914:	018901a3 	.word	0x018901a3
 8010918:	01890189 	.word	0x01890189
 801091c:	f1a0 038c 	sub.w	r3, r0, #140	@ 0x8c
 8010920:	b29b      	uxth	r3, r3
 8010922:	2b03      	cmp	r3, #3
 8010924:	f200 814f 	bhi.w	8010bc6 <gc_execute_block+0x3a4a>
                plan_data.condition.no_feed_override = !settings.probe.allow_feed_override;
 8010928:	4b74      	ldr	r3, [pc, #464]	@ (8010afc <gc_execute_block+0x3980>)
 801092a:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 801092e:	091b      	lsrs	r3, r3, #4
 8010930:	f083 0301 	eor.w	r3, r3, #1
 8010934:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8010938:	f363 1204 	bfi	r2, r3, #4, #1
 801093c:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
                gc_update_pos = (pos_update_t)mc_probe_cycle(gc_block.values.xyz, &plan_data, gc_parser_flags);
 8010940:	4642      	mov	r2, r8
 8010942:	a914      	add	r1, sp, #80	@ 0x50
 8010944:	486e      	ldr	r0, [pc, #440]	@ (8010b00 <gc_execute_block+0x3984>)
 8010946:	f003 fcf7 	bl	8014338 <mc_probe_cycle>
 801094a:	4604      	mov	r4, r0
                break;
 801094c:	e136      	b.n	8010bbc <gc_execute_block+0x3a40>
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev) {
 801094e:	4b6d      	ldr	r3, [pc, #436]	@ (8010b04 <gc_execute_block+0x3988>)
 8010950:	789b      	ldrb	r3, [r3, #2]
 8010952:	2b02      	cmp	r3, #2
 8010954:	d005      	beq.n	8010962 <gc_execute_block+0x37e6>
                mc_line(gc_block.values.xyz, &plan_data);
 8010956:	a914      	add	r1, sp, #80	@ 0x50
 8010958:	4869      	ldr	r0, [pc, #420]	@ (8010b00 <gc_execute_block+0x3984>)
 801095a:	f002 fddf 	bl	801351c <mc_line>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 801095e:	9c05      	ldr	r4, [sp, #20]
                break;
 8010960:	e12c      	b.n	8010bbc <gc_execute_block+0x3a40>
                    plan_data.condition.units_per_rev = On;
 8010962:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801096a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                    plan_data.spindle.state.synchronized = settings.mode != Mode_Lathe || gc_block.values.xyz[Z_AXIS] != gc_state.position[Z_AXIS];
 801096e:	4b63      	ldr	r3, [pc, #396]	@ (8010afc <gc_execute_block+0x3980>)
 8010970:	7e1b      	ldrb	r3, [r3, #24]
 8010972:	2b02      	cmp	r3, #2
 8010974:	d007      	beq.n	8010986 <gc_execute_block+0x380a>
 8010976:	2301      	movs	r3, #1
 8010978:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 801097c:	f363 12c7 	bfi	r2, r3, #7, #1
 8010980:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
 8010984:	e7e7      	b.n	8010956 <gc_execute_block+0x37da>
 8010986:	4b60      	ldr	r3, [pc, #384]	@ (8010b08 <gc_execute_block+0x398c>)
 8010988:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 801098c:	4b5d      	ldr	r3, [pc, #372]	@ (8010b04 <gc_execute_block+0x3988>)
 801098e:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8010992:	eeb4 7a67 	vcmp.f32	s14, s15
 8010996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801099a:	d001      	beq.n	80109a0 <gc_execute_block+0x3824>
 801099c:	2301      	movs	r3, #1
 801099e:	e7eb      	b.n	8010978 <gc_execute_block+0x37fc>
 80109a0:	2300      	movs	r3, #0
 80109a2:	e7e9      	b.n	8010978 <gc_execute_block+0x37fc>
                plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 80109a4:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80109a8:	f043 0301 	orr.w	r3, r3, #1
 80109ac:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                mc_line(gc_block.values.xyz, &plan_data);
 80109b0:	a914      	add	r1, sp, #80	@ 0x50
 80109b2:	4853      	ldr	r0, [pc, #332]	@ (8010b00 <gc_execute_block+0x3984>)
 80109b4:	f002 fdb2 	bl	801351c <mc_line>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80109b8:	9c05      	ldr	r4, [sp, #20]
                break;
 80109ba:	e0ff      	b.n	8010bbc <gc_execute_block+0x3a40>
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev)
 80109bc:	4b51      	ldr	r3, [pc, #324]	@ (8010b04 <gc_execute_block+0x3988>)
 80109be:	789b      	ldrb	r3, [r3, #2]
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d01a      	beq.n	80109fa <gc_execute_block+0x387e>
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 80109c4:	4b50      	ldr	r3, [pc, #320]	@ (8010b08 <gc_execute_block+0x398c>)
 80109c6:	ed93 0a19 	vldr	s0, [r3, #100]	@ 0x64
 80109ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109cc:	f013 0f04 	tst.w	r3, #4
 80109d0:	d020      	beq.n	8010a14 <gc_execute_block+0x3898>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 80109d2:	4b4d      	ldr	r3, [pc, #308]	@ (8010b08 <gc_execute_block+0x398c>)
 80109d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80109d8:	4252      	negs	r2, r2
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 80109da:	4b4c      	ldr	r3, [pc, #304]	@ (8010b0c <gc_execute_block+0x3990>)
 80109dc:	9201      	str	r2, [sp, #4]
 80109de:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80109e0:	f8ad 2000 	strh.w	r2, [sp]
 80109e4:	0c12      	lsrs	r2, r2, #16
 80109e6:	f88d 2002 	strb.w	r2, [sp, #2]
 80109ea:	4a49      	ldr	r2, [pc, #292]	@ (8010b10 <gc_execute_block+0x3994>)
 80109ec:	a914      	add	r1, sp, #80	@ 0x50
 80109ee:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80109f2:	f002 fdd9 	bl	80135a8 <mc_arc>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 80109f6:	9c05      	ldr	r4, [sp, #20]
                break;
 80109f8:	e0e0      	b.n	8010bbc <gc_execute_block+0x3a40>
                    plan_data.condition.units_per_rev = plan_data.spindle.state.synchronized = On;
 80109fa:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80109fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a02:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8010a06:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a0e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010a12:	e7d7      	b.n	80109c4 <gc_execute_block+0x3848>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 8010a14:	4b3c      	ldr	r3, [pc, #240]	@ (8010b08 <gc_execute_block+0x398c>)
 8010a16:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8010a1a:	e7de      	b.n	80109da <gc_execute_block+0x385e>
                        .x = gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS],
 8010a1c:	4a39      	ldr	r2, [pc, #228]	@ (8010b04 <gc_execute_block+0x3988>)
 8010a1e:	edd2 7a1a 	vldr	s15, [r2, #104]	@ 0x68
 8010a22:	4839      	ldr	r0, [pc, #228]	@ (8010b08 <gc_execute_block+0x398c>)
 8010a24:	ed90 7a12 	vldr	s14, [r0, #72]	@ 0x48
 8010a28:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp1 = {
 8010a2c:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
                        .y = gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS]
 8010a30:	edd2 7a1b 	vldr	s15, [r2, #108]	@ 0x6c
 8010a34:	ed90 7a13 	vldr	s14, [r0, #76]	@ 0x4c
 8010a38:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp1 = {
 8010a3c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
                        .x = gc_block.values.xyz[X_AXIS] + gc_state.modal.spline_pq[X_AXIS],
 8010a40:	edd0 7a21 	vldr	s15, [r0, #132]	@ 0x84
 8010a44:	ed92 7a08 	vldr	s14, [r2, #32]
 8010a48:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp2 = {
 8010a4c:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
                        .y = gc_block.values.xyz[Y_AXIS] + gc_state.modal.spline_pq[Y_AXIS]
 8010a50:	edd0 7a22 	vldr	s15, [r0, #136]	@ 0x88
 8010a54:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8010a58:	ee77 7a87 	vadd.f32	s15, s15, s14
                    point_2d_t cp2 = {
 8010a5c:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 8010a60:	ab11      	add	r3, sp, #68	@ 0x44
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010a66:	3268      	adds	r2, #104	@ 0x68
 8010a68:	a914      	add	r1, sp, #80	@ 0x50
 8010a6a:	3084      	adds	r0, #132	@ 0x84
 8010a6c:	f003 f85c 	bl	8013b28 <mc_cubic_b_spline>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8010a70:	9c05      	ldr	r4, [sp, #20]
                break;
 8010a72:	e0a3      	b.n	8010bbc <gc_execute_block+0x3a40>
                        .x = gc_state.position[X_AXIS] + (gc_block.values.ijk[X_AXIS] * 2.0f) / 3.0f,
 8010a74:	4a23      	ldr	r2, [pc, #140]	@ (8010b04 <gc_execute_block+0x3988>)
 8010a76:	ed92 7a1a 	vldr	s14, [r2, #104]	@ 0x68
 8010a7a:	4823      	ldr	r0, [pc, #140]	@ (8010b08 <gc_execute_block+0x398c>)
 8010a7c:	ed90 5a12 	vldr	s10, [r0, #72]	@ 0x48
 8010a80:	ee35 6a05 	vadd.f32	s12, s10, s10
 8010a84:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8010a88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp1 = {
 8010a90:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
                        .y = gc_state.position[Y_AXIS] + (gc_block.values.ijk[Y_AXIS] * 2.0f) / 3.0f
 8010a94:	edd2 7a1b 	vldr	s15, [r2, #108]	@ 0x6c
 8010a98:	edd0 5a13 	vldr	s11, [r0, #76]	@ 0x4c
 8010a9c:	ee75 4aa5 	vadd.f32	s9, s11, s11
 8010aa0:	ee84 6aa6 	vdiv.f32	s12, s9, s13
 8010aa4:	ee37 6a86 	vadd.f32	s12, s15, s12
                    point_2d_t cp1 = {
 8010aa8:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
                        .x = gc_block.values.xyz[X_AXIS] + ((gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS] - gc_block.values.xyz[X_AXIS]) * 2.0f) / 3.0f,
 8010aac:	ed90 6a21 	vldr	s12, [r0, #132]	@ 0x84
 8010ab0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010ab4:	ee37 7a46 	vsub.f32	s14, s14, s12
 8010ab8:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010abc:	ee87 5a26 	vdiv.f32	s10, s14, s13
 8010ac0:	ee36 6a05 	vadd.f32	s12, s12, s10
                    point_2d_t cp2 = {
 8010ac4:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
                        .y = gc_block.values.xyz[Y_AXIS] + ((gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS] - gc_block.values.xyz[Y_AXIS]) * 2.0f) / 3.0f
 8010ac8:	ed90 7a22 	vldr	s14, [r0, #136]	@ 0x88
 8010acc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010ad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ad4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010ad8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8010adc:	ee37 7a06 	vadd.f32	s14, s14, s12
                    point_2d_t cp2 = {
 8010ae0:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 8010ae4:	ab11      	add	r3, sp, #68	@ 0x44
 8010ae6:	9300      	str	r3, [sp, #0]
 8010ae8:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010aea:	3268      	adds	r2, #104	@ 0x68
 8010aec:	a914      	add	r1, sp, #80	@ 0x50
 8010aee:	3084      	adds	r0, #132	@ 0x84
 8010af0:	f003 f81a 	bl	8013b28 <mc_cubic_b_spline>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8010af4:	9c05      	ldr	r4, [sp, #20]
                break;
 8010af6:	e061      	b.n	8010bbc <gc_execute_block+0x3a40>
 8010af8:	20000ec4 	.word	0x20000ec4
 8010afc:	20001bd8 	.word	0x20001bd8
 8010b00:	20000e74 	.word	0x20000e74
 8010b04:	20000ef8 	.word	0x20000ef8
 8010b08:	20000df0 	.word	0x20000df0
 8010b0c:	20000e38 	.word	0x20000e38
 8010b10:	20000f60 	.word	0x20000f60
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 8010b14:	f006 fdfe 	bl	8017714 <protocol_buffer_synchronize>
                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 8010b18:	4bc5      	ldr	r3, [pc, #788]	@ (8010e30 <gc_execute_block+0x3cb4>)
 8010b1a:	f893 6029 	ldrb.w	r6, [r3, #41]	@ 0x29
                    status_code_t status = init_sync_motion(&plan_data, gc_block.values.k);
 8010b1e:	4bc5      	ldr	r3, [pc, #788]	@ (8010e34 <gc_execute_block+0x3cb8>)
 8010b20:	ed93 0a15 	vldr	s0, [r3, #84]	@ 0x54
 8010b24:	a814      	add	r0, sp, #80	@ 0x50
 8010b26:	f7fb ff7d 	bl	800ca24 <init_sync_motion>
                    if(status != Status_OK)
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	f47c ac02 	bne.w	800d336 <gc_execute_block+0x1ba>
                    plan_data.spindle.state.synchronized = On;
 8010b32:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b3a:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
                    mc_line(gc_block.values.xyz, &plan_data);
 8010b3e:	a914      	add	r1, sp, #80	@ 0x50
 8010b40:	48bd      	ldr	r0, [pc, #756]	@ (8010e38 <gc_execute_block+0x3cbc>)
 8010b42:	f002 fceb 	bl	801351c <mc_line>
                    protocol_buffer_synchronize();    // Wait until synchronized move is finished,
 8010b46:	f006 fde5 	bl	8017714 <protocol_buffer_synchronize>
                    sys.override.control = overrides; // then restore previous override disable status.
 8010b4a:	4bb9      	ldr	r3, [pc, #740]	@ (8010e30 <gc_execute_block+0x3cb4>)
 8010b4c:	f883 6029 	strb.w	r6, [r3, #41]	@ 0x29
                break;
 8010b50:	e034      	b.n	8010bbc <gc_execute_block+0x3a40>
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 8010b52:	f006 fddf 	bl	8017714 <protocol_buffer_synchronize>
                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 8010b56:	4bb6      	ldr	r3, [pc, #728]	@ (8010e30 <gc_execute_block+0x3cb4>)
 8010b58:	f893 6029 	ldrb.w	r6, [r3, #41]	@ 0x29
                    status_code_t status = init_sync_motion(&plan_data, thread.pitch);
 8010b5c:	4bb7      	ldr	r3, [pc, #732]	@ (8010e3c <gc_execute_block+0x3cc0>)
 8010b5e:	ed93 0a00 	vldr	s0, [r3]
 8010b62:	a814      	add	r0, sp, #80	@ 0x50
 8010b64:	f7fb ff5e 	bl	800ca24 <init_sync_motion>
                    if(status != Status_OK)
 8010b68:	4604      	mov	r4, r0
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	f47c abe3 	bne.w	800d336 <gc_execute_block+0x1ba>
                    mc_thread(&plan_data, gc_state.position, &thread, overrides.feed_hold_disable);
 8010b70:	f3c6 0340 	ubfx	r3, r6, #1, #1
 8010b74:	4ab1      	ldr	r2, [pc, #708]	@ (8010e3c <gc_execute_block+0x3cc0>)
 8010b76:	49b2      	ldr	r1, [pc, #712]	@ (8010e40 <gc_execute_block+0x3cc4>)
 8010b78:	a814      	add	r0, sp, #80	@ 0x50
 8010b7a:	f003 f8ed 	bl	8013d58 <mc_thread>
                    sys.override.control = overrides; // then restore previous override disable status.
 8010b7e:	4bac      	ldr	r3, [pc, #688]	@ (8010e30 <gc_execute_block+0x3cb4>)
 8010b80:	f883 6029 	strb.w	r6, [r3, #41]	@ 0x29
                break;
 8010b84:	e01a      	b.n	8010bbc <gc_execute_block+0x3a40>
                plan_data.spindle.rpm = gc_block.values.s;
 8010b86:	49ab      	ldr	r1, [pc, #684]	@ (8010e34 <gc_execute_block+0x3cb8>)
 8010b88:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8010b8a:	9315      	str	r3, [sp, #84]	@ 0x54
                gc_state.canned.retract_mode = gc_state.modal.retract_mode;
 8010b8c:	4bad      	ldr	r3, [pc, #692]	@ (8010e44 <gc_execute_block+0x3cc8>)
 8010b8e:	7f5a      	ldrb	r2, [r3, #29]
 8010b90:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
                mc_canned_drill(gc_state.modal.motion, gc_block.values.xyz, &plan_data, gc_state.position, plane, gc_block.values.l, &gc_state.canned);
 8010b94:	f891 20b4 	ldrb.w	r2, [r1, #180]	@ 0xb4
 8010b98:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 8010b9c:	9402      	str	r4, [sp, #8]
 8010b9e:	9201      	str	r2, [sp, #4]
 8010ba0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010ba2:	f8ad 2000 	strh.w	r2, [sp]
 8010ba6:	0c12      	lsrs	r2, r2, #16
 8010ba8:	f88d 2002 	strb.w	r2, [sp, #2]
 8010bac:	3368      	adds	r3, #104	@ 0x68
 8010bae:	aa14      	add	r2, sp, #80	@ 0x50
 8010bb0:	3184      	adds	r1, #132	@ 0x84
 8010bb2:	f003 fabf 	bl	8014134 <mc_canned_drill>
        pos_update_t gc_update_pos = GCUpdatePos_Target;
 8010bb6:	9c05      	ldr	r4, [sp, #20]
                break;
 8010bb8:	e000      	b.n	8010bbc <gc_execute_block+0x3a40>
        switch(gc_state.modal.motion) {
 8010bba:	9c05      	ldr	r4, [sp, #20]
        if(sys.cancel)
 8010bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8010e30 <gc_execute_block+0x3cb4>)
 8010bbe:	785b      	ldrb	r3, [r3, #1]
 8010bc0:	b93b      	cbnz	r3, 8010bd2 <gc_execute_block+0x3a56>
 8010bc2:	46a2      	mov	sl, r4
 8010bc4:	e005      	b.n	8010bd2 <gc_execute_block+0x3a56>
        switch(gc_state.modal.motion) {
 8010bc6:	9c05      	ldr	r4, [sp, #20]
 8010bc8:	e7f8      	b.n	8010bbc <gc_execute_block+0x3a40>
            output_command_t *next = plan_data.output_commands->next;
 8010bca:	6884      	ldr	r4, [r0, #8]
            free(plan_data.output_commands);
 8010bcc:	f011 fc6e 	bl	80224ac <free>
            plan_data.output_commands = next;
 8010bd0:	941d      	str	r4, [sp, #116]	@ 0x74
        while(plan_data.output_commands) {
 8010bd2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	d1f8      	bne.n	8010bca <gc_execute_block+0x3a4e>
        if (gc_update_pos == GCUpdatePos_Target)
 8010bd8:	f1ba 0f00 	cmp.w	sl, #0
 8010bdc:	d105      	bne.n	8010bea <gc_execute_block+0x3a6e>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position)); // gc_state.position[] = gc_block.values.xyz[]
 8010bde:	4b98      	ldr	r3, [pc, #608]	@ (8010e40 <gc_execute_block+0x3cc4>)
 8010be0:	4a95      	ldr	r2, [pc, #596]	@ (8010e38 <gc_execute_block+0x3cbc>)
 8010be2:	ca07      	ldmia	r2, {r0, r1, r2}
 8010be4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010be8:	e520      	b.n	801062c <gc_execute_block+0x34b0>
        else if (gc_update_pos == GCUpdatePos_System)
 8010bea:	f1ba 0f01 	cmp.w	sl, #1
 8010bee:	f47f ad1d 	bne.w	801062c <gc_execute_block+0x34b0>
            gc_sync_position(); // gc_state.position[] = sys.position
 8010bf2:	4995      	ldr	r1, [pc, #596]	@ (8010e48 <gc_execute_block+0x3ccc>)
 8010bf4:	4892      	ldr	r0, [pc, #584]	@ (8010e40 <gc_execute_block+0x3cc4>)
 8010bf6:	f010 fd41 	bl	802167c <system_convert_array_steps_to_mpos>
 8010bfa:	e517      	b.n	801062c <gc_execute_block+0x34b0>
            if(grbl.on_macro_return)
 8010bfc:	4b93      	ldr	r3, [pc, #588]	@ (8010e4c <gc_execute_block+0x3cd0>)
 8010bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010c02:	b17b      	cbz	r3, 8010c24 <gc_execute_block+0x3aa8>
                grbl.on_macro_return();
 8010c04:	4798      	blx	r3
 8010c06:	e00d      	b.n	8010c24 <gc_execute_block+0x3aa8>
            if(!check_mode) {
 8010c08:	2d02      	cmp	r5, #2
 8010c0a:	d00b      	beq.n	8010c24 <gc_execute_block+0x3aa8>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 8010c0c:	4b89      	ldr	r3, [pc, #548]	@ (8010e34 <gc_execute_block+0x3cb8>)
 8010c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c12:	2b3c      	cmp	r3, #60	@ 0x3c
 8010c14:	d00c      	beq.n	8010c30 <gc_execute_block+0x3ab4>
                system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8010c16:	4b8e      	ldr	r3, [pc, #568]	@ (8010e50 <gc_execute_block+0x3cd4>)
 8010c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c1a:	2108      	movs	r1, #8
 8010c1c:	488d      	ldr	r0, [pc, #564]	@ (8010e54 <gc_execute_block+0x3cd8>)
 8010c1e:	4798      	blx	r3
                protocol_execute_realtime(); // Execute suspend.
 8010c20:	f006 faaa 	bl	8017178 <protocol_execute_realtime>
        gc_state.modal.program_flow = ProgramFlow_Running; // Reset program flow.
 8010c24:	4b87      	ldr	r3, [pc, #540]	@ (8010e44 <gc_execute_block+0x3cc8>)
 8010c26:	2200      	movs	r2, #0
 8010c28:	761a      	strb	r2, [r3, #24]
    return Status_OK;
 8010c2a:	9c05      	ldr	r4, [sp, #20]
 8010c2c:	f7fc bb83 	b.w	800d336 <gc_execute_block+0x1ba>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 8010c30:	4b87      	ldr	r3, [pc, #540]	@ (8010e50 <gc_execute_block+0x3cd4>)
 8010c32:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d0ed      	beq.n	8010c16 <gc_execute_block+0x3a9a>
                    hal.pallet_shuttle();
 8010c3a:	4798      	blx	r3
 8010c3c:	e7eb      	b.n	8010c16 <gc_execute_block+0x3a9a>
            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 8010c3e:	4b84      	ldr	r3, [pc, #528]	@ (8010e50 <gc_execute_block+0x3cd4>)
 8010c40:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f43f ad1f 	beq.w	8010688 <gc_execute_block+0x350c>
                hal.pallet_shuttle();
 8010c4a:	4798      	blx	r3
 8010c4c:	e51c      	b.n	8010688 <gc_execute_block+0x350c>
                gc_state.modal.coord_system.id = CoordinateSystem_G54;
 8010c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8010e44 <gc_execute_block+0x3cc8>)
 8010c50:	751a      	strb	r2, [r3, #20]
                system_add_rt_report(Report_GWCO);
 8010c52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010c56:	f010 fdb5 	bl	80217c4 <system_add_rt_report>
 8010c5a:	e526      	b.n	80106aa <gc_execute_block+0x352e>
                if (!(settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz)))
 8010c5c:	497e      	ldr	r1, [pc, #504]	@ (8010e58 <gc_execute_block+0x3cdc>)
 8010c5e:	7b08      	ldrb	r0, [r1, #12]
 8010c60:	f00c f998 	bl	801cf94 <settings_read_coord_data>
 8010c64:	b1d0      	cbz	r0, 8010c9c <gc_execute_block+0x3b20>
                if(settings_read_coord_data(CoordinateSystem_G92, &g92_offset_stored) && !isequal_position_vector(g92_offset_stored, gc_state.g92_coord_offset))
 8010c66:	a911      	add	r1, sp, #68	@ 0x44
 8010c68:	200b      	movs	r0, #11
 8010c6a:	f00c f993 	bl	801cf94 <settings_read_coord_data>
 8010c6e:	b128      	cbz	r0, 8010c7c <gc_execute_block+0x3b00>
 8010c70:	220c      	movs	r2, #12
 8010c72:	497a      	ldr	r1, [pc, #488]	@ (8010e5c <gc_execute_block+0x3ce0>)
 8010c74:	a811      	add	r0, sp, #68	@ 0x44
 8010c76:	f013 fcb0 	bl	80245da <memcmp>
 8010c7a:	b990      	cbnz	r0, 8010ca2 <gc_execute_block+0x3b26>
                system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8010c7c:	f010 fe2e 	bl	80218dc <system_flag_wco_change>
                spindle_all_off();
 8010c80:	f00d fb5e 	bl	801e340 <spindle_all_off>
                hal.coolant.set_state(gc_state.modal.coolant);
 8010c84:	4b72      	ldr	r3, [pc, #456]	@ (8010e50 <gc_execute_block+0x3cd4>)
 8010c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c88:	4a6e      	ldr	r2, [pc, #440]	@ (8010e44 <gc_execute_block+0x3cc8>)
 8010c8a:	7e50      	ldrb	r0, [r2, #25]
 8010c8c:	4798      	blx	r3
                system_add_rt_report(Report_Spindle); // Set to report change
 8010c8e:	2010      	movs	r0, #16
 8010c90:	f010 fd98 	bl	80217c4 <system_add_rt_report>
                system_add_rt_report(Report_Coolant); // immediately.
 8010c94:	2020      	movs	r0, #32
 8010c96:	f010 fd95 	bl	80217c4 <system_add_rt_report>
 8010c9a:	e546      	b.n	801072a <gc_execute_block+0x35ae>
                    FAIL(Status_SettingReadFail);
 8010c9c:	2407      	movs	r4, #7
 8010c9e:	f7fc bb4a 	b.w	800d336 <gc_execute_block+0x1ba>
                    settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 8010ca2:	496e      	ldr	r1, [pc, #440]	@ (8010e5c <gc_execute_block+0x3ce0>)
 8010ca4:	200b      	movs	r0, #11
 8010ca6:	f00c f951 	bl	801cf4c <settings_write_coord_data>
 8010caa:	e7e7      	b.n	8010c7c <gc_execute_block+0x3b00>
                output_command_t *next = output_commands->next;
 8010cac:	6884      	ldr	r4, [r0, #8]
                free(output_commands);
 8010cae:	f011 fbfd 	bl	80224ac <free>
                output_commands = next;
 8010cb2:	4b6b      	ldr	r3, [pc, #428]	@ (8010e60 <gc_execute_block+0x3ce4>)
 8010cb4:	601c      	str	r4, [r3, #0]
            while(output_commands) {
 8010cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8010e60 <gc_execute_block+0x3ce4>)
 8010cb8:	6818      	ldr	r0, [r3, #0]
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d1f6      	bne.n	8010cac <gc_execute_block+0x3b30>
            ngc_modal_state_invalidate();
 8010cbe:	f004 f8c9 	bl	8014e54 <ngc_modal_state_invalidate>
            grbl.report.feedback_message(Message_ProgramEnd);
 8010cc2:	4b62      	ldr	r3, [pc, #392]	@ (8010e4c <gc_execute_block+0x3cd0>)
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	2008      	movs	r0, #8
 8010cc8:	4798      	blx	r3
 8010cca:	e7ab      	b.n	8010c24 <gc_execute_block+0x3aa8>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 8010ccc:	2401      	movs	r4, #1
 8010cce:	f7fc bb32 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_BadNumberFormat);   // [Expected word value]
 8010cd2:	2402      	movs	r4, #2
 8010cd4:	f7fc bb2f 	b.w	800d336 <gc_execute_block+0x1ba>
 8010cd8:	2414      	movs	r4, #20
 8010cda:	f7fc bb2c 	b.w	800d336 <gc_execute_block+0x1ba>
 8010cde:	2414      	movs	r4, #20
 8010ce0:	f7fc bb29 	b.w	800d336 <gc_execute_block+0x1ba>
 8010ce4:	2414      	movs	r4, #20
 8010ce6:	f7fc bb26 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [G7 & G8 not supported]
 8010cea:	2414      	movs	r4, #20
 8010cec:	f7fc bb23 	b.w	800d336 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8010cf0:	2418      	movs	r4, #24
 8010cf2:	f7fc bb20 	b.w	800d336 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand);
 8010cf6:	2414      	movs	r4, #20
 8010cf8:	f7fc bb1d 	b.w	800d336 <gc_execute_block+0x1ba>
                        } else if (int_value == 92) {
 8010cfc:	2414      	movs	r4, #20
 8010cfe:	f7fc bb1a 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [G33.1 not yet supported]
 8010d02:	2414      	movs	r4, #20
 8010d04:	f7fc bb17 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8010d08:	2418      	movs	r4, #24
 8010d0a:	f7fc bb14 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [probing not supported by driver or unsupported G38.x command]
 8010d0e:	2414      	movs	r4, #20
 8010d10:	f7fc bb11 	b.w	800d336 <gc_execute_block+0x1ba>
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 8010d14:	2414      	movs	r4, #20
 8010d16:	f7fc bb0e 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8010d1a:	2418      	movs	r4, #24
 8010d1c:	f7fc bb0b 	b.w	800d336 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand);
 8010d20:	2414      	movs	r4, #20
 8010d22:	f7fc bb08 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8010d26:	2418      	movs	r4, #24
 8010d28:	f7fc bb05 	b.w	800d336 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeUnsupportedCommand); // [G90.1 not supported]
 8010d2c:	2414      	movs	r4, #20
 8010d2e:	f7fc bb02 	b.w	800d336 <gc_execute_block+0x1ba>
 8010d32:	2414      	movs	r4, #20
 8010d34:	f7fc baff 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported G43.x command]
 8010d38:	2414      	movs	r4, #20
 8010d3a:	f7fc bafc 	b.w	800d336 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict] }
 8010d3e:	2418      	movs	r4, #24
 8010d40:	f7fc baf9 	b.w	800d336 <gc_execute_block+0x1ba>
                        if(int_value == 59 && mantissa > 0) {
 8010d44:	2414      	movs	r4, #20
 8010d46:	f7fc baf6 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 8010d4a:	2414      	movs	r4, #20
 8010d4c:	f7fc baf3 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 8010d50:	2414      	movs	r4, #20
 8010d52:	f7fc baf0 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeCommandValueNotInteger); // [Unsupported or invalid Gxx.x command]
 8010d56:	2417      	movs	r4, #23
 8010d58:	f7fc baed 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeModalGroupViolation);
 8010d5c:	2415      	movs	r4, #21
 8010d5e:	f7fc baea 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeWordRepeated); // [Word repeated]
 8010d62:	2419      	movs	r4, #25
 8010d64:	f7fc bae7 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeCommandValueNotInteger); // [No Mxx.x commands]
 8010d68:	2417      	movs	r4, #23
 8010d6a:	f7fc bae4 	b.w	800d336 <gc_execute_block+0x1ba>
                                    FAIL(Status_GcodeUnsupportedCommand);
 8010d6e:	2414      	movs	r4, #20
 8010d70:	f7fc bae1 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8010d74:	2414      	movs	r4, #20
 8010d76:	f7fc bade 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8010d7a:	2414      	movs	r4, #20
 8010d7c:	f7fc badb 	b.w	800d336 <gc_execute_block+0x1ba>
 8010d80:	2414      	movs	r4, #20
 8010d82:	f7fc bad8 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8010d86:	2414      	movs	r4, #20
 8010d88:	f7fc bad5 	b.w	800d336 <gc_execute_block+0x1ba>
 8010d8c:	2414      	movs	r4, #20
 8010d8e:	f7fc bad2 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8010d92:	2414      	movs	r4, #20
 8010d94:	f7fc bacf 	b.w	800d336 <gc_execute_block+0x1ba>
 8010d98:	2414      	movs	r4, #20
 8010d9a:	f7fc bacc 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeUnsupportedCommand);
 8010d9e:	2414      	movs	r4, #20
 8010da0:	f7fc bac9 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeModalGroupViolation);
 8010da4:	2415      	movs	r4, #21
 8010da6:	f7fc bac6 	b.w	800d336 <gc_execute_block+0x1ba>
 8010daa:	2414      	movs	r4, #20
 8010dac:	f7fc bac3 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010db0:	2417      	movs	r4, #23
 8010db2:	f7fc bac0 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010db6:	2417      	movs	r4, #23
 8010db8:	f7fc babd 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010dbc:	2417      	movs	r4, #23
 8010dbe:	f7fc baba 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010dc2:	2417      	movs	r4, #23
 8010dc4:	f7fc bab7 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8010dc8:	2426      	movs	r4, #38	@ 0x26
 8010dca:	f7fc bab4 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8010dce:	2417      	movs	r4, #23
 8010dd0:	f7fc bab1 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeWordRepeated); // [Word repeated]
 8010dd4:	2419      	movs	r4, #25
 8010dd6:	f7fc baae 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue); // [Word value cannot be negative]
 8010dda:	2404      	movs	r4, #4
 8010ddc:	f7fc baab 	b.w	800d336 <gc_execute_block+0x1ba>
        FAIL(Status_GcodeInvalidLineNumber); // [Exceeds max line number]
 8010de0:	241b      	movs	r4, #27
 8010de2:	f7fc baa8 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeUndefinedFeedRate);
 8010de6:	2416      	movs	r4, #22
 8010de8:	f7fc baa5 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueOutOfRange);
 8010dec:	2427      	movs	r4, #39	@ 0x27
 8010dee:	f7fc baa2 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeUnsupportedCommand);
 8010df2:	2414      	movs	r4, #20
 8010df4:	f7fc ba9f 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueWordMissing);
 8010df8:	241c      	movs	r4, #28
 8010dfa:	f7fc ba9c 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeValueWordMissing);
 8010dfe:	241c      	movs	r4, #28
 8010e00:	f7fc ba99 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeCommandValueNotInteger);
 8010e04:	2417      	movs	r4, #23
 8010e06:	f7fc ba96 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeIllegalToolTableEntry);
 8010e0a:	2426      	movs	r4, #38	@ 0x26
 8010e0c:	f7fc ba93 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8010e10:	241c      	movs	r4, #28
 8010e12:	f7fc ba90 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue);
 8010e16:	2404      	movs	r4, #4
 8010e18:	f7fc ba8d 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010e1c:	2427      	movs	r4, #39	@ 0x27
 8010e1e:	f7fc ba8a 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8010e22:	241c      	movs	r4, #28
 8010e24:	f7fc ba87 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_ValueWordConflict);
 8010e28:	2430      	movs	r4, #48	@ 0x30
 8010e2a:	f7fc ba84 	b.w	800d336 <gc_execute_block+0x1ba>
 8010e2e:	bf00      	nop
 8010e30:	200014a0 	.word	0x200014a0
 8010e34:	20000df0 	.word	0x20000df0
 8010e38:	20000e74 	.word	0x20000e74
 8010e3c:	20000ec8 	.word	0x20000ec8
 8010e40:	20000f60 	.word	0x20000f60
 8010e44:	20000ef8 	.word	0x20000ef8
 8010e48:	20001528 	.word	0x20001528
 8010e4c:	200013a8 	.word	0x200013a8
 8010e50:	200011c0 	.word	0x200011c0
 8010e54:	200014e8 	.word	0x200014e8
 8010e58:	20000f00 	.word	0x20000f00
 8010e5c:	20000fb0 	.word	0x20000fb0
 8010e60:	20000ec4 	.word	0x20000ec4
                    FAIL(Status_GcodeValueOutOfRange);
 8010e64:	2427      	movs	r4, #39	@ 0x27
 8010e66:	f7fc ba66 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010e6a:	2427      	movs	r4, #39	@ 0x27
 8010e6c:	f7fc ba63 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_NegativeValue);
 8010e70:	2404      	movs	r4, #4
 8010e72:	f7fc ba60 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8010e76:	2427      	movs	r4, #39	@ 0x27
 8010e78:	f7fc ba5d 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8010e7c:	2427      	movs	r4, #39	@ 0x27
 8010e7e:	f7fc ba5a 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange);
 8010e82:	2427      	movs	r4, #39	@ 0x27
 8010e84:	f7fc ba57 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8010e88:	241c      	movs	r4, #28
 8010e8a:	f7fc ba54 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeRPMOutOfRange);
 8010e8e:	242c      	movs	r4, #44	@ 0x2c
 8010e90:	f7fc ba51 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeUnsupportedCommand);
 8010e94:	2414      	movs	r4, #20
 8010e96:	f7fc ba4e 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_NegativeValue);
 8010e9a:	2404      	movs	r4, #4
 8010e9c:	f7fc ba4b 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeValueWordMissing); // [P word missing]
 8010ea0:	241c      	movs	r4, #28
 8010ea2:	f7fc ba48 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8010ea6:	241a      	movs	r4, #26
 8010ea8:	f7fc ba45 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand);
 8010eac:	2414      	movs	r4, #20
 8010eae:	f7fc ba42 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8010eb2:	2426      	movs	r4, #38	@ 0x26
 8010eb4:	f7fc ba3f 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand);
 8010eb8:	2414      	movs	r4, #20
 8010eba:	f7fc ba3c 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 8010ebe:	241c      	movs	r4, #28
 8010ec0:	f7fc ba39 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8010ec4:	2426      	movs	r4, #38	@ 0x26
 8010ec6:	f7fc ba36 	b.w	800d336 <gc_execute_block+0x1ba>
 8010eca:	2426      	movs	r4, #38	@ 0x26
 8010ecc:	f7fc ba33 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words (or R word for tool offsets)]
 8010ed0:	241a      	movs	r4, #26
 8010ed2:	f7fc ba30 	b.w	800d336 <gc_execute_block+0x1ba>
 8010ed6:	241a      	movs	r4, #26
 8010ed8:	f7fc ba2d 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeValueWordMissing); // [P/L word missing]
 8010edc:	241c      	movs	r4, #28
 8010ede:	f7fc ba2a 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_NegativeValue);
 8010ee2:	2404      	movs	r4, #4
 8010ee4:	f7fc ba27 	b.w	800d336 <gc_execute_block+0x1ba>
 8010ee8:	2414      	movs	r4, #20
 8010eea:	f7fc ba24 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCommand); // [G10 L2 R not supported]
 8010eee:	2414      	movs	r4, #20
 8010ef0:	f7fc ba21 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCoordSys); // [Greater than N sys]
 8010ef4:	241d      	movs	r4, #29
 8010ef6:	f7fc ba1e 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_SettingReadFail); // [non-volatile storage read fail]
 8010efa:	2407      	movs	r4, #7
 8010efc:	f7fc ba1b 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GCodeCoordSystemLocked);
 8010f00:	2438      	movs	r4, #56	@ 0x38
 8010f02:	f7fc ba18 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeUnsupportedCommand);
 8010f06:	2414      	movs	r4, #20
 8010f08:	f7fc ba15 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8010f0c:	241a      	movs	r4, #26
 8010f0e:	f7fc ba12 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_SettingReadFail);
 8010f12:	2407      	movs	r4, #7
 8010f14:	f7fc ba0f 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [P word missing]
 8010f18:	241c      	movs	r4, #28
 8010f1a:	f7fc ba0c 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange); // [P word out of range]
 8010f1e:	2427      	movs	r4, #39	@ 0x27
 8010f20:	f7fc ba09 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_FlowControlStackOverflow); // [Call level too deep]
 8010f24:	2452      	movs	r4, #82	@ 0x52
 8010f26:	f7fc ba06 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_GcodeAxisWordsExist);
 8010f2a:	241f      	movs	r4, #31
 8010f2c:	f7fc ba03 	b.w	800d336 <gc_execute_block+0x1ba>
                 FAIL(Status_GcodeSpindleNotRunning);
 8010f30:	2429      	movs	r4, #41	@ 0x29
 8010f32:	f7fc ba00 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand); // [G33, G33.1]
 8010f36:	2414      	movs	r4, #20
 8010f38:	f7fc b9fd 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange); // [No distance (pitch) given]
 8010f3c:	2427      	movs	r4, #39	@ 0x27
 8010f3e:	f7fc b9fa 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnsupportedCommand); // [G76 not supported]
 8010f42:	2414      	movs	r4, #20
 8010f44:	f7fc b9f7 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeIllegalPlane); // [Plane not ZX]
 8010f48:	242a      	movs	r4, #42	@ 0x2a
 8010f4a:	f7fc b9f4 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeUnusedWords); // [Only X and Z axis words allowed]
 8010f4e:	2424      	movs	r4, #36	@ 0x24
 8010f50:	f7fc b9f1 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010f54:	2427      	movs	r4, #39	@ 0x27
 8010f56:	f7fc b9ee 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueWordMissing);
 8010f5a:	241c      	movs	r4, #28
 8010f5c:	f7fc b9eb 	b.w	800d336 <gc_execute_block+0x1ba>
 8010f60:	241c      	movs	r4, #28
 8010f62:	f7fc b9e8 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_NegativeValue);
 8010f66:	2404      	movs	r4, #4
 8010f68:	f7fc b9e5 	b.w	800d336 <gc_execute_block+0x1ba>
 8010f6c:	2404      	movs	r4, #4
 8010f6e:	f7fc b9e2 	b.w	800d336 <gc_execute_block+0x1ba>
 8010f72:	2404      	movs	r4, #4
 8010f74:	f7fc b9df 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010f78:	2427      	movs	r4, #39	@ 0x27
 8010f7a:	f7fc b9dc 	b.w	800d336 <gc_execute_block+0x1ba>
 8010f7e:	2427      	movs	r4, #39	@ 0x27
 8010f80:	f7fc b9d9 	b.w	800d336 <gc_execute_block+0x1ba>
 8010f84:	2427      	movs	r4, #39	@ 0x27
 8010f86:	f7fc b9d6 	b.w	800d336 <gc_execute_block+0x1ba>
 8010f8a:	2427      	movs	r4, #39	@ 0x27
 8010f8c:	f7fc b9d3 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeRPMOutOfRange);
 8010f90:	242c      	movs	r4, #44	@ 0x2c
 8010f92:	f7fc b9d0 	b.w	800d336 <gc_execute_block+0x1ba>
 8010f96:	242c      	movs	r4, #44	@ 0x2c
 8010f98:	f7fc b9cd 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeValueOutOfRange);
 8010f9c:	2427      	movs	r4, #39	@ 0x27
 8010f9e:	f7fc b9ca 	b.w	800d336 <gc_execute_block+0x1ba>
                FAIL(Status_GcodeUndefinedFeedRate); // [Feed rate undefined]
 8010fa2:	2416      	movs	r4, #22
 8010fa4:	f7fc b9c7 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_InvalidStatement);
 8010fa8:	2403      	movs	r4, #3
 8010faa:	f7fc b9c4 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 8010fae:	241c      	movs	r4, #28
 8010fb0:	f7fc b9c1 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing);
 8010fb4:	241c      	movs	r4, #28
 8010fb6:	f7fc b9be 	b.w	800d336 <gc_execute_block+0x1ba>
                    FAIL(Status_GcodeInvalidRetractPosition);
 8010fba:	2436      	movs	r4, #54	@ 0x36
 8010fbc:	f7fc b9bb 	b.w	800d336 <gc_execute_block+0x1ba>
                                FAIL(Status_NegativeValue);
 8010fc0:	2404      	movs	r4, #4
 8010fc2:	f7fc b9b8 	b.w	800d336 <gc_execute_block+0x1ba>
                                FAIL(Status_NegativeValue); // [Q <= 0]
 8010fc6:	2404      	movs	r4, #4
 8010fc8:	f7fc b9b5 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8010fcc:	241a      	movs	r4, #26
 8010fce:	f7fc b9b2 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWordsInPlane); // [No axis words in plane]
 8010fd2:	2420      	movs	r4, #32
 8010fd4:	f7fc b9af 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeCommandValueNotInteger); // [P word is not an integer]
 8010fd8:	2417      	movs	r4, #23
 8010fda:	f7fc b9ac 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeValueOutOfRange); // [P word is 0]
 8010fde:	2427      	movs	r4, #39	@ 0x27
 8010fe0:	f7fc b9a9 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 8010fe4:	2421      	movs	r4, #33	@ 0x21
 8010fe6:	f7fc b9a6 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeArcRadiusError); // [Arc radius error] TODO: this will fail due to limited float precision...
 8010fea:	2422      	movs	r4, #34	@ 0x22
 8010fec:	f7fc b9a3 	b.w	800d336 <gc_execute_block+0x1ba>
                            FAIL(Status_GcodeNoOffsetsInPlane);// [No offsets in plane]
 8010ff0:	2423      	movs	r4, #35	@ 0x23
 8010ff2:	f7fc b9a0 	b.w	800d336 <gc_execute_block+0x1ba>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.5mm
 8010ff6:	2421      	movs	r4, #33	@ 0x21
 8010ff8:	f7fc b99d 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 8010ffc:	242a      	movs	r4, #42	@ 0x2a
 8010ffe:	f7fc b99a 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 8011002:	2418      	movs	r4, #24
 8011004:	f7fc b997 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [P and Q are not both specified]
 8011008:	241c      	movs	r4, #28
 801100a:	f7fc b994 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified in the first of a series of G5 commands]
 801100e:	241c      	movs	r4, #28
 8011010:	f7fc b991 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 8011014:	242a      	movs	r4, #42	@ 0x2a
 8011016:	f7fc b98e 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 801101a:	2418      	movs	r4, #24
 801101c:	f7fc b98b 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified]
 8011020:	241c      	movs	r4, #28
 8011022:	f7fc b988 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeValueOutOfRange); // [I or J are zero]
 8011026:	2427      	movs	r4, #39	@ 0x27
 8011028:	f7fc b985 	b.w	800d336 <gc_execute_block+0x1ba>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 801102c:	241a      	movs	r4, #26
 801102e:	f7fc b982 	b.w	800d336 <gc_execute_block+0x1ba>
        FAIL(Status_GcodeUnusedWords); // [Unused words]
 8011032:	2424      	movs	r4, #36	@ 0x24
 8011034:	f7fc b97f 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_InvalidJogCommand);
 8011038:	2410      	movs	r4, #16
 801103a:	f7fc b97c 	b.w	800d336 <gc_execute_block+0x1ba>
            FAIL(Status_InvalidJogCommand);
 801103e:	2410      	movs	r4, #16
 8011040:	f7fc b979 	b.w	800d336 <gc_execute_block+0x1ba>

08011044 <dummy_bool_handler>:
#endif

void dummy_bool_handler (bool arg)
{
    // NOOP
}
 8011044:	4770      	bx	lr

08011046 <dummy_irq_claim>:
}

static bool dummy_irq_claim (irq_type_t irq, uint_fast8_t id, irq_callback_ptr callback)
{
    return false;
}
 8011046:	2000      	movs	r0, #0
 8011048:	4770      	bx	lr
	...

0801104c <get_homing_status>:
        task_add_delayed(realtime_report_check, NULL, settings.report_interval);
}

// "Wire" homing signals to limit signals, used when max limit inputs not available.
ISR_CODE static home_signals_t ISR_FUNC(get_homing_status)(void)
{
 801104c:	b500      	push	{lr}
 801104e:	b085      	sub	sp, #20
    home_signals_t home;
    limit_signals_t limits = hal.limits.get_state();
 8011050:	4b0d      	ldr	r3, [pc, #52]	@ (8011088 <get_homing_status+0x3c>)
 8011052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011054:	4798      	blx	r3
 8011056:	9001      	str	r0, [sp, #4]

    home.a.value = limits.min.value;
 8011058:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801105c:	f88d 3008 	strb.w	r3, [sp, #8]
    home.b.value = limits.min2.value;
 8011060:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011064:	f88d 3009 	strb.w	r3, [sp, #9]

    return home;
 8011068:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801106c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011070:	2000      	movs	r0, #0
 8011072:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011076:	f363 0007 	bfi	r0, r3, #0, #8
 801107a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801107e:	f363 200f 	bfi	r0, r3, #8, #8
}
 8011082:	b005      	add	sp, #20
 8011084:	f85d fb04 	ldr.w	pc, [sp], #4
 8011088:	200011c0 	.word	0x200011c0

0801108c <task_alloc>:
static inline core_task_t *task_alloc (void)
{
    core_task_t *task = NULL;
    uint_fast8_t idx = CORE_TASK_POOL_SIZE;

    if(last_freed) {
 801108c:	4b09      	ldr	r3, [pc, #36]	@ (80110b4 <task_alloc+0x28>)
 801108e:	6818      	ldr	r0, [r3, #0]
 8011090:	b110      	cbz	r0, 8011098 <task_alloc+0xc>
        task = last_freed;
        last_freed = NULL;
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]
 8011096:	4770      	bx	lr
    uint_fast8_t idx = CORE_TASK_POOL_SIZE;
 8011098:	231e      	movs	r3, #30
    } else do {
        if(task_pool[--idx].fn == NULL)
 801109a:	3b01      	subs	r3, #1
 801109c:	4a06      	ldr	r2, [pc, #24]	@ (80110b8 <task_alloc+0x2c>)
 801109e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80110a2:	6852      	ldr	r2, [r2, #4]
 80110a4:	b112      	cbz	r2, 80110ac <task_alloc+0x20>
            task = &task_pool[idx];
    } while(task == NULL && idx);
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1f7      	bne.n	801109a <task_alloc+0xe>

    return task;
}
 80110aa:	4770      	bx	lr
            task = &task_pool[idx];
 80110ac:	4802      	ldr	r0, [pc, #8]	@ (80110b8 <task_alloc+0x2c>)
 80110ae:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    } while(task == NULL && idx);
 80110b2:	4770      	bx	lr
 80110b4:	20000fd0 	.word	0x20000fd0
 80110b8:	20000fe0 	.word	0x20000fe0

080110bc <task_execute>:
    if(last_freed == NULL)
        last_freed = task;
}

static void task_execute (sys_state_t state)
{
 80110bc:	b538      	push	{r3, r4, r5, lr}
    static uint32_t last_ms = 0;

    core_task_t *task;

    if(immediate_task && sys.driver_started) {
 80110be:	4b27      	ldr	r3, [pc, #156]	@ (801115c <task_execute+0xa0>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	b1db      	cbz	r3, 80110fc <task_execute+0x40>
 80110c4:	4b26      	ldr	r3, [pc, #152]	@ (8011160 <task_execute+0xa4>)
 80110c6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80110ca:	b1bb      	cbz	r3, 80110fc <task_execute+0x40>

        hal.irq_disable();
 80110cc:	4d25      	ldr	r5, [pc, #148]	@ (8011164 <task_execute+0xa8>)
 80110ce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80110d0:	4798      	blx	r3
        task = immediate_task;
 80110d2:	4b22      	ldr	r3, [pc, #136]	@ (801115c <task_execute+0xa0>)
 80110d4:	681c      	ldr	r4, [r3, #0]
        immediate_task = NULL;
 80110d6:	2200      	movs	r2, #0
 80110d8:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 80110da:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80110dc:	4798      	blx	r3
 80110de:	e002      	b.n	80110e6 <task_execute+0x2a>

        do {
            void *data = task->data;
            foreground_task_ptr fn = task->fn;
            task_free(task);
            fn(data);
 80110e0:	4798      	blx	r3
        } while((task = task->next));
 80110e2:	68e4      	ldr	r4, [r4, #12]
 80110e4:	b154      	cbz	r4, 80110fc <task_execute+0x40>
            void *data = task->data;
 80110e6:	68a0      	ldr	r0, [r4, #8]
            foreground_task_ptr fn = task->fn;
 80110e8:	6863      	ldr	r3, [r4, #4]
    task->fn = NULL;
 80110ea:	2200      	movs	r2, #0
 80110ec:	6062      	str	r2, [r4, #4]
    if(last_freed == NULL)
 80110ee:	4a1e      	ldr	r2, [pc, #120]	@ (8011168 <task_execute+0xac>)
 80110f0:	6812      	ldr	r2, [r2, #0]
 80110f2:	2a00      	cmp	r2, #0
 80110f4:	d1f4      	bne.n	80110e0 <task_execute+0x24>
        last_freed = task;
 80110f6:	4a1c      	ldr	r2, [pc, #112]	@ (8011168 <task_execute+0xac>)
 80110f8:	6014      	str	r4, [r2, #0]
 80110fa:	e7f1      	b.n	80110e0 <task_execute+0x24>
    }

    uint32_t now = hal.get_elapsed_ticks();
 80110fc:	4b19      	ldr	r3, [pc, #100]	@ (8011164 <task_execute+0xa8>)
 80110fe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8011102:	4798      	blx	r3
 8011104:	4605      	mov	r5, r0
    if(now == last_ms || next_task == systick_task)
 8011106:	4b19      	ldr	r3, [pc, #100]	@ (801116c <task_execute+0xb0>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4283      	cmp	r3, r0
 801110c:	d025      	beq.n	801115a <task_execute+0x9e>
 801110e:	4b18      	ldr	r3, [pc, #96]	@ (8011170 <task_execute+0xb4>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	4a18      	ldr	r2, [pc, #96]	@ (8011174 <task_execute+0xb8>)
 8011114:	6814      	ldr	r4, [r2, #0]
 8011116:	42a3      	cmp	r3, r4
 8011118:	d01f      	beq.n	801115a <task_execute+0x9e>
        return;

    last_ms = now;
 801111a:	4b14      	ldr	r3, [pc, #80]	@ (801116c <task_execute+0xb0>)
 801111c:	6018      	str	r0, [r3, #0]

    if((task = systick_task)) do {
 801111e:	b154      	cbz	r4, 8011136 <task_execute+0x7a>
        task->fn(task->data);
 8011120:	6863      	ldr	r3, [r4, #4]
 8011122:	68a0      	ldr	r0, [r4, #8]
 8011124:	4798      	blx	r3
    } while((task = task->next));
 8011126:	68e4      	ldr	r4, [r4, #12]
 8011128:	2c00      	cmp	r4, #0
 801112a:	d1f9      	bne.n	8011120 <task_execute+0x64>
 801112c:	e003      	b.n	8011136 <task_execute+0x7a>
    while(next_task && (int32_t)(next_task->time - now) <= 0) {

        void *data = next_task->data;
        foreground_task_ptr fn = next_task->fn;
        task_free(next_task);
        next_task = next_task->next;
 801112e:	68d9      	ldr	r1, [r3, #12]
 8011130:	4b0f      	ldr	r3, [pc, #60]	@ (8011170 <task_execute+0xb4>)
 8011132:	6019      	str	r1, [r3, #0]

        fn(data);
 8011134:	4790      	blx	r2
    while(next_task && (int32_t)(next_task->time - now) <= 0) {
 8011136:	4b0e      	ldr	r3, [pc, #56]	@ (8011170 <task_execute+0xb4>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	b173      	cbz	r3, 801115a <task_execute+0x9e>
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	1b52      	subs	r2, r2, r5
 8011140:	2a00      	cmp	r2, #0
 8011142:	dc0a      	bgt.n	801115a <task_execute+0x9e>
        void *data = next_task->data;
 8011144:	6898      	ldr	r0, [r3, #8]
        foreground_task_ptr fn = next_task->fn;
 8011146:	685a      	ldr	r2, [r3, #4]
    task->fn = NULL;
 8011148:	2100      	movs	r1, #0
 801114a:	6059      	str	r1, [r3, #4]
    if(last_freed == NULL)
 801114c:	4906      	ldr	r1, [pc, #24]	@ (8011168 <task_execute+0xac>)
 801114e:	6809      	ldr	r1, [r1, #0]
 8011150:	2900      	cmp	r1, #0
 8011152:	d1ec      	bne.n	801112e <task_execute+0x72>
        last_freed = task;
 8011154:	4904      	ldr	r1, [pc, #16]	@ (8011168 <task_execute+0xac>)
 8011156:	600b      	str	r3, [r1, #0]
 8011158:	e7e9      	b.n	801112e <task_execute+0x72>
    }
}
 801115a:	bd38      	pop	{r3, r4, r5, pc}
 801115c:	20000fd8 	.word	0x20000fd8
 8011160:	200014a0 	.word	0x200014a0
 8011164:	200011c0 	.word	0x200011c0
 8011168:	20000fd0 	.word	0x20000fd0
 801116c:	20000fcc 	.word	0x20000fcc
 8011170:	20000fdc 	.word	0x20000fdc
 8011174:	20000fd4 	.word	0x20000fd4

08011178 <reset_handler>:
{
 8011178:	b508      	push	{r3, lr}
    report_init_fns();
 801117a:	f00a fbb1 	bl	801b8e0 <report_init_fns>
    grbl.on_macro_return = NULL;
 801117e:	4b02      	ldr	r3, [pc, #8]	@ (8011188 <reset_handler+0x10>)
 8011180:	2200      	movs	r2, #0
 8011182:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 8011186:	bd08      	pop	{r3, pc}
 8011188:	200013a8 	.word	0x200013a8

0801118c <get_homing_status2>:
{
 801118c:	b500      	push	{lr}
 801118e:	b085      	sub	sp, #20
    limit_signals_t source = xbar_get_homing_source(), limits = hal.limits.get_state();
 8011190:	f7fb fbc4 	bl	800c91c <xbar_get_homing_source>
 8011194:	9001      	str	r0, [sp, #4]
 8011196:	4b17      	ldr	r3, [pc, #92]	@ (80111f4 <get_homing_status2+0x68>)
 8011198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801119a:	4798      	blx	r3
 801119c:	9000      	str	r0, [sp, #0]
    home.a.value = (limits.min.value & source.min.mask) | (limits.max.value & source.max.mask);
 801119e:	f89d 3000 	ldrb.w	r3, [sp]
 80111a2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80111a6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80111aa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80111ae:	4003      	ands	r3, r0
 80111b0:	400a      	ands	r2, r1
 80111b2:	4313      	orrs	r3, r2
 80111b4:	f88d 3008 	strb.w	r3, [sp, #8]
    home.b.value = (limits.min2.value & source.min2.mask) | (limits.max2.value & source.max2.mask);
 80111b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80111bc:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80111c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80111c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80111c8:	4003      	ands	r3, r0
 80111ca:	400a      	ands	r2, r1
 80111cc:	4313      	orrs	r3, r2
 80111ce:	f88d 3009 	strb.w	r3, [sp, #9]
    return home;
 80111d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80111d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80111da:	2000      	movs	r0, #0
 80111dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80111e0:	f363 0007 	bfi	r0, r3, #0, #8
 80111e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80111e8:	f363 200f 	bfi	r0, r3, #8, #8
}
 80111ec:	b005      	add	sp, #20
 80111ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80111f2:	bf00      	nop
 80111f4:	200011c0 	.word	0x200011c0

080111f8 <report_driver_error>:
{
 80111f8:	b510      	push	{r4, lr}
 80111fa:	b08a      	sub	sp, #40	@ 0x28
    driver.ok = ~driver.ok;
 80111fc:	4b13      	ldr	r3, [pc, #76]	@ (801124c <report_driver_error+0x54>)
 80111fe:	f893 e000 	ldrb.w	lr, [r3]
 8011202:	ea6f 0e0e 	mvn.w	lr, lr
 8011206:	fa5f fe8e 	uxtb.w	lr, lr
 801120a:	f883 e000 	strb.w	lr, [r3]
    strcpy(msg, "Fatal: Incompatible driver (");
 801120e:	46ec      	mov	ip, sp
 8011210:	4c0f      	ldr	r4, [pc, #60]	@ (8011250 <report_driver_error+0x58>)
 8011212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011218:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801121c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8011220:	f88c 3000 	strb.w	r3, [ip]
    strcat(msg, uitoa(driver.ok));
 8011224:	4670      	mov	r0, lr
 8011226:	f004 f84b 	bl	80152c0 <uitoa>
 801122a:	4601      	mov	r1, r0
 801122c:	4668      	mov	r0, sp
 801122e:	f013 fa06 	bl	802463e <strcat>
    strcat(msg, ")");
 8011232:	4668      	mov	r0, sp
 8011234:	f7f6 ff64 	bl	8008100 <strlen>
 8011238:	4b06      	ldr	r3, [pc, #24]	@ (8011254 <report_driver_error+0x5c>)
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	f82d 3000 	strh.w	r3, [sp, r0]
    report_message(msg, Message_Plain);
 8011240:	2100      	movs	r1, #0
 8011242:	4668      	mov	r0, sp
 8011244:	f007 fef8 	bl	8019038 <report_message>
}
 8011248:	b00a      	add	sp, #40	@ 0x28
 801124a:	bd10      	pop	{r4, pc}
 801124c:	200001c0 	.word	0x200001c0
 8011250:	0802aae8 	.word	0x0802aae8
 8011254:	0802ab08 	.word	0x0802ab08

08011258 <task_add_delayed>:

ISR_CODE bool ISR_FUNC(task_add_delayed)(foreground_task_ptr fn, void *data, uint32_t delay_ms)
{
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	4604      	mov	r4, r0
 801125c:	460e      	mov	r6, r1
 801125e:	4617      	mov	r7, r2
    core_task_t *task = NULL;

    hal.irq_disable();
 8011260:	4b19      	ldr	r3, [pc, #100]	@ (80112c8 <task_add_delayed+0x70>)
 8011262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011264:	4798      	blx	r3

    if(fn && (task = task_alloc())) {
 8011266:	b334      	cbz	r4, 80112b6 <task_add_delayed+0x5e>
 8011268:	f7ff ff10 	bl	801108c <task_alloc>
 801126c:	4605      	mov	r5, r0
 801126e:	b318      	cbz	r0, 80112b8 <task_add_delayed+0x60>

        task->time = hal.get_elapsed_ticks() + delay_ms;
 8011270:	4b15      	ldr	r3, [pc, #84]	@ (80112c8 <task_add_delayed+0x70>)
 8011272:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8011276:	4798      	blx	r3
 8011278:	4438      	add	r0, r7
 801127a:	6028      	str	r0, [r5, #0]
        task->fn = fn;
 801127c:	606c      	str	r4, [r5, #4]
        task->data = data;
 801127e:	60ae      	str	r6, [r5, #8]
        task->next = NULL;
 8011280:	2300      	movs	r3, #0
 8011282:	60eb      	str	r3, [r5, #12]

        if(next_task == NULL)
 8011284:	4b11      	ldr	r3, [pc, #68]	@ (80112cc <task_add_delayed+0x74>)
 8011286:	681c      	ldr	r4, [r3, #0]
 8011288:	b164      	cbz	r4, 80112a4 <task_add_delayed+0x4c>
            next_task = task;
        else if((int32_t)(task->time - next_task->time) < 0) {
 801128a:	6823      	ldr	r3, [r4, #0]
 801128c:	1ac3      	subs	r3, r0, r3
 801128e:	2b00      	cmp	r3, #0
 8011290:	db0a      	blt.n	80112a8 <task_add_delayed+0x50>
            task->next = next_task;
            next_task = task;
        } else {
            core_task_t *t = next_task;
            while(t) {
 8011292:	b18c      	cbz	r4, 80112b8 <task_add_delayed+0x60>
                if(t->next == NULL || (int32_t)(task->time - t->next->time) < 0) {
 8011294:	68e3      	ldr	r3, [r4, #12]
 8011296:	b15b      	cbz	r3, 80112b0 <task_add_delayed+0x58>
 8011298:	6819      	ldr	r1, [r3, #0]
 801129a:	1a41      	subs	r1, r0, r1
 801129c:	2900      	cmp	r1, #0
 801129e:	db07      	blt.n	80112b0 <task_add_delayed+0x58>
                    task->next = t->next;
                    t->next = task;
                    break;
                }
                t = t->next;
 80112a0:	461c      	mov	r4, r3
 80112a2:	e7f6      	b.n	8011292 <task_add_delayed+0x3a>
            next_task = task;
 80112a4:	601d      	str	r5, [r3, #0]
 80112a6:	e007      	b.n	80112b8 <task_add_delayed+0x60>
            task->next = next_task;
 80112a8:	60ec      	str	r4, [r5, #12]
            next_task = task;
 80112aa:	4b08      	ldr	r3, [pc, #32]	@ (80112cc <task_add_delayed+0x74>)
 80112ac:	601d      	str	r5, [r3, #0]
 80112ae:	e003      	b.n	80112b8 <task_add_delayed+0x60>
                    task->next = t->next;
 80112b0:	60eb      	str	r3, [r5, #12]
                    t->next = task;
 80112b2:	60e5      	str	r5, [r4, #12]
                    break;
 80112b4:	e000      	b.n	80112b8 <task_add_delayed+0x60>
    core_task_t *task = NULL;
 80112b6:	2500      	movs	r5, #0
            }
        }
    }

    hal.irq_enable();
 80112b8:	4b03      	ldr	r3, [pc, #12]	@ (80112c8 <task_add_delayed+0x70>)
 80112ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80112bc:	4798      	blx	r3

    return task != NULL;
}
 80112be:	1e28      	subs	r0, r5, #0
 80112c0:	bf18      	it	ne
 80112c2:	2001      	movne	r0, #1
 80112c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112c6:	bf00      	nop
 80112c8:	200011c0 	.word	0x200011c0
 80112cc:	20000fdc 	.word	0x20000fdc

080112d0 <grbl_enter>:
{
 80112d0:	b570      	push	{r4, r5, r6, lr}
    memset(&grbl, 0, sizeof(grbl_t));
 80112d2:	4c9e      	ldr	r4, [pc, #632]	@ (801154c <grbl_enter+0x27c>)
 80112d4:	22f8      	movs	r2, #248	@ 0xf8
 80112d6:	2100      	movs	r1, #0
 80112d8:	4620      	mov	r0, r4
 80112da:	f013 f9a8 	bl	802462e <memset>
    grbl.on_execute_realtime = grbl.on_execute_delay = task_execute;
 80112de:	4b9c      	ldr	r3, [pc, #624]	@ (8011550 <grbl_enter+0x280>)
 80112e0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80112e2:	64a3      	str	r3, [r4, #72]	@ 0x48
    grbl.enqueue_gcode = protocol_enqueue_gcode;
 80112e4:	4b9b      	ldr	r3, [pc, #620]	@ (8011554 <grbl_enter+0x284>)
 80112e6:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
    grbl.enqueue_realtime_command = stream_enqueue_realtime_command;
 80112ea:	4b9b      	ldr	r3, [pc, #620]	@ (8011558 <grbl_enter+0x288>)
 80112ec:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
    grbl.on_report_options = dummy_bool_handler;
 80112f0:	4b9a      	ldr	r3, [pc, #616]	@ (801155c <grbl_enter+0x28c>)
 80112f2:	6563      	str	r3, [r4, #84]	@ 0x54
    grbl.on_report_command_help = system_command_help;
 80112f4:	4b9a      	ldr	r3, [pc, #616]	@ (8011560 <grbl_enter+0x290>)
 80112f6:	65e3      	str	r3, [r4, #92]	@ 0x5c
    grbl.on_get_alarms = alarms_get_details;
 80112f8:	4b9a      	ldr	r3, [pc, #616]	@ (8011564 <grbl_enter+0x294>)
 80112fa:	66e3      	str	r3, [r4, #108]	@ 0x6c
    grbl.on_get_errors = errors_get_details;
 80112fc:	4b9a      	ldr	r3, [pc, #616]	@ (8011568 <grbl_enter+0x298>)
 80112fe:	6723      	str	r3, [r4, #112]	@ 0x70
    grbl.on_get_settings = settings_get_details;
 8011300:	4b9a      	ldr	r3, [pc, #616]	@ (801156c <grbl_enter+0x29c>)
 8011302:	6763      	str	r3, [r4, #116]	@ 0x74
    memset(&hal, 0, sizeof(grbl_hal_t));
 8011304:	4c9a      	ldr	r4, [pc, #616]	@ (8011570 <grbl_enter+0x2a0>)
 8011306:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801130a:	2100      	movs	r1, #0
 801130c:	4620      	mov	r0, r4
 801130e:	f013 f98e 	bl	802462e <memset>
    hal.version = HAL_VERSION; // Update when signatures and/or contract is changed - driver_init() should fail
 8011312:	230a      	movs	r3, #10
 8011314:	6023      	str	r3, [r4, #0]
    hal.driver_reset = reset_handler;
 8011316:	4b97      	ldr	r3, [pc, #604]	@ (8011574 <grbl_enter+0x2a4>)
 8011318:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
    hal.irq_enable = dummy_handler;
 801131c:	4b96      	ldr	r3, [pc, #600]	@ (8011578 <grbl_enter+0x2a8>)
 801131e:	64a3      	str	r3, [r4, #72]	@ 0x48
    hal.irq_disable = dummy_handler;
 8011320:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hal.irq_claim = dummy_irq_claim;
 8011322:	4b96      	ldr	r3, [pc, #600]	@ (801157c <grbl_enter+0x2ac>)
 8011324:	6523      	str	r3, [r4, #80]	@ 0x50
    hal.nvs.size = GRBL_NVS_SIZE;
 8011326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801132a:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
    hal.coolant_cap.flood = On;
 801132e:	f894 31e4 	ldrb.w	r3, [r4, #484]	@ 0x1e4
 8011332:	f043 0301 	orr.w	r3, r3, #1
 8011336:	f884 31e4 	strb.w	r3, [r4, #484]	@ 0x1e4
    hal.limits.interrupt_callback = limit_interrupt_handler;
 801133a:	4b91      	ldr	r3, [pc, #580]	@ (8011580 <grbl_enter+0x2b0>)
 801133c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hal.control.interrupt_callback = control_interrupt_handler;
 801133e:	4b91      	ldr	r3, [pc, #580]	@ (8011584 <grbl_enter+0x2b4>)
 8011340:	66e3      	str	r3, [r4, #108]	@ 0x6c
    hal.stepper.interrupt_callback = stepper_driver_interrupt_handler;
 8011342:	4b91      	ldr	r3, [pc, #580]	@ (8011588 <grbl_enter+0x2b8>)
 8011344:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    hal.stream_blocking_callback = stream_tx_blocking;
 8011348:	4b90      	ldr	r3, [pc, #576]	@ (801158c <grbl_enter+0x2bc>)
 801134a:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
    hal.signals_cap.reset = hal.signals_cap.feed_hold = hal.signals_cap.cycle_start = On;
 801134e:	f894 31dc 	ldrb.w	r3, [r4, #476]	@ 0x1dc
 8011352:	f043 0304 	orr.w	r3, r3, #4
 8011356:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
 801135a:	b2db      	uxtb	r3, r3
 801135c:	f043 0302 	orr.w	r3, r3, #2
 8011360:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
 8011364:	b2db      	uxtb	r3, r3
 8011366:	f043 0301 	orr.w	r3, r3, #1
 801136a:	f884 31dc 	strb.w	r3, [r4, #476]	@ 0x1dc
    sys.cold_start = true;
 801136e:	4e88      	ldr	r6, [pc, #544]	@ (8011590 <grbl_enter+0x2c0>)
 8011370:	2301      	movs	r3, #1
 8011372:	f886 307d 	strb.w	r3, [r6, #125]	@ 0x7d
    limits_init();
 8011376:	f002 f875 	bl	8013464 <limits_init>
    nvs_buffer_alloc(); // Allocate memory block for NVS buffer
 801137a:	f004 fb4b 	bl	8015a14 <nvs_buffer_alloc>
    settings_clear();
 801137e:	f00c f9e3 	bl	801d748 <settings_clear>
    report_init_fns();
 8011382:	f00a faad 	bl	801b8e0 <report_init_fns>
    driver.init = driver_init();
 8011386:	f7f9 fdc9 	bl	800af1c <driver_init>
 801138a:	4d82      	ldr	r5, [pc, #520]	@ (8011594 <grbl_enter+0x2c4>)
 801138c:	782b      	ldrb	r3, [r5, #0]
 801138e:	f360 0300 	bfi	r3, r0, #0, #1
 8011392:	702b      	strb	r3, [r5, #0]
    nvs_buffer_init();
 8011394:	f004 fb52 	bl	8015a3c <nvs_buffer_init>
    settings_init(); // Load settings from non-volatile storage
 8011398:	f00c f9e0 	bl	801d75c <settings_init>
    memset(sys.position, 0, sizeof(sys.position)); // Clear machine position.
 801139c:	2300      	movs	r3, #0
 801139e:	f8c6 3088 	str.w	r3, [r6, #136]	@ 0x88
 80113a2:	f8c6 308c 	str.w	r3, [r6, #140]	@ 0x8c
 80113a6:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
    driver.amass = hal.driver_cap.amass_level >= MAX_AMASS_LEVEL;
 80113aa:	f894 21d8 	ldrb.w	r2, [r4, #472]	@ 0x1d8
 80113ae:	f002 0160 	and.w	r1, r2, #96	@ 0x60
 80113b2:	2960      	cmp	r1, #96	@ 0x60
 80113b4:	bf14      	ite	ne
 80113b6:	2100      	movne	r1, #0
 80113b8:	2101      	moveq	r1, #1
 80113ba:	7828      	ldrb	r0, [r5, #0]
 80113bc:	f361 00c3 	bfi	r0, r1, #3, #1
 80113c0:	7028      	strb	r0, [r5, #0]
    hal.driver_cap.amass_level = MAX_AMASS_LEVEL;
 80113c2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80113c6:	f884 21d8 	strb.w	r2, [r4, #472]	@ 0x1d8
    driver.pulse_delay = hal.driver_cap.step_pulse_delay;
 80113ca:	b2d2      	uxtb	r2, r2
 80113cc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80113d0:	b2c1      	uxtb	r1, r0
 80113d2:	f362 1104 	bfi	r1, r2, #4, #1
 80113d6:	7029      	strb	r1, [r5, #0]
    sys.mpg_mode = false;
 80113d8:	f886 307f 	strb.w	r3, [r6, #127]	@ 0x7f
    if(driver.ok == 0xFF)
 80113dc:	b2cb      	uxtb	r3, r1
 80113de:	2bff      	cmp	r3, #255	@ 0xff
 80113e0:	d054      	beq.n	801148c <grbl_enter+0x1bc>
    if((driver.spindle = spindle_select(settings.spindle.flags.type))) {
 80113e2:	4b6d      	ldr	r3, [pc, #436]	@ (8011598 <grbl_enter+0x2c8>)
 80113e4:	f893 00e7 	ldrb.w	r0, [r3, #231]	@ 0xe7
 80113e8:	f3c0 0084 	ubfx	r0, r0, #2, #5
 80113ec:	f00c fdd6 	bl	801df9c <spindle_select>
 80113f0:	4b68      	ldr	r3, [pc, #416]	@ (8011594 <grbl_enter+0x2c4>)
 80113f2:	781a      	ldrb	r2, [r3, #0]
 80113f4:	f360 0282 	bfi	r2, r0, #2, #1
 80113f8:	701a      	strb	r2, [r3, #0]
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d052      	beq.n	80114a4 <grbl_enter+0x1d4>
        spindle_ptrs_t *spindle = spindle_get(0);
 80113fe:	2000      	movs	r0, #0
 8011400:	f00c fd92 	bl	801df28 <spindle_get>
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 8011404:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011406:	2b00      	cmp	r3, #0
 8011408:	d048      	beq.n	801149c <grbl_enter+0x1cc>
 801140a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801140c:	2b00      	cmp	r3, #0
 801140e:	d047      	beq.n	80114a0 <grbl_enter+0x1d0>
 8011410:	2101      	movs	r1, #1
 8011412:	4b60      	ldr	r3, [pc, #384]	@ (8011594 <grbl_enter+0x2c4>)
 8011414:	781a      	ldrb	r2, [r3, #0]
 8011416:	f361 0282 	bfi	r2, r1, #2, #1
 801141a:	701a      	strb	r2, [r3, #0]
    if(driver.ok != 0xFF) {
 801141c:	4b5d      	ldr	r3, [pc, #372]	@ (8011594 <grbl_enter+0x2c4>)
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2bff      	cmp	r3, #255	@ 0xff
 8011422:	d149      	bne.n	80114b8 <grbl_enter+0x1e8>
    hal.stepper.enable(settings.steppers.deenergize);
 8011424:	4c52      	ldr	r4, [pc, #328]	@ (8011570 <grbl_enter+0x2a0>)
 8011426:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 801142a:	4a5b      	ldr	r2, [pc, #364]	@ (8011598 <grbl_enter+0x2c8>)
 801142c:	f892 00ec 	ldrb.w	r0, [r2, #236]	@ 0xec
 8011430:	4798      	blx	r3
    spindle_all_off();
 8011432:	f00c ff85 	bl	801e340 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 8011436:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011438:	f04f 0000 	mov.w	r0, #0
 801143c:	4798      	blx	r3
    if(hal.get_position)
 801143e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	@ 0x1d0
 8011442:	b10b      	cbz	r3, 8011448 <grbl_enter+0x178>
        hal.get_position(&sys.position); // TODO: restore on abort when returns true?
 8011444:	4855      	ldr	r0, [pc, #340]	@ (801159c <grbl_enter+0x2cc>)
 8011446:	4798      	blx	r3
    sys.driver_started = sys.alarm != Alarm_SelftestFailed;
 8011448:	4a51      	ldr	r2, [pc, #324]	@ (8011590 <grbl_enter+0x2c0>)
 801144a:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 801144e:	3b10      	subs	r3, #16
 8011450:	bf18      	it	ne
 8011452:	2301      	movne	r3, #1
 8011454:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
    if(hal.homing.get_state == NULL || settings.homing.flags.use_limit_switches)
 8011458:	4b45      	ldr	r3, [pc, #276]	@ (8011570 <grbl_enter+0x2a0>)
 801145a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801145c:	b123      	cbz	r3, 8011468 <grbl_enter+0x198>
 801145e:	4b4e      	ldr	r3, [pc, #312]	@ (8011598 <grbl_enter+0x2c8>)
 8011460:	f993 3114 	ldrsb.w	r3, [r3, #276]	@ 0x114
 8011464:	2b00      	cmp	r3, #0
 8011466:	da06      	bge.n	8011476 <grbl_enter+0x1a6>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 8011468:	4b41      	ldr	r3, [pc, #260]	@ (8011570 <grbl_enter+0x2a0>)
 801146a:	f893 31df 	ldrb.w	r3, [r3, #479]	@ 0x1df
 801146e:	b363      	cbz	r3, 80114ca <grbl_enter+0x1fa>
 8011470:	4a4b      	ldr	r2, [pc, #300]	@ (80115a0 <grbl_enter+0x2d0>)
 8011472:	4b3f      	ldr	r3, [pc, #252]	@ (8011570 <grbl_enter+0x2a0>)
 8011474:	661a      	str	r2, [r3, #96]	@ 0x60
    if(settings.report_interval)
 8011476:	4b48      	ldr	r3, [pc, #288]	@ (8011598 <grbl_enter+0x2c8>)
 8011478:	8a9a      	ldrh	r2, [r3, #20]
 801147a:	bb42      	cbnz	r2, 80114ce <grbl_enter+0x1fe>
    if(hal.driver_cap.sd_card || hal.driver_cap.littlefs) {
 801147c:	4b3c      	ldr	r3, [pc, #240]	@ (8011570 <grbl_enter+0x2a0>)
 801147e:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8011482:	f013 0f06 	tst.w	r3, #6
 8011486:	d127      	bne.n	80114d8 <grbl_enter+0x208>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011488:	2301      	movs	r3, #1
 801148a:	e096      	b.n	80115ba <grbl_enter+0x2ea>
        driver.setup = hal.driver_setup(&settings);
 801148c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801148e:	4842      	ldr	r0, [pc, #264]	@ (8011598 <grbl_enter+0x2c8>)
 8011490:	4798      	blx	r3
 8011492:	782a      	ldrb	r2, [r5, #0]
 8011494:	f360 0241 	bfi	r2, r0, #1, #1
 8011498:	702a      	strb	r2, [r5, #0]
 801149a:	e7a2      	b.n	80113e2 <grbl_enter+0x112>
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 801149c:	2101      	movs	r1, #1
 801149e:	e7b8      	b.n	8011412 <grbl_enter+0x142>
 80114a0:	2100      	movs	r1, #0
 80114a2:	e7b6      	b.n	8011412 <grbl_enter+0x142>
        driver.spindle = spindle_select(spindle_add_null());
 80114a4:	f00c fd56 	bl	801df54 <spindle_add_null>
 80114a8:	f00c fd78 	bl	801df9c <spindle_select>
 80114ac:	4b39      	ldr	r3, [pc, #228]	@ (8011594 <grbl_enter+0x2c4>)
 80114ae:	781a      	ldrb	r2, [r3, #0]
 80114b0:	f360 0282 	bfi	r2, r0, #2, #1
 80114b4:	701a      	strb	r2, [r3, #0]
 80114b6:	e7b1      	b.n	801141c <grbl_enter+0x14c>
        sys.alarm = Alarm_SelftestFailed;
 80114b8:	4b35      	ldr	r3, [pc, #212]	@ (8011590 <grbl_enter+0x2c0>)
 80114ba:	2210      	movs	r2, #16
 80114bc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        protocol_enqueue_foreground_task(report_driver_error, NULL);
 80114c0:	2100      	movs	r1, #0
 80114c2:	4838      	ldr	r0, [pc, #224]	@ (80115a4 <grbl_enter+0x2d4>)
 80114c4:	f006 f944 	bl	8017750 <protocol_enqueue_foreground_task>
 80114c8:	e7ac      	b.n	8011424 <grbl_enter+0x154>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 80114ca:	4a37      	ldr	r2, [pc, #220]	@ (80115a8 <grbl_enter+0x2d8>)
 80114cc:	e7d1      	b.n	8011472 <grbl_enter+0x1a2>
        task_add_delayed(auto_realtime_report, NULL, settings.report_interval);
 80114ce:	2100      	movs	r1, #0
 80114d0:	4836      	ldr	r0, [pc, #216]	@ (80115ac <grbl_enter+0x2dc>)
 80114d2:	f7ff fec1 	bl	8011258 <task_add_delayed>
 80114d6:	e7d1      	b.n	801147c <grbl_enter+0x1ac>
        fs_options_t fs_options = {0};
 80114d8:	f04f 0100 	mov.w	r1, #0
        fs_options.lfs_hidden = hal.driver_cap.littlefs;
 80114dc:	4b24      	ldr	r3, [pc, #144]	@ (8011570 <grbl_enter+0x2a0>)
 80114de:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 80114e2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80114e6:	f362 0141 	bfi	r1, r2, #1, #1
        fs_options.sd_mount_on_boot = hal.driver_cap.sd_card;
 80114ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80114ee:	f363 0100 	bfi	r1, r3, #0, #1
        setting_remove_elements(Setting_FSOptions, fs_options.mask);
 80114f2:	b2c9      	uxtb	r1, r1
 80114f4:	f240 208a 	movw	r0, #650	@ 0x28a
 80114f8:	f00b ffc8 	bl	801d48c <setting_remove_elements>
 80114fc:	e7c4      	b.n	8011488 <grbl_enter+0x1b8>
            memset(&sys, 0, offsetof(system_t, alarm)); // Clear system variables except state & alarm.
 80114fe:	227c      	movs	r2, #124	@ 0x7c
 8011500:	2100      	movs	r1, #0
 8011502:	4823      	ldr	r0, [pc, #140]	@ (8011590 <grbl_enter+0x2c0>)
 8011504:	f013 f893 	bl	802462e <memset>
 8011508:	e06a      	b.n	80115e0 <grbl_enter+0x310>
                spindle_get(spindle_num)->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE; // Set to 100%
 801150a:	2000      	movs	r0, #0
 801150c:	f00c fd0c 	bl	801df28 <spindle_get>
 8011510:	6843      	ldr	r3, [r0, #4]
 8011512:	2264      	movs	r2, #100	@ 0x64
 8011514:	60da      	str	r2, [r3, #12]
 8011516:	e06f      	b.n	80115f8 <grbl_enter+0x328>
            tc_init();
 8011518:	f010 fe46 	bl	80221a8 <tc_init>
 801151c:	e0b2      	b.n	8011684 <grbl_enter+0x3b4>
        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 801151e:	f00d f993 	bl	801e848 <state_get>
 8011522:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8011526:	f040 80b6 	bne.w	8011696 <grbl_enter+0x3c6>
            state_set(STATE_ALARM);
 801152a:	2001      	movs	r0, #1
 801152c:	f00d f992 	bl	801e854 <state_set>
 8011530:	e0b1      	b.n	8011696 <grbl_enter+0x3c6>
            protocol_enqueue_realtime_command(sys.mpg_mode ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8011532:	4b17      	ldr	r3, [pc, #92]	@ (8011590 <grbl_enter+0x2c0>)
 8011534:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8011538:	b11b      	cbz	r3, 8011542 <grbl_enter+0x272>
 801153a:	2087      	movs	r0, #135	@ 0x87
 801153c:	f006 f92e 	bl	801779c <protocol_enqueue_realtime_command>
 8011540:	e0af      	b.n	80116a2 <grbl_enter+0x3d2>
 8011542:	2080      	movs	r0, #128	@ 0x80
 8011544:	e7fa      	b.n	801153c <grbl_enter+0x26c>
            looping = hal.driver_release == NULL || hal.driver_release();
 8011546:	2301      	movs	r3, #1
 8011548:	e033      	b.n	80115b2 <grbl_enter+0x2e2>
 801154a:	bf00      	nop
 801154c:	200013a8 	.word	0x200013a8
 8011550:	080110bd 	.word	0x080110bd
 8011554:	08016aa1 	.word	0x08016aa1
 8011558:	08020411 	.word	0x08020411
 801155c:	08011045 	.word	0x08011045
 8011560:	0802142d 	.word	0x0802142d
 8011564:	0800c841 	.word	0x0800c841
 8011568:	0800ca1d 	.word	0x0800ca1d
 801156c:	0801c91d 	.word	0x0801c91d
 8011570:	200011c0 	.word	0x200011c0
 8011574:	08011179 	.word	0x08011179
 8011578:	080157ef 	.word	0x080157ef
 801157c:	08011047 	.word	0x08011047
 8011580:	08012ba5 	.word	0x08012ba5
 8011584:	08021059 	.word	0x08021059
 8011588:	0801f325 	.word	0x0801f325
 801158c:	08020369 	.word	0x08020369
 8011590:	200014a0 	.word	0x200014a0
 8011594:	200001c0 	.word	0x200001c0
 8011598:	20001bd8 	.word	0x20001bd8
 801159c:	20001528 	.word	0x20001528
 80115a0:	0801118d 	.word	0x0801118d
 80115a4:	080111f9 	.word	0x080111f9
 80115a8:	0801104d 	.word	0x0801104d
 80115ac:	080116e5 	.word	0x080116e5
 80115b0:	2301      	movs	r3, #1
        sys.cold_start = false;
 80115b2:	4a46      	ldr	r2, [pc, #280]	@ (80116cc <grbl_enter+0x3fc>)
 80115b4:	2100      	movs	r1, #0
 80115b6:	f882 107d 	strb.w	r1, [r2, #125]	@ 0x7d
    while(looping) {
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	f000 8082 	beq.w	80116c4 <grbl_enter+0x3f4>
        report_init_fns();
 80115c0:	f00a f98e 	bl	801b8e0 <report_init_fns>
        if(!sys.position_lost || settings.homing.flags.keep_on_reset)
 80115c4:	4b41      	ldr	r3, [pc, #260]	@ (80116cc <grbl_enter+0x3fc>)
 80115c6:	78db      	ldrb	r3, [r3, #3]
 80115c8:	b12b      	cbz	r3, 80115d6 <grbl_enter+0x306>
 80115ca:	4b41      	ldr	r3, [pc, #260]	@ (80116d0 <grbl_enter+0x400>)
 80115cc:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80115d0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80115d4:	d093      	beq.n	80114fe <grbl_enter+0x22e>
            memset(&sys, 0, offsetof(system_t, homed)); // Clear system variables except alarm & homed status.
 80115d6:	2254      	movs	r2, #84	@ 0x54
 80115d8:	2100      	movs	r1, #0
 80115da:	483c      	ldr	r0, [pc, #240]	@ (80116cc <grbl_enter+0x3fc>)
 80115dc:	f013 f827 	bl	802462e <memset>
        sys.var5399 = -2;                                        // Clear last M66 result
 80115e0:	4b3a      	ldr	r3, [pc, #232]	@ (80116cc <grbl_enter+0x3fc>)
 80115e2:	f06f 0201 	mvn.w	r2, #1
 80115e6:	651a      	str	r2, [r3, #80]	@ 0x50
        sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;          // Set to 100%
 80115e8:	2264      	movs	r2, #100	@ 0x64
 80115ea:	61da      	str	r2, [r3, #28]
        sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;        // Set to 100%
 80115ec:	621a      	str	r2, [r3, #32]
            if(spindle_is_enabled(--spindle_num))
 80115ee:	2000      	movs	r0, #0
 80115f0:	f00c fc84 	bl	801defc <spindle_is_enabled>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d188      	bne.n	801150a <grbl_enter+0x23a>
        sys.flags.auto_reporting = settings.report_interval != 0;
 80115f8:	4a35      	ldr	r2, [pc, #212]	@ (80116d0 <grbl_enter+0x400>)
 80115fa:	8a93      	ldrh	r3, [r2, #20]
 80115fc:	3b00      	subs	r3, #0
 80115fe:	bf18      	it	ne
 8011600:	2301      	movne	r3, #1
 8011602:	4932      	ldr	r1, [pc, #200]	@ (80116cc <grbl_enter+0x3fc>)
 8011604:	7dc8      	ldrb	r0, [r1, #23]
 8011606:	f363 0041 	bfi	r0, r3, #1, #1
 801160a:	75c8      	strb	r0, [r1, #23]
        if(settings.parking.flags.enabled)
 801160c:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 8011610:	f013 0f01 	tst.w	r3, #1
 8011614:	d00a      	beq.n	801162c <grbl_enter+0x35c>
            sys.override.control.parking_disable = settings.parking.flags.deactivate_upon_init;
 8011616:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 801161a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801161e:	460a      	mov	r2, r1
 8011620:	f891 1029 	ldrb.w	r1, [r1, #41]	@ 0x29
 8011624:	f363 01c3 	bfi	r1, r3, #3, #1
 8011628:	f882 1029 	strb.w	r1, [r2, #41]	@ 0x29
        flush_override_buffers();
 801162c:	f004 fc06 	bl	8015e3c <flush_override_buffers>
        hal.stream.reset_read_buffer(); // Clear input stream buffer
 8011630:	4c28      	ldr	r4, [pc, #160]	@ (80116d4 <grbl_enter+0x404>)
 8011632:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8011636:	4798      	blx	r3
        gc_init();                      // Set g-code parser to default state
 8011638:	f7fb fbc6 	bl	800cdc8 <gc_init>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 801163c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801163e:	4a24      	ldr	r2, [pc, #144]	@ (80116d0 <grbl_enter+0x400>)
 8011640:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 8011644:	f04f 0100 	mov.w	r1, #0
 8011648:	f000 0001 	and.w	r0, r0, #1
 801164c:	4798      	blx	r3
        plan_reset();                   // Clear block buffer and planner variables
 801164e:	f004 fd23 	bl	8016098 <plan_reset>
        st_reset();                     // Clear stepper subsystem variables.
 8011652:	f00d ffdd 	bl	801f610 <st_reset>
        limits_set_homing_axes();       // Set axes to be homed from settings.
 8011656:	f001 fec7 	bl	80133e8 <limits_set_homing_axes>
        system_init_switches();         // Set switches from inputs.
 801165a:	f00f fce1 	bl	8021020 <system_init_switches>
        sync_position();
 801165e:	f005 f849 	bl	80166f4 <plan_sync_position>
 8011662:	491d      	ldr	r1, [pc, #116]	@ (80116d8 <grbl_enter+0x408>)
 8011664:	481d      	ldr	r0, [pc, #116]	@ (80116dc <grbl_enter+0x40c>)
 8011666:	f010 f809 	bl	802167c <system_convert_array_steps_to_mpos>
        if(hal.stepper.disable_motors)
 801166a:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 801166e:	b113      	cbz	r3, 8011676 <grbl_enter+0x3a6>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8011670:	2100      	movs	r1, #0
 8011672:	4608      	mov	r0, r1
 8011674:	4798      	blx	r3
        if(!hal.driver_cap.atc)
 8011676:	4b17      	ldr	r3, [pc, #92]	@ (80116d4 <grbl_enter+0x404>)
 8011678:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801167c:	f013 0f02 	tst.w	r3, #2
 8011680:	f43f af4a 	beq.w	8011518 <grbl_enter+0x248>
        grbl.report.init_message();
 8011684:	4b16      	ldr	r3, [pc, #88]	@ (80116e0 <grbl_enter+0x410>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4798      	blx	r3
        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 801168a:	4b11      	ldr	r3, [pc, #68]	@ (80116d0 <grbl_enter+0x400>)
 801168c:	f993 30ff 	ldrsb.w	r3, [r3, #255]	@ 0xff
 8011690:	2b00      	cmp	r3, #0
 8011692:	f6bf af44 	bge.w	801151e <grbl_enter+0x24e>
        if(hal.driver_cap.mpg_mode)
 8011696:	4b0f      	ldr	r3, [pc, #60]	@ (80116d4 <grbl_enter+0x404>)
 8011698:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 801169c:	2b00      	cmp	r3, #0
 801169e:	f6ff af48 	blt.w	8011532 <grbl_enter+0x262>
        if(!(looping = protocol_main_loop()))
 80116a2:	f005 fd99 	bl	80171d8 <protocol_main_loop>
 80116a6:	4603      	mov	r3, r0
 80116a8:	2800      	cmp	r0, #0
 80116aa:	d182      	bne.n	80115b2 <grbl_enter+0x2e2>
            looping = hal.driver_release == NULL || hal.driver_release();
 80116ac:	4b09      	ldr	r3, [pc, #36]	@ (80116d4 <grbl_enter+0x404>)
 80116ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	f43f af47 	beq.w	8011546 <grbl_enter+0x276>
 80116b8:	4798      	blx	r3
 80116ba:	2800      	cmp	r0, #0
 80116bc:	f47f af78 	bne.w	80115b0 <grbl_enter+0x2e0>
 80116c0:	2300      	movs	r3, #0
 80116c2:	e776      	b.n	80115b2 <grbl_enter+0x2e2>
    nvs_buffer_free();
 80116c4:	f004 fb36 	bl	8015d34 <nvs_buffer_free>
}
 80116c8:	2000      	movs	r0, #0
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
 80116cc:	200014a0 	.word	0x200014a0
 80116d0:	20001bd8 	.word	0x20001bd8
 80116d4:	200011c0 	.word	0x200011c0
 80116d8:	20001528 	.word	0x20001528
 80116dc:	20000f60 	.word	0x20000f60
 80116e0:	200013a8 	.word	0x200013a8

080116e4 <auto_realtime_report>:
{
 80116e4:	b508      	push	{r3, lr}
    if(sys.flags.auto_reporting) {
 80116e6:	4b0d      	ldr	r3, [pc, #52]	@ (801171c <auto_realtime_report+0x38>)
 80116e8:	7ddb      	ldrb	r3, [r3, #23]
 80116ea:	f013 0f02 	tst.w	r3, #2
 80116ee:	d00b      	beq.n	8011708 <auto_realtime_report+0x24>
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 80116f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011720 <auto_realtime_report+0x3c>)
 80116f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116f4:	2101      	movs	r1, #1
 80116f6:	480b      	ldr	r0, [pc, #44]	@ (8011724 <auto_realtime_report+0x40>)
 80116f8:	4798      	blx	r3
        task_add_delayed(auto_realtime_report, NULL, settings.report_interval);
 80116fa:	4b0b      	ldr	r3, [pc, #44]	@ (8011728 <auto_realtime_report+0x44>)
 80116fc:	8a9a      	ldrh	r2, [r3, #20]
 80116fe:	2100      	movs	r1, #0
 8011700:	480a      	ldr	r0, [pc, #40]	@ (801172c <auto_realtime_report+0x48>)
 8011702:	f7ff fda9 	bl	8011258 <task_add_delayed>
}
 8011706:	bd08      	pop	{r3, pc}
    } else if(settings.report_interval)
 8011708:	4b07      	ldr	r3, [pc, #28]	@ (8011728 <auto_realtime_report+0x44>)
 801170a:	8a9a      	ldrh	r2, [r3, #20]
 801170c:	2a00      	cmp	r2, #0
 801170e:	d0fa      	beq.n	8011706 <auto_realtime_report+0x22>
        task_add_delayed(realtime_report_check, NULL, settings.report_interval);
 8011710:	2100      	movs	r1, #0
 8011712:	4807      	ldr	r0, [pc, #28]	@ (8011730 <auto_realtime_report+0x4c>)
 8011714:	f7ff fda0 	bl	8011258 <task_add_delayed>
}
 8011718:	e7f5      	b.n	8011706 <auto_realtime_report+0x22>
 801171a:	bf00      	nop
 801171c:	200014a0 	.word	0x200014a0
 8011720:	200011c0 	.word	0x200011c0
 8011724:	200014e8 	.word	0x200014e8
 8011728:	20001bd8 	.word	0x20001bd8
 801172c:	080116e5 	.word	0x080116e5
 8011730:	08011735 	.word	0x08011735

08011734 <realtime_report_check>:
{
 8011734:	b508      	push	{r3, lr}
    task_add_delayed(sys.flags.auto_reporting ? auto_realtime_report : realtime_report_check, NULL, settings.report_interval);
 8011736:	4b07      	ldr	r3, [pc, #28]	@ (8011754 <realtime_report_check+0x20>)
 8011738:	7ddb      	ldrb	r3, [r3, #23]
 801173a:	f013 0f02 	tst.w	r3, #2
 801173e:	d006      	beq.n	801174e <realtime_report_check+0x1a>
 8011740:	4805      	ldr	r0, [pc, #20]	@ (8011758 <realtime_report_check+0x24>)
 8011742:	4b06      	ldr	r3, [pc, #24]	@ (801175c <realtime_report_check+0x28>)
 8011744:	8a9a      	ldrh	r2, [r3, #20]
 8011746:	2100      	movs	r1, #0
 8011748:	f7ff fd86 	bl	8011258 <task_add_delayed>
}
 801174c:	bd08      	pop	{r3, pc}
    task_add_delayed(sys.flags.auto_reporting ? auto_realtime_report : realtime_report_check, NULL, settings.report_interval);
 801174e:	4804      	ldr	r0, [pc, #16]	@ (8011760 <realtime_report_check+0x2c>)
 8011750:	e7f7      	b.n	8011742 <realtime_report_check+0xe>
 8011752:	bf00      	nop
 8011754:	200014a0 	.word	0x200014a0
 8011758:	080116e5 	.word	0x080116e5
 801175c:	20001bd8 	.word	0x20001bd8
 8011760:	08011735 	.word	0x08011735

08011764 <task_delete>:

void task_delete (foreground_task_ptr fn, void *data)
{
    core_task_t *task, *prev = NULL;

    if((task = next_task)) do {
 8011764:	4b12      	ldr	r3, [pc, #72]	@ (80117b0 <task_delete+0x4c>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	b303      	cbz	r3, 80117ac <task_delete+0x48>
{
 801176a:	b410      	push	{r4}
    core_task_t *task, *prev = NULL;
 801176c:	2400      	movs	r4, #0
 801176e:	e00a      	b.n	8011786 <task_delete+0x22>
        if(fn == task->fn && data == task->data) {
            if(prev)
                prev->next = task->next;
            else
                next_task = task->next;
 8011770:	68d9      	ldr	r1, [r3, #12]
 8011772:	4a0f      	ldr	r2, [pc, #60]	@ (80117b0 <task_delete+0x4c>)
 8011774:	6011      	str	r1, [r2, #0]
 8011776:	e010      	b.n	801179a <task_delete+0x36>
        last_freed = task;
 8011778:	4a0e      	ldr	r2, [pc, #56]	@ (80117b4 <task_delete+0x50>)
 801177a:	6013      	str	r3, [r2, #0]
 801177c:	e013      	b.n	80117a6 <task_delete+0x42>
            task_free(task);
            break;
        }
        prev = task;
    } while((task = task->next));
 801177e:	68da      	ldr	r2, [r3, #12]
        prev = task;
 8011780:	461c      	mov	r4, r3
    } while((task = task->next));
 8011782:	b182      	cbz	r2, 80117a6 <task_delete+0x42>
 8011784:	4613      	mov	r3, r2
        if(fn == task->fn && data == task->data) {
 8011786:	685a      	ldr	r2, [r3, #4]
 8011788:	4282      	cmp	r2, r0
 801178a:	d1f8      	bne.n	801177e <task_delete+0x1a>
 801178c:	689a      	ldr	r2, [r3, #8]
 801178e:	428a      	cmp	r2, r1
 8011790:	d1f5      	bne.n	801177e <task_delete+0x1a>
            if(prev)
 8011792:	2c00      	cmp	r4, #0
 8011794:	d0ec      	beq.n	8011770 <task_delete+0xc>
                prev->next = task->next;
 8011796:	68da      	ldr	r2, [r3, #12]
 8011798:	60e2      	str	r2, [r4, #12]
    task->fn = NULL;
 801179a:	2200      	movs	r2, #0
 801179c:	605a      	str	r2, [r3, #4]
    if(last_freed == NULL)
 801179e:	4a05      	ldr	r2, [pc, #20]	@ (80117b4 <task_delete+0x50>)
 80117a0:	6812      	ldr	r2, [r2, #0]
 80117a2:	2a00      	cmp	r2, #0
 80117a4:	d0e8      	beq.n	8011778 <task_delete+0x14>
}
 80117a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop
 80117b0:	20000fdc 	.word	0x20000fdc
 80117b4:	20000fd0 	.word	0x20000fd0

080117b8 <ioports_count>:
static setting_changed_ptr on_setting_changed = NULL;
static io_ports_cfg_t analog, digital;
static int16_t digital_in = -1, digital_out = -1, analog_in = -1, analog_out = -1;

static uint8_t ioports_count (io_port_type_t type, io_port_direction_t dir)
{
 80117b8:	b570      	push	{r4, r5, r6, lr}
 80117ba:	4606      	mov	r6, r0
 80117bc:	460d      	mov	r5, r1
    xbar_t *port;
    uint8_t n_ports = 0;
 80117be:	2400      	movs	r4, #0
 80117c0:	e000      	b.n	80117c4 <ioports_count+0xc>

    // determine how many ports, including claimed ports, that are available
    do {
        if((port = hal.port.get_pin_info(type, dir, n_ports)))
            n_ports++;
    } while(port != NULL);
 80117c2:	b163      	cbz	r3, 80117de <ioports_count+0x26>
        if((port = hal.port.get_pin_info(type, dir, n_ports)))
 80117c4:	4b07      	ldr	r3, [pc, #28]	@ (80117e4 <ioports_count+0x2c>)
 80117c6:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80117ca:	4622      	mov	r2, r4
 80117cc:	4629      	mov	r1, r5
 80117ce:	4630      	mov	r0, r6
 80117d0:	4798      	blx	r3
 80117d2:	4603      	mov	r3, r0
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d0f4      	beq.n	80117c2 <ioports_count+0xa>
            n_ports++;
 80117d8:	3401      	adds	r4, #1
 80117da:	b2e4      	uxtb	r4, r4
 80117dc:	e7f1      	b.n	80117c2 <ioports_count+0xa>

    return n_ports;
}
 80117de:	4620      	mov	r0, r4
 80117e0:	bd70      	pop	{r4, r5, r6, pc}
 80117e2:	bf00      	nop
 80117e4:	200011c0 	.word	0x200011c0

080117e8 <get_pnum>:

/* experimental code follows */

static char *get_pnum (io_ports_data_t *ports, uint8_t port)
{
    return ports->pnum ? (ports->pnum + (port * 3) + (port > 9 ? port - 10 : 0)) : NULL;
 80117e8:	6800      	ldr	r0, [r0, #0]
 80117ea:	b140      	cbz	r0, 80117fe <get_pnum+0x16>
 80117ec:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80117f0:	2909      	cmp	r1, #9
 80117f2:	d901      	bls.n	80117f8 <get_pnum+0x10>
 80117f4:	390a      	subs	r1, #10
 80117f6:	e000      	b.n	80117fa <get_pnum+0x12>
 80117f8:	2100      	movs	r1, #0
 80117fa:	440b      	add	r3, r1
 80117fc:	4418      	add	r0, r3
}
 80117fe:	4770      	bx	lr

08011800 <is_setting_available>:

static bool is_setting_available (const setting_detail_t *setting)
{
    bool available = false;

    switch(setting->id) {
 8011800:	8803      	ldrh	r3, [r0, #0]
 8011802:	f5b3 7fba 	cmp.w	r3, #372	@ 0x174
 8011806:	d30d      	bcc.n	8011824 <is_setting_available+0x24>
 8011808:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801180c:	b29b      	uxth	r3, r3
 801180e:	2b01      	cmp	r3, #1
 8011810:	d81e      	bhi.n	8011850 <is_setting_available+0x50>
            available = digital.in.ports && digital.inx.mask;
            break;

        case Settings_IoPort_InvertOut:
        case Settings_IoPort_OD_Enable:
            available = digital.out.ports && digital.outx.mask;
 8011812:	4b10      	ldr	r3, [pc, #64]	@ (8011854 <is_setting_available+0x54>)
 8011814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011816:	b1bb      	cbz	r3, 8011848 <is_setting_available+0x48>
 8011818:	4b0e      	ldr	r3, [pc, #56]	@ (8011854 <is_setting_available+0x54>)
 801181a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 801181e:	b9ab      	cbnz	r3, 801184c <is_setting_available+0x4c>
 8011820:	2000      	movs	r0, #0
 8011822:	4770      	bx	lr
    switch(setting->id) {
 8011824:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 8011828:	d201      	bcs.n	801182e <is_setting_available+0x2e>
 801182a:	2000      	movs	r0, #0
 801182c:	4770      	bx	lr
            available = digital.in.ports && digital.inx.mask;
 801182e:	4b09      	ldr	r3, [pc, #36]	@ (8011854 <is_setting_available+0x54>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	b12b      	cbz	r3, 8011840 <is_setting_available+0x40>
 8011834:	4b07      	ldr	r3, [pc, #28]	@ (8011854 <is_setting_available+0x54>)
 8011836:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 801183a:	b91b      	cbnz	r3, 8011844 <is_setting_available+0x44>
 801183c:	2000      	movs	r0, #0
 801183e:	4770      	bx	lr
 8011840:	2000      	movs	r0, #0
 8011842:	4770      	bx	lr
 8011844:	2001      	movs	r0, #1
            break;
 8011846:	4770      	bx	lr
            available = digital.out.ports && digital.outx.mask;
 8011848:	2000      	movs	r0, #0
 801184a:	4770      	bx	lr
 801184c:	2001      	movs	r0, #1
            break;
 801184e:	4770      	bx	lr
    switch(setting->id) {
 8011850:	2000      	movs	r0, #0
        default:
            break;
    }

    return available;
}
 8011852:	4770      	bx	lr
 8011854:	20001538 	.word	0x20001538

08011858 <aux_get_value>:

static uint32_t aux_get_value (setting_id_t id)
{
    uint32_t value = 0;

    switch(id) {
 8011858:	f5a0 70b9 	sub.w	r0, r0, #370	@ 0x172
 801185c:	2803      	cmp	r0, #3
 801185e:	d813      	bhi.n	8011888 <aux_get_value+0x30>
 8011860:	e8df f000 	tbb	[pc, r0]
 8011864:	0e0a0602 	.word	0x0e0a0602

        case Settings_IoPort_InvertIn:
            value = settings.ioport.invert_in.mask;
 8011868:	4b08      	ldr	r3, [pc, #32]	@ (801188c <aux_get_value+0x34>)
 801186a:	f893 0168 	ldrb.w	r0, [r3, #360]	@ 0x168
            break;
 801186e:	4770      	bx	lr

        case Settings_IoPort_Pullup_Disable:
            value = settings.ioport.pullup_disable_in.mask;
 8011870:	4b06      	ldr	r3, [pc, #24]	@ (801188c <aux_get_value+0x34>)
 8011872:	f893 0169 	ldrb.w	r0, [r3, #361]	@ 0x169
            break;
 8011876:	4770      	bx	lr

        case Settings_IoPort_InvertOut:
            value = settings.ioport.invert_out.mask;
 8011878:	4b04      	ldr	r3, [pc, #16]	@ (801188c <aux_get_value+0x34>)
 801187a:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
            break;
 801187e:	4770      	bx	lr

        case Settings_IoPort_OD_Enable:
            value = settings.ioport.od_enable_out.mask;
 8011880:	4b02      	ldr	r3, [pc, #8]	@ (801188c <aux_get_value+0x34>)
 8011882:	f893 016b 	ldrb.w	r0, [r3, #363]	@ 0x16b
            break;
 8011886:	4770      	bx	lr
    switch(id) {
 8011888:	2000      	movs	r0, #0
        default:
            break;
    }

    return value;
}
 801188a:	4770      	bx	lr
 801188c:	20001bd8 	.word	0x20001bd8

08011890 <ioports_available>:
{
 8011890:	b508      	push	{r3, lr}
    if(hal.port.get_pin_info) {
 8011892:	4b28      	ldr	r3, [pc, #160]	@ (8011934 <ioports_available+0xa4>)
 8011894:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8011898:	2b00      	cmp	r3, #0
 801189a:	d037      	beq.n	801190c <ioports_available+0x7c>
        if(type == Port_Digital) {
 801189c:	2801      	cmp	r0, #1
 801189e:	d008      	beq.n	80118b2 <ioports_available+0x22>
            if(dir == Port_Input)
 80118a0:	bb39      	cbnz	r1, 80118f2 <ioports_available+0x62>
                ports = analog_in == -1 ? (analog_in = ioports_count(type, dir)) : (uint8_t)analog_in;
 80118a2:	4b25      	ldr	r3, [pc, #148]	@ (8011938 <ioports_available+0xa8>)
 80118a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118ac:	d01c      	beq.n	80118e8 <ioports_available+0x58>
 80118ae:	b2d8      	uxtb	r0, r3
}
 80118b0:	bd08      	pop	{r3, pc}
            if(dir == Port_Input)
 80118b2:	b961      	cbnz	r1, 80118ce <ioports_available+0x3e>
                ports = digital_in == -1 ? (digital_in = ioports_count(type, dir)) : (uint8_t)digital_in;
 80118b4:	4b21      	ldr	r3, [pc, #132]	@ (801193c <ioports_available+0xac>)
 80118b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118be:	d001      	beq.n	80118c4 <ioports_available+0x34>
 80118c0:	b2d8      	uxtb	r0, r3
 80118c2:	e7f5      	b.n	80118b0 <ioports_available+0x20>
 80118c4:	f7ff ff78 	bl	80117b8 <ioports_count>
 80118c8:	4b1c      	ldr	r3, [pc, #112]	@ (801193c <ioports_available+0xac>)
 80118ca:	8018      	strh	r0, [r3, #0]
 80118cc:	e7f0      	b.n	80118b0 <ioports_available+0x20>
                ports = digital_out == -1 ? (digital_out = ioports_count(type, dir)) : (uint8_t)digital_out;
 80118ce:	4b1c      	ldr	r3, [pc, #112]	@ (8011940 <ioports_available+0xb0>)
 80118d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118d8:	d001      	beq.n	80118de <ioports_available+0x4e>
 80118da:	b2d8      	uxtb	r0, r3
 80118dc:	e7e8      	b.n	80118b0 <ioports_available+0x20>
 80118de:	f7ff ff6b 	bl	80117b8 <ioports_count>
 80118e2:	4b17      	ldr	r3, [pc, #92]	@ (8011940 <ioports_available+0xb0>)
 80118e4:	8018      	strh	r0, [r3, #0]
 80118e6:	e7e3      	b.n	80118b0 <ioports_available+0x20>
                ports = analog_in == -1 ? (analog_in = ioports_count(type, dir)) : (uint8_t)analog_in;
 80118e8:	f7ff ff66 	bl	80117b8 <ioports_count>
 80118ec:	4b12      	ldr	r3, [pc, #72]	@ (8011938 <ioports_available+0xa8>)
 80118ee:	8018      	strh	r0, [r3, #0]
 80118f0:	e7de      	b.n	80118b0 <ioports_available+0x20>
                ports = analog_out == -1 ? (analog_out = ioports_count(type, dir)) : (uint8_t)analog_out;
 80118f2:	4b14      	ldr	r3, [pc, #80]	@ (8011944 <ioports_available+0xb4>)
 80118f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118fc:	d001      	beq.n	8011902 <ioports_available+0x72>
 80118fe:	b2d8      	uxtb	r0, r3
 8011900:	e7d6      	b.n	80118b0 <ioports_available+0x20>
 8011902:	f7ff ff59 	bl	80117b8 <ioports_count>
 8011906:	4b0f      	ldr	r3, [pc, #60]	@ (8011944 <ioports_available+0xb4>)
 8011908:	8018      	strh	r0, [r3, #0]
 801190a:	e7d1      	b.n	80118b0 <ioports_available+0x20>
        if(type == Port_Digital)
 801190c:	2801      	cmp	r0, #1
 801190e:	d004      	beq.n	801191a <ioports_available+0x8a>
            ports = dir == Port_Input ? hal.port.num_analog_in : hal.port.num_analog_out;
 8011910:	b961      	cbnz	r1, 801192c <ioports_available+0x9c>
 8011912:	4b08      	ldr	r3, [pc, #32]	@ (8011934 <ioports_available+0xa4>)
 8011914:	f893 0116 	ldrb.w	r0, [r3, #278]	@ 0x116
 8011918:	e7ca      	b.n	80118b0 <ioports_available+0x20>
            ports = dir == Port_Input ? hal.port.num_digital_in : hal.port.num_digital_out;
 801191a:	b919      	cbnz	r1, 8011924 <ioports_available+0x94>
 801191c:	4b05      	ldr	r3, [pc, #20]	@ (8011934 <ioports_available+0xa4>)
 801191e:	f893 0114 	ldrb.w	r0, [r3, #276]	@ 0x114
 8011922:	e7c5      	b.n	80118b0 <ioports_available+0x20>
 8011924:	4b03      	ldr	r3, [pc, #12]	@ (8011934 <ioports_available+0xa4>)
 8011926:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 801192a:	e7c1      	b.n	80118b0 <ioports_available+0x20>
            ports = dir == Port_Input ? hal.port.num_analog_in : hal.port.num_analog_out;
 801192c:	4b01      	ldr	r3, [pc, #4]	@ (8011934 <ioports_available+0xa4>)
 801192e:	f893 0117 	ldrb.w	r0, [r3, #279]	@ 0x117
 8011932:	e7bd      	b.n	80118b0 <ioports_available+0x20>
 8011934:	200011c0 	.word	0x200011c0
 8011938:	200001f6 	.word	0x200001f6
 801193c:	200001fa 	.word	0x200001fa
 8011940:	200001f8 	.word	0x200001f8
 8011944:	200001f4 	.word	0x200001f4

08011948 <ioports_add>:
{
 8011948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	4605      	mov	r5, r0
 801194e:	4689      	mov	r9, r1
 8011950:	461c      	mov	r4, r3
    ports->get_pnum = get_pnum;
 8011952:	4b81      	ldr	r3, [pc, #516]	@ (8011b58 <ioports_add+0x210>)
 8011954:	6143      	str	r3, [r0, #20]
    if(type == Port_Digital) {
 8011956:	2901      	cmp	r1, #1
 8011958:	d017      	beq.n	801198a <ioports_add+0x42>
        analog_in = analog_out = -1;
 801195a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801195e:	497f      	ldr	r1, [pc, #508]	@ (8011b5c <ioports_add+0x214>)
 8011960:	800b      	strh	r3, [r1, #0]
 8011962:	497f      	ldr	r1, [pc, #508]	@ (8011b60 <ioports_add+0x218>)
 8011964:	800b      	strh	r3, [r1, #0]
        if(n_in) {
 8011966:	2a00      	cmp	r2, #0
 8011968:	d140      	bne.n	80119ec <ioports_add+0xa4>
        if(n_out) {
 801196a:	2c00      	cmp	r4, #0
 801196c:	d150      	bne.n	8011a10 <ioports_add+0xc8>
        cfg = &analog;
 801196e:	f8df a204 	ldr.w	sl, [pc, #516]	@ 8011b74 <ioports_add+0x22c>
    if((n_ports = max(ports->in.n_ports, ports->out.n_ports)) > 0)  {
 8011972:	7b2f      	ldrb	r7, [r5, #12]
 8011974:	792b      	ldrb	r3, [r5, #4]
 8011976:	429f      	cmp	r7, r3
 8011978:	bf38      	it	cc
 801197a:	461f      	movcc	r7, r3
 801197c:	2f00      	cmp	r7, #0
 801197e:	d15b      	bne.n	8011a38 <ioports_add+0xf0>
}
 8011980:	1e38      	subs	r0, r7, #0
 8011982:	bf18      	it	ne
 8011984:	2001      	movne	r0, #1
 8011986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        digital_in = digital_out = -1;
 801198a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801198e:	4975      	ldr	r1, [pc, #468]	@ (8011b64 <ioports_add+0x21c>)
 8011990:	800b      	strh	r3, [r1, #0]
 8011992:	4975      	ldr	r1, [pc, #468]	@ (8011b68 <ioports_add+0x220>)
 8011994:	800b      	strh	r3, [r1, #0]
        if(n_in) {
 8011996:	b91a      	cbnz	r2, 80119a0 <ioports_add+0x58>
        if(n_out) {
 8011998:	b9a4      	cbnz	r4, 80119c4 <ioports_add+0x7c>
        cfg = &digital;
 801199a:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8011b70 <ioports_add+0x228>
 801199e:	e7e8      	b.n	8011972 <ioports_add+0x2a>
            ports->in.n_start = hal.port.num_digital_in;
 80119a0:	4b72      	ldr	r3, [pc, #456]	@ (8011b6c <ioports_add+0x224>)
 80119a2:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 80119a6:	7141      	strb	r1, [r0, #5]
            hal.port.num_digital_in += (ports->in.n_ports = n_in);
 80119a8:	7102      	strb	r2, [r0, #4]
 80119aa:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 80119ae:	440a      	add	r2, r1
 80119b0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 80119b4:	7900      	ldrb	r0, [r0, #4]
 80119b6:	f010 fd71 	bl	802249c <malloc>
 80119ba:	60a8      	str	r0, [r5, #8]
            digital.in.ports = &ports->in;
 80119bc:	1d2b      	adds	r3, r5, #4
 80119be:	4a6c      	ldr	r2, [pc, #432]	@ (8011b70 <ioports_add+0x228>)
 80119c0:	6013      	str	r3, [r2, #0]
 80119c2:	e7e9      	b.n	8011998 <ioports_add+0x50>
            ports->out.n_start = hal.port.num_digital_out;
 80119c4:	4b69      	ldr	r3, [pc, #420]	@ (8011b6c <ioports_add+0x224>)
 80119c6:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 80119ca:	736a      	strb	r2, [r5, #13]
            hal.port.num_digital_out += (ports->out.n_ports = n_out);
 80119cc:	732c      	strb	r4, [r5, #12]
 80119ce:	f893 2115 	ldrb.w	r2, [r3, #277]	@ 0x115
 80119d2:	4422      	add	r2, r4
 80119d4:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 80119d8:	7b28      	ldrb	r0, [r5, #12]
 80119da:	f010 fd5f 	bl	802249c <malloc>
 80119de:	6128      	str	r0, [r5, #16]
            digital.out.ports = &ports->out;
 80119e0:	f105 030c 	add.w	r3, r5, #12
 80119e4:	4a62      	ldr	r2, [pc, #392]	@ (8011b70 <ioports_add+0x228>)
 80119e6:	6393      	str	r3, [r2, #56]	@ 0x38
        cfg = &digital;
 80119e8:	4692      	mov	sl, r2
 80119ea:	e7c2      	b.n	8011972 <ioports_add+0x2a>
            ports->in.n_start = hal.port.num_analog_in;
 80119ec:	4b5f      	ldr	r3, [pc, #380]	@ (8011b6c <ioports_add+0x224>)
 80119ee:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
 80119f2:	7141      	strb	r1, [r0, #5]
            hal.port.num_analog_in += (ports->in.n_ports = n_in);
 80119f4:	7102      	strb	r2, [r0, #4]
 80119f6:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
 80119fa:	440a      	add	r2, r1
 80119fc:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 8011a00:	7900      	ldrb	r0, [r0, #4]
 8011a02:	f010 fd4b 	bl	802249c <malloc>
 8011a06:	60a8      	str	r0, [r5, #8]
            analog.in.ports = &ports->in;
 8011a08:	1d2b      	adds	r3, r5, #4
 8011a0a:	4a5a      	ldr	r2, [pc, #360]	@ (8011b74 <ioports_add+0x22c>)
 8011a0c:	6013      	str	r3, [r2, #0]
 8011a0e:	e7ac      	b.n	801196a <ioports_add+0x22>
            ports->out.n_start = hal.port.num_analog_out;
 8011a10:	4b56      	ldr	r3, [pc, #344]	@ (8011b6c <ioports_add+0x224>)
 8011a12:	f893 2117 	ldrb.w	r2, [r3, #279]	@ 0x117
 8011a16:	736a      	strb	r2, [r5, #13]
            hal.port.num_analog_out += (ports->out.n_ports = n_out);
 8011a18:	732c      	strb	r4, [r5, #12]
 8011a1a:	f893 2117 	ldrb.w	r2, [r3, #279]	@ 0x117
 8011a1e:	4422      	add	r2, r4
 8011a20:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 8011a24:	7b28      	ldrb	r0, [r5, #12]
 8011a26:	f010 fd39 	bl	802249c <malloc>
 8011a2a:	6128      	str	r0, [r5, #16]
            analog.out.ports = &ports->out;
 8011a2c:	f105 030c 	add.w	r3, r5, #12
 8011a30:	4a50      	ldr	r2, [pc, #320]	@ (8011b74 <ioports_add+0x22c>)
 8011a32:	6393      	str	r3, [r2, #56]	@ 0x38
        cfg = &analog;
 8011a34:	4692      	mov	sl, r2
 8011a36:	e79c      	b.n	8011972 <ioports_add+0x2a>
        if((ports->pnum = pn = malloc((3 * n_ports + (n_ports > 9 ? n_ports - 10 : 0)) + 1)))
 8011a38:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 8011a3c:	2f0a      	cmp	r7, #10
 8011a3e:	bf2c      	ite	cs
 8011a40:	19c0      	addcs	r0, r0, r7
 8011a42:	300a      	addcc	r0, #10
 8011a44:	3809      	subs	r0, #9
 8011a46:	f010 fd29 	bl	802249c <malloc>
 8011a4a:	4606      	mov	r6, r0
 8011a4c:	6028      	str	r0, [r5, #0]
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d096      	beq.n	8011980 <ioports_add+0x38>
          for(i = 0; i < n_ports; i++) {
 8011a52:	2400      	movs	r4, #0
 8011a54:	e02a      	b.n	8011aac <ioports_add+0x164>
                *pn = type == Port_Digital ? 'P' : 'E';
 8011a56:	2350      	movs	r3, #80	@ 0x50
 8011a58:	e030      	b.n	8011abc <ioports_add+0x174>
                    cfg->inx.mask = (cfg->inx.mask << 1) + 1;
 8011a5a:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 8011a5e:	005b      	lsls	r3, r3, #1
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	3301      	adds	r3, #1
 8011a64:	f88a 3070 	strb.w	r3, [sl, #112]	@ 0x70
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 8011a68:	f10a 0804 	add.w	r8, sl, #4
 8011a6c:	b15c      	cbz	r4, 8011a86 <ioports_add+0x13e>
 8011a6e:	4942      	ldr	r1, [pc, #264]	@ (8011b78 <ioports_add+0x230>)
 8011a70:	4640      	mov	r0, r8
 8011a72:	f012 fde4 	bl	802463e <strcat>
                    strcat(cfg->in.port_names, uitoa(i));
 8011a76:	4620      	mov	r0, r4
 8011a78:	f003 fc22 	bl	80152c0 <uitoa>
 8011a7c:	4601      	mov	r1, r0
 8011a7e:	4640      	mov	r0, r8
 8011a80:	f012 fddd 	bl	802463e <strcat>
 8011a84:	e03e      	b.n	8011b04 <ioports_add+0x1bc>
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 8011a86:	493d      	ldr	r1, [pc, #244]	@ (8011b7c <ioports_add+0x234>)
 8011a88:	e7f2      	b.n	8011a70 <ioports_add+0x128>
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 8011a8a:	493c      	ldr	r1, [pc, #240]	@ (8011b7c <ioports_add+0x234>)
 8011a8c:	4640      	mov	r0, r8
 8011a8e:	f012 fdd6 	bl	802463e <strcat>
                    strcat(cfg->out.port_names, uitoa(i));
 8011a92:	4620      	mov	r0, r4
 8011a94:	f003 fc14 	bl	80152c0 <uitoa>
 8011a98:	4601      	mov	r1, r0
 8011a9a:	4640      	mov	r0, r8
 8011a9c:	f012 fdcf 	bl	802463e <strcat>
            if(pn)
 8011aa0:	b11e      	cbz	r6, 8011aaa <ioports_add+0x162>
                pn += i > 9 ? 4 : 3;
 8011aa2:	2c09      	cmp	r4, #9
 8011aa4:	d956      	bls.n	8011b54 <ioports_add+0x20c>
 8011aa6:	2304      	movs	r3, #4
 8011aa8:	441e      	add	r6, r3
          for(i = 0; i < n_ports; i++) {
 8011aaa:	3401      	adds	r4, #1
 8011aac:	42bc      	cmp	r4, r7
 8011aae:	f4bf af67 	bcs.w	8011980 <ioports_add+0x38>
            if(pn) {
 8011ab2:	b16e      	cbz	r6, 8011ad0 <ioports_add+0x188>
                *pn = type == Port_Digital ? 'P' : 'E';
 8011ab4:	f1b9 0f01 	cmp.w	r9, #1
 8011ab8:	d0cd      	beq.n	8011a56 <ioports_add+0x10e>
 8011aba:	2345      	movs	r3, #69	@ 0x45
 8011abc:	46b0      	mov	r8, r6
 8011abe:	f808 3b01 	strb.w	r3, [r8], #1
                strcpy(pn + 1, uitoa(i));
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f003 fbfc 	bl	80152c0 <uitoa>
 8011ac8:	4601      	mov	r1, r0
 8011aca:	4640      	mov	r0, r8
 8011acc:	f012 ff07 	bl	80248de <strcpy>
            if(ports->in.n_ports && i < ports->in.n_ports) {
 8011ad0:	792b      	ldrb	r3, [r5, #4]
 8011ad2:	b1bb      	cbz	r3, 8011b04 <ioports_add+0x1bc>
 8011ad4:	42a3      	cmp	r3, r4
 8011ad6:	d915      	bls.n	8011b04 <ioports_add+0x1bc>
                if(ports->in.map)
 8011ad8:	68ab      	ldr	r3, [r5, #8]
 8011ada:	b103      	cbz	r3, 8011ade <ioports_add+0x196>
                    ports->in.map[i] = i;
 8011adc:	551c      	strb	r4, [r3, r4]
                if(hal.port.set_pin_description)
 8011ade:	4b23      	ldr	r3, [pc, #140]	@ (8011b6c <ioports_add+0x224>)
 8011ae0:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8011ae4:	f1b8 0f00 	cmp.w	r8, #0
 8011ae8:	d00a      	beq.n	8011b00 <ioports_add+0x1b8>
                    hal.port.set_pin_description(type, Port_Input, i, get_pnum(ports, i));
 8011aea:	fa5f fb84 	uxtb.w	fp, r4
 8011aee:	4659      	mov	r1, fp
 8011af0:	4628      	mov	r0, r5
 8011af2:	f7ff fe79 	bl	80117e8 <get_pnum>
 8011af6:	4603      	mov	r3, r0
 8011af8:	465a      	mov	r2, fp
 8011afa:	2100      	movs	r1, #0
 8011afc:	4648      	mov	r0, r9
 8011afe:	47c0      	blx	r8
                if(i < 8) {
 8011b00:	2c07      	cmp	r4, #7
 8011b02:	d9aa      	bls.n	8011a5a <ioports_add+0x112>
            if(ports->out.n_ports && i < ports->out.n_ports) {
 8011b04:	7b2b      	ldrb	r3, [r5, #12]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d0ca      	beq.n	8011aa0 <ioports_add+0x158>
 8011b0a:	42a3      	cmp	r3, r4
 8011b0c:	d9c8      	bls.n	8011aa0 <ioports_add+0x158>
                if(ports->out.map)
 8011b0e:	692b      	ldr	r3, [r5, #16]
 8011b10:	b103      	cbz	r3, 8011b14 <ioports_add+0x1cc>
                    ports->out.map[i] = i;
 8011b12:	551c      	strb	r4, [r3, r4]
                if(hal.port.set_pin_description)
 8011b14:	4b15      	ldr	r3, [pc, #84]	@ (8011b6c <ioports_add+0x224>)
 8011b16:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 8011b1a:	f1b8 0f00 	cmp.w	r8, #0
 8011b1e:	d00a      	beq.n	8011b36 <ioports_add+0x1ee>
                    hal.port.set_pin_description(type, Port_Output, i, get_pnum(ports, i));
 8011b20:	fa5f fb84 	uxtb.w	fp, r4
 8011b24:	4659      	mov	r1, fp
 8011b26:	4628      	mov	r0, r5
 8011b28:	f7ff fe5e 	bl	80117e8 <get_pnum>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	465a      	mov	r2, fp
 8011b30:	2101      	movs	r1, #1
 8011b32:	4648      	mov	r0, r9
 8011b34:	47c0      	blx	r8
                if(i < 8) {
 8011b36:	2c07      	cmp	r4, #7
 8011b38:	d8b2      	bhi.n	8011aa0 <ioports_add+0x158>
                    cfg->outx.mask = (cfg->outx.mask << 1) + 1;
 8011b3a:	f89a 3071 	ldrb.w	r3, [sl, #113]	@ 0x71
 8011b3e:	005b      	lsls	r3, r3, #1
 8011b40:	b2db      	uxtb	r3, r3
 8011b42:	3301      	adds	r3, #1
 8011b44:	f88a 3071 	strb.w	r3, [sl, #113]	@ 0x71
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 8011b48:	f10a 083c 	add.w	r8, sl, #60	@ 0x3c
 8011b4c:	2c00      	cmp	r4, #0
 8011b4e:	d09c      	beq.n	8011a8a <ioports_add+0x142>
 8011b50:	4909      	ldr	r1, [pc, #36]	@ (8011b78 <ioports_add+0x230>)
 8011b52:	e79b      	b.n	8011a8c <ioports_add+0x144>
                pn += i > 9 ? 4 : 3;
 8011b54:	2303      	movs	r3, #3
 8011b56:	e7a7      	b.n	8011aa8 <ioports_add+0x160>
 8011b58:	080117e9 	.word	0x080117e9
 8011b5c:	200001f4 	.word	0x200001f4
 8011b60:	200001f6 	.word	0x200001f6
 8011b64:	200001f8 	.word	0x200001f8
 8011b68:	200001fa 	.word	0x200001fa
 8011b6c:	200011c0 	.word	0x200011c0
 8011b70:	20001538 	.word	0x20001538
 8011b74:	200015ac 	.word	0x200015ac
 8011b78:	0802ab14 	.word	0x0802ab14
 8011b7c:	0802ab0c 	.word	0x0802ab0c

08011b80 <ioports_map_reverse>:
{
 8011b80:	4603      	mov	r3, r0
 8011b82:	4608      	mov	r0, r1
    if(type->map) {
 8011b84:	6859      	ldr	r1, [r3, #4]
 8011b86:	b131      	cbz	r1, 8011b96 <ioports_map_reverse+0x16>
        uint_fast8_t idx = type->n_ports;
 8011b88:	781b      	ldrb	r3, [r3, #0]
            if(type->map[--idx] == port) {
 8011b8a:	3b01      	subs	r3, #1
 8011b8c:	5cca      	ldrb	r2, [r1, r3]
 8011b8e:	4282      	cmp	r2, r0
 8011b90:	d002      	beq.n	8011b98 <ioports_map_reverse+0x18>
        } while(idx);
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1f9      	bne.n	8011b8a <ioports_map_reverse+0xa>
}
 8011b96:	4770      	bx	lr
                port = idx;
 8011b98:	b2d8      	uxtb	r0, r3
                break;
 8011b9a:	4770      	bx	lr

08011b9c <ioport_settings_load>:
};

#endif

static void ioport_settings_load (void)
{
 8011b9c:	b530      	push	{r4, r5, lr}
 8011b9e:	b083      	sub	sp, #12
    uint8_t port;
    xbar_t *xbar;
    gpio_in_config_t in_config = {0};
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011ba6:	f88d 3006 	strb.w	r3, [sp, #6]
    gpio_out_config_t out_config = {0};
 8011baa:	f8ad 3000 	strh.w	r3, [sp]
 8011bae:	f88d 3002 	strb.w	r3, [sp, #2]

    settings.ioport.invert_in.mask &= digital.inx.mask;
 8011bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8011d2c <ioport_settings_load+0x190>)
 8011bb4:	f893 0168 	ldrb.w	r0, [r3, #360]	@ 0x168
 8011bb8:	495d      	ldr	r1, [pc, #372]	@ (8011d30 <ioport_settings_load+0x194>)
 8011bba:	f891 2070 	ldrb.w	r2, [r1, #112]	@ 0x70
 8011bbe:	4010      	ands	r0, r2
 8011bc0:	f883 0168 	strb.w	r0, [r3, #360]	@ 0x168
    settings.ioport.pullup_disable_in.mask &= digital.inx.mask;
 8011bc4:	f893 0169 	ldrb.w	r0, [r3, #361]	@ 0x169
 8011bc8:	4002      	ands	r2, r0
 8011bca:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    settings.ioport.invert_out.mask &= digital.outx.mask;
 8011bce:	f893 016a 	ldrb.w	r0, [r3, #362]	@ 0x16a
 8011bd2:	f891 2071 	ldrb.w	r2, [r1, #113]	@ 0x71
 8011bd6:	4010      	ands	r0, r2
 8011bd8:	f883 016a 	strb.w	r0, [r3, #362]	@ 0x16a
    settings.ioport.od_enable_out.mask &= digital.outx.mask;
 8011bdc:	f893 016b 	ldrb.w	r0, [r3, #363]	@ 0x16b
 8011be0:	4002      	ands	r2, r0
 8011be2:	f883 216b 	strb.w	r2, [r3, #363]	@ 0x16b

    if(digital.in.ports && (port = digital.in.ports->n_ports)) do {
 8011be6:	680b      	ldr	r3, [r1, #0]
 8011be8:	b10b      	cbz	r3, 8011bee <ioport_settings_load+0x52>
 8011bea:	781c      	ldrb	r4, [r3, #0]
 8011bec:	bb34      	cbnz	r4, 8011c3c <ioport_settings_load+0xa0>
                xbar->config(xbar, &in_config, false);
            }
        }
    } while(port);

    if(digital.out.ports && (port = digital.out.ports->n_ports)) do {
 8011bee:	4b50      	ldr	r3, [pc, #320]	@ (8011d30 <ioport_settings_load+0x194>)
 8011bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bf2:	b113      	cbz	r3, 8011bfa <ioport_settings_load+0x5e>
 8011bf4:	781c      	ldrb	r4, [r3, #0]
 8011bf6:	2c00      	cmp	r4, #0
 8011bf8:	d169      	bne.n	8011cce <ioport_settings_load+0x132>
                xbar->config(xbar, &out_config, false);
            }
        }
    } while(port);

    if(on_settings_loaded)
 8011bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8011d34 <ioport_settings_load+0x198>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	b103      	cbz	r3, 8011c02 <ioport_settings_load+0x66>
        on_settings_loaded();
 8011c00:	4798      	blx	r3
}
 8011c02:	b003      	add	sp, #12
 8011c04:	bd30      	pop	{r4, r5, pc}
                    in_config.inverted = settings.probe.invert_probe_pin;
 8011c06:	4b49      	ldr	r3, [pc, #292]	@ (8011d2c <ioport_settings_load+0x190>)
 8011c08:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8011c0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011c10:	f88d 3004 	strb.w	r3, [sp, #4]
                if(in_config.inverted)
 8011c14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d04a      	beq.n	8011cb2 <ioport_settings_load+0x116>
                    settings.ioport.invert_in.mask |= (1 << xbar->id);
 8011c1c:	4943      	ldr	r1, [pc, #268]	@ (8011d2c <ioport_settings_load+0x190>)
 8011c1e:	f891 3168 	ldrb.w	r3, [r1, #360]	@ 0x168
 8011c22:	7828      	ldrb	r0, [r5, #0]
 8011c24:	2201      	movs	r2, #1
 8011c26:	4082      	lsls	r2, r0
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
                xbar->config(xbar, &in_config, false);
 8011c2e:	69ab      	ldr	r3, [r5, #24]
 8011c30:	2200      	movs	r2, #0
 8011c32:	a901      	add	r1, sp, #4
 8011c34:	4628      	mov	r0, r5
 8011c36:	4798      	blx	r3
    } while(port);
 8011c38:	2c00      	cmp	r4, #0
 8011c3a:	d0d8      	beq.n	8011bee <ioport_settings_load+0x52>
        if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 8011c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8011d38 <ioport_settings_load+0x19c>)
 8011c3e:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8011c42:	3c01      	subs	r4, #1
 8011c44:	b2e4      	uxtb	r4, r4
 8011c46:	4621      	mov	r1, r4
 8011c48:	4b39      	ldr	r3, [pc, #228]	@ (8011d30 <ioport_settings_load+0x194>)
 8011c4a:	6818      	ldr	r0, [r3, #0]
 8011c4c:	f7ff ff98 	bl	8011b80 <ioports_map_reverse>
 8011c50:	4602      	mov	r2, r0
 8011c52:	2100      	movs	r1, #0
 8011c54:	2001      	movs	r0, #1
 8011c56:	47a8      	blx	r5
 8011c58:	4605      	mov	r5, r0
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	d0ec      	beq.n	8011c38 <ioport_settings_load+0x9c>
            if(xbar->config) {
 8011c5e:	6983      	ldr	r3, [r0, #24]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d0e9      	beq.n	8011c38 <ioport_settings_load+0x9c>
                in_config.debounce = xbar->mode.debounce;
 8011c64:	7dc3      	ldrb	r3, [r0, #23]
 8011c66:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011c6a:	f88d 3005 	strb.w	r3, [sp, #5]
                in_config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 8011c6e:	7d83      	ldrb	r3, [r0, #22]
 8011c70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8011c74:	f88d 3006 	strb.w	r3, [sp, #6]
                in_config.inverted = !!(settings.ioport.invert_in.mask & (1 << xbar->id));
 8011c78:	4b2c      	ldr	r3, [pc, #176]	@ (8011d2c <ioport_settings_load+0x190>)
 8011c7a:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 8011c7e:	7802      	ldrb	r2, [r0, #0]
 8011c80:	4113      	asrs	r3, r2
 8011c82:	f003 0301 	and.w	r3, r3, #1
 8011c86:	f88d 3004 	strb.w	r3, [sp, #4]
                if(xbar->function == Input_Probe)
 8011c8a:	7840      	ldrb	r0, [r0, #1]
 8011c8c:	280e      	cmp	r0, #14
 8011c8e:	d0ba      	beq.n	8011c06 <ioport_settings_load+0x6a>
                else if(xbar->function < Input_Probe) {
 8011c90:	280d      	cmp	r0, #13
 8011c92:	d8bf      	bhi.n	8011c14 <ioport_settings_load+0x78>
                    if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask)
 8011c94:	f7fa feb8 	bl	800ca08 <xbar_fn_to_signals_mask>
 8011c98:	b280      	uxth	r0, r0
 8011c9a:	2800      	cmp	r0, #0
 8011c9c:	d0ba      	beq.n	8011c14 <ioport_settings_load+0x78>
                        in_config.inverted = !!(settings.control_invert.mask & ctrl.mask);
 8011c9e:	4b23      	ldr	r3, [pc, #140]	@ (8011d2c <ioport_settings_load+0x190>)
 8011ca0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8011ca4:	4218      	tst	r0, r3
 8011ca6:	bf14      	ite	ne
 8011ca8:	2301      	movne	r3, #1
 8011caa:	2300      	moveq	r3, #0
 8011cac:	f88d 3004 	strb.w	r3, [sp, #4]
 8011cb0:	e7b0      	b.n	8011c14 <ioport_settings_load+0x78>
                    settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 8011cb2:	491e      	ldr	r1, [pc, #120]	@ (8011d2c <ioport_settings_load+0x190>)
 8011cb4:	f891 2168 	ldrb.w	r2, [r1, #360]	@ 0x168
 8011cb8:	7828      	ldrb	r0, [r5, #0]
 8011cba:	2301      	movs	r3, #1
 8011cbc:	4083      	lsls	r3, r0
 8011cbe:	43db      	mvns	r3, r3
 8011cc0:	b25b      	sxtb	r3, r3
 8011cc2:	4013      	ands	r3, r2
 8011cc4:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
 8011cc8:	e7b1      	b.n	8011c2e <ioport_settings_load+0x92>
    } while(port);
 8011cca:	2c00      	cmp	r4, #0
 8011ccc:	d095      	beq.n	8011bfa <ioport_settings_load+0x5e>
        if((xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, --port)))) {
 8011cce:	4b1a      	ldr	r3, [pc, #104]	@ (8011d38 <ioport_settings_load+0x19c>)
 8011cd0:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8011cd4:	3c01      	subs	r4, #1
 8011cd6:	b2e4      	uxtb	r4, r4
 8011cd8:	4621      	mov	r1, r4
 8011cda:	4b15      	ldr	r3, [pc, #84]	@ (8011d30 <ioport_settings_load+0x194>)
 8011cdc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011cde:	f7ff ff4f 	bl	8011b80 <ioports_map_reverse>
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	2101      	movs	r1, #1
 8011ce6:	4608      	mov	r0, r1
 8011ce8:	47a8      	blx	r5
 8011cea:	4603      	mov	r3, r0
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d0ec      	beq.n	8011cca <ioport_settings_load+0x12e>
            if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8011cf0:	6985      	ldr	r5, [r0, #24]
 8011cf2:	2d00      	cmp	r5, #0
 8011cf4:	d0e9      	beq.n	8011cca <ioport_settings_load+0x12e>
 8011cf6:	7dc2      	ldrb	r2, [r0, #23]
 8011cf8:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8011cfc:	d1e5      	bne.n	8011cca <ioport_settings_load+0x12e>
                out_config.inverted = !!(settings.ioport.invert_out.mask & (1 << xbar->id));
 8011cfe:	490b      	ldr	r1, [pc, #44]	@ (8011d2c <ioport_settings_load+0x190>)
 8011d00:	f891 216a 	ldrb.w	r2, [r1, #362]	@ 0x16a
 8011d04:	7800      	ldrb	r0, [r0, #0]
 8011d06:	4102      	asrs	r2, r0
 8011d08:	f002 0201 	and.w	r2, r2, #1
 8011d0c:	f88d 2000 	strb.w	r2, [sp]
                out_config.open_drain = !!(settings.ioport.od_enable_out.mask & (1 << xbar->id));
 8011d10:	f891 216b 	ldrb.w	r2, [r1, #363]	@ 0x16b
 8011d14:	7819      	ldrb	r1, [r3, #0]
 8011d16:	410a      	asrs	r2, r1
 8011d18:	f002 0201 	and.w	r2, r2, #1
 8011d1c:	f88d 2001 	strb.w	r2, [sp, #1]
                xbar->config(xbar, &out_config, false);
 8011d20:	2200      	movs	r2, #0
 8011d22:	4669      	mov	r1, sp
 8011d24:	4618      	mov	r0, r3
 8011d26:	47a8      	blx	r5
 8011d28:	e7cf      	b.n	8011cca <ioport_settings_load+0x12e>
 8011d2a:	bf00      	nop
 8011d2c:	20001bd8 	.word	0x20001bd8
 8011d30:	20001538 	.word	0x20001538
 8011d34:	20001624 	.word	0x20001624
 8011d38:	200011c0 	.word	0x200011c0

08011d3c <aux_set_value>:
{
 8011d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d40:	b082      	sub	sp, #8
 8011d42:	4605      	mov	r5, r0
    switch(id) {
 8011d44:	f5a0 73b9 	sub.w	r3, r0, #370	@ 0x172
 8011d48:	2b03      	cmp	r3, #3
 8011d4a:	d84b      	bhi.n	8011de4 <aux_set_value+0xa8>
 8011d4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011d50:	004e0004 	.word	0x004e0004
 8011d54:	00ea009d 	.word	0x00ea009d
            change.mask = (uint8_t)value & digital.inx.mask;
 8011d58:	4b99      	ldr	r3, [pc, #612]	@ (8011fc0 <aux_set_value+0x284>)
 8011d5a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011d5e:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.invert_in.mask ^ change.mask)) {
 8011d62:	4b98      	ldr	r3, [pc, #608]	@ (8011fc4 <aux_set_value+0x288>)
 8011d64:	f893 2168 	ldrb.w	r2, [r3, #360]	@ 0x168
 8011d68:	ea84 0302 	eor.w	r3, r4, r2
 8011d6c:	4294      	cmp	r4, r2
 8011d6e:	d031      	beq.n	8011dd4 <aux_set_value+0x98>
                gpio_in_config_t config = {0};
 8011d70:	2600      	movs	r6, #0
 8011d72:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011d76:	f88d 6006 	strb.w	r6, [sp, #6]
 8011d7a:	e004      	b.n	8011d86 <aux_set_value+0x4a>
                    port++;
 8011d7c:	3601      	adds	r6, #1
 8011d7e:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8011d80:	087f      	lsrs	r7, r7, #1
 8011d82:	463b      	mov	r3, r7
 8011d84:	b337      	cbz	r7, 8011dd4 <aux_set_value+0x98>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, port)))) {
 8011d86:	b2df      	uxtb	r7, r3
 8011d88:	f013 0f01 	tst.w	r3, #1
 8011d8c:	d0f6      	beq.n	8011d7c <aux_set_value+0x40>
 8011d8e:	4b8e      	ldr	r3, [pc, #568]	@ (8011fc8 <aux_set_value+0x28c>)
 8011d90:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8011d94:	4631      	mov	r1, r6
 8011d96:	4b8a      	ldr	r3, [pc, #552]	@ (8011fc0 <aux_set_value+0x284>)
 8011d98:	6818      	ldr	r0, [r3, #0]
 8011d9a:	f7ff fef1 	bl	8011b80 <ioports_map_reverse>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	2100      	movs	r1, #0
 8011da2:	2001      	movs	r0, #1
 8011da4:	47c0      	blx	r8
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d0e8      	beq.n	8011d7c <aux_set_value+0x40>
                        if(xbar->config) {
 8011daa:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8011dae:	f1b8 0f00 	cmp.w	r8, #0
 8011db2:	d0e3      	beq.n	8011d7c <aux_set_value+0x40>
                            config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 8011db4:	7d82      	ldrb	r2, [r0, #22]
 8011db6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8011dba:	f88d 2006 	strb.w	r2, [sp, #6]
                            config.inverted = !!(change.mask & (1 << xbar->id));
 8011dbe:	7802      	ldrb	r2, [r0, #0]
 8011dc0:	fa44 f202 	asr.w	r2, r4, r2
 8011dc4:	f002 0201 	and.w	r2, r2, #1
 8011dc8:	f88d 2004 	strb.w	r2, [sp, #4]
                            xbar->config(xbar, &config, false);
 8011dcc:	2200      	movs	r2, #0
 8011dce:	a901      	add	r1, sp, #4
 8011dd0:	47c0      	blx	r8
 8011dd2:	e7d3      	b.n	8011d7c <aux_set_value+0x40>
            settings.ioport.invert_in.mask = change.mask;
 8011dd4:	4b7b      	ldr	r3, [pc, #492]	@ (8011fc4 <aux_set_value+0x288>)
 8011dd6:	f883 4168 	strb.w	r4, [r3, #360]	@ 0x168
            if(on_setting_changed)
 8011dda:	4b7c      	ldr	r3, [pc, #496]	@ (8011fcc <aux_set_value+0x290>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	b10b      	cbz	r3, 8011de4 <aux_set_value+0xa8>
                on_setting_changed(id);
 8011de0:	4628      	mov	r0, r5
 8011de2:	4798      	blx	r3
}
 8011de4:	2000      	movs	r0, #0
 8011de6:	b002      	add	sp, #8
 8011de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            change.mask = (uint8_t)value & digital.inx.mask;
 8011dec:	4b74      	ldr	r3, [pc, #464]	@ (8011fc0 <aux_set_value+0x284>)
 8011dee:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011df2:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.pullup_disable_in.mask ^ change.mask)) {
 8011df6:	4b73      	ldr	r3, [pc, #460]	@ (8011fc4 <aux_set_value+0x288>)
 8011df8:	f893 2169 	ldrb.w	r2, [r3, #361]	@ 0x169
 8011dfc:	ea84 0302 	eor.w	r3, r4, r2
 8011e00:	4294      	cmp	r4, r2
 8011e02:	d038      	beq.n	8011e76 <aux_set_value+0x13a>
                gpio_in_config_t config = {0};
 8011e04:	2600      	movs	r6, #0
 8011e06:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011e0a:	f88d 6006 	strb.w	r6, [sp, #6]
 8011e0e:	e012      	b.n	8011e36 <aux_set_value+0xfa>
                            config.pull_mode = change.mask & (1 << xbar->id)  ? PullMode_Down : PullMode_Up;
 8011e10:	2201      	movs	r2, #1
 8011e12:	f88d 2006 	strb.w	r2, [sp, #6]
                            config.inverted = xbar->mode.inverted;
 8011e16:	7dda      	ldrb	r2, [r3, #23]
 8011e18:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8011e1c:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.debounce = xbar->mode.inverted;
 8011e20:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 8011e24:	2200      	movs	r2, #0
 8011e26:	a901      	add	r1, sp, #4
 8011e28:	4618      	mov	r0, r3
 8011e2a:	47c0      	blx	r8
                    port++;
 8011e2c:	3601      	adds	r6, #1
 8011e2e:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8011e30:	087f      	lsrs	r7, r7, #1
 8011e32:	463b      	mov	r3, r7
 8011e34:	b1ff      	cbz	r7, 8011e76 <aux_set_value+0x13a>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, port)))) {
 8011e36:	b2df      	uxtb	r7, r3
 8011e38:	f013 0f01 	tst.w	r3, #1
 8011e3c:	d0f6      	beq.n	8011e2c <aux_set_value+0xf0>
 8011e3e:	4b62      	ldr	r3, [pc, #392]	@ (8011fc8 <aux_set_value+0x28c>)
 8011e40:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8011e44:	4631      	mov	r1, r6
 8011e46:	4b5e      	ldr	r3, [pc, #376]	@ (8011fc0 <aux_set_value+0x284>)
 8011e48:	6818      	ldr	r0, [r3, #0]
 8011e4a:	f7ff fe99 	bl	8011b80 <ioports_map_reverse>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	2100      	movs	r1, #0
 8011e52:	2001      	movs	r0, #1
 8011e54:	47c0      	blx	r8
 8011e56:	4603      	mov	r3, r0
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d0e7      	beq.n	8011e2c <aux_set_value+0xf0>
                        if(xbar->config) {
 8011e5c:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8011e60:	f1b8 0f00 	cmp.w	r8, #0
 8011e64:	d0e2      	beq.n	8011e2c <aux_set_value+0xf0>
                            config.pull_mode = change.mask & (1 << xbar->id)  ? PullMode_Down : PullMode_Up;
 8011e66:	7802      	ldrb	r2, [r0, #0]
 8011e68:	fa44 f202 	asr.w	r2, r4, r2
 8011e6c:	f012 0f01 	tst.w	r2, #1
 8011e70:	d0ce      	beq.n	8011e10 <aux_set_value+0xd4>
 8011e72:	2202      	movs	r2, #2
 8011e74:	e7cd      	b.n	8011e12 <aux_set_value+0xd6>
            settings.ioport.pullup_disable_in.mask = change.mask;
 8011e76:	4b53      	ldr	r3, [pc, #332]	@ (8011fc4 <aux_set_value+0x288>)
 8011e78:	f883 4169 	strb.w	r4, [r3, #361]	@ 0x169
            if(on_setting_changed)
 8011e7c:	4b53      	ldr	r3, [pc, #332]	@ (8011fcc <aux_set_value+0x290>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d0af      	beq.n	8011de4 <aux_set_value+0xa8>
                on_setting_changed(id);
 8011e84:	4628      	mov	r0, r5
 8011e86:	4798      	blx	r3
 8011e88:	e7ac      	b.n	8011de4 <aux_set_value+0xa8>
            change.mask = (uint8_t)value & digital.outx.mask;
 8011e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8011fc0 <aux_set_value+0x284>)
 8011e8c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8011e90:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.invert_out.mask ^ change.mask)) {
 8011e94:	4b4b      	ldr	r3, [pc, #300]	@ (8011fc4 <aux_set_value+0x288>)
 8011e96:	f893 216a 	ldrb.w	r2, [r3, #362]	@ 0x16a
 8011e9a:	ea84 0302 	eor.w	r3, r4, r2
 8011e9e:	4294      	cmp	r4, r2
 8011ea0:	d0a0      	beq.n	8011de4 <aux_set_value+0xa8>
                gpio_out_config_t config = {0};
 8011ea2:	2600      	movs	r6, #0
 8011ea4:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011ea8:	f88d 6006 	strb.w	r6, [sp, #6]
 8011eac:	e004      	b.n	8011eb8 <aux_set_value+0x17c>
                    port++;
 8011eae:	3601      	adds	r6, #1
 8011eb0:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8011eb2:	087f      	lsrs	r7, r7, #1
 8011eb4:	463b      	mov	r3, r7
 8011eb6:	b357      	cbz	r7, 8011f0e <aux_set_value+0x1d2>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, port)))) {
 8011eb8:	b2df      	uxtb	r7, r3
 8011eba:	f013 0f01 	tst.w	r3, #1
 8011ebe:	d0f6      	beq.n	8011eae <aux_set_value+0x172>
 8011ec0:	4b41      	ldr	r3, [pc, #260]	@ (8011fc8 <aux_set_value+0x28c>)
 8011ec2:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8011ec6:	4631      	mov	r1, r6
 8011ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8011fc0 <aux_set_value+0x284>)
 8011eca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011ecc:	f7ff fe58 	bl	8011b80 <ioports_map_reverse>
 8011ed0:	4602      	mov	r2, r0
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	4608      	mov	r0, r1
 8011ed6:	47c0      	blx	r8
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d0e8      	beq.n	8011eae <aux_set_value+0x172>
                        if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8011edc:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8011ee0:	f1b8 0f00 	cmp.w	r8, #0
 8011ee4:	d0e3      	beq.n	8011eae <aux_set_value+0x172>
 8011ee6:	7dc2      	ldrb	r2, [r0, #23]
 8011ee8:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8011eec:	d1df      	bne.n	8011eae <aux_set_value+0x172>
                            config.inverted = !!(change.mask & (1 << xbar->id));
 8011eee:	7802      	ldrb	r2, [r0, #0]
 8011ef0:	fa44 f202 	asr.w	r2, r4, r2
 8011ef4:	f002 0201 	and.w	r2, r2, #1
 8011ef8:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.open_drain = xbar->mode.open_drain;
 8011efc:	7d82      	ldrb	r2, [r0, #22]
 8011efe:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8011f02:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 8011f06:	2200      	movs	r2, #0
 8011f08:	a901      	add	r1, sp, #4
 8011f0a:	47c0      	blx	r8
 8011f0c:	e7cf      	b.n	8011eae <aux_set_value+0x172>
                settings.ioport.invert_out.mask = change.mask;
 8011f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8011fc4 <aux_set_value+0x288>)
 8011f10:	f883 416a 	strb.w	r4, [r3, #362]	@ 0x16a
                if(on_setting_changed)
 8011f14:	4b2d      	ldr	r3, [pc, #180]	@ (8011fcc <aux_set_value+0x290>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	f43f af63 	beq.w	8011de4 <aux_set_value+0xa8>
                    on_setting_changed(id);
 8011f1e:	4628      	mov	r0, r5
 8011f20:	4798      	blx	r3
 8011f22:	e75f      	b.n	8011de4 <aux_set_value+0xa8>
            change.mask = (uint8_t)value & digital.outx.mask;
 8011f24:	4b26      	ldr	r3, [pc, #152]	@ (8011fc0 <aux_set_value+0x284>)
 8011f26:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8011f2a:	ea01 0403 	and.w	r4, r1, r3
            if((changed.mask = settings.ioport.od_enable_out.mask ^ change.mask)) {
 8011f2e:	4b25      	ldr	r3, [pc, #148]	@ (8011fc4 <aux_set_value+0x288>)
 8011f30:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8011f34:	ea84 0302 	eor.w	r3, r4, r2
 8011f38:	4294      	cmp	r4, r2
 8011f3a:	f43f af53 	beq.w	8011de4 <aux_set_value+0xa8>
                gpio_out_config_t config = {0};
 8011f3e:	2600      	movs	r6, #0
 8011f40:	f8ad 6004 	strh.w	r6, [sp, #4]
 8011f44:	f88d 6006 	strb.w	r6, [sp, #6]
 8011f48:	e004      	b.n	8011f54 <aux_set_value+0x218>
                    port++;
 8011f4a:	3601      	adds	r6, #1
 8011f4c:	b2f6      	uxtb	r6, r6
                } while(changed.mask >>= 1);
 8011f4e:	087f      	lsrs	r7, r7, #1
 8011f50:	463b      	mov	r3, r7
 8011f52:	b34f      	cbz	r7, 8011fa8 <aux_set_value+0x26c>
                    if((changed.mask & 0x01) && (xbar = hal.port.get_pin_info(Port_Digital, Port_Output, ioports_map_reverse(digital.out.ports, port)))) {
 8011f54:	b2df      	uxtb	r7, r3
 8011f56:	f013 0f01 	tst.w	r3, #1
 8011f5a:	d0f6      	beq.n	8011f4a <aux_set_value+0x20e>
 8011f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8011fc8 <aux_set_value+0x28c>)
 8011f5e:	f8d3 8128 	ldr.w	r8, [r3, #296]	@ 0x128
 8011f62:	4631      	mov	r1, r6
 8011f64:	4b16      	ldr	r3, [pc, #88]	@ (8011fc0 <aux_set_value+0x284>)
 8011f66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011f68:	f7ff fe0a 	bl	8011b80 <ioports_map_reverse>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	2101      	movs	r1, #1
 8011f70:	4608      	mov	r0, r1
 8011f72:	47c0      	blx	r8
 8011f74:	2800      	cmp	r0, #0
 8011f76:	d0e8      	beq.n	8011f4a <aux_set_value+0x20e>
                        if(xbar->config && !(xbar->mode.pwm || xbar->mode.servo_pwm)) {
 8011f78:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8011f7c:	f1b8 0f00 	cmp.w	r8, #0
 8011f80:	d0e3      	beq.n	8011f4a <aux_set_value+0x20e>
 8011f82:	7dc2      	ldrb	r2, [r0, #23]
 8011f84:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8011f88:	d1df      	bne.n	8011f4a <aux_set_value+0x20e>
                            config.inverted = xbar->mode.inverted;
 8011f8a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8011f8e:	f88d 2004 	strb.w	r2, [sp, #4]
                            config.open_drain = !!(change.mask & (1 << xbar->id));
 8011f92:	7802      	ldrb	r2, [r0, #0]
 8011f94:	fa44 f202 	asr.w	r2, r4, r2
 8011f98:	f002 0201 	and.w	r2, r2, #1
 8011f9c:	f88d 2005 	strb.w	r2, [sp, #5]
                            xbar->config(xbar, &config, false);
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	a901      	add	r1, sp, #4
 8011fa4:	47c0      	blx	r8
 8011fa6:	e7d0      	b.n	8011f4a <aux_set_value+0x20e>
                settings.ioport.od_enable_out.mask = change.mask;
 8011fa8:	4b06      	ldr	r3, [pc, #24]	@ (8011fc4 <aux_set_value+0x288>)
 8011faa:	f883 416b 	strb.w	r4, [r3, #363]	@ 0x16b
                if(on_setting_changed)
 8011fae:	4b07      	ldr	r3, [pc, #28]	@ (8011fcc <aux_set_value+0x290>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	f43f af16 	beq.w	8011de4 <aux_set_value+0xa8>
                    on_setting_changed(id);
 8011fb8:	4628      	mov	r0, r5
 8011fba:	4798      	blx	r3
 8011fbc:	e712      	b.n	8011de4 <aux_set_value+0xa8>
 8011fbe:	bf00      	nop
 8011fc0:	20001538 	.word	0x20001538
 8011fc4:	20001bd8 	.word	0x20001bd8
 8011fc8:	200011c0 	.word	0x200011c0
 8011fcc:	20001620 	.word	0x20001620

08011fd0 <ioport_save_input_settings>:
{
 8011fd0:	b538      	push	{r3, r4, r5, lr}
 8011fd2:	460c      	mov	r4, r1
    if(digital.inx.mask & (1 << xbar->id)) {
 8011fd4:	4b22      	ldr	r3, [pc, #136]	@ (8012060 <ioport_save_input_settings+0x90>)
 8011fd6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8011fda:	7802      	ldrb	r2, [r0, #0]
 8011fdc:	4113      	asrs	r3, r2
 8011fde:	f013 0f01 	tst.w	r3, #1
 8011fe2:	d00a      	beq.n	8011ffa <ioport_save_input_settings+0x2a>
        if(config->inverted)
 8011fe4:	780b      	ldrb	r3, [r1, #0]
 8011fe6:	b183      	cbz	r3, 801200a <ioport_save_input_settings+0x3a>
            settings.ioport.invert_in.mask |= (1 << xbar->id);
 8011fe8:	4d1e      	ldr	r5, [pc, #120]	@ (8012064 <ioport_save_input_settings+0x94>)
 8011fea:	f895 3168 	ldrb.w	r3, [r5, #360]	@ 0x168
 8011fee:	2101      	movs	r1, #1
 8011ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8011ff4:	4313      	orrs	r3, r2
 8011ff6:	f885 3168 	strb.w	r3, [r5, #360]	@ 0x168
    if(xbar->function == Input_Probe)
 8011ffa:	7840      	ldrb	r0, [r0, #1]
 8011ffc:	280e      	cmp	r0, #14
 8011ffe:	d00f      	beq.n	8012020 <ioport_save_input_settings+0x50>
    else if(xbar->function < Input_Probe) {
 8012000:	280d      	cmp	r0, #13
 8012002:	d916      	bls.n	8012032 <ioport_save_input_settings+0x62>
    settings_write_global();
 8012004:	f00a f866 	bl	801c0d4 <settings_write_global>
}
 8012008:	bd38      	pop	{r3, r4, r5, pc}
            settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 801200a:	4d16      	ldr	r5, [pc, #88]	@ (8012064 <ioport_save_input_settings+0x94>)
 801200c:	f895 1168 	ldrb.w	r1, [r5, #360]	@ 0x168
 8012010:	2301      	movs	r3, #1
 8012012:	4093      	lsls	r3, r2
 8012014:	43db      	mvns	r3, r3
 8012016:	b25b      	sxtb	r3, r3
 8012018:	400b      	ands	r3, r1
 801201a:	f885 3168 	strb.w	r3, [r5, #360]	@ 0x168
 801201e:	e7ec      	b.n	8011ffa <ioport_save_input_settings+0x2a>
        settings.probe.invert_probe_pin = config->inverted;
 8012020:	7821      	ldrb	r1, [r4, #0]
 8012022:	4b10      	ldr	r3, [pc, #64]	@ (8012064 <ioport_save_input_settings+0x94>)
 8012024:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 8012028:	f361 0200 	bfi	r2, r1, #0, #1
 801202c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8012030:	e7e8      	b.n	8012004 <ioport_save_input_settings+0x34>
        if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask) {
 8012032:	f7fa fce9 	bl	800ca08 <xbar_fn_to_signals_mask>
 8012036:	b283      	uxth	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d0e3      	beq.n	8012004 <ioport_save_input_settings+0x34>
            if(config->inverted)
 801203c:	7822      	ldrb	r2, [r4, #0]
 801203e:	b132      	cbz	r2, 801204e <ioport_save_input_settings+0x7e>
                settings.control_invert.mask |= ctrl.mask;
 8012040:	4a08      	ldr	r2, [pc, #32]	@ (8012064 <ioport_save_input_settings+0x94>)
 8012042:	f8b2 106c 	ldrh.w	r1, [r2, #108]	@ 0x6c
 8012046:	430b      	orrs	r3, r1
 8012048:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 801204c:	e7da      	b.n	8012004 <ioport_save_input_settings+0x34>
                settings.control_invert.mask &= ~ctrl.mask;
 801204e:	4a05      	ldr	r2, [pc, #20]	@ (8012064 <ioport_save_input_settings+0x94>)
 8012050:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 8012054:	43c0      	mvns	r0, r0
 8012056:	b200      	sxth	r0, r0
 8012058:	4003      	ands	r3, r0
 801205a:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 801205e:	e7d1      	b.n	8012004 <ioport_save_input_settings+0x34>
 8012060:	20001538 	.word	0x20001538
 8012064:	20001bd8 	.word	0x20001bd8

08012068 <ioport_save_output_settings>:
{
 8012068:	b508      	push	{r3, lr}
    if(digital.outx.mask & (1 << xbar->id)) {
 801206a:	4b10      	ldr	r3, [pc, #64]	@ (80120ac <ioport_save_output_settings+0x44>)
 801206c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8012070:	7802      	ldrb	r2, [r0, #0]
 8012072:	4113      	asrs	r3, r2
 8012074:	f013 0f01 	tst.w	r3, #1
 8012078:	d00a      	beq.n	8012090 <ioport_save_output_settings+0x28>
        if(config->inverted)
 801207a:	780b      	ldrb	r3, [r1, #0]
 801207c:	b15b      	cbz	r3, 8012096 <ioport_save_output_settings+0x2e>
            settings.ioport.invert_out.mask |= (1 << xbar->id);
 801207e:	480c      	ldr	r0, [pc, #48]	@ (80120b0 <ioport_save_output_settings+0x48>)
 8012080:	f890 316a 	ldrb.w	r3, [r0, #362]	@ 0x16a
 8012084:	2101      	movs	r1, #1
 8012086:	fa01 f202 	lsl.w	r2, r1, r2
 801208a:	4313      	orrs	r3, r2
 801208c:	f880 316a 	strb.w	r3, [r0, #362]	@ 0x16a
    settings_write_global();
 8012090:	f00a f820 	bl	801c0d4 <settings_write_global>
}
 8012094:	bd08      	pop	{r3, pc}
            settings.ioport.invert_out.mask &= ~(1 << xbar->id);
 8012096:	4806      	ldr	r0, [pc, #24]	@ (80120b0 <ioport_save_output_settings+0x48>)
 8012098:	f890 116a 	ldrb.w	r1, [r0, #362]	@ 0x16a
 801209c:	2301      	movs	r3, #1
 801209e:	4093      	lsls	r3, r2
 80120a0:	43db      	mvns	r3, r3
 80120a2:	b25b      	sxtb	r3, r3
 80120a4:	400b      	ands	r3, r1
 80120a6:	f880 316a 	strb.w	r3, [r0, #362]	@ 0x16a
 80120aa:	e7f1      	b.n	8012090 <ioport_save_output_settings+0x28>
 80120ac:	20001538 	.word	0x20001538
 80120b0:	20001bd8 	.word	0x20001bd8

080120b4 <ioport_setting_changed>:
    .load = ioport_settings_load,
    .save = settings_write_global
};

void ioport_setting_changed (setting_id_t id)
{
 80120b4:	b530      	push	{r4, r5, lr}
 80120b6:	b083      	sub	sp, #12
    if(on_setting_changed)
 80120b8:	4b70      	ldr	r3, [pc, #448]	@ (801227c <ioport_setting_changed+0x1c8>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	b113      	cbz	r3, 80120c4 <ioport_setting_changed+0x10>
        on_setting_changed(id);
 80120be:	4798      	blx	r3
            break;

        default:
            break;
    }
}
 80120c0:	b003      	add	sp, #12
 80120c2:	bd30      	pop	{r4, r5, pc}
    else switch(id) {
 80120c4:	3806      	subs	r0, #6
 80120c6:	280d      	cmp	r0, #13
 80120c8:	d8fa      	bhi.n	80120c0 <ioport_setting_changed+0xc>
 80120ca:	a301      	add	r3, pc, #4	@ (adr r3, 80120d0 <ioport_setting_changed+0x1c>)
 80120cc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80120d0:	08012109 	.word	0x08012109
 80120d4:	080120c1 	.word	0x080120c1
 80120d8:	080120c1 	.word	0x080120c1
 80120dc:	080120c1 	.word	0x080120c1
 80120e0:	080120c1 	.word	0x080120c1
 80120e4:	080120c1 	.word	0x080120c1
 80120e8:	080120c1 	.word	0x080120c1
 80120ec:	080120c1 	.word	0x080120c1
 80120f0:	080121a9 	.word	0x080121a9
 80120f4:	080120c1 	.word	0x080120c1
 80120f8:	080120c1 	.word	0x080120c1
 80120fc:	080121a9 	.word	0x080121a9
 8012100:	080120c1 	.word	0x080120c1
 8012104:	08012109 	.word	0x08012109
                gpio_in_config_t in_config = {0};
 8012108:	2300      	movs	r3, #0
 801210a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801210e:	f88d 3006 	strb.w	r3, [sp, #6]
                uint8_t port = digital.in.ports->n_ports;
 8012112:	4b5b      	ldr	r3, [pc, #364]	@ (8012280 <ioport_setting_changed+0x1cc>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	781c      	ldrb	r4, [r3, #0]
 8012118:	e011      	b.n	801213e <ioport_setting_changed+0x8a>
                                settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 801211a:	485a      	ldr	r0, [pc, #360]	@ (8012284 <ioport_setting_changed+0x1d0>)
 801211c:	f890 1168 	ldrb.w	r1, [r0, #360]	@ 0x168
 8012120:	781d      	ldrb	r5, [r3, #0]
 8012122:	2201      	movs	r2, #1
 8012124:	40aa      	lsls	r2, r5
 8012126:	43d2      	mvns	r2, r2
 8012128:	b252      	sxtb	r2, r2
 801212a:	400a      	ands	r2, r1
 801212c:	f880 2168 	strb.w	r2, [r0, #360]	@ 0x168
                            xbar->config(xbar, &in_config, false);
 8012130:	699d      	ldr	r5, [r3, #24]
 8012132:	2200      	movs	r2, #0
 8012134:	a901      	add	r1, sp, #4
 8012136:	4618      	mov	r0, r3
 8012138:	47a8      	blx	r5
                } while(port);
 801213a:	2c00      	cmp	r4, #0
 801213c:	d0c0      	beq.n	80120c0 <ioport_setting_changed+0xc>
                    if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 801213e:	4b52      	ldr	r3, [pc, #328]	@ (8012288 <ioport_setting_changed+0x1d4>)
 8012140:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 8012144:	3c01      	subs	r4, #1
 8012146:	b2e4      	uxtb	r4, r4
 8012148:	4621      	mov	r1, r4
 801214a:	4b4d      	ldr	r3, [pc, #308]	@ (8012280 <ioport_setting_changed+0x1cc>)
 801214c:	6818      	ldr	r0, [r3, #0]
 801214e:	f7ff fd17 	bl	8011b80 <ioports_map_reverse>
 8012152:	4602      	mov	r2, r0
 8012154:	2100      	movs	r1, #0
 8012156:	2001      	movs	r0, #1
 8012158:	47a8      	blx	r5
 801215a:	4603      	mov	r3, r0
 801215c:	2800      	cmp	r0, #0
 801215e:	d0ec      	beq.n	801213a <ioport_setting_changed+0x86>
                        if(xbar->config && xbar->function == Input_Probe) {
 8012160:	6982      	ldr	r2, [r0, #24]
 8012162:	2a00      	cmp	r2, #0
 8012164:	d0e9      	beq.n	801213a <ioport_setting_changed+0x86>
 8012166:	7842      	ldrb	r2, [r0, #1]
 8012168:	2a0e      	cmp	r2, #14
 801216a:	d1e6      	bne.n	801213a <ioport_setting_changed+0x86>
                            in_config.debounce  = Off;
 801216c:	2200      	movs	r2, #0
 801216e:	f88d 2005 	strb.w	r2, [sp, #5]
                            in_config.inverted  = settings.probe.invert_probe_pin;
 8012172:	4a44      	ldr	r2, [pc, #272]	@ (8012284 <ioport_setting_changed+0x1d0>)
 8012174:	f892 1100 	ldrb.w	r1, [r2, #256]	@ 0x100
 8012178:	f3c1 0200 	ubfx	r2, r1, #0, #1
 801217c:	f88d 2004 	strb.w	r2, [sp, #4]
                            in_config.pull_mode = settings.probe.disable_probe_pullup ? PullMode_None : PullMode_Up;
 8012180:	084a      	lsrs	r2, r1, #1
 8012182:	f082 0201 	eor.w	r2, r2, #1
 8012186:	f002 0201 	and.w	r2, r2, #1
 801218a:	f88d 2006 	strb.w	r2, [sp, #6]
                            if(in_config.inverted)
 801218e:	f011 0f01 	tst.w	r1, #1
 8012192:	d0c2      	beq.n	801211a <ioport_setting_changed+0x66>
                                settings.ioport.invert_in.mask |= (1 << xbar->id);
 8012194:	483b      	ldr	r0, [pc, #236]	@ (8012284 <ioport_setting_changed+0x1d0>)
 8012196:	f890 2168 	ldrb.w	r2, [r0, #360]	@ 0x168
 801219a:	781d      	ldrb	r5, [r3, #0]
 801219c:	2101      	movs	r1, #1
 801219e:	40a9      	lsls	r1, r5
 80121a0:	430a      	orrs	r2, r1
 80121a2:	f880 2168 	strb.w	r2, [r0, #360]	@ 0x168
 80121a6:	e7c3      	b.n	8012130 <ioport_setting_changed+0x7c>
                gpio_in_config_t in_config = {0};
 80121a8:	2300      	movs	r3, #0
 80121aa:	f8ad 3004 	strh.w	r3, [sp, #4]
 80121ae:	f88d 3006 	strb.w	r3, [sp, #6]
                uint8_t port = digital.in.ports->n_ports;
 80121b2:	4b33      	ldr	r3, [pc, #204]	@ (8012280 <ioport_setting_changed+0x1cc>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	781c      	ldrb	r4, [r3, #0]
 80121b8:	e012      	b.n	80121e0 <ioport_setting_changed+0x12c>
                                settings.ioport.invert_in.mask &= ~(1 << xbar->id);
 80121ba:	4932      	ldr	r1, [pc, #200]	@ (8012284 <ioport_setting_changed+0x1d0>)
 80121bc:	f891 2168 	ldrb.w	r2, [r1, #360]	@ 0x168
 80121c0:	7828      	ldrb	r0, [r5, #0]
 80121c2:	2301      	movs	r3, #1
 80121c4:	4083      	lsls	r3, r0
 80121c6:	43db      	mvns	r3, r3
 80121c8:	b25b      	sxtb	r3, r3
 80121ca:	4013      	ands	r3, r2
 80121cc:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
                            xbar->config(xbar, &in_config, false);
 80121d0:	69ab      	ldr	r3, [r5, #24]
 80121d2:	2200      	movs	r2, #0
 80121d4:	a901      	add	r1, sp, #4
 80121d6:	4628      	mov	r0, r5
 80121d8:	4798      	blx	r3
                } while(port);
 80121da:	2c00      	cmp	r4, #0
 80121dc:	f43f af70 	beq.w	80120c0 <ioport_setting_changed+0xc>
                    if((xbar = hal.port.get_pin_info(Port_Digital, Port_Input, ioports_map_reverse(digital.in.ports, --port)))) {
 80121e0:	4b29      	ldr	r3, [pc, #164]	@ (8012288 <ioport_setting_changed+0x1d4>)
 80121e2:	f8d3 5128 	ldr.w	r5, [r3, #296]	@ 0x128
 80121e6:	3c01      	subs	r4, #1
 80121e8:	b2e4      	uxtb	r4, r4
 80121ea:	4621      	mov	r1, r4
 80121ec:	4b24      	ldr	r3, [pc, #144]	@ (8012280 <ioport_setting_changed+0x1cc>)
 80121ee:	6818      	ldr	r0, [r3, #0]
 80121f0:	f7ff fcc6 	bl	8011b80 <ioports_map_reverse>
 80121f4:	4602      	mov	r2, r0
 80121f6:	2100      	movs	r1, #0
 80121f8:	2001      	movs	r0, #1
 80121fa:	47a8      	blx	r5
 80121fc:	4605      	mov	r5, r0
 80121fe:	2800      	cmp	r0, #0
 8012200:	d0eb      	beq.n	80121da <ioport_setting_changed+0x126>
                        if(xbar->config && xbar->function < Input_Probe) {
 8012202:	6983      	ldr	r3, [r0, #24]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d0e8      	beq.n	80121da <ioport_setting_changed+0x126>
 8012208:	7843      	ldrb	r3, [r0, #1]
 801220a:	2b0d      	cmp	r3, #13
 801220c:	d8e5      	bhi.n	80121da <ioport_setting_changed+0x126>
                            in_config.debounce = xbar->mode.debounce;
 801220e:	7dc3      	ldrb	r3, [r0, #23]
 8012210:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012214:	f88d 3005 	strb.w	r3, [sp, #5]
                            in_config.inverted = !!(settings.ioport.invert_in.mask & (1 << xbar->id));
 8012218:	4b1a      	ldr	r3, [pc, #104]	@ (8012284 <ioport_setting_changed+0x1d0>)
 801221a:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 801221e:	7802      	ldrb	r2, [r0, #0]
 8012220:	4113      	asrs	r3, r2
 8012222:	f003 0301 	and.w	r3, r3, #1
 8012226:	f88d 3004 	strb.w	r3, [sp, #4]
                            in_config.pull_mode = (pull_mode_t)xbar->mode.pull_mode;
 801222a:	7d83      	ldrb	r3, [r0, #22]
 801222c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012230:	f88d 3006 	strb.w	r3, [sp, #6]
                            if((ctrl = xbar_fn_to_signals_mask(xbar->function)).mask) {
 8012234:	7840      	ldrb	r0, [r0, #1]
 8012236:	f7fa fbe7 	bl	800ca08 <xbar_fn_to_signals_mask>
 801223a:	b280      	uxth	r0, r0
 801223c:	b180      	cbz	r0, 8012260 <ioport_setting_changed+0x1ac>
                                in_config.inverted = !!(settings.control_invert.mask & ctrl.mask);
 801223e:	4b11      	ldr	r3, [pc, #68]	@ (8012284 <ioport_setting_changed+0x1d0>)
 8012240:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 8012244:	4210      	tst	r0, r2
 8012246:	bf14      	ite	ne
 8012248:	2201      	movne	r2, #1
 801224a:	2200      	moveq	r2, #0
 801224c:	f88d 2004 	strb.w	r2, [sp, #4]
                                in_config.pull_mode = (settings.control_disable_pullup.mask & ctrl.mask) ? PullMode_None : PullMode_Up;
 8012250:	f8b3 306e 	ldrh.w	r3, [r3, #110]	@ 0x6e
 8012254:	4218      	tst	r0, r3
 8012256:	bf0c      	ite	eq
 8012258:	2301      	moveq	r3, #1
 801225a:	2300      	movne	r3, #0
 801225c:	f88d 3006 	strb.w	r3, [sp, #6]
                            if(in_config.inverted)
 8012260:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d0a8      	beq.n	80121ba <ioport_setting_changed+0x106>
                                settings.ioport.invert_in.mask |= (1 << xbar->id);
 8012268:	4906      	ldr	r1, [pc, #24]	@ (8012284 <ioport_setting_changed+0x1d0>)
 801226a:	f891 3168 	ldrb.w	r3, [r1, #360]	@ 0x168
 801226e:	7828      	ldrb	r0, [r5, #0]
 8012270:	2201      	movs	r2, #1
 8012272:	4082      	lsls	r2, r0
 8012274:	4313      	orrs	r3, r2
 8012276:	f881 3168 	strb.w	r3, [r1, #360]	@ 0x168
 801227a:	e7a9      	b.n	80121d0 <ioport_setting_changed+0x11c>
 801227c:	20001620 	.word	0x20001620
 8012280:	20001538 	.word	0x20001538
 8012284:	20001bd8 	.word	0x20001bd8
 8012288:	200011c0 	.word	0x200011c0

0801228c <ioports_add_settings>:

void ioports_add_settings (driver_settings_load_ptr settings_loaded, setting_changed_ptr setting_changed)
{
 801228c:	b508      	push	{r3, lr}
    if(settings_loaded)
 801228e:	b108      	cbz	r0, 8012294 <ioports_add_settings+0x8>
        on_settings_loaded = settings_loaded;
 8012290:	4a04      	ldr	r2, [pc, #16]	@ (80122a4 <ioports_add_settings+0x18>)
 8012292:	6010      	str	r0, [r2, #0]

    if(setting_changed)
 8012294:	b109      	cbz	r1, 801229a <ioports_add_settings+0xe>
        on_setting_changed = setting_changed;
 8012296:	4b04      	ldr	r3, [pc, #16]	@ (80122a8 <ioports_add_settings+0x1c>)
 8012298:	6019      	str	r1, [r3, #0]

    settings_register(&setting_details);
 801229a:	4804      	ldr	r0, [pc, #16]	@ (80122ac <ioports_add_settings+0x20>)
 801229c:	f00a fb36 	bl	801c90c <settings_register>
}
 80122a0:	bd08      	pop	{r3, pc}
 80122a2:	bf00      	nop
 80122a4:	20001624 	.word	0x20001624
 80122a8:	20001620 	.word	0x20001620
 80122ac:	200001c4 	.word	0x200001c4

080122b0 <homing_signals_select>:
    return state;
}

// Merge (bitwise or) home switch inputs (typically acquired from limits.min and limits.min2).
ISR_CODE static axes_signals_t ISR_FUNC(homing_signals_select)(home_signals_t signals, axes_signals_t auto_square, squaring_mode_t mode)
{
 80122b0:	b082      	sub	sp, #8
 80122b2:	f8ad 0004 	strh.w	r0, [sp, #4]
    axes_signals_t state;

    switch(mode) {
 80122b6:	2a01      	cmp	r2, #1
 80122b8:	d008      	beq.n	80122cc <homing_signals_select+0x1c>
 80122ba:	2a02      	cmp	r2, #2
 80122bc:	d00e      	beq.n	80122dc <homing_signals_select+0x2c>

        default:
            break;
    }

    state.mask = signals.a.mask | signals.b.mask;
 80122be:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80122c2:	f89d 3005 	ldrb.w	r3, [sp, #5]

    return state;
}
 80122c6:	4318      	orrs	r0, r3
 80122c8:	b002      	add	sp, #8
 80122ca:	4770      	bx	lr
            signals.a.mask &= ~auto_square.mask;
 80122cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80122d0:	43c9      	mvns	r1, r1
 80122d2:	b249      	sxtb	r1, r1
 80122d4:	400b      	ands	r3, r1
 80122d6:	f88d 3004 	strb.w	r3, [sp, #4]
            break;
 80122da:	e7f0      	b.n	80122be <homing_signals_select+0xe>
            signals.b.mask &= ~auto_square.mask;
 80122dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80122e0:	43c9      	mvns	r1, r1
 80122e2:	b249      	sxtb	r1, r1
 80122e4:	400b      	ands	r3, r1
 80122e6:	f88d 3005 	strb.w	r3, [sp, #5]
            break;
 80122ea:	e7e8      	b.n	80122be <homing_signals_select+0xe>

080122ec <get_homing_rate>:
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
}

static float get_homing_rate (axes_signals_t cycle, homing_mode_t mode)
{
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 80122ec:	2901      	cmp	r1, #1
 80122ee:	d003      	beq.n	80122f8 <get_homing_rate+0xc>
 80122f0:	4b03      	ldr	r3, [pc, #12]	@ (8012300 <get_homing_rate+0x14>)
 80122f2:	ed93 0a42 	vldr	s0, [r3, #264]	@ 0x108
}
 80122f6:	4770      	bx	lr
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 80122f8:	4b01      	ldr	r3, [pc, #4]	@ (8012300 <get_homing_rate+0x14>)
 80122fa:	ed93 0a41 	vldr	s0, [r3, #260]	@ 0x104
 80122fe:	4770      	bx	lr
 8012300:	20001bd8 	.word	0x20001bd8

08012304 <check_travel_limits>:
static bool check_travel_limits (float *target, axes_signals_t axes, bool is_cartesian)
{
    bool failed = false;
    uint_fast8_t idx = N_AXIS;

    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 8012304:	b3ca      	cbz	r2, 801237a <check_travel_limits+0x76>
{
 8012306:	b510      	push	{r4, lr}
 8012308:	4614      	mov	r4, r2
    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 801230a:	4b1e      	ldr	r3, [pc, #120]	@ (8012384 <check_travel_limits+0x80>)
 801230c:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8012310:	fa5f fc81 	uxtb.w	ip, r1
 8012314:	420a      	tst	r2, r1
 8012316:	d02c      	beq.n	8012372 <check_travel_limits+0x6e>
    uint_fast8_t idx = N_AXIS;
 8012318:	2303      	movs	r3, #3
 801231a:	e000      	b.n	801231e <check_travel_limits+0x1a>
        idx--;
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
    } while(!failed && idx);
 801231c:	b33b      	cbz	r3, 801236e <check_travel_limits+0x6a>
        idx--;
 801231e:	3b01      	subs	r3, #1
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
 8012320:	fa22 f103 	lsr.w	r1, r2, r3
 8012324:	f011 0f01 	tst.w	r1, #1
 8012328:	d0f8      	beq.n	801231c <check_travel_limits+0x18>
 801232a:	fa2c f103 	lsr.w	r1, ip, r3
 801232e:	f011 0f01 	tst.w	r1, #1
 8012332:	d0f3      	beq.n	801231c <check_travel_limits+0x18>
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
 8012334:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012338:	edd1 7a00 	vldr	s15, [r1]
 801233c:	f103 0e18 	add.w	lr, r3, #24
 8012340:	4910      	ldr	r1, [pc, #64]	@ (8012384 <check_travel_limits+0x80>)
 8012342:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8012346:	ed91 7a01 	vldr	s14, [r1, #4]
 801234a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012352:	d40f      	bmi.n	8012374 <check_travel_limits+0x70>
 8012354:	f103 0e1a 	add.w	lr, r3, #26
 8012358:	490a      	ldr	r1, [pc, #40]	@ (8012384 <check_travel_limits+0x80>)
 801235a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 801235e:	ed91 7a02 	vldr	s14, [r1, #8]
 8012362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801236a:	ddd7      	ble.n	801231c <check_travel_limits+0x18>
 801236c:	e002      	b.n	8012374 <check_travel_limits+0x70>
 801236e:	2400      	movs	r4, #0
 8012370:	e000      	b.n	8012374 <check_travel_limits+0x70>
    bool failed = false;
 8012372:	2400      	movs	r4, #0

    return is_cartesian && !failed;
 8012374:	b11c      	cbz	r4, 801237e <check_travel_limits+0x7a>
 8012376:	2000      	movs	r0, #0
}
 8012378:	bd10      	pop	{r4, pc}
    return is_cartesian && !failed;
 801237a:	2000      	movs	r0, #0
}
 801237c:	4770      	bx	lr
    return is_cartesian && !failed;
 801237e:	2001      	movs	r0, #1
 8012380:	e7fa      	b.n	8012378 <check_travel_limits+0x74>
 8012382:	bf00      	nop
 8012384:	200014a0 	.word	0x200014a0

08012388 <clip_3d_target>:

// Derived from code by Dimitrios Matthes & Vasileios Drakopoulos
// https://www.mdpi.com/1999-4893/16/4/201
static void clip_3d_target (coord_data_t *position, coord_data_t *target, work_envelope_t *envelope)
{
    float a = target->x - position->x;
 8012388:	edd1 5a00 	vldr	s11, [r1]
 801238c:	edd0 4a00 	vldr	s9, [r0]
 8012390:	ee35 6ae4 	vsub.f32	s12, s11, s9
    float b = target->y - position->y;
 8012394:	ed91 7a01 	vldr	s14, [r1, #4]
 8012398:	edd0 6a01 	vldr	s13, [r0, #4]
 801239c:	ee37 7a66 	vsub.f32	s14, s14, s13
    float c = target->z - position->z;
 80123a0:	edd1 7a02 	vldr	s15, [r1, #8]
 80123a4:	ed90 5a02 	vldr	s10, [r0, #8]
 80123a8:	ee77 7ac5 	vsub.f32	s15, s15, s10

    if(target->x < envelope->min.x) {
 80123ac:	ed92 5a00 	vldr	s10, [r2]
 80123b0:	eef4 5ac5 	vcmpe.f32	s11, s10
 80123b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b8:	d56e      	bpl.n	8012498 <clip_3d_target+0x110>
        target->y = b / a * (envelope->min.x - position->x) + position->y;
 80123ba:	eec7 5a06 	vdiv.f32	s11, s14, s12
 80123be:	ee35 5a64 	vsub.f32	s10, s10, s9
 80123c2:	ee65 5a85 	vmul.f32	s11, s11, s10
 80123c6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80123ca:	edc1 6a01 	vstr	s13, [r1, #4]
        target->z = c / a * (envelope->min.x - position->x) + position->z;
 80123ce:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80123d2:	edd2 5a00 	vldr	s11, [r2]
 80123d6:	ed90 5a00 	vldr	s10, [r0]
 80123da:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80123de:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80123e2:	edd0 5a02 	vldr	s11, [r0, #8]
 80123e6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80123ea:	edc1 6a02 	vstr	s13, [r1, #8]
        target->x = envelope->min.x;
 80123ee:	6813      	ldr	r3, [r2, #0]
 80123f0:	600b      	str	r3, [r1, #0]
        target->y = b / a * (envelope->max.x - position->x) + position->y;
        target->z = c / a * (envelope->max.x - position->x) + position->z;
        target->x = envelope->max.x;
    }

    if(target->y < envelope->min.y) {
 80123f2:	edd1 6a01 	vldr	s13, [r1, #4]
 80123f6:	edd2 5a01 	vldr	s11, [r2, #4]
 80123fa:	eef4 6ae5 	vcmpe.f32	s13, s11
 80123fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012402:	d56d      	bpl.n	80124e0 <clip_3d_target+0x158>
        target->x = a / b * (envelope->min.y - position->y) + position->x;
 8012404:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8012408:	ed90 5a01 	vldr	s10, [r0, #4]
 801240c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012410:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012414:	edd0 5a00 	vldr	s11, [r0]
 8012418:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801241c:	edc1 6a00 	vstr	s13, [r1]
        target->z = c / b * (envelope->min.y - position->y) + position->z;
 8012420:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012424:	edd2 5a01 	vldr	s11, [r2, #4]
 8012428:	ed90 5a01 	vldr	s10, [r0, #4]
 801242c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8012430:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012434:	edd0 5a02 	vldr	s11, [r0, #8]
 8012438:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801243c:	edc1 6a02 	vstr	s13, [r1, #8]
        target->y = envelope->min.y;
 8012440:	6853      	ldr	r3, [r2, #4]
 8012442:	604b      	str	r3, [r1, #4]
        target->x = a / b * (envelope->max.y - position->y) + position->x;
        target->z = c / b * (envelope->max.y - position->y) + position->z;
        target->y = envelope->max.y;
    }

    if(target->z < envelope->min.z) {
 8012444:	edd1 5a02 	vldr	s11, [r1, #8]
 8012448:	edd2 6a02 	vldr	s13, [r2, #8]
 801244c:	eef4 5ae6 	vcmpe.f32	s11, s13
 8012450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012454:	d56c      	bpl.n	8012530 <clip_3d_target+0x1a8>
        target->x = a / c * (envelope->min.z - position->z) + position->x;
 8012456:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801245a:	ed90 6a02 	vldr	s12, [r0, #8]
 801245e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012462:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012466:	ed90 6a00 	vldr	s12, [r0]
 801246a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801246e:	edc1 6a00 	vstr	s13, [r1]
        target->y = b / c * (envelope->min.z - position->z) + position->y;
 8012472:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012476:	edd2 7a02 	vldr	s15, [r2, #8]
 801247a:	ed90 7a02 	vldr	s14, [r0, #8]
 801247e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012486:	ed90 7a01 	vldr	s14, [r0, #4]
 801248a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801248e:	edc1 7a01 	vstr	s15, [r1, #4]
        target->z = envelope->min.z;
 8012492:	6893      	ldr	r3, [r2, #8]
 8012494:	608b      	str	r3, [r1, #8]
 8012496:	4770      	bx	lr
    } else if(target->x > envelope->max.x) {
 8012498:	ed92 5a03 	vldr	s10, [r2, #12]
 801249c:	eef4 5ac5 	vcmpe.f32	s11, s10
 80124a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124a4:	dda5      	ble.n	80123f2 <clip_3d_target+0x6a>
        target->y = b / a * (envelope->max.x - position->x) + position->y;
 80124a6:	eec7 5a06 	vdiv.f32	s11, s14, s12
 80124aa:	ee35 5a64 	vsub.f32	s10, s10, s9
 80124ae:	ee65 5a85 	vmul.f32	s11, s11, s10
 80124b2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80124b6:	edc1 6a01 	vstr	s13, [r1, #4]
        target->z = c / a * (envelope->max.x - position->x) + position->z;
 80124ba:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80124be:	edd2 5a03 	vldr	s11, [r2, #12]
 80124c2:	ed90 5a00 	vldr	s10, [r0]
 80124c6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80124ca:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80124ce:	edd0 5a02 	vldr	s11, [r0, #8]
 80124d2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80124d6:	edc1 6a02 	vstr	s13, [r1, #8]
        target->x = envelope->max.x;
 80124da:	68d3      	ldr	r3, [r2, #12]
 80124dc:	600b      	str	r3, [r1, #0]
 80124de:	e788      	b.n	80123f2 <clip_3d_target+0x6a>
    } else if(target->y > envelope->max.y) {
 80124e0:	edd2 5a04 	vldr	s11, [r2, #16]
 80124e4:	eef4 6ae5 	vcmpe.f32	s13, s11
 80124e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ec:	ddaa      	ble.n	8012444 <clip_3d_target+0xbc>
        target->x = a / b * (envelope->max.y - position->y) + position->x;
 80124ee:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80124f2:	ed90 5a01 	vldr	s10, [r0, #4]
 80124f6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80124fa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80124fe:	edd0 5a00 	vldr	s11, [r0]
 8012502:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012506:	edc1 6a00 	vstr	s13, [r1]
        target->z = c / b * (envelope->max.y - position->y) + position->z;
 801250a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801250e:	edd2 5a04 	vldr	s11, [r2, #16]
 8012512:	ed90 5a01 	vldr	s10, [r0, #4]
 8012516:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801251a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801251e:	edd0 5a02 	vldr	s11, [r0, #8]
 8012522:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012526:	edc1 6a02 	vstr	s13, [r1, #8]
        target->y = envelope->max.y;
 801252a:	6913      	ldr	r3, [r2, #16]
 801252c:	604b      	str	r3, [r1, #4]
 801252e:	e789      	b.n	8012444 <clip_3d_target+0xbc>
    } else if(target->z > envelope->max.z) {
 8012530:	edd2 6a05 	vldr	s13, [r2, #20]
 8012534:	eef4 5ae6 	vcmpe.f32	s11, s13
 8012538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801253c:	dd1f      	ble.n	801257e <clip_3d_target+0x1f6>
        target->x = a / c * (envelope->max.z - position->z) + position->x;
 801253e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8012542:	ed90 6a02 	vldr	s12, [r0, #8]
 8012546:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801254a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801254e:	ed90 6a00 	vldr	s12, [r0]
 8012552:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012556:	edc1 6a00 	vstr	s13, [r1]
        target->y = b / c * (envelope->max.z - position->z) + position->y;
 801255a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801255e:	edd2 7a05 	vldr	s15, [r2, #20]
 8012562:	ed90 7a02 	vldr	s14, [r0, #8]
 8012566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801256a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801256e:	ed90 7a01 	vldr	s14, [r0, #4]
 8012572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012576:	edc1 7a01 	vstr	s15, [r1, #4]
        target->z = envelope->max.z;
 801257a:	6953      	ldr	r3, [r2, #20]
 801257c:	608b      	str	r3, [r1, #8]
    }
}
 801257e:	4770      	bx	lr

08012580 <apply_jog_limits>:

// Limits jog commands to be within machine limits, homed axes only.
static void apply_jog_limits (float *target, float *position)
{
    if(sys.homed.mask == 0)
 8012580:	4b35      	ldr	r3, [pc, #212]	@ (8012658 <apply_jog_limits+0xd8>)
 8012582:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8012586:	2b00      	cmp	r3, #0
 8012588:	d064      	beq.n	8012654 <apply_jog_limits+0xd4>
{
 801258a:	b510      	push	{r4, lr}
 801258c:	4604      	mov	r4, r0
 801258e:	4608      	mov	r0, r1
        return;

    uint_fast8_t idx;

    if((sys.homed.mask & 0b111) == 0b111) {
 8012590:	f003 0307 	and.w	r3, r3, #7
 8012594:	2b07      	cmp	r3, #7
 8012596:	d001      	beq.n	801259c <apply_jog_limits+0x1c>

        uint_fast8_t n_axes = 0;

        idx = Z_AXIS + 1;
 8012598:	2303      	movs	r3, #3
 801259a:	e025      	b.n	80125e8 <apply_jog_limits+0x68>
        uint_fast8_t n_axes = 0;
 801259c:	2200      	movs	r2, #0
        idx = Z_AXIS + 1;
 801259e:	2303      	movs	r3, #3
 80125a0:	e002      	b.n	80125a8 <apply_jog_limits+0x28>
        do {
            idx--;
            if(fabs(target[idx] - position[idx]) > 0.001f)
                n_axes++;
        } while(idx && n_axes < 2);
 80125a2:	b1bb      	cbz	r3, 80125d4 <apply_jog_limits+0x54>
 80125a4:	2a01      	cmp	r2, #1
 80125a6:	d815      	bhi.n	80125d4 <apply_jog_limits+0x54>
            idx--;
 80125a8:	3b01      	subs	r3, #1
            if(fabs(target[idx] - position[idx]) > 0.001f)
 80125aa:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80125ae:	edd1 7a00 	vldr	s15, [r1]
 80125b2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80125b6:	ed91 7a00 	vldr	s14, [r1]
 80125ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125be:	eef0 7ae7 	vabs.f32	s15, s15
 80125c2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801265c <apply_jog_limits+0xdc>
 80125c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80125ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ce:	dde8      	ble.n	80125a2 <apply_jog_limits+0x22>
                n_axes++;
 80125d0:	3201      	adds	r2, #1
 80125d2:	e7e6      	b.n	80125a2 <apply_jog_limits+0x22>

        if(n_axes > 1)
 80125d4:	2a01      	cmp	r2, #1
 80125d6:	d9df      	bls.n	8012598 <apply_jog_limits+0x18>
            clip_3d_target((coord_data_t *)position, (coord_data_t *)target, &sys.work_envelope);
 80125d8:	4a21      	ldr	r2, [pc, #132]	@ (8012660 <apply_jog_limits+0xe0>)
 80125da:	4621      	mov	r1, r4
 80125dc:	f7ff fed4 	bl	8012388 <clip_3d_target>
 80125e0:	e7da      	b.n	8012598 <apply_jog_limits+0x18>

    idx = N_AXIS;
    do {
        idx--;
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 80125e2:	edc0 7a00 	vstr	s15, [r0]
    } while(idx);
 80125e6:	b3a3      	cbz	r3, 8012652 <apply_jog_limits+0xd2>
        idx--;
 80125e8:	3b01      	subs	r3, #1
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
 80125ea:	4a1b      	ldr	r2, [pc, #108]	@ (8012658 <apply_jog_limits+0xd8>)
 80125ec:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80125f0:	40da      	lsrs	r2, r3
 80125f2:	f012 0f01 	tst.w	r2, #1
 80125f6:	d0f6      	beq.n	80125e6 <apply_jog_limits+0x66>
 80125f8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80125fc:	4a19      	ldr	r2, [pc, #100]	@ (8012664 <apply_jog_limits+0xe4>)
 80125fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012602:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8012606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801260e:	d5ea      	bpl.n	80125e6 <apply_jog_limits+0x66>
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 8012610:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8012614:	ed90 7a00 	vldr	s14, [r0]
 8012618:	f103 011a 	add.w	r1, r3, #26
 801261c:	4a0e      	ldr	r2, [pc, #56]	@ (8012658 <apply_jog_limits+0xd8>)
 801261e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012622:	edd2 7a02 	vldr	s15, [r2, #8]
 8012626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801262e:	d501      	bpl.n	8012634 <apply_jog_limits+0xb4>
 8012630:	eef0 7a47 	vmov.f32	s15, s14
 8012634:	f103 0118 	add.w	r1, r3, #24
 8012638:	4a07      	ldr	r2, [pc, #28]	@ (8012658 <apply_jog_limits+0xd8>)
 801263a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801263e:	ed92 7a01 	vldr	s14, [r2, #4]
 8012642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801264a:	d4ca      	bmi.n	80125e2 <apply_jog_limits+0x62>
 801264c:	eef0 7a47 	vmov.f32	s15, s14
 8012650:	e7c7      	b.n	80125e2 <apply_jog_limits+0x62>
}
 8012652:	bd10      	pop	{r4, pc}
 8012654:	4770      	bx	lr
 8012656:	bf00      	nop
 8012658:	200014a0 	.word	0x200014a0
 801265c:	3a83126f 	.word	0x3a83126f
 8012660:	20001504 	.word	0x20001504
 8012664:	20001bd8 	.word	0x20001bd8

08012668 <limits_pull_off>:
{
 8012668:	b570      	push	{r4, r5, r6, lr}
 801266a:	ed2d 8b02 	vpush	{d8}
 801266e:	b08e      	sub	sp, #56	@ 0x38
 8012670:	4606      	mov	r6, r0
 8012672:	eeb0 8a40 	vmov.f32	s16, s0
    coord_data_t target = {0};
 8012676:	2400      	movs	r4, #0
 8012678:	940a      	str	r4, [sp, #40]	@ 0x28
 801267a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801267c:	940c      	str	r4, [sp, #48]	@ 0x30
    plan_data_init(&plan_data);
 801267e:	4668      	mov	r0, sp
 8012680:	f004 f8ae 	bl	80167e0 <plan_data_init>
    plan_data.condition.system_motion = On;
 8012684:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012688:	f043 0302 	orr.w	r3, r3, #2
 801268c:	f88d 3014 	strb.w	r3, [sp, #20]
    plan_data.condition.no_feed_override = On;
 8012690:	b2db      	uxtb	r3, r3
 8012692:	f043 0310 	orr.w	r3, r3, #16
 8012696:	f88d 3014 	strb.w	r3, [sp, #20]
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 801269a:	9407      	str	r4, [sp, #28]
    system_convert_array_steps_to_mpos(target.values, sys.position);
 801269c:	494a      	ldr	r1, [pc, #296]	@ (80127c8 <limits_pull_off+0x160>)
 801269e:	a80a      	add	r0, sp, #40	@ 0x28
 80126a0:	f00e ffec 	bl	802167c <system_convert_array_steps_to_mpos>
    uint_fast8_t n_axis = 0, idx = N_AXIS;
 80126a4:	2303      	movs	r3, #3
 80126a6:	e009      	b.n	80126bc <limits_pull_off+0x54>
                target.values[idx] -= distance;
 80126a8:	aa0e      	add	r2, sp, #56	@ 0x38
 80126aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80126ae:	ed52 7a04 	vldr	s15, [r2, #-16]
 80126b2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80126b6:	ed42 7a04 	vstr	s15, [r2, #-16]
    } while(idx);
 80126ba:	b1c3      	cbz	r3, 80126ee <limits_pull_off+0x86>
        idx--;
 80126bc:	3b01      	subs	r3, #1
        if(bit_istrue(axis.mask, bit(idx))) {
 80126be:	b2f5      	uxtb	r5, r6
 80126c0:	fa25 f203 	lsr.w	r2, r5, r3
 80126c4:	f012 0f01 	tst.w	r2, #1
 80126c8:	d0f7      	beq.n	80126ba <limits_pull_off+0x52>
            n_axis++;
 80126ca:	3401      	adds	r4, #1
            if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 80126cc:	4a3f      	ldr	r2, [pc, #252]	@ (80127cc <limits_pull_off+0x164>)
 80126ce:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 80126d2:	40da      	lsrs	r2, r3
 80126d4:	f012 0f01 	tst.w	r2, #1
 80126d8:	d0e6      	beq.n	80126a8 <limits_pull_off+0x40>
                target.values[idx] += distance;
 80126da:	aa0e      	add	r2, sp, #56	@ 0x38
 80126dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80126e0:	ed52 7a04 	vldr	s15, [r2, #-16]
 80126e4:	ee77 7a88 	vadd.f32	s15, s15, s16
 80126e8:	ed42 7a04 	vstr	s15, [r2, #-16]
 80126ec:	e7e5      	b.n	80126ba <limits_pull_off+0x52>
    plan_data.feed_rate = settings.homing.seek_rate * sqrtf(n_axis); // Adjust so individual axes all move at pull-off rate.
 80126ee:	4b37      	ldr	r3, [pc, #220]	@ (80127cc <limits_pull_off+0x164>)
 80126f0:	ed93 8a42 	vldr	s16, [r3, #264]	@ 0x108
 80126f4:	ee07 4a90 	vmov	s15, r4
 80126f8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80126fc:	f014 fcf8 	bl	80270f0 <sqrtf>
 8012700:	ee28 8a00 	vmul.f32	s16, s16, s0
 8012704:	ed8d 8a00 	vstr	s16, [sp]
    plan_data.condition.coolant = gc_state.modal.coolant;
 8012708:	4b31      	ldr	r3, [pc, #196]	@ (80127d0 <limits_pull_off+0x168>)
 801270a:	7e5a      	ldrb	r2, [r3, #25]
 801270c:	f88d 2016 	strb.w	r2, [sp, #22]
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 8012710:	ac01      	add	r4, sp, #4
 8012712:	3350      	adds	r3, #80	@ 0x50
 8012714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 801271a:	4669      	mov	r1, sp
 801271c:	a80a      	add	r0, sp, #40	@ 0x28
 801271e:	f003 fe23 	bl	8016368 <plan_buffer_line>
    sys.step_control.flags = 0;                 // Clear existing flags and
 8012722:	4b2c      	ldr	r3, [pc, #176]	@ (80127d4 <limits_pull_off+0x16c>)
 8012724:	2200      	movs	r2, #0
 8012726:	761a      	strb	r2, [r3, #24]
    sys.step_control.execute_sys_motion = On;   // set to execute homing motion.
 8012728:	2204      	movs	r2, #4
 801272a:	761a      	strb	r2, [r3, #24]
    sys.homing_axis_lock.mask = axis.mask;
 801272c:	765e      	strb	r6, [r3, #25]
    st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 801272e:	f00d f899 	bl	801f864 <st_prep_buffer>
    st_wake_up();       // Initiate motion.
 8012732:	f00c fda5 	bl	801f280 <st_wake_up>
 8012736:	e009      	b.n	801274c <limits_pull_off+0xe4>
                mc_reset(); // Stop motors, if they are running.
 8012738:	f001 ff52 	bl	80145e0 <mc_reset>
                protocol_execute_realtime();
 801273c:	f004 fd1c 	bl	8017178 <protocol_execute_realtime>
                return false;
 8012740:	2000      	movs	r0, #0
 8012742:	e03d      	b.n	80127c0 <limits_pull_off+0x158>
        grbl.on_execute_realtime(STATE_HOMING);
 8012744:	4b24      	ldr	r3, [pc, #144]	@ (80127d8 <limits_pull_off+0x170>)
 8012746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012748:	2004      	movs	r0, #4
 801274a:	4798      	blx	r3
        st_prep_buffer(); // Check and prep segment buffer.
 801274c:	f00d f88a 	bl	801f864 <st_prep_buffer>
        if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 8012750:	4b20      	ldr	r3, [pc, #128]	@ (80127d4 <limits_pull_off+0x16c>)
 8012752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012754:	f013 0f64 	tst.w	r3, #100	@ 0x64
 8012758:	d0f4      	beq.n	8012744 <limits_pull_off+0xdc>
            uint_fast16_t rt_exec = sys.rt_exec_state;
 801275a:	4b1e      	ldr	r3, [pc, #120]	@ (80127d4 <limits_pull_off+0x16c>)
 801275c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
            if (rt_exec & EXEC_RESET)
 801275e:	f014 0f20 	tst.w	r4, #32
 8012762:	d004      	beq.n	801276e <limits_pull_off+0x106>
                system_set_exec_alarm(Alarm_HomingFailReset);
 8012764:	4b1d      	ldr	r3, [pc, #116]	@ (80127dc <limits_pull_off+0x174>)
 8012766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012768:	2106      	movs	r1, #6
 801276a:	481d      	ldr	r0, [pc, #116]	@ (80127e0 <limits_pull_off+0x178>)
 801276c:	4798      	blx	r3
            if (rt_exec & EXEC_SAFETY_DOOR)
 801276e:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8012772:	d004      	beq.n	801277e <limits_pull_off+0x116>
                system_set_exec_alarm(Alarm_HomingFailDoor);
 8012774:	4b19      	ldr	r3, [pc, #100]	@ (80127dc <limits_pull_off+0x174>)
 8012776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012778:	2107      	movs	r1, #7
 801277a:	4819      	ldr	r0, [pc, #100]	@ (80127e0 <limits_pull_off+0x178>)
 801277c:	4798      	blx	r3
            if (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & axis.mask)
 801277e:	4b17      	ldr	r3, [pc, #92]	@ (80127dc <limits_pull_off+0x174>)
 8012780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012782:	4798      	blx	r3
 8012784:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8012788:	2200      	movs	r2, #0
 801278a:	4611      	mov	r1, r2
 801278c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801278e:	f7ff fd8f 	bl	80122b0 <homing_signals_select>
 8012792:	4205      	tst	r5, r0
 8012794:	d004      	beq.n	80127a0 <limits_pull_off+0x138>
                system_set_exec_alarm(Alarm_FailPulloff);
 8012796:	4b11      	ldr	r3, [pc, #68]	@ (80127dc <limits_pull_off+0x174>)
 8012798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801279a:	2108      	movs	r1, #8
 801279c:	4810      	ldr	r0, [pc, #64]	@ (80127e0 <limits_pull_off+0x178>)
 801279e:	4798      	blx	r3
            if (sys.rt_exec_alarm) {
 80127a0:	4b0c      	ldr	r3, [pc, #48]	@ (80127d4 <limits_pull_off+0x16c>)
 80127a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d1c7      	bne.n	8012738 <limits_pull_off+0xd0>
                system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 80127a8:	4b0c      	ldr	r3, [pc, #48]	@ (80127dc <limits_pull_off+0x174>)
 80127aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127ac:	4c0d      	ldr	r4, [pc, #52]	@ (80127e4 <limits_pull_off+0x17c>)
 80127ae:	2104      	movs	r1, #4
 80127b0:	4620      	mov	r0, r4
 80127b2:	4798      	blx	r3
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 80127b4:	f00c ff2c 	bl	801f610 <st_reset>
    sys.step_control.flags = 0; // Return step control to normal operation.
 80127b8:	2300      	movs	r3, #0
 80127ba:	f804 3c30 	strb.w	r3, [r4, #-48]
    return true; // Note: failure is returned above if move fails.
 80127be:	2001      	movs	r0, #1
}
 80127c0:	b00e      	add	sp, #56	@ 0x38
 80127c2:	ecbd 8b02 	vpop	{d8}
 80127c6:	bd70      	pop	{r4, r5, r6, pc}
 80127c8:	20001528 	.word	0x20001528
 80127cc:	20001bd8 	.word	0x20001bd8
 80127d0:	20000ef8 	.word	0x20000ef8
 80127d4:	200014a0 	.word	0x200014a0
 80127d8:	200013a8 	.word	0x200013a8
 80127dc:	200011c0 	.word	0x200011c0
 80127e0:	200014ec 	.word	0x200014ec
 80127e4:	200014e8 	.word	0x200014e8

080127e8 <check_arc_travel_limits>:
{
 80127e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127ec:	ed2d 8b02 	vpush	{d8}
 80127f0:	b08f      	sub	sp, #60	@ 0x3c
 80127f2:	4604      	mov	r4, r0
 80127f4:	9201      	str	r2, [sp, #4]
 80127f6:	461e      	mov	r6, r3
 80127f8:	ed8d 0a02 	vstr	s0, [sp, #8]
 80127fc:	edcd 0a03 	vstr	s1, [sp, #12]
    if((sys.soft_limits.mask & xyz.mask) == 0)
 8012800:	4bcd      	ldr	r3, [pc, #820]	@ (8012b38 <check_arc_travel_limits+0x350>)
 8012802:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8012806:	f013 0f07 	tst.w	r3, #7
 801280a:	f000 8097 	beq.w	801293c <check_arc_travel_limits+0x154>
 801280e:	460d      	mov	r5, r1
 8012810:	eeb0 8a41 	vmov.f32	s16, s2
    arc_x_t x = {0};
 8012814:	2700      	movs	r7, #0
    if(turns > 0) { // CCW
 8012816:	42be      	cmp	r6, r7
 8012818:	f340 8099 	ble.w	801294e <check_arc_travel_limits+0x166>
        start.x = position->values[plane.axis_0] - center.x;
 801281c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012820:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8012824:	edd3 7a00 	vldr	s15, [r3]
 8012828:	eddd 6a02 	vldr	s13, [sp, #8]
 801282c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012830:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
        start.y = position->values[plane.axis_1] - center.y;
 8012834:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012838:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801283c:	edd1 7a00 	vldr	s15, [r1]
 8012840:	ed9d 7a03 	vldr	s14, [sp, #12]
 8012844:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012848:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
        end.x = target->values[plane.axis_0] - center.x;
 801284c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012850:	edd2 7a00 	vldr	s15, [r2]
 8012854:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012858:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
        end.y = target->values[plane.axis_1] - center.y;
 801285c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012860:	edd3 7a00 	vldr	s15, [r3]
 8012864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012868:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
    if(labs(turns > 1))
 801286c:	2e01      	cmp	r6, #1
 801286e:	f340 8097 	ble.w	80129a0 <check_arc_travel_limits+0x1b8>
        x.value = 0b1111;                   // Crosses all
 8012872:	270f      	movs	r7, #15
    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 8012874:	2e00      	cmp	r6, #0
 8012876:	f340 8134 	ble.w	8012ae2 <check_arc_travel_limits+0x2fa>
 801287a:	462a      	mov	r2, r5
 801287c:	ab07      	add	r3, sp, #28
 801287e:	6810      	ldr	r0, [r2, #0]
 8012880:	6851      	ldr	r1, [r2, #4]
 8012882:	6892      	ldr	r2, [r2, #8]
 8012884:	c307      	stmia	r3!, {r0, r1, r2}
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 8012886:	fa5f f887 	uxtb.w	r8, r7
 801288a:	f017 0f02 	tst.w	r7, #2
 801288e:	f000 812a 	beq.w	8012ae6 <check_arc_travel_limits+0x2fe>
 8012892:	eddd 7a02 	vldr	s15, [sp, #8]
 8012896:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801289a:	f89d 9004 	ldrb.w	r9, [sp, #4]
 801289e:	ab0e      	add	r3, sp, #56	@ 0x38
 80128a0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80128a4:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 80128a8:	f018 0f04 	tst.w	r8, #4
 80128ac:	f000 812e 	beq.w	8012b0c <check_arc_travel_limits+0x324>
 80128b0:	eddd 7a03 	vldr	s15, [sp, #12]
 80128b4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80128b8:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80128bc:	ab0e      	add	r3, sp, #56	@ 0x38
 80128be:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80128c2:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
    if(!grbl.check_travel_limits(corner1.values, sys.soft_limits, true))
 80128c6:	4b9d      	ldr	r3, [pc, #628]	@ (8012b3c <check_arc_travel_limits+0x354>)
 80128c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80128cc:	2201      	movs	r2, #1
 80128ce:	499a      	ldr	r1, [pc, #616]	@ (8012b38 <check_arc_travel_limits+0x350>)
 80128d0:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 80128d4:	a807      	add	r0, sp, #28
 80128d6:	4798      	blx	r3
 80128d8:	b358      	cbz	r0, 8012932 <check_arc_travel_limits+0x14a>
    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 80128da:	2e00      	cmp	r6, #0
 80128dc:	f340 8129 	ble.w	8012b32 <check_arc_travel_limits+0x34a>
 80128e0:	4622      	mov	r2, r4
 80128e2:	ab04      	add	r3, sp, #16
 80128e4:	6810      	ldr	r0, [r2, #0]
 80128e6:	6851      	ldr	r1, [r2, #4]
 80128e8:	6892      	ldr	r2, [r2, #8]
 80128ea:	c307      	stmia	r3!, {r0, r1, r2}
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 80128ec:	f018 0f08 	tst.w	r8, #8
 80128f0:	f000 8126 	beq.w	8012b40 <check_arc_travel_limits+0x358>
 80128f4:	eddd 7a02 	vldr	s15, [sp, #8]
 80128f8:	ee77 7a88 	vadd.f32	s15, s15, s16
 80128fc:	ab0e      	add	r3, sp, #56	@ 0x38
 80128fe:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012902:	ed43 7a0a 	vstr	s15, [r3, #-40]	@ 0xffffffd8
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 8012906:	f018 0f01 	tst.w	r8, #1
 801290a:	f000 812a 	beq.w	8012b62 <check_arc_travel_limits+0x37a>
 801290e:	eddd 7a03 	vldr	s15, [sp, #12]
 8012912:	ee77 7a88 	vadd.f32	s15, s15, s16
 8012916:	ab0e      	add	r3, sp, #56	@ 0x38
 8012918:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801291c:	ed47 7a0a 	vstr	s15, [r7, #-40]	@ 0xffffffd8
   return grbl.check_travel_limits(corner2.values, sys.soft_limits, true);
 8012920:	4b86      	ldr	r3, [pc, #536]	@ (8012b3c <check_arc_travel_limits+0x354>)
 8012922:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012926:	2201      	movs	r2, #1
 8012928:	4983      	ldr	r1, [pc, #524]	@ (8012b38 <check_arc_travel_limits+0x350>)
 801292a:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 801292e:	a804      	add	r0, sp, #16
 8012930:	4798      	blx	r3
}
 8012932:	b00f      	add	sp, #60	@ 0x3c
 8012934:	ecbd 8b02 	vpop	{d8}
 8012938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return grbl.check_travel_limits(target->values, sys.soft_limits, true);
 801293c:	4b7f      	ldr	r3, [pc, #508]	@ (8012b3c <check_arc_travel_limits+0x354>)
 801293e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012942:	2201      	movs	r2, #1
 8012944:	497c      	ldr	r1, [pc, #496]	@ (8012b38 <check_arc_travel_limits+0x350>)
 8012946:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 801294a:	4798      	blx	r3
 801294c:	e7f1      	b.n	8012932 <check_arc_travel_limits+0x14a>
        start.x = target->values[plane.axis_0] - center.x;
 801294e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012952:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8012956:	edd3 7a00 	vldr	s15, [r3]
 801295a:	eddd 6a02 	vldr	s13, [sp, #8]
 801295e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012962:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
        start.y = target->values[plane.axis_1] - center.y;
 8012966:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801296a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801296e:	edd1 7a00 	vldr	s15, [r1]
 8012972:	ed9d 7a03 	vldr	s14, [sp, #12]
 8012976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801297a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
        end.x = position->values[plane.axis_0] - center.x;
 801297e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8012982:	edd2 7a00 	vldr	s15, [r2]
 8012986:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801298a:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
        end.y = position->values[plane.axis_1] - center.y;
 801298e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012992:	edd3 7a00 	vldr	s15, [r3]
 8012996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801299a:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 801299e:	e765      	b.n	801286c <check_arc_travel_limits+0x84>
    else if(start.y >= 0.0f) {
 80129a0:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 80129a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80129a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ac:	db4c      	blt.n	8012a48 <check_arc_travel_limits+0x260>
        if(start.x > 0.0f) {                // Starts in Q1
 80129ae:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 80129b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80129b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ba:	dd22      	ble.n	8012a02 <check_arc_travel_limits+0x21a>
            if(end.y >= 0.0f) {
 80129bc:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 80129c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80129c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c8:	db10      	blt.n	80129ec <check_arc_travel_limits+0x204>
                if(end.x <= 0.0f)
 80129ca:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 80129ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80129d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d6:	d907      	bls.n	80129e8 <check_arc_travel_limits+0x200>
                else if(end.x >= start.x)
 80129d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e0:	f63f af48 	bhi.w	8012874 <check_arc_travel_limits+0x8c>
                    x.value = 0b1111;       // Ends in Q1, crosses all
 80129e4:	270f      	movs	r7, #15
 80129e6:	e745      	b.n	8012874 <check_arc_travel_limits+0x8c>
                    x.value = 0b0001;       // Ends in Q2
 80129e8:	2701      	movs	r7, #1
 80129ea:	e743      	b.n	8012874 <check_arc_travel_limits+0x8c>
            } else if(end.x <= 0.0f)
 80129ec:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80129f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80129f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f8:	d901      	bls.n	80129fe <check_arc_travel_limits+0x216>
                x.value = 0b0111;           // Ends in Q4
 80129fa:	2707      	movs	r7, #7
 80129fc:	e73a      	b.n	8012874 <check_arc_travel_limits+0x8c>
                x.value = 0b0011;           // Ends in Q3
 80129fe:	2703      	movs	r7, #3
 8012a00:	e738      	b.n	8012874 <check_arc_travel_limits+0x8c>
            if(end.y >= 0.0f) {
 8012a02:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8012a06:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a0e:	db10      	blt.n	8012a32 <check_arc_travel_limits+0x24a>
                if(end.x > 0.0f)
 8012a10:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8012a14:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1c:	dd01      	ble.n	8012a22 <check_arc_travel_limits+0x23a>
                    x.value = 0b1110;       // Ends in Q1
 8012a1e:	270e      	movs	r7, #14
 8012a20:	e728      	b.n	8012874 <check_arc_travel_limits+0x8c>
                else if(end.x >= start.x)
 8012a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2a:	f63f af23 	bhi.w	8012874 <check_arc_travel_limits+0x8c>
                    x.value = 0b1111;       // Ends in Q2, crosses all
 8012a2e:	270f      	movs	r7, #15
 8012a30:	e720      	b.n	8012874 <check_arc_travel_limits+0x8c>
            } else if(end.x <= 0.0f)
 8012a32:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8012a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3e:	d901      	bls.n	8012a44 <check_arc_travel_limits+0x25c>
                x.value = 0b0110;           // Ends in Q4
 8012a40:	2706      	movs	r7, #6
 8012a42:	e717      	b.n	8012874 <check_arc_travel_limits+0x8c>
                x.value = 0b0010;           // Ends in Q3
 8012a44:	2702      	movs	r7, #2
 8012a46:	e715      	b.n	8012874 <check_arc_travel_limits+0x8c>
    } else if(start.x < 0.0f) {             // Starts in Q3
 8012a48:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8012a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a54:	d40f      	bmi.n	8012a76 <check_arc_travel_limits+0x28e>
        if(end.y < 0.0f) {
 8012a56:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8012a5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a62:	d42b      	bmi.n	8012abc <check_arc_travel_limits+0x2d4>
        } else if(end.x > 0.0f)
 8012a64:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8012a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a70:	dd35      	ble.n	8012ade <check_arc_travel_limits+0x2f6>
            x.value = 0b1000;               // Ends in Q1
 8012a72:	2708      	movs	r7, #8
 8012a74:	e6fe      	b.n	8012874 <check_arc_travel_limits+0x8c>
        if(end.y < 0.0f) {
 8012a76:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8012a7a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a82:	d408      	bmi.n	8012a96 <check_arc_travel_limits+0x2ae>
        } else if(end.x > 0.0f)
 8012a84:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8012a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a90:	dd12      	ble.n	8012ab8 <check_arc_travel_limits+0x2d0>
            x.value = 0b1100;               // Ends in Q1
 8012a92:	270c      	movs	r7, #12
 8012a94:	e6ee      	b.n	8012874 <check_arc_travel_limits+0x8c>
            if(end.x > 0.0f)
 8012a96:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8012a9a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa2:	dd01      	ble.n	8012aa8 <check_arc_travel_limits+0x2c0>
                x.value = 0b0100;           // Ends in Q4
 8012aa4:	2704      	movs	r7, #4
 8012aa6:	e6e5      	b.n	8012874 <check_arc_travel_limits+0x8c>
            else if(end.x <= start.x)
 8012aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab0:	f6ff aee0 	blt.w	8012874 <check_arc_travel_limits+0x8c>
                x.value = 0b1111;           // Ends in Q3, crosses all
 8012ab4:	270f      	movs	r7, #15
 8012ab6:	e6dd      	b.n	8012874 <check_arc_travel_limits+0x8c>
            x.value = 0b1101;               // Ends in Q2
 8012ab8:	270d      	movs	r7, #13
 8012aba:	e6db      	b.n	8012874 <check_arc_travel_limits+0x8c>
            if(end.x < 0.0f)
 8012abc:	ed9d 7a0a 	vldr	s14, [sp, #40]	@ 0x28
 8012ac0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac8:	d407      	bmi.n	8012ada <check_arc_travel_limits+0x2f2>
            else if(end.x <= start.x)
 8012aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad2:	f6ff aecf 	blt.w	8012874 <check_arc_travel_limits+0x8c>
                x.value = 0b1111;           // Ends in Q4, crosses all
 8012ad6:	270f      	movs	r7, #15
 8012ad8:	e6cc      	b.n	8012874 <check_arc_travel_limits+0x8c>
                x.value = 0b1011;           // Ends in Q3
 8012ada:	270b      	movs	r7, #11
 8012adc:	e6ca      	b.n	8012874 <check_arc_travel_limits+0x8c>
            x.value = 0b1001;               // Ends in Q2
 8012ade:	2709      	movs	r7, #9
 8012ae0:	e6c8      	b.n	8012874 <check_arc_travel_limits+0x8c>
    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 8012ae2:	4622      	mov	r2, r4
 8012ae4:	e6ca      	b.n	801287c <check_arc_travel_limits+0x94>
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 8012ae6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012aea:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8012aee:	ed92 7a00 	vldr	s14, [r2]
 8012af2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012af6:	edd3 7a00 	vldr	s15, [r3]
 8012afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b02:	f57f aeca 	bpl.w	801289a <check_arc_travel_limits+0xb2>
 8012b06:	eef0 7a47 	vmov.f32	s15, s14
 8012b0a:	e6c6      	b.n	801289a <check_arc_travel_limits+0xb2>
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 8012b0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012b10:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8012b14:	ed92 7a00 	vldr	s14, [r2]
 8012b18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b1c:	edd3 7a00 	vldr	s15, [r3]
 8012b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b28:	f77f aec6 	ble.w	80128b8 <check_arc_travel_limits+0xd0>
 8012b2c:	eef0 7a47 	vmov.f32	s15, s14
 8012b30:	e6c2      	b.n	80128b8 <check_arc_travel_limits+0xd0>
    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 8012b32:	462a      	mov	r2, r5
 8012b34:	e6d5      	b.n	80128e2 <check_arc_travel_limits+0xfa>
 8012b36:	bf00      	nop
 8012b38:	200014a0 	.word	0x200014a0
 8012b3c:	200013a8 	.word	0x200013a8
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 8012b40:	eb05 0389 	add.w	r3, r5, r9, lsl #2
 8012b44:	ed93 7a00 	vldr	s14, [r3]
 8012b48:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 8012b4c:	edd3 7a00 	vldr	s15, [r3]
 8012b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b58:	f77f aed0 	ble.w	80128fc <check_arc_travel_limits+0x114>
 8012b5c:	eef0 7a47 	vmov.f32	s15, s14
 8012b60:	e6cc      	b.n	80128fc <check_arc_travel_limits+0x114>
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 8012b62:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8012b66:	ed95 7a00 	vldr	s14, [r5]
 8012b6a:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8012b6e:	edd4 7a00 	vldr	s15, [r4]
 8012b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7a:	f57f aecc 	bpl.w	8012916 <check_arc_travel_limits+0x12e>
 8012b7e:	eef0 7a47 	vmov.f32	s15, s14
 8012b82:	e6c8      	b.n	8012916 <check_arc_travel_limits+0x12e>

08012b84 <limit_signals_merge>:
{
 8012b84:	b082      	sub	sp, #8
 8012b86:	9001      	str	r0, [sp, #4]
    state.mask = signals.min.mask | signals.min2.mask | signals.max.mask | signals.max2.mask;
 8012b88:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012b8c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8012b90:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012b94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012b98:	430a      	orrs	r2, r1
 8012b9a:	4313      	orrs	r3, r2
}
 8012b9c:	4318      	orrs	r0, r3
 8012b9e:	b002      	add	sp, #8
 8012ba0:	4770      	bx	lr
	...

08012ba4 <limit_interrupt_handler>:
{
 8012ba4:	b500      	push	{lr}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	9001      	str	r0, [sp, #4]
    memcpy(&sys.last_event.limits, &state, sizeof(limit_signals_t));
 8012baa:	4b0b      	ldr	r3, [pc, #44]	@ (8012bd8 <limit_interrupt_handler+0x34>)
 8012bac:	f8c3 0082 	str.w	r0, [r3, #130]	@ 0x82
    if (!(state_get() & (STATE_ALARM|STATE_ESTOP)) && !sys.rt_exec_alarm) {
 8012bb0:	f00b fe4a 	bl	801e848 <state_get>
 8012bb4:	f240 1301 	movw	r3, #257	@ 0x101
 8012bb8:	4218      	tst	r0, r3
 8012bba:	d102      	bne.n	8012bc2 <limit_interrupt_handler+0x1e>
 8012bbc:	4b06      	ldr	r3, [pc, #24]	@ (8012bd8 <limit_interrupt_handler+0x34>)
 8012bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012bc0:	b113      	cbz	r3, 8012bc8 <limit_interrupt_handler+0x24>
}
 8012bc2:	b003      	add	sp, #12
 8012bc4:	f85d fb04 	ldr.w	pc, [sp], #4
        mc_reset(); // Initiate system kill.
 8012bc8:	f001 fd0a 	bl	80145e0 <mc_reset>
        system_set_exec_alarm(Alarm_HardLimit); // Indicate hard limit critical event
 8012bcc:	4b03      	ldr	r3, [pc, #12]	@ (8012bdc <limit_interrupt_handler+0x38>)
 8012bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bd0:	2101      	movs	r1, #1
 8012bd2:	4803      	ldr	r0, [pc, #12]	@ (8012be0 <limit_interrupt_handler+0x3c>)
 8012bd4:	4798      	blx	r3
}
 8012bd6:	e7f4      	b.n	8012bc2 <limit_interrupt_handler+0x1e>
 8012bd8:	200014a0 	.word	0x200014a0
 8012bdc:	200011c0 	.word	0x200011c0
 8012be0:	200014ec 	.word	0x200014ec

08012be4 <limits_set_work_envelope>:
    uint_fast8_t idx = N_AXIS;
 8012be4:	2303      	movs	r3, #3
 8012be6:	e067      	b.n	8012cb8 <limits_set_work_envelope+0xd4>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 8012be8:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8012cec <limits_set_work_envelope+0x108>
            if(settings.homing.flags.force_set_origin) {
 8012bec:	4a40      	ldr	r2, [pc, #256]	@ (8012cf0 <limits_set_work_envelope+0x10c>)
 8012bee:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8012bf2:	f012 0f08 	tst.w	r2, #8
 8012bf6:	d039      	beq.n	8012c6c <limits_set_work_envelope+0x88>
                if(bit_isfalse(settings.homing.dir_mask.value, bit(idx))) {
 8012bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8012cf0 <limits_set_work_envelope+0x10c>)
 8012bfa:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 8012bfe:	40da      	lsrs	r2, r3
 8012c00:	f012 0f01 	tst.w	r2, #1
 8012c04:	d119      	bne.n	8012c3a <limits_set_work_envelope+0x56>
                    sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 8012c06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012c0a:	0091      	lsls	r1, r2, #2
 8012c0c:	4a38      	ldr	r2, [pc, #224]	@ (8012cf0 <limits_set_work_envelope+0x10c>)
 8012c0e:	440a      	add	r2, r1
 8012c10:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8012c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c18:	4a36      	ldr	r2, [pc, #216]	@ (8012cf4 <limits_set_work_envelope+0x110>)
 8012c1a:	f103 0118 	add.w	r1, r3, #24
 8012c1e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012c22:	edc1 7a01 	vstr	s15, [r1, #4]
                    sys.work_envelope.max.values[idx] = 0.0f;
 8012c26:	f103 011a 	add.w	r1, r3, #26
 8012c2a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012c2e:	2100      	movs	r1, #0
 8012c30:	6091      	str	r1, [r2, #8]
 8012c32:	e040      	b.n	8012cb6 <limits_set_work_envelope+0xd2>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 8012c34:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8012cec <limits_set_work_envelope+0x108>
 8012c38:	e7d8      	b.n	8012bec <limits_set_work_envelope+0x8>
                    sys.work_envelope.min.values[idx] = 0.0f;
 8012c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8012cf4 <limits_set_work_envelope+0x110>)
 8012c3c:	f103 0118 	add.w	r1, r3, #24
 8012c40:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012c44:	2000      	movs	r0, #0
 8012c46:	6048      	str	r0, [r1, #4]
                    sys.work_envelope.max.values[idx] = - (settings.axis[idx].max_travel + pulloff);
 8012c48:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8012c4c:	0088      	lsls	r0, r1, #2
 8012c4e:	4928      	ldr	r1, [pc, #160]	@ (8012cf0 <limits_set_work_envelope+0x10c>)
 8012c50:	4401      	add	r1, r0
 8012c52:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 8012c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c5a:	eef1 7a67 	vneg.f32	s15, s15
 8012c5e:	f103 011a 	add.w	r1, r3, #26
 8012c62:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012c66:	edc2 7a02 	vstr	s15, [r2, #8]
 8012c6a:	e024      	b.n	8012cb6 <limits_set_work_envelope+0xd2>
                sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 8012c6c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012c70:	0091      	lsls	r1, r2, #2
 8012c72:	4a1f      	ldr	r2, [pc, #124]	@ (8012cf0 <limits_set_work_envelope+0x10c>)
 8012c74:	440a      	add	r2, r1
 8012c76:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8012c7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8012cf4 <limits_set_work_envelope+0x110>)
 8012c80:	f103 0118 	add.w	r1, r3, #24
 8012c84:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012c88:	ed81 7a01 	vstr	s14, [r1, #4]
                sys.work_envelope.max.values[idx] = - pulloff;
 8012c8c:	eef1 7a67 	vneg.f32	s15, s15
 8012c90:	f103 011a 	add.w	r1, r3, #26
 8012c94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012c98:	edc2 7a02 	vstr	s15, [r2, #8]
 8012c9c:	e00b      	b.n	8012cb6 <limits_set_work_envelope+0xd2>
            sys.work_envelope.min.values[idx] = sys.work_envelope.max.values[idx] = 0.0f;
 8012c9e:	4a15      	ldr	r2, [pc, #84]	@ (8012cf4 <limits_set_work_envelope+0x110>)
 8012ca0:	f103 011a 	add.w	r1, r3, #26
 8012ca4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012ca8:	2000      	movs	r0, #0
 8012caa:	6088      	str	r0, [r1, #8]
 8012cac:	f103 0118 	add.w	r1, r3, #24
 8012cb0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012cb4:	6050      	str	r0, [r2, #4]
    } while(idx);
 8012cb6:	b1bb      	cbz	r3, 8012ce8 <limits_set_work_envelope+0x104>
        if(sys.homed.mask & bit(--idx)) {
 8012cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8012cf4 <limits_set_work_envelope+0x110>)
 8012cba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8012cbe:	3b01      	subs	r3, #1
 8012cc0:	40da      	lsrs	r2, r3
 8012cc2:	f012 0f01 	tst.w	r2, #1
 8012cc6:	d0ea      	beq.n	8012c9e <limits_set_work_envelope+0xba>
            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 8012cc8:	4a09      	ldr	r2, [pc, #36]	@ (8012cf0 <limits_set_work_envelope+0x10c>)
 8012cca:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 8012cce:	f012 0f01 	tst.w	r2, #1
 8012cd2:	d089      	beq.n	8012be8 <limits_set_work_envelope+0x4>
 8012cd4:	4a07      	ldr	r2, [pc, #28]	@ (8012cf4 <limits_set_work_envelope+0x110>)
 8012cd6:	7e92      	ldrb	r2, [r2, #26]
 8012cd8:	40da      	lsrs	r2, r3
 8012cda:	f012 0f01 	tst.w	r2, #1
 8012cde:	d0a9      	beq.n	8012c34 <limits_set_work_envelope+0x50>
 8012ce0:	4a03      	ldr	r2, [pc, #12]	@ (8012cf0 <limits_set_work_envelope+0x10c>)
 8012ce2:	edd2 7a43 	vldr	s15, [r2, #268]	@ 0x10c
 8012ce6:	e781      	b.n	8012bec <limits_set_work_envelope+0x8>
}
 8012ce8:	4770      	bx	lr
 8012cea:	bf00      	nop
 8012cec:	00000000 	.word	0x00000000
 8012cf0:	20001bd8 	.word	0x20001bd8
 8012cf4:	200014a0 	.word	0x200014a0

08012cf8 <limits_set_machine_positions>:
{
 8012cf8:	b570      	push	{r4, r5, r6, lr}
 8012cfa:	ed2d 8b02 	vpush	{d8}
 8012cfe:	4605      	mov	r5, r0
    float pulloff = add_pulloff ? settings.homing.pulloff : -0.0f;
 8012d00:	b119      	cbz	r1, 8012d0a <limits_set_machine_positions+0x12>
 8012d02:	4b2b      	ldr	r3, [pc, #172]	@ (8012db0 <limits_set_machine_positions+0xb8>)
 8012d04:	ed93 8a43 	vldr	s16, [r3, #268]	@ 0x10c
 8012d08:	e001      	b.n	8012d0e <limits_set_machine_positions+0x16>
 8012d0a:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 8012db4 <limits_set_machine_positions+0xbc>
    if(settings.homing.flags.force_set_origin) {
 8012d0e:	4b28      	ldr	r3, [pc, #160]	@ (8012db0 <limits_set_machine_positions+0xb8>)
 8012d10:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8012d14:	f013 0f08 	tst.w	r3, #8
 8012d18:	d015      	beq.n	8012d46 <limits_set_machine_positions+0x4e>
    uint_fast8_t idx = N_AXIS;
 8012d1a:	2203      	movs	r2, #3
 8012d1c:	e00c      	b.n	8012d38 <limits_set_machine_positions+0x40>
                sys.position[idx] = 0;
 8012d1e:	4b26      	ldr	r3, [pc, #152]	@ (8012db8 <limits_set_machine_positions+0xc0>)
 8012d20:	f102 0122 	add.w	r1, r2, #34	@ 0x22
 8012d24:	2000      	movs	r0, #0
 8012d26:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
                sys.home_position[idx] = 0.0f;
 8012d2a:	f102 0116 	add.w	r1, r2, #22
 8012d2e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012d32:	2100      	movs	r1, #0
 8012d34:	6019      	str	r1, [r3, #0]
        } while(idx);
 8012d36:	b3c2      	cbz	r2, 8012daa <limits_set_machine_positions+0xb2>
            if (cycle.mask & bit(--idx)) {
 8012d38:	b2eb      	uxtb	r3, r5
 8012d3a:	3a01      	subs	r2, #1
 8012d3c:	40d3      	lsrs	r3, r2
 8012d3e:	f013 0f01 	tst.w	r3, #1
 8012d42:	d0f8      	beq.n	8012d36 <limits_set_machine_positions+0x3e>
 8012d44:	e7eb      	b.n	8012d1e <limits_set_machine_positions+0x26>
    uint_fast8_t idx = N_AXIS;
 8012d46:	2403      	movs	r4, #3
 8012d48:	e018      	b.n	8012d7c <limits_set_machine_positions+0x84>
                                      : - pulloff;
 8012d4a:	eef1 7a48 	vneg.f32	s15, s16
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 8012d4e:	4e1a      	ldr	r6, [pc, #104]	@ (8012db8 <limits_set_machine_positions+0xc0>)
 8012d50:	f104 0316 	add.w	r3, r4, #22
 8012d54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012d58:	edc3 7a00 	vstr	s15, [r3]
            sys.position[idx] = lroundf(sys.home_position[idx] * settings.axis[idx].steps_per_mm);
 8012d5c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8012d60:	4b13      	ldr	r3, [pc, #76]	@ (8012db0 <limits_set_machine_positions+0xb8>)
 8012d62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012d66:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
 8012d6a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012d6e:	f014 fa9d 	bl	80272ac <lroundf>
 8012d72:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8012d76:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    } while(idx);
 8012d7a:	b1b4      	cbz	r4, 8012daa <limits_set_machine_positions+0xb2>
        if (cycle.mask & bit(--idx)) {
 8012d7c:	b2eb      	uxtb	r3, r5
 8012d7e:	3c01      	subs	r4, #1
 8012d80:	40e3      	lsrs	r3, r4
 8012d82:	f013 0f01 	tst.w	r3, #1
 8012d86:	d0f8      	beq.n	8012d7a <limits_set_machine_positions+0x82>
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 8012d88:	4b09      	ldr	r3, [pc, #36]	@ (8012db0 <limits_set_machine_positions+0xb8>)
 8012d8a:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8012d8e:	40e3      	lsrs	r3, r4
                                      : - pulloff;
 8012d90:	f013 0f01 	tst.w	r3, #1
 8012d94:	d0d9      	beq.n	8012d4a <limits_set_machine_positions+0x52>
                                      ? settings.axis[idx].max_travel + pulloff
 8012d96:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8012d9a:	4b05      	ldr	r3, [pc, #20]	@ (8012db0 <limits_set_machine_positions+0xb8>)
 8012d9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012da0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
                                      : - pulloff;
 8012da4:	ee77 7a88 	vadd.f32	s15, s15, s16
 8012da8:	e7d1      	b.n	8012d4e <limits_set_machine_positions+0x56>
}
 8012daa:	ecbd 8b02 	vpop	{d8}
 8012dae:	bd70      	pop	{r4, r5, r6, pc}
 8012db0:	20001bd8 	.word	0x20001bd8
 8012db4:	80000000 	.word	0x80000000
 8012db8:	200014a0 	.word	0x200014a0

08012dbc <homing_cycle>:
{
 8012dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc0:	ed2d 8b02 	vpush	{d8}
 8012dc4:	b099      	sub	sp, #100	@ 0x64
 8012dc6:	f88d 000e 	strb.w	r0, [sp, #14]
 8012dca:	f88d 100f 	strb.w	r1, [sp, #15]
    if (ABORTED) // Block if system reset has been issued.
 8012dce:	4b92      	ldr	r3, [pc, #584]	@ (8013018 <homing_cycle+0x25c>)
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	b12b      	cbz	r3, 8012de0 <homing_cycle+0x24>
        return false;
 8012dd4:	2000      	movs	r0, #0
}
 8012dd6:	b019      	add	sp, #100	@ 0x64
 8012dd8:	ecbd 8b02 	vpop	{d8}
 8012ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast8_t n_cycle = (2 * settings.homing.locate_cycles + 1);
 8012de0:	4b8e      	ldr	r3, [pc, #568]	@ (801301c <homing_cycle+0x260>)
 8012de2:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8012de6:	005b      	lsls	r3, r3, #1
 8012de8:	3301      	adds	r3, #1
 8012dea:	9302      	str	r3, [sp, #8]
    plan_data_init(&plan_data);
 8012dec:	a806      	add	r0, sp, #24
 8012dee:	f003 fcf7 	bl	80167e0 <plan_data_init>
    plan_data.condition.system_motion = On;
 8012df2:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8012df6:	f043 0302 	orr.w	r3, r3, #2
 8012dfa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    plan_data.condition.no_feed_override = On;
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	f043 0310 	orr.w	r3, r3, #16
 8012e04:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 8012e08:	2500      	movs	r5, #0
 8012e0a:	950d      	str	r5, [sp, #52]	@ 0x34
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 8012e0c:	4e84      	ldr	r6, [pc, #528]	@ (8013020 <homing_cycle+0x264>)
 8012e0e:	ac07      	add	r4, sp, #28
 8012e10:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8012e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_data.condition.coolant = gc_state.modal.coolant;
 8012e1a:	7e73      	ldrb	r3, [r6, #25]
 8012e1c:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    uint_fast8_t idx = N_AXIS;
 8012e20:	f04f 0a03 	mov.w	sl, #3
    float max_travel = 0.0f, homing_rate;
 8012e24:	eddf 8a7f 	vldr	s17, [pc, #508]	@ 8013024 <homing_cycle+0x268>
    uint_fast8_t step_pin[N_AXIS], n_active_axis, dual_motor_axis = 0;
 8012e28:	46a9      	mov	r9, r5
 8012e2a:	4653      	mov	r3, sl
 8012e2c:	e000      	b.n	8012e30 <homing_cycle+0x74>
    } while(idx);
 8012e2e:	b343      	cbz	r3, 8012e82 <homing_cycle+0xc6>
        idx--;
 8012e30:	3b01      	subs	r3, #1
        step_pin[idx] = bit(idx);
 8012e32:	2201      	movs	r2, #1
 8012e34:	409a      	lsls	r2, r3
 8012e36:	a918      	add	r1, sp, #96	@ 0x60
 8012e38:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012e3c:	f841 2c10 	str.w	r2, [r1, #-16]
        if(bit_istrue(cycle.mask, bit(idx))) {
 8012e40:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012e44:	fa22 f103 	lsr.w	r1, r2, r3
 8012e48:	f011 0f01 	tst.w	r1, #1
 8012e4c:	d0ef      	beq.n	8012e2e <homing_cycle+0x72>
            max_travel = max(max_travel, (-HOMING_AXIS_SEARCH_SCALAR) * settings.axis[idx].max_travel);
 8012e4e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8012e52:	4972      	ldr	r1, [pc, #456]	@ (801301c <homing_cycle+0x260>)
 8012e54:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8012e58:	edd1 7a0f 	vldr	s15, [r1, #60]	@ 0x3c
 8012e5c:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 8012e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e64:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e6c:	d401      	bmi.n	8012e72 <homing_cycle+0xb6>
 8012e6e:	eef0 8a67 	vmov.f32	s17, s15
            if(bit_istrue(auto_square.mask, bit(idx)))
 8012e72:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8012e76:	40d9      	lsrs	r1, r3
 8012e78:	f011 0f01 	tst.w	r1, #1
 8012e7c:	d0d7      	beq.n	8012e2e <homing_cycle+0x72>
                dual_motor_axis = idx;
 8012e7e:	4699      	mov	r9, r3
 8012e80:	e7d5      	b.n	8012e2e <homing_cycle+0x72>
    if(max_travel == 0.0f)
 8012e82:	9204      	str	r2, [sp, #16]
 8012e84:	469a      	mov	sl, r3
 8012e86:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8e:	f000 8200 	beq.w	8013292 <homing_cycle+0x4d6>
    if((homing_rate = hal.homing.get_feedrate(cycle, HomingMode_Seek)) == 0.0f)
 8012e92:	4b65      	ldr	r3, [pc, #404]	@ (8013028 <homing_cycle+0x26c>)
 8012e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012e96:	2100      	movs	r1, #0
 8012e98:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8012e9c:	4798      	blx	r3
 8012e9e:	eeb0 8a40 	vmov.f32	s16, s0
 8012ea2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eaa:	f000 81f4 	beq.w	8013296 <homing_cycle+0x4da>
    if(auto_square.mask) {
 8012eae:	f89d b00f 	ldrb.w	fp, [sp, #15]
 8012eb2:	f1bb 0f00 	cmp.w	fp, #0
 8012eb6:	d031      	beq.n	8012f1c <homing_cycle+0x160>
        float fail_distance = (-settings.homing.dual_axis.fail_length_percent / 100.0f) * settings.axis[dual_motor_axis].max_travel;
 8012eb8:	4b58      	ldr	r3, [pc, #352]	@ (801301c <homing_cycle+0x260>)
 8012eba:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
 8012ebe:	eeb1 7a47 	vneg.f32	s14, s14
 8012ec2:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801302c <homing_cycle+0x270>
 8012ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012eca:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 8012ece:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8012ed2:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 8012ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
        fail_distance = min(fail_distance, settings.homing.dual_axis.fail_distance_max);
 8012eda:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 8012ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee6:	dd01      	ble.n	8012eec <homing_cycle+0x130>
 8012ee8:	eeb0 7a67 	vmov.f32	s14, s15
        fail_distance = max(fail_distance, settings.homing.dual_axis.fail_distance_min);
 8012eec:	4b4b      	ldr	r3, [pc, #300]	@ (801301c <homing_cycle+0x260>)
 8012eee:	edd3 6a48 	vldr	s13, [r3, #288]	@ 0x120
 8012ef2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012efa:	d501      	bpl.n	8012f00 <homing_cycle+0x144>
 8012efc:	eef0 6a47 	vmov.f32	s13, s14
        autosquare_fail_distance = truncf(fail_distance * settings.axis[dual_motor_axis].steps_per_mm);
 8012f00:	eb09 0189 	add.w	r1, r9, r9, lsl #2
 8012f04:	4b45      	ldr	r3, [pc, #276]	@ (801301c <homing_cycle+0x260>)
 8012f06:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012f0a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012f0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f16:	edcd 7a01 	vstr	s15, [sp, #4]
 8012f1a:	e001      	b.n	8012f20 <homing_cycle+0x164>
    int32_t initial_trigger_position = 0, autosquare_fail_distance = 0;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	9301      	str	r3, [sp, #4]
 8012f20:	2700      	movs	r7, #0
 8012f22:	463e      	mov	r6, r7
 8012f24:	46b8      	mov	r8, r7
 8012f26:	9700      	str	r7, [sp, #0]
 8012f28:	f8cd a014 	str.w	sl, [sp, #20]
 8012f2c:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8012f30:	e137      	b.n	80131a2 <homing_cycle+0x3e6>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 8012f32:	eef0 7a68 	vmov.f32	s15, s17
 8012f36:	aa18      	add	r2, sp, #96	@ 0x60
 8012f38:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012f3c:	ed42 7a08 	vstr	s15, [r2, #-32]	@ 0xffffffe0
                axislock.mask |= step_pin[idx];
 8012f40:	b2e4      	uxtb	r4, r4
 8012f42:	aa18      	add	r2, sp, #96	@ 0x60
 8012f44:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012f48:	f852 2c10 	ldr.w	r2, [r2, #-16]
 8012f4c:	4314      	orrs	r4, r2
        } while(idx);
 8012f4e:	b333      	cbz	r3, 8012f9e <homing_cycle+0x1e2>
            if (bit_istrue(cycle.mask, bit(--idx))) {
 8012f50:	3b01      	subs	r3, #1
 8012f52:	fa21 f203 	lsr.w	r2, r1, r3
 8012f56:	f012 0f01 	tst.w	r2, #1
 8012f5a:	d0f8      	beq.n	8012f4e <homing_cycle+0x192>
                n_active_axis++;
 8012f5c:	3501      	adds	r5, #1
                sys.position[idx] = 0;
 8012f5e:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8012f62:	482d      	ldr	r0, [pc, #180]	@ (8013018 <homing_cycle+0x25c>)
 8012f64:	f04f 0c00 	mov.w	ip, #0
 8012f68:	f840 c022 	str.w	ip, [r0, r2, lsl #2]
                if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 8012f6c:	4a2b      	ldr	r2, [pc, #172]	@ (801301c <homing_cycle+0x260>)
 8012f6e:	f892 2110 	ldrb.w	r2, [r2, #272]	@ 0x110
 8012f72:	40da      	lsrs	r2, r3
 8012f74:	f012 0f01 	tst.w	r2, #1
 8012f78:	d004      	beq.n	8012f84 <homing_cycle+0x1c8>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 8012f7a:	2e02      	cmp	r6, #2
 8012f7c:	d0d9      	beq.n	8012f32 <homing_cycle+0x176>
 8012f7e:	eef1 7a68 	vneg.f32	s15, s17
 8012f82:	e7d8      	b.n	8012f36 <homing_cycle+0x17a>
                    target.values[idx] = mode == HomingMode_Pulloff ? - max_travel : max_travel;
 8012f84:	2e02      	cmp	r6, #2
 8012f86:	d007      	beq.n	8012f98 <homing_cycle+0x1dc>
 8012f88:	eef0 7a68 	vmov.f32	s15, s17
 8012f8c:	aa18      	add	r2, sp, #96	@ 0x60
 8012f8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012f92:	ed42 7a08 	vstr	s15, [r2, #-32]	@ 0xffffffe0
 8012f96:	e7d3      	b.n	8012f40 <homing_cycle+0x184>
 8012f98:	eef1 7a68 	vneg.f32	s15, s17
 8012f9c:	e7f6      	b.n	8012f8c <homing_cycle+0x1d0>
        if(grbl.on_homing_rate_set)
 8012f9e:	4b24      	ldr	r3, [pc, #144]	@ (8013030 <homing_cycle+0x274>)
 8012fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012fa4:	b12b      	cbz	r3, 8012fb2 <homing_cycle+0x1f6>
            grbl.on_homing_rate_set(cycle, homing_rate, mode);
 8012fa6:	4631      	mov	r1, r6
 8012fa8:	eeb0 0a48 	vmov.f32	s0, s16
 8012fac:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8012fb0:	4798      	blx	r3
        homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8012fb2:	ee07 5a90 	vmov	s15, r5
 8012fb6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8012fba:	f014 f899 	bl	80270f0 <sqrtf>
 8012fbe:	ee28 0a00 	vmul.f32	s0, s16, s0
        plan_data.feed_rate = homing_rate;      // Set current homing rate.
 8012fc2:	ed8d 0a06 	vstr	s0, [sp, #24]
        sys.homing_axis_lock.mask = axislock.mask;
 8012fc6:	4d14      	ldr	r5, [pc, #80]	@ (8013018 <homing_cycle+0x25c>)
 8012fc8:	766c      	strb	r4, [r5, #25]
        plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 8012fca:	a906      	add	r1, sp, #24
 8012fcc:	a810      	add	r0, sp, #64	@ 0x40
 8012fce:	f003 f9cb 	bl	8016368 <plan_buffer_line>
        sys.step_control.flags = 0;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	762b      	strb	r3, [r5, #24]
        sys.step_control.execute_sys_motion = On; // Set to execute homing motion and clear existing flags.
 8012fd6:	2304      	movs	r3, #4
 8012fd8:	762b      	strb	r3, [r5, #24]
        st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 8012fda:	f00c fc43 	bl	801f864 <st_prep_buffer>
        st_wake_up();       // Initiate motion
 8012fde:	f00c f94f 	bl	801f280 <st_wake_up>
 8012fe2:	e045      	b.n	8013070 <homing_cycle+0x2b4>
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 8012fe4:	f04f 0802 	mov.w	r8, #2
 8012fe8:	e071      	b.n	80130ce <homing_cycle+0x312>
                } while(idx);
 8012fea:	b31b      	cbz	r3, 8013034 <homing_cycle+0x278>
                    idx--;
 8012fec:	3b01      	subs	r3, #1
                    if ((axislock.mask & step_pin[idx]) && (homing_state.mask & bit(idx))) {
 8012fee:	b2e2      	uxtb	r2, r4
 8012ff0:	a918      	add	r1, sp, #96	@ 0x60
 8012ff2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012ff6:	f851 1c10 	ldr.w	r1, [r1, #-16]
 8012ffa:	420a      	tst	r2, r1
 8012ffc:	d0f5      	beq.n	8012fea <homing_cycle+0x22e>
 8012ffe:	b2e9      	uxtb	r1, r5
 8013000:	40d9      	lsrs	r1, r3
 8013002:	f011 0f01 	tst.w	r1, #1
 8013006:	d0f0      	beq.n	8012fea <homing_cycle+0x22e>
                        axislock.mask &= ~bit(idx);
 8013008:	2401      	movs	r4, #1
 801300a:	409c      	lsls	r4, r3
 801300c:	ea22 0404 	bic.w	r4, r2, r4
                        if(idx == dual_motor_axis)
 8013010:	4599      	cmp	r9, r3
 8013012:	d1ea      	bne.n	8012fea <homing_cycle+0x22e>
                            autosquare_check = false;
 8013014:	2700      	movs	r7, #0
 8013016:	e7e8      	b.n	8012fea <homing_cycle+0x22e>
 8013018:	200014a0 	.word	0x200014a0
 801301c:	20001bd8 	.word	0x20001bd8
 8013020:	20000ef8 	.word	0x20000ef8
 8013024:	00000000 	.word	0x00000000
 8013028:	200011c0 	.word	0x200011c0
 801302c:	42c80000 	.word	0x42c80000
 8013030:	200013a8 	.word	0x200013a8
                sys.homing_axis_lock.mask = axislock.mask;
 8013034:	4b99      	ldr	r3, [pc, #612]	@ (801329c <homing_cycle+0x4e0>)
 8013036:	765c      	strb	r4, [r3, #25]
                if (autosquare_check && abs(initial_trigger_position - sys.position[dual_motor_axis]) > autosquare_fail_distance) {
 8013038:	b167      	cbz	r7, 8013054 <homing_cycle+0x298>
 801303a:	f109 0322 	add.w	r3, r9, #34	@ 0x22
 801303e:	4a97      	ldr	r2, [pc, #604]	@ (801329c <homing_cycle+0x4e0>)
 8013040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013044:	9a00      	ldr	r2, [sp, #0]
 8013046:	1ad3      	subs	r3, r2, r3
 8013048:	2b00      	cmp	r3, #0
 801304a:	bfb8      	it	lt
 801304c:	425b      	neglt	r3, r3
 801304e:	9a01      	ldr	r2, [sp, #4]
 8013050:	4293      	cmp	r3, r2
 8013052:	dc44      	bgt.n	80130de <homing_cycle+0x322>
            st_prep_buffer(); // Check and prep segment buffer.
 8013054:	f00c fc06 	bl	801f864 <st_prep_buffer>
            if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 8013058:	4b90      	ldr	r3, [pc, #576]	@ (801329c <homing_cycle+0x4e0>)
 801305a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801305c:	f013 0f64 	tst.w	r3, #100	@ 0x64
 8013060:	d148      	bne.n	80130f4 <homing_cycle+0x338>
            grbl.on_execute_realtime(STATE_HOMING);
 8013062:	4b8f      	ldr	r3, [pc, #572]	@ (80132a0 <homing_cycle+0x4e4>)
 8013064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013066:	2004      	movs	r0, #4
 8013068:	4798      	blx	r3
        } while (axislock.mask & AXES_BITMASK);
 801306a:	f014 0f07 	tst.w	r4, #7
 801306e:	d066      	beq.n	801313e <homing_cycle+0x382>
            if (mode != HomingMode_Pulloff) {
 8013070:	2e02      	cmp	r6, #2
 8013072:	d0ef      	beq.n	8013054 <homing_cycle+0x298>
                homing_state = homing_signals_select(signals_state = hal.homing.get_state(), auto_square, squaring_mode);
 8013074:	4b8b      	ldr	r3, [pc, #556]	@ (80132a4 <homing_cycle+0x4e8>)
 8013076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013078:	4798      	blx	r3
 801307a:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
 801307e:	4642      	mov	r2, r8
 8013080:	4651      	mov	r1, sl
 8013082:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013084:	f7ff f914 	bl	80122b0 <homing_signals_select>
 8013088:	4605      	mov	r5, r0
                if((homing_state.mask & auto_square.mask) && squaring_mode == SquaringMode_Both) {
 801308a:	b2c2      	uxtb	r2, r0
 801308c:	ea1b 0f05 	tst.w	fp, r5
 8013090:	d023      	beq.n	80130da <homing_cycle+0x31e>
 8013092:	f1b8 0f00 	cmp.w	r8, #0
 8013096:	d120      	bne.n	80130da <homing_cycle+0x31e>
                    if((autosquare_check = (signals_state.a.mask & auto_square.mask) != (signals_state.b.mask & auto_square.mask))) {
 8013098:	f89d 104c 	ldrb.w	r1, [sp, #76]	@ 0x4c
 801309c:	f89d 304d 	ldrb.w	r3, [sp, #77]	@ 0x4d
 80130a0:	404b      	eors	r3, r1
 80130a2:	ea0b 0303 	and.w	r3, fp, r3
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	bf14      	ite	ne
 80130aa:	2701      	movne	r7, #1
 80130ac:	2700      	moveq	r7, #0
 80130ae:	d014      	beq.n	80130da <homing_cycle+0x31e>
                        initial_trigger_position = sys.position[dual_motor_axis];
 80130b0:	f109 0322 	add.w	r3, r9, #34	@ 0x22
 80130b4:	4879      	ldr	r0, [pc, #484]	@ (801329c <homing_cycle+0x4e0>)
 80130b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80130ba:	9300      	str	r3, [sp, #0]
                        homing_state.mask &= ~auto_square.mask;
 80130bc:	ea6f 050b 	mvn.w	r5, fp
 80130c0:	b26d      	sxtb	r5, r5
 80130c2:	4015      	ands	r5, r2
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 80130c4:	ea1b 0f01 	tst.w	fp, r1
 80130c8:	d08c      	beq.n	8012fe4 <homing_cycle+0x228>
 80130ca:	f04f 0801 	mov.w	r8, #1
                        hal.stepper.disable_motors(auto_square, squaring_mode);
 80130ce:	4b75      	ldr	r3, [pc, #468]	@ (80132a4 <homing_cycle+0x4e8>)
 80130d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80130d4:	4641      	mov	r1, r8
 80130d6:	4650      	mov	r0, sl
 80130d8:	4798      	blx	r3
                idx = N_AXIS;
 80130da:	2303      	movs	r3, #3
 80130dc:	e786      	b.n	8012fec <homing_cycle+0x230>
                    system_set_exec_alarm(Alarm_HomingFailAutoSquaringApproach);
 80130de:	4b71      	ldr	r3, [pc, #452]	@ (80132a4 <homing_cycle+0x4e8>)
 80130e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130e2:	210f      	movs	r1, #15
 80130e4:	4870      	ldr	r0, [pc, #448]	@ (80132a8 <homing_cycle+0x4ec>)
 80130e6:	4798      	blx	r3
                    mc_reset();
 80130e8:	f001 fa7a 	bl	80145e0 <mc_reset>
                    protocol_execute_realtime();
 80130ec:	f004 f844 	bl	8017178 <protocol_execute_realtime>
                    return false;
 80130f0:	2000      	movs	r0, #0
 80130f2:	e670      	b.n	8012dd6 <homing_cycle+0x1a>
                uint_fast16_t rt_exec = sys.rt_exec_state;
 80130f4:	4b69      	ldr	r3, [pc, #420]	@ (801329c <homing_cycle+0x4e0>)
 80130f6:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                if (rt_exec & EXEC_RESET)
 80130f8:	f014 0f20 	tst.w	r4, #32
 80130fc:	d004      	beq.n	8013108 <homing_cycle+0x34c>
                    system_set_exec_alarm(Alarm_HomingFailReset);
 80130fe:	4b69      	ldr	r3, [pc, #420]	@ (80132a4 <homing_cycle+0x4e8>)
 8013100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013102:	2106      	movs	r1, #6
 8013104:	4868      	ldr	r0, [pc, #416]	@ (80132a8 <homing_cycle+0x4ec>)
 8013106:	4798      	blx	r3
                if (rt_exec & EXEC_SAFETY_DOOR)
 8013108:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801310c:	d004      	beq.n	8013118 <homing_cycle+0x35c>
                    system_set_exec_alarm(Alarm_HomingFailDoor);
 801310e:	4b65      	ldr	r3, [pc, #404]	@ (80132a4 <homing_cycle+0x4e8>)
 8013110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013112:	2107      	movs	r1, #7
 8013114:	4864      	ldr	r0, [pc, #400]	@ (80132a8 <homing_cycle+0x4ec>)
 8013116:	4798      	blx	r3
                hal.delay_ms(2, NULL);
 8013118:	4b62      	ldr	r3, [pc, #392]	@ (80132a4 <homing_cycle+0x4e8>)
 801311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801311c:	2100      	movs	r1, #0
 801311e:	2002      	movs	r0, #2
 8013120:	4798      	blx	r3
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 8013122:	2e02      	cmp	r6, #2
 8013124:	d047      	beq.n	80131b6 <homing_cycle+0x3fa>
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 8013126:	f014 0f04 	tst.w	r4, #4
 801312a:	d158      	bne.n	80131de <homing_cycle+0x422>
                if (sys.rt_exec_alarm) {
 801312c:	4b5b      	ldr	r3, [pc, #364]	@ (801329c <homing_cycle+0x4e0>)
 801312e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013130:	2b00      	cmp	r3, #0
 8013132:	d15a      	bne.n	80131ea <homing_cycle+0x42e>
                    system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 8013134:	4b5b      	ldr	r3, [pc, #364]	@ (80132a4 <homing_cycle+0x4e8>)
 8013136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013138:	2104      	movs	r1, #4
 801313a:	485c      	ldr	r0, [pc, #368]	@ (80132ac <homing_cycle+0x4f0>)
 801313c:	4798      	blx	r3
        st_reset(); // Immediately force kill steppers and reset step segment buffer.
 801313e:	f00c fa67 	bl	801f610 <st_reset>
        hal.delay_ms(settings.homing.debounce_delay, NULL); // Delay to allow transient dynamics to dissipate.
 8013142:	4b58      	ldr	r3, [pc, #352]	@ (80132a4 <homing_cycle+0x4e8>)
 8013144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013146:	2100      	movs	r1, #0
 8013148:	4a59      	ldr	r2, [pc, #356]	@ (80132b0 <homing_cycle+0x4f4>)
 801314a:	f8b2 0112 	ldrh.w	r0, [r2, #274]	@ 0x112
 801314e:	4798      	blx	r3
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 8013150:	2e02      	cmp	r6, #2
 8013152:	d050      	beq.n	80131f6 <homing_cycle+0x43a>
 8013154:	2602      	movs	r6, #2
        homing_rate = hal.homing.get_feedrate(cycle, mode);
 8013156:	4b53      	ldr	r3, [pc, #332]	@ (80132a4 <homing_cycle+0x4e8>)
 8013158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801315a:	4631      	mov	r1, r6
 801315c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8013160:	4798      	blx	r3
 8013162:	eeb0 8a40 	vmov.f32	s16, s0
        if (mode == HomingMode_Locate) {
 8013166:	2e01      	cmp	r6, #1
 8013168:	d047      	beq.n	80131fa <homing_cycle+0x43e>
            max_travel = settings.homing.pulloff;
 801316a:	4b51      	ldr	r3, [pc, #324]	@ (80132b0 <homing_cycle+0x4f4>)
 801316c:	edd3 8a43 	vldr	s17, [r3, #268]	@ 0x10c
        if(auto_square.mask) {
 8013170:	f1bb 0f00 	cmp.w	fp, #0
 8013174:	d007      	beq.n	8013186 <homing_cycle+0x3ca>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8013176:	4b4b      	ldr	r3, [pc, #300]	@ (80132a4 <homing_cycle+0x4e8>)
 8013178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801317c:	2700      	movs	r7, #0
 801317e:	4639      	mov	r1, r7
 8013180:	4638      	mov	r0, r7
 8013182:	4798      	blx	r3
            squaring_mode = SquaringMode_Both;
 8013184:	46b8      	mov	r8, r7
    } while (homing_rate > 0.0f && cycle.mask && n_cycle-- > 0);
 8013186:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318e:	dd3c      	ble.n	801320a <homing_cycle+0x44e>
 8013190:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d038      	beq.n	801320a <homing_cycle+0x44e>
 8013198:	9a02      	ldr	r2, [sp, #8]
 801319a:	1e53      	subs	r3, r2, #1
 801319c:	2a00      	cmp	r2, #0
 801319e:	d034      	beq.n	801320a <homing_cycle+0x44e>
 80131a0:	9302      	str	r3, [sp, #8]
        system_convert_array_steps_to_mpos(target.values, sys.position);
 80131a2:	4944      	ldr	r1, [pc, #272]	@ (80132b4 <homing_cycle+0x4f8>)
 80131a4:	a810      	add	r0, sp, #64	@ 0x40
 80131a6:	f00e fa69 	bl	802167c <system_convert_array_steps_to_mpos>
        axislock = (axes_signals_t){0};
 80131aa:	f04f 0400 	mov.w	r4, #0
        n_active_axis = 0;
 80131ae:	9d05      	ldr	r5, [sp, #20]
        idx = N_AXIS;
 80131b0:	2303      	movs	r3, #3
 80131b2:	9904      	ldr	r1, [sp, #16]
 80131b4:	e6cc      	b.n	8012f50 <homing_cycle+0x194>
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 80131b6:	4b3b      	ldr	r3, [pc, #236]	@ (80132a4 <homing_cycle+0x4e8>)
 80131b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80131ba:	4798      	blx	r3
 80131bc:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80131c0:	2200      	movs	r2, #0
 80131c2:	4611      	mov	r1, r2
 80131c4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80131c6:	f7ff f873 	bl	80122b0 <homing_signals_select>
 80131ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80131ce:	4203      	tst	r3, r0
 80131d0:	d0ac      	beq.n	801312c <homing_cycle+0x370>
                    system_set_exec_alarm(Alarm_FailPulloff);
 80131d2:	4b34      	ldr	r3, [pc, #208]	@ (80132a4 <homing_cycle+0x4e8>)
 80131d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131d6:	2108      	movs	r1, #8
 80131d8:	4833      	ldr	r0, [pc, #204]	@ (80132a8 <homing_cycle+0x4ec>)
 80131da:	4798      	blx	r3
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 80131dc:	e7a6      	b.n	801312c <homing_cycle+0x370>
                    system_set_exec_alarm(Alarm_HomingFailApproach);
 80131de:	4b31      	ldr	r3, [pc, #196]	@ (80132a4 <homing_cycle+0x4e8>)
 80131e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131e2:	2109      	movs	r1, #9
 80131e4:	4830      	ldr	r0, [pc, #192]	@ (80132a8 <homing_cycle+0x4ec>)
 80131e6:	4798      	blx	r3
 80131e8:	e7a0      	b.n	801312c <homing_cycle+0x370>
                    mc_reset(); // Stop motors, if they are running.
 80131ea:	f001 f9f9 	bl	80145e0 <mc_reset>
                    protocol_execute_realtime();
 80131ee:	f003 ffc3 	bl	8017178 <protocol_execute_realtime>
                    return false;
 80131f2:	2000      	movs	r0, #0
 80131f4:	e5ef      	b.n	8012dd6 <homing_cycle+0x1a>
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 80131f6:	2601      	movs	r6, #1
 80131f8:	e7ad      	b.n	8013156 <homing_cycle+0x39a>
            max_travel = settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR;
 80131fa:	4b2d      	ldr	r3, [pc, #180]	@ (80132b0 <homing_cycle+0x4f4>)
 80131fc:	edd3 8a43 	vldr	s17, [r3, #268]	@ 0x10c
 8013200:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8013204:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013208:	e7b2      	b.n	8013170 <homing_cycle+0x3b4>
    if(auto_square.mask && settings.axis[dual_motor_axis].dual_axis_offset != 0.0f) {
 801320a:	f1bb 0f00 	cmp.w	fp, #0
 801320e:	d02d      	beq.n	801326c <homing_cycle+0x4b0>
 8013210:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 8013214:	4b26      	ldr	r3, [pc, #152]	@ (80132b0 <homing_cycle+0x4f4>)
 8013216:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801321a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801321e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013226:	d021      	beq.n	801326c <homing_cycle+0x4b0>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 8013228:	4b1e      	ldr	r3, [pc, #120]	@ (80132a4 <homing_cycle+0x4e8>)
 801322a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801322e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013236:	d42a      	bmi.n	801328e <homing_cycle+0x4d2>
 8013238:	2101      	movs	r1, #1
 801323a:	f89d 400f 	ldrb.w	r4, [sp, #15]
 801323e:	4620      	mov	r0, r4
 8013240:	4798      	blx	r3
        if(!limits_pull_off(auto_square, fabs(settings.axis[dual_motor_axis].dual_axis_offset)))
 8013242:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8013246:	4b1a      	ldr	r3, [pc, #104]	@ (80132b0 <homing_cycle+0x4f4>)
 8013248:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801324c:	ed93 0a10 	vldr	s0, [r3, #64]	@ 0x40
 8013250:	eeb0 0ac0 	vabs.f32	s0, s0
 8013254:	4620      	mov	r0, r4
 8013256:	f7ff fa07 	bl	8012668 <limits_pull_off>
 801325a:	2800      	cmp	r0, #0
 801325c:	f43f adbb 	beq.w	8012dd6 <homing_cycle+0x1a>
        hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 8013260:	4b10      	ldr	r3, [pc, #64]	@ (80132a4 <homing_cycle+0x4e8>)
 8013262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013266:	2100      	movs	r1, #0
 8013268:	4608      	mov	r0, r1
 801326a:	4798      	blx	r3
    limits_set_machine_positions(cycle, true);
 801326c:	2101      	movs	r1, #1
 801326e:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8013272:	4620      	mov	r0, r4
 8013274:	f7ff fd40 	bl	8012cf8 <limits_set_machine_positions>
    sys.step_control.flags = 0; // Return step control to normal operation.
 8013278:	4a08      	ldr	r2, [pc, #32]	@ (801329c <homing_cycle+0x4e0>)
 801327a:	2300      	movs	r3, #0
 801327c:	7613      	strb	r3, [r2, #24]
    sys.homed.mask |= cycle.mask;
 801327e:	f892 1054 	ldrb.w	r1, [r2, #84]	@ 0x54
 8013282:	b2e3      	uxtb	r3, r4
 8013284:	430b      	orrs	r3, r1
 8013286:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    return true;
 801328a:	2001      	movs	r0, #1
 801328c:	e5a3      	b.n	8012dd6 <homing_cycle+0x1a>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 801328e:	2102      	movs	r1, #2
 8013290:	e7d3      	b.n	801323a <homing_cycle+0x47e>
        return true;
 8013292:	2001      	movs	r0, #1
 8013294:	e59f      	b.n	8012dd6 <homing_cycle+0x1a>
        return false;
 8013296:	2000      	movs	r0, #0
 8013298:	e59d      	b.n	8012dd6 <homing_cycle+0x1a>
 801329a:	bf00      	nop
 801329c:	200014a0 	.word	0x200014a0
 80132a0:	200013a8 	.word	0x200013a8
 80132a4:	200011c0 	.word	0x200011c0
 80132a8:	200014ec 	.word	0x200014ec
 80132ac:	200014e8 	.word	0x200014e8
 80132b0:	20001bd8 	.word	0x20001bd8
 80132b4:	20001528 	.word	0x20001528

080132b8 <limits_go_home>:
{
 80132b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ba:	b083      	sub	sp, #12
 80132bc:	4607      	mov	r7, r0
    axes_signals_t auto_square = {0}, auto_squared = {0};
 80132be:	2600      	movs	r6, #0
 80132c0:	4634      	mov	r4, r6
    hal.limits.enable(settings.limits.flags.hard_enabled, cycle); // Disable hard limits pin change register for cycle duration
 80132c2:	4d24      	ldr	r5, [pc, #144]	@ (8013354 <limits_go_home+0x9c>)
 80132c4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80132c6:	4a24      	ldr	r2, [pc, #144]	@ (8013358 <limits_go_home+0xa0>)
 80132c8:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 80132cc:	4639      	mov	r1, r7
 80132ce:	f000 0001 	and.w	r0, r0, #1
 80132d2:	4798      	blx	r3
    if(hal.stepper.get_ganged)
 80132d4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80132d8:	b113      	cbz	r3, 80132e0 <limits_go_home+0x28>
        auto_squared = hal.stepper.get_ganged(true);
 80132da:	2001      	movs	r0, #1
 80132dc:	4798      	blx	r3
 80132de:	4606      	mov	r6, r0
    auto_squared.mask &= cycle.mask;
 80132e0:	b2fd      	uxtb	r5, r7
    if(auto_squared.mask) {
 80132e2:	4035      	ands	r5, r6
 80132e4:	d018      	beq.n	8013318 <limits_go_home+0x60>
        if(!hal.stepper.disable_motors)
 80132e6:	4b1b      	ldr	r3, [pc, #108]	@ (8013354 <limits_go_home+0x9c>)
 80132e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80132ec:	b363      	cbz	r3, 8013348 <limits_go_home+0x90>
        auto_square.x = On;
 80132ee:	f04f 0401 	mov.w	r4, #1
        while(!(auto_squared.mask & auto_square.mask))
 80132f2:	e000      	b.n	80132f6 <limits_go_home+0x3e>
            auto_square.mask <<= 1;
 80132f4:	005c      	lsls	r4, r3, #1
        while(!(auto_squared.mask & auto_square.mask))
 80132f6:	b2e3      	uxtb	r3, r4
 80132f8:	4225      	tst	r5, r4
 80132fa:	d0fb      	beq.n	80132f4 <limits_go_home+0x3c>
        if(auto_squared.mask != auto_square.mask)
 80132fc:	429d      	cmp	r5, r3
 80132fe:	d125      	bne.n	801334c <limits_go_home+0x94>
        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 8013300:	4b14      	ldr	r3, [pc, #80]	@ (8013354 <limits_go_home+0x9c>)
 8013302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013304:	4798      	blx	r3
 8013306:	f8ad 0004 	strh.w	r0, [sp, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	4611      	mov	r1, r2
 801330e:	9801      	ldr	r0, [sp, #4]
 8013310:	f7fe ffce 	bl	80122b0 <homing_signals_select>
 8013314:	4205      	tst	r5, r0
 8013316:	d109      	bne.n	801332c <limits_go_home+0x74>
    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 8013318:	4b10      	ldr	r3, [pc, #64]	@ (801335c <limits_go_home+0xa4>)
 801331a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801331e:	4621      	mov	r1, r4
 8013320:	4638      	mov	r0, r7
 8013322:	4798      	blx	r3
 8013324:	b1a0      	cbz	r0, 8013350 <limits_go_home+0x98>
 8013326:	2000      	movs	r0, #0
}
 8013328:	b003      	add	sp, #12
 801332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 801332c:	4b0a      	ldr	r3, [pc, #40]	@ (8013358 <limits_go_home+0xa0>)
 801332e:	ed93 0a43 	vldr	s0, [r3, #268]	@ 0x10c
 8013332:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8013336:	ee20 0a27 	vmul.f32	s0, s0, s15
 801333a:	4620      	mov	r0, r4
 801333c:	f7ff f994 	bl	8012668 <limits_pull_off>
 8013340:	2800      	cmp	r0, #0
 8013342:	d1e9      	bne.n	8013318 <limits_go_home+0x60>
            return Status_LimitsEngaged; // Auto squaring with limit switch asserted is not allowed.
 8013344:	202d      	movs	r0, #45	@ 0x2d
 8013346:	e7ef      	b.n	8013328 <limits_go_home+0x70>
            return Status_IllegalHomingConfiguration; // Bad driver! - should not happen.
 8013348:	2037      	movs	r0, #55	@ 0x37
 801334a:	e7ed      	b.n	8013328 <limits_go_home+0x70>
            return Status_IllegalHomingConfiguration; // Attempt at squaring more than one auto squared axis at the same time.
 801334c:	2037      	movs	r0, #55	@ 0x37
 801334e:	e7eb      	b.n	8013328 <limits_go_home+0x70>
    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 8013350:	2054      	movs	r0, #84	@ 0x54
 8013352:	e7e9      	b.n	8013328 <limits_go_home+0x70>
 8013354:	200011c0 	.word	0x200011c0
 8013358:	20001bd8 	.word	0x20001bd8
 801335c:	200013a8 	.word	0x200013a8

08013360 <limits_soft_check>:
{
 8013360:	b508      	push	{r3, lr}
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 8013362:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8013366:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 801336a:	d006      	beq.n	801337a <limits_soft_check+0x1a>
 801336c:	0858      	lsrs	r0, r3, #1
 801336e:	f080 0001 	eor.w	r0, r0, #1
 8013372:	f000 0001 	and.w	r0, r0, #1
 8013376:	b960      	cbnz	r0, 8013392 <limits_soft_check+0x32>
}
 8013378:	bd08      	pop	{r3, pc}
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 801337a:	4b16      	ldr	r3, [pc, #88]	@ (80133d4 <limits_soft_check+0x74>)
 801337c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013380:	2201      	movs	r2, #1
 8013382:	4915      	ldr	r1, [pc, #84]	@ (80133d8 <limits_soft_check+0x78>)
 8013384:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 8013388:	4798      	blx	r3
 801338a:	f080 0001 	eor.w	r0, r0, #1
 801338e:	b2c0      	uxtb	r0, r0
 8013390:	e7f1      	b.n	8013376 <limits_soft_check+0x16>
        sys.flags.soft_limit = On;
 8013392:	4a11      	ldr	r2, [pc, #68]	@ (80133d8 <limits_soft_check+0x78>)
 8013394:	7d93      	ldrb	r3, [r2, #22]
 8013396:	f043 0304 	orr.w	r3, r3, #4
 801339a:	7593      	strb	r3, [r2, #22]
        if(state_get() == STATE_CYCLE) {
 801339c:	f00b fa54 	bl	801e848 <state_get>
 80133a0:	2808      	cmp	r0, #8
 80133a2:	d10c      	bne.n	80133be <limits_soft_check+0x5e>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 80133a4:	4b0d      	ldr	r3, [pc, #52]	@ (80133dc <limits_soft_check+0x7c>)
 80133a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133a8:	2108      	movs	r1, #8
 80133aa:	480d      	ldr	r0, [pc, #52]	@ (80133e0 <limits_soft_check+0x80>)
 80133ac:	4798      	blx	r3
                if(!protocol_execute_realtime())
 80133ae:	f003 fee3 	bl	8017178 <protocol_execute_realtime>
 80133b2:	2800      	cmp	r0, #0
 80133b4:	d0e0      	beq.n	8013378 <limits_soft_check+0x18>
            } while(state_get() != STATE_IDLE);
 80133b6:	f00b fa47 	bl	801e848 <state_get>
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d1f7      	bne.n	80133ae <limits_soft_check+0x4e>
        mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80133be:	f001 f90f 	bl	80145e0 <mc_reset>
        system_set_exec_alarm(Alarm_SoftLimit); // Indicate soft limit critical event
 80133c2:	4b06      	ldr	r3, [pc, #24]	@ (80133dc <limits_soft_check+0x7c>)
 80133c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133c6:	2102      	movs	r1, #2
 80133c8:	4806      	ldr	r0, [pc, #24]	@ (80133e4 <limits_soft_check+0x84>)
 80133ca:	4798      	blx	r3
        protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 80133cc:	f003 fed4 	bl	8017178 <protocol_execute_realtime>
 80133d0:	e7d2      	b.n	8013378 <limits_soft_check+0x18>
 80133d2:	bf00      	nop
 80133d4:	200013a8 	.word	0x200013a8
 80133d8:	200014a0 	.word	0x200014a0
 80133dc:	200011c0 	.word	0x200011c0
 80133e0:	200014e8 	.word	0x200014e8
 80133e4:	200014ec 	.word	0x200014ec

080133e8 <limits_set_homing_axes>:
    sys.homing.mask = 0;
 80133e8:	4b0a      	ldr	r3, [pc, #40]	@ (8013414 <limits_set_homing_axes+0x2c>)
 80133ea:	2200      	movs	r2, #0
 80133ec:	769a      	strb	r2, [r3, #26]
    uint_fast8_t idx = N_AXIS;
 80133ee:	2203      	movs	r2, #3
        sys.homing.mask |= settings.homing.cycle[--idx].mask;
 80133f0:	3a01      	subs	r2, #1
 80133f2:	4b09      	ldr	r3, [pc, #36]	@ (8013418 <limits_set_homing_axes+0x30>)
 80133f4:	4413      	add	r3, r2
 80133f6:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 80133fa:	4906      	ldr	r1, [pc, #24]	@ (8013414 <limits_set_homing_axes+0x2c>)
 80133fc:	7e8b      	ldrb	r3, [r1, #26]
 80133fe:	4303      	orrs	r3, r0
 8013400:	768b      	strb	r3, [r1, #26]
    } while(idx);
 8013402:	2a00      	cmp	r2, #0
 8013404:	d1f4      	bne.n	80133f0 <limits_set_homing_axes+0x8>
    sys.homed.mask &= sys.homing.mask;
 8013406:	460a      	mov	r2, r1
 8013408:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 801340c:	400b      	ands	r3, r1
 801340e:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
}
 8013412:	4770      	bx	lr
 8013414:	200014a0 	.word	0x200014a0
 8013418:	20001bd8 	.word	0x20001bd8

0801341c <limits_homing_required>:
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 801341c:	4b0f      	ldr	r3, [pc, #60]	@ (801345c <limits_homing_required+0x40>)
 801341e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8013422:	f003 0205 	and.w	r2, r3, #5
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013426:	2a05      	cmp	r2, #5
 8013428:	d001      	beq.n	801342e <limits_homing_required+0x12>
 801342a:	2000      	movs	r0, #0
 801342c:	4770      	bx	lr
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 801342e:	4a0c      	ldr	r2, [pc, #48]	@ (8013460 <limits_homing_required+0x44>)
 8013430:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 8013434:	b912      	cbnz	r2, 801343c <limits_homing_required+0x20>
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 8013436:	f013 0f20 	tst.w	r3, #32
 801343a:	d10b      	bne.n	8013454 <limits_homing_required+0x38>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 801343c:	4b08      	ldr	r3, [pc, #32]	@ (8013460 <limits_homing_required+0x44>)
 801343e:	7e9b      	ldrb	r3, [r3, #26]
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 8013440:	b153      	cbz	r3, 8013458 <limits_homing_required+0x3c>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013442:	4a07      	ldr	r2, [pc, #28]	@ (8013460 <limits_homing_required+0x44>)
 8013444:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8013448:	4393      	bics	r3, r2
 801344a:	d001      	beq.n	8013450 <limits_homing_required+0x34>
 801344c:	2001      	movs	r0, #1
}
 801344e:	4770      	bx	lr
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 8013450:	2000      	movs	r0, #0
 8013452:	4770      	bx	lr
 8013454:	2000      	movs	r0, #0
 8013456:	4770      	bx	lr
 8013458:	2000      	movs	r0, #0
 801345a:	4770      	bx	lr
 801345c:	20001bd8 	.word	0x20001bd8
 8013460:	200014a0 	.word	0x200014a0

08013464 <limits_init>:

void limits_init (void)
{
    hal.homing.get_feedrate = get_homing_rate;
 8013464:	4b08      	ldr	r3, [pc, #32]	@ (8013488 <limits_init+0x24>)
 8013466:	4a09      	ldr	r2, [pc, #36]	@ (801348c <limits_init+0x28>)
 8013468:	665a      	str	r2, [r3, #100]	@ 0x64
    grbl.check_travel_limits = check_travel_limits;
 801346a:	4b09      	ldr	r3, [pc, #36]	@ (8013490 <limits_init+0x2c>)
 801346c:	4a09      	ldr	r2, [pc, #36]	@ (8013494 <limits_init+0x30>)
 801346e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    grbl.check_arc_travel_limits = check_arc_travel_limits;
 8013472:	4a09      	ldr	r2, [pc, #36]	@ (8013498 <limits_init+0x34>)
 8013474:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    grbl.apply_jog_limits = apply_jog_limits;
 8013478:	4a08      	ldr	r2, [pc, #32]	@ (801349c <limits_init+0x38>)
 801347a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    grbl.home_machine = homing_cycle;
 801347e:	4a08      	ldr	r2, [pc, #32]	@ (80134a0 <limits_init+0x3c>)
 8013480:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
}
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	200011c0 	.word	0x200011c0
 801348c:	080122ed 	.word	0x080122ed
 8013490:	200013a8 	.word	0x200013a8
 8013494:	08012305 	.word	0x08012305
 8013498:	080127e9 	.word	0x080127e9
 801349c:	08012581 	.word	0x08012581
 80134a0:	08012dbd 	.word	0x08012dbd

080134a4 <message_get>:
    { .id = Message_Stop, .text = "Stop"}
};

const message_t *message_get (message_code_t id)
{
    uint_fast16_t idx = 0;
 80134a4:	2300      	movs	r3, #0
    const message_t *msg = NULL;

    do {
        if(messages[idx].id == id)
 80134a6:	4a07      	ldr	r2, [pc, #28]	@ (80134c4 <message_get+0x20>)
 80134a8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80134ac:	4282      	cmp	r2, r0
 80134ae:	d004      	beq.n	80134ba <message_get+0x16>
            msg = &messages[idx];
    } while(msg == NULL && ++idx < Message_NextMessage);
 80134b0:	3301      	adds	r3, #1
 80134b2:	2b16      	cmp	r3, #22
 80134b4:	d9f7      	bls.n	80134a6 <message_get+0x2>
 80134b6:	2000      	movs	r0, #0

    return msg;
}
 80134b8:	4770      	bx	lr
            msg = &messages[idx];
 80134ba:	4802      	ldr	r0, [pc, #8]	@ (80134c4 <message_get+0x20>)
 80134bc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    } while(msg == NULL && ++idx < Message_NextMessage);
 80134c0:	4770      	bx	lr
 80134c2:	bf00      	nop
 80134c4:	0802ae24 	.word	0x0802ae24

080134c8 <eval_bezier>:
// By Giovanni Mascellani - https://github.com/giomasce/Marlin

// Compute the linear interpolation between two real numbers.
static inline float interp (const float a, const float b, const float t)
{
    return (1.0f - t) * a + t * b;
 80134c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80134cc:	ee37 7a42 	vsub.f32	s14, s14, s4
 80134d0:	ee20 0a07 	vmul.f32	s0, s0, s14
 80134d4:	ee60 7a82 	vmul.f32	s15, s1, s4
 80134d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80134dc:	ee60 0a87 	vmul.f32	s1, s1, s14
 80134e0:	ee62 7a01 	vmul.f32	s15, s4, s2
 80134e4:	ee70 0aa7 	vadd.f32	s1, s1, s15
 80134e8:	ee21 1a07 	vmul.f32	s2, s2, s14
 80134ec:	ee62 1a21 	vmul.f32	s3, s4, s3
 80134f0:	ee31 1a21 	vadd.f32	s2, s2, s3
 80134f4:	ee67 7a00 	vmul.f32	s15, s14, s0
 80134f8:	ee62 6a20 	vmul.f32	s13, s4, s1
 80134fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013500:	ee60 0a87 	vmul.f32	s1, s1, s14
 8013504:	ee22 1a01 	vmul.f32	s2, s4, s2
 8013508:	ee70 0a81 	vadd.f32	s1, s1, s2
 801350c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013510:	ee22 2a20 	vmul.f32	s4, s4, s1
                icd = interp(c, d, t),
                iabc = interp(iab, ibc, t),
                ibcd = interp(ibc, icd, t);

    return interp(iabc, ibcd, t);
}
 8013514:	ee32 0a27 	vadd.f32	s0, s4, s15
 8013518:	4770      	bx	lr
	...

0801351c <mc_line>:
{
 801351c:	b538      	push	{r3, r4, r5, lr}
 801351e:	4605      	mov	r5, r0
 8013520:	460c      	mov	r4, r1
    if(!(pl_data->condition.target_validated && pl_data->condition.target_valid))
 8013522:	7d4b      	ldrb	r3, [r1, #21]
 8013524:	f003 0306 	and.w	r3, r3, #6
 8013528:	2b06      	cmp	r3, #6
 801352a:	d10b      	bne.n	8013544 <mc_line+0x28>
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 801352c:	f00b f98c 	bl	801e848 <state_get>
 8013530:	2802      	cmp	r0, #2
 8013532:	d10b      	bne.n	801354c <mc_line+0x30>
    return !ABORTED;
 8013534:	4b1b      	ldr	r3, [pc, #108]	@ (80135a4 <mc_line+0x88>)
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	bb7b      	cbnz	r3, 801359a <mc_line+0x7e>
 801353a:	4b1a      	ldr	r3, [pc, #104]	@ (80135a4 <mc_line+0x88>)
 801353c:	785b      	ldrb	r3, [r3, #1]
 801353e:	b37b      	cbz	r3, 80135a0 <mc_line+0x84>
 8013540:	2300      	movs	r3, #0
 8013542:	e02b      	b.n	801359c <mc_line+0x80>
        limits_soft_check(target, pl_data->condition);
 8013544:	6949      	ldr	r1, [r1, #20]
 8013546:	f7ff ff0b 	bl	8013360 <limits_soft_check>
 801354a:	e7ef      	b.n	801352c <mc_line+0x10>
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 801354c:	f003 fe14 	bl	8017178 <protocol_execute_realtime>
 8013550:	2800      	cmp	r0, #0
 8013552:	d0ef      	beq.n	8013534 <mc_line+0x18>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 8013554:	f003 fe10 	bl	8017178 <protocol_execute_realtime>
 8013558:	4603      	mov	r3, r0
 801355a:	b1f8      	cbz	r0, 801359c <mc_line+0x80>
            if(plan_check_full_buffer())
 801355c:	f002 fe62 	bl	8016224 <plan_check_full_buffer>
 8013560:	b110      	cbz	r0, 8013568 <mc_line+0x4c>
                protocol_auto_cycle_start();    // Auto-cycle start when buffer is full.
 8013562:	f003 fad3 	bl	8016b0c <protocol_auto_cycle_start>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 8013566:	e7f5      	b.n	8013554 <mc_line+0x38>
        if(!plan_buffer_line(target, pl_data) && pl_data->spindle.hal->cap.laser && pl_data->spindle.state.on && !pl_data->spindle.state.ccw) {
 8013568:	4621      	mov	r1, r4
 801356a:	4628      	mov	r0, r5
 801356c:	f002 fefc 	bl	8016368 <plan_buffer_line>
 8013570:	2800      	cmp	r0, #0
 8013572:	d1df      	bne.n	8013534 <mc_line+0x18>
 8013574:	6923      	ldr	r3, [r4, #16]
 8013576:	7a9b      	ldrb	r3, [r3, #10]
 8013578:	f013 0f08 	tst.w	r3, #8
 801357c:	d0da      	beq.n	8013534 <mc_line+0x18>
 801357e:	7a23      	ldrb	r3, [r4, #8]
 8013580:	f003 0303 	and.w	r3, r3, #3
 8013584:	2b01      	cmp	r3, #1
 8013586:	d1d5      	bne.n	8013534 <mc_line+0x18>
            protocol_buffer_synchronize();
 8013588:	f004 f8c4 	bl	8017714 <protocol_buffer_synchronize>
            pl_data->spindle.hal->set_state(pl_data->spindle.hal, pl_data->spindle.state, pl_data->spindle.rpm);
 801358c:	6920      	ldr	r0, [r4, #16]
 801358e:	6a03      	ldr	r3, [r0, #32]
 8013590:	ed94 0a01 	vldr	s0, [r4, #4]
 8013594:	7a21      	ldrb	r1, [r4, #8]
 8013596:	4798      	blx	r3
 8013598:	e7cc      	b.n	8013534 <mc_line+0x18>
    return !ABORTED;
 801359a:	2300      	movs	r3, #0
}
 801359c:	4618      	mov	r0, r3
 801359e:	bd38      	pop	{r3, r4, r5, pc}
    return !ABORTED;
 80135a0:	2301      	movs	r3, #1
 80135a2:	e7fb      	b.n	801359c <mc_line+0x80>
 80135a4:	200014a0 	.word	0x200014a0

080135a8 <mc_arc>:
{
 80135a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ac:	ed2d 8b06 	vpush	{d8-d10}
 80135b0:	b0a9      	sub	sp, #164	@ 0xa4
 80135b2:	4606      	mov	r6, r0
 80135b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80135b6:	9103      	str	r1, [sp, #12]
 80135b8:	4617      	mov	r7, r2
 80135ba:	461c      	mov	r4, r3
 80135bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80135be:	eeb0 9a40 	vmov.f32	s18, s0
        .x = -(double)offset[plane.axis_0],
 80135c2:	f89d 20e0 	ldrb.w	r2, [sp, #224]	@ 0xe0
 80135c6:	9213      	str	r2, [sp, #76]	@ 0x4c
 80135c8:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80135cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80135d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80135d2:	6818      	ldr	r0, [r3, #0]
 80135d4:	f7f4 ff00 	bl	80083d8 <__aeabi_f2d>
 80135d8:	4602      	mov	r2, r0
 80135da:	460b      	mov	r3, r1
 80135dc:	4682      	mov	sl, r0
 80135de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135e2:	f101 4b00 	add.w	fp, r1, #2147483648	@ 0x80000000
    point_2dd_t rv = {  // Radius vector from center to current location
 80135e6:	e9cd ab22 	strd	sl, fp, [sp, #136]	@ 0x88
        .y = -(double)offset[plane.axis_1]
 80135ea:	f89d 30e1 	ldrb.w	r3, [sp, #225]	@ 0xe1
 80135ee:	9314      	str	r3, [sp, #80]	@ 0x50
 80135f0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80135f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80135f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80135fa:	6818      	ldr	r0, [r3, #0]
 80135fc:	f7f4 feec 	bl	80083d8 <__aeabi_f2d>
 8013600:	4604      	mov	r4, r0
 8013602:	460d      	mov	r5, r1
 8013604:	ed9f 7ba8 	vldr	d7, [pc, #672]	@ 80138a8 <mc_arc+0x300>
 8013608:	ed8d 7b04 	vstr	d7, [sp, #16]
 801360c:	9004      	str	r0, [sp, #16]
 801360e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013612:	9305      	str	r3, [sp, #20]
    point_2dd_t rv = {  // Radius vector from center to current location
 8013614:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013618:	ed8d 7b24 	vstr	d7, [sp, #144]	@ 0x90
        .x = (double)position[plane.axis_0] - rv.x,
 801361c:	eb07 0309 	add.w	r3, r7, r9
 8013620:	930a      	str	r3, [sp, #40]	@ 0x28
 8013622:	6818      	ldr	r0, [r3, #0]
 8013624:	f7f4 fed8 	bl	80083d8 <__aeabi_f2d>
 8013628:	4602      	mov	r2, r0
 801362a:	460b      	mov	r3, r1
 801362c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013630:	f7f4 fd74 	bl	800811c <__adddf3>
 8013634:	4602      	mov	r2, r0
 8013636:	460b      	mov	r3, r1
 8013638:	e9cd 2306 	strd	r2, r3, [sp, #24]
    point_2dd_t center = {
 801363c:	ec43 2b17 	vmov	d7, r2, r3
 8013640:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
        .y = (double)position[plane.axis_1] - rv.y
 8013644:	eb07 0308 	add.w	r3, r7, r8
 8013648:	9312      	str	r3, [sp, #72]	@ 0x48
 801364a:	6818      	ldr	r0, [r3, #0]
 801364c:	f7f4 fec4 	bl	80083d8 <__aeabi_f2d>
 8013650:	4602      	mov	r2, r0
 8013652:	460b      	mov	r3, r1
 8013654:	4620      	mov	r0, r4
 8013656:	4629      	mov	r1, r5
 8013658:	f7f4 fd60 	bl	800811c <__adddf3>
 801365c:	4603      	mov	r3, r0
 801365e:	460c      	mov	r4, r1
 8013660:	e9cd 3408 	strd	r3, r4, [sp, #32]
    point_2dd_t center = {
 8013664:	ec44 3b17 	vmov	d7, r3, r4
 8013668:	ed8d 7b20 	vstr	d7, [sp, #128]	@ 0x80
        .x = (double)target[plane.axis_0] - center.x,
 801366c:	44b1      	add	r9, r6
 801366e:	f8d9 0000 	ldr.w	r0, [r9]
 8013672:	f7f4 feb1 	bl	80083d8 <__aeabi_f2d>
 8013676:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801367a:	f7f4 fd4d 	bl	8008118 <__aeabi_dsub>
 801367e:	4604      	mov	r4, r0
 8013680:	460d      	mov	r5, r1
    point_2dd_t rt = {
 8013682:	e9cd 451a 	strd	r4, r5, [sp, #104]	@ 0x68
        .y = (double)target[plane.axis_1] - center.y
 8013686:	44b0      	add	r8, r6
 8013688:	f8d8 0000 	ldr.w	r0, [r8]
 801368c:	f7f4 fea4 	bl	80083d8 <__aeabi_f2d>
 8013690:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013694:	f7f4 fd40 	bl	8008118 <__aeabi_dsub>
 8013698:	4680      	mov	r8, r0
 801369a:	4689      	mov	r9, r1
    point_2dd_t rt = {
 801369c:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
    float angular_travel = (float)atan2(rv.x * rt.y - rv.y * rt.x, rv.x * rt.x + rv.y * rt.y);
 80136a0:	4602      	mov	r2, r0
 80136a2:	460b      	mov	r3, r1
 80136a4:	4650      	mov	r0, sl
 80136a6:	4659      	mov	r1, fp
 80136a8:	f7f4 feee 	bl	8008488 <__aeabi_dmul>
 80136ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80136b0:	4622      	mov	r2, r4
 80136b2:	462b      	mov	r3, r5
 80136b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136b8:	f7f4 fee6 	bl	8008488 <__aeabi_dmul>
 80136bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80136c0:	4622      	mov	r2, r4
 80136c2:	462b      	mov	r3, r5
 80136c4:	4650      	mov	r0, sl
 80136c6:	4659      	mov	r1, fp
 80136c8:	f7f4 fede 	bl	8008488 <__aeabi_dmul>
 80136cc:	4604      	mov	r4, r0
 80136ce:	460d      	mov	r5, r1
 80136d0:	4642      	mov	r2, r8
 80136d2:	464b      	mov	r3, r9
 80136d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80136d8:	f7f4 fed6 	bl	8008488 <__aeabi_dmul>
 80136dc:	4602      	mov	r2, r0
 80136de:	460b      	mov	r3, r1
 80136e0:	4620      	mov	r0, r4
 80136e2:	4629      	mov	r1, r5
 80136e4:	f7f4 fd1a 	bl	800811c <__adddf3>
 80136e8:	ec41 0b18 	vmov	d8, r0, r1
 80136ec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80136f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80136f4:	f7f4 fd10 	bl	8008118 <__aeabi_dsub>
 80136f8:	eeb0 1a48 	vmov.f32	s2, s16
 80136fc:	eef0 1a68 	vmov.f32	s3, s17
 8013700:	ec41 0b10 	vmov	d0, r0, r1
 8013704:	f013 fc9a 	bl	802703c <atan2>
 8013708:	ec51 0b10 	vmov	r0, r1, d0
 801370c:	f7f5 f9b4 	bl	8008a78 <__aeabi_d2f>
 8013710:	ee08 0a10 	vmov	s16, r0
    if (turns > 0) { // Correct atan2 output per direction
 8013714:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013716:	2b00      	cmp	r3, #0
 8013718:	f340 80b1 	ble.w	801387e <mc_arc+0x2d6>
        if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON)
 801371c:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80138b8 <mc_arc+0x310>
 8013720:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013728:	d80a      	bhi.n	8013740 <mc_arc+0x198>
            angular_travel += 2.0f * M_PI;
 801372a:	f7f4 fe55 	bl	80083d8 <__aeabi_f2d>
 801372e:	a360      	add	r3, pc, #384	@ (adr r3, 80138b0 <mc_arc+0x308>)
 8013730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013734:	f7f4 fcf2 	bl	800811c <__adddf3>
 8013738:	f7f5 f99e 	bl	8008a78 <__aeabi_d2f>
 801373c:	ee08 0a10 	vmov	s16, r0
    if(!pl_data->condition.target_validated && grbl.check_arc_travel_limits) {
 8013740:	9d03      	ldr	r5, [sp, #12]
 8013742:	7d6b      	ldrb	r3, [r5, #21]
 8013744:	f013 0f04 	tst.w	r3, #4
 8013748:	d125      	bne.n	8013796 <mc_arc+0x1ee>
 801374a:	4b5c      	ldr	r3, [pc, #368]	@ (80138bc <mc_arc+0x314>)
 801374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013750:	b30b      	cbz	r3, 8013796 <mc_arc+0x1ee>
        pl_data->condition.target_validated = On;
 8013752:	7d6b      	ldrb	r3, [r5, #21]
 8013754:	f043 0304 	orr.w	r3, r3, #4
 8013758:	756b      	strb	r3, [r5, #21]
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 801375a:	4b58      	ldr	r3, [pc, #352]	@ (80138bc <mc_arc+0x314>)
 801375c:	f8d3 40e0 	ldr.w	r4, [r3, #224]	@ 0xe0
                                                                        (point_2d_t){ .x = (float)center.x, .y = (float)center.y },
 8013760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013764:	f7f5 f988 	bl	8008a78 <__aeabi_d2f>
 8013768:	ee08 0a90 	vmov	s17, r0
 801376c:	9026      	str	r0, [sp, #152]	@ 0x98
 801376e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013772:	f7f5 f981 	bl	8008a78 <__aeabi_d2f>
 8013776:	ee00 0a90 	vmov	s1, r0
 801377a:	9027      	str	r0, [sp, #156]	@ 0x9c
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 801377c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801377e:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8013780:	eeb0 1a49 	vmov.f32	s2, s18
 8013784:	eeb0 0a68 	vmov.f32	s0, s17
 8013788:	4639      	mov	r1, r7
 801378a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801378c:	47a0      	blx	r4
 801378e:	7d6b      	ldrb	r3, [r5, #21]
 8013790:	f360 0341 	bfi	r3, r0, #1, #1
 8013794:	756b      	strb	r3, [r5, #21]
    if(labs(turns) > 1) {
 8013796:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013798:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 801379c:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 80137a0:	2e01      	cmp	r6, #1
 80137a2:	f300 8093 	bgt.w	80138cc <mc_arc+0x324>
    if(2.0f * radius > settings.arc_tolerance)
 80137a6:	ee79 7a09 	vadd.f32	s15, s18, s18
 80137aa:	4b45      	ldr	r3, [pc, #276]	@ (80138c0 <mc_arc+0x318>)
 80137ac:	ed93 0a02 	vldr	s0, [r3, #8]
 80137b0:	eef4 7ac0 	vcmpe.f32	s15, s0
 80137b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b8:	f340 81a5 	ble.w	8013b06 <mc_arc+0x55e>
        segments = (uint_fast16_t)floorf(fabsf(0.5f * angular_travel * radius) / sqrtf(settings.arc_tolerance * (2.0f * radius - settings.arc_tolerance)));
 80137bc:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 80137c0:	ee68 8a28 	vmul.f32	s17, s16, s17
 80137c4:	ee68 8a89 	vmul.f32	s17, s17, s18
 80137c8:	eef0 8ae8 	vabs.f32	s17, s17
 80137cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80137d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80137d4:	f013 fc8c 	bl	80270f0 <sqrtf>
 80137d8:	ee88 0a80 	vdiv.f32	s0, s17, s0
 80137dc:	f013 fdd8 	bl	8027390 <floorf>
 80137e0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80137e4:	ee17 9a90 	vmov	r9, s15
    if(segments) {
 80137e8:	f1b9 0f00 	cmp.w	r9, #0
 80137ec:	f000 818b 	beq.w	8013b06 <mc_arc+0x55e>
        if (pl_data->condition.inverse_time) {
 80137f0:	9a03      	ldr	r2, [sp, #12]
 80137f2:	7d13      	ldrb	r3, [r2, #20]
 80137f4:	f013 0f20 	tst.w	r3, #32
 80137f8:	d00b      	beq.n	8013812 <mc_arc+0x26a>
            pl_data->feed_rate *= segments;
 80137fa:	ed92 7a00 	vldr	s14, [r2]
 80137fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013806:	edc2 7a00 	vstr	s15, [r2]
            pl_data->condition.inverse_time = Off; // Force as feed absolute mode over arc segments.
 801380a:	7d13      	ldrb	r3, [r2, #20]
 801380c:	f36f 1345 	bfc	r3, #5, #1
 8013810:	7513      	strb	r3, [r2, #20]
        float theta_per_segment = angular_travel / segments;
 8013812:	ee07 9a90 	vmov	s15, r9
 8013816:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801381a:	eec8 aa07 	vdiv.f32	s21, s16, s14
        float linear_per_segment = (target[plane.axis_linear] - position[plane.axis_linear]) / segments;
 801381e:	f89d 30e2 	ldrb.w	r3, [sp, #226]	@ 0xe2
 8013822:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013824:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013828:	edd2 7a00 	vldr	s15, [r2]
 801382c:	eb07 0683 	add.w	r6, r7, r3, lsl #2
 8013830:	edd6 6a00 	vldr	s13, [r6]
 8013834:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013838:	ee87 aa87 	vdiv.f32	s20, s15, s14
        float cos_T = 2.0f - theta_per_segment * theta_per_segment;
 801383c:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 8013840:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8013844:	ee77 7ac7 	vsub.f32	s15, s15, s14
        float sin_T = theta_per_segment * 0.16666667f * (cos_T + 4.0f);
 8013848:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80138c4 <mc_arc+0x31c>
 801384c:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8013850:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8013854:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013858:	ee26 7a87 	vmul.f32	s14, s13, s14
 801385c:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
        cos_T *= 0.5f;
 8013860:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013868:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
        uint_fast16_t i, count = 0;
 801386c:	f04f 0b00 	mov.w	fp, #0
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 8013870:	f04f 0a01 	mov.w	sl, #1
 8013874:	46b8      	mov	r8, r7
 8013876:	464f      	mov	r7, r9
 8013878:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801387c:	e0fb      	b.n	8013a76 <mc_arc+0x4ce>
    } else if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON)
 801387e:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80138c8 <mc_arc+0x320>
 8013882:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388a:	f6ff af59 	blt.w	8013740 <mc_arc+0x198>
        angular_travel -= 2.0f * M_PI;
 801388e:	f7f4 fda3 	bl	80083d8 <__aeabi_f2d>
 8013892:	a307      	add	r3, pc, #28	@ (adr r3, 80138b0 <mc_arc+0x308>)
 8013894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013898:	f7f4 fc3e 	bl	8008118 <__aeabi_dsub>
 801389c:	f7f5 f8ec 	bl	8008a78 <__aeabi_d2f>
 80138a0:	ee08 0a10 	vmov	s16, r0
 80138a4:	e74c      	b.n	8013740 <mc_arc+0x198>
 80138a6:	bf00      	nop
	...
 80138b0:	54442d18 	.word	0x54442d18
 80138b4:	401921fb 	.word	0x401921fb
 80138b8:	350637bd 	.word	0x350637bd
 80138bc:	200013a8 	.word	0x200013a8
 80138c0:	20001bd8 	.word	0x20001bd8
 80138c4:	3e2aaaab 	.word	0x3e2aaaab
 80138c8:	b50637bd 	.word	0xb50637bd
        uint32_t n_turns = labs(turns) - 1;
 80138cc:	3e01      	subs	r6, #1
        float arc_travel = 2.0f * M_PI * n_turns + angular_travel;
 80138ce:	4630      	mov	r0, r6
 80138d0:	f7f4 fd60 	bl	8008394 <__aeabi_ui2d>
 80138d4:	a390      	add	r3, pc, #576	@ (adr r3, 8013b18 <mc_arc+0x570>)
 80138d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138da:	f7f4 fdd5 	bl	8008488 <__aeabi_dmul>
 80138de:	4604      	mov	r4, r0
 80138e0:	460d      	mov	r5, r1
 80138e2:	ee18 0a10 	vmov	r0, s16
 80138e6:	f7f4 fd77 	bl	80083d8 <__aeabi_f2d>
 80138ea:	4622      	mov	r2, r4
 80138ec:	462b      	mov	r3, r5
 80138ee:	f7f4 fc15 	bl	800811c <__adddf3>
 80138f2:	f7f5 f8c1 	bl	8008a78 <__aeabi_d2f>
 80138f6:	ee06 0a90 	vmov	s13, r0
        float linear_per_turn = (target[plane.axis_linear] - position[plane.axis_linear]) / arc_travel * 2.0f * M_PI;
 80138fa:	f89d 40e2 	ldrb.w	r4, [sp, #226]	@ 0xe2
 80138fe:	00a5      	lsls	r5, r4, #2
 8013900:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013902:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013906:	edd3 7a00 	vldr	s15, [r3]
 801390a:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 801390e:	edd3 9a00 	vldr	s19, [r3]
 8013912:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8013916:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801391a:	ee77 7a07 	vadd.f32	s15, s14, s14
 801391e:	ee17 0a90 	vmov	r0, s15
 8013922:	f7f4 fd59 	bl	80083d8 <__aeabi_f2d>
 8013926:	a37e      	add	r3, pc, #504	@ (adr r3, 8013b20 <mc_arc+0x578>)
 8013928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392c:	f7f4 fdac 	bl	8008488 <__aeabi_dmul>
 8013930:	f7f5 f8a2 	bl	8008a78 <__aeabi_d2f>
 8013934:	ee08 0a90 	vmov	s17, r0
        memcpy(&arc_target, target, sizeof(coord_data_t));
 8013938:	ab17      	add	r3, sp, #92	@ 0x5c
 801393a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801393c:	6810      	ldr	r0, [r2, #0]
 801393e:	6851      	ldr	r1, [r2, #4]
 8013940:	6892      	ldr	r2, [r2, #8]
 8013942:	c307      	stmia	r3!, {r0, r1, r2}
        arc_target.values[plane.axis_0] = position[plane.axis_0];
 8013944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013946:	681a      	ldr	r2, [r3, #0]
 8013948:	a928      	add	r1, sp, #160	@ 0xa0
 801394a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801394c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013950:	f843 2c44 	str.w	r2, [r3, #-68]
        arc_target.values[plane.axis_1] = position[plane.axis_1];
 8013954:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013956:	681a      	ldr	r2, [r3, #0]
 8013958:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801395a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801395e:	f843 2c44 	str.w	r2, [r3, #-68]
        arc_target.values[plane.axis_linear] = position[plane.axis_linear];
 8013962:	f105 03a0 	add.w	r3, r5, #160	@ 0xa0
 8013966:	eb0d 0503 	add.w	r5, sp, r3
 801396a:	ed45 9a11 	vstr	s19, [r5, #-68]	@ 0xffffffbc
        while(n_turns--) {
 801396e:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 8013972:	f8dd 80e4 	ldr.w	r8, [sp, #228]	@ 0xe4
 8013976:	e016      	b.n	80139a6 <mc_arc+0x3fe>
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 8013978:	f04f 33ff 	mov.w	r3, #4294967295
 801397c:	9301      	str	r3, [sp, #4]
 801397e:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8013980:	f8ad 3000 	strh.w	r3, [sp]
 8013984:	0c1b      	lsrs	r3, r3, #16
 8013986:	f88d 3002 	strb.w	r3, [sp, #2]
 801398a:	eeb0 0a49 	vmov.f32	s0, s18
 801398e:	464b      	mov	r3, r9
 8013990:	463a      	mov	r2, r7
 8013992:	9903      	ldr	r1, [sp, #12]
 8013994:	a817      	add	r0, sp, #92	@ 0x5c
 8013996:	f7ff fe07 	bl	80135a8 <mc_arc>
            memcpy(position, arc_target.values, sizeof(coord_data_t));
 801399a:	ab17      	add	r3, sp, #92	@ 0x5c
 801399c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801399e:	6038      	str	r0, [r7, #0]
 80139a0:	6079      	str	r1, [r7, #4]
 80139a2:	60ba      	str	r2, [r7, #8]
        while(n_turns--) {
 80139a4:	462e      	mov	r6, r5
 80139a6:	1e75      	subs	r5, r6, #1
 80139a8:	2e00      	cmp	r6, #0
 80139aa:	f43f aefc 	beq.w	80137a6 <mc_arc+0x1fe>
            arc_target.values[plane.axis_linear] += linear_per_turn;
 80139ae:	ab28      	add	r3, sp, #160	@ 0xa0
 80139b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80139b4:	ed53 7a11 	vldr	s15, [r3, #-68]	@ 0xffffffbc
 80139b8:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80139bc:	ed43 7a11 	vstr	s15, [r3, #-68]	@ 0xffffffbc
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 80139c0:	f1b8 0f00 	cmp.w	r8, #0
 80139c4:	ddd8      	ble.n	8013978 <mc_arc+0x3d0>
 80139c6:	2301      	movs	r3, #1
 80139c8:	e7d8      	b.n	801397c <mc_arc+0x3d4>
                cos_Ti = cosf(i * theta_per_segment);
 80139ca:	ee07 aa90 	vmov	s15, sl
 80139ce:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80139d2:	ee28 8a2a 	vmul.f32	s16, s16, s21
 80139d6:	eeb0 0a48 	vmov.f32	s0, s16
 80139da:	f013 fba7 	bl	802712c <cosf>
 80139de:	eef0 8a40 	vmov.f32	s17, s0
                sin_Ti = sinf(i * theta_per_segment);
 80139e2:	eeb0 0a48 	vmov.f32	s0, s16
 80139e6:	f013 fbe5 	bl	80271b4 <sinf>
 80139ea:	eeb0 9a40 	vmov.f32	s18, s0
                rv.x = -offset[plane.axis_0] * cos_Ti + offset[plane.axis_1] * sin_Ti;
 80139ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80139f0:	edd3 7a00 	vldr	s15, [r3]
 80139f4:	eef1 9a67 	vneg.f32	s19, s15
 80139f8:	ee67 7ae8 	vnmul.f32	s15, s15, s17
 80139fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80139fe:	ed93 8a00 	vldr	s16, [r3]
 8013a02:	ee28 7a00 	vmul.f32	s14, s16, s0
 8013a06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a0a:	ee17 0a90 	vmov	r0, s15
 8013a0e:	f7f4 fce3 	bl	80083d8 <__aeabi_f2d>
 8013a12:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
                rv.y = -offset[plane.axis_0] * sin_Ti - offset[plane.axis_1] * cos_Ti;
 8013a16:	ee69 9a89 	vmul.f32	s19, s19, s18
 8013a1a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8013a1e:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8013a22:	ee17 0a90 	vmov	r0, s15
 8013a26:	f7f4 fcd7 	bl	80083d8 <__aeabi_f2d>
 8013a2a:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
                count = 0;
 8013a2e:	f04f 0b00 	mov.w	fp, #0
            position[plane.axis_0] = center.x + rv.x;
 8013a32:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8013a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013a3a:	f7f4 fb6f 	bl	800811c <__adddf3>
 8013a3e:	f7f5 f81b 	bl	8008a78 <__aeabi_d2f>
 8013a42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a44:	6018      	str	r0, [r3, #0]
            position[plane.axis_1] = center.y + rv.y;
 8013a46:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 8013a4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013a4e:	f7f4 fb65 	bl	800811c <__adddf3>
 8013a52:	f7f5 f811 	bl	8008a78 <__aeabi_d2f>
 8013a56:	f8c9 0000 	str.w	r0, [r9]
            position[plane.axis_linear] += linear_per_segment;
 8013a5a:	edd6 7a00 	vldr	s15, [r6]
 8013a5e:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8013a62:	edc6 7a00 	vstr	s15, [r6]
            if(!mc_line(position, pl_data))
 8013a66:	9903      	ldr	r1, [sp, #12]
 8013a68:	4640      	mov	r0, r8
 8013a6a:	f7ff fd57 	bl	801351c <mc_line>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d04d      	beq.n	8013b0e <mc_arc+0x566>
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 8013a72:	f10a 0a01 	add.w	sl, sl, #1
 8013a76:	45ba      	cmp	sl, r7
 8013a78:	d245      	bcs.n	8013b06 <mc_arc+0x55e>
            if (count < N_ARC_CORRECTION) {
 8013a7a:	f1bb 0f0b 	cmp.w	fp, #11
 8013a7e:	d8a4      	bhi.n	80139ca <mc_arc+0x422>
                r_axisi = rv.x * sin_T + rv.y * cos_T;
 8013a80:	e9dd 4522 	ldrd	r4, r5, [sp, #136]	@ 0x88
 8013a84:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013a86:	f7f4 fca7 	bl	80083d8 <__aeabi_f2d>
 8013a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a8e:	4602      	mov	r2, r0
 8013a90:	460b      	mov	r3, r1
 8013a92:	4620      	mov	r0, r4
 8013a94:	4629      	mov	r1, r5
 8013a96:	f7f4 fcf7 	bl	8008488 <__aeabi_dmul>
 8013a9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013a9e:	ed9d 8b24 	vldr	d8, [sp, #144]	@ 0x90
 8013aa2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013aa4:	f7f4 fc98 	bl	80083d8 <__aeabi_f2d>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	460b      	mov	r3, r1
 8013aac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013ab0:	ec51 0b18 	vmov	r0, r1, d8
 8013ab4:	f7f4 fce8 	bl	8008488 <__aeabi_dmul>
 8013ab8:	4602      	mov	r2, r0
 8013aba:	460b      	mov	r3, r1
 8013abc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013ac0:	f7f4 fb2c 	bl	800811c <__adddf3>
 8013ac4:	f7f4 ffd8 	bl	8008a78 <__aeabi_d2f>
 8013ac8:	900e      	str	r0, [sp, #56]	@ 0x38
                rv.x = rv.x * cos_T - rv.y * sin_T;
 8013aca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013ace:	4620      	mov	r0, r4
 8013ad0:	4629      	mov	r1, r5
 8013ad2:	f7f4 fcd9 	bl	8008488 <__aeabi_dmul>
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	460d      	mov	r5, r1
 8013ada:	ec53 2b18 	vmov	r2, r3, d8
 8013ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ae2:	f7f4 fcd1 	bl	8008488 <__aeabi_dmul>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	460b      	mov	r3, r1
 8013aea:	4620      	mov	r0, r4
 8013aec:	4629      	mov	r1, r5
 8013aee:	f7f4 fb13 	bl	8008118 <__aeabi_dsub>
 8013af2:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
                rv.y = r_axisi;
 8013af6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8013af8:	f7f4 fc6e 	bl	80083d8 <__aeabi_f2d>
 8013afc:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
                count++;
 8013b00:	f10b 0b01 	add.w	fp, fp, #1
 8013b04:	e795      	b.n	8013a32 <mc_arc+0x48a>
    mc_line(target, pl_data);
 8013b06:	9903      	ldr	r1, [sp, #12]
 8013b08:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013b0a:	f7ff fd07 	bl	801351c <mc_line>
}
 8013b0e:	b029      	add	sp, #164	@ 0xa4
 8013b10:	ecbd 8b06 	vpop	{d8-d10}
 8013b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b18:	54442d18 	.word	0x54442d18
 8013b1c:	401921fb 	.word	0x401921fb
 8013b20:	54442d18 	.word	0x54442d18
 8013b24:	400921fb 	.word	0x400921fb

08013b28 <mc_cubic_b_spline>:
 * the mitigation offered by MIN_STEP and the small computational
 * power available on Arduino, I think it is not wise to implement it.
 */

void mc_cubic_b_spline (float *target, plan_line_data_t *pl_data, float *position, float *first, float *second)
{
 8013b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b2c:	ed2d 8b10 	vpush	{d8-d15}
 8013b30:	b085      	sub	sp, #20
 8013b32:	4607      	mov	r7, r0
 8013b34:	4689      	mov	r9, r1
 8013b36:	4615      	mov	r5, r2
 8013b38:	461e      	mov	r6, r3
 8013b3a:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
    float bez_target[N_AXIS];

    memcpy(bez_target, position, sizeof(float) * N_AXIS);
 8013b3e:	ab01      	add	r3, sp, #4
 8013b40:	6810      	ldr	r0, [r2, #0]
 8013b42:	6851      	ldr	r1, [r2, #4]
 8013b44:	6892      	ldr	r2, [r2, #8]
 8013b46:	c307      	stmia	r3!, {r0, r1, r2}

    float t = 0.0f, step = BEZIER_MAX_STEP;
 8013b48:	ed9f 8a80 	vldr	s16, [pc, #512]	@ 8013d4c <mc_cubic_b_spline+0x224>
 8013b4c:	eddf 9a80 	vldr	s19, [pc, #512]	@ 8013d50 <mc_cubic_b_spline+0x228>

    while (t < 1.0f) {
 8013b50:	e011      	b.n	8013b76 <mc_cubic_b_spline+0x4e>
            new_pos1 = candidate_pos1;
            did_reduce = true;
        }

        // If we did not reduce the step, maybe we should enlarge it.
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 8013b52:	2c00      	cmp	r4, #0
 8013b54:	f000 809e 	beq.w	8013c94 <mc_cubic_b_spline+0x16c>
            assert(new_t - t >= (MIN_STEP) / 2.0);
            assert(new_t - t <= (MAX_STEP) * 2.0);
          }
        */

        step = new_t - t;
 8013b58:	ee39 8a69 	vsub.f32	s16, s18, s19
        t = new_t;

        bez_target[X_AXIS] = new_pos0;
 8013b5c:	edcd aa01 	vstr	s21, [sp, #4]
        bez_target[Y_AXIS] = new_pos1;
 8013b60:	ed8d aa02 	vstr	s20, [sp, #8]

        // Bail mid-spline on system abort. Runtime command check already performed by mc_line.
        if(!mc_line(bez_target, pl_data))
 8013b64:	4649      	mov	r1, r9
 8013b66:	a801      	add	r0, sp, #4
 8013b68:	f7ff fcd8 	bl	801351c <mc_line>
 8013b6c:	2800      	cmp	r0, #0
 8013b6e:	f000 80e8 	beq.w	8013d42 <mc_cubic_b_spline+0x21a>
        t = new_t;
 8013b72:	eef0 9a49 	vmov.f32	s19, s18
    while (t < 1.0f) {
 8013b76:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013b7a:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b82:	f140 80de 	bpl.w	8013d42 <mc_cubic_b_spline+0x21a>
        float new_t = t + step;
 8013b86:	ee39 9a88 	vadd.f32	s18, s19, s16
        if(new_t > 1.0f)
 8013b8a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013b8e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b96:	dd01      	ble.n	8013b9c <mc_cubic_b_spline+0x74>
            new_t = 1.0f;
 8013b98:	eeb0 9a67 	vmov.f32	s18, s15
        float new_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], new_t),
 8013b9c:	ed95 ba00 	vldr	s22, [r5]
 8013ba0:	edd6 ba00 	vldr	s23, [r6]
 8013ba4:	ed98 ca00 	vldr	s24, [r8]
 8013ba8:	edd7 ca00 	vldr	s25, [r7]
 8013bac:	eeb0 2a49 	vmov.f32	s4, s18
 8013bb0:	eef0 1a6c 	vmov.f32	s3, s25
 8013bb4:	eeb0 1a4c 	vmov.f32	s2, s24
 8013bb8:	eef0 0a6b 	vmov.f32	s1, s23
 8013bbc:	eeb0 0a4b 	vmov.f32	s0, s22
 8013bc0:	f7ff fc82 	bl	80134c8 <eval_bezier>
 8013bc4:	eef0 aa40 	vmov.f32	s21, s0
              new_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], new_t);
 8013bc8:	ed95 da01 	vldr	s26, [r5, #4]
 8013bcc:	edd6 da01 	vldr	s27, [r6, #4]
 8013bd0:	ed98 ea01 	vldr	s28, [r8, #4]
 8013bd4:	edd7 ea01 	vldr	s29, [r7, #4]
 8013bd8:	eeb0 2a49 	vmov.f32	s4, s18
 8013bdc:	eef0 1a6e 	vmov.f32	s3, s29
 8013be0:	eeb0 1a4e 	vmov.f32	s2, s28
 8013be4:	eef0 0a6d 	vmov.f32	s1, s27
 8013be8:	eeb0 0a4d 	vmov.f32	s0, s26
 8013bec:	f7ff fc6c 	bl	80134c8 <eval_bezier>
 8013bf0:	eeb0 aa40 	vmov.f32	s20, s0
        bool did_reduce = false;
 8013bf4:	2400      	movs	r4, #0
        while(new_t - t >= (BEZIER_MIN_STEP)) {
 8013bf6:	ee79 7a69 	vsub.f32	s15, s18, s19
 8013bfa:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8013d54 <mc_cubic_b_spline+0x22c>
 8013bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c06:	dba4      	blt.n	8013b52 <mc_cubic_b_spline+0x2a>
            const float candidate_t = 0.5f * (t + new_t),
 8013c08:	ee39 8a89 	vadd.f32	s16, s19, s18
 8013c0c:	eeb6 fa00 	vmov.f32	s30, #96	@ 0x3f000000  0.5
 8013c10:	ee28 8a0f 	vmul.f32	s16, s16, s30
                      candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 8013c14:	eeb0 2a48 	vmov.f32	s4, s16
 8013c18:	eef0 1a6c 	vmov.f32	s3, s25
 8013c1c:	eeb0 1a4c 	vmov.f32	s2, s24
 8013c20:	eef0 0a6b 	vmov.f32	s1, s23
 8013c24:	eeb0 0a4b 	vmov.f32	s0, s22
 8013c28:	f7ff fc4e 	bl	80134c8 <eval_bezier>
 8013c2c:	eef0 8a40 	vmov.f32	s17, s0
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 8013c30:	eeb0 2a48 	vmov.f32	s4, s16
 8013c34:	eef0 1a6e 	vmov.f32	s3, s29
 8013c38:	eeb0 1a4e 	vmov.f32	s2, s28
 8013c3c:	eef0 0a6d 	vmov.f32	s1, s27
 8013c40:	eeb0 0a4d 	vmov.f32	s0, s26
 8013c44:	f7ff fc40 	bl	80134c8 <eval_bezier>
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + new_pos0),
 8013c48:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013c4c:	ee37 7a2a 	vadd.f32	s14, s14, s21
 8013c50:	ee27 7a0f 	vmul.f32	s14, s14, s30
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + new_pos1);
 8013c54:	eddd 7a02 	vldr	s15, [sp, #8]
 8013c58:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8013c5c:	ee67 7a8f 	vmul.f32	s15, s15, s30
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 8013c60:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013c64:	eeb0 7ac7 	vabs.f32	s14, s14
 8013c68:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013c6c:	eef0 7ae7 	vabs.f32	s15, s15
 8013c70:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (dist1(candidate_pos0, candidate_pos1, interp_pos0, interp_pos1) <= (BEZIER_SIGMA))
 8013c74:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8013d4c <mc_cubic_b_spline+0x224>
 8013c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c80:	f67f af67 	bls.w	8013b52 <mc_cubic_b_spline+0x2a>
            new_pos1 = candidate_pos1;
 8013c84:	eeb0 aa40 	vmov.f32	s20, s0
            new_pos0 = candidate_pos0;
 8013c88:	eef0 aa68 	vmov.f32	s21, s17
            new_t = candidate_t;
 8013c8c:	eeb0 9a48 	vmov.f32	s18, s16
            did_reduce = true;
 8013c90:	2401      	movs	r4, #1
 8013c92:	e7b0      	b.n	8013bf6 <mc_cubic_b_spline+0xce>
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 8013c94:	ee39 8a69 	vsub.f32	s16, s18, s19
 8013c98:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8013d4c <mc_cubic_b_spline+0x224>
 8013c9c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca4:	f63f af58 	bhi.w	8013b58 <mc_cubic_b_spline+0x30>
            const float candidate_t = t + 2.0f * (new_t - t);
 8013ca8:	ee38 8a08 	vadd.f32	s16, s16, s16
 8013cac:	ee38 8a29 	vadd.f32	s16, s16, s19
            if (candidate_t >= 1.0f)
 8013cb0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013cb4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cbc:	f6bf af4c 	bge.w	8013b58 <mc_cubic_b_spline+0x30>
            const float candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 8013cc0:	eeb0 2a48 	vmov.f32	s4, s16
 8013cc4:	eef0 1a6c 	vmov.f32	s3, s25
 8013cc8:	eeb0 1a4c 	vmov.f32	s2, s24
 8013ccc:	eef0 0a6b 	vmov.f32	s1, s23
 8013cd0:	eeb0 0a4b 	vmov.f32	s0, s22
 8013cd4:	f7ff fbf8 	bl	80134c8 <eval_bezier>
 8013cd8:	eef0 8a40 	vmov.f32	s17, s0
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 8013cdc:	eeb0 2a48 	vmov.f32	s4, s16
 8013ce0:	eef0 1a6e 	vmov.f32	s3, s29
 8013ce4:	eeb0 1a4e 	vmov.f32	s2, s28
 8013ce8:	eef0 0a6d 	vmov.f32	s1, s27
 8013cec:	eeb0 0a4d 	vmov.f32	s0, s26
 8013cf0:	f7ff fbea 	bl	80134c8 <eval_bezier>
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + candidate_pos0),
 8013cf4:	eddd 7a01 	vldr	s15, [sp, #4]
 8013cf8:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8013cfc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8013d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + candidate_pos1);
 8013d04:	ed9d 7a02 	vldr	s14, [sp, #8]
 8013d08:	ee37 7a00 	vadd.f32	s14, s14, s0
 8013d0c:	ee27 7a26 	vmul.f32	s14, s14, s13
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 8013d10:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8013d14:	eef0 7ae7 	vabs.f32	s15, s15
 8013d18:	ee3a 7a47 	vsub.f32	s14, s20, s14
 8013d1c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013d20:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (dist1(new_pos0, new_pos1, interp_pos0, interp_pos1) > (BEZIER_SIGMA))
 8013d24:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8013d4c <mc_cubic_b_spline+0x224>
 8013d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d30:	f73f af12 	bgt.w	8013b58 <mc_cubic_b_spline+0x30>
            new_pos1 = candidate_pos1;
 8013d34:	eeb0 aa40 	vmov.f32	s20, s0
            new_pos0 = candidate_pos0;
 8013d38:	eef0 aa68 	vmov.f32	s21, s17
            new_t = candidate_t;
 8013d3c:	eeb0 9a48 	vmov.f32	s18, s16
 8013d40:	e7a8      	b.n	8013c94 <mc_cubic_b_spline+0x16c>
            return;
    }
}
 8013d42:	b005      	add	sp, #20
 8013d44:	ecbd 8b10 	vpop	{d8-d15}
 8013d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d4c:	3dcccccd 	.word	0x3dcccccd
 8013d50:	00000000 	.word	0x00000000
 8013d54:	3b03126f 	.word	0x3b03126f

08013d58 <mc_thread>:
// R - depth regression, Q - compound slide angle, H - spring passes, E - taper, L - taper end

// TODO: change pitch to follow any tapers

void mc_thread (plan_line_data_t *pl_data, float *position, gc_thread_data *thread, bool feed_hold_disabled)
{
 8013d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d5c:	ed2d 8b08 	vpush	{d8-d11}
 8013d60:	b085      	sub	sp, #20
 8013d62:	4604      	mov	r4, r0
 8013d64:	460f      	mov	r7, r1
 8013d66:	4615      	mov	r5, r2
 8013d68:	4699      	mov	r9, r3
    uint_fast16_t pass = 1, passes = 0;
    float doc = thread->initial_depth, inv_degression = 1.0f / thread->depth_degression, thread_length;
 8013d6a:	ed92 8a03 	vldr	s16, [r2, #12]
 8013d6e:	edd2 7a05 	vldr	s15, [r2, #20]
 8013d72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013d76:	eec7 8a27 	vdiv.f32	s17, s14, s15
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 8013d7a:	f892 a02c 	ldrb.w	sl, [r2, #44]	@ 0x2c
 8013d7e:	f01a 0b01 	ands.w	fp, sl, #1
 8013d82:	d067      	beq.n	8013e54 <mc_thread+0xfc>
 8013d84:	ed92 aa07 	vldr	s20, [r2, #28]
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 8013d88:	f01a 0a02 	ands.w	sl, sl, #2
 8013d8c:	d065      	beq.n	8013e5a <mc_thread+0x102>
 8013d8e:	edd5 aa07 	vldr	s21, [r5, #28]
    float infeed_factor = tanf(thread->infeed_angle * RADDEG);
 8013d92:	ed95 0a08 	vldr	s0, [r5, #32]
 8013d96:	eddf 7aae 	vldr	s15, [pc, #696]	@ 8014050 <mc_thread+0x2f8>
 8013d9a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d9e:	f013 fa4f 	bl	8027240 <tanf>
 8013da2:	eeb0 9a40 	vmov.f32	s18, s0
    float target[N_AXIS], start_z = position[Z_AXIS] + thread->depth * infeed_factor;
 8013da6:	edd7 9a02 	vldr	s19, [r7, #8]
 8013daa:	ed95 ba04 	vldr	s22, [r5, #16]
 8013dae:	ee6b 7a00 	vmul.f32	s15, s22, s0
 8013db2:	ee79 9aa7 	vadd.f32	s19, s19, s15

    memcpy(target, position, sizeof(float) * N_AXIS);
 8013db6:	ab01      	add	r3, sp, #4
 8013db8:	6838      	ldr	r0, [r7, #0]
 8013dba:	6879      	ldr	r1, [r7, #4]
 8013dbc:	68ba      	ldr	r2, [r7, #8]
 8013dbe:	c307      	stmia	r3!, {r0, r1, r2}
    uint_fast16_t pass = 1, passes = 0;
 8013dc0:	f04f 0800 	mov.w	r8, #0

    // Calculate number of passes
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 8013dc4:	f108 0801 	add.w	r8, r8, #1
    return cut_depth * powf((float)pass, inv_degression);
 8013dc8:	eef0 0a68 	vmov.f32	s1, s17
 8013dcc:	ee07 8a90 	vmov	s15, r8
 8013dd0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8013dd4:	f013 f934 	bl	8027040 <powf>
 8013dd8:	ee28 0a00 	vmul.f32	s0, s16, s0
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 8013ddc:	eeb4 bac0 	vcmpe.f32	s22, s0
 8013de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013de4:	dcee      	bgt.n	8013dc4 <mc_thread+0x6c>

    passes += thread->spring_passes + 1;
 8013de6:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8013de8:	4446      	add	r6, r8
 8013dea:	3601      	adds	r6, #1

    if((thread_length = thread->z_final - position[Z_AXIS]) > 0.0f) {
 8013dec:	ed95 ba01 	vldr	s22, [r5, #4]
 8013df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8013df4:	ee3b ba67 	vsub.f32	s22, s22, s15
 8013df8:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8013dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e00:	dd09      	ble.n	8013e16 <mc_thread+0xbe>
        if(thread->end_taper_type & Taper_Entry)
 8013e02:	f1bb 0f00 	cmp.w	fp, #0
 8013e06:	d001      	beq.n	8013e0c <mc_thread+0xb4>
            entry_taper_length = -entry_taper_length;
 8013e08:	eeb1 aa4a 	vneg.f32	s20, s20
        if(thread->end_taper_type & Taper_Exit)
 8013e0c:	f1ba 0f00 	cmp.w	sl, #0
 8013e10:	d001      	beq.n	8013e16 <mc_thread+0xbe>
            exit_taper_length = - exit_taper_length;
 8013e12:	eef1 aa6a 	vneg.f32	s21, s21
    }

    thread_length += entry_taper_length + exit_taper_length;
 8013e16:	ee7a 7a2a 	vadd.f32	s15, s20, s21
 8013e1a:	ee37 ba8b 	vadd.f32	s22, s15, s22

    if(thread->main_taper_height != 0.0f)
 8013e1e:	ed95 7a06 	vldr	s14, [r5, #24]
 8013e22:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2a:	d007      	beq.n	8013e3c <mc_thread+0xe4>
        thread->main_taper_height = thread->main_taper_height * thread_length / (thread_length - (entry_taper_length + exit_taper_length));
 8013e2c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8013e30:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8013e34:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013e38:	edc5 6a06 	vstr	s13, [r5, #24]

    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 8013e3c:	7d23      	ldrb	r3, [r4, #20]
 8013e3e:	f043 0301 	orr.w	r3, r3, #1
 8013e42:	7523      	strb	r3, [r4, #20]
    float acc_distance = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm / settings.acceleration[Z_AXIS];
    acc_distance = acc_distance * acc_distance * settings.acceleration[Z_AXIS] * 0.5f;
     */

    // Initial Z-move for compound slide angle offset.
    if(infeed_factor != 0.0f) {
 8013e44:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4c:	d108      	bne.n	8013e60 <mc_thread+0x108>

            // Restore disable feed hold status for reposition move.
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;

            // 5. Back to start, add compound slide angle offset when commanded.
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 8013e4e:	f04f 0801 	mov.w	r8, #1
 8013e52:	e04f      	b.n	8013ef4 <mc_thread+0x19c>
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 8013e54:	ed9f aa7f 	vldr	s20, [pc, #508]	@ 8014054 <mc_thread+0x2fc>
 8013e58:	e796      	b.n	8013d88 <mc_thread+0x30>
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 8013e5a:	eddf aa7e 	vldr	s21, [pc, #504]	@ 8014054 <mc_thread+0x2fc>
 8013e5e:	e798      	b.n	8013d92 <mc_thread+0x3a>
        target[Z_AXIS] = start_z - doc * infeed_factor;
 8013e60:	ee68 7a09 	vmul.f32	s15, s16, s18
 8013e64:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8013e68:	edcd 7a03 	vstr	s15, [sp, #12]
        if(!mc_line(target, pl_data))
 8013e6c:	4621      	mov	r1, r4
 8013e6e:	a801      	add	r0, sp, #4
 8013e70:	f7ff fb54 	bl	801351c <mc_line>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d1ea      	bne.n	8013e4e <mc_thread+0xf6>
            target[X_AXIS] = position[X_AXIS];
            if(!mc_line(target, pl_data))
                return;
        }
    }
}
 8013e78:	b005      	add	sp, #20
 8013e7a:	ecbd 8b08 	vpop	{d8-d11}
 8013e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc) * thread->cut_direction;
 8013e82:	ed97 7a00 	vldr	s14, [r7]
 8013e86:	edd5 7a02 	vldr	s15, [r5, #8]
 8013e8a:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013e8e:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8013e92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e9a:	edcd 7a01 	vstr	s15, [sp, #4]
 8013e9e:	e042      	b.n	8013f26 <mc_thread+0x1ce>
        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 8013ea0:	f00a fcd2 	bl	801e848 <state_get>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d048      	beq.n	8013f3a <mc_thread+0x1e2>
 8013ea8:	e7e6      	b.n	8013e78 <mc_thread+0x120>
            target[X_AXIS] -= thread->depth * thread->cut_direction;
 8013eaa:	ed95 7a04 	vldr	s14, [r5, #16]
 8013eae:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8013eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013eb6:	eddd 7a01 	vldr	s15, [sp, #4]
 8013eba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ebe:	edcd 7a01 	vstr	s15, [sp, #4]
            target[Z_AXIS] -= exit_taper_length;
 8013ec2:	eddd 7a03 	vldr	s15, [sp, #12]
 8013ec6:	ee77 7aea 	vsub.f32	s15, s15, s21
 8013eca:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 8013ece:	4621      	mov	r1, r4
 8013ed0:	a801      	add	r0, sp, #4
 8013ed2:	f7ff fb23 	bl	801351c <mc_line>
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	d16c      	bne.n	8013fb4 <mc_thread+0x25c>
 8013eda:	e7cd      	b.n	8013e78 <mc_thread+0x120>
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 8013edc:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8014054 <mc_thread+0x2fc>
 8013ee0:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8013ee4:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 8013ee8:	4621      	mov	r1, r4
 8013eea:	a801      	add	r0, sp, #4
 8013eec:	f7ff fb16 	bl	801351c <mc_line>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d0c1      	beq.n	8013e78 <mc_thread+0x120>
    while(--passes) {
 8013ef4:	3e01      	subs	r6, #1
 8013ef6:	d0bf      	beq.n	8013e78 <mc_thread+0x120>
        if(thread->end_taper_type & Taper_Entry)
 8013ef8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013efc:	f013 0f01 	tst.w	r3, #1
 8013f00:	d0bf      	beq.n	8013e82 <mc_thread+0x12a>
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc - thread->depth) * thread->cut_direction;
 8013f02:	ed97 7a00 	vldr	s14, [r7]
 8013f06:	edd5 7a02 	vldr	s15, [r5, #8]
 8013f0a:	ee77 7a88 	vadd.f32	s15, s15, s16
 8013f0e:	edd5 6a04 	vldr	s13, [r5, #16]
 8013f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013f16:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8013f1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f22:	edcd 7a01 	vstr	s15, [sp, #4]
        if(!mc_line(target, pl_data))
 8013f26:	4621      	mov	r1, r4
 8013f28:	a801      	add	r0, sp, #4
 8013f2a:	f7ff faf7 	bl	801351c <mc_line>
 8013f2e:	2800      	cmp	r0, #0
 8013f30:	d0a2      	beq.n	8013e78 <mc_thread+0x120>
        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 8013f32:	f003 fbef 	bl	8017714 <protocol_buffer_synchronize>
 8013f36:	2800      	cmp	r0, #0
 8013f38:	d0b2      	beq.n	8013ea0 <mc_thread+0x148>
        pl_data->condition.rapid_motion = Off;      // Clear rapid motion condition flag,
 8013f3a:	7d23      	ldrb	r3, [r4, #20]
 8013f3c:	f36f 0300 	bfc	r3, #0, #1
 8013f40:	7523      	strb	r3, [r4, #20]
        pl_data->spindle.state.synchronized = On;   // enable spindle sync for cut
 8013f42:	7a23      	ldrb	r3, [r4, #8]
 8013f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f48:	7223      	strb	r3, [r4, #8]
        pl_data->overrides.feed_hold_disable = On;  // and disable feed hold
 8013f4a:	7e22      	ldrb	r2, [r4, #24]
 8013f4c:	f042 0202 	orr.w	r2, r2, #2
 8013f50:	7622      	strb	r2, [r4, #24]
        if(thread->end_taper_type & Taper_Entry) {
 8013f52:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013f56:	f013 0f01 	tst.w	r3, #1
 8013f5a:	d018      	beq.n	8013f8e <mc_thread+0x236>
            target[X_AXIS] += thread->depth * thread->cut_direction;
 8013f5c:	ed95 7a04 	vldr	s14, [r5, #16]
 8013f60:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8013f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013f68:	eddd 7a01 	vldr	s15, [sp, #4]
 8013f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f70:	edcd 7a01 	vstr	s15, [sp, #4]
            target[Z_AXIS] -= entry_taper_length;
 8013f74:	eddd 7a03 	vldr	s15, [sp, #12]
 8013f78:	ee77 7aca 	vsub.f32	s15, s15, s20
 8013f7c:	edcd 7a03 	vstr	s15, [sp, #12]
            if(!mc_line(target, pl_data))
 8013f80:	4621      	mov	r1, r4
 8013f82:	a801      	add	r0, sp, #4
 8013f84:	f7ff faca 	bl	801351c <mc_line>
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	f43f af75 	beq.w	8013e78 <mc_thread+0x120>
        target[Z_AXIS] += thread_length;
 8013f8e:	eddd 7a03 	vldr	s15, [sp, #12]
 8013f92:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8013f96:	edcd 7a03 	vstr	s15, [sp, #12]
        if(!mc_line(target, pl_data))
 8013f9a:	4621      	mov	r1, r4
 8013f9c:	a801      	add	r0, sp, #4
 8013f9e:	f7ff fabd 	bl	801351c <mc_line>
 8013fa2:	2800      	cmp	r0, #0
 8013fa4:	f43f af68 	beq.w	8013e78 <mc_thread+0x120>
        if(thread->end_taper_type & Taper_Exit) {
 8013fa8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013fac:	f013 0f02 	tst.w	r3, #2
 8013fb0:	f47f af7b 	bne.w	8013eaa <mc_thread+0x152>
        pl_data->condition.rapid_motion = On;       // Set rapid motion condition flag and
 8013fb4:	7d23      	ldrb	r3, [r4, #20]
 8013fb6:	f043 0301 	orr.w	r3, r3, #1
 8013fba:	7523      	strb	r3, [r4, #20]
        pl_data->spindle.state.synchronized = Off;  // disable spindle sync for retract & reposition
 8013fbc:	7a23      	ldrb	r3, [r4, #8]
 8013fbe:	f36f 13c7 	bfc	r3, #7, #1
 8013fc2:	7223      	strb	r3, [r4, #8]
        if(passes > 1) {
 8013fc4:	2e01      	cmp	r6, #1
 8013fc6:	d936      	bls.n	8014036 <mc_thread+0x2de>
            doc = calc_thread_doc(++pass, thread->initial_depth, inv_degression);
 8013fc8:	f108 0801 	add.w	r8, r8, #1
 8013fcc:	ed95 8a03 	vldr	s16, [r5, #12]
    return cut_depth * powf((float)pass, inv_degression);
 8013fd0:	eef0 0a68 	vmov.f32	s1, s17
 8013fd4:	ee07 8a90 	vmov	s15, r8
 8013fd8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8013fdc:	f013 f830 	bl	8027040 <powf>
 8013fe0:	ee28 8a00 	vmul.f32	s16, s16, s0
            doc = min(doc, thread->depth);
 8013fe4:	edd5 7a04 	vldr	s15, [r5, #16]
 8013fe8:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff0:	dc01      	bgt.n	8013ff6 <mc_thread+0x29e>
 8013ff2:	eeb0 8a67 	vmov.f32	s16, s15
            target[X_AXIS] = position[X_AXIS] + (doc - thread->depth) * thread->cut_direction;
 8013ff6:	ed97 7a00 	vldr	s14, [r7]
 8013ffa:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013ffe:	edd5 6a09 	vldr	s13, [r5, #36]	@ 0x24
 8014002:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014006:	ee77 7a27 	vadd.f32	s15, s14, s15
 801400a:	edcd 7a01 	vstr	s15, [sp, #4]
            if(!mc_line(target, pl_data))
 801400e:	4621      	mov	r1, r4
 8014010:	a801      	add	r0, sp, #4
 8014012:	f7ff fa83 	bl	801351c <mc_line>
 8014016:	2800      	cmp	r0, #0
 8014018:	f43f af2e 	beq.w	8013e78 <mc_thread+0x120>
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;
 801401c:	7e23      	ldrb	r3, [r4, #24]
 801401e:	f369 0341 	bfi	r3, r9, #1, #1
 8014022:	7623      	strb	r3, [r4, #24]
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 8014024:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402c:	f43f af56 	beq.w	8013edc <mc_thread+0x184>
 8014030:	ee68 7a09 	vmul.f32	s15, s16, s18
 8014034:	e754      	b.n	8013ee0 <mc_thread+0x188>
            doc = thread->depth;
 8014036:	ed95 8a04 	vldr	s16, [r5, #16]
            target[X_AXIS] = position[X_AXIS];
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	9301      	str	r3, [sp, #4]
            if(!mc_line(target, pl_data))
 801403e:	4621      	mov	r1, r4
 8014040:	a801      	add	r0, sp, #4
 8014042:	f7ff fa6b 	bl	801351c <mc_line>
 8014046:	2800      	cmp	r0, #0
 8014048:	f47f af54 	bne.w	8013ef4 <mc_thread+0x19c>
 801404c:	e714      	b.n	8013e78 <mc_thread+0x120>
 801404e:	bf00      	nop
 8014050:	3c8efa35 	.word	0x3c8efa35
 8014054:	00000000 	.word	0x00000000

08014058 <mc_jog_execute>:

// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
status_code_t mc_jog_execute (plan_line_data_t *pl_data, parser_block_t *gc_block, float *position)
{
 8014058:	b538      	push	{r3, r4, r5, lr}
 801405a:	4604      	mov	r4, r0
 801405c:	460d      	mov	r5, r1
    // Initialize planner data struct for jogging motions.
    // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
    pl_data->feed_rate = gc_block->values.f;
 801405e:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8014060:	6003      	str	r3, [r0, #0]
    pl_data->condition.no_feed_override =
    pl_data->condition.jog_motion =
    pl_data->condition.target_valid =
    pl_data->condition.target_validated = On;
 8014062:	7d43      	ldrb	r3, [r0, #21]
 8014064:	f043 0304 	orr.w	r3, r3, #4
 8014068:	7543      	strb	r3, [r0, #21]
    pl_data->condition.target_valid =
 801406a:	b2db      	uxtb	r3, r3
 801406c:	f043 0302 	orr.w	r3, r3, #2
 8014070:	7543      	strb	r3, [r0, #21]
    pl_data->condition.jog_motion =
 8014072:	7d03      	ldrb	r3, [r0, #20]
 8014074:	f043 0304 	orr.w	r3, r3, #4
 8014078:	7503      	strb	r3, [r0, #20]
    pl_data->condition.no_feed_override =
 801407a:	b2db      	uxtb	r3, r3
 801407c:	f043 0310 	orr.w	r3, r3, #16
 8014080:	7503      	strb	r3, [r0, #20]
    pl_data->line_number = gc_block->values.n;
 8014082:	f8d1 30a4 	ldr.w	r3, [r1, #164]	@ 0xa4
 8014086:	61c3      	str	r3, [r0, #28]

    if(settings.limits.flags.jog_soft_limited)
 8014088:	4b1d      	ldr	r3, [pc, #116]	@ (8014100 <mc_jog_execute+0xa8>)
 801408a:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801408e:	f013 0f08 	tst.w	r3, #8
 8014092:	d013      	beq.n	80140bc <mc_jog_execute+0x64>
 8014094:	4611      	mov	r1, r2
        grbl.apply_jog_limits(gc_block->values.xyz, position);
 8014096:	4b1b      	ldr	r3, [pc, #108]	@ (8014104 <mc_jog_execute+0xac>)
 8014098:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801409c:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80140a0:	4798      	blx	r3
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
        return Status_TravelExceeded;

    // Valid jog command. Plan, set state, and execute.
    mc_line(gc_block->values.xyz, pl_data);
 80140a2:	4621      	mov	r1, r4
 80140a4:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80140a8:	f7ff fa38 	bl	801351c <mc_line>

#ifndef KINEMATICS_API // kinematics may segment long jog moves triggering auto start (RUN)...
    sys_state_t state = state_get();
 80140ac:	f00a fbcc 	bl	801e848 <state_get>
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80140b0:	b1b8      	cbz	r0, 80140e2 <mc_jog_execute+0x8a>
 80140b2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80140b6:	d014      	beq.n	80140e2 <mc_jog_execute+0x8a>
        st_prep_buffer();
        st_wake_up();  // NOTE: Manual start. No state machine required.
    }
#endif

    return Status_OK;
 80140b8:	2000      	movs	r0, #0
}
 80140ba:	bd38      	pop	{r3, r4, r5, pc}
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
 80140bc:	4b12      	ldr	r3, [pc, #72]	@ (8014108 <mc_jog_execute+0xb0>)
 80140be:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d0ed      	beq.n	80140a2 <mc_jog_execute+0x4a>
 80140c6:	4b0f      	ldr	r3, [pc, #60]	@ (8014104 <mc_jog_execute+0xac>)
 80140c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80140cc:	2201      	movs	r2, #1
 80140ce:	490e      	ldr	r1, [pc, #56]	@ (8014108 <mc_jog_execute+0xb0>)
 80140d0:	f891 1095 	ldrb.w	r1, [r1, #149]	@ 0x95
 80140d4:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80140d8:	4798      	blx	r3
 80140da:	2800      	cmp	r0, #0
 80140dc:	d1e1      	bne.n	80140a2 <mc_jog_execute+0x4a>
        return Status_TravelExceeded;
 80140de:	200f      	movs	r0, #15
 80140e0:	e7eb      	b.n	80140ba <mc_jog_execute+0x62>
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80140e2:	f002 f87d 	bl	80161e0 <plan_get_current_block>
 80140e6:	b140      	cbz	r0, 80140fa <mc_jog_execute+0xa2>
        state_set(STATE_JOG);
 80140e8:	2020      	movs	r0, #32
 80140ea:	f00a fbb3 	bl	801e854 <state_set>
        st_prep_buffer();
 80140ee:	f00b fbb9 	bl	801f864 <st_prep_buffer>
        st_wake_up();  // NOTE: Manual start. No state machine required.
 80140f2:	f00b f8c5 	bl	801f280 <st_wake_up>
    return Status_OK;
 80140f6:	2000      	movs	r0, #0
 80140f8:	e7df      	b.n	80140ba <mc_jog_execute+0x62>
 80140fa:	2000      	movs	r0, #0
 80140fc:	e7dd      	b.n	80140ba <mc_jog_execute+0x62>
 80140fe:	bf00      	nop
 8014100:	20001bd8 	.word	0x20001bd8
 8014104:	200013a8 	.word	0x200013a8
 8014108:	200014a0 	.word	0x200014a0

0801410c <mc_dwell>:

// Execute dwell in seconds.
void mc_dwell (float seconds)
{
 801410c:	b508      	push	{r3, lr}
 801410e:	ed2d 8b02 	vpush	{d8}
 8014112:	eeb0 8a40 	vmov.f32	s16, s0
    if (state_get() != STATE_CHECK_MODE) {
 8014116:	f00a fb97 	bl	801e848 <state_get>
 801411a:	2802      	cmp	r0, #2
 801411c:	d102      	bne.n	8014124 <mc_dwell+0x18>
        protocol_buffer_synchronize();
        delay_sec(seconds, DelayMode_Dwell);
    }
}
 801411e:	ecbd 8b02 	vpop	{d8}
 8014122:	bd08      	pop	{r3, pc}
        protocol_buffer_synchronize();
 8014124:	f003 faf6 	bl	8017714 <protocol_buffer_synchronize>
        delay_sec(seconds, DelayMode_Dwell);
 8014128:	2000      	movs	r0, #0
 801412a:	eeb0 0a48 	vmov.f32	s0, s16
 801412e:	f001 fa59 	bl	80155e4 <delay_sec>
}
 8014132:	e7f4      	b.n	801411e <mc_dwell+0x12>

08014134 <mc_canned_drill>:
{
 8014134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014138:	ed2d 8b02 	vpush	{d8}
 801413c:	4681      	mov	r9, r0
 801413e:	468a      	mov	sl, r1
 8014140:	4614      	mov	r4, r2
 8014142:	461f      	mov	r7, r3
 8014144:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 8014146:	7d13      	ldrb	r3, [r2, #20]
 8014148:	f043 0301 	orr.w	r3, r3, #1
 801414c:	7513      	strb	r3, [r2, #20]
    if(position[plane.axis_linear] < canned->retract_position) {
 801414e:	f89d 8032 	ldrb.w	r8, [sp, #50]	@ 0x32
 8014152:	eb07 0688 	add.w	r6, r7, r8, lsl #2
 8014156:	ed96 7a00 	vldr	s14, [r6]
 801415a:	edd5 7a05 	vldr	s15, [r5, #20]
 801415e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014166:	d426      	bmi.n	80141b6 <mc_canned_drill+0x82>
    float position_linear = position[plane.axis_linear],
 8014168:	6833      	ldr	r3, [r6, #0]
          retract_to = canned->retract_mode == CCRetractMode_RPos ? canned->retract_position : position_linear;
 801416a:	7eaa      	ldrb	r2, [r5, #26]
 801416c:	2a01      	cmp	r2, #1
 801416e:	d02e      	beq.n	80141ce <mc_canned_drill+0x9a>
 8014170:	ee08 3a90 	vmov	s17, r3
    memcpy(position, target, sizeof(float) * N_AXIS);
 8014174:	f8da 0000 	ldr.w	r0, [sl]
 8014178:	f8da 1004 	ldr.w	r1, [sl, #4]
 801417c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8014180:	6038      	str	r0, [r7, #0]
 8014182:	6079      	str	r1, [r7, #4]
 8014184:	60ba      	str	r2, [r7, #8]
    position[plane.axis_linear] = position_linear;
 8014186:	6033      	str	r3, [r6, #0]
    if(!mc_line(position, pl_data))
 8014188:	4621      	mov	r1, r4
 801418a:	4638      	mov	r0, r7
 801418c:	f7ff f9c6 	bl	801351c <mc_line>
 8014190:	b1c8      	cbz	r0, 80141c6 <mc_canned_drill+0x92>
    while(repeats--) {
 8014192:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014194:	f103 3bff 	add.w	fp, r3, #4294967295
 8014198:	2b00      	cmp	r3, #0
 801419a:	f000 80bc 	beq.w	8014316 <mc_canned_drill+0x1e2>
        if(position[plane.axis_linear] > canned->retract_position) {
 801419e:	ed96 7a00 	vldr	s14, [r6]
 80141a2:	edd5 7a05 	vldr	s15, [r5, #20]
 80141a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ae:	dc11      	bgt.n	80141d4 <mc_canned_drill+0xa0>
        position_linear = position[plane.axis_linear];
 80141b0:	edd6 7a00 	vldr	s15, [r6]
        while(position_linear > canned->xyz[plane.axis_linear]) {
 80141b4:	e02f      	b.n	8014216 <mc_canned_drill+0xe2>
        position[plane.axis_linear] = canned->retract_position;
 80141b6:	edc6 7a00 	vstr	s15, [r6]
        if(!mc_line(position, pl_data))
 80141ba:	4611      	mov	r1, r2
 80141bc:	4638      	mov	r0, r7
 80141be:	f7ff f9ad 	bl	801351c <mc_line>
 80141c2:	2800      	cmp	r0, #0
 80141c4:	d1d0      	bne.n	8014168 <mc_canned_drill+0x34>
}
 80141c6:	ecbd 8b02 	vpop	{d8}
 80141ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          retract_to = canned->retract_mode == CCRetractMode_RPos ? canned->retract_position : position_linear;
 80141ce:	edd5 8a05 	vldr	s17, [r5, #20]
 80141d2:	e7cf      	b.n	8014174 <mc_canned_drill+0x40>
            position[plane.axis_linear] = canned->retract_position;
 80141d4:	edc6 7a00 	vstr	s15, [r6]
            if(!mc_line(position, pl_data))
 80141d8:	4621      	mov	r1, r4
 80141da:	4638      	mov	r0, r7
 80141dc:	f7ff f99e 	bl	801351c <mc_line>
 80141e0:	2800      	cmp	r0, #0
 80141e2:	d1e5      	bne.n	80141b0 <mc_canned_drill+0x7c>
 80141e4:	e7ef      	b.n	80141c6 <mc_canned_drill+0x92>
                mc_dwell(canned->dwell);
 80141e6:	f7ff ff91 	bl	801410c <mc_dwell>
 80141ea:	e03b      	b.n	8014264 <mc_canned_drill+0x130>
            switch(motion) {
 80141ec:	f1b9 0f49 	cmp.w	r9, #73	@ 0x49
 80141f0:	d043      	beq.n	801427a <mc_canned_drill+0x146>
                    position[plane.axis_linear] = retract_to;
 80141f2:	edc6 8a00 	vstr	s17, [r6]
            pl_data->condition.rapid_motion = canned->rapid_retract;
 80141f6:	7e2a      	ldrb	r2, [r5, #24]
 80141f8:	7d23      	ldrb	r3, [r4, #20]
 80141fa:	f362 0300 	bfi	r3, r2, #0, #1
 80141fe:	7523      	strb	r3, [r4, #20]
            if(!mc_line(position, pl_data))
 8014200:	4621      	mov	r1, r4
 8014202:	4638      	mov	r0, r7
 8014204:	f7ff f98a 	bl	801351c <mc_line>
 8014208:	2800      	cmp	r0, #0
 801420a:	d0dc      	beq.n	80141c6 <mc_canned_drill+0x92>
            if(canned->spindle_off)
 801420c:	7e6b      	ldrb	r3, [r5, #25]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d149      	bne.n	80142a6 <mc_canned_drill+0x172>
                                                   : position[plane.axis_linear] + settings.g73_retract;
 8014212:	eef0 7a48 	vmov.f32	s15, s16
        while(position_linear > canned->xyz[plane.axis_linear]) {
 8014216:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 801421a:	ed93 8a00 	vldr	s16, [r3]
 801421e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014226:	d546      	bpl.n	80142b6 <mc_canned_drill+0x182>
            position_linear -= canned->delta;
 8014228:	ed95 7a03 	vldr	s14, [r5, #12]
 801422c:	ee77 7ac7 	vsub.f32	s15, s15, s14
            if(position_linear < canned->xyz[plane.axis_linear])
 8014230:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014238:	dc01      	bgt.n	801423e <mc_canned_drill+0x10a>
            position_linear -= canned->delta;
 801423a:	eeb0 8a67 	vmov.f32	s16, s15
            pl_data->condition.rapid_motion = Off;
 801423e:	7d23      	ldrb	r3, [r4, #20]
 8014240:	f36f 0300 	bfc	r3, #0, #1
 8014244:	7523      	strb	r3, [r4, #20]
            position[plane.axis_linear] = position_linear;
 8014246:	ed86 8a00 	vstr	s16, [r6]
            if(!mc_line(position, pl_data)) // drill
 801424a:	4621      	mov	r1, r4
 801424c:	4638      	mov	r0, r7
 801424e:	f7ff f965 	bl	801351c <mc_line>
 8014252:	2800      	cmp	r0, #0
 8014254:	d0b7      	beq.n	80141c6 <mc_canned_drill+0x92>
            if(canned->dwell > 0.0f)
 8014256:	ed95 0a04 	vldr	s0, [r5, #16]
 801425a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014262:	dcc0      	bgt.n	80141e6 <mc_canned_drill+0xb2>
            if(canned->spindle_off)
 8014264:	7e6b      	ldrb	r3, [r5, #25]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d0c0      	beq.n	80141ec <mc_canned_drill+0xb8>
                pl_data->spindle.hal->set_state(pl_data->spindle.hal, (spindle_state_t){0}, 0.0f);
 801426a:	6920      	ldr	r0, [r4, #16]
 801426c:	6a03      	ldr	r3, [r0, #32]
 801426e:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 801432c <mc_canned_drill+0x1f8>
 8014272:	f04f 0100 	mov.w	r1, #0
 8014276:	4798      	blx	r3
 8014278:	e7b8      	b.n	80141ec <mc_canned_drill+0xb8>
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 801427a:	edd6 7a00 	vldr	s15, [r6]
 801427e:	eb05 0388 	add.w	r3, r5, r8, lsl #2
 8014282:	ed93 7a00 	vldr	s14, [r3]
                                                   : position[plane.axis_linear] + settings.g73_retract;
 8014286:	eef4 7a47 	vcmp.f32	s15, s14
 801428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801428e:	d005      	beq.n	801429c <mc_canned_drill+0x168>
 8014290:	4b27      	ldr	r3, [pc, #156]	@ (8014330 <mc_canned_drill+0x1fc>)
 8014292:	ed93 7a03 	vldr	s14, [r3, #12]
 8014296:	ee77 7a87 	vadd.f32	s15, s15, s14
 801429a:	e001      	b.n	80142a0 <mc_canned_drill+0x16c>
 801429c:	eef0 7a68 	vmov.f32	s15, s17
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 80142a0:	edc6 7a00 	vstr	s15, [r6]
                    break;
 80142a4:	e7a7      	b.n	80141f6 <mc_canned_drill+0xc2>
                spindle_sync(pl_data->spindle.hal, gc_state.modal.spindle.state, pl_data->spindle.rpm);
 80142a6:	ed94 0a01 	vldr	s0, [r4, #4]
 80142aa:	4b22      	ldr	r3, [pc, #136]	@ (8014334 <mc_canned_drill+0x200>)
 80142ac:	7e99      	ldrb	r1, [r3, #26]
 80142ae:	6920      	ldr	r0, [r4, #16]
 80142b0:	f009 ff9c 	bl	801e1ec <spindle_sync>
 80142b4:	e7ad      	b.n	8014212 <mc_canned_drill+0xde>
        pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 80142b6:	7d23      	ldrb	r3, [r4, #20]
 80142b8:	f043 0301 	orr.w	r3, r3, #1
 80142bc:	7523      	strb	r3, [r4, #20]
        if(repeats && gc_state.modal.distance_incremental) {
 80142be:	f1bb 0f00 	cmp.w	fp, #0
 80142c2:	d002      	beq.n	80142ca <mc_canned_drill+0x196>
 80142c4:	4b1b      	ldr	r3, [pc, #108]	@ (8014334 <mc_canned_drill+0x200>)
 80142c6:	791b      	ldrb	r3, [r3, #4]
 80142c8:	b913      	cbnz	r3, 80142d0 <mc_canned_drill+0x19c>
                                                   : position[plane.axis_linear] + settings.g73_retract;
 80142ca:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 80142ce:	e760      	b.n	8014192 <mc_canned_drill+0x5e>
            position[plane.axis_0] += canned->xyz[plane.axis_0];
 80142d0:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80142d4:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80142d8:	edd2 7a00 	vldr	s15, [r2]
 80142dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80142e0:	ed93 7a00 	vldr	s14, [r3]
 80142e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142e8:	edc2 7a00 	vstr	s15, [r2]
            position[plane.axis_1] += canned->xyz[plane.axis_1];
 80142ec:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 80142f0:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 80142f4:	edd2 7a00 	vldr	s15, [r2]
 80142f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80142fc:	ed93 7a00 	vldr	s14, [r3]
 8014300:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014304:	edc2 7a00 	vstr	s15, [r2]
            if(!mc_line(position, pl_data))
 8014308:	4621      	mov	r1, r4
 801430a:	4638      	mov	r0, r7
 801430c:	f7ff f906 	bl	801351c <mc_line>
 8014310:	2800      	cmp	r0, #0
 8014312:	d1da      	bne.n	80142ca <mc_canned_drill+0x196>
 8014314:	e757      	b.n	80141c6 <mc_canned_drill+0x92>
    memcpy(target, position, sizeof(float) * N_AXIS);
 8014316:	6839      	ldr	r1, [r7, #0]
 8014318:	687a      	ldr	r2, [r7, #4]
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	f8ca 1000 	str.w	r1, [sl]
 8014320:	f8ca 2004 	str.w	r2, [sl, #4]
 8014324:	f8ca 3008 	str.w	r3, [sl, #8]
 8014328:	e74d      	b.n	80141c6 <mc_canned_drill+0x92>
 801432a:	bf00      	nop
 801432c:	00000000 	.word	0x00000000
 8014330:	20001bd8 	.word	0x20001bd8
 8014334:	20000ef8 	.word	0x20000ef8

08014338 <mc_probe_cycle>:
}

// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
gc_probe_t mc_probe_cycle (float *target, plan_line_data_t *pl_data, gc_parser_flags_t parser_flags)
{
 8014338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801433c:	b084      	sub	sp, #16
 801433e:	4605      	mov	r5, r0
 8014340:	460f      	mov	r7, r1
 8014342:	4616      	mov	r6, r2
    uint_fast8_t idx = N_AXIS;

    // TODO: Need to update this cycle so it obeys a non-auto cycle start.
    if (state_get() == STATE_CHECK_MODE)
 8014344:	f00a fa80 	bl	801e848 <state_get>
 8014348:	2802      	cmp	r0, #2
 801434a:	f000 8108 	beq.w	801455e <mc_probe_cycle+0x226>
    uint_fast8_t idx = N_AXIS;
 801434e:	2403      	movs	r4, #3
        return GCProbe_CheckMode;

    do {
        idx--;
 8014350:	3c01      	subs	r4, #1
        sys.probe_position[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 8014352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014356:	ed93 0a00 	vldr	s0, [r3]
 801435a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801435e:	4b82      	ldr	r3, [pc, #520]	@ (8014568 <mc_probe_cycle+0x230>)
 8014360:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014364:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8014368:	ee20 0a27 	vmul.f32	s0, s0, s15
 801436c:	f012 ff9e 	bl	80272ac <lroundf>
 8014370:	f104 020e 	add.w	r2, r4, #14
 8014374:	4b7d      	ldr	r3, [pc, #500]	@ (801456c <mc_probe_cycle+0x234>)
 8014376:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    } while(idx);
 801437a:	2c00      	cmp	r4, #0
 801437c:	d1e8      	bne.n	8014350 <mc_probe_cycle+0x18>

    sys.probe_coordsys_id = gc_state.modal.coord_system.id;
 801437e:	4b7c      	ldr	r3, [pc, #496]	@ (8014570 <mc_probe_cycle+0x238>)
 8014380:	7d1a      	ldrb	r2, [r3, #20]
 8014382:	4b7a      	ldr	r3, [pc, #488]	@ (801456c <mc_probe_cycle+0x234>)
 8014384:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

    // Finish all queued commands and empty planner buffer before starting probe cycle.
    if (!protocol_buffer_synchronize())
 8014388:	f003 f9c4 	bl	8017714 <protocol_buffer_synchronize>
 801438c:	4680      	mov	r8, r0
 801438e:	2800      	cmp	r0, #0
 8014390:	f000 80e7 	beq.w	8014562 <mc_probe_cycle+0x22a>
        return GCProbe_Abort; // Return if system reset has been issued.

    // Initialize probing control variables
    sys.flags.probe_succeeded = Off; // Re-initialize probe history before beginning cycle.
 8014394:	4b75      	ldr	r3, [pc, #468]	@ (801456c <mc_probe_cycle+0x234>)
 8014396:	7d9a      	ldrb	r2, [r3, #22]
 8014398:	f36f 0241 	bfc	r2, #1, #1
 801439c:	759a      	strb	r2, [r3, #22]
    hal.probe.configure(parser_flags.probe_is_away, true);
 801439e:	4b75      	ldr	r3, [pc, #468]	@ (8014574 <mc_probe_cycle+0x23c>)
 80143a0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80143a4:	2101      	movs	r1, #1
 80143a6:	f3c6 00c0 	ubfx	r0, r6, #3, #1
 80143aa:	4798      	blx	r3

#if COMPATIBILITY_LEVEL <= 1
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 80143ac:	4b72      	ldr	r3, [pc, #456]	@ (8014578 <mc_probe_cycle+0x240>)
 80143ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80143b2:	b1eb      	cbz	r3, 80143f0 <mc_probe_cycle+0xb8>
 80143b4:	f00a fa48 	bl	801e848 <state_get>
 80143b8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80143bc:	d030      	beq.n	8014420 <mc_probe_cycle+0xe8>
 80143be:	4b6b      	ldr	r3, [pc, #428]	@ (801456c <mc_probe_cycle+0x234>)
 80143c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80143c4:	f013 0f03 	tst.w	r3, #3
 80143c8:	d103      	bne.n	80143d2 <mc_probe_cycle+0x9a>
 80143ca:	f04f 0800 	mov.w	r8, #0
 80143ce:	46c1      	mov	r9, r8
 80143d0:	e011      	b.n	80143f6 <mc_probe_cycle+0xbe>

    if(probe_toolsetter)
        grbl.on_probe_toolsetter(NULL, NULL, at_g59_3 = system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 80143d2:	4b69      	ldr	r3, [pc, #420]	@ (8014578 <mc_probe_cycle+0x240>)
 80143d4:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80143d8:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80143dc:	2008      	movs	r0, #8
 80143de:	f00d f96b 	bl	80216b8 <system_xy_at_fixture>
 80143e2:	4681      	mov	r9, r0
 80143e4:	2301      	movs	r3, #1
 80143e6:	4602      	mov	r2, r0
 80143e8:	2100      	movs	r1, #0
 80143ea:	4608      	mov	r0, r1
 80143ec:	47a0      	blx	r4
 80143ee:	e002      	b.n	80143f6 <mc_probe_cycle+0xbe>
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 80143f0:	f04f 0800 	mov.w	r8, #0
 80143f4:	46c1      	mov	r9, r8
#endif

    // After syncing, check if probe is already triggered or not connected. If so, halt and issue alarm.
    // NOTE: This probe initialization error applies to all probing cycles.
    probe_state_t probe = hal.probe.get_state();
 80143f6:	4b5f      	ldr	r3, [pc, #380]	@ (8014574 <mc_probe_cycle+0x23c>)
 80143f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80143fc:	4798      	blx	r3
    if (probe.triggered || !probe.connected) { // Check probe state.
 80143fe:	f000 0403 	and.w	r4, r0, #3
 8014402:	2c02      	cmp	r4, #2
 8014404:	d110      	bne.n	8014428 <mc_probe_cycle+0xf0>
        protocol_execute_realtime();
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
        return GCProbe_FailInit; // Nothing else to do but bail.
    }

    if(grbl.on_probe_start) {
 8014406:	4b5c      	ldr	r3, [pc, #368]	@ (8014578 <mc_probe_cycle+0x240>)
 8014408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801440c:	2b00      	cmp	r3, #0
 801440e:	d040      	beq.n	8014492 <mc_probe_cycle+0x15a>

        uint_fast8_t idx = N_AXIS;
        axes_signals_t axes = {0};
 8014410:	f04f 0a00 	mov.w	sl, #0
        coord_data_t position;

        system_convert_array_steps_to_mpos(position.values, sys.position);
 8014414:	4959      	ldr	r1, [pc, #356]	@ (801457c <mc_probe_cycle+0x244>)
 8014416:	a801      	add	r0, sp, #4
 8014418:	f00d f930 	bl	802167c <system_convert_array_steps_to_mpos>
        uint_fast8_t idx = N_AXIS;
 801441c:	2303      	movs	r3, #3
 801441e:	e015      	b.n	801444c <mc_probe_cycle+0x114>
    bool at_g59_3 = false, probe_toolsetter = grbl.on_probe_toolsetter != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 8014420:	f04f 0800 	mov.w	r8, #0
 8014424:	46c1      	mov	r9, r8
 8014426:	e7e6      	b.n	80143f6 <mc_probe_cycle+0xbe>
        system_set_exec_alarm(Alarm_ProbeFailInitial);
 8014428:	4c52      	ldr	r4, [pc, #328]	@ (8014574 <mc_probe_cycle+0x23c>)
 801442a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801442c:	2104      	movs	r1, #4
 801442e:	4854      	ldr	r0, [pc, #336]	@ (8014580 <mc_probe_cycle+0x248>)
 8014430:	4798      	blx	r3
        protocol_execute_realtime();
 8014432:	f002 fea1 	bl	8017178 <protocol_execute_realtime>
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
 8014436:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 801443a:	2100      	movs	r1, #0
 801443c:	4608      	mov	r0, r1
 801443e:	4798      	blx	r3
        return GCProbe_FailInit; // Nothing else to do but bail.
 8014440:	2402      	movs	r4, #2
    if(grbl.on_probe_completed)
        grbl.on_probe_completed();

    // Successful probe cycle or Failed to trigger probe within travel. With or without error.
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
}
 8014442:	4620      	mov	r0, r4
 8014444:	b004      	add	sp, #16
 8014446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } while(idx);
 801444a:	b1db      	cbz	r3, 8014484 <mc_probe_cycle+0x14c>
            idx--;
 801444c:	3b01      	subs	r3, #1
            if(fabsf(target[idx] - position.values[idx]) > TOLERANCE_EQUAL)
 801444e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8014452:	edd2 7a00 	vldr	s15, [r2]
 8014456:	aa04      	add	r2, sp, #16
 8014458:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801445c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8014460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014464:	eef0 7ae7 	vabs.f32	s15, s15
 8014468:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8014584 <mc_probe_cycle+0x24c>
 801446c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014474:	dde9      	ble.n	801444a <mc_probe_cycle+0x112>
                bit_true(axes.mask, bit(idx));
 8014476:	fa5f fa8a 	uxtb.w	sl, sl
 801447a:	2201      	movs	r2, #1
 801447c:	409a      	lsls	r2, r3
 801447e:	ea4a 0a02 	orr.w	sl, sl, r2
 8014482:	e7e2      	b.n	801444a <mc_probe_cycle+0x112>
        grbl.on_probe_start(axes, target, pl_data);
 8014484:	4b3c      	ldr	r3, [pc, #240]	@ (8014578 <mc_probe_cycle+0x240>)
 8014486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801448a:	463a      	mov	r2, r7
 801448c:	4629      	mov	r1, r5
 801448e:	4650      	mov	r0, sl
 8014490:	4798      	blx	r3
    if(!mc_line(target, pl_data))
 8014492:	4639      	mov	r1, r7
 8014494:	4628      	mov	r0, r5
 8014496:	f7ff f841 	bl	801351c <mc_line>
 801449a:	2800      	cmp	r0, #0
 801449c:	d0d1      	beq.n	8014442 <mc_probe_cycle+0x10a>
    sys.probing_state = Probing_Active;
 801449e:	4833      	ldr	r0, [pc, #204]	@ (801456c <mc_probe_cycle+0x234>)
 80144a0:	2301      	movs	r3, #1
 80144a2:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    system_set_exec_state_flag(EXEC_CYCLE_START);
 80144a6:	4b33      	ldr	r3, [pc, #204]	@ (8014574 <mc_probe_cycle+0x23c>)
 80144a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80144aa:	2102      	movs	r1, #2
 80144ac:	3048      	adds	r0, #72	@ 0x48
 80144ae:	4798      	blx	r3
        if(!protocol_execute_realtime()) // Check for system abort
 80144b0:	f002 fe62 	bl	8017178 <protocol_execute_realtime>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	d0c4      	beq.n	8014442 <mc_probe_cycle+0x10a>
    } while (!(state_get() == STATE_IDLE || state_get() == STATE_TOOL_CHANGE));
 80144b8:	f00a f9c6 	bl	801e848 <state_get>
 80144bc:	b120      	cbz	r0, 80144c8 <mc_probe_cycle+0x190>
 80144be:	f00a f9c3 	bl	801e848 <state_get>
 80144c2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80144c6:	d1f3      	bne.n	80144b0 <mc_probe_cycle+0x178>
    if(sys.probing_state == Probing_Active) {
 80144c8:	4b28      	ldr	r3, [pc, #160]	@ (801456c <mc_probe_cycle+0x234>)
 80144ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80144ce:	b2db      	uxtb	r3, r3
 80144d0:	2b01      	cmp	r3, #1
 80144d2:	d02f      	beq.n	8014534 <mc_probe_cycle+0x1fc>
        sys.flags.probe_succeeded = On; // Indicate to system the probing cycle completed successfully.
 80144d4:	4a25      	ldr	r2, [pc, #148]	@ (801456c <mc_probe_cycle+0x234>)
 80144d6:	7d93      	ldrb	r3, [r2, #22]
 80144d8:	f043 0302 	orr.w	r3, r3, #2
 80144dc:	7593      	strb	r3, [r2, #22]
    sys.probing_state = Probing_Off;    // Ensure probe state monitor is disabled.
 80144de:	2000      	movs	r0, #0
 80144e0:	4b22      	ldr	r3, [pc, #136]	@ (801456c <mc_probe_cycle+0x234>)
 80144e2:	f883 0044 	strb.w	r0, [r3, #68]	@ 0x44
    hal.probe.configure(false, false);  // Re-initialize invert mask.
 80144e6:	4b23      	ldr	r3, [pc, #140]	@ (8014574 <mc_probe_cycle+0x23c>)
 80144e8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80144ec:	4601      	mov	r1, r0
 80144ee:	4798      	blx	r3
    protocol_execute_realtime();        // Check and execute run-time commands
 80144f0:	f002 fe42 	bl	8017178 <protocol_execute_realtime>
    if(probe_toolsetter)
 80144f4:	f1b8 0f00 	cmp.w	r8, #0
 80144f8:	d007      	beq.n	801450a <mc_probe_cycle+0x1d2>
        grbl.on_probe_toolsetter(NULL, NULL, at_g59_3, false);
 80144fa:	4b1f      	ldr	r3, [pc, #124]	@ (8014578 <mc_probe_cycle+0x240>)
 80144fc:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8014500:	2300      	movs	r3, #0
 8014502:	464a      	mov	r2, r9
 8014504:	4619      	mov	r1, r3
 8014506:	4618      	mov	r0, r3
 8014508:	47a0      	blx	r4
    st_reset();             // Reset step segment buffer.
 801450a:	f00b f881 	bl	801f610 <st_reset>
    plan_reset();           // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 801450e:	f001 fdc3 	bl	8016098 <plan_reset>
    plan_sync_position();   // Sync planner position to current machine position.
 8014512:	f002 f8ef 	bl	80166f4 <plan_sync_position>
    if(settings.status_report.probe_coordinates)
 8014516:	4b14      	ldr	r3, [pc, #80]	@ (8014568 <mc_probe_cycle+0x230>)
 8014518:	f993 30fc 	ldrsb.w	r3, [r3, #252]	@ 0xfc
 801451c:	2b00      	cmp	r3, #0
 801451e:	db1b      	blt.n	8014558 <mc_probe_cycle+0x220>
    if(grbl.on_probe_completed)
 8014520:	4b15      	ldr	r3, [pc, #84]	@ (8014578 <mc_probe_cycle+0x240>)
 8014522:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014526:	b103      	cbz	r3, 801452a <mc_probe_cycle+0x1f2>
        grbl.on_probe_completed();
 8014528:	4798      	blx	r3
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
 801452a:	4b10      	ldr	r3, [pc, #64]	@ (801456c <mc_probe_cycle+0x234>)
 801452c:	7d9c      	ldrb	r4, [r3, #22]
 801452e:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8014532:	e786      	b.n	8014442 <mc_probe_cycle+0x10a>
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 8014534:	4b0d      	ldr	r3, [pc, #52]	@ (801456c <mc_probe_cycle+0x234>)
 8014536:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 801453a:	3388      	adds	r3, #136	@ 0x88
 801453c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        if(!parser_flags.probe_is_no_error)
 8014544:	f016 0f10 	tst.w	r6, #16
 8014548:	d1c9      	bne.n	80144de <mc_probe_cycle+0x1a6>
            system_set_exec_alarm(Alarm_ProbeFailContact);
 801454a:	4b0a      	ldr	r3, [pc, #40]	@ (8014574 <mc_probe_cycle+0x23c>)
 801454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801454e:	2105      	movs	r1, #5
 8014550:	f104 0014 	add.w	r0, r4, #20
 8014554:	4798      	blx	r3
 8014556:	e7c2      	b.n	80144de <mc_probe_cycle+0x1a6>
        report_probe_parameters();
 8014558:	f004 fe66 	bl	8019228 <report_probe_parameters>
 801455c:	e7e0      	b.n	8014520 <mc_probe_cycle+0x1e8>
        return GCProbe_CheckMode;
 801455e:	2400      	movs	r4, #0
 8014560:	e76f      	b.n	8014442 <mc_probe_cycle+0x10a>
        return GCProbe_Abort; // Return if system reset has been issued.
 8014562:	2402      	movs	r4, #2
 8014564:	e76d      	b.n	8014442 <mc_probe_cycle+0x10a>
 8014566:	bf00      	nop
 8014568:	20001bd8 	.word	0x20001bd8
 801456c:	200014a0 	.word	0x200014a0
 8014570:	20000ef8 	.word	0x20000ef8
 8014574:	200011c0 	.word	0x200011c0
 8014578:	200013a8 	.word	0x200013a8
 801457c:	20001528 	.word	0x20001528
 8014580:	200014ec 	.word	0x200014ec
 8014584:	38d1b717 	.word	0x38d1b717

08014588 <mc_parking_motion>:


// Plans and executes the single special motion case for parking. Independent of main planner buffer.
// NOTE: Uses the always free planner ring buffer head to store motion parameters for execution.
bool mc_parking_motion (float *parking_target, plan_line_data_t *pl_data)
{
 8014588:	b510      	push	{r4, lr}
    bool ok;

    if (sys.abort)
 801458a:	4b0d      	ldr	r3, [pc, #52]	@ (80145c0 <mc_parking_motion+0x38>)
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	b113      	cbz	r3, 8014596 <mc_parking_motion+0xe>
        return false; // Block during abort.
 8014590:	2400      	movs	r4, #0
        st_prep_buffer();
        st_wake_up();
    }

    return ok;
}
 8014592:	4620      	mov	r0, r4
 8014594:	bd10      	pop	{r4, pc}
    if ((ok = plan_buffer_line(parking_target, pl_data))) {
 8014596:	f001 fee7 	bl	8016368 <plan_buffer_line>
 801459a:	4604      	mov	r4, r0
 801459c:	2800      	cmp	r0, #0
 801459e:	d0f8      	beq.n	8014592 <mc_parking_motion+0xa>
        sys.step_control.execute_sys_motion = On;
 80145a0:	4b07      	ldr	r3, [pc, #28]	@ (80145c0 <mc_parking_motion+0x38>)
 80145a2:	7e1a      	ldrb	r2, [r3, #24]
 80145a4:	f042 0204 	orr.w	r2, r2, #4
 80145a8:	761a      	strb	r2, [r3, #24]
        sys.step_control.end_motion = Off;  // Allow parking motion to execute, if feed hold is active.
 80145aa:	b2d2      	uxtb	r2, r2
 80145ac:	f36f 0200 	bfc	r2, #0, #1
 80145b0:	761a      	strb	r2, [r3, #24]
        st_parking_setup_buffer();          // Setup step segment buffer for special parking motion case.
 80145b2:	f00b f8d1 	bl	801f758 <st_parking_setup_buffer>
        st_prep_buffer();
 80145b6:	f00b f955 	bl	801f864 <st_prep_buffer>
        st_wake_up();
 80145ba:	f00a fe61 	bl	801f280 <st_wake_up>
 80145be:	e7e8      	b.n	8014592 <mc_parking_motion+0xa>
 80145c0:	200014a0 	.word	0x200014a0

080145c4 <mc_override_ctrl_update>:

void mc_override_ctrl_update (gc_override_flags_t override_state)
{
 80145c4:	b510      	push	{r4, lr}
 80145c6:	4604      	mov	r4, r0
// Finish all queued commands before altering override control state
    protocol_buffer_synchronize();
 80145c8:	f003 f8a4 	bl	8017714 <protocol_buffer_synchronize>
    if (!sys.abort)
 80145cc:	4b03      	ldr	r3, [pc, #12]	@ (80145dc <mc_override_ctrl_update+0x18>)
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	b913      	cbnz	r3, 80145d8 <mc_override_ctrl_update+0x14>
        sys.override.control = override_state;
 80145d2:	4b02      	ldr	r3, [pc, #8]	@ (80145dc <mc_override_ctrl_update+0x18>)
 80145d4:	f883 4029 	strb.w	r4, [r3, #41]	@ 0x29
}
 80145d8:	bd10      	pop	{r4, pc}
 80145da:	bf00      	nop
 80145dc:	200014a0 	.word	0x200014a0

080145e0 <mc_reset>:
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
ISR_CODE void ISR_FUNC(mc_reset)(void)
{
    // Only this function can set the system reset. Helps prevent multiple kill calls.
    if (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 80145e0:	4b26      	ldr	r3, [pc, #152]	@ (801467c <mc_reset+0x9c>)
 80145e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145e4:	f013 0f20 	tst.w	r3, #32
 80145e8:	d146      	bne.n	8014678 <mc_reset+0x98>
{
 80145ea:	b510      	push	{r4, lr}

        system_set_exec_state_flag(EXEC_RESET);
 80145ec:	4c24      	ldr	r4, [pc, #144]	@ (8014680 <mc_reset+0xa0>)
 80145ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80145f0:	2120      	movs	r1, #32
 80145f2:	4824      	ldr	r0, [pc, #144]	@ (8014684 <mc_reset+0xa4>)
 80145f4:	4798      	blx	r3

        if(hal.stream.suspend_read)
 80145f6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 80145fa:	b10b      	cbz	r3, 8014600 <mc_reset+0x20>
            hal.stream.suspend_read(false);
 80145fc:	2000      	movs	r0, #0
 80145fe:	4798      	blx	r3

        // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
        // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
        // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
        // violated, by which, all bets are off.
        if ((state_get() & (STATE_CYCLE|STATE_HOMING|STATE_JOG)) || sys.step_control.execute_hold || sys.step_control.execute_sys_motion) {
 8014600:	f00a f922 	bl	801e848 <state_get>
 8014604:	f010 0f2c 	tst.w	r0, #44	@ 0x2c
 8014608:	d104      	bne.n	8014614 <mc_reset+0x34>
 801460a:	4b1c      	ldr	r3, [pc, #112]	@ (801467c <mc_reset+0x9c>)
 801460c:	7e1b      	ldrb	r3, [r3, #24]
 801460e:	f013 0f06 	tst.w	r3, #6
 8014612:	d00d      	beq.n	8014630 <mc_reset+0x50>

            sys.position_lost = true;
 8014614:	4b19      	ldr	r3, [pc, #100]	@ (801467c <mc_reset+0x9c>)
 8014616:	2201      	movs	r2, #1
 8014618:	70da      	strb	r2, [r3, #3]

            if (state_get() != STATE_HOMING)
 801461a:	f00a f915 	bl	801e848 <state_get>
 801461e:	2804      	cmp	r0, #4
 8014620:	d017      	beq.n	8014652 <mc_reset+0x72>
                system_set_exec_alarm(Alarm_AbortCycle);
 8014622:	4b17      	ldr	r3, [pc, #92]	@ (8014680 <mc_reset+0xa0>)
 8014624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014626:	2103      	movs	r1, #3
 8014628:	4817      	ldr	r0, [pc, #92]	@ (8014688 <mc_reset+0xa8>)
 801462a:	4798      	blx	r3
            else if (!sys.rt_exec_alarm)
                system_set_exec_alarm(Alarm_HomingFailReset);

            st_go_idle(); // Force kill steppers. Position has likely been lost.
 801462c:	f00a fe36 	bl	801f29c <st_go_idle>
        }

        control_signals_t signals = hal.control.get_state();
 8014630:	4b13      	ldr	r3, [pc, #76]	@ (8014680 <mc_reset+0xa0>)
 8014632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014634:	4798      	blx	r3

        if(signals.e_stop)
 8014636:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801463a:	d014      	beq.n	8014666 <mc_reset+0x86>
            system_set_exec_alarm(Alarm_EStop);
 801463c:	4b10      	ldr	r3, [pc, #64]	@ (8014680 <mc_reset+0xa0>)
 801463e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014640:	210a      	movs	r1, #10
 8014642:	4811      	ldr	r0, [pc, #68]	@ (8014688 <mc_reset+0xa8>)
 8014644:	4798      	blx	r3
        else if(signals.motor_fault)
            system_set_exec_alarm(Alarm_MotorFault);

        if(grbl.on_reset)
 8014646:	4b11      	ldr	r3, [pc, #68]	@ (801468c <mc_reset+0xac>)
 8014648:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801464c:	b103      	cbz	r3, 8014650 <mc_reset+0x70>
            grbl.on_reset();
 801464e:	4798      	blx	r3
    }
}
 8014650:	bd10      	pop	{r4, pc}
            else if (!sys.rt_exec_alarm)
 8014652:	4b0a      	ldr	r3, [pc, #40]	@ (801467c <mc_reset+0x9c>)
 8014654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014656:	2b00      	cmp	r3, #0
 8014658:	d1e8      	bne.n	801462c <mc_reset+0x4c>
                system_set_exec_alarm(Alarm_HomingFailReset);
 801465a:	4b09      	ldr	r3, [pc, #36]	@ (8014680 <mc_reset+0xa0>)
 801465c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801465e:	2106      	movs	r1, #6
 8014660:	4809      	ldr	r0, [pc, #36]	@ (8014688 <mc_reset+0xa8>)
 8014662:	4798      	blx	r3
 8014664:	e7e2      	b.n	801462c <mc_reset+0x4c>
        else if(signals.motor_fault)
 8014666:	f410 7f80 	tst.w	r0, #256	@ 0x100
 801466a:	d0ec      	beq.n	8014646 <mc_reset+0x66>
            system_set_exec_alarm(Alarm_MotorFault);
 801466c:	4b04      	ldr	r3, [pc, #16]	@ (8014680 <mc_reset+0xa0>)
 801466e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014670:	2111      	movs	r1, #17
 8014672:	4805      	ldr	r0, [pc, #20]	@ (8014688 <mc_reset+0xa8>)
 8014674:	4798      	blx	r3
 8014676:	e7e6      	b.n	8014646 <mc_reset+0x66>
 8014678:	4770      	bx	lr
 801467a:	bf00      	nop
 801467c:	200014a0 	.word	0x200014a0
 8014680:	200011c0 	.word	0x200011c0
 8014684:	200014e8 	.word	0x200014e8
 8014688:	200014ec 	.word	0x200014ec
 801468c:	200013a8 	.word	0x200013a8

08014690 <mc_homing_cycle>:
{
 8014690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014692:	b083      	sub	sp, #12
 8014694:	4604      	mov	r4, r0
    bool home_all = cycle.mask == 0;
 8014696:	b2c7      	uxtb	r7, r0
    memset(&sys.last_event.limits, 0, sizeof(limit_signals_t));
 8014698:	4b7c      	ldr	r3, [pc, #496]	@ (801488c <mc_homing_cycle+0x1fc>)
 801469a:	2200      	movs	r2, #0
 801469c:	601a      	str	r2, [r3, #0]
    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 801469e:	4b7c      	ldr	r3, [pc, #496]	@ (8014890 <mc_homing_cycle+0x200>)
 80146a0:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80146a4:	f013 0f10 	tst.w	r3, #16
 80146a8:	d007      	beq.n	80146ba <mc_homing_cycle+0x2a>
 80146aa:	2f00      	cmp	r7, #0
 80146ac:	f040 8091 	bne.w	80147d2 <mc_homing_cycle+0x142>
 80146b0:	4b78      	ldr	r3, [pc, #480]	@ (8014894 <mc_homing_cycle+0x204>)
 80146b2:	7e9b      	ldrb	r3, [r3, #26]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	f000 8091 	beq.w	80147dc <mc_homing_cycle+0x14c>
        if(settings.homing.seek_rate <= 0.0f)
 80146ba:	4b75      	ldr	r3, [pc, #468]	@ (8014890 <mc_homing_cycle+0x200>)
 80146bc:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 80146c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80146c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c8:	f240 80b5 	bls.w	8014836 <mc_homing_cycle+0x1a6>
        if (settings.limits.flags.two_switches && hal.home_cap.a.mask == 0 && limit_signals_merge(hal.limits.get_state()).value) {
 80146cc:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 80146d0:	f013 0f10 	tst.w	r3, #16
 80146d4:	d00d      	beq.n	80146f2 <mc_homing_cycle+0x62>
 80146d6:	4b70      	ldr	r3, [pc, #448]	@ (8014898 <mc_homing_cycle+0x208>)
 80146d8:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 80146dc:	b94b      	cbnz	r3, 80146f2 <mc_homing_cycle+0x62>
 80146de:	4b6e      	ldr	r3, [pc, #440]	@ (8014898 <mc_homing_cycle+0x208>)
 80146e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80146e2:	4798      	blx	r3
 80146e4:	9000      	str	r0, [sp, #0]
 80146e6:	f7fe fa4d 	bl	8012b84 <limit_signals_merge>
 80146ea:	b2c0      	uxtb	r0, r0
 80146ec:	2800      	cmp	r0, #0
 80146ee:	f040 8085 	bne.w	80147fc <mc_homing_cycle+0x16c>
        state_set(STATE_HOMING);                        // Set homing system state.
 80146f2:	2004      	movs	r0, #4
 80146f4:	f00a f8ae 	bl	801e854 <state_set>
        system_set_exec_state_flag(EXEC_STATUS_REPORT); // Force a status report and
 80146f8:	4b67      	ldr	r3, [pc, #412]	@ (8014898 <mc_homing_cycle+0x208>)
 80146fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146fc:	2101      	movs	r1, #1
 80146fe:	4867      	ldr	r0, [pc, #412]	@ (801489c <mc_homing_cycle+0x20c>)
 8014700:	4798      	blx	r3
        delay_sec(0.1f, DelayMode_Dwell);               // delay a bit to get it sent (or perhaps wait a bit for a request?)
 8014702:	2000      	movs	r0, #0
 8014704:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 80148a0 <mc_homing_cycle+0x210>
 8014708:	f000 ff6c 	bl	80155e4 <delay_sec>
        if(spindle_is_on())
 801470c:	f009 fe30 	bl	801e370 <spindle_is_on>
 8014710:	2800      	cmp	r0, #0
 8014712:	d17c      	bne.n	801480e <mc_homing_cycle+0x17e>
        if(hal.coolant.get_state().mask)
 8014714:	4b60      	ldr	r3, [pc, #384]	@ (8014898 <mc_homing_cycle+0x208>)
 8014716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014718:	4798      	blx	r3
 801471a:	b2c0      	uxtb	r0, r0
 801471c:	2800      	cmp	r0, #0
 801471e:	d179      	bne.n	8014814 <mc_homing_cycle+0x184>
        if (!home_all) // Perform homing cycle based on mask.
 8014720:	2f00      	cmp	r7, #0
 8014722:	d17c      	bne.n	801481e <mc_homing_cycle+0x18e>
            sys.homed.mask &= ~sys.homing.mask;
 8014724:	4a5b      	ldr	r2, [pc, #364]	@ (8014894 <mc_homing_cycle+0x204>)
 8014726:	f892 1054 	ldrb.w	r1, [r2, #84]	@ 0x54
 801472a:	7e93      	ldrb	r3, [r2, #26]
 801472c:	43db      	mvns	r3, r3
 801472e:	b25b      	sxtb	r3, r3
 8014730:	400b      	ands	r3, r1
 8014732:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
    status_code_t homed_status = Status_OK;
 8014736:	463e      	mov	r6, r7
            uint_fast8_t idx = 0;
 8014738:	2500      	movs	r5, #0
                if(settings.homing.cycle[idx].mask) {
 801473a:	4b55      	ldr	r3, [pc, #340]	@ (8014890 <mc_homing_cycle+0x200>)
 801473c:	442b      	add	r3, r5
 801473e:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
 8014742:	2800      	cmp	r0, #0
 8014744:	d170      	bne.n	8014828 <mc_homing_cycle+0x198>
            } while(++idx < N_AXIS);
 8014746:	3501      	adds	r5, #1
 8014748:	2d02      	cmp	r5, #2
 801474a:	d9f6      	bls.n	801473a <mc_homing_cycle+0xaa>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 801474c:	4b52      	ldr	r3, [pc, #328]	@ (8014898 <mc_homing_cycle+0x208>)
 801474e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014750:	4a4f      	ldr	r2, [pc, #316]	@ (8014890 <mc_homing_cycle+0x200>)
 8014752:	f892 0124 	ldrb.w	r0, [r2, #292]	@ 0x124
 8014756:	f04f 0100 	mov.w	r1, #0
 801475a:	f000 0001 	and.w	r0, r0, #1
 801475e:	4798      	blx	r3
    if(cycle.mask) {
 8014760:	b2e3      	uxtb	r3, r4
 8014762:	b193      	cbz	r3, 801478a <mc_homing_cycle+0xfa>
        if(!protocol_execute_realtime()) {  // Check for reset and set system abort.
 8014764:	f002 fd08 	bl	8017178 <protocol_execute_realtime>
 8014768:	2800      	cmp	r0, #0
 801476a:	d066      	beq.n	801483a <mc_homing_cycle+0x1aa>
        if(homed_status != Status_OK) {
 801476c:	2e00      	cmp	r6, #0
 801476e:	d16d      	bne.n	801484c <mc_homing_cycle+0x1bc>
        if(home_all && settings.homing.flags.manual)
 8014770:	b92f      	cbnz	r7, 801477e <mc_homing_cycle+0xee>
 8014772:	4b47      	ldr	r3, [pc, #284]	@ (8014890 <mc_homing_cycle+0x200>)
 8014774:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8014778:	f013 0f10 	tst.w	r3, #16
 801477c:	d177      	bne.n	801486e <mc_homing_cycle+0x1de>
        sync_position();
 801477e:	f001 ffb9 	bl	80166f4 <plan_sync_position>
 8014782:	4948      	ldr	r1, [pc, #288]	@ (80148a4 <mc_homing_cycle+0x214>)
 8014784:	4848      	ldr	r0, [pc, #288]	@ (80148a8 <mc_homing_cycle+0x218>)
 8014786:	f00c ff79 	bl	802167c <system_convert_array_steps_to_mpos>
    system_add_rt_report(Report_Homed);
 801478a:	2004      	movs	r0, #4
 801478c:	f00d f81a 	bl	80217c4 <system_add_rt_report>
    homed_status = settings.limits.flags.hard_enabled &&
 8014790:	4b3f      	ldr	r3, [pc, #252]	@ (8014890 <mc_homing_cycle+0x200>)
 8014792:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8014796:	f003 0305 	and.w	r3, r3, #5
                    : Status_OK;
 801479a:	2b05      	cmp	r3, #5
 801479c:	d10a      	bne.n	80147b4 <mc_homing_cycle+0x124>
                     (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)
 801479e:	4b3e      	ldr	r3, [pc, #248]	@ (8014898 <mc_homing_cycle+0x208>)
 80147a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80147a2:	4798      	blx	r3
 80147a4:	9001      	str	r0, [sp, #4]
 80147a6:	f7fe f9ed 	bl	8012b84 <limit_signals_merge>
 80147aa:	4b3a      	ldr	r3, [pc, #232]	@ (8014894 <mc_homing_cycle+0x204>)
 80147ac:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
                    settings.limits.flags.check_at_init &&
 80147b0:	4203      	tst	r3, r0
 80147b2:	d169      	bne.n	8014888 <mc_homing_cycle+0x1f8>
        limits_set_work_envelope();
 80147b4:	f7fe fa16 	bl	8012be4 <limits_set_work_envelope>
                    : Status_OK;
 80147b8:	2600      	movs	r6, #0
    if(grbl.on_homing_completed)
 80147ba:	4b3c      	ldr	r3, [pc, #240]	@ (80148ac <mc_homing_cycle+0x21c>)
 80147bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80147c0:	b123      	cbz	r3, 80147cc <mc_homing_cycle+0x13c>
        grbl.on_homing_completed(cycle, homed_status == Status_OK);
 80147c2:	fab6 f186 	clz	r1, r6
 80147c6:	0949      	lsrs	r1, r1, #5
 80147c8:	4620      	mov	r0, r4
 80147ca:	4798      	blx	r3
}
 80147cc:	4630      	mov	r0, r6
 80147ce:	b003      	add	sp, #12
 80147d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 80147d2:	4b30      	ldr	r3, [pc, #192]	@ (8014894 <mc_homing_cycle+0x204>)
 80147d4:	7e9b      	ldrb	r3, [r3, #26]
 80147d6:	421f      	tst	r7, r3
 80147d8:	f47f af6f 	bne.w	80146ba <mc_homing_cycle+0x2a>
        if(home_all)
 80147dc:	b90f      	cbnz	r7, 80147e2 <mc_homing_cycle+0x152>
            cycle.mask = AXES_BITMASK;
 80147de:	f04f 0407 	mov.w	r4, #7
        sys.homed.mask |= cycle.mask;
 80147e2:	4a2c      	ldr	r2, [pc, #176]	@ (8014894 <mc_homing_cycle+0x204>)
 80147e4:	f892 3054 	ldrb.w	r3, [r2, #84]	@ 0x54
 80147e8:	b2e1      	uxtb	r1, r4
 80147ea:	430b      	orrs	r3, r1
 80147ec:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
        limits_set_machine_positions(cycle, false);
 80147f0:	2100      	movs	r1, #0
 80147f2:	4620      	mov	r0, r4
 80147f4:	f7fe fa80 	bl	8012cf8 <limits_set_machine_positions>
    status_code_t homed_status = Status_OK;
 80147f8:	2600      	movs	r6, #0
        limits_set_machine_positions(cycle, false);
 80147fa:	e7b1      	b.n	8014760 <mc_homing_cycle+0xd0>
            mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80147fc:	f7ff fef0 	bl	80145e0 <mc_reset>
            system_set_exec_alarm(Alarm_HardLimit);
 8014800:	4b25      	ldr	r3, [pc, #148]	@ (8014898 <mc_homing_cycle+0x208>)
 8014802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014804:	2101      	movs	r1, #1
 8014806:	482a      	ldr	r0, [pc, #168]	@ (80148b0 <mc_homing_cycle+0x220>)
 8014808:	4798      	blx	r3
            return Status_Unhandled;
 801480a:	2654      	movs	r6, #84	@ 0x54
 801480c:	e7de      	b.n	80147cc <mc_homing_cycle+0x13c>
            gc_spindle_off();
 801480e:	f7f8 fb7b 	bl	800cf08 <gc_spindle_off>
 8014812:	e77f      	b.n	8014714 <mc_homing_cycle+0x84>
            gc_coolant((coolant_state_t){0});
 8014814:	f04f 0000 	mov.w	r0, #0
 8014818:	f7f8 fb84 	bl	800cf24 <gc_coolant>
 801481c:	e780      	b.n	8014720 <mc_homing_cycle+0x90>
            homed_status = limits_go_home(cycle);
 801481e:	4620      	mov	r0, r4
 8014820:	f7fe fd4a 	bl	80132b8 <limits_go_home>
 8014824:	4606      	mov	r6, r0
 8014826:	e791      	b.n	801474c <mc_homing_cycle+0xbc>
                    cycle.mask = settings.homing.cycle[idx].mask;
 8014828:	4604      	mov	r4, r0
                    if((homed_status = limits_go_home(cycle)) != Status_OK)
 801482a:	f7fe fd45 	bl	80132b8 <limits_go_home>
 801482e:	4606      	mov	r6, r0
 8014830:	2800      	cmp	r0, #0
 8014832:	d088      	beq.n	8014746 <mc_homing_cycle+0xb6>
 8014834:	e78a      	b.n	801474c <mc_homing_cycle+0xbc>
            return Status_HomingDisabled;
 8014836:	2605      	movs	r6, #5
 8014838:	e7c8      	b.n	80147cc <mc_homing_cycle+0x13c>
            if(grbl.on_homing_completed)
 801483a:	4b1c      	ldr	r3, [pc, #112]	@ (80148ac <mc_homing_cycle+0x21c>)
 801483c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014840:	b113      	cbz	r3, 8014848 <mc_homing_cycle+0x1b8>
                grbl.on_homing_completed(cycle, false);
 8014842:	2100      	movs	r1, #0
 8014844:	4620      	mov	r0, r4
 8014846:	4798      	blx	r3
            return Status_Unhandled;        // Did not complete. Alarm state set by mc_alarm.
 8014848:	2654      	movs	r6, #84	@ 0x54
 801484a:	e7bf      	b.n	80147cc <mc_homing_cycle+0x13c>
            if(state_get() == STATE_HOMING)
 801484c:	f009 fffc 	bl	801e848 <state_get>
 8014850:	2804      	cmp	r0, #4
 8014852:	d008      	beq.n	8014866 <mc_homing_cycle+0x1d6>
            if(grbl.on_homing_completed)
 8014854:	4b15      	ldr	r3, [pc, #84]	@ (80148ac <mc_homing_cycle+0x21c>)
 8014856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801485a:	2b00      	cmp	r3, #0
 801485c:	d0b6      	beq.n	80147cc <mc_homing_cycle+0x13c>
                grbl.on_homing_completed(cycle, false);
 801485e:	2100      	movs	r1, #0
 8014860:	4620      	mov	r0, r4
 8014862:	4798      	blx	r3
            return homed_status;
 8014864:	e7b2      	b.n	80147cc <mc_homing_cycle+0x13c>
                state_set(STATE_IDLE);
 8014866:	2000      	movs	r0, #0
 8014868:	f009 fff4 	bl	801e854 <state_set>
 801486c:	e7f2      	b.n	8014854 <mc_homing_cycle+0x1c4>
            cycle.mask = AXES_BITMASK & ~sys.homing.mask;
 801486e:	4b09      	ldr	r3, [pc, #36]	@ (8014894 <mc_homing_cycle+0x204>)
 8014870:	7e98      	ldrb	r0, [r3, #26]
 8014872:	43c0      	mvns	r0, r0
 8014874:	f000 0007 	and.w	r0, r0, #7
 8014878:	4604      	mov	r4, r0
            sys.homed.mask = AXES_BITMASK;
 801487a:	2207      	movs	r2, #7
 801487c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            limits_set_machine_positions(cycle, false);
 8014880:	2100      	movs	r1, #0
 8014882:	f7fe fa39 	bl	8012cf8 <limits_set_machine_positions>
 8014886:	e77a      	b.n	801477e <mc_homing_cycle+0xee>
                    : Status_OK;
 8014888:	262d      	movs	r6, #45	@ 0x2d
 801488a:	e796      	b.n	80147ba <mc_homing_cycle+0x12a>
 801488c:	20001522 	.word	0x20001522
 8014890:	20001bd8 	.word	0x20001bd8
 8014894:	200014a0 	.word	0x200014a0
 8014898:	200011c0 	.word	0x200011c0
 801489c:	200014e8 	.word	0x200014e8
 80148a0:	3dcccccd 	.word	0x3dcccccd
 80148a4:	20001528 	.word	0x20001528
 80148a8:	20000f60 	.word	0x20000f60
 80148ac:	200013a8 	.word	0x200013a8
 80148b0:	200014ec 	.word	0x200014ec

080148b4 <probe_result>:
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
}

static float probe_result (ngc_param_id_t id)
{
    return sys.flags.probe_succeeded ? 1.0f : 0.0f;
 80148b4:	4b05      	ldr	r3, [pc, #20]	@ (80148cc <probe_result+0x18>)
 80148b6:	7d9b      	ldrb	r3, [r3, #22]
 80148b8:	f013 0f02 	tst.w	r3, #2
 80148bc:	d002      	beq.n	80148c4 <probe_result+0x10>
 80148be:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80148c2:	4770      	bx	lr
 80148c4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80148d0 <probe_result+0x1c>
}
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop
 80148cc:	200014a0 	.word	0x200014a0
 80148d0:	00000000 	.word	0x00000000

080148d4 <m66_result>:
    return axis <= N_AXIS ? sys.home_position[axis - 1] : 0.0f;
}
*/
static float m66_result (ngc_param_id_t id)
{
    return (float)sys.var5399;
 80148d4:	4b02      	ldr	r3, [pc, #8]	@ (80148e0 <m66_result+0xc>)
 80148d6:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
}
 80148da:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80148de:	4770      	bx	lr
 80148e0:	200014a0 	.word	0x200014a0

080148e4 <tool_number>:

static float tool_number (ngc_param_id_t id)
{
    return (float)gc_state.tool->tool_id;
 80148e4:	4b03      	ldr	r3, [pc, #12]	@ (80148f4 <tool_number+0x10>)
 80148e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80148ea:	ed93 0a04 	vldr	s0, [r3, #16]
}
 80148ee:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80148f2:	4770      	bx	lr
 80148f4:	20000ef8 	.word	0x20000ef8

080148f8 <tool_offset>:

static float tool_offset (ngc_param_id_t id)
{
    uint_fast8_t axis = id % 10;
 80148f8:	4b0a      	ldr	r3, [pc, #40]	@ (8014924 <tool_offset+0x2c>)
 80148fa:	fba3 2300 	umull	r2, r3, r3, r0
 80148fe:	08db      	lsrs	r3, r3, #3
 8014900:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014904:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8014908:	b280      	uxth	r0, r0

    return axis <= N_AXIS ? gc_state.tool_length_offset[axis] : 0.0f;
 801490a:	2803      	cmp	r0, #3
 801490c:	d806      	bhi.n	801491c <tool_offset+0x24>
 801490e:	3030      	adds	r0, #48	@ 0x30
 8014910:	4b05      	ldr	r3, [pc, #20]	@ (8014928 <tool_offset+0x30>)
 8014912:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8014916:	ed93 0a01 	vldr	s0, [r3, #4]
 801491a:	4770      	bx	lr
 801491c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 801492c <tool_offset+0x34>
}
 8014920:	4770      	bx	lr
 8014922:	bf00      	nop
 8014924:	cccccccd 	.word	0xcccccccd
 8014928:	20000ef8 	.word	0x20000ef8
 801492c:	00000000 	.word	0x00000000

08014930 <coord_system>:
    return value;
}

static float coord_system (ngc_param_id_t id)
{
    return (float)gc_state.modal.coord_system.id + 1;
 8014930:	4b05      	ldr	r3, [pc, #20]	@ (8014948 <coord_system+0x18>)
 8014932:	7d1b      	ldrb	r3, [r3, #20]
 8014934:	ee00 3a10 	vmov	s0, r3
 8014938:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 801493c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014940:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014944:	4770      	bx	lr
 8014946:	bf00      	nop
 8014948:	20000ef8 	.word	0x20000ef8

0801494c <g92_offset_applied>:
    return value;
}

static float g92_offset_applied (ngc_param_id_t id)
{
    return (float)gc_state.g92_coord_offset_applied;
 801494c:	4b03      	ldr	r3, [pc, #12]	@ (801495c <g92_offset_applied+0x10>)
 801494e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8014952:	ee00 3a10 	vmov	s0, r3
}
 8014956:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801495a:	4770      	bx	lr
 801495c:	20000ef8 	.word	0x20000ef8

08014960 <g92_offset>:

static float g92_offset (ngc_param_id_t id)
{
    uint_fast8_t axis = id % 10;
 8014960:	4b0a      	ldr	r3, [pc, #40]	@ (801498c <g92_offset+0x2c>)
 8014962:	fba3 2300 	umull	r2, r3, r3, r0
 8014966:	08db      	lsrs	r3, r3, #3
 8014968:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801496c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8014970:	b280      	uxth	r0, r0

    return axis <= N_AXIS ? gc_state.g92_coord_offset [axis - 1] : 0.0f;
 8014972:	2803      	cmp	r0, #3
 8014974:	d806      	bhi.n	8014984 <g92_offset+0x24>
 8014976:	302d      	adds	r0, #45	@ 0x2d
 8014978:	4b05      	ldr	r3, [pc, #20]	@ (8014990 <g92_offset+0x30>)
 801497a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801497e:	ed93 0a00 	vldr	s0, [r3]
 8014982:	4770      	bx	lr
 8014984:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8014994 <g92_offset+0x34>
}
 8014988:	4770      	bx	lr
 801498a:	bf00      	nop
 801498c:	cccccccd 	.word	0xcccccccd
 8014990:	20000ef8 	.word	0x20000ef8
 8014994:	00000000 	.word	0x00000000

08014998 <debug_output>:
    return value;
}

static float debug_output (ngc_param_id_t id)
{
    return (float)settings.flags.ngc_debug_out;
 8014998:	4b04      	ldr	r3, [pc, #16]	@ (80149ac <debug_output+0x14>)
 801499a:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 801499e:	f003 0301 	and.w	r3, r3, #1
 80149a2:	ee00 3a10 	vmov	s0, r3
}
 80149a6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80149aa:	4770      	bx	lr
 80149ac:	20001bd8 	.word	0x20001bd8

080149b0 <ngc_name_tolower>:
static char *ngc_name_tolower (char *s)
{
    static char name[NGC_MAX_PARAM_LENGTH + 1];

    uint_fast8_t len = 0;
	char c, *s1 = s, *s2 = name;
 80149b0:	4a0d      	ldr	r2, [pc, #52]	@ (80149e8 <ngc_name_tolower+0x38>)
    uint_fast8_t len = 0;
 80149b2:	2100      	movs	r1, #0

    while((c = *s1++) && len < NGC_MAX_PARAM_LENGTH) {
 80149b4:	e002      	b.n	80149bc <ngc_name_tolower+0xc>
        if(c > ' ') {
            *s2++ = LCAPS(c);
 80149b6:	f802 3b01 	strb.w	r3, [r2], #1
            len++;
 80149ba:	3101      	adds	r1, #1
    while((c = *s1++) && len < NGC_MAX_PARAM_LENGTH) {
 80149bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80149c0:	b16b      	cbz	r3, 80149de <ngc_name_tolower+0x2e>
 80149c2:	2913      	cmp	r1, #19
 80149c4:	d80b      	bhi.n	80149de <ngc_name_tolower+0x2e>
        if(c > ' ') {
 80149c6:	2b20      	cmp	r3, #32
 80149c8:	d9f8      	bls.n	80149bc <ngc_name_tolower+0xc>
            *s2++ = LCAPS(c);
 80149ca:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 80149ce:	fa5f fc8c 	uxtb.w	ip, ip
 80149d2:	f1bc 0f19 	cmp.w	ip, #25
 80149d6:	d8ee      	bhi.n	80149b6 <ngc_name_tolower+0x6>
 80149d8:	f043 0320 	orr.w	r3, r3, #32
 80149dc:	e7eb      	b.n	80149b6 <ngc_name_tolower+0x6>
        }
    }
    *s2 = '\0';
 80149de:	2300      	movs	r3, #0
 80149e0:	7013      	strb	r3, [r2, #0]

	return name;
}
 80149e2:	4801      	ldr	r0, [pc, #4]	@ (80149e8 <ngc_name_tolower+0x38>)
 80149e4:	4770      	bx	lr
 80149e6:	bf00      	nop
 80149e8:	20001628 	.word	0x20001628

080149ec <_relative_pos>:
    if(axis < N_AXIS) {
 80149ec:	2802      	cmp	r0, #2
 80149ee:	d902      	bls.n	80149f6 <_relative_pos+0xa>
        value = 0.0f;
 80149f0:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8014a44 <_relative_pos+0x58>
}
 80149f4:	4770      	bx	lr
{
 80149f6:	b510      	push	{r4, lr}
 80149f8:	ed2d 8b02 	vpush	{d8}
        value = sys.position[axis] / settings.axis[axis].steps_per_mm - gc_get_offset(axis, false);
 80149fc:	f100 0222 	add.w	r2, r0, #34	@ 0x22
 8014a00:	4b11      	ldr	r3, [pc, #68]	@ (8014a48 <_relative_pos+0x5c>)
 8014a02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014a06:	edd3 7a00 	vldr	s15, [r3]
 8014a0a:	4c10      	ldr	r4, [pc, #64]	@ (8014a4c <_relative_pos+0x60>)
 8014a0c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8014a10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014a14:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8014a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a1c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8014a20:	2100      	movs	r1, #0
 8014a22:	f7f8 f913 	bl	800cc4c <gc_get_offset>
 8014a26:	ee38 0a40 	vsub.f32	s0, s16, s0
        if(settings.flags.report_inches)
 8014a2a:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8014a2e:	f013 0f01 	tst.w	r3, #1
 8014a32:	d003      	beq.n	8014a3c <_relative_pos+0x50>
            value *= 25.4f;
 8014a34:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8014a50 <_relative_pos+0x64>
 8014a38:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8014a3c:	ecbd 8b02 	vpop	{d8}
 8014a40:	bd10      	pop	{r4, pc}
 8014a42:	bf00      	nop
 8014a44:	00000000 	.word	0x00000000
 8014a48:	200014a0 	.word	0x200014a0
 8014a4c:	20001bd8 	.word	0x20001bd8
 8014a50:	41cb3333 	.word	0x41cb3333

08014a54 <work_position>:
{
 8014a54:	b508      	push	{r3, lr}
    uint_fast8_t axis = id % 10;
 8014a56:	4b08      	ldr	r3, [pc, #32]	@ (8014a78 <work_position+0x24>)
 8014a58:	fba3 2300 	umull	r2, r3, r3, r0
 8014a5c:	08db      	lsrs	r3, r3, #3
 8014a5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014a62:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8014a66:	b280      	uxth	r0, r0
    if(axis < N_AXIS)
 8014a68:	2802      	cmp	r0, #2
 8014a6a:	d902      	bls.n	8014a72 <work_position+0x1e>
    float value = 0.0f;
 8014a6c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8014a7c <work_position+0x28>
}
 8014a70:	bd08      	pop	{r3, pc}
        value = _relative_pos(axis);
 8014a72:	f7ff ffbb 	bl	80149ec <_relative_pos>
 8014a76:	e7fb      	b.n	8014a70 <work_position+0x1c>
 8014a78:	cccccccd 	.word	0xcccccccd
 8014a7c:	00000000 	.word	0x00000000

08014a80 <coord_system_offset>:
{
 8014a80:	b510      	push	{r4, lr}
 8014a82:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 8014a84:	4b15      	ldr	r3, [pc, #84]	@ (8014adc <coord_system_offset+0x5c>)
 8014a86:	fba3 2300 	umull	r2, r3, r3, r0
 8014a8a:	08db      	lsrs	r3, r3, #3
 8014a8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014a90:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 8014a94:	b29b      	uxth	r3, r3
    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 8014a96:	1ac2      	subs	r2, r0, r3
 8014a98:	b978      	cbnz	r0, 8014aba <coord_system_offset+0x3a>
 8014a9a:	210a      	movs	r1, #10
 8014a9c:	1a50      	subs	r0, r2, r1
 8014a9e:	f5a0 50a3 	sub.w	r0, r0, #5216	@ 0x1460
 8014aa2:	3804      	subs	r0, #4
 8014aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8014adc <coord_system_offset+0x5c>)
 8014aa6:	fba2 2000 	umull	r2, r0, r2, r0
 8014aaa:	0900      	lsrs	r0, r0, #4
    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 8014aac:	1e5c      	subs	r4, r3, #1
 8014aae:	2c02      	cmp	r4, #2
 8014ab0:	d905      	bls.n	8014abe <coord_system_offset+0x3e>
    float value = 0.0f;
 8014ab2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8014ae0 <coord_system_offset+0x60>
}
 8014ab6:	b004      	add	sp, #16
 8014ab8:	bd10      	pop	{r4, pc}
    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 8014aba:	2100      	movs	r1, #0
 8014abc:	e7ee      	b.n	8014a9c <coord_system_offset+0x1c>
    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 8014abe:	4669      	mov	r1, sp
 8014ac0:	b2c0      	uxtb	r0, r0
 8014ac2:	f008 fa67 	bl	801cf94 <settings_read_coord_data>
 8014ac6:	b128      	cbz	r0, 8014ad4 <coord_system_offset+0x54>
        value = data.xyz[axis - 1];
 8014ac8:	ab04      	add	r3, sp, #16
 8014aca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014ace:	ed13 0a04 	vldr	s0, [r3, #-16]
 8014ad2:	e7f0      	b.n	8014ab6 <coord_system_offset+0x36>
    float value = 0.0f;
 8014ad4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8014ae0 <coord_system_offset+0x60>
    return value;
 8014ad8:	e7ed      	b.n	8014ab6 <coord_system_offset+0x36>
 8014ada:	bf00      	nop
 8014adc:	cccccccd 	.word	0xcccccccd
 8014ae0:	00000000 	.word	0x00000000

08014ae4 <g30_home>:
{
 8014ae4:	b510      	push	{r4, lr}
 8014ae6:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 8014ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8014b24 <g30_home+0x40>)
 8014aea:	fba3 2300 	umull	r2, r3, r3, r0
 8014aee:	08db      	lsrs	r3, r3, #3
 8014af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014af4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8014af8:	b284      	uxth	r4, r0
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 8014afa:	2c03      	cmp	r4, #3
 8014afc:	d903      	bls.n	8014b06 <g30_home+0x22>
    float value = 0.0f;
 8014afe:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8014b28 <g30_home+0x44>
}
 8014b02:	b004      	add	sp, #16
 8014b04:	bd10      	pop	{r4, pc}
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 8014b06:	4669      	mov	r1, sp
 8014b08:	200a      	movs	r0, #10
 8014b0a:	f008 fa43 	bl	801cf94 <settings_read_coord_data>
 8014b0e:	b130      	cbz	r0, 8014b1e <g30_home+0x3a>
        value = data.xyz[axis - 1];
 8014b10:	3c01      	subs	r4, #1
 8014b12:	ab04      	add	r3, sp, #16
 8014b14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b18:	ed14 0a04 	vldr	s0, [r4, #-16]
 8014b1c:	e7f1      	b.n	8014b02 <g30_home+0x1e>
    float value = 0.0f;
 8014b1e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8014b28 <g30_home+0x44>
    return value;
 8014b22:	e7ee      	b.n	8014b02 <g30_home+0x1e>
 8014b24:	cccccccd 	.word	0xcccccccd
 8014b28:	00000000 	.word	0x00000000

08014b2c <g28_home>:
{
 8014b2c:	b510      	push	{r4, lr}
 8014b2e:	b084      	sub	sp, #16
    uint_fast8_t axis = id % 10;
 8014b30:	4b0e      	ldr	r3, [pc, #56]	@ (8014b6c <g28_home+0x40>)
 8014b32:	fba3 2300 	umull	r2, r3, r3, r0
 8014b36:	08db      	lsrs	r3, r3, #3
 8014b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014b3c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8014b40:	b284      	uxth	r4, r0
    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 8014b42:	2c03      	cmp	r4, #3
 8014b44:	d903      	bls.n	8014b4e <g28_home+0x22>
    float value = 0.0f;
 8014b46:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8014b70 <g28_home+0x44>
}
 8014b4a:	b004      	add	sp, #16
 8014b4c:	bd10      	pop	{r4, pc}
    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 8014b4e:	4669      	mov	r1, sp
 8014b50:	2009      	movs	r0, #9
 8014b52:	f008 fa1f 	bl	801cf94 <settings_read_coord_data>
 8014b56:	b130      	cbz	r0, 8014b66 <g28_home+0x3a>
        value = data.xyz[axis - 1];
 8014b58:	3c01      	subs	r4, #1
 8014b5a:	ab04      	add	r3, sp, #16
 8014b5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b60:	ed14 0a04 	vldr	s0, [r4, #-16]
 8014b64:	e7f1      	b.n	8014b4a <g28_home+0x1e>
    float value = 0.0f;
 8014b66:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8014b70 <g28_home+0x44>
    return value;
 8014b6a:	e7ee      	b.n	8014b4a <g28_home+0x1e>
 8014b6c:	cccccccd 	.word	0xcccccccd
 8014b70:	00000000 	.word	0x00000000

08014b74 <probe_coord>:
{
 8014b74:	b510      	push	{r4, lr}
 8014b76:	b084      	sub	sp, #16
    uint_fast8_t axis = (id % 10) - 1;
 8014b78:	4b27      	ldr	r3, [pc, #156]	@ (8014c18 <probe_coord+0xa4>)
 8014b7a:	fba3 2300 	umull	r2, r3, r3, r0
 8014b7e:	08db      	lsrs	r3, r3, #3
 8014b80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014b84:	eba0 0443 	sub.w	r4, r0, r3, lsl #1
 8014b88:	b2a4      	uxth	r4, r4
 8014b8a:	3c01      	subs	r4, #1
    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 8014b8c:	2c02      	cmp	r4, #2
 8014b8e:	d83f      	bhi.n	8014c10 <probe_coord+0x9c>
 8014b90:	4b22      	ldr	r3, [pc, #136]	@ (8014c1c <probe_coord+0xa8>)
 8014b92:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 8014b96:	4b22      	ldr	r3, [pc, #136]	@ (8014c20 <probe_coord+0xac>)
 8014b98:	7d1b      	ldrb	r3, [r3, #20]
 8014b9a:	4298      	cmp	r0, r3
 8014b9c:	d129      	bne.n	8014bf2 <probe_coord+0x7e>
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 8014b9e:	491f      	ldr	r1, [pc, #124]	@ (8014c1c <probe_coord+0xa8>)
 8014ba0:	f104 030e 	add.w	r3, r4, #14
 8014ba4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014ba8:	edd3 7a00 	vldr	s15, [r3]
 8014bac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8014bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8014c24 <probe_coord+0xb0>)
 8014bb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014bb6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8014bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bbe:	ee87 0a87 	vdiv.f32	s0, s15, s14
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 8014bc2:	f891 2036 	ldrb.w	r2, [r1, #54]	@ 0x36
 8014bc6:	4b16      	ldr	r3, [pc, #88]	@ (8014c20 <probe_coord+0xac>)
 8014bc8:	7d1b      	ldrb	r3, [r3, #20]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d019      	beq.n	8014c02 <probe_coord+0x8e>
 8014bce:	ab04      	add	r3, sp, #16
 8014bd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014bd4:	ed54 7a04 	vldr	s15, [r4, #-16]
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 8014bd8:	ee30 0a67 	vsub.f32	s0, s0, s15
        if(settings.flags.report_inches)
 8014bdc:	4b11      	ldr	r3, [pc, #68]	@ (8014c24 <probe_coord+0xb0>)
 8014bde:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8014be2:	f013 0f01 	tst.w	r3, #1
 8014be6:	d015      	beq.n	8014c14 <probe_coord+0xa0>
            value *= 25.4f;
 8014be8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8014c28 <probe_coord+0xb4>
 8014bec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014bf0:	e010      	b.n	8014c14 <probe_coord+0xa0>
    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 8014bf2:	4669      	mov	r1, sp
 8014bf4:	f008 f9ce 	bl	801cf94 <settings_read_coord_data>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d1d0      	bne.n	8014b9e <probe_coord+0x2a>
    float value = 0.0f;
 8014bfc:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8014c2c <probe_coord+0xb8>
    return value;
 8014c00:	e008      	b.n	8014c14 <probe_coord+0xa0>
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 8014c02:	3402      	adds	r4, #2
 8014c04:	4b06      	ldr	r3, [pc, #24]	@ (8014c20 <probe_coord+0xac>)
 8014c06:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014c0a:	edd3 7a00 	vldr	s15, [r3]
 8014c0e:	e7e3      	b.n	8014bd8 <probe_coord+0x64>
    float value = 0.0f;
 8014c10:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8014c2c <probe_coord+0xb8>
}
 8014c14:	b004      	add	sp, #16
 8014c16:	bd10      	pop	{r4, pc}
 8014c18:	cccccccd 	.word	0xcccccccd
 8014c1c:	200014a0 	.word	0x200014a0
 8014c20:	20000ef8 	.word	0x20000ef8
 8014c24:	20001bd8 	.word	0x20001bd8
 8014c28:	41cb3333 	.word	0x41cb3333
 8014c2c:	00000000 	.word	0x00000000

08014c30 <scaling_factors>:
{
 8014c30:	b510      	push	{r4, lr}
 8014c32:	4604      	mov	r4, r0
    float *factors = gc_get_scaling();
 8014c34:	f7f7 ffb6 	bl	800cba4 <gc_get_scaling>
    uint_fast8_t axis = id % 10;
 8014c38:	4b0a      	ldr	r3, [pc, #40]	@ (8014c64 <scaling_factors+0x34>)
 8014c3a:	fba3 2304 	umull	r2, r3, r3, r4
 8014c3e:	08db      	lsrs	r3, r3, #3
 8014c40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014c44:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 8014c48:	b2a4      	uxth	r4, r4
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 8014c4a:	2c03      	cmp	r4, #3
 8014c4c:	d807      	bhi.n	8014c5e <scaling_factors+0x2e>
 8014c4e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8014c52:	3c01      	subs	r4, #1
 8014c54:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8014c58:	ed90 0a00 	vldr	s0, [r0]
}
 8014c5c:	bd10      	pop	{r4, pc}
    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 8014c5e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8014c68 <scaling_factors+0x38>
 8014c62:	e7fb      	b.n	8014c5c <scaling_factors+0x2c>
 8014c64:	cccccccd 	.word	0xcccccccd
 8014c68:	00000000 	.word	0x00000000

08014c6c <ngc_param_get>:
{
 8014c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c6e:	460f      	mov	r7, r1
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8014c70:	4605      	mov	r5, r0
 8014c72:	b128      	cbz	r0, 8014c80 <ngc_param_get+0x14>
 8014c74:	f241 33c4 	movw	r3, #5060	@ 0x13c4
 8014c78:	4298      	cmp	r0, r3
 8014c7a:	d90d      	bls.n	8014c98 <ngc_param_get+0x2c>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	e000      	b.n	8014c82 <ngc_param_get+0x16>
 8014c80:	2300      	movs	r3, #0
    *value = 0.0f;
 8014c82:	2200      	movs	r2, #0
 8014c84:	603a      	str	r2, [r7, #0]
    if(found) {
 8014c86:	461e      	mov	r6, r3
 8014c88:	b1c3      	cbz	r3, 8014cbc <ngc_param_get+0x50>
        void *context = id > (ngc_param_id_t)30 ? NULL : call_context;
 8014c8a:	2d1e      	cmp	r5, #30
 8014c8c:	d806      	bhi.n	8014c9c <ngc_param_get+0x30>
 8014c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8014cfc <ngc_param_get+0x90>)
 8014c90:	6819      	ldr	r1, [r3, #0]
        ngc_rw_param_t *rw_param = rw_params;
 8014c92:	4b1b      	ldr	r3, [pc, #108]	@ (8014d00 <ngc_param_get+0x94>)
 8014c94:	681b      	ldr	r3, [r3, #0]
        while(rw_param) {
 8014c96:	e004      	b.n	8014ca2 <ngc_param_get+0x36>
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	e7f2      	b.n	8014c82 <ngc_param_get+0x16>
        void *context = id > (ngc_param_id_t)30 ? NULL : call_context;
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	e7f8      	b.n	8014c92 <ngc_param_get+0x26>
                rw_param = rw_param->next;
 8014ca0:	68db      	ldr	r3, [r3, #12]
        while(rw_param) {
 8014ca2:	b14b      	cbz	r3, 8014cb8 <ngc_param_get+0x4c>
            if(rw_param->context == context && rw_param->id == id) {
 8014ca4:	681a      	ldr	r2, [r3, #0]
 8014ca6:	428a      	cmp	r2, r1
 8014ca8:	d1fa      	bne.n	8014ca0 <ngc_param_get+0x34>
 8014caa:	889a      	ldrh	r2, [r3, #4]
 8014cac:	42aa      	cmp	r2, r5
 8014cae:	d1f7      	bne.n	8014ca0 <ngc_param_get+0x34>
                *value = rw_param->value;
 8014cb0:	689b      	ldr	r3, [r3, #8]
 8014cb2:	603b      	str	r3, [r7, #0]
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 8014cb4:	4630      	mov	r0, r6
 8014cb6:	e000      	b.n	8014cba <ngc_param_get+0x4e>
 8014cb8:	4630      	mov	r0, r6
}
 8014cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint_fast8_t idx = sizeof(ngc_ro_params) / sizeof(ngc_ro_param_t);
 8014cbc:	2416      	movs	r4, #22
 8014cbe:	e012      	b.n	8014ce6 <ngc_param_get+0x7a>
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 8014cc0:	4b10      	ldr	r3, [pc, #64]	@ (8014d04 <ngc_param_get+0x98>)
 8014cc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014cc6:	885b      	ldrh	r3, [r3, #2]
 8014cc8:	42ab      	cmp	r3, r5
 8014cca:	d314      	bcc.n	8014cf6 <ngc_param_get+0x8a>
            *value = ngc_ro_params[idx].get(id);
 8014ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8014d04 <ngc_param_get+0x98>)
 8014cce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	4628      	mov	r0, r5
 8014cd6:	4798      	blx	r3
 8014cd8:	ed87 0a00 	vstr	s0, [r7]
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 8014cdc:	2001      	movs	r0, #1
    } while(idx && !found);
 8014cde:	2c00      	cmp	r4, #0
 8014ce0:	d0eb      	beq.n	8014cba <ngc_param_get+0x4e>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	d1e9      	bne.n	8014cba <ngc_param_get+0x4e>
        idx--;
 8014ce6:	3c01      	subs	r4, #1
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 8014ce8:	4b06      	ldr	r3, [pc, #24]	@ (8014d04 <ngc_param_get+0x98>)
 8014cea:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
 8014cee:	42ab      	cmp	r3, r5
 8014cf0:	d9e6      	bls.n	8014cc0 <ngc_param_get+0x54>
 8014cf2:	4630      	mov	r0, r6
 8014cf4:	e7f3      	b.n	8014cde <ngc_param_get+0x72>
 8014cf6:	4630      	mov	r0, r6
 8014cf8:	e7f1      	b.n	8014cde <ngc_param_get+0x72>
 8014cfa:	bf00      	nop
 8014cfc:	200016c4 	.word	0x200016c4
 8014d00:	20001644 	.word	0x20001644
 8014d04:	0802b330 	.word	0x0802b330

08014d08 <ngc_named_param_set>:

    return ok;
}

bool ngc_named_param_set (char *name, float value)
{
 8014d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d0c:	ee10 9a10 	vmov	r9, s0
    bool ok = false;
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);

    name = ngc_name_tolower(name);
 8014d10:	f7ff fe4e 	bl	80149b0 <ngc_name_tolower>
 8014d14:	4605      	mov	r5, r0

    // Check if name is supplied, return false if not.
    if((*name == '_' ? *(name + 1) : *name) == '\0')
 8014d16:	7807      	ldrb	r7, [r0, #0]
 8014d18:	2f5f      	cmp	r7, #95	@ 0x5f
 8014d1a:	d018      	beq.n	8014d4e <ngc_named_param_set+0x46>
 8014d1c:	fab7 f687 	clz	r6, r7
 8014d20:	0976      	lsrs	r6, r6, #5
 8014d22:	2e00      	cmp	r6, #0
 8014d24:	d153      	bne.n	8014dce <ngc_named_param_set+0xc6>
        return false;

    // Check if it is a (read only) predefined parameter.
    if(*name == '_') do {
 8014d26:	2f5f      	cmp	r7, #95	@ 0x5f
 8014d28:	d016      	beq.n	8014d58 <ngc_named_param_set+0x50>
        idx--;
        ok = !strcmp(name, ngc_named_ro_param[idx].name);
    } while(idx && !ok);

    // If not predefined attempt to set it.
    if(!ok && (ok = strlen(name) < NGC_MAX_PARAM_LENGTH)) {
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f7f3 f9e8 	bl	8008100 <strlen>
 8014d30:	2813      	cmp	r0, #19
 8014d32:	bf94      	ite	ls
 8014d34:	2001      	movls	r0, #1
 8014d36:	2000      	movhi	r0, #0
 8014d38:	d84a      	bhi.n	8014dd0 <ngc_named_param_set+0xc8>

        void *context = *name == '_' ? NULL : call_context;
 8014d3a:	2f5f      	cmp	r7, #95	@ 0x5f
 8014d3c:	d01f      	beq.n	8014d7e <ngc_named_param_set+0x76>
 8014d3e:	4b26      	ldr	r3, [pc, #152]	@ (8014dd8 <ngc_named_param_set+0xd0>)
 8014d40:	681f      	ldr	r7, [r3, #0]
        ngc_named_rw_param_t *rw_param = rw_global_params, *rw_param_last = rw_global_params;
 8014d42:	4b26      	ldr	r3, [pc, #152]	@ (8014ddc <ngc_named_param_set+0xd4>)
 8014d44:	f8d3 a000 	ldr.w	sl, [r3]
 8014d48:	46d0      	mov	r8, sl
 8014d4a:	4654      	mov	r4, sl

         while(rw_param) {
 8014d4c:	e01b      	b.n	8014d86 <ngc_named_param_set+0x7e>
    if((*name == '_' ? *(name + 1) : *name) == '\0')
 8014d4e:	7846      	ldrb	r6, [r0, #1]
 8014d50:	fab6 f686 	clz	r6, r6
 8014d54:	0976      	lsrs	r6, r6, #5
 8014d56:	e7e4      	b.n	8014d22 <ngc_named_param_set+0x1a>
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 8014d58:	242e      	movs	r4, #46	@ 0x2e
        idx--;
 8014d5a:	3c01      	subs	r4, #1
        ok = !strcmp(name, ngc_named_ro_param[idx].name);
 8014d5c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8014d60:	4b1f      	ldr	r3, [pc, #124]	@ (8014de0 <ngc_named_param_set+0xd8>)
 8014d62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d66:	4628      	mov	r0, r5
 8014d68:	f7f3 f96a 	bl	8008040 <strcmp>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	fab0 f080 	clz	r0, r0
 8014d72:	0940      	lsrs	r0, r0, #5
    } while(idx && !ok);
 8014d74:	b10c      	cbz	r4, 8014d7a <ngc_named_param_set+0x72>
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d1ef      	bne.n	8014d5a <ngc_named_param_set+0x52>
    if(!ok && (ok = strlen(name) < NGC_MAX_PARAM_LENGTH)) {
 8014d7a:	bb48      	cbnz	r0, 8014dd0 <ngc_named_param_set+0xc8>
 8014d7c:	e7d5      	b.n	8014d2a <ngc_named_param_set+0x22>
        void *context = *name == '_' ? NULL : call_context;
 8014d7e:	2700      	movs	r7, #0
 8014d80:	e7df      	b.n	8014d42 <ngc_named_param_set+0x3a>
             if(rw_param->context == context && !strcmp(rw_param->name, name)) {
                 break;
             } else {
                 rw_param_last = rw_param;
 8014d82:	46a0      	mov	r8, r4
                 rw_param = rw_param->next;
 8014d84:	6a24      	ldr	r4, [r4, #32]
         while(rw_param) {
 8014d86:	b144      	cbz	r4, 8014d9a <ngc_named_param_set+0x92>
             if(rw_param->context == context && !strcmp(rw_param->name, name)) {
 8014d88:	6823      	ldr	r3, [r4, #0]
 8014d8a:	42bb      	cmp	r3, r7
 8014d8c:	d1f9      	bne.n	8014d82 <ngc_named_param_set+0x7a>
 8014d8e:	4629      	mov	r1, r5
 8014d90:	1d20      	adds	r0, r4, #4
 8014d92:	f7f3 f955 	bl	8008040 <strcmp>
 8014d96:	2800      	cmp	r0, #0
 8014d98:	d1f3      	bne.n	8014d82 <ngc_named_param_set+0x7a>
             }
         }

         if(rw_param == NULL && (rw_param = malloc(sizeof(ngc_named_rw_param_t)))) {
 8014d9a:	b11c      	cbz	r4, 8014da4 <ngc_named_param_set+0x9c>
             else
                 rw_param_last->next = rw_param;
         }

         if((ok = rw_param != NULL))
             rw_param->value = value;
 8014d9c:	f8c4 901c 	str.w	r9, [r4, #28]
 8014da0:	2001      	movs	r0, #1
 8014da2:	e015      	b.n	8014dd0 <ngc_named_param_set+0xc8>
         if(rw_param == NULL && (rw_param = malloc(sizeof(ngc_named_rw_param_t)))) {
 8014da4:	2024      	movs	r0, #36	@ 0x24
 8014da6:	f00d fb79 	bl	802249c <malloc>
 8014daa:	4604      	mov	r4, r0
 8014dac:	b190      	cbz	r0, 8014dd4 <ngc_named_param_set+0xcc>
             strcpy(rw_param->name, name);
 8014dae:	4629      	mov	r1, r5
 8014db0:	3004      	adds	r0, #4
 8014db2:	f00f fd94 	bl	80248de <strcpy>
             rw_param->context = context;
 8014db6:	6027      	str	r7, [r4, #0]
             rw_param->next = NULL;
 8014db8:	2300      	movs	r3, #0
 8014dba:	6223      	str	r3, [r4, #32]
             if(rw_global_params == NULL)
 8014dbc:	f1ba 0f00 	cmp.w	sl, #0
 8014dc0:	d002      	beq.n	8014dc8 <ngc_named_param_set+0xc0>
                 rw_param_last->next = rw_param;
 8014dc2:	f8c8 4020 	str.w	r4, [r8, #32]
 8014dc6:	e7e9      	b.n	8014d9c <ngc_named_param_set+0x94>
                 rw_global_params = rw_param;
 8014dc8:	4b04      	ldr	r3, [pc, #16]	@ (8014ddc <ngc_named_param_set+0xd4>)
 8014dca:	601c      	str	r4, [r3, #0]
 8014dcc:	e7e6      	b.n	8014d9c <ngc_named_param_set+0x94>
        return false;
 8014dce:	2000      	movs	r0, #0
     }

    return ok;
}
 8014dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         if((ok = rw_param != NULL))
 8014dd4:	4630      	mov	r0, r6
 8014dd6:	e7fb      	b.n	8014dd0 <ngc_named_param_set+0xc8>
 8014dd8:	200016c4 	.word	0x200016c4
 8014ddc:	20001640 	.word	0x20001640
 8014de0:	0802b108 	.word	0x0802b108

08014de4 <ngc_modal_state_save>:

bool ngc_modal_state_save (gc_modal_t *state, bool auto_restore)
{
 8014de4:	b538      	push	{r3, r4, r5, lr}
 8014de6:	4605      	mov	r5, r0
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8014de8:	4b17      	ldr	r3, [pc, #92]	@ (8014e48 <ngc_modal_state_save+0x64>)
 8014dea:	681c      	ldr	r4, [r3, #0]
 8014dec:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014df0:	d022      	beq.n	8014e38 <ngc_modal_state_save+0x54>
 8014df2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014df6:	00a4      	lsls	r4, r4, #2
 8014df8:	3408      	adds	r4, #8
 8014dfa:	4b14      	ldr	r3, [pc, #80]	@ (8014e4c <ngc_modal_state_save+0x68>)
 8014dfc:	441c      	add	r4, r3

    if(*saved_state == NULL)
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	b1e3      	cbz	r3, 8014e3c <ngc_modal_state_save+0x58>
        *saved_state = malloc(sizeof(gc_modal_t));

    if(*saved_state)
 8014e02:	6823      	ldr	r3, [r4, #0]
 8014e04:	b19b      	cbz	r3, 8014e2e <ngc_modal_state_save+0x4a>
        memcpy(*saved_state, state, sizeof(gc_modal_t));
 8014e06:	462a      	mov	r2, r5
 8014e08:	3530      	adds	r5, #48	@ 0x30
 8014e0a:	f8d2 e000 	ldr.w	lr, [r2]
 8014e0e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8014e12:	6890      	ldr	r0, [r2, #8]
 8014e14:	68d1      	ldr	r1, [r2, #12]
 8014e16:	f8c3 e000 	str.w	lr, [r3]
 8014e1a:	f8c3 c004 	str.w	ip, [r3, #4]
 8014e1e:	6098      	str	r0, [r3, #8]
 8014e20:	60d9      	str	r1, [r3, #12]
 8014e22:	3210      	adds	r2, #16
 8014e24:	3310      	adds	r3, #16
 8014e26:	42aa      	cmp	r2, r5
 8014e28:	d1ef      	bne.n	8014e0a <ngc_modal_state_save+0x26>
 8014e2a:	6812      	ldr	r2, [r2, #0]
 8014e2c:	601a      	str	r2, [r3, #0]

    return *saved_state != NULL;
 8014e2e:	6820      	ldr	r0, [r4, #0]
}
 8014e30:	3800      	subs	r0, #0
 8014e32:	bf18      	it	ne
 8014e34:	2001      	movne	r0, #1
 8014e36:	bd38      	pop	{r3, r4, r5, pc}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8014e38:	4c05      	ldr	r4, [pc, #20]	@ (8014e50 <ngc_modal_state_save+0x6c>)
 8014e3a:	e7e0      	b.n	8014dfe <ngc_modal_state_save+0x1a>
        *saved_state = malloc(sizeof(gc_modal_t));
 8014e3c:	2034      	movs	r0, #52	@ 0x34
 8014e3e:	f00d fb2d 	bl	802249c <malloc>
 8014e42:	6020      	str	r0, [r4, #0]
 8014e44:	e7dd      	b.n	8014e02 <ngc_modal_state_save+0x1e>
 8014e46:	bf00      	nop
 8014e48:	200001fc 	.word	0x200001fc
 8014e4c:	20001648 	.word	0x20001648
 8014e50:	200016c0 	.word	0x200016c0

08014e54 <ngc_modal_state_invalidate>:

void ngc_modal_state_invalidate (void)
{
 8014e54:	b510      	push	{r4, lr}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8014e56:	4b0a      	ldr	r3, [pc, #40]	@ (8014e80 <ngc_modal_state_invalidate+0x2c>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e5e:	d00c      	beq.n	8014e7a <ngc_modal_state_invalidate+0x26>
 8014e60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e64:	009c      	lsls	r4, r3, #2
 8014e66:	3408      	adds	r4, #8
 8014e68:	4b06      	ldr	r3, [pc, #24]	@ (8014e84 <ngc_modal_state_invalidate+0x30>)
 8014e6a:	441c      	add	r4, r3

    if(*saved_state) {
 8014e6c:	6820      	ldr	r0, [r4, #0]
 8014e6e:	b118      	cbz	r0, 8014e78 <ngc_modal_state_invalidate+0x24>
        free(*saved_state);
 8014e70:	f00d fb1c 	bl	80224ac <free>
        *saved_state = NULL;
 8014e74:	2300      	movs	r3, #0
 8014e76:	6023      	str	r3, [r4, #0]
    }
}
 8014e78:	bd10      	pop	{r4, pc}
    gc_modal_t **saved_state = call_level == -1 ? &modal_state : &call_levels[call_level].modal_state;
 8014e7a:	4c03      	ldr	r4, [pc, #12]	@ (8014e88 <ngc_modal_state_invalidate+0x34>)
 8014e7c:	e7f6      	b.n	8014e6c <ngc_modal_state_invalidate+0x18>
 8014e7e:	bf00      	nop
 8014e80:	200001fc 	.word	0x200001fc
 8014e84:	20001648 	.word	0x20001648
 8014e88:	200016c0 	.word	0x200016c0

08014e8c <ngc_modal_state_restore>:

bool ngc_modal_state_restore (void)
{
 8014e8c:	b508      	push	{r3, lr}
    return gc_modal_state_restore(call_level == -1 ? modal_state : call_levels[call_level].modal_state);
 8014e8e:	4b08      	ldr	r3, [pc, #32]	@ (8014eb0 <ngc_modal_state_restore+0x24>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e96:	d008      	beq.n	8014eaa <ngc_modal_state_restore+0x1e>
 8014e98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e9c:	009a      	lsls	r2, r3, #2
 8014e9e:	4b05      	ldr	r3, [pc, #20]	@ (8014eb4 <ngc_modal_state_restore+0x28>)
 8014ea0:	4413      	add	r3, r2
 8014ea2:	6898      	ldr	r0, [r3, #8]
 8014ea4:	f7f8 f86a 	bl	800cf7c <gc_modal_state_restore>
}
 8014ea8:	bd08      	pop	{r3, pc}
    return gc_modal_state_restore(call_level == -1 ? modal_state : call_levels[call_level].modal_state);
 8014eaa:	4b03      	ldr	r3, [pc, #12]	@ (8014eb8 <ngc_modal_state_restore+0x2c>)
 8014eac:	6818      	ldr	r0, [r3, #0]
 8014eae:	e7f9      	b.n	8014ea4 <ngc_modal_state_restore+0x18>
 8014eb0:	200001fc 	.word	0x200001fc
 8014eb4:	20001648 	.word	0x20001648
 8014eb8:	200016c0 	.word	0x200016c0

08014ebc <ngc_call_push>:

bool ngc_call_push (void *context)
{
 8014ebc:	4602      	mov	r2, r0
    bool ok;

    if((ok = call_level < (NGC_MAX_CALL_LEVEL - 1)))
 8014ebe:	4b09      	ldr	r3, [pc, #36]	@ (8014ee4 <ngc_call_push+0x28>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	2b08      	cmp	r3, #8
 8014ec4:	bfd4      	ite	le
 8014ec6:	2001      	movle	r0, #1
 8014ec8:	2000      	movgt	r0, #0
 8014eca:	dc0a      	bgt.n	8014ee2 <ngc_call_push+0x26>
        call_levels[++call_level].context = call_context = context;
 8014ecc:	4906      	ldr	r1, [pc, #24]	@ (8014ee8 <ngc_call_push+0x2c>)
 8014ece:	600a      	str	r2, [r1, #0]
 8014ed0:	3301      	adds	r3, #1
 8014ed2:	4904      	ldr	r1, [pc, #16]	@ (8014ee4 <ngc_call_push+0x28>)
 8014ed4:	600b      	str	r3, [r1, #0]
 8014ed6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014eda:	4904      	ldr	r1, [pc, #16]	@ (8014eec <ngc_call_push+0x30>)
 8014edc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014ee0:	605a      	str	r2, [r3, #4]

    return ok;
}
 8014ee2:	4770      	bx	lr
 8014ee4:	200001fc 	.word	0x200001fc
 8014ee8:	200016c4 	.word	0x200016c4
 8014eec:	20001648 	.word	0x20001648

08014ef0 <ngc_call_level>:
    return call_level >= 0;
}

uint_fast8_t ngc_call_level (void)
{
    return (uint_fast8_t)(call_level + 1);
 8014ef0:	4b01      	ldr	r3, [pc, #4]	@ (8014ef8 <ngc_call_level+0x8>)
 8014ef2:	6818      	ldr	r0, [r3, #0]
}
 8014ef4:	3001      	adds	r0, #1
 8014ef6:	4770      	bx	lr
 8014ef8:	200001fc 	.word	0x200001fc

08014efc <ngc_named_param_get_by_id>:
{
 8014efc:	b508      	push	{r3, lr}
    switch(id) {
 8014efe:	282d      	cmp	r0, #45	@ 0x2d
 8014f00:	f200 8139 	bhi.w	8015176 <ngc_named_param_get_by_id+0x27a>
 8014f04:	e8df f010 	tbh	[pc, r0, lsl #1]
 8014f08:	013a002e 	.word	0x013a002e
 8014f0c:	00370031 	.word	0x00370031
 8014f10:	004c0041 	.word	0x004c0041
 8014f14:	0057004f 	.word	0x0057004f
 8014f18:	0067005f 	.word	0x0067005f
 8014f1c:	0079006f 	.word	0x0079006f
 8014f20:	008b0081 	.word	0x008b0081
 8014f24:	00a4009c 	.word	0x00a4009c
 8014f28:	00b600ac 	.word	0x00b600ac
 8014f2c:	013a00be 	.word	0x013a00be
 8014f30:	00d000c8 	.word	0x00d000c8
 8014f34:	00e000d8 	.word	0x00e000d8
 8014f38:	00f000e8 	.word	0x00f000e8
 8014f3c:	010000f8 	.word	0x010000f8
 8014f40:	0108013a 	.word	0x0108013a
 8014f44:	01140110 	.word	0x01140110
 8014f48:	01180118 	.word	0x01180118
 8014f4c:	01180118 	.word	0x01180118
 8014f50:	01180118 	.word	0x01180118
 8014f54:	01180118 	.word	0x01180118
 8014f58:	011c0118 	.word	0x011c0118
 8014f5c:	0124013a 	.word	0x0124013a
 8014f60:	0130013a 	.word	0x0130013a
 8014f64:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 80151f0 <ngc_named_param_get_by_id+0x2f4>
 8014f68:	e10a      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = (float)gc_state.line_number;
 8014f6a:	4ba2      	ldr	r3, [pc, #648]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014f6c:	ed93 0a1d 	vldr	s0, [r3, #116]	@ 0x74
 8014f70:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            break;
 8014f74:	e104      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = (float)(gc_state.modal.motion * 10); // TODO: Fix G38.x
 8014f76:	4b9f      	ldr	r3, [pc, #636]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014f78:	881b      	ldrh	r3, [r3, #0]
 8014f7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014f7e:	005b      	lsls	r3, r3, #1
 8014f80:	ee07 3a90 	vmov	s15, r3
 8014f84:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
            break;
 8014f88:	e0fa      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = (float)(170 + gc_state.modal.plane_select * 10);
 8014f8a:	4b9a      	ldr	r3, [pc, #616]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014f8c:	799b      	ldrb	r3, [r3, #6]
 8014f8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014f92:	005b      	lsls	r3, r3, #1
 8014f94:	33aa      	adds	r3, #170	@ 0xaa
 8014f96:	ee00 3a10 	vmov	s0, r3
 8014f9a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            break;
 8014f9e:	e0ef      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = 400.0f;
 8014fa0:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 80151f8 <ngc_named_param_get_by_id+0x2fc>
            break;
 8014fa4:	e0ec      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 8014fa6:	4b93      	ldr	r3, [pc, #588]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014fa8:	78db      	ldrb	r3, [r3, #3]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	f000 80e9 	beq.w	8015182 <ngc_named_param_get_by_id+0x286>
 8014fb0:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8014fb4:	e0e4      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 8014fb6:	4b8f      	ldr	r3, [pc, #572]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014fb8:	78db      	ldrb	r3, [r3, #3]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	f000 80e4 	beq.w	8015188 <ngc_named_param_get_by_id+0x28c>
 8014fc0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014fc4:	e0dc      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 8014fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014fc8:	791b      	ldrb	r3, [r3, #4]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	f000 80df 	beq.w	801518e <ngc_named_param_get_by_id+0x292>
 8014fd0:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8014fd4:	e0d4      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 8014fd6:	4b87      	ldr	r3, [pc, #540]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014fd8:	791b      	ldrb	r3, [r3, #4]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	f000 80da 	beq.w	8015194 <ngc_named_param_get_by_id+0x298>
 8014fe0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014fe4:	e0cc      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_InverseTime ? 1.0f : 0.0f;
 8014fe6:	4b83      	ldr	r3, [pc, #524]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014fe8:	789b      	ldrb	r3, [r3, #2]
 8014fea:	2b01      	cmp	r3, #1
 8014fec:	d002      	beq.n	8014ff4 <ngc_named_param_get_by_id+0xf8>
 8014fee:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8014ff2:	e0c5      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
 8014ff4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014ff8:	e0c2      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 8014ffa:	4b7e      	ldr	r3, [pc, #504]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8014ffc:	789b      	ldrb	r3, [r3, #2]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	f040 80cb 	bne.w	801519a <ngc_named_param_get_by_id+0x29e>
 8015004:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015008:	e0ba      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 1.0f : 0.0f;
 801500a:	4b7a      	ldr	r3, [pc, #488]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 801500c:	789b      	ldrb	r3, [r3, #2]
 801500e:	2b02      	cmp	r3, #2
 8015010:	d002      	beq.n	8015018 <ngc_named_param_get_by_id+0x11c>
 8015012:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8015016:	e0b3      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
 8015018:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801501c:	e0b0      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
                uint_fast16_t id = gc_state.modal.coord_system.id * 10;
 801501e:	4b75      	ldr	r3, [pc, #468]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015020:	7d19      	ldrb	r1, [r3, #20]
 8015022:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8015026:	0052      	lsls	r2, r2, #1
 8015028:	4613      	mov	r3, r2
                if(id > (CoordinateSystem_G59 * 10))
 801502a:	2a32      	cmp	r2, #50	@ 0x32
 801502c:	d901      	bls.n	8015032 <ngc_named_param_get_by_id+0x136>
                    id = (CoordinateSystem_G59 * 10) + gc_state.modal.coord_system.id - CoordinateSystem_G59;
 801502e:	f101 032d 	add.w	r3, r1, #45	@ 0x2d
                value = (float)(540 + id);
 8015032:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8015036:	ee00 3a10 	vmov	s0, r3
 801503a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 801503e:	e09f      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 8015040:	4b6c      	ldr	r3, [pc, #432]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015042:	79db      	ldrb	r3, [r3, #7]
 8015044:	2b00      	cmp	r3, #0
 8015046:	f000 80ab 	beq.w	80151a0 <ngc_named_param_get_by_id+0x2a4>
 801504a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801504e:	e097      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 8015050:	4b68      	ldr	r3, [pc, #416]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015052:	7f5b      	ldrb	r3, [r3, #29]
 8015054:	2b00      	cmp	r3, #0
 8015056:	f040 80a6 	bne.w	80151a6 <ngc_named_param_get_by_id+0x2aa>
 801505a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801505e:	e08f      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_RPos ? 1.0f : 0.0f;
 8015060:	4b64      	ldr	r3, [pc, #400]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015062:	7f5b      	ldrb	r3, [r3, #29]
 8015064:	2b01      	cmp	r3, #1
 8015066:	d002      	beq.n	801506e <ngc_named_param_get_by_id+0x172>
 8015068:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 801506c:	e088      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
 801506e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015072:	e085      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 8015074:	4b5f      	ldr	r3, [pc, #380]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015076:	7edb      	ldrb	r3, [r3, #27]
 8015078:	2b00      	cmp	r3, #0
 801507a:	f040 8097 	bne.w	80151ac <ngc_named_param_get_by_id+0x2b0>
 801507e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015082:	e07d      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS ? 1.0f : 0.0f;
 8015084:	4b5b      	ldr	r3, [pc, #364]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015086:	7edb      	ldrb	r3, [r3, #27]
 8015088:	2b01      	cmp	r3, #1
 801508a:	d002      	beq.n	8015092 <ngc_named_param_get_by_id+0x196>
 801508c:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8015090:	e076      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
 8015092:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015096:	e073      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 8015098:	4b56      	ldr	r3, [pc, #344]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 801509a:	795b      	ldrb	r3, [r3, #5]
 801509c:	2b00      	cmp	r3, #0
 801509e:	f000 8088 	beq.w	80151b2 <ngc_named_param_get_by_id+0x2b6>
 80150a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80150a6:	e06b      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 80150a8:	4b52      	ldr	r3, [pc, #328]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 80150aa:	795b      	ldrb	r3, [r3, #5]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	f000 8083 	beq.w	80151b8 <ngc_named_param_get_by_id+0x2bc>
 80150b2:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80150b6:	e063      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 80150b8:	4b4e      	ldr	r3, [pc, #312]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 80150ba:	7e9b      	ldrb	r3, [r3, #26]
 80150bc:	f013 0f01 	tst.w	r3, #1
 80150c0:	d07d      	beq.n	80151be <ngc_named_param_get_by_id+0x2c2>
 80150c2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80150c6:	e05b      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 80150c8:	4b4a      	ldr	r3, [pc, #296]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 80150ca:	7e9b      	ldrb	r3, [r3, #26]
 80150cc:	f013 0f02 	tst.w	r3, #2
 80150d0:	d078      	beq.n	80151c4 <ngc_named_param_get_by_id+0x2c8>
 80150d2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80150d6:	e053      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 80150d8:	4b46      	ldr	r3, [pc, #280]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 80150da:	7e5b      	ldrb	r3, [r3, #25]
 80150dc:	f013 0f02 	tst.w	r3, #2
 80150e0:	d073      	beq.n	80151ca <ngc_named_param_get_by_id+0x2ce>
 80150e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80150e6:	e04b      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 80150e8:	4b42      	ldr	r3, [pc, #264]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 80150ea:	7e5b      	ldrb	r3, [r3, #25]
 80150ec:	f013 0f01 	tst.w	r3, #1
 80150f0:	d06e      	beq.n	80151d0 <ngc_named_param_get_by_id+0x2d4>
 80150f2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80150f6:	e043      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 80150f8:	4b3e      	ldr	r3, [pc, #248]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 80150fa:	7f1b      	ldrb	r3, [r3, #28]
 80150fc:	f013 0f04 	tst.w	r3, #4
 8015100:	d069      	beq.n	80151d6 <ngc_named_param_get_by_id+0x2da>
 8015102:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8015106:	e03b      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 8015108:	4b3a      	ldr	r3, [pc, #232]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 801510a:	7f1b      	ldrb	r3, [r3, #28]
 801510c:	f013 0f01 	tst.w	r3, #1
 8015110:	d064      	beq.n	80151dc <ngc_named_param_get_by_id+0x2e0>
 8015112:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8015116:	e033      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 8015118:	4b36      	ldr	r3, [pc, #216]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 801511a:	7f1b      	ldrb	r3, [r3, #28]
 801511c:	f013 0f02 	tst.w	r3, #2
 8015120:	d05f      	beq.n	80151e2 <ngc_named_param_get_by_id+0x2e6>
 8015122:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8015126:	e02b      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.feed_rate;
 8015128:	4b32      	ldr	r3, [pc, #200]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 801512a:	ed93 0a18 	vldr	s0, [r3, #96]	@ 0x60
            break;
 801512e:	e027      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.spindle.rpm;
 8015130:	4b30      	ldr	r3, [pc, #192]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015132:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
            break;
 8015136:	e023      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = _relative_pos(id - NGCParam_x);
 8015138:	3820      	subs	r0, #32
 801513a:	f7ff fc57 	bl	80149ec <_relative_pos>
            break;
 801513e:	e01f      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = (float)gc_state.tool->tool_id;
 8015140:	4b2c      	ldr	r3, [pc, #176]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015142:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015146:	ed93 0a04 	vldr	s0, [r3, #16]
 801514a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 801514e:	e017      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 8015150:	4a28      	ldr	r2, [pc, #160]	@ (80151f4 <ngc_named_param_get_by_id+0x2f8>)
 8015152:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 8015154:	f8d2 20d0 	ldr.w	r2, [r2, #208]	@ 0xd0
 8015158:	6912      	ldr	r2, [r2, #16]
 801515a:	4293      	cmp	r3, r2
 801515c:	d044      	beq.n	80151e8 <ngc_named_param_get_by_id+0x2ec>
 801515e:	ee07 3a90 	vmov	s15, r3
 8015162:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8015166:	e00b      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = (float)ngc_call_level();
 8015168:	f7ff fec2 	bl	8014ef0 <ngc_call_level>
 801516c:	ee00 0a10 	vmov	s0, r0
 8015170:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            break;
 8015174:	e004      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = NAN;
 8015176:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8015200 <ngc_named_param_get_by_id+0x304>
 801517a:	e001      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = 0.0f; // TODO: derive from version letter?
 801517c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80151fc <ngc_named_param_get_by_id+0x300>
}
 8015180:	bd08      	pop	{r3, pc}
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 8015182:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015186:	e7fb      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 8015188:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 801518c:	e7f8      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 801518e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015192:	e7f5      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 8015194:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 8015198:	e7f2      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 801519a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 801519e:	e7ef      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 80151a0:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80151a4:	e7ec      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 80151a6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80151aa:	e7e9      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 80151ac:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80151b0:	e7e6      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 80151b2:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80151b6:	e7e3      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 80151b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80151bc:	e7e0      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 80151be:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80151c2:	e7dd      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 80151c4:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80151c8:	e7da      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 80151ca:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80151ce:	e7d7      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 80151d0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80151fc <ngc_named_param_get_by_id+0x300>
 80151d4:	e7d4      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 80151d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80151da:	e7d1      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 80151dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80151e0:	e7ce      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 80151e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80151e6:	e7cb      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 80151e8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
    return value;
 80151ec:	e7c8      	b.n	8015180 <ngc_named_param_get_by_id+0x284>
 80151ee:	bf00      	nop
 80151f0:	3f8ccccd 	.word	0x3f8ccccd
 80151f4:	20000ef8 	.word	0x20000ef8
 80151f8:	43c80000 	.word	0x43c80000
 80151fc:	00000000 	.word	0x00000000
 8015200:	7fc00000 	.word	0x7fc00000

08015204 <ngc_named_param_get>:
{
 8015204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015208:	4688      	mov	r8, r1
    name = ngc_name_tolower(name);
 801520a:	f7ff fbd1 	bl	80149b0 <ngc_name_tolower>
 801520e:	4607      	mov	r7, r0
    *value = 0.0f;
 8015210:	2300      	movs	r3, #0
 8015212:	f8c8 3000 	str.w	r3, [r8]
     if(*name == '_') do {
 8015216:	7803      	ldrb	r3, [r0, #0]
 8015218:	2b5f      	cmp	r3, #95	@ 0x5f
 801521a:	d008      	beq.n	801522e <ngc_named_param_get+0x2a>
    bool found = false;
 801521c:	2600      	movs	r6, #0
        void *context = *name == '_' ? NULL : call_context;
 801521e:	783b      	ldrb	r3, [r7, #0]
 8015220:	2b5f      	cmp	r3, #95	@ 0x5f
 8015222:	d026      	beq.n	8015272 <ngc_named_param_get+0x6e>
 8015224:	4b1d      	ldr	r3, [pc, #116]	@ (801529c <ngc_named_param_get+0x98>)
 8015226:	681d      	ldr	r5, [r3, #0]
        ngc_named_rw_param_t *rw_param = rw_global_params;
 8015228:	4b1d      	ldr	r3, [pc, #116]	@ (80152a0 <ngc_named_param_get+0x9c>)
 801522a:	681c      	ldr	r4, [r3, #0]
        while(rw_param && !found) {
 801522c:	e024      	b.n	8015278 <ngc_named_param_get+0x74>
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 801522e:	242e      	movs	r4, #46	@ 0x2e
 8015230:	e001      	b.n	8015236 <ngc_named_param_get+0x32>
    } while(idx && !found);
 8015232:	b1cc      	cbz	r4, 8015268 <ngc_named_param_get+0x64>
 8015234:	b1c5      	cbz	r5, 8015268 <ngc_named_param_get+0x64>
        idx--;
 8015236:	3c01      	subs	r4, #1
        if((found = !strcmp(name, ngc_named_ro_param[idx].name)))
 8015238:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801523c:	4b19      	ldr	r3, [pc, #100]	@ (80152a4 <ngc_named_param_get+0xa0>)
 801523e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015242:	4638      	mov	r0, r7
 8015244:	f7f2 fefc 	bl	8008040 <strcmp>
 8015248:	1e05      	subs	r5, r0, #0
 801524a:	bf0c      	ite	eq
 801524c:	2601      	moveq	r6, #1
 801524e:	2600      	movne	r6, #0
 8015250:	d1ef      	bne.n	8015232 <ngc_named_param_get+0x2e>
            *value = ngc_named_param_get_by_id(ngc_named_ro_param[idx].id);
 8015252:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8015256:	4b13      	ldr	r3, [pc, #76]	@ (80152a4 <ngc_named_param_get+0xa0>)
 8015258:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801525c:	7918      	ldrb	r0, [r3, #4]
 801525e:	f7ff fe4d 	bl	8014efc <ngc_named_param_get_by_id>
 8015262:	ed88 0a00 	vstr	s0, [r8]
 8015266:	e7e4      	b.n	8015232 <ngc_named_param_get+0x2e>
    if(!found) {
 8015268:	2e00      	cmp	r6, #0
 801526a:	d0d8      	beq.n	801521e <ngc_named_param_get+0x1a>
}
 801526c:	4630      	mov	r0, r6
 801526e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        void *context = *name == '_' ? NULL : call_context;
 8015272:	2500      	movs	r5, #0
 8015274:	e7d8      	b.n	8015228 <ngc_named_param_get+0x24>
                rw_param = rw_param->next;
 8015276:	6a24      	ldr	r4, [r4, #32]
        while(rw_param && !found) {
 8015278:	2c00      	cmp	r4, #0
 801527a:	d0f7      	beq.n	801526c <ngc_named_param_get+0x68>
 801527c:	2e00      	cmp	r6, #0
 801527e:	d1f5      	bne.n	801526c <ngc_named_param_get+0x68>
            if((found = rw_param->context == context && !strcmp(rw_param->name, name)))
 8015280:	6823      	ldr	r3, [r4, #0]
 8015282:	42ab      	cmp	r3, r5
 8015284:	d1f7      	bne.n	8015276 <ngc_named_param_get+0x72>
 8015286:	4639      	mov	r1, r7
 8015288:	1d20      	adds	r0, r4, #4
 801528a:	f7f2 fed9 	bl	8008040 <strcmp>
 801528e:	2800      	cmp	r0, #0
 8015290:	d1f1      	bne.n	8015276 <ngc_named_param_get+0x72>
                *value = rw_param->value;
 8015292:	69e3      	ldr	r3, [r4, #28]
 8015294:	f8c8 3000 	str.w	r3, [r8]
            if((found = rw_param->context == context && !strcmp(rw_param->name, name)))
 8015298:	2601      	movs	r6, #1
 801529a:	e7ed      	b.n	8015278 <ngc_named_param_get+0x74>
 801529c:	200016c4 	.word	0x200016c4
 80152a0:	20001640 	.word	0x20001640
 80152a4:	0802b108 	.word	0x0802b108

080152a8 <ngc_float_decimals>:

uint8_t ngc_float_decimals (void)
{
	return settings.flags.report_inches ? N_DECIMAL_COORDVALUE_INCH : N_DECIMAL_COORDVALUE_MM;
 80152a8:	4b04      	ldr	r3, [pc, #16]	@ (80152bc <ngc_float_decimals+0x14>)
 80152aa:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80152ae:	f013 0f01 	tst.w	r3, #1
 80152b2:	d001      	beq.n	80152b8 <ngc_float_decimals+0x10>
 80152b4:	2004      	movs	r0, #4
 80152b6:	4770      	bx	lr
 80152b8:	2003      	movs	r0, #3
}
 80152ba:	4770      	bx	lr
 80152bc:	20001bd8 	.word	0x20001bd8

080152c0 <uitoa>:
// Converts an uint32 variable to string.
char *uitoa (uint32_t n)
{
    char *bptr = buf + sizeof(buf);

    *--bptr = '\0';
 80152c0:	4b0d      	ldr	r3, [pc, #52]	@ (80152f8 <uitoa+0x38>)
 80152c2:	2200      	movs	r2, #0
 80152c4:	739a      	strb	r2, [r3, #14]

    if (n == 0)
 80152c6:	4602      	mov	r2, r0
 80152c8:	b9a0      	cbnz	r0, 80152f4 <uitoa+0x34>
        *--bptr = '0';
 80152ca:	4618      	mov	r0, r3
 80152cc:	2330      	movs	r3, #48	@ 0x30
 80152ce:	f800 3f0d 	strb.w	r3, [r0, #13]!
 80152d2:	4770      	bx	lr
    else while (n) {
        *--bptr = '0' + (n % 10);
 80152d4:	4b09      	ldr	r3, [pc, #36]	@ (80152fc <uitoa+0x3c>)
 80152d6:	fba3 1302 	umull	r1, r3, r3, r2
 80152da:	08db      	lsrs	r3, r3, #3
 80152dc:	4619      	mov	r1, r3
 80152de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80152e2:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 80152e6:	3330      	adds	r3, #48	@ 0x30
 80152e8:	f800 3d01 	strb.w	r3, [r0, #-1]!
        n /= 10;
 80152ec:	460a      	mov	r2, r1
    else while (n) {
 80152ee:	2a00      	cmp	r2, #0
 80152f0:	d1f0      	bne.n	80152d4 <uitoa+0x14>
    }

    return bptr;
}
 80152f2:	4770      	bx	lr
    *--bptr = '\0';
 80152f4:	4802      	ldr	r0, [pc, #8]	@ (8015300 <uitoa+0x40>)
 80152f6:	e7fa      	b.n	80152ee <uitoa+0x2e>
 80152f8:	200016ec 	.word	0x200016ec
 80152fc:	cccccccd 	.word	0xcccccccd
 8015300:	200016fa 	.word	0x200016fa

08015304 <ftoa>:

// Convert float to string by immediately converting to integers.
// Number of decimal places, which are tracked by a counter, must be set by the user.
// The integers is then efficiently converted to a string.
char *ftoa (float n, uint8_t decimal_places)
{
 8015304:	b410      	push	{r4}
    bool isNegative;
    char *bptr = buf + sizeof(buf);

    *--bptr = '\0';
 8015306:	4b38      	ldr	r3, [pc, #224]	@ (80153e8 <ftoa+0xe4>)
 8015308:	2200      	movs	r2, #0
 801530a:	739a      	strb	r2, [r3, #14]

    if ((isNegative = n < 0.0f))
 801530c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015314:	d413      	bmi.n	801533e <ftoa+0x3a>
 8015316:	eeb0 7a40 	vmov.f32	s14, s0
        n = -n;

    n += froundvalues[decimal_places];
 801531a:	4b34      	ldr	r3, [pc, #208]	@ (80153ec <ftoa+0xe8>)
 801531c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015320:	edd3 7a00 	vldr	s15, [r3]
 8015324:	ee77 7a87 	vadd.f32	s15, s15, s14

    uint32_t a = (uint32_t)n;
 8015328:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801532c:	ee17 1a10 	vmov	r1, s14

    if (decimal_places) {
 8015330:	b390      	cbz	r0, 8015398 <ftoa+0x94>

        n -= (float)a;
 8015332:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015336:	ee77 7ac7 	vsub.f32	s15, s15, s14

        uint_fast8_t decimals = decimal_places;
 801533a:	4603      	mov	r3, r0
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 801533c:	e007      	b.n	801534e <ftoa+0x4a>
        n = -n;
 801533e:	eeb1 7a40 	vneg.f32	s14, s0
 8015342:	e7ea      	b.n	801531a <ftoa+0x16>
            n *= 100.0f;
 8015344:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80153f0 <ftoa+0xec>
 8015348:	ee67 7a87 	vmul.f32	s15, s15, s14
            decimals -= 2;
 801534c:	3b02      	subs	r3, #2
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 801534e:	2b01      	cmp	r3, #1
 8015350:	d8f8      	bhi.n	8015344 <ftoa+0x40>
        }

        if (decimals)
 8015352:	b11b      	cbz	r3, 801535c <ftoa+0x58>
            n *= 10.0f;
 8015354:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015358:	ee67 7a87 	vmul.f32	s15, s15, s14

        uint32_t b = (uint32_t)n;
 801535c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015360:	ee17 2a90 	vmov	r2, s15
    *--bptr = '\0';
 8015364:	4c23      	ldr	r4, [pc, #140]	@ (80153f4 <ftoa+0xf0>)

        while(decimal_places--) {
 8015366:	e003      	b.n	8015370 <ftoa+0x6c>
            if(b) {
                *--bptr = (b % 10) + '0'; // Get digit
                b /= 10;
            } else
                *--bptr = '0';
 8015368:	2330      	movs	r3, #48	@ 0x30
 801536a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 801536e:	4660      	mov	r0, ip
        while(decimal_places--) {
 8015370:	1e43      	subs	r3, r0, #1
 8015372:	fa5f fc83 	uxtb.w	ip, r3
 8015376:	b180      	cbz	r0, 801539a <ftoa+0x96>
            if(b) {
 8015378:	2a00      	cmp	r2, #0
 801537a:	d0f5      	beq.n	8015368 <ftoa+0x64>
                *--bptr = (b % 10) + '0'; // Get digit
 801537c:	4b1e      	ldr	r3, [pc, #120]	@ (80153f8 <ftoa+0xf4>)
 801537e:	fba3 0302 	umull	r0, r3, r3, r2
 8015382:	08db      	lsrs	r3, r3, #3
 8015384:	4618      	mov	r0, r3
 8015386:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801538a:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 801538e:	3330      	adds	r3, #48	@ 0x30
 8015390:	f804 3d01 	strb.w	r3, [r4, #-1]!
                b /= 10;
 8015394:	4602      	mov	r2, r0
 8015396:	e7ea      	b.n	801536e <ftoa+0x6a>
    *--bptr = '\0';
 8015398:	4c16      	ldr	r4, [pc, #88]	@ (80153f4 <ftoa+0xf0>)
        }
    }

    *--bptr = '.'; // Always add decimal point (TODO: is this really needed?)
 801539a:	1e60      	subs	r0, r4, #1
 801539c:	232e      	movs	r3, #46	@ 0x2e
 801539e:	f804 3c01 	strb.w	r3, [r4, #-1]

    if(a == 0)
 80153a2:	b9c1      	cbnz	r1, 80153d6 <ftoa+0xd2>
        *--bptr = '0';
 80153a4:	1ea0      	subs	r0, r4, #2
 80153a6:	2330      	movs	r3, #48	@ 0x30
 80153a8:	f804 3c02 	strb.w	r3, [r4, #-2]
    else while(a) {
        *--bptr = (a % 10) + '0'; // Get digit
        a /= 10;
    }

    if(isNegative)
 80153ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80153b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153b4:	d412      	bmi.n	80153dc <ftoa+0xd8>
        *--bptr = '-';

    return bptr;
}
 80153b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153ba:	4770      	bx	lr
        *--bptr = (a % 10) + '0'; // Get digit
 80153bc:	4b0e      	ldr	r3, [pc, #56]	@ (80153f8 <ftoa+0xf4>)
 80153be:	fba3 2301 	umull	r2, r3, r3, r1
 80153c2:	08db      	lsrs	r3, r3, #3
 80153c4:	461a      	mov	r2, r3
 80153c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80153ca:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 80153ce:	3330      	adds	r3, #48	@ 0x30
 80153d0:	f800 3d01 	strb.w	r3, [r0, #-1]!
        a /= 10;
 80153d4:	4611      	mov	r1, r2
    else while(a) {
 80153d6:	2900      	cmp	r1, #0
 80153d8:	d1f0      	bne.n	80153bc <ftoa+0xb8>
 80153da:	e7e7      	b.n	80153ac <ftoa+0xa8>
        *--bptr = '-';
 80153dc:	232d      	movs	r3, #45	@ 0x2d
 80153de:	f800 3c01 	strb.w	r3, [r0, #-1]
 80153e2:	3801      	subs	r0, #1
    return bptr;
 80153e4:	e7e7      	b.n	80153b6 <ftoa+0xb2>
 80153e6:	bf00      	nop
 80153e8:	200016ec 	.word	0x200016ec
 80153ec:	0802b3f8 	.word	0x0802b3f8
 80153f0:	42c80000 	.word	0x42c80000
 80153f4:	200016fa 	.word	0x200016fa
 80153f8:	cccccccd 	.word	0xcccccccd

080153fc <trim_float>:

// Trim trailing zeros and possibly decimal point
char *trim_float (char *s)
{
 80153fc:	b510      	push	{r4, lr}
 80153fe:	4604      	mov	r4, r0
    if(strchr(s, '.')) {
 8015400:	212e      	movs	r1, #46	@ 0x2e
 8015402:	f00f f92b 	bl	802465c <strchr>
 8015406:	b168      	cbz	r0, 8015424 <trim_float+0x28>
        char *s2 = strchr(s, '\0') - 1;
 8015408:	4620      	mov	r0, r4
 801540a:	f7f2 fe79 	bl	8008100 <strlen>
 801540e:	1e43      	subs	r3, r0, #1
 8015410:	4423      	add	r3, r4
        while(*s2 == '0')
 8015412:	e002      	b.n	801541a <trim_float+0x1e>
            *s2-- = '\0';
 8015414:	2200      	movs	r2, #0
 8015416:	f803 2901 	strb.w	r2, [r3], #-1
        while(*s2 == '0')
 801541a:	781a      	ldrb	r2, [r3, #0]
 801541c:	2a30      	cmp	r2, #48	@ 0x30
 801541e:	d0f9      	beq.n	8015414 <trim_float+0x18>
        if(*s2 == '.')
 8015420:	2a2e      	cmp	r2, #46	@ 0x2e
 8015422:	d001      	beq.n	8015428 <trim_float+0x2c>
            *s2 = '\0';
    }

    return s;
}
 8015424:	4620      	mov	r0, r4
 8015426:	bd10      	pop	{r4, pc}
            *s2 = '\0';
 8015428:	2200      	movs	r2, #0
 801542a:	701a      	strb	r2, [r3, #0]
 801542c:	e7fa      	b.n	8015424 <trim_float+0x28>
	...

08015430 <read_uint>:

// Extracts an unsigned integer value from a string.
status_code_t read_uint (char *line, uint_fast8_t *char_counter, uint32_t *uint_ptr)
{
 8015430:	b570      	push	{r4, r5, r6, lr}
    char *ptr = line + *char_counter;
 8015432:	680b      	ldr	r3, [r1, #0]
 8015434:	18c4      	adds	r4, r0, r3
    uint_fast8_t ndigit = 0, c;
    uint32_t intval = 0;
    bool isdecimal = false, ok = false;

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 8015436:	5cc3      	ldrb	r3, [r0, r3]

    if (c == '-')
 8015438:	2b2d      	cmp	r3, #45	@ 0x2d
 801543a:	d03b      	beq.n	80154b4 <read_uint+0x84>
 801543c:	f104 0c01 	add.w	ip, r4, #1
        return Status_NegativeValue;

    // Skip initial sign character
    if (c == '+')
 8015440:	2b2b      	cmp	r3, #43	@ 0x2b
 8015442:	d004      	beq.n	801544e <read_uint+0x1e>

    // Extract number into fast integer. Track decimal in terms of exponent value.
    while(c) {
        c -= '0';
        if (c <= 9) {
            ok = true;
 8015444:	2600      	movs	r6, #0
 8015446:	4635      	mov	r5, r6
 8015448:	4634      	mov	r4, r6
 801544a:	46b6      	mov	lr, r6
 801544c:	e019      	b.n	8015482 <read_uint+0x52>
        c = *ptr++;
 801544e:	f104 0c02 	add.w	ip, r4, #2
 8015452:	7863      	ldrb	r3, [r4, #1]
 8015454:	e7f6      	b.n	8015444 <read_uint+0x14>
            if(!isdecimal && (c != 0 || intval))
                ndigit++;
            if (isdecimal && c != 0)
 8015456:	bb7b      	cbnz	r3, 80154b8 <read_uint+0x88>
                return Status_GcodeCommandValueNotInteger;

            if ((ndigit <= 9 || c <= 4) && intval <= 429496729) {
 8015458:	f1be 0f09 	cmp.w	lr, #9
 801545c:	d901      	bls.n	8015462 <read_uint+0x32>
 801545e:	2b04      	cmp	r3, #4
 8015460:	d81b      	bhi.n	801549a <read_uint+0x6a>
 8015462:	4e17      	ldr	r6, [pc, #92]	@ (80154c0 <read_uint+0x90>)
 8015464:	42b4      	cmp	r4, r6
 8015466:	d81a      	bhi.n	801549e <read_uint+0x6e>
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015468:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801546c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
            ok = true;
 8015470:	2601      	movs	r6, #1
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015472:	e004      	b.n	801547e <read_uint+0x4e>
            } else if (!isdecimal)
                exp++;  // Drop overflow digits
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8015474:	f113 0f02 	cmn.w	r3, #2
 8015478:	d113      	bne.n	80154a2 <read_uint+0x72>
 801547a:	b995      	cbnz	r5, 80154a2 <read_uint+0x72>
            isdecimal = true;
 801547c:	2501      	movs	r5, #1
         else
            break;

        c = *ptr++;
 801547e:	f81c 3b01 	ldrb.w	r3, [ip], #1
    while(c) {
 8015482:	b173      	cbz	r3, 80154a2 <read_uint+0x72>
        c -= '0';
 8015484:	3b30      	subs	r3, #48	@ 0x30
        if (c <= 9) {
 8015486:	2b09      	cmp	r3, #9
 8015488:	d8f4      	bhi.n	8015474 <read_uint+0x44>
            if(!isdecimal && (c != 0 || intval))
 801548a:	2d00      	cmp	r5, #0
 801548c:	d1e3      	bne.n	8015456 <read_uint+0x26>
 801548e:	b90b      	cbnz	r3, 8015494 <read_uint+0x64>
 8015490:	2c00      	cmp	r4, #0
 8015492:	d0e1      	beq.n	8015458 <read_uint+0x28>
                ndigit++;
 8015494:	f10e 0e01 	add.w	lr, lr, #1
 8015498:	e7de      	b.n	8015458 <read_uint+0x28>
            ok = true;
 801549a:	2601      	movs	r6, #1
 801549c:	e7ef      	b.n	801547e <read_uint+0x4e>
 801549e:	2601      	movs	r6, #1
 80154a0:	e7ed      	b.n	801547e <read_uint+0x4e>
    }

    // Return if no digits have been read.

    if (!ok)
 80154a2:	b15e      	cbz	r6, 80154bc <read_uint+0x8c>
        return Status_BadNumberFormat;

    *uint_ptr = intval; // Assign value.
 80154a4:	6014      	str	r4, [r2, #0]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 80154a6:	ebac 0c00 	sub.w	ip, ip, r0
 80154aa:	f10c 33ff 	add.w	r3, ip, #4294967295
 80154ae:	600b      	str	r3, [r1, #0]

    return Status_OK;
 80154b0:	2000      	movs	r0, #0
}
 80154b2:	bd70      	pop	{r4, r5, r6, pc}
        return Status_NegativeValue;
 80154b4:	2004      	movs	r0, #4
 80154b6:	e7fc      	b.n	80154b2 <read_uint+0x82>
                return Status_GcodeCommandValueNotInteger;
 80154b8:	2017      	movs	r0, #23
 80154ba:	e7fa      	b.n	80154b2 <read_uint+0x82>
        return Status_BadNumberFormat;
 80154bc:	2002      	movs	r0, #2
 80154be:	e7f8      	b.n	80154b2 <read_uint+0x82>
 80154c0:	19999999 	.word	0x19999999

080154c4 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
bool read_float (char *line, uint_fast8_t *char_counter, float *float_ptr)
{
 80154c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154c8:	4607      	mov	r7, r0
    char *ptr = line + *char_counter;
 80154ca:	6808      	ldr	r0, [r1, #0]
 80154cc:	183b      	adds	r3, r7, r0
    uint_fast8_t ndigit = 0, c;
    uint32_t intval = 0;
    bool isnegative, isdecimal = false, ok = false;

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 80154ce:	f817 8000 	ldrb.w	r8, [r7, r0]

    // Capture initial sign character
    if ((isnegative = (c == '-')) || c == '+')
 80154d2:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 80154d6:	d006      	beq.n	80154e6 <read_float+0x22>
 80154d8:	f103 0c01 	add.w	ip, r3, #1
 80154dc:	f1b8 0f2b 	cmp.w	r8, #43	@ 0x2b
 80154e0:	d001      	beq.n	80154e6 <read_float+0x22>
    c = *ptr++;
 80154e2:	4643      	mov	r3, r8
 80154e4:	e002      	b.n	80154ec <read_float+0x28>
        c = *ptr++;
 80154e6:	f103 0c02 	add.w	ip, r3, #2
 80154ea:	785b      	ldrb	r3, [r3, #1]
    c = *ptr++;
 80154ec:	2000      	movs	r0, #0
 80154ee:	4605      	mov	r5, r0
 80154f0:	4604      	mov	r4, r0
 80154f2:	4606      	mov	r6, r0
 80154f4:	4686      	mov	lr, r0
 80154f6:	e00b      	b.n	8015510 <read_float+0x4c>
                ndigit++;
            if (ndigit <= MAX_INT_DIGITS) {
                if (isdecimal)
                    exp--;
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
            } else if (!isdecimal)
 80154f8:	b9e5      	cbnz	r5, 8015534 <read_float+0x70>
                exp++;  // Drop overflow digits
 80154fa:	f10e 0e01 	add.w	lr, lr, #1
            ok = true;
 80154fe:	2001      	movs	r0, #1
 8015500:	e004      	b.n	801550c <read_float+0x48>
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8015502:	f113 0f02 	cmn.w	r3, #2
 8015506:	d117      	bne.n	8015538 <read_float+0x74>
 8015508:	b9b5      	cbnz	r5, 8015538 <read_float+0x74>
            isdecimal = true;
 801550a:	2501      	movs	r5, #1
         else
            break;

        c = *ptr++;
 801550c:	f81c 3b01 	ldrb.w	r3, [ip], #1
    while(c) {
 8015510:	b193      	cbz	r3, 8015538 <read_float+0x74>
        c -= '0';
 8015512:	3b30      	subs	r3, #48	@ 0x30
        if (c <= 9) {
 8015514:	2b09      	cmp	r3, #9
 8015516:	d8f4      	bhi.n	8015502 <read_float+0x3e>
            if(c != 0 || intval)
 8015518:	b903      	cbnz	r3, 801551c <read_float+0x58>
 801551a:	b104      	cbz	r4, 801551e <read_float+0x5a>
                ndigit++;
 801551c:	3601      	adds	r6, #1
            if (ndigit <= MAX_INT_DIGITS) {
 801551e:	2e09      	cmp	r6, #9
 8015520:	d8ea      	bhi.n	80154f8 <read_float+0x34>
                if (isdecimal)
 8015522:	b10d      	cbz	r5, 8015528 <read_float+0x64>
                    exp--;
 8015524:	f10e 3eff 	add.w	lr, lr, #4294967295
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 8015528:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801552c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
            ok = true;
 8015530:	2001      	movs	r0, #1
 8015532:	e7eb      	b.n	801550c <read_float+0x48>
 8015534:	4628      	mov	r0, r5
 8015536:	e7e9      	b.n	801550c <read_float+0x48>
    }

    // Return if no digits have been read.
    if (!ok)
 8015538:	b190      	cbz	r0, 8015560 <read_float+0x9c>
        return false;

    // Convert integer into floating point.
    float fval = (float)intval;
 801553a:	ee07 4a90 	vmov	s15, r4
 801553e:	eef8 7a67 	vcvt.f32.u32	s15, s15

    // Apply decimal. Should perform no more than two floating point multiplications for the
    // expected range of E0 to E-4.
    if (fval != 0.0f) {
 8015542:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554a:	d10b      	bne.n	8015564 <read_float+0xa0>
            fval *= 10.0f;
        } while (--exp > 0);
    }

    // Assign floating point value with correct sign.
    *float_ptr = isnegative ? - fval : fval;
 801554c:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 8015550:	d027      	beq.n	80155a2 <read_float+0xde>
 8015552:	edc2 7a00 	vstr	s15, [r2]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 8015556:	ebac 0c07 	sub.w	ip, ip, r7
 801555a:	f10c 33ff 	add.w	r3, ip, #4294967295
 801555e:	600b      	str	r3, [r1, #0]

    return true;
}
 8015560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (exp <= -2) {
 8015564:	f1be 3fff 	cmp.w	lr, #4294967295
 8015568:	da06      	bge.n	8015578 <read_float+0xb4>
            fval *= 0.01f;
 801556a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80155a8 <read_float+0xe4>
 801556e:	ee67 7a87 	vmul.f32	s15, s15, s14
            exp += 2;
 8015572:	f10e 0e02 	add.w	lr, lr, #2
 8015576:	e7f5      	b.n	8015564 <read_float+0xa0>
        if (exp < 0)
 8015578:	f1be 0f00 	cmp.w	lr, #0
 801557c:	db0c      	blt.n	8015598 <read_float+0xd4>
        else if (exp > 0) do {
 801557e:	f1be 0f00 	cmp.w	lr, #0
 8015582:	dde3      	ble.n	801554c <read_float+0x88>
            fval *= 10.0f;
 8015584:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8015588:	ee67 7a87 	vmul.f32	s15, s15, s14
        } while (--exp > 0);
 801558c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015590:	f1be 0f00 	cmp.w	lr, #0
 8015594:	dcf6      	bgt.n	8015584 <read_float+0xc0>
 8015596:	e7d9      	b.n	801554c <read_float+0x88>
            fval *= 0.1f;
 8015598:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80155ac <read_float+0xe8>
 801559c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155a0:	e7d4      	b.n	801554c <read_float+0x88>
    *float_ptr = isnegative ? - fval : fval;
 80155a2:	eef1 7a67 	vneg.f32	s15, s15
 80155a6:	e7d4      	b.n	8015552 <read_float+0x8e>
 80155a8:	3c23d70a 	.word	0x3c23d70a
 80155ac:	3dcccccd 	.word	0x3dcccccd

080155b0 <isintf>:

// Returns true if float value is a whole number (integer)
bool isintf (float value)
{
 80155b0:	b508      	push	{r3, lr}
 80155b2:	ed2d 8b02 	vpush	{d8}
 80155b6:	eeb0 8a40 	vmov.f32	s16, s0
    return value != NAN && fabsf(value - truncf(value)) < 0.001f;
 80155ba:	f011 ff51 	bl	8027460 <truncf>
 80155be:	ee38 8a40 	vsub.f32	s16, s16, s0
 80155c2:	eeb0 8ac8 	vabs.f32	s16, s16
 80155c6:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80155e0 <isintf+0x30>
 80155ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80155ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 80155d2:	bf4c      	ite	mi
 80155d4:	2001      	movmi	r0, #1
 80155d6:	2000      	movpl	r0, #0
 80155d8:	ecbd 8b02 	vpop	{d8}
 80155dc:	bd08      	pop	{r3, pc}
 80155de:	bf00      	nop
 80155e0:	3a83126f 	.word	0x3a83126f

080155e4 <delay_sec>:

// Non-blocking delay function used for general operation and suspend features.
bool delay_sec (float seconds, delaymode_t mode)
{
 80155e4:	b570      	push	{r4, r5, r6, lr}
 80155e6:	4606      	mov	r6, r0
    bool ok = true;

    uint_fast16_t i = (uint_fast16_t)ceilf((1000.0f / DWELL_TIME_STEP) * seconds) + 1;
 80155e8:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 80155ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80155f0:	f011 fe8c 	bl	802730c <ceilf>
 80155f4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80155f8:	ee10 5a10 	vmov	r5, s0
 80155fc:	3501      	adds	r5, #1
    bool ok = true;
 80155fe:	2401      	movs	r4, #1

    while(--i && ok) {
 8015600:	e00d      	b.n	801561e <delay_sec+0x3a>
        if(mode == DelayMode_Dwell)
            ok = protocol_execute_realtime();
        else // DelayMode_SysSuspende, xecute rt_system() only to avoid nesting suspend loops.
            ok = protocol_exec_rt_system() && !state_door_reopened(); // Bail, if safety door reopens.
 8015602:	f001 fa91 	bl	8016b28 <protocol_exec_rt_system>
 8015606:	4604      	mov	r4, r0
 8015608:	b188      	cbz	r0, 801562e <delay_sec+0x4a>
 801560a:	f009 f907 	bl	801e81c <state_door_reopened>
 801560e:	b108      	cbz	r0, 8015614 <delay_sec+0x30>
 8015610:	2400      	movs	r4, #0
 8015612:	e00c      	b.n	801562e <delay_sec+0x4a>
        if(ok)
            hal.delay_ms(DWELL_TIME_STEP, NULL); // Delay DWELL_TIME_STEP increment
 8015614:	4b08      	ldr	r3, [pc, #32]	@ (8015638 <delay_sec+0x54>)
 8015616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015618:	2100      	movs	r1, #0
 801561a:	2032      	movs	r0, #50	@ 0x32
 801561c:	4798      	blx	r3
    while(--i && ok) {
 801561e:	3d01      	subs	r5, #1
 8015620:	d008      	beq.n	8015634 <delay_sec+0x50>
 8015622:	b13c      	cbz	r4, 8015634 <delay_sec+0x50>
        if(mode == DelayMode_Dwell)
 8015624:	2e00      	cmp	r6, #0
 8015626:	d1ec      	bne.n	8015602 <delay_sec+0x1e>
            ok = protocol_execute_realtime();
 8015628:	f001 fda6 	bl	8017178 <protocol_execute_realtime>
 801562c:	4604      	mov	r4, r0
        if(ok)
 801562e:	2c00      	cmp	r4, #0
 8015630:	d0f5      	beq.n	801561e <delay_sec+0x3a>
 8015632:	e7ef      	b.n	8015614 <delay_sec+0x30>
    }

    return ok;
}
 8015634:	4620      	mov	r0, r4
 8015636:	bd70      	pop	{r4, r5, r6, pc}
 8015638:	200011c0 	.word	0x200011c0

0801563c <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector (float *vector)
{
 801563c:	b510      	push	{r4, lr}
 801563e:	4604      	mov	r4, r0
    uint_fast8_t idx = N_AXIS;
    float magnitude = 0.0f, inv_magnitude;
 8015640:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8015690 <convert_delta_vector_to_unit_vector+0x54>
    uint_fast8_t idx = N_AXIS;
 8015644:	2303      	movs	r3, #3
 8015646:	e004      	b.n	8015652 <convert_delta_vector_to_unit_vector+0x16>

    do {
        if (vector[--idx] != 0.0f)
            magnitude += vector[idx] * vector[idx];
 8015648:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801564c:	ee30 0a27 	vadd.f32	s0, s0, s15
    } while(idx);
 8015650:	b153      	cbz	r3, 8015668 <convert_delta_vector_to_unit_vector+0x2c>
        if (vector[--idx] != 0.0f)
 8015652:	3b01      	subs	r3, #1
 8015654:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015658:	edd2 7a00 	vldr	s15, [r2]
 801565c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015664:	d0f4      	beq.n	8015650 <convert_delta_vector_to_unit_vector+0x14>
 8015666:	e7ef      	b.n	8015648 <convert_delta_vector_to_unit_vector+0xc>

    idx = N_AXIS;
    magnitude = sqrtf(magnitude);
 8015668:	f011 fd42 	bl	80270f0 <sqrtf>
    inv_magnitude = 1.0f / magnitude;
 801566c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015670:	ee87 7a80 	vdiv.f32	s14, s15, s0
    idx = N_AXIS;
 8015674:	2303      	movs	r3, #3

    do {
        vector[--idx] *= inv_magnitude;
 8015676:	3b01      	subs	r3, #1
 8015678:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801567c:	edd2 7a00 	vldr	s15, [r2]
 8015680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015684:	edc2 7a00 	vstr	s15, [r2]
    } while(idx);
 8015688:	2b00      	cmp	r3, #0
 801568a:	d1f4      	bne.n	8015676 <convert_delta_vector_to_unit_vector+0x3a>

    return magnitude;
}
 801568c:	bd10      	pop	{r4, pc}
 801568e:	bf00      	nop
 8015690:	00000000 	.word	0x00000000

08015694 <get_datetime>:

// parse ISO8601 datetime: YYYY-MM-DDTHH:MM:SSZxxx
struct tm *get_datetime (const char *s)
{
 8015694:	b570      	push	{r4, r5, r6, lr}
 8015696:	4604      	mov	r4, r0
    PROGMEM static const uint8_t mdays[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    char *s1 = (char *)s, c;
    uint_fast16_t idx = 0, value = 0;

    memset(&dt, 0, sizeof(struct tm));
 8015698:	4d49      	ldr	r5, [pc, #292]	@ (80157c0 <get_datetime+0x12c>)
 801569a:	2224      	movs	r2, #36	@ 0x24
 801569c:	2100      	movs	r1, #0
 801569e:	4628      	mov	r0, r5
 80156a0:	f00e ffc5 	bl	802462e <memset>
    dt.tm_year = dt.tm_mon = dt.tm_mday = dt.tm_hour = dt.tm_min = dt.tm_sec = -1;
 80156a4:	f04f 33ff 	mov.w	r3, #4294967295
 80156a8:	602b      	str	r3, [r5, #0]
 80156aa:	606b      	str	r3, [r5, #4]
 80156ac:	60ab      	str	r3, [r5, #8]
 80156ae:	60eb      	str	r3, [r5, #12]
 80156b0:	612b      	str	r3, [r5, #16]
 80156b2:	616b      	str	r3, [r5, #20]
    uint_fast16_t idx = 0, value = 0;
 80156b4:	2200      	movs	r2, #0
 80156b6:	4611      	mov	r1, r2
 80156b8:	e005      	b.n	80156c6 <get_datetime+0x32>

    do {
        c = *s1++;

        if(isdigit(c))
            value = (value * 10) + c - '0';
 80156ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80156be:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80156c2:	3a30      	subs	r2, #48	@ 0x30
                    break;
            }
            idx++;
            value = 0;
        }
    } while(c);
 80156c4:	b1c3      	cbz	r3, 80156f8 <get_datetime+0x64>
        c = *s1++;
 80156c6:	7823      	ldrb	r3, [r4, #0]
 80156c8:	3401      	adds	r4, #1
        if(isdigit(c))
 80156ca:	483e      	ldr	r0, [pc, #248]	@ (80157c4 <get_datetime+0x130>)
 80156cc:	5cc0      	ldrb	r0, [r0, r3]
 80156ce:	f010 0f04 	tst.w	r0, #4
 80156d2:	d1f2      	bne.n	80156ba <get_datetime+0x26>
        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 80156d4:	2b54      	cmp	r3, #84	@ 0x54
 80156d6:	d004      	beq.n	80156e2 <get_datetime+0x4e>
 80156d8:	d80a      	bhi.n	80156f0 <get_datetime+0x5c>
 80156da:	2b2d      	cmp	r3, #45	@ 0x2d
 80156dc:	d001      	beq.n	80156e2 <get_datetime+0x4e>
 80156de:	2b3a      	cmp	r3, #58	@ 0x3a
 80156e0:	d108      	bne.n	80156f4 <get_datetime+0x60>
            switch(idx) {
 80156e2:	2905      	cmp	r1, #5
 80156e4:	d81a      	bhi.n	801571c <get_datetime+0x88>
 80156e6:	e8df f001 	tbb	[pc, r1]
 80156ea:	2917      	.short	0x2917
 80156ec:	5f585133 	.word	0x5f585133
 80156f0:	2b5a      	cmp	r3, #90	@ 0x5a
 80156f2:	d0f6      	beq.n	80156e2 <get_datetime+0x4e>
        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d0f4      	beq.n	80156e2 <get_datetime+0x4e>

    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 80156f8:	4a31      	ldr	r2, [pc, #196]	@ (80157c0 <get_datetime+0x12c>)
 80156fa:	6953      	ldr	r3, [r2, #20]
 80156fc:	6911      	ldr	r1, [r2, #16]
 80156fe:	430b      	orrs	r3, r1
 8015700:	68d1      	ldr	r1, [r2, #12]
 8015702:	430b      	orrs	r3, r1
 8015704:	6891      	ldr	r1, [r2, #8]
 8015706:	430b      	orrs	r3, r1
 8015708:	6851      	ldr	r1, [r2, #4]
 801570a:	430b      	orrs	r3, r1
 801570c:	6812      	ldr	r2, [r2, #0]
 801570e:	4313      	orrs	r3, r2
 8015710:	2b00      	cmp	r3, #0
 8015712:	dd52      	ble.n	80157ba <get_datetime+0x126>
 8015714:	482a      	ldr	r0, [pc, #168]	@ (80157c0 <get_datetime+0x12c>)
}
 8015716:	bd70      	pop	{r4, r5, r6, pc}
                    if(c == '-' && value >= 1970 && value <= 2099)
 8015718:	2b2d      	cmp	r3, #45	@ 0x2d
 801571a:	d002      	beq.n	8015722 <get_datetime+0x8e>
            idx++;
 801571c:	3101      	adds	r1, #1
            value = 0;
 801571e:	2200      	movs	r2, #0
 8015720:	e7d0      	b.n	80156c4 <get_datetime+0x30>
                    if(c == '-' && value >= 1970 && value <= 2099)
 8015722:	f240 70b1 	movw	r0, #1969	@ 0x7b1
 8015726:	4282      	cmp	r2, r0
 8015728:	d9f8      	bls.n	801571c <get_datetime+0x88>
 801572a:	f640 0033 	movw	r0, #2099	@ 0x833
 801572e:	4282      	cmp	r2, r0
 8015730:	d8f4      	bhi.n	801571c <get_datetime+0x88>
                        dt.tm_year = value - 1900;
 8015732:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 8015736:	4822      	ldr	r0, [pc, #136]	@ (80157c0 <get_datetime+0x12c>)
 8015738:	6142      	str	r2, [r0, #20]
 801573a:	e7ef      	b.n	801571c <get_datetime+0x88>
                    if(c == '-' && value >= 1 && value <= 12)
 801573c:	2b2d      	cmp	r3, #45	@ 0x2d
 801573e:	d1ed      	bne.n	801571c <get_datetime+0x88>
 8015740:	2a00      	cmp	r2, #0
 8015742:	d0eb      	beq.n	801571c <get_datetime+0x88>
 8015744:	2a0c      	cmp	r2, #12
 8015746:	d8e9      	bhi.n	801571c <get_datetime+0x88>
                        dt.tm_mon = value - 1;
 8015748:	3a01      	subs	r2, #1
 801574a:	481d      	ldr	r0, [pc, #116]	@ (80157c0 <get_datetime+0x12c>)
 801574c:	6102      	str	r2, [r0, #16]
 801574e:	e7e5      	b.n	801571c <get_datetime+0x88>
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 8015750:	2b54      	cmp	r3, #84	@ 0x54
 8015752:	d1e3      	bne.n	801571c <get_datetime+0x88>
 8015754:	2a00      	cmp	r2, #0
 8015756:	d0e1      	beq.n	801571c <get_datetime+0x88>
 8015758:	4819      	ldr	r0, [pc, #100]	@ (80157c0 <get_datetime+0x12c>)
 801575a:	6900      	ldr	r0, [r0, #16]
 801575c:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8015760:	4e19      	ldr	r6, [pc, #100]	@ (80157c8 <get_datetime+0x134>)
 8015762:	5d75      	ldrb	r5, [r6, r5]
 8015764:	2801      	cmp	r0, #1
 8015766:	d006      	beq.n	8015776 <get_datetime+0xe2>
 8015768:	2000      	movs	r0, #0
 801576a:	4428      	add	r0, r5
 801576c:	4290      	cmp	r0, r2
 801576e:	d3d5      	bcc.n	801571c <get_datetime+0x88>
                        dt.tm_mday = value;
 8015770:	4813      	ldr	r0, [pc, #76]	@ (80157c0 <get_datetime+0x12c>)
 8015772:	60c2      	str	r2, [r0, #12]
 8015774:	e7d2      	b.n	801571c <get_datetime+0x88>
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 8015776:	4e12      	ldr	r6, [pc, #72]	@ (80157c0 <get_datetime+0x12c>)
 8015778:	6976      	ldr	r6, [r6, #20]
 801577a:	2e64      	cmp	r6, #100	@ 0x64
 801577c:	d004      	beq.n	8015788 <get_datetime+0xf4>
 801577e:	f016 0f03 	tst.w	r6, #3
 8015782:	d0f2      	beq.n	801576a <get_datetime+0xd6>
 8015784:	2000      	movs	r0, #0
 8015786:	e7f0      	b.n	801576a <get_datetime+0xd6>
 8015788:	2000      	movs	r0, #0
 801578a:	e7ee      	b.n	801576a <get_datetime+0xd6>
                    if(c == ':' && value <= 23)
 801578c:	2b3a      	cmp	r3, #58	@ 0x3a
 801578e:	d1c5      	bne.n	801571c <get_datetime+0x88>
 8015790:	2a17      	cmp	r2, #23
 8015792:	d8c3      	bhi.n	801571c <get_datetime+0x88>
                        dt.tm_hour = value;
 8015794:	480a      	ldr	r0, [pc, #40]	@ (80157c0 <get_datetime+0x12c>)
 8015796:	6082      	str	r2, [r0, #8]
 8015798:	e7c0      	b.n	801571c <get_datetime+0x88>
                    if(c == ':' && value <= 59)
 801579a:	2b3a      	cmp	r3, #58	@ 0x3a
 801579c:	d1be      	bne.n	801571c <get_datetime+0x88>
 801579e:	2a3b      	cmp	r2, #59	@ 0x3b
 80157a0:	d8bc      	bhi.n	801571c <get_datetime+0x88>
                        dt.tm_min = value;
 80157a2:	4807      	ldr	r0, [pc, #28]	@ (80157c0 <get_datetime+0x12c>)
 80157a4:	6042      	str	r2, [r0, #4]
 80157a6:	e7b9      	b.n	801571c <get_datetime+0x88>
                    if((c == 'Z' || c == '\0') && value <= 59)
 80157a8:	2b5a      	cmp	r3, #90	@ 0x5a
 80157aa:	d001      	beq.n	80157b0 <get_datetime+0x11c>
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d1b5      	bne.n	801571c <get_datetime+0x88>
 80157b0:	2a3b      	cmp	r2, #59	@ 0x3b
 80157b2:	d8b3      	bhi.n	801571c <get_datetime+0x88>
                        dt.tm_sec = value;
 80157b4:	4802      	ldr	r0, [pc, #8]	@ (80157c0 <get_datetime+0x12c>)
 80157b6:	6002      	str	r2, [r0, #0]
 80157b8:	e7b0      	b.n	801571c <get_datetime+0x88>
    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 80157ba:	2000      	movs	r0, #0
 80157bc:	e7ab      	b.n	8015716 <get_datetime+0x82>
 80157be:	bf00      	nop
 80157c0:	200016c8 	.word	0x200016c8
 80157c4:	08030c71 	.word	0x08030c71
 80157c8:	0802b3e0 	.word	0x0802b3e0

080157cc <calc_checksum>:

// calculate checksum byte for data
uint8_t calc_checksum (uint8_t *data, uint32_t size) {
 80157cc:	4603      	mov	r3, r0

    uint8_t checksum = 0;
 80157ce:	2000      	movs	r0, #0

    while(size--) {
 80157d0:	e008      	b.n	80157e4 <calc_checksum+0x18>
        checksum = (checksum << 1) | (checksum >> 7);
 80157d2:	09c2      	lsrs	r2, r0, #7
 80157d4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
        checksum += *(data++);
 80157d8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80157dc:	fa51 f282 	uxtab	r2, r1, r2
 80157e0:	b2d0      	uxtb	r0, r2
    while(size--) {
 80157e2:	4661      	mov	r1, ip
 80157e4:	f101 3cff 	add.w	ip, r1, #4294967295
 80157e8:	2900      	cmp	r1, #0
 80157ea:	d1f2      	bne.n	80157d2 <calc_checksum+0x6>
    }

    return checksum;
}
 80157ec:	4770      	bx	lr

080157ee <dummy_handler>:
}

void dummy_handler (void)
{
    // NOOP
}
 80157ee:	4770      	bx	lr

080157f0 <ram_get_byte>:
    {0, 0, 0} // list termination - do not remove
};

inline static uint8_t ram_get_byte (uint32_t addr)
{
    return nvsbuffer[addr];
 80157f0:	4b01      	ldr	r3, [pc, #4]	@ (80157f8 <ram_get_byte+0x8>)
 80157f2:	681b      	ldr	r3, [r3, #0]
}
 80157f4:	5c18      	ldrb	r0, [r3, r0]
 80157f6:	4770      	bx	lr
 80157f8:	20001734 	.word	0x20001734

080157fc <ram_put_byte>:

inline static void ram_put_byte (uint32_t addr, uint8_t new_value)
{
    if(addr == 0)
 80157fc:	4603      	mov	r3, r0
 80157fe:	b910      	cbnz	r0, 8015806 <ram_put_byte+0xa>
        settings_dirty.version = true;
 8015800:	4a0c      	ldr	r2, [pc, #48]	@ (8015834 <ram_put_byte+0x38>)
 8015802:	2001      	movs	r0, #1
 8015804:	7050      	strb	r0, [r2, #1]
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 8015806:	4a0c      	ldr	r2, [pc, #48]	@ (8015838 <ram_put_byte+0x3c>)
 8015808:	7812      	ldrb	r2, [r2, #0]
 801580a:	b94a      	cbnz	r2, 8015820 <ram_put_byte+0x24>
 801580c:	4a0b      	ldr	r2, [pc, #44]	@ (801583c <ram_put_byte+0x40>)
 801580e:	6812      	ldr	r2, [r2, #0]
 8015810:	5cd2      	ldrb	r2, [r2, r3]
 8015812:	428a      	cmp	r2, r1
 8015814:	d001      	beq.n	801581a <ram_put_byte+0x1e>
 8015816:	2001      	movs	r0, #1
 8015818:	e003      	b.n	8015822 <ram_put_byte+0x26>
 801581a:	b943      	cbnz	r3, 801582e <ram_put_byte+0x32>
 801581c:	2001      	movs	r0, #1
 801581e:	e000      	b.n	8015822 <ram_put_byte+0x26>
 8015820:	2001      	movs	r0, #1
 8015822:	4a05      	ldr	r2, [pc, #20]	@ (8015838 <ram_put_byte+0x3c>)
 8015824:	7010      	strb	r0, [r2, #0]
    nvsbuffer[addr] = new_value;
 8015826:	4a05      	ldr	r2, [pc, #20]	@ (801583c <ram_put_byte+0x40>)
 8015828:	6812      	ldr	r2, [r2, #0]
 801582a:	54d1      	strb	r1, [r2, r3]
}
 801582c:	4770      	bx	lr
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 801582e:	2000      	movs	r0, #0
 8015830:	e7f7      	b.n	8015822 <ram_put_byte+0x26>
 8015832:	bf00      	nop
 8015834:	200016fc 	.word	0x200016fc
 8015838:	20001704 	.word	0x20001704
 801583c:	20001734 	.word	0x20001734

08015840 <memcpy_from_ram>:

    return NVS_TransferResult_OK;
}

static nvs_transfer_result_t memcpy_from_ram (uint8_t *destination, uint32_t source, uint32_t size, bool with_checksum)
{
 8015840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015844:	4604      	mov	r4, r0
 8015846:	460d      	mov	r5, r1
 8015848:	4616      	mov	r6, r2
 801584a:	461f      	mov	r7, r3
    if(hal.nvs.driver_area.address && source > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 801584c:	4b19      	ldr	r3, [pc, #100]	@ (80158b4 <memcpy_from_ram+0x74>)
 801584e:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8015852:	b12b      	cbz	r3, 8015860 <memcpy_from_ram+0x20>
 8015854:	4a17      	ldr	r2, [pc, #92]	@ (80158b4 <memcpy_from_ram+0x74>)
 8015856:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 801585a:	4413      	add	r3, r2
 801585c:	428b      	cmp	r3, r1
 801585e:	d302      	bcc.n	8015866 <memcpy_from_ram+0x26>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);

    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 8015860:	b947      	cbnz	r7, 8015874 <memcpy_from_ram+0x34>
 8015862:	2300      	movs	r3, #0

    for(; size > 0; size--)
 8015864:	e017      	b.n	8015896 <memcpy_from_ram+0x56>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);
 8015866:	4b14      	ldr	r3, [pc, #80]	@ (80158b8 <memcpy_from_ram+0x78>)
 8015868:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801586c:	463b      	mov	r3, r7
 801586e:	4632      	mov	r2, r6
 8015870:	47c0      	blx	r8
 8015872:	e019      	b.n	80158a8 <memcpy_from_ram+0x68>
    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 8015874:	4b11      	ldr	r3, [pc, #68]	@ (80158bc <memcpy_from_ram+0x7c>)
 8015876:	6818      	ldr	r0, [r3, #0]
 8015878:	4631      	mov	r1, r6
 801587a:	4428      	add	r0, r5
 801587c:	f7ff ffa6 	bl	80157cc <calc_checksum>
 8015880:	4603      	mov	r3, r0
 8015882:	e008      	b.n	8015896 <memcpy_from_ram+0x56>
        *(destination++) = ram_get_byte(source++);
 8015884:	4620      	mov	r0, r4
    return nvsbuffer[addr];
 8015886:	4a0d      	ldr	r2, [pc, #52]	@ (80158bc <memcpy_from_ram+0x7c>)
 8015888:	6812      	ldr	r2, [r2, #0]
 801588a:	5d52      	ldrb	r2, [r2, r5]
        *(destination++) = ram_get_byte(source++);
 801588c:	f800 2b01 	strb.w	r2, [r0], #1
    for(; size > 0; size--)
 8015890:	3e01      	subs	r6, #1
        *(destination++) = ram_get_byte(source++);
 8015892:	3501      	adds	r5, #1
 8015894:	4604      	mov	r4, r0
    for(; size > 0; size--)
 8015896:	2e00      	cmp	r6, #0
 8015898:	d1f4      	bne.n	8015884 <memcpy_from_ram+0x44>

    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 801589a:	b14f      	cbz	r7, 80158b0 <memcpy_from_ram+0x70>
    return nvsbuffer[addr];
 801589c:	4a07      	ldr	r2, [pc, #28]	@ (80158bc <memcpy_from_ram+0x7c>)
 801589e:	6812      	ldr	r2, [r2, #0]
 80158a0:	5d52      	ldrb	r2, [r2, r5]
    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 80158a2:	4293      	cmp	r3, r2
 80158a4:	d002      	beq.n	80158ac <memcpy_from_ram+0x6c>
 80158a6:	2000      	movs	r0, #0
}
 80158a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 80158ac:	2002      	movs	r0, #2
 80158ae:	e7fb      	b.n	80158a8 <memcpy_from_ram+0x68>
 80158b0:	2002      	movs	r0, #2
 80158b2:	e7f9      	b.n	80158a8 <memcpy_from_ram+0x68>
 80158b4:	200011c0 	.word	0x200011c0
 80158b8:	20001708 	.word	0x20001708
 80158bc:	20001734 	.word	0x20001734

080158c0 <memcpy_to_ram>:
{
 80158c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158c4:	4607      	mov	r7, r0
 80158c6:	460c      	mov	r4, r1
 80158c8:	4615      	mov	r5, r2
 80158ca:	4698      	mov	r8, r3
    if(hal.nvs.driver_area.address && destination > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 80158cc:	4b4c      	ldr	r3, [pc, #304]	@ (8015a00 <memcpy_to_ram+0x140>)
 80158ce:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80158d2:	b12b      	cbz	r3, 80158e0 <memcpy_to_ram+0x20>
 80158d4:	4a4a      	ldr	r2, [pc, #296]	@ (8015a00 <memcpy_to_ram+0x140>)
 80158d6:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 80158da:	4413      	add	r3, r2
 80158dc:	4283      	cmp	r3, r0
 80158de:	d309      	bcc.n	80158f4 <memcpy_to_ram+0x34>
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 80158e0:	f1b8 0f00 	cmp.w	r8, #0
 80158e4:	d10c      	bne.n	8015900 <memcpy_to_ram+0x40>
 80158e6:	f04f 0900 	mov.w	r9, #0
    dirty = false;
 80158ea:	4b46      	ldr	r3, [pc, #280]	@ (8015a04 <memcpy_to_ram+0x144>)
 80158ec:	2200      	movs	r2, #0
 80158ee:	701a      	strb	r2, [r3, #0]
    uint32_t dest = destination;
 80158f0:	4638      	mov	r0, r7
    for(; size > 0; size--)
 80158f2:	e012      	b.n	801591a <memcpy_to_ram+0x5a>
        return physical_nvs.memcpy_to_nvs(destination, source, size, with_checksum);
 80158f4:	4b44      	ldr	r3, [pc, #272]	@ (8015a08 <memcpy_to_ram+0x148>)
 80158f6:	69de      	ldr	r6, [r3, #28]
 80158f8:	4643      	mov	r3, r8
 80158fa:	462a      	mov	r2, r5
 80158fc:	47b0      	blx	r6
 80158fe:	e077      	b.n	80159f0 <memcpy_to_ram+0x130>
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 8015900:	4629      	mov	r1, r5
 8015902:	4620      	mov	r0, r4
 8015904:	f7ff ff62 	bl	80157cc <calc_checksum>
 8015908:	4681      	mov	r9, r0
 801590a:	e7ee      	b.n	80158ea <memcpy_to_ram+0x2a>
        ram_put_byte(dest++, *(source++));
 801590c:	1c46      	adds	r6, r0, #1
 801590e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015912:	f7ff ff73 	bl	80157fc <ram_put_byte>
    for(; size > 0; size--)
 8015916:	3d01      	subs	r5, #1
        ram_put_byte(dest++, *(source++));
 8015918:	4630      	mov	r0, r6
    for(; size > 0; size--)
 801591a:	2d00      	cmp	r5, #0
 801591c:	d1f6      	bne.n	801590c <memcpy_to_ram+0x4c>
    if(with_checksum)
 801591e:	f1b8 0f00 	cmp.w	r8, #0
 8015922:	d11d      	bne.n	8015960 <memcpy_to_ram+0xa0>
    if(settings_dirty.version || source == hal.nvs.driver_area.mem_address)
 8015924:	4b39      	ldr	r3, [pc, #228]	@ (8015a0c <memcpy_to_ram+0x14c>)
 8015926:	785b      	ldrb	r3, [r3, #1]
 8015928:	b923      	cbnz	r3, 8015934 <memcpy_to_ram+0x74>
 801592a:	4b35      	ldr	r3, [pc, #212]	@ (8015a00 <memcpy_to_ram+0x140>)
 801592c:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8015930:	42a3      	cmp	r3, r4
 8015932:	d102      	bne.n	801593a <memcpy_to_ram+0x7a>
        dirty = true;
 8015934:	4b33      	ldr	r3, [pc, #204]	@ (8015a04 <memcpy_to_ram+0x144>)
 8015936:	2201      	movs	r2, #1
 8015938:	701a      	strb	r2, [r3, #0]
    if(dirty && physical_nvs.type != NVS_None) {
 801593a:	4b32      	ldr	r3, [pc, #200]	@ (8015a04 <memcpy_to_ram+0x144>)
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d055      	beq.n	80159ee <memcpy_to_ram+0x12e>
 8015942:	4b31      	ldr	r3, [pc, #196]	@ (8015a08 <memcpy_to_ram+0x148>)
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d054      	beq.n	80159f4 <memcpy_to_ram+0x134>
        settings_dirty.is_dirty = true;
 801594a:	4b30      	ldr	r3, [pc, #192]	@ (8015a0c <memcpy_to_ram+0x14c>)
 801594c:	2201      	movs	r2, #1
 801594e:	701a      	strb	r2, [r3, #0]
        if(hal.nvs.driver_area.address && destination >= hal.nvs.driver_area.address)
 8015950:	4b2b      	ldr	r3, [pc, #172]	@ (8015a00 <memcpy_to_ram+0x140>)
 8015952:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8015956:	b15b      	cbz	r3, 8015970 <memcpy_to_ram+0xb0>
 8015958:	42bb      	cmp	r3, r7
 801595a:	d905      	bls.n	8015968 <memcpy_to_ram+0xa8>
 801595c:	2300      	movs	r3, #0
 801595e:	e008      	b.n	8015972 <memcpy_to_ram+0xb2>
        ram_put_byte(dest, checksum);
 8015960:	4649      	mov	r1, r9
 8015962:	f7ff ff4b 	bl	80157fc <ram_put_byte>
 8015966:	e7dd      	b.n	8015924 <memcpy_to_ram+0x64>
            settings_dirty.driver_settings = true;
 8015968:	4b28      	ldr	r3, [pc, #160]	@ (8015a0c <memcpy_to_ram+0x14c>)
 801596a:	711a      	strb	r2, [r3, #4]
    return NVS_TransferResult_OK;
 801596c:	2002      	movs	r0, #2
            settings_dirty.driver_settings = true;
 801596e:	e03f      	b.n	80159f0 <memcpy_to_ram+0x130>
 8015970:	2300      	movs	r3, #0
                if(target[idx].addr == destination)
 8015972:	4a27      	ldr	r2, [pc, #156]	@ (8015a10 <memcpy_to_ram+0x150>)
 8015974:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8015978:	42ba      	cmp	r2, r7
 801597a:	d006      	beq.n	801598a <memcpy_to_ram+0xca>
            } while(target[++idx].addr);
 801597c:	3301      	adds	r3, #1
 801597e:	b2db      	uxtb	r3, r3
 8015980:	4a23      	ldr	r2, [pc, #140]	@ (8015a10 <memcpy_to_ram+0x150>)
 8015982:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8015986:	2a00      	cmp	r2, #0
 8015988:	d1f3      	bne.n	8015972 <memcpy_to_ram+0xb2>
            if(target[idx].addr) switch(target[idx].type) {
 801598a:	4619      	mov	r1, r3
 801598c:	4a20      	ldr	r2, [pc, #128]	@ (8015a10 <memcpy_to_ram+0x150>)
 801598e:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8015992:	2a00      	cmp	r2, #0
 8015994:	d030      	beq.n	80159f8 <memcpy_to_ram+0x138>
 8015996:	4a1e      	ldr	r2, [pc, #120]	@ (8015a10 <memcpy_to_ram+0x150>)
 8015998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801599c:	7898      	ldrb	r0, [r3, #2]
 801599e:	2804      	cmp	r0, #4
 80159a0:	d82c      	bhi.n	80159fc <memcpy_to_ram+0x13c>
 80159a2:	e8df f000 	tbb	[pc, r0]
 80159a6:	2b03      	.short	0x2b03
 80159a8:	1308      	.short	0x1308
 80159aa:	1f          	.byte	0x1f
 80159ab:	00          	.byte	0x00
                    settings_dirty.global_settings = true;
 80159ac:	4b17      	ldr	r3, [pc, #92]	@ (8015a0c <memcpy_to_ram+0x14c>)
 80159ae:	2201      	movs	r2, #1
 80159b0:	709a      	strb	r2, [r3, #2]
    return NVS_TransferResult_OK;
 80159b2:	2002      	movs	r0, #2
                    break;
 80159b4:	e01c      	b.n	80159f0 <memcpy_to_ram+0x130>
                    settings_dirty.coord_data |= (1 << target[idx].offset);
 80159b6:	4c15      	ldr	r4, [pc, #84]	@ (8015a0c <memcpy_to_ram+0x14c>)
 80159b8:	88e3      	ldrh	r3, [r4, #6]
 80159ba:	4a15      	ldr	r2, [pc, #84]	@ (8015a10 <memcpy_to_ram+0x150>)
 80159bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80159c0:	78d1      	ldrb	r1, [r2, #3]
 80159c2:	2201      	movs	r2, #1
 80159c4:	408a      	lsls	r2, r1
 80159c6:	4313      	orrs	r3, r2
 80159c8:	80e3      	strh	r3, [r4, #6]
                    break;
 80159ca:	e011      	b.n	80159f0 <memcpy_to_ram+0x130>
                    settings_dirty.startup_lines |= (1 << target[idx].offset);
 80159cc:	480f      	ldr	r0, [pc, #60]	@ (8015a0c <memcpy_to_ram+0x14c>)
 80159ce:	7943      	ldrb	r3, [r0, #5]
 80159d0:	4a0f      	ldr	r2, [pc, #60]	@ (8015a10 <memcpy_to_ram+0x150>)
 80159d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80159d6:	78d1      	ldrb	r1, [r2, #3]
 80159d8:	2201      	movs	r2, #1
 80159da:	408a      	lsls	r2, r1
 80159dc:	4313      	orrs	r3, r2
 80159de:	7143      	strb	r3, [r0, #5]
    return NVS_TransferResult_OK;
 80159e0:	2002      	movs	r0, #2
                    break;
 80159e2:	e005      	b.n	80159f0 <memcpy_to_ram+0x130>
                    settings_dirty.build_info = true;
 80159e4:	4b09      	ldr	r3, [pc, #36]	@ (8015a0c <memcpy_to_ram+0x14c>)
 80159e6:	2201      	movs	r2, #1
 80159e8:	70da      	strb	r2, [r3, #3]
    return NVS_TransferResult_OK;
 80159ea:	2002      	movs	r0, #2
                    break;
 80159ec:	e000      	b.n	80159f0 <memcpy_to_ram+0x130>
    return NVS_TransferResult_OK;
 80159ee:	2002      	movs	r0, #2
}
 80159f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NVS_TransferResult_OK;
 80159f4:	2002      	movs	r0, #2
 80159f6:	e7fb      	b.n	80159f0 <memcpy_to_ram+0x130>
 80159f8:	2002      	movs	r0, #2
 80159fa:	e7f9      	b.n	80159f0 <memcpy_to_ram+0x130>
            if(target[idx].addr) switch(target[idx].type) {
 80159fc:	2002      	movs	r0, #2
 80159fe:	e7f7      	b.n	80159f0 <memcpy_to_ram+0x130>
 8015a00:	200011c0 	.word	0x200011c0
 8015a04:	20001704 	.word	0x20001704
 8015a08:	20001708 	.word	0x20001708
 8015a0c:	200016fc 	.word	0x200016fc
 8015a10:	0802b45c 	.word	0x0802b45c

08015a14 <nvs_buffer_alloc>:

// Try to allocate RAM from heap for buffer/emulation.
bool nvs_buffer_alloc (void)
{
 8015a14:	b510      	push	{r4, lr}
    assert(NVS_SIZE >= GRBL_NVS_SIZE);

    if((nvsbuffer = malloc(NVS_SIZE)))
 8015a16:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8015a1a:	f00c fd3f 	bl	802249c <malloc>
 8015a1e:	4604      	mov	r4, r0
 8015a20:	4b05      	ldr	r3, [pc, #20]	@ (8015a38 <nvs_buffer_alloc+0x24>)
 8015a22:	6018      	str	r0, [r3, #0]
 8015a24:	b120      	cbz	r0, 8015a30 <nvs_buffer_alloc+0x1c>
        memset(nvsbuffer, 0xFF, NVS_SIZE);
 8015a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015a2a:	21ff      	movs	r1, #255	@ 0xff
 8015a2c:	f00e fdff 	bl	802462e <memset>

    return nvsbuffer != NULL;
}
 8015a30:	1e20      	subs	r0, r4, #0
 8015a32:	bf18      	it	ne
 8015a34:	2001      	movne	r0, #1
 8015a36:	bd10      	pop	{r4, pc}
 8015a38:	20001734 	.word	0x20001734

08015a3c <nvs_buffer_init>:
}
//
// Switch over to RAM based copy.
// Changes to RAM based copy will be written to physical storage when grblHAL is in IDLE state.
bool nvs_buffer_init (void)
{
 8015a3c:	b570      	push	{r4, r5, r6, lr}
    hal.nvs.size = ((hal.nvs.size - 1) | 0x03) + 1; // Ensure NVS area ends on a word boundary
 8015a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8015b38 <nvs_buffer_init+0xfc>)
 8015a40:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
 8015a44:	3b01      	subs	r3, #1
 8015a46:	f043 0303 	orr.w	r3, r3, #3
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178

    if(nvsbuffer) {
 8015a50:	4b3a      	ldr	r3, [pc, #232]	@ (8015b3c <nvs_buffer_init+0x100>)
 8015a52:	681d      	ldr	r5, [r3, #0]
 8015a54:	2d00      	cmp	r5, #0
 8015a56:	d069      	beq.n	8015b2c <nvs_buffer_init+0xf0>

        memcpy(&physical_nvs, &hal.nvs, sizeof(nvs_io_t)); // save pointers to physical storage handler functions
 8015a58:	4e39      	ldr	r6, [pc, #228]	@ (8015b40 <nvs_buffer_init+0x104>)
 8015a5a:	46b4      	mov	ip, r6
 8015a5c:	f502 74ba 	add.w	r4, r2, #372	@ 0x174
 8015a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a6c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015a70:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

        // Copy physical storage content to RAM when available
        if(physical_nvs.type == NVS_Flash)
 8015a74:	7833      	ldrb	r3, [r6, #0]
 8015a76:	2b03      	cmp	r3, #3
 8015a78:	d00c      	beq.n	8015a94 <nvs_buffer_init+0x58>
            physical_nvs.memcpy_from_flash(nvsbuffer);
        else if(physical_nvs.type != NVS_None)
 8015a7a:	b173      	cbz	r3, 8015a9a <nvs_buffer_init+0x5e>
            physical_nvs.memcpy_from_nvs(nvsbuffer, 0, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 8015a7c:	4b30      	ldr	r3, [pc, #192]	@ (8015b40 <nvs_buffer_init+0x104>)
 8015a7e:	6a1c      	ldr	r4, [r3, #32]
 8015a80:	4b2d      	ldr	r3, [pc, #180]	@ (8015b38 <nvs_buffer_init+0xfc>)
 8015a82:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8015a86:	2300      	movs	r3, #0
 8015a88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	4628      	mov	r0, r5
 8015a90:	47a0      	blx	r4
 8015a92:	e002      	b.n	8015a9a <nvs_buffer_init+0x5e>
            physical_nvs.memcpy_from_flash(nvsbuffer);
 8015a94:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8015a96:	4628      	mov	r0, r5
 8015a98:	4798      	blx	r3

        // Switch hal to use RAM version of non-volatile storage data
        hal.nvs.type = NVS_Emulated;
 8015a9a:	4b27      	ldr	r3, [pc, #156]	@ (8015b38 <nvs_buffer_init+0xfc>)
 8015a9c:	2204      	movs	r2, #4
 8015a9e:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
        hal.nvs.get_byte = &ram_get_byte;
 8015aa2:	4a28      	ldr	r2, [pc, #160]	@ (8015b44 <nvs_buffer_init+0x108>)
 8015aa4:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
        hal.nvs.put_byte = &ram_put_byte;
 8015aa8:	4a27      	ldr	r2, [pc, #156]	@ (8015b48 <nvs_buffer_init+0x10c>)
 8015aaa:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        hal.nvs.memcpy_to_nvs = &memcpy_to_ram;
 8015aae:	4a27      	ldr	r2, [pc, #156]	@ (8015b4c <nvs_buffer_init+0x110>)
 8015ab0:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        hal.nvs.memcpy_from_nvs = &memcpy_from_ram;
 8015ab4:	4a26      	ldr	r2, [pc, #152]	@ (8015b50 <nvs_buffer_init+0x114>)
 8015ab6:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        hal.nvs.memcpy_from_flash = NULL;
 8015aba:	2200      	movs	r2, #0
 8015abc:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
        hal.nvs.memcpy_to_flash = NULL;
 8015ac0:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

        // If no physical storage available or if NVS import fails copy default settings to RAM
        // and write out to physical storage when available.
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 8015ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8015b40 <nvs_buffer_init+0x104>)
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	b123      	cbz	r3, 8015ad4 <nvs_buffer_init+0x98>
    return nvsbuffer[addr];
 8015aca:	4b1c      	ldr	r3, [pc, #112]	@ (8015b3c <nvs_buffer_init+0x100>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	781b      	ldrb	r3, [r3, #0]
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 8015ad0:	2b16      	cmp	r3, #22
 8015ad2:	d01b      	beq.n	8015b0c <nvs_buffer_init+0xd0>
            settings_restore(settings_all);
 8015ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8015b54 <nvs_buffer_init+0x118>)
 8015ad6:	7818      	ldrb	r0, [r3, #0]
 8015ad8:	f007 faec 	bl	801d0b4 <settings_restore>
            if(physical_nvs.type == NVS_Flash)
 8015adc:	4b18      	ldr	r3, [pc, #96]	@ (8015b40 <nvs_buffer_init+0x104>)
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	2b03      	cmp	r3, #3
 8015ae2:	d01d      	beq.n	8015b20 <nvs_buffer_init+0xe4>
                physical_nvs.memcpy_to_flash(nvsbuffer);
            else if(physical_nvs.memcpy_to_nvs)
 8015ae4:	4b16      	ldr	r3, [pc, #88]	@ (8015b40 <nvs_buffer_init+0x104>)
 8015ae6:	69dc      	ldr	r4, [r3, #28]
 8015ae8:	b14c      	cbz	r4, 8015afe <nvs_buffer_init+0xc2>
                physical_nvs.memcpy_to_nvs(0, nvsbuffer, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 8015aea:	4b13      	ldr	r3, [pc, #76]	@ (8015b38 <nvs_buffer_init+0xfc>)
 8015aec:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8015af0:	2300      	movs	r3, #0
 8015af2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015af6:	4911      	ldr	r1, [pc, #68]	@ (8015b3c <nvs_buffer_init+0x100>)
 8015af8:	6809      	ldr	r1, [r1, #0]
 8015afa:	4618      	mov	r0, r3
 8015afc:	47a0      	blx	r4
            if(physical_nvs.type != NVS_None)
 8015afe:	4b10      	ldr	r3, [pc, #64]	@ (8015b40 <nvs_buffer_init+0x104>)
 8015b00:	781b      	ldrb	r3, [r3, #0]
 8015b02:	b11b      	cbz	r3, 8015b0c <nvs_buffer_init+0xd0>
                grbl.report.status_message(Status_SettingReadFail);
 8015b04:	4b14      	ldr	r3, [pc, #80]	@ (8015b58 <nvs_buffer_init+0x11c>)
 8015b06:	689b      	ldr	r3, [r3, #8]
 8015b08:	2007      	movs	r0, #7
 8015b0a:	4798      	blx	r3
        }
    } else
        protocol_enqueue_foreground_task(report_warning, "Not enough heap for NVS buffer!");

    // Clear settings dirty flags
    memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 8015b0c:	4b13      	ldr	r3, [pc, #76]	@ (8015b5c <nvs_buffer_init+0x120>)
 8015b0e:	2200      	movs	r2, #0
 8015b10:	601a      	str	r2, [r3, #0]
 8015b12:	605a      	str	r2, [r3, #4]

    return nvsbuffer != NULL;
 8015b14:	4b09      	ldr	r3, [pc, #36]	@ (8015b3c <nvs_buffer_init+0x100>)
 8015b16:	6818      	ldr	r0, [r3, #0]
}
 8015b18:	1a80      	subs	r0, r0, r2
 8015b1a:	bf18      	it	ne
 8015b1c:	2001      	movne	r0, #1
 8015b1e:	bd70      	pop	{r4, r5, r6, pc}
                physical_nvs.memcpy_to_flash(nvsbuffer);
 8015b20:	4b07      	ldr	r3, [pc, #28]	@ (8015b40 <nvs_buffer_init+0x104>)
 8015b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b24:	4a05      	ldr	r2, [pc, #20]	@ (8015b3c <nvs_buffer_init+0x100>)
 8015b26:	6810      	ldr	r0, [r2, #0]
 8015b28:	4798      	blx	r3
 8015b2a:	e7e8      	b.n	8015afe <nvs_buffer_init+0xc2>
        protocol_enqueue_foreground_task(report_warning, "Not enough heap for NVS buffer!");
 8015b2c:	490c      	ldr	r1, [pc, #48]	@ (8015b60 <nvs_buffer_init+0x124>)
 8015b2e:	480d      	ldr	r0, [pc, #52]	@ (8015b64 <nvs_buffer_init+0x128>)
 8015b30:	f001 fe0e 	bl	8017750 <protocol_enqueue_foreground_task>
 8015b34:	e7ea      	b.n	8015b0c <nvs_buffer_init+0xd0>
 8015b36:	bf00      	nop
 8015b38:	200011c0 	.word	0x200011c0
 8015b3c:	20001734 	.word	0x20001734
 8015b40:	20001708 	.word	0x20001708
 8015b44:	080157f1 	.word	0x080157f1
 8015b48:	080157fd 	.word	0x080157fd
 8015b4c:	080158c1 	.word	0x080158c1
 8015b50:	08015841 	.word	0x08015841
 8015b54:	08030058 	.word	0x08030058
 8015b58:	200013a8 	.word	0x200013a8
 8015b5c:	200016fc 	.word	0x200016fc
 8015b60:	0802b424 	.word	0x0802b424
 8015b64:	080190ef 	.word	0x080190ef

08015b68 <nvs_buffer_sync_physical>:
}

// Write RAM changes to physical storage
void nvs_buffer_sync_physical (void)
{
    if(!settings_dirty.is_dirty)
 8015b68:	4b6d      	ldr	r3, [pc, #436]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	f000 80d6 	beq.w	8015d1e <nvs_buffer_sync_physical+0x1b6>
{
 8015b72:	b570      	push	{r4, r5, r6, lr}
        return;

    if(physical_nvs.memcpy_to_nvs) {
 8015b74:	4b6b      	ldr	r3, [pc, #428]	@ (8015d24 <nvs_buffer_sync_physical+0x1bc>)
 8015b76:	69dc      	ldr	r4, [r3, #28]
 8015b78:	2c00      	cmp	r4, #0
 8015b7a:	f000 80b5 	beq.w	8015ce8 <nvs_buffer_sync_physical+0x180>

        if(settings_dirty.version)
 8015b7e:	4b68      	ldr	r3, [pc, #416]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015b80:	785b      	ldrb	r3, [r3, #1]
 8015b82:	b153      	cbz	r3, 8015b9a <nvs_buffer_sync_physical+0x32>
            settings_dirty.version = physical_nvs.memcpy_to_nvs(0, nvsbuffer, 1, false) != NVS_TransferResult_OK;
 8015b84:	2300      	movs	r3, #0
 8015b86:	2201      	movs	r2, #1
 8015b88:	4967      	ldr	r1, [pc, #412]	@ (8015d28 <nvs_buffer_sync_physical+0x1c0>)
 8015b8a:	6809      	ldr	r1, [r1, #0]
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	47a0      	blx	r4
 8015b90:	3802      	subs	r0, #2
 8015b92:	bf18      	it	ne
 8015b94:	2001      	movne	r0, #1
 8015b96:	4b62      	ldr	r3, [pc, #392]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015b98:	7058      	strb	r0, [r3, #1]

        if(settings_dirty.global_settings)
 8015b9a:	4b61      	ldr	r3, [pc, #388]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015b9c:	789b      	ldrb	r3, [r3, #2]
 8015b9e:	b173      	cbz	r3, 8015bbe <nvs_buffer_sync_physical+0x56>
            settings_dirty.global_settings = physical_nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)(nvsbuffer + NVS_ADDR_GLOBAL), sizeof(settings_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 8015ba0:	4b60      	ldr	r3, [pc, #384]	@ (8015d24 <nvs_buffer_sync_physical+0x1bc>)
 8015ba2:	69dc      	ldr	r4, [r3, #28]
 8015ba4:	4b60      	ldr	r3, [pc, #384]	@ (8015d28 <nvs_buffer_sync_physical+0x1c0>)
 8015ba6:	6819      	ldr	r1, [r3, #0]
 8015ba8:	2300      	movs	r3, #0
 8015baa:	f240 126d 	movw	r2, #365	@ 0x16d
 8015bae:	3101      	adds	r1, #1
 8015bb0:	2001      	movs	r0, #1
 8015bb2:	47a0      	blx	r4
 8015bb4:	3802      	subs	r0, #2
 8015bb6:	bf18      	it	ne
 8015bb8:	2001      	movne	r0, #1
 8015bba:	4b59      	ldr	r3, [pc, #356]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015bbc:	7098      	strb	r0, [r3, #2]

        if(settings_dirty.build_info)
 8015bbe:	4b58      	ldr	r3, [pc, #352]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015bc0:	78db      	ldrb	r3, [r3, #3]
 8015bc2:	b17b      	cbz	r3, 8015be4 <nvs_buffer_sync_physical+0x7c>
            settings_dirty.build_info = physical_nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)(nvsbuffer + NVS_ADDR_BUILD_INFO), sizeof(stored_line_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 8015bc4:	4b57      	ldr	r3, [pc, #348]	@ (8015d24 <nvs_buffer_sync_physical+0x1bc>)
 8015bc6:	69dc      	ldr	r4, [r3, #28]
 8015bc8:	4b57      	ldr	r3, [pc, #348]	@ (8015d28 <nvs_buffer_sync_physical+0x1c0>)
 8015bca:	6819      	ldr	r1, [r3, #0]
 8015bcc:	2300      	movs	r3, #0
 8015bce:	2247      	movs	r2, #71	@ 0x47
 8015bd0:	f201 31ae 	addw	r1, r1, #942	@ 0x3ae
 8015bd4:	f240 30ae 	movw	r0, #942	@ 0x3ae
 8015bd8:	47a0      	blx	r4
 8015bda:	3802      	subs	r0, #2
 8015bdc:	bf18      	it	ne
 8015bde:	2001      	movne	r0, #1
 8015be0:	4b4f      	ldr	r3, [pc, #316]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015be2:	70d8      	strb	r0, [r3, #3]

        uint_fast8_t idx = N_STARTUP_LINE, offset;
        if(settings_dirty.startup_lines) do {
 8015be4:	4b4e      	ldr	r3, [pc, #312]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015be6:	795b      	ldrb	r3, [r3, #5]
 8015be8:	b30b      	cbz	r3, 8015c2e <nvs_buffer_sync_physical+0xc6>
        uint_fast8_t idx = N_STARTUP_LINE, offset;
 8015bea:	2402      	movs	r4, #2
            idx--;
 8015bec:	3c01      	subs	r4, #1
            if(bit_istrue(settings_dirty.startup_lines, bit(idx))) {
 8015bee:	4b4c      	ldr	r3, [pc, #304]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015bf0:	795a      	ldrb	r2, [r3, #5]
 8015bf2:	fa22 f304 	lsr.w	r3, r2, r4
 8015bf6:	f013 0f01 	tst.w	r3, #1
 8015bfa:	d016      	beq.n	8015c2a <nvs_buffer_sync_physical+0xc2>
                bit_false(settings_dirty.startup_lines, bit(idx));
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	40a3      	lsls	r3, r4
 8015c00:	43db      	mvns	r3, r3
 8015c02:	b2dd      	uxtb	r5, r3
 8015c04:	4013      	ands	r3, r2
 8015c06:	4a46      	ldr	r2, [pc, #280]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015c08:	7153      	strb	r3, [r2, #5]
                offset = NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES);
 8015c0a:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8015c0e:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
 8015c12:	f200 301f 	addw	r0, r0, #799	@ 0x31f
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(stored_line_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8015c16:	4b43      	ldr	r3, [pc, #268]	@ (8015d24 <nvs_buffer_sync_physical+0x1bc>)
 8015c18:	69de      	ldr	r6, [r3, #28]
 8015c1a:	4b43      	ldr	r3, [pc, #268]	@ (8015d28 <nvs_buffer_sync_physical+0x1c0>)
 8015c1c:	6819      	ldr	r1, [r3, #0]
 8015c1e:	2300      	movs	r3, #0
 8015c20:	2247      	movs	r2, #71	@ 0x47
 8015c22:	4401      	add	r1, r0
 8015c24:	47b0      	blx	r6
 8015c26:	2802      	cmp	r0, #2
 8015c28:	d006      	beq.n	8015c38 <nvs_buffer_sync_physical+0xd0>
                    bit_false(settings_dirty.startup_lines, bit(idx));
            }
        } while(idx);
 8015c2a:	2c00      	cmp	r4, #0
 8015c2c:	d1de      	bne.n	8015bec <nvs_buffer_sync_physical+0x84>

        idx = N_CoordinateSystems;
        if(settings_dirty.coord_data) do {
 8015c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015c30:	88db      	ldrh	r3, [r3, #6]
 8015c32:	b33b      	cbz	r3, 8015c84 <nvs_buffer_sync_physical+0x11c>
        idx = N_CoordinateSystems;
 8015c34:	240c      	movs	r4, #12
 8015c36:	e007      	b.n	8015c48 <nvs_buffer_sync_physical+0xe0>
                    bit_false(settings_dirty.startup_lines, bit(idx));
 8015c38:	4b39      	ldr	r3, [pc, #228]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015c3a:	795a      	ldrb	r2, [r3, #5]
 8015c3c:	4015      	ands	r5, r2
 8015c3e:	715d      	strb	r5, [r3, #5]
 8015c40:	e7f3      	b.n	8015c2a <nvs_buffer_sync_physical+0xc2>
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.coord_data, bit(idx));
            }
        } while(idx--);
 8015c42:	1e63      	subs	r3, r4, #1
 8015c44:	b1f4      	cbz	r4, 8015c84 <nvs_buffer_sync_physical+0x11c>
 8015c46:	461c      	mov	r4, r3
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
 8015c48:	4b35      	ldr	r3, [pc, #212]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015c4a:	88db      	ldrh	r3, [r3, #6]
 8015c4c:	40e3      	lsrs	r3, r4
 8015c4e:	f013 0f01 	tst.w	r3, #1
 8015c52:	d0f6      	beq.n	8015c42 <nvs_buffer_sync_physical+0xda>
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
 8015c54:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8015c58:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8015c5c:	f500 7000 	add.w	r0, r0, #512	@ 0x200
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8015c60:	4b30      	ldr	r3, [pc, #192]	@ (8015d24 <nvs_buffer_sync_physical+0x1bc>)
 8015c62:	69dd      	ldr	r5, [r3, #28]
 8015c64:	4b30      	ldr	r3, [pc, #192]	@ (8015d28 <nvs_buffer_sync_physical+0x1c0>)
 8015c66:	6819      	ldr	r1, [r3, #0]
 8015c68:	2300      	movs	r3, #0
 8015c6a:	220d      	movs	r2, #13
 8015c6c:	4401      	add	r1, r0
 8015c6e:	47a8      	blx	r5
 8015c70:	2802      	cmp	r0, #2
 8015c72:	d1e6      	bne.n	8015c42 <nvs_buffer_sync_physical+0xda>
                    bit_false(settings_dirty.coord_data, bit(idx));
 8015c74:	492a      	ldr	r1, [pc, #168]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015c76:	88cb      	ldrh	r3, [r1, #6]
 8015c78:	2201      	movs	r2, #1
 8015c7a:	40a2      	lsls	r2, r4
 8015c7c:	ea23 0302 	bic.w	r3, r3, r2
 8015c80:	80cb      	strh	r3, [r1, #6]
 8015c82:	e7de      	b.n	8015c42 <nvs_buffer_sync_physical+0xda>

        if(settings_dirty.driver_settings) {
 8015c84:	4b26      	ldr	r3, [pc, #152]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015c86:	791b      	ldrb	r3, [r3, #4]
 8015c88:	b193      	cbz	r3, 8015cb0 <nvs_buffer_sync_physical+0x148>
            if(hal.nvs.driver_area.size > 0)
 8015c8a:	4b28      	ldr	r3, [pc, #160]	@ (8015d2c <nvs_buffer_sync_physical+0x1c4>)
 8015c8c:	f8b3 2186 	ldrh.w	r2, [r3, #390]	@ 0x186
 8015c90:	b1e2      	cbz	r2, 8015ccc <nvs_buffer_sync_physical+0x164>
                settings_dirty.driver_settings = physical_nvs.memcpy_to_nvs(hal.nvs.driver_area.address, (uint8_t *)(nvsbuffer + hal.nvs.driver_area.address), hal.nvs.driver_area.size, false) != NVS_TransferResult_OK;
 8015c92:	4b24      	ldr	r3, [pc, #144]	@ (8015d24 <nvs_buffer_sync_physical+0x1bc>)
 8015c94:	69dc      	ldr	r4, [r3, #28]
 8015c96:	4b25      	ldr	r3, [pc, #148]	@ (8015d2c <nvs_buffer_sync_physical+0x1c4>)
 8015c98:	f8b3 0184 	ldrh.w	r0, [r3, #388]	@ 0x184
 8015c9c:	4b22      	ldr	r3, [pc, #136]	@ (8015d28 <nvs_buffer_sync_physical+0x1c0>)
 8015c9e:	6819      	ldr	r1, [r3, #0]
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	4401      	add	r1, r0
 8015ca4:	47a0      	blx	r4
 8015ca6:	3802      	subs	r0, #2
 8015ca8:	bf18      	it	ne
 8015caa:	2001      	movne	r0, #1
 8015cac:	4b1c      	ldr	r3, [pc, #112]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015cae:	7118      	strb	r0, [r3, #4]
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(tool_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.tool_data, bit(idx));
            }
        } while(idx);
#endif
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8015cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015cb2:	88db      	ldrh	r3, [r3, #6]
                                   settings_dirty.global_settings ||
                                    settings_dirty.driver_settings ||
                                     settings_dirty.startup_lines ||
 8015cb4:	b973      	cbnz	r3, 8015cd4 <nvs_buffer_sync_physical+0x16c>
                                   settings_dirty.global_settings ||
 8015cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015cb8:	789b      	ldrb	r3, [r3, #2]
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8015cba:	b97b      	cbnz	r3, 8015cdc <nvs_buffer_sync_physical+0x174>
                                    settings_dirty.driver_settings ||
 8015cbc:	4b18      	ldr	r3, [pc, #96]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015cbe:	889b      	ldrh	r3, [r3, #4]
 8015cc0:	b973      	cbnz	r3, 8015ce0 <nvs_buffer_sync_physical+0x178>
#if N_TOOLS
                                      settings_dirty.tool_data ||
#endif
                                       settings_dirty.build_info;
 8015cc2:	4b17      	ldr	r3, [pc, #92]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015cc4:	78db      	ldrb	r3, [r3, #3]
                                     settings_dirty.startup_lines ||
 8015cc6:	b16b      	cbz	r3, 8015ce4 <nvs_buffer_sync_physical+0x17c>
 8015cc8:	2201      	movs	r2, #1
 8015cca:	e004      	b.n	8015cd6 <nvs_buffer_sync_physical+0x16e>
                settings_dirty.driver_settings = false;
 8015ccc:	4b14      	ldr	r3, [pc, #80]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015cce:	2200      	movs	r2, #0
 8015cd0:	711a      	strb	r2, [r3, #4]
 8015cd2:	e7ed      	b.n	8015cb0 <nvs_buffer_sync_physical+0x148>
                                     settings_dirty.startup_lines ||
 8015cd4:	2201      	movs	r2, #1
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8015cd6:	4b12      	ldr	r3, [pc, #72]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015cd8:	701a      	strb	r2, [r3, #0]
            else if(--retries == 0)
                report_message("Settings write failed!", Message_Warning);
        } while(retries);
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
    }
}
 8015cda:	bd70      	pop	{r4, r5, r6, pc}
                                     settings_dirty.startup_lines ||
 8015cdc:	2201      	movs	r2, #1
 8015cde:	e7fa      	b.n	8015cd6 <nvs_buffer_sync_physical+0x16e>
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	e7f8      	b.n	8015cd6 <nvs_buffer_sync_physical+0x16e>
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	e7f6      	b.n	8015cd6 <nvs_buffer_sync_physical+0x16e>
    } else if(physical_nvs.memcpy_to_flash) {
 8015ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8015d24 <nvs_buffer_sync_physical+0x1bc>)
 8015cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d0f4      	beq.n	8015cda <nvs_buffer_sync_physical+0x172>
        uint_fast8_t retries = 4;
 8015cf0:	2404      	movs	r4, #4
 8015cf2:	e001      	b.n	8015cf8 <nvs_buffer_sync_physical+0x190>
                retries = 0;
 8015cf4:	2400      	movs	r4, #0
        } while(retries);
 8015cf6:	b16c      	cbz	r4, 8015d14 <nvs_buffer_sync_physical+0x1ac>
            if(physical_nvs.memcpy_to_flash(nvsbuffer))
 8015cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8015d24 <nvs_buffer_sync_physical+0x1bc>)
 8015cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8015d28 <nvs_buffer_sync_physical+0x1c0>)
 8015cfe:	6810      	ldr	r0, [r2, #0]
 8015d00:	4798      	blx	r3
 8015d02:	2800      	cmp	r0, #0
 8015d04:	d1f6      	bne.n	8015cf4 <nvs_buffer_sync_physical+0x18c>
            else if(--retries == 0)
 8015d06:	3c01      	subs	r4, #1
 8015d08:	d1f5      	bne.n	8015cf6 <nvs_buffer_sync_physical+0x18e>
                report_message("Settings write failed!", Message_Warning);
 8015d0a:	2102      	movs	r1, #2
 8015d0c:	4808      	ldr	r0, [pc, #32]	@ (8015d30 <nvs_buffer_sync_physical+0x1c8>)
 8015d0e:	f003 f993 	bl	8019038 <report_message>
 8015d12:	e7f0      	b.n	8015cf6 <nvs_buffer_sync_physical+0x18e>
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 8015d14:	4b02      	ldr	r3, [pc, #8]	@ (8015d20 <nvs_buffer_sync_physical+0x1b8>)
 8015d16:	2200      	movs	r2, #0
 8015d18:	601a      	str	r2, [r3, #0]
 8015d1a:	605a      	str	r2, [r3, #4]
 8015d1c:	e7dd      	b.n	8015cda <nvs_buffer_sync_physical+0x172>
 8015d1e:	4770      	bx	lr
 8015d20:	200016fc 	.word	0x200016fc
 8015d24:	20001708 	.word	0x20001708
 8015d28:	20001734 	.word	0x20001734
 8015d2c:	200011c0 	.word	0x200011c0
 8015d30:	0802b444 	.word	0x0802b444

08015d34 <nvs_buffer_free>:
{
 8015d34:	b508      	push	{r3, lr}
    if(nvsbuffer) {
 8015d36:	4b05      	ldr	r3, [pc, #20]	@ (8015d4c <nvs_buffer_free+0x18>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	b12b      	cbz	r3, 8015d48 <nvs_buffer_free+0x14>
        nvs_buffer_sync_physical();
 8015d3c:	f7ff ff14 	bl	8015b68 <nvs_buffer_sync_physical>
        free(nvsbuffer);
 8015d40:	4b02      	ldr	r3, [pc, #8]	@ (8015d4c <nvs_buffer_free+0x18>)
 8015d42:	6818      	ldr	r0, [r3, #0]
 8015d44:	f00c fbb2 	bl	80224ac <free>
}
 8015d48:	bd08      	pop	{r3, pc}
 8015d4a:	bf00      	nop
 8015d4c:	20001734 	.word	0x20001734

08015d50 <nvs_buffer_get_physical>:

nvs_io_t *nvs_buffer_get_physical (void)
{
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 8015d50:	4b04      	ldr	r3, [pc, #16]	@ (8015d64 <nvs_buffer_get_physical+0x14>)
 8015d52:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8015d56:	2b04      	cmp	r3, #4
 8015d58:	d001      	beq.n	8015d5e <nvs_buffer_get_physical+0xe>
 8015d5a:	4803      	ldr	r0, [pc, #12]	@ (8015d68 <nvs_buffer_get_physical+0x18>)
}
 8015d5c:	4770      	bx	lr
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 8015d5e:	4803      	ldr	r0, [pc, #12]	@ (8015d6c <nvs_buffer_get_physical+0x1c>)
 8015d60:	4770      	bx	lr
 8015d62:	bf00      	nop
 8015d64:	200011c0 	.word	0x200011c0
 8015d68:	20001334 	.word	0x20001334
 8015d6c:	20001708 	.word	0x20001708

08015d70 <enqueue_feed_override>:

static override_queue_t feed = {0}, spindle = {0}, coolant = {0};

ISR_CODE void ISR_FUNC(enqueue_feed_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (feed.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8015d70:	4a06      	ldr	r2, [pc, #24]	@ (8015d8c <enqueue_feed_override+0x1c>)
 8015d72:	6813      	ldr	r3, [r2, #0]
 8015d74:	3301      	adds	r3, #1
 8015d76:	f003 030f 	and.w	r3, r3, #15

    if(bptr != feed.tail) {         // If not buffer full
 8015d7a:	6852      	ldr	r2, [r2, #4]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d004      	beq.n	8015d8a <enqueue_feed_override+0x1a>
        feed.buf[feed.head] = cmd;  // add data to buffer
 8015d80:	4a02      	ldr	r2, [pc, #8]	@ (8015d8c <enqueue_feed_override+0x1c>)
 8015d82:	6811      	ldr	r1, [r2, #0]
 8015d84:	4411      	add	r1, r2
 8015d86:	7208      	strb	r0, [r1, #8]
        feed.head = bptr;           // and update pointer
 8015d88:	6013      	str	r3, [r2, #0]
    }
}
 8015d8a:	4770      	bx	lr
 8015d8c:	20001768 	.word	0x20001768

08015d90 <get_feed_override>:

// Returns 0 if no commands enqueued
uint8_t get_feed_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = feed.tail;
 8015d90:	4a07      	ldr	r2, [pc, #28]	@ (8015db0 <get_feed_override+0x20>)
 8015d92:	6853      	ldr	r3, [r2, #4]

    if(bptr != feed.head) {
 8015d94:	6812      	ldr	r2, [r2, #0]
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d007      	beq.n	8015daa <get_feed_override+0x1a>
        data = feed.buf[bptr++];                    // Get next character, increment tmp pointer
 8015d9a:	1c5a      	adds	r2, r3, #1
 8015d9c:	4904      	ldr	r1, [pc, #16]	@ (8015db0 <get_feed_override+0x20>)
 8015d9e:	440b      	add	r3, r1
 8015da0:	7a18      	ldrb	r0, [r3, #8]
        feed.tail = bptr & (OVERRIDE_BUFSIZE - 1);  // and update pointer
 8015da2:	f002 020f 	and.w	r2, r2, #15
 8015da6:	604a      	str	r2, [r1, #4]
 8015da8:	4770      	bx	lr
    uint8_t data = 0;
 8015daa:	2000      	movs	r0, #0
    }

    return data;
}
 8015dac:	4770      	bx	lr
 8015dae:	bf00      	nop
 8015db0:	20001768 	.word	0x20001768

08015db4 <enqueue_spindle_override>:

ISR_CODE void ISR_FUNC(enqueue_spindle_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (spindle.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8015db4:	4a06      	ldr	r2, [pc, #24]	@ (8015dd0 <enqueue_spindle_override+0x1c>)
 8015db6:	6813      	ldr	r3, [r2, #0]
 8015db8:	3301      	adds	r3, #1
 8015dba:	f003 030f 	and.w	r3, r3, #15

    if(bptr != spindle.tail) {              // If not buffer full
 8015dbe:	6852      	ldr	r2, [r2, #4]
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d004      	beq.n	8015dce <enqueue_spindle_override+0x1a>
        spindle.buf[spindle.head] = cmd;    // add data to buffer
 8015dc4:	4a02      	ldr	r2, [pc, #8]	@ (8015dd0 <enqueue_spindle_override+0x1c>)
 8015dc6:	6811      	ldr	r1, [r2, #0]
 8015dc8:	4411      	add	r1, r2
 8015dca:	7208      	strb	r0, [r1, #8]
        spindle.head = bptr;                // and update pointer
 8015dcc:	6013      	str	r3, [r2, #0]
    }
}
 8015dce:	4770      	bx	lr
 8015dd0:	20001750 	.word	0x20001750

08015dd4 <get_spindle_override>:

// Returns 0 if no commands enqueued
uint8_t get_spindle_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = spindle.tail;
 8015dd4:	4a07      	ldr	r2, [pc, #28]	@ (8015df4 <get_spindle_override+0x20>)
 8015dd6:	6853      	ldr	r3, [r2, #4]

    if(bptr != spindle.head) {
 8015dd8:	6812      	ldr	r2, [r2, #0]
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	d007      	beq.n	8015dee <get_spindle_override+0x1a>
        data = spindle.buf[bptr++];                     // Get next character, increment tmp pointer
 8015dde:	1c5a      	adds	r2, r3, #1
 8015de0:	4904      	ldr	r1, [pc, #16]	@ (8015df4 <get_spindle_override+0x20>)
 8015de2:	440b      	add	r3, r1
 8015de4:	7a18      	ldrb	r0, [r3, #8]
        spindle.tail = bptr & (OVERRIDE_BUFSIZE - 1);   // and update pointer
 8015de6:	f002 020f 	and.w	r2, r2, #15
 8015dea:	604a      	str	r2, [r1, #4]
 8015dec:	4770      	bx	lr
    uint8_t data = 0;
 8015dee:	2000      	movs	r0, #0
    }

    return data;
}
 8015df0:	4770      	bx	lr
 8015df2:	bf00      	nop
 8015df4:	20001750 	.word	0x20001750

08015df8 <enqueue_coolant_override>:

ISR_CODE void ISR_FUNC(enqueue_coolant_override)(uint8_t cmd)
{
    uint_fast8_t bptr = (coolant.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8015df8:	4a06      	ldr	r2, [pc, #24]	@ (8015e14 <enqueue_coolant_override+0x1c>)
 8015dfa:	6813      	ldr	r3, [r2, #0]
 8015dfc:	3301      	adds	r3, #1
 8015dfe:	f003 030f 	and.w	r3, r3, #15

    if(bptr != coolant.tail) {              // If not buffer full
 8015e02:	6852      	ldr	r2, [r2, #4]
 8015e04:	429a      	cmp	r2, r3
 8015e06:	d004      	beq.n	8015e12 <enqueue_coolant_override+0x1a>
        coolant.buf[coolant.head] = cmd;    // add data to buffer
 8015e08:	4a02      	ldr	r2, [pc, #8]	@ (8015e14 <enqueue_coolant_override+0x1c>)
 8015e0a:	6811      	ldr	r1, [r2, #0]
 8015e0c:	4411      	add	r1, r2
 8015e0e:	7208      	strb	r0, [r1, #8]
        coolant.head = bptr;                // and update pointer
 8015e10:	6013      	str	r3, [r2, #0]
    }
}
 8015e12:	4770      	bx	lr
 8015e14:	20001738 	.word	0x20001738

08015e18 <get_coolant_override>:

// Returns 0 if no commands enqueued
uint8_t get_coolant_override (void)
{
    uint8_t data = 0;
    uint_fast8_t bptr = coolant.tail;
 8015e18:	4a07      	ldr	r2, [pc, #28]	@ (8015e38 <get_coolant_override+0x20>)
 8015e1a:	6853      	ldr	r3, [r2, #4]

    if(bptr != coolant.head) {
 8015e1c:	6812      	ldr	r2, [r2, #0]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d007      	beq.n	8015e32 <get_coolant_override+0x1a>
        data = coolant.buf[bptr++];                   // Get next character, increment tmp pointer
 8015e22:	1c5a      	adds	r2, r3, #1
 8015e24:	4904      	ldr	r1, [pc, #16]	@ (8015e38 <get_coolant_override+0x20>)
 8015e26:	440b      	add	r3, r1
 8015e28:	7a18      	ldrb	r0, [r3, #8]
        coolant.tail = bptr & (OVERRIDE_BUFSIZE - 1); // and update pointer
 8015e2a:	f002 020f 	and.w	r2, r2, #15
 8015e2e:	604a      	str	r2, [r1, #4]
 8015e30:	4770      	bx	lr
    uint8_t data = 0;
 8015e32:	2000      	movs	r0, #0
    }

    return data;
}
 8015e34:	4770      	bx	lr
 8015e36:	bf00      	nop
 8015e38:	20001738 	.word	0x20001738

08015e3c <flush_override_buffers>:

void flush_override_buffers (void)
{
    feed.head = feed.tail = spindle.head = spindle.tail = coolant.head = coolant.tail = 0;
 8015e3c:	4a05      	ldr	r2, [pc, #20]	@ (8015e54 <flush_override_buffers+0x18>)
 8015e3e:	2300      	movs	r3, #0
 8015e40:	6053      	str	r3, [r2, #4]
 8015e42:	6013      	str	r3, [r2, #0]
 8015e44:	4a04      	ldr	r2, [pc, #16]	@ (8015e58 <flush_override_buffers+0x1c>)
 8015e46:	6053      	str	r3, [r2, #4]
 8015e48:	6013      	str	r3, [r2, #0]
 8015e4a:	4a04      	ldr	r2, [pc, #16]	@ (8015e5c <flush_override_buffers+0x20>)
 8015e4c:	6053      	str	r3, [r2, #4]
 8015e4e:	6013      	str	r3, [r2, #0]
}
 8015e50:	4770      	bx	lr
 8015e52:	bf00      	nop
 8015e54:	20001738 	.word	0x20001738
 8015e58:	20001750 	.word	0x20001750
 8015e5c:	20001768 	.word	0x20001768

08015e60 <limit_acceleration_by_axis_maximum>:
}

static inline float limit_acceleration_by_axis_maximum (float *unit_vec)
{
    uint_fast8_t idx = N_AXIS;
    float limit_value = SOME_LARGE_VALUE;
 8015e60:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8015ea8 <limit_acceleration_by_axis_maximum+0x48>
    uint_fast8_t idx = N_AXIS;
 8015e64:	2303      	movs	r3, #3
 8015e66:	e000      	b.n	8015e6a <limit_acceleration_by_axis_maximum+0xa>

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
    } while(idx);
 8015e68:	b1e3      	cbz	r3, 8015ea4 <limit_acceleration_by_axis_maximum+0x44>
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 8015e6a:	3b01      	subs	r3, #1
 8015e6c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8015e70:	edd2 7a00 	vldr	s15, [r2]
 8015e74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e7c:	d0f4      	beq.n	8015e68 <limit_acceleration_by_axis_maximum+0x8>
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
 8015e7e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8015e82:	4a0a      	ldr	r2, [pc, #40]	@ (8015eac <limit_acceleration_by_axis_maximum+0x4c>)
 8015e84:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015e88:	edd2 6a0e 	vldr	s13, [r2, #56]	@ 0x38
 8015e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015e90:	eef0 7ac7 	vabs.f32	s15, s14
 8015e94:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9c:	dce4      	bgt.n	8015e68 <limit_acceleration_by_axis_maximum+0x8>
 8015e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8015ea2:	e7e1      	b.n	8015e68 <limit_acceleration_by_axis_maximum+0x8>

    return limit_value;
}
 8015ea4:	4770      	bx	lr
 8015ea6:	bf00      	nop
 8015ea8:	7e967699 	.word	0x7e967699
 8015eac:	20001bd8 	.word	0x20001bd8

08015eb0 <limit_max_rate_by_axis_maximum>:

static inline float limit_max_rate_by_axis_maximum (float *unit_vec)
{
    uint_fast8_t idx = N_AXIS;
    float limit_value = SOME_LARGE_VALUE;
 8015eb0:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8015ef8 <limit_max_rate_by_axis_maximum+0x48>
    uint_fast8_t idx = N_AXIS;
 8015eb4:	2303      	movs	r3, #3
 8015eb6:	e000      	b.n	8015eba <limit_max_rate_by_axis_maximum+0xa>

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
    } while(idx);
 8015eb8:	b1e3      	cbz	r3, 8015ef4 <limit_max_rate_by_axis_maximum+0x44>
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 8015eba:	3b01      	subs	r3, #1
 8015ebc:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8015ec0:	edd2 7a00 	vldr	s15, [r2]
 8015ec4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ecc:	d0f4      	beq.n	8015eb8 <limit_max_rate_by_axis_maximum+0x8>
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
 8015ece:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8015ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8015efc <limit_max_rate_by_axis_maximum+0x4c>)
 8015ed4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015ed8:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
 8015edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ee0:	eef0 7ac7 	vabs.f32	s15, s14
 8015ee4:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eec:	dce4      	bgt.n	8015eb8 <limit_max_rate_by_axis_maximum+0x8>
 8015eee:	eeb0 0a67 	vmov.f32	s0, s15
 8015ef2:	e7e1      	b.n	8015eb8 <limit_max_rate_by_axis_maximum+0x8>

    return limit_value;
}
 8015ef4:	4770      	bx	lr
 8015ef6:	bf00      	nop
 8015ef8:	7e967699 	.word	0x7e967699
 8015efc:	20001bd8 	.word	0x20001bd8

08015f00 <plan_cleanup>:
{
 8015f00:	b538      	push	{r3, r4, r5, lr}
 8015f02:	4604      	mov	r4, r0
    if(block->message) {
 8015f04:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8015f06:	b140      	cbz	r0, 8015f1a <plan_cleanup+0x1a>
        free(block->message);
 8015f08:	f00c fad0 	bl	80224ac <free>
        block->message = NULL;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8015f10:	e003      	b.n	8015f1a <plan_cleanup+0x1a>
        output_command_t *next = block->output_commands->next;
 8015f12:	6885      	ldr	r5, [r0, #8]
        free(block->output_commands);
 8015f14:	f00c faca 	bl	80224ac <free>
        block->output_commands = next;
 8015f18:	64e5      	str	r5, [r4, #76]	@ 0x4c
    while(block->output_commands) {
 8015f1a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	d1f8      	bne.n	8015f12 <plan_cleanup+0x12>
}
 8015f20:	bd38      	pop	{r3, r4, r5, pc}
	...

08015f24 <plan_reset_buffer>:
{
 8015f24:	b508      	push	{r3, lr}
    if(block_buffer_tail) {
 8015f26:	4b0e      	ldr	r3, [pc, #56]	@ (8015f60 <plan_reset_buffer+0x3c>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	b933      	cbnz	r3, 8015f3a <plan_reset_buffer+0x16>
 8015f2c:	e00b      	b.n	8015f46 <plan_reset_buffer+0x22>
            plan_cleanup(block_buffer_tail);
 8015f2e:	f7ff ffe7 	bl	8015f00 <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 8015f32:	4b0b      	ldr	r3, [pc, #44]	@ (8015f60 <plan_reset_buffer+0x3c>)
 8015f34:	681a      	ldr	r2, [r3, #0]
 8015f36:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8015f38:	601a      	str	r2, [r3, #0]
        while(block_buffer_tail != block_buffer_head) {
 8015f3a:	4b09      	ldr	r3, [pc, #36]	@ (8015f60 <plan_reset_buffer+0x3c>)
 8015f3c:	6818      	ldr	r0, [r3, #0]
 8015f3e:	4b09      	ldr	r3, [pc, #36]	@ (8015f64 <plan_reset_buffer+0x40>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4298      	cmp	r0, r3
 8015f44:	d1f3      	bne.n	8015f2e <plan_reset_buffer+0xa>
    block_buffer_tail = block_buffer_head = block_buffer;   // Empty = tail == head
 8015f46:	4b08      	ldr	r3, [pc, #32]	@ (8015f68 <plan_reset_buffer+0x44>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	4a06      	ldr	r2, [pc, #24]	@ (8015f64 <plan_reset_buffer+0x40>)
 8015f4c:	6013      	str	r3, [r2, #0]
 8015f4e:	4a04      	ldr	r2, [pc, #16]	@ (8015f60 <plan_reset_buffer+0x3c>)
 8015f50:	6013      	str	r3, [r2, #0]
    next_buffer_head = block_buffer_head->next;             // = next block
 8015f52:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8015f54:	4a05      	ldr	r2, [pc, #20]	@ (8015f6c <plan_reset_buffer+0x48>)
 8015f56:	6011      	str	r1, [r2, #0]
    block_buffer_planned = block_buffer_tail;               // = block_buffer_tail
 8015f58:	4a05      	ldr	r2, [pc, #20]	@ (8015f70 <plan_reset_buffer+0x4c>)
 8015f5a:	6013      	str	r3, [r2, #0]
}
 8015f5c:	bd08      	pop	{r3, pc}
 8015f5e:	bf00      	nop
 8015f60:	200017a8 	.word	0x200017a8
 8015f64:	200017a4 	.word	0x200017a4
 8015f68:	200017ac 	.word	0x200017ac
 8015f6c:	200017a0 	.word	0x200017a0
 8015f70:	2000179c 	.word	0x2000179c

08015f74 <planner_recalculate>:
{
 8015f74:	b570      	push	{r4, r5, r6, lr}
    plan_block_t *block = block_buffer_head->prev;
 8015f76:	4b42      	ldr	r3, [pc, #264]	@ (8016080 <planner_recalculate+0x10c>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    if (block == block_buffer_planned)
 8015f7c:	4b41      	ldr	r3, [pc, #260]	@ (8016084 <planner_recalculate+0x110>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	42b3      	cmp	r3, r6
 8015f82:	d07b      	beq.n	801607c <planner_recalculate+0x108>
    current->entry_speed_sqr = min(current->max_entry_speed_sqr, 2.0f * current->acceleration * current->millimeters);
 8015f84:	ed96 7a08 	vldr	s14, [r6, #32]
 8015f88:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
 8015f8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015f90:	edd6 6a0a 	vldr	s13, [r6, #40]	@ 0x28
 8015f94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fa0:	d501      	bpl.n	8015fa6 <planner_recalculate+0x32>
 8015fa2:	eef0 7a47 	vmov.f32	s15, s14
 8015fa6:	edc6 7a07 	vstr	s15, [r6, #28]
    block = block->prev;
 8015faa:	6d34      	ldr	r4, [r6, #80]	@ 0x50
    if (block == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8015fac:	42a3      	cmp	r3, r4
 8015fae:	d111      	bne.n	8015fd4 <planner_recalculate+0x60>
        if (block == block_buffer_tail)
 8015fb0:	4b35      	ldr	r3, [pc, #212]	@ (8016088 <planner_recalculate+0x114>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	42a3      	cmp	r3, r4
 8015fb6:	d003      	beq.n	8015fc0 <planner_recalculate+0x4c>
    next = block_buffer_planned; // Begin at buffer planned pointer
 8015fb8:	4b32      	ldr	r3, [pc, #200]	@ (8016084 <planner_recalculate+0x110>)
 8015fba:	681a      	ldr	r2, [r3, #0]
    block = block_buffer_planned->next;
 8015fbc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
    while (block != block_buffer_head) {
 8015fbe:	e03c      	b.n	801603a <planner_recalculate+0xc6>
            st_update_plan_block_parameters();
 8015fc0:	f009 fbb4 	bl	801f72c <st_update_plan_block_parameters>
 8015fc4:	e7f8      	b.n	8015fb8 <planner_recalculate+0x44>
            st_update_plan_block_parameters();
 8015fc6:	f009 fbb1 	bl	801f72c <st_update_plan_block_parameters>
 8015fca:	e00c      	b.n	8015fe6 <planner_recalculate+0x72>
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 8015fcc:	ed84 7a07 	vstr	s14, [r4, #28]
 8015fd0:	4626      	mov	r6, r4
 8015fd2:	462c      	mov	r4, r5
    } else while (block != block_buffer_planned) { // Three or more plan-able blocks
 8015fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8016084 <planner_recalculate+0x110>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	42a3      	cmp	r3, r4
 8015fda:	d0ed      	beq.n	8015fb8 <planner_recalculate+0x44>
        block = block->prev;
 8015fdc:	6d25      	ldr	r5, [r4, #80]	@ 0x50
        if (block == block_buffer_tail)
 8015fde:	4b2a      	ldr	r3, [pc, #168]	@ (8016088 <planner_recalculate+0x114>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	42ab      	cmp	r3, r5
 8015fe4:	d0ef      	beq.n	8015fc6 <planner_recalculate+0x52>
        if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8015fe6:	edd4 7a07 	vldr	s15, [r4, #28]
 8015fea:	ed94 7a08 	vldr	s14, [r4, #32]
 8015fee:	eef4 7a47 	vcmp.f32	s15, s14
 8015ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff6:	d0eb      	beq.n	8015fd0 <planner_recalculate+0x5c>
            entry_speed_sqr = next->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 8015ff8:	edd6 6a07 	vldr	s13, [r6, #28]
 8015ffc:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8016000:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016004:	ed94 6a0a 	vldr	s12, [r4, #40]	@ 0x28
 8016008:	ee67 7a86 	vmul.f32	s15, s15, s12
 801600c:	ee76 7aa7 	vadd.f32	s15, s13, s15
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 8016010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016018:	ddd8      	ble.n	8015fcc <planner_recalculate+0x58>
 801601a:	eeb0 7a67 	vmov.f32	s14, s15
 801601e:	e7d5      	b.n	8015fcc <planner_recalculate+0x58>
        if (next->entry_speed_sqr == next->max_entry_speed_sqr)
 8016020:	ed93 7a07 	vldr	s14, [r3, #28]
 8016024:	edd3 7a08 	vldr	s15, [r3, #32]
 8016028:	eeb4 7a67 	vcmp.f32	s14, s15
 801602c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016030:	d101      	bne.n	8016036 <planner_recalculate+0xc2>
            block_buffer_planned = block;
 8016032:	4a14      	ldr	r2, [pc, #80]	@ (8016084 <planner_recalculate+0x110>)
 8016034:	6013      	str	r3, [r2, #0]
        next = block;
 8016036:	461a      	mov	r2, r3
        block = block->next;
 8016038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    while (block != block_buffer_head) {
 801603a:	4911      	ldr	r1, [pc, #68]	@ (8016080 <planner_recalculate+0x10c>)
 801603c:	6809      	ldr	r1, [r1, #0]
 801603e:	4299      	cmp	r1, r3
 8016040:	d01c      	beq.n	801607c <planner_recalculate+0x108>
        if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8016042:	edd2 7a07 	vldr	s15, [r2, #28]
 8016046:	edd3 6a07 	vldr	s13, [r3, #28]
 801604a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801604e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016052:	d5e5      	bpl.n	8016020 <planner_recalculate+0xac>
            entry_speed_sqr = current->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 8016054:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8016058:	ee37 7a07 	vadd.f32	s14, s14, s14
 801605c:	ed92 6a0a 	vldr	s12, [r2, #40]	@ 0x28
 8016060:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016064:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (entry_speed_sqr < next->entry_speed_sqr) {
 8016068:	eef4 6ae7 	vcmpe.f32	s13, s15
 801606c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016070:	ddd6      	ble.n	8016020 <planner_recalculate+0xac>
                next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8016072:	edc3 7a07 	vstr	s15, [r3, #28]
                block_buffer_planned = block; // Set optimal plan pointer.
 8016076:	4a03      	ldr	r2, [pc, #12]	@ (8016084 <planner_recalculate+0x110>)
 8016078:	6013      	str	r3, [r2, #0]
 801607a:	e7d1      	b.n	8016020 <planner_recalculate+0xac>
}
 801607c:	bd70      	pop	{r4, r5, r6, pc}
 801607e:	bf00      	nop
 8016080:	200017a4 	.word	0x200017a4
 8016084:	2000179c 	.word	0x2000179c
 8016088:	200017a8 	.word	0x200017a8

0801608c <plan_get_buffer_size>:
}
 801608c:	4b01      	ldr	r3, [pc, #4]	@ (8016094 <plan_get_buffer_size+0x8>)
 801608e:	6818      	ldr	r0, [r3, #0]
 8016090:	4770      	bx	lr
 8016092:	bf00      	nop
 8016094:	200017b0 	.word	0x200017b0

08016098 <plan_reset>:
{
 8016098:	b510      	push	{r4, lr}
    if(block_buffer == NULL) {
 801609a:	4b37      	ldr	r3, [pc, #220]	@ (8016178 <plan_reset+0xe0>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	b16b      	cbz	r3, 80160bc <plan_reset+0x24>
    if(block_buffer_size != settings.planner_buffer_blocks)
 80160a0:	4b36      	ldr	r3, [pc, #216]	@ (801617c <plan_reset+0xe4>)
 80160a2:	8ada      	ldrh	r2, [r3, #22]
 80160a4:	4b36      	ldr	r3, [pc, #216]	@ (8016180 <plan_reset+0xe8>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d121      	bne.n	80160f0 <plan_reset+0x58>
    if(block_buffer == NULL)
 80160ac:	4b32      	ldr	r3, [pc, #200]	@ (8016178 <plan_reset+0xe0>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d05e      	beq.n	8016172 <plan_reset+0xda>
    if(block_buffer_tail) {
 80160b4:	4b33      	ldr	r3, [pc, #204]	@ (8016184 <plan_reset+0xec>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	bb2b      	cbnz	r3, 8016106 <plan_reset+0x6e>
 80160ba:	e02d      	b.n	8016118 <plan_reset+0x80>
        block_buffer_size = settings.planner_buffer_blocks;
 80160bc:	4b2f      	ldr	r3, [pc, #188]	@ (801617c <plan_reset+0xe4>)
 80160be:	8ada      	ldrh	r2, [r3, #22]
 80160c0:	4b2f      	ldr	r3, [pc, #188]	@ (8016180 <plan_reset+0xe8>)
 80160c2:	601a      	str	r2, [r3, #0]
        while((block_buffer = malloc((block_buffer_size + 1) * sizeof(plan_block_t))) == NULL) {
 80160c4:	4b2e      	ldr	r3, [pc, #184]	@ (8016180 <plan_reset+0xe8>)
 80160c6:	681c      	ldr	r4, [r3, #0]
 80160c8:	2058      	movs	r0, #88	@ 0x58
 80160ca:	fb04 0000 	mla	r0, r4, r0, r0
 80160ce:	f00c f9e5 	bl	802249c <malloc>
 80160d2:	4b29      	ldr	r3, [pc, #164]	@ (8016178 <plan_reset+0xe0>)
 80160d4:	6018      	str	r0, [r3, #0]
 80160d6:	2800      	cmp	r0, #0
 80160d8:	d1e2      	bne.n	80160a0 <plan_reset+0x8>
            if(block_buffer_size > 40)
 80160da:	2c28      	cmp	r4, #40	@ 0x28
 80160dc:	d9e0      	bls.n	80160a0 <plan_reset+0x8>
                block_buffer_size -= block_buffer_size >= 250 ? 100 : 10;
 80160de:	2cf9      	cmp	r4, #249	@ 0xf9
 80160e0:	d904      	bls.n	80160ec <plan_reset+0x54>
 80160e2:	2364      	movs	r3, #100	@ 0x64
 80160e4:	1ae4      	subs	r4, r4, r3
 80160e6:	4b26      	ldr	r3, [pc, #152]	@ (8016180 <plan_reset+0xe8>)
 80160e8:	601c      	str	r4, [r3, #0]
 80160ea:	e7eb      	b.n	80160c4 <plan_reset+0x2c>
 80160ec:	230a      	movs	r3, #10
 80160ee:	e7f9      	b.n	80160e4 <plan_reset+0x4c>
        protocol_enqueue_foreground_task(report_plain, "Planner buffer size was reduced!");
 80160f0:	4925      	ldr	r1, [pc, #148]	@ (8016188 <plan_reset+0xf0>)
 80160f2:	4826      	ldr	r0, [pc, #152]	@ (801618c <plan_reset+0xf4>)
 80160f4:	f001 fb2c 	bl	8017750 <protocol_enqueue_foreground_task>
 80160f8:	e7d8      	b.n	80160ac <plan_reset+0x14>
            plan_cleanup(block_buffer_tail);
 80160fa:	f7ff ff01 	bl	8015f00 <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 80160fe:	4b21      	ldr	r3, [pc, #132]	@ (8016184 <plan_reset+0xec>)
 8016100:	681a      	ldr	r2, [r3, #0]
 8016102:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8016104:	601a      	str	r2, [r3, #0]
        while(block_buffer_tail != block_buffer_head) {
 8016106:	4b1f      	ldr	r3, [pc, #124]	@ (8016184 <plan_reset+0xec>)
 8016108:	6818      	ldr	r0, [r3, #0]
 801610a:	4b21      	ldr	r3, [pc, #132]	@ (8016190 <plan_reset+0xf8>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	4298      	cmp	r0, r3
 8016110:	d1f3      	bne.n	80160fa <plan_reset+0x62>
        block_buffer_tail = NULL;
 8016112:	4b1c      	ldr	r3, [pc, #112]	@ (8016184 <plan_reset+0xec>)
 8016114:	2200      	movs	r2, #0
 8016116:	601a      	str	r2, [r3, #0]
    memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8016118:	4a1e      	ldr	r2, [pc, #120]	@ (8016194 <plan_reset+0xfc>)
 801611a:	2300      	movs	r3, #0
 801611c:	6013      	str	r3, [r2, #0]
 801611e:	6053      	str	r3, [r2, #4]
 8016120:	6093      	str	r3, [r2, #8]
 8016122:	60d3      	str	r3, [r2, #12]
 8016124:	6113      	str	r3, [r2, #16]
 8016126:	6153      	str	r3, [r2, #20]
 8016128:	6193      	str	r3, [r2, #24]
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 801612a:	e010      	b.n	801614e <plan_reset+0xb6>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 801612c:	2258      	movs	r2, #88	@ 0x58
 801612e:	fb03 f202 	mul.w	r2, r3, r2
 8016132:	3a58      	subs	r2, #88	@ 0x58
 8016134:	2058      	movs	r0, #88	@ 0x58
 8016136:	fb00 1003 	mla	r0, r0, r3, r1
 801613a:	440a      	add	r2, r1
 801613c:	6502      	str	r2, [r0, #80]	@ 0x50
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 801613e:	429c      	cmp	r4, r3
 8016140:	d011      	beq.n	8016166 <plan_reset+0xce>
 8016142:	2258      	movs	r2, #88	@ 0x58
 8016144:	fb03 2202 	mla	r2, r3, r2, r2
 8016148:	4411      	add	r1, r2
 801614a:	6541      	str	r1, [r0, #84]	@ 0x54
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 801614c:	3301      	adds	r3, #1
 801614e:	4a0c      	ldr	r2, [pc, #48]	@ (8016180 <plan_reset+0xe8>)
 8016150:	6814      	ldr	r4, [r2, #0]
 8016152:	429c      	cmp	r4, r3
 8016154:	d309      	bcc.n	801616a <plan_reset+0xd2>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 8016156:	4a08      	ldr	r2, [pc, #32]	@ (8016178 <plan_reset+0xe0>)
 8016158:	6811      	ldr	r1, [r2, #0]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d1e6      	bne.n	801612c <plan_reset+0x94>
 801615e:	2258      	movs	r2, #88	@ 0x58
 8016160:	fb04 f202 	mul.w	r2, r4, r2
 8016164:	e7e6      	b.n	8016134 <plan_reset+0x9c>
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 8016166:	2200      	movs	r2, #0
 8016168:	e7ee      	b.n	8016148 <plan_reset+0xb0>
    plan_reset_buffer();
 801616a:	f7ff fedb 	bl	8015f24 <plan_reset_buffer>
    return true;
 801616e:	2001      	movs	r0, #1
}
 8016170:	bd10      	pop	{r4, pc}
        return false;
 8016172:	2000      	movs	r0, #0
 8016174:	e7fc      	b.n	8016170 <plan_reset+0xd8>
 8016176:	bf00      	nop
 8016178:	200017ac 	.word	0x200017ac
 801617c:	20001bd8 	.word	0x20001bd8
 8016180:	200017b0 	.word	0x200017b0
 8016184:	200017a8 	.word	0x200017a8
 8016188:	0802b4a0 	.word	0x0802b4a0
 801618c:	080190e5 	.word	0x080190e5
 8016190:	200017a4 	.word	0x200017a4
 8016194:	20001780 	.word	0x20001780

08016198 <plan_discard_current_block>:
{
 8016198:	b508      	push	{r3, lr}
    if (block_buffer_tail != block_buffer_head) { // Discard non-empty buffer.
 801619a:	4b0b      	ldr	r3, [pc, #44]	@ (80161c8 <plan_discard_current_block+0x30>)
 801619c:	6818      	ldr	r0, [r3, #0]
 801619e:	4b0b      	ldr	r3, [pc, #44]	@ (80161cc <plan_discard_current_block+0x34>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	4298      	cmp	r0, r3
 80161a4:	d00a      	beq.n	80161bc <plan_discard_current_block+0x24>
        plan_cleanup(block_buffer_tail);
 80161a6:	f7ff feab 	bl	8015f00 <plan_cleanup>
        if (block_buffer_tail == block_buffer_planned)
 80161aa:	4b07      	ldr	r3, [pc, #28]	@ (80161c8 <plan_discard_current_block+0x30>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	4a08      	ldr	r2, [pc, #32]	@ (80161d0 <plan_discard_current_block+0x38>)
 80161b0:	6812      	ldr	r2, [r2, #0]
 80161b2:	4293      	cmp	r3, r2
 80161b4:	d003      	beq.n	80161be <plan_discard_current_block+0x26>
        block_buffer_tail = block_buffer_tail->next;
 80161b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80161b8:	4b03      	ldr	r3, [pc, #12]	@ (80161c8 <plan_discard_current_block+0x30>)
 80161ba:	601a      	str	r2, [r3, #0]
}
 80161bc:	bd08      	pop	{r3, pc}
            block_buffer_planned = block_buffer_tail->next;
 80161be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80161c0:	4a03      	ldr	r2, [pc, #12]	@ (80161d0 <plan_discard_current_block+0x38>)
 80161c2:	6011      	str	r1, [r2, #0]
 80161c4:	e7f7      	b.n	80161b6 <plan_discard_current_block+0x1e>
 80161c6:	bf00      	nop
 80161c8:	200017a8 	.word	0x200017a8
 80161cc:	200017a4 	.word	0x200017a4
 80161d0:	2000179c 	.word	0x2000179c

080161d4 <plan_get_system_motion_block>:
}
 80161d4:	4b01      	ldr	r3, [pc, #4]	@ (80161dc <plan_get_system_motion_block+0x8>)
 80161d6:	6818      	ldr	r0, [r3, #0]
 80161d8:	4770      	bx	lr
 80161da:	bf00      	nop
 80161dc:	200017a4 	.word	0x200017a4

080161e0 <plan_get_current_block>:
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 80161e0:	4b04      	ldr	r3, [pc, #16]	@ (80161f4 <plan_get_current_block+0x14>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	4a04      	ldr	r2, [pc, #16]	@ (80161f8 <plan_get_current_block+0x18>)
 80161e6:	6810      	ldr	r0, [r2, #0]
 80161e8:	4283      	cmp	r3, r0
 80161ea:	d000      	beq.n	80161ee <plan_get_current_block+0xe>
}
 80161ec:	4770      	bx	lr
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 80161ee:	2000      	movs	r0, #0
 80161f0:	e7fc      	b.n	80161ec <plan_get_current_block+0xc>
 80161f2:	bf00      	nop
 80161f4:	200017a4 	.word	0x200017a4
 80161f8:	200017a8 	.word	0x200017a8

080161fc <plan_get_exec_block_exit_speed_sqr>:
    plan_block_t *block = block_buffer_tail->next;
 80161fc:	4b06      	ldr	r3, [pc, #24]	@ (8016218 <plan_get_exec_block_exit_speed_sqr+0x1c>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    return block == block_buffer_head ? 0.0f : block->entry_speed_sqr;
 8016202:	4a06      	ldr	r2, [pc, #24]	@ (801621c <plan_get_exec_block_exit_speed_sqr+0x20>)
 8016204:	6812      	ldr	r2, [r2, #0]
 8016206:	429a      	cmp	r2, r3
 8016208:	d002      	beq.n	8016210 <plan_get_exec_block_exit_speed_sqr+0x14>
 801620a:	ed93 0a07 	vldr	s0, [r3, #28]
 801620e:	4770      	bx	lr
 8016210:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8016220 <plan_get_exec_block_exit_speed_sqr+0x24>
}
 8016214:	4770      	bx	lr
 8016216:	bf00      	nop
 8016218:	200017a8 	.word	0x200017a8
 801621c:	200017a4 	.word	0x200017a4
 8016220:	00000000 	.word	0x00000000

08016224 <plan_check_full_buffer>:
    return block_buffer_tail == next_buffer_head;
 8016224:	4b04      	ldr	r3, [pc, #16]	@ (8016238 <plan_check_full_buffer+0x14>)
 8016226:	6818      	ldr	r0, [r3, #0]
 8016228:	4b04      	ldr	r3, [pc, #16]	@ (801623c <plan_check_full_buffer+0x18>)
 801622a:	681b      	ldr	r3, [r3, #0]
}
 801622c:	4298      	cmp	r0, r3
 801622e:	bf14      	ite	ne
 8016230:	2000      	movne	r0, #0
 8016232:	2001      	moveq	r0, #1
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	200017a8 	.word	0x200017a8
 801623c:	200017a0 	.word	0x200017a0

08016240 <plan_compute_profile_nominal_speed>:
{
 8016240:	b510      	push	{r4, lr}
 8016242:	ed2d 8b02 	vpush	{d8}
 8016246:	4604      	mov	r4, r0
    float nominal_speed = block->condition.units_per_rev || block->spindle.state.synchronized
 8016248:	7d03      	ldrb	r3, [r0, #20]
                           : block->programmed_rate;
 801624a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801624e:	d106      	bne.n	801625e <plan_compute_profile_nominal_speed+0x1e>
    float nominal_speed = block->condition.units_per_rev || block->spindle.state.synchronized
 8016250:	f990 303c 	ldrsb.w	r3, [r0, #60]	@ 0x3c
 8016254:	2b00      	cmp	r3, #0
 8016256:	db02      	blt.n	801625e <plan_compute_profile_nominal_speed+0x1e>
                           : block->programmed_rate;
 8016258:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
 801625c:	e009      	b.n	8016272 <plan_compute_profile_nominal_speed+0x32>
                           ? block->programmed_rate * block->spindle.hal->get_data(SpindleData_RPM)->rpm
 801625e:	ed94 8a0d 	vldr	s16, [r4, #52]	@ 0x34
 8016262:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016266:	2001      	movs	r0, #1
 8016268:	4798      	blx	r3
 801626a:	edd0 7a00 	vldr	s15, [r0]
                           : block->programmed_rate;
 801626e:	ee68 7a27 	vmul.f32	s15, s16, s15
    if(block->condition.rapid_motion)
 8016272:	7d23      	ldrb	r3, [r4, #20]
 8016274:	f013 0f01 	tst.w	r3, #1
 8016278:	d014      	beq.n	80162a4 <plan_compute_profile_nominal_speed+0x64>
        nominal_speed *= (0.01f * (float)sys.override.rapid_rate);
 801627a:	4b18      	ldr	r3, [pc, #96]	@ (80162dc <plan_compute_profile_nominal_speed+0x9c>)
 801627c:	ed93 0a08 	vldr	s0, [r3, #32]
 8016280:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8016284:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80162e0 <plan_compute_profile_nominal_speed+0xa0>
 8016288:	ee20 0a07 	vmul.f32	s0, s0, s14
 801628c:	ee20 0a27 	vmul.f32	s0, s0, s15
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 8016290:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016294:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801629c:	dd1a      	ble.n	80162d4 <plan_compute_profile_nominal_speed+0x94>
}
 801629e:	ecbd 8b02 	vpop	{d8}
 80162a2:	bd10      	pop	{r4, pc}
        if(!block->condition.no_feed_override)
 80162a4:	f013 0f10 	tst.w	r3, #16
 80162a8:	d10a      	bne.n	80162c0 <plan_compute_profile_nominal_speed+0x80>
            nominal_speed *= (0.01f * (float)sys.override.feed_rate);
 80162aa:	4b0c      	ldr	r3, [pc, #48]	@ (80162dc <plan_compute_profile_nominal_speed+0x9c>)
 80162ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80162b0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80162b4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80162e0 <plan_compute_profile_nominal_speed+0xa0>
 80162b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80162bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if(nominal_speed > block->rapid_rate)
 80162c0:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 80162c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80162c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162cc:	d4e0      	bmi.n	8016290 <plan_compute_profile_nominal_speed+0x50>
 80162ce:	eeb0 0a67 	vmov.f32	s0, s15
 80162d2:	e7dd      	b.n	8016290 <plan_compute_profile_nominal_speed+0x50>
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 80162d4:	eeb0 0a67 	vmov.f32	s0, s15
 80162d8:	e7e1      	b.n	801629e <plan_compute_profile_nominal_speed+0x5e>
 80162da:	bf00      	nop
 80162dc:	200014a0 	.word	0x200014a0
 80162e0:	3c23d70a 	.word	0x3c23d70a

080162e4 <plan_update_velocity_profile_parameters>:
        planner_recalculate();
}

// Re-calculates buffered motions profile parameters upon a motion-based override change.
static bool plan_update_velocity_profile_parameters (void)
{
 80162e4:	b510      	push	{r4, lr}
 80162e6:	ed2d 8b02 	vpush	{d8}
    if(block_buffer_tail != block_buffer_head) {
 80162ea:	4b1b      	ldr	r3, [pc, #108]	@ (8016358 <plan_update_velocity_profile_parameters+0x74>)
 80162ec:	681c      	ldr	r4, [r3, #0]
 80162ee:	4b1b      	ldr	r3, [pc, #108]	@ (801635c <plan_update_velocity_profile_parameters+0x78>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	429c      	cmp	r4, r3
 80162f4:	d025      	beq.n	8016342 <plan_update_velocity_profile_parameters+0x5e>

        plan_block_t *block = block_buffer_tail;
        float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 80162f6:	ed9f 8a1a 	vldr	s16, [pc, #104]	@ 8016360 <plan_update_velocity_profile_parameters+0x7c>
 80162fa:	e005      	b.n	8016308 <plan_update_velocity_profile_parameters+0x24>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 80162fc:	ee20 8a00 	vmul.f32	s16, s0, s0
 8016300:	e010      	b.n	8016324 <plan_update_velocity_profile_parameters+0x40>

        while (block != block_buffer_head) {
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
            block = block->next;
 8016302:	6d64      	ldr	r4, [r4, #84]	@ 0x54
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 8016304:	eeb0 8a40 	vmov.f32	s16, s0
        while (block != block_buffer_head) {
 8016308:	4b14      	ldr	r3, [pc, #80]	@ (801635c <plan_update_velocity_profile_parameters+0x78>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	42a3      	cmp	r3, r4
 801630e:	d015      	beq.n	801633c <plan_update_velocity_profile_parameters+0x58>
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 8016310:	4620      	mov	r0, r4
 8016312:	f7ff ff95 	bl	8016240 <plan_compute_profile_nominal_speed>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016316:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801631a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801631e:	dded      	ble.n	80162fc <plan_update_velocity_profile_parameters+0x18>
 8016320:	ee28 8a08 	vmul.f32	s16, s16, s16
 8016324:	ed84 8a08 	vstr	s16, [r4, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 8016328:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801632c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016334:	dde5      	ble.n	8016302 <plan_update_velocity_profile_parameters+0x1e>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 8016336:	edc4 7a08 	vstr	s15, [r4, #32]
 801633a:	e7e2      	b.n	8016302 <plan_update_velocity_profile_parameters+0x1e>
        }

        pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 801633c:	4b09      	ldr	r3, [pc, #36]	@ (8016364 <plan_update_velocity_profile_parameters+0x80>)
 801633e:	ed83 8a06 	vstr	s16, [r3, #24]
    }

    return block_buffer_tail != block_buffer_head;
 8016342:	4b05      	ldr	r3, [pc, #20]	@ (8016358 <plan_update_velocity_profile_parameters+0x74>)
 8016344:	6818      	ldr	r0, [r3, #0]
 8016346:	4b05      	ldr	r3, [pc, #20]	@ (801635c <plan_update_velocity_profile_parameters+0x78>)
 8016348:	681b      	ldr	r3, [r3, #0]
}
 801634a:	1ac0      	subs	r0, r0, r3
 801634c:	bf18      	it	ne
 801634e:	2001      	movne	r0, #1
 8016350:	ecbd 8b02 	vpop	{d8}
 8016354:	bd10      	pop	{r4, pc}
 8016356:	bf00      	nop
 8016358:	200017a8 	.word	0x200017a8
 801635c:	200017a4 	.word	0x200017a4
 8016360:	7e967699 	.word	0x7e967699
 8016364:	20001780 	.word	0x20001780

08016368 <plan_buffer_line>:
{
 8016368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801636c:	ed2d 8b04 	vpush	{d8-d9}
 8016370:	b08c      	sub	sp, #48	@ 0x30
 8016372:	4607      	mov	r7, r0
 8016374:	460e      	mov	r6, r1
    plan_block_t *block = block_buffer_head;
 8016376:	4bb6      	ldr	r3, [pc, #728]	@ (8016650 <plan_buffer_line+0x2e8>)
 8016378:	681c      	ldr	r4, [r3, #0]
    memset(block, 0, sizeof(plan_block_t) - 2 * sizeof(plan_block_t *));    // Zero all block values (except linked list pointers).
 801637a:	2250      	movs	r2, #80	@ 0x50
 801637c:	2100      	movs	r1, #0
 801637e:	4620      	mov	r0, r4
 8016380:	f00e f955 	bl	802462e <memset>
    memcpy(&block->spindle, &pl_data->spindle, sizeof(spindle_t));          // Copy spindle data (RPM etc)
 8016384:	6870      	ldr	r0, [r6, #4]
 8016386:	68b1      	ldr	r1, [r6, #8]
 8016388:	68f2      	ldr	r2, [r6, #12]
 801638a:	6933      	ldr	r3, [r6, #16]
 801638c:	63a0      	str	r0, [r4, #56]	@ 0x38
 801638e:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8016390:	6422      	str	r2, [r4, #64]	@ 0x40
 8016392:	6463      	str	r3, [r4, #68]	@ 0x44
    block->condition = pl_data->condition;
 8016394:	6973      	ldr	r3, [r6, #20]
 8016396:	6163      	str	r3, [r4, #20]
    block->overrides = pl_data->overrides;
 8016398:	7e33      	ldrb	r3, [r6, #24]
 801639a:	74a3      	strb	r3, [r4, #18]
    block->line_number = pl_data->line_number;
 801639c:	69f3      	ldr	r3, [r6, #28]
 801639e:	61a3      	str	r3, [r4, #24]
    block->offset_id = pl_data->offset_id;
 80163a0:	f996 3019 	ldrsb.w	r3, [r6, #25]
 80163a4:	7463      	strb	r3, [r4, #17]
    block->output_commands = pl_data->output_commands;
 80163a6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80163a8:	64e3      	str	r3, [r4, #76]	@ 0x4c
    block->message = pl_data->message;
 80163aa:	6a33      	ldr	r3, [r6, #32]
 80163ac:	64a3      	str	r3, [r4, #72]	@ 0x48
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 80163ae:	7d23      	ldrb	r3, [r4, #20]
 80163b0:	f013 0f02 	tst.w	r3, #2
 80163b4:	d006      	beq.n	80163c4 <plan_buffer_line+0x5c>
 80163b6:	4aa7      	ldr	r2, [pc, #668]	@ (8016654 <plan_buffer_line+0x2ec>)
 80163b8:	ab06      	add	r3, sp, #24
 80163ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80163bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    idx = N_AXIS;
 80163c0:	2503      	movs	r5, #3
 80163c2:	e021      	b.n	8016408 <plan_buffer_line+0xa0>
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 80163c4:	4aa4      	ldr	r2, [pc, #656]	@ (8016658 <plan_buffer_line+0x2f0>)
 80163c6:	e7f7      	b.n	80163b8 <plan_buffer_line+0x50>
            block->steps[idx] = labs(delta_steps);
 80163c8:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80163cc:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80163d0:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80163d4:	68e2      	ldr	r2, [r4, #12]
 80163d6:	4293      	cmp	r3, r2
 80163d8:	bf38      	it	cc
 80163da:	4613      	movcc	r3, r2
 80163dc:	60e3      	str	r3, [r4, #12]
            unit_vec[idx] = (float)delta_steps / settings.axis[idx].steps_per_mm; // Store unit vector numerator
 80163de:	ee07 0a90 	vmov	s15, r0
 80163e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163e6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80163ea:	4b9c      	ldr	r3, [pc, #624]	@ (801665c <plan_buffer_line+0x2f4>)
 80163ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80163f0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80163f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80163f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80163fa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80163fe:	ed03 7a09 	vstr	s14, [r3, #-36]	@ 0xffffffdc
        if (delta_steps < 0)
 8016402:	2800      	cmp	r0, #0
 8016404:	db25      	blt.n	8016452 <plan_buffer_line+0xea>
    } while(idx);
 8016406:	b355      	cbz	r5, 801645e <plan_buffer_line+0xf6>
        idx--;
 8016408:	3d01      	subs	r5, #1
        target_steps[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 801640a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 801640e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8016412:	ed93 0a00 	vldr	s0, [r3]
 8016416:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 801641a:	4b90      	ldr	r3, [pc, #576]	@ (801665c <plan_buffer_line+0x2f4>)
 801641c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016420:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8016424:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016428:	f010 ff40 	bl	80272ac <lroundf>
 801642c:	f108 0330 	add.w	r3, r8, #48	@ 0x30
 8016430:	446b      	add	r3, sp
 8016432:	f843 0c0c 	str.w	r0, [r3, #-12]
        if((delta_steps = target_steps[idx] - position_steps[idx])) {
 8016436:	f853 3c18 	ldr.w	r3, [r3, #-24]
 801643a:	1ac0      	subs	r0, r0, r3
 801643c:	d1c4      	bne.n	80163c8 <plan_buffer_line+0x60>
            block->steps[idx] = 0;
 801643e:	2300      	movs	r3, #0
 8016440:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
            unit_vec[idx] = 0.0f; // Store unit vector numerator
 8016444:	2200      	movs	r2, #0
 8016446:	ab0c      	add	r3, sp, #48	@ 0x30
 8016448:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801644c:	f843 2c24 	str.w	r2, [r3, #-36]
 8016450:	e7d7      	b.n	8016402 <plan_buffer_line+0x9a>
            block->direction_bits.mask |= bit(idx);
 8016452:	7c23      	ldrb	r3, [r4, #16]
 8016454:	2201      	movs	r2, #1
 8016456:	40aa      	lsls	r2, r5
 8016458:	4313      	orrs	r3, r2
 801645a:	7423      	strb	r3, [r4, #16]
 801645c:	e7d3      	b.n	8016406 <plan_buffer_line+0x9e>
    if(block->spindle.css) {
 801645e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016460:	2b00      	cmp	r3, #0
 8016462:	d05d      	beq.n	8016520 <plan_buffer_line+0x1b8>
        if((pos = (float)position_steps[block->spindle.css->axis] / settings.axis[block->spindle.css->axis].steps_per_mm - block->spindle.css->tool_offset) > 0.0f) {
 8016464:	695a      	ldr	r2, [r3, #20]
 8016466:	a90c      	add	r1, sp, #48	@ 0x30
 8016468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801646c:	ed11 7a06 	vldr	s14, [r1, #-24]	@ 0xffffffe8
 8016470:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016474:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016478:	4978      	ldr	r1, [pc, #480]	@ (801665c <plan_buffer_line+0x2f4>)
 801647a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801647e:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 8016482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016486:	ed93 7a04 	vldr	s14, [r3, #16]
 801648a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801648e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016496:	dd13      	ble.n	80164c0 <plan_buffer_line+0x158>
            if((block->spindle.rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 8016498:	edd3 6a00 	vldr	s13, [r3]
 801649c:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8016660 <plan_buffer_line+0x2f8>
 80164a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80164a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80164a8:	ed84 7a0e 	vstr	s14, [r4, #56]	@ 0x38
 80164ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80164b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80164b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b8:	dd04      	ble.n	80164c4 <plan_buffer_line+0x15c>
                block->spindle.rpm = block->spindle.css->max_rpm;
 80164ba:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
 80164be:	e001      	b.n	80164c4 <plan_buffer_line+0x15c>
            block->spindle.rpm = block->spindle.css->max_rpm;
 80164c0:	68da      	ldr	r2, [r3, #12]
 80164c2:	63a2      	str	r2, [r4, #56]	@ 0x38
        if((pos = target[block->spindle.css->axis] - block->spindle.css->tool_offset) > 0.0f) {
 80164c4:	695a      	ldr	r2, [r3, #20]
 80164c6:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 80164ca:	edd7 7a00 	vldr	s15, [r7]
 80164ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80164d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80164da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164de:	dd14      	ble.n	801650a <plan_buffer_line+0x1a2>
            if((block->spindle.css->target_rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 80164e0:	edd3 6a00 	vldr	s13, [r3]
 80164e4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8016660 <plan_buffer_line+0x2f8>
 80164e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80164ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80164f0:	ed83 7a01 	vstr	s14, [r3, #4]
 80164f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80164f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80164fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80164fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016502:	dd04      	ble.n	801650e <plan_buffer_line+0x1a6>
                block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 8016504:	edc3 7a01 	vstr	s15, [r3, #4]
 8016508:	e001      	b.n	801650e <plan_buffer_line+0x1a6>
            block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 801650a:	68da      	ldr	r2, [r3, #12]
 801650c:	605a      	str	r2, [r3, #4]
        block->spindle.css->delta_rpm = block->spindle.css->target_rpm - block->spindle.rpm;
 801650e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016510:	edd3 7a01 	vldr	s15, [r3, #4]
 8016514:	ed94 7a0e 	vldr	s14, [r4, #56]	@ 0x38
 8016518:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801651c:	edc3 7a02 	vstr	s15, [r3, #8]
    pl_data->message = NULL;         // Indicate message is already queued for display on execution
 8016520:	2300      	movs	r3, #0
 8016522:	6233      	str	r3, [r6, #32]
    pl_data->output_commands = NULL; // Indicate commands are already queued for execution
 8016524:	6273      	str	r3, [r6, #36]	@ 0x24
    if(block->step_event_count == 0) {
 8016526:	68e3      	ldr	r3, [r4, #12]
 8016528:	b363      	cbz	r3, 8016584 <plan_buffer_line+0x21c>
    block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 801652a:	a803      	add	r0, sp, #12
 801652c:	f7ff f886 	bl	801563c <convert_delta_vector_to_unit_vector>
 8016530:	eeb0 8a40 	vmov.f32	s16, s0
 8016534:	ed84 0a0a 	vstr	s0, [r4, #40]	@ 0x28
    block->acceleration = limit_acceleration_by_axis_maximum(unit_vec);
 8016538:	a803      	add	r0, sp, #12
 801653a:	f7ff fc91 	bl	8015e60 <limit_acceleration_by_axis_maximum>
 801653e:	ed84 0a09 	vstr	s0, [r4, #36]	@ 0x24
    block->rapid_rate = limit_max_rate_by_axis_maximum(unit_vec);
 8016542:	a803      	add	r0, sp, #12
 8016544:	f7ff fcb4 	bl	8015eb0 <limit_max_rate_by_axis_maximum>
 8016548:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
    if (block->condition.rapid_motion)
 801654c:	7d23      	ldrb	r3, [r4, #20]
 801654e:	f013 0f01 	tst.w	r3, #1
 8016552:	d01c      	beq.n	801658e <plan_buffer_line+0x226>
        block->programmed_rate = block->rapid_rate;
 8016554:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
    if ((block_buffer_head == block_buffer_tail) || (block->condition.system_motion)) {
 8016558:	4a3d      	ldr	r2, [pc, #244]	@ (8016650 <plan_buffer_line+0x2e8>)
 801655a:	6811      	ldr	r1, [r2, #0]
 801655c:	4a41      	ldr	r2, [pc, #260]	@ (8016664 <plan_buffer_line+0x2fc>)
 801655e:	6812      	ldr	r2, [r2, #0]
 8016560:	4291      	cmp	r1, r2
 8016562:	d002      	beq.n	801656a <plan_buffer_line+0x202>
 8016564:	f013 0f02 	tst.w	r3, #2
 8016568:	d01d      	beq.n	80165a6 <plan_buffer_line+0x23e>
        block->entry_speed_sqr = 0.0f;
 801656a:	2300      	movs	r3, #0
 801656c:	61e3      	str	r3, [r4, #28]
        block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 801656e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (!block->condition.system_motion) {
 8016570:	7d23      	ldrb	r3, [r4, #20]
 8016572:	f013 0f02 	tst.w	r3, #2
 8016576:	d07f      	beq.n	8016678 <plan_buffer_line+0x310>
    return true;
 8016578:	2001      	movs	r0, #1
}
 801657a:	b00c      	add	sp, #48	@ 0x30
 801657c:	ecbd 8b04 	vpop	{d8-d9}
 8016580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        plan_cleanup(block); // TODO: output message and execute output_commands?
 8016584:	4620      	mov	r0, r4
 8016586:	f7ff fcbb 	bl	8015f00 <plan_cleanup>
        return false;
 801658a:	2000      	movs	r0, #0
 801658c:	e7f5      	b.n	801657a <plan_buffer_line+0x212>
        block->programmed_rate = pl_data->feed_rate;
 801658e:	edd6 7a00 	vldr	s15, [r6]
 8016592:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
        if (block->condition.inverse_time)
 8016596:	f013 0f20 	tst.w	r3, #32
 801659a:	d0dd      	beq.n	8016558 <plan_buffer_line+0x1f0>
            block->programmed_rate *= block->millimeters;
 801659c:	ee28 8a27 	vmul.f32	s16, s16, s15
 80165a0:	ed84 8a0d 	vstr	s16, [r4, #52]	@ 0x34
 80165a4:	e7d8      	b.n	8016558 <plan_buffer_line+0x1f0>
        float junction_cos_theta = 0.0f;
 80165a6:	ed9f 8a30 	vldr	s16, [pc, #192]	@ 8016668 <plan_buffer_line+0x300>
        idx = N_AXIS;
 80165aa:	2303      	movs	r3, #3
            idx--;
 80165ac:	3b01      	subs	r3, #1
            junction_cos_theta -= pl.previous_unit_vec[idx] * unit_vec[idx];
 80165ae:	1c99      	adds	r1, r3, #2
 80165b0:	4a29      	ldr	r2, [pc, #164]	@ (8016658 <plan_buffer_line+0x2f0>)
 80165b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80165b6:	ed92 7a01 	vldr	s14, [r2, #4]
 80165ba:	aa0c      	add	r2, sp, #48	@ 0x30
 80165bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80165c0:	ed52 7a09 	vldr	s15, [r2, #-36]	@ 0xffffffdc
 80165c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80165c8:	ee38 8a66 	vsub.f32	s16, s16, s13
            junction_unit_vec[idx] = unit_vec[idx] - pl.previous_unit_vec[idx];
 80165cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165d0:	ed42 7a0c 	vstr	s15, [r2, #-48]	@ 0xffffffd0
        } while(idx);
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d1e9      	bne.n	80165ac <plan_buffer_line+0x244>
        if (junction_cos_theta > 0.999999f)
 80165d8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801666c <plan_buffer_line+0x304>
 80165dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80165e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165e4:	dd02      	ble.n	80165ec <plan_buffer_line+0x284>
            block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED;
 80165e6:	2300      	movs	r3, #0
 80165e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80165ea:	e7c1      	b.n	8016570 <plan_buffer_line+0x208>
        else if (junction_cos_theta < -0.999999f) {
 80165ec:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8016670 <plan_buffer_line+0x308>
 80165f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80165f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f8:	d502      	bpl.n	8016600 <plan_buffer_line+0x298>
            block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 80165fa:	4b1e      	ldr	r3, [pc, #120]	@ (8016674 <plan_buffer_line+0x30c>)
 80165fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80165fe:	e7b7      	b.n	8016570 <plan_buffer_line+0x208>
            convert_delta_vector_to_unit_vector(junction_unit_vec);
 8016600:	4668      	mov	r0, sp
 8016602:	f7ff f81b 	bl	801563c <convert_delta_vector_to_unit_vector>
            float junction_acceleration = limit_acceleration_by_axis_maximum(junction_unit_vec);
 8016606:	4668      	mov	r0, sp
 8016608:	f7ff fc2a 	bl	8015e60 <limit_acceleration_by_axis_maximum>
 801660c:	eeb0 9a40 	vmov.f32	s18, s0
            float sin_theta_d2 = sqrtf(0.5f * (1.0f - junction_cos_theta)); // Trig half angle identity. Always positive.
 8016610:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8016614:	ee38 8ac8 	vsub.f32	s16, s17, s16
 8016618:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801661c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016620:	f010 fd66 	bl	80270f0 <sqrtf>
            block->max_junction_speed_sqr = max(MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED,
 8016624:	4b0d      	ldr	r3, [pc, #52]	@ (801665c <plan_buffer_line+0x2f4>)
 8016626:	edd3 7a01 	vldr	s15, [r3, #4]
 801662a:	ee67 7a89 	vmul.f32	s15, s15, s18
 801662e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016632:	ee78 8ac0 	vsub.f32	s17, s17, s0
 8016636:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801663a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016642:	d402      	bmi.n	801664a <plan_buffer_line+0x2e2>
 8016644:	ed84 7a0b 	vstr	s14, [r4, #44]	@ 0x2c
 8016648:	e792      	b.n	8016570 <plan_buffer_line+0x208>
 801664a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8016668 <plan_buffer_line+0x300>
 801664e:	e7f9      	b.n	8016644 <plan_buffer_line+0x2dc>
 8016650:	200017a4 	.word	0x200017a4
 8016654:	20001528 	.word	0x20001528
 8016658:	20001780 	.word	0x20001780
 801665c:	20001bd8 	.word	0x20001bd8
 8016660:	40c90fdb 	.word	0x40c90fdb
 8016664:	200017a8 	.word	0x200017a8
 8016668:	00000000 	.word	0x00000000
 801666c:	3f7fffef 	.word	0x3f7fffef
 8016670:	bf7fffef 	.word	0xbf7fffef
 8016674:	7e967699 	.word	0x7e967699
        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 8016678:	4620      	mov	r0, r4
 801667a:	f7ff fde1 	bl	8016240 <plan_compute_profile_nominal_speed>
 801667e:	4b1a      	ldr	r3, [pc, #104]	@ (80166e8 <plan_buffer_line+0x380>)
 8016680:	edd3 7a06 	vldr	s15, [r3, #24]
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8016684:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801668c:	dd29      	ble.n	80166e2 <plan_buffer_line+0x37a>
 801668e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016692:	edc4 7a08 	vstr	s15, [r4, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 8016696:	ed94 7a0b 	vldr	s14, [r4, #44]	@ 0x2c
 801669a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801669e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a2:	dd01      	ble.n	80166a8 <plan_buffer_line+0x340>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 80166a4:	ed84 7a08 	vstr	s14, [r4, #32]
        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 80166a8:	4b0f      	ldr	r3, [pc, #60]	@ (80166e8 <plan_buffer_line+0x380>)
 80166aa:	ed83 0a06 	vstr	s0, [r3, #24]
        if(!block->condition.backlash_motion) {
 80166ae:	7d23      	ldrb	r3, [r4, #20]
 80166b0:	f013 0f08 	tst.w	r3, #8
 80166b4:	d10b      	bne.n	80166ce <plan_buffer_line+0x366>
            memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 80166b6:	4b0c      	ldr	r3, [pc, #48]	@ (80166e8 <plan_buffer_line+0x380>)
 80166b8:	f103 040c 	add.w	r4, r3, #12
 80166bc:	aa03      	add	r2, sp, #12
 80166be:	ca07      	ldmia	r2, {r0, r1, r2}
 80166c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 80166c4:	aa0c      	add	r2, sp, #48	@ 0x30
 80166c6:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80166ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        block_buffer_head = next_buffer_head;
 80166ce:	4b07      	ldr	r3, [pc, #28]	@ (80166ec <plan_buffer_line+0x384>)
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	4907      	ldr	r1, [pc, #28]	@ (80166f0 <plan_buffer_line+0x388>)
 80166d4:	600a      	str	r2, [r1, #0]
        next_buffer_head = block_buffer_head->next;
 80166d6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80166d8:	601a      	str	r2, [r3, #0]
        planner_recalculate();
 80166da:	f7ff fc4b 	bl	8015f74 <planner_recalculate>
    return true;
 80166de:	2001      	movs	r0, #1
 80166e0:	e74b      	b.n	801657a <plan_buffer_line+0x212>
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 80166e2:	ee60 7a00 	vmul.f32	s15, s0, s0
 80166e6:	e7d4      	b.n	8016692 <plan_buffer_line+0x32a>
 80166e8:	20001780 	.word	0x20001780
 80166ec:	200017a0 	.word	0x200017a0
 80166f0:	200017a4 	.word	0x200017a4

080166f4 <plan_sync_position>:
    memcpy(pl.position, sys.position, sizeof(pl.position));
 80166f4:	4b02      	ldr	r3, [pc, #8]	@ (8016700 <plan_sync_position+0xc>)
 80166f6:	4a03      	ldr	r2, [pc, #12]	@ (8016704 <plan_sync_position+0x10>)
 80166f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80166fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80166fe:	4770      	bx	lr
 8016700:	20001780 	.word	0x20001780
 8016704:	20001528 	.word	0x20001528

08016708 <plan_get_block_buffer_available>:
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 8016708:	4b0a      	ldr	r3, [pc, #40]	@ (8016734 <plan_get_block_buffer_available+0x2c>)
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	4b0a      	ldr	r3, [pc, #40]	@ (8016738 <plan_get_block_buffer_available+0x30>)
 801670e:	6818      	ldr	r0, [r3, #0]
 8016710:	4282      	cmp	r2, r0
 8016712:	d307      	bcc.n	8016724 <plan_get_block_buffer_available+0x1c>
                            ? (block_buffer_size - (block_buffer_head - block_buffer_tail))
 8016714:	4909      	ldr	r1, [pc, #36]	@ (801673c <plan_get_block_buffer_available+0x34>)
 8016716:	6809      	ldr	r1, [r1, #0]
 8016718:	1a12      	subs	r2, r2, r0
 801671a:	10d2      	asrs	r2, r2, #3
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 801671c:	4808      	ldr	r0, [pc, #32]	@ (8016740 <plan_get_block_buffer_available+0x38>)
 801671e:	fb00 1012 	mls	r0, r0, r2, r1
 8016722:	4770      	bx	lr
                            : ((block_buffer_tail - block_buffer_head) - 1));
 8016724:	1a80      	subs	r0, r0, r2
 8016726:	10c0      	asrs	r0, r0, #3
 8016728:	4b05      	ldr	r3, [pc, #20]	@ (8016740 <plan_get_block_buffer_available+0x38>)
 801672a:	fb03 f000 	mul.w	r0, r3, r0
 801672e:	3801      	subs	r0, #1
}
 8016730:	4770      	bx	lr
 8016732:	bf00      	nop
 8016734:	200017a4 	.word	0x200017a4
 8016738:	200017a8 	.word	0x200017a8
 801673c:	200017b0 	.word	0x200017b0
 8016740:	ba2e8ba3 	.word	0xba2e8ba3

08016744 <plan_cycle_reinitialize>:
{
 8016744:	b508      	push	{r3, lr}
    st_update_plan_block_parameters();
 8016746:	f008 fff1 	bl	801f72c <st_update_plan_block_parameters>
    if((block_buffer_planned = block_buffer_tail) != block_buffer_head)
 801674a:	4b05      	ldr	r3, [pc, #20]	@ (8016760 <plan_cycle_reinitialize+0x1c>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	4a05      	ldr	r2, [pc, #20]	@ (8016764 <plan_cycle_reinitialize+0x20>)
 8016750:	6013      	str	r3, [r2, #0]
 8016752:	4a05      	ldr	r2, [pc, #20]	@ (8016768 <plan_cycle_reinitialize+0x24>)
 8016754:	6812      	ldr	r2, [r2, #0]
 8016756:	4293      	cmp	r3, r2
 8016758:	d001      	beq.n	801675e <plan_cycle_reinitialize+0x1a>
        planner_recalculate();
 801675a:	f7ff fc0b 	bl	8015f74 <planner_recalculate>
}
 801675e:	bd08      	pop	{r3, pc}
 8016760:	200017a8 	.word	0x200017a8
 8016764:	2000179c 	.word	0x2000179c
 8016768:	200017a4 	.word	0x200017a4

0801676c <plan_feed_override>:
// Set feed overrides
void plan_feed_override (override_t feed_override, override_t rapid_override)
{
    bool feedrate_changed = false, rapidrate_changed = false;

    if(sys.override.control.feed_rate_disable)
 801676c:	4b1a      	ldr	r3, [pc, #104]	@ (80167d8 <plan_feed_override+0x6c>)
 801676e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8016772:	f013 0f01 	tst.w	r3, #1
 8016776:	d12d      	bne.n	80167d4 <plan_feed_override+0x68>
{
 8016778:	b570      	push	{r4, r5, r6, lr}
        return;

    feed_override = constrain(feed_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 801677a:	2809      	cmp	r0, #9
 801677c:	d904      	bls.n	8016788 <plan_feed_override+0x1c>
 801677e:	28c8      	cmp	r0, #200	@ 0xc8
 8016780:	bf28      	it	cs
 8016782:	20c8      	movcs	r0, #200	@ 0xc8
 8016784:	4604      	mov	r4, r0
 8016786:	e000      	b.n	801678a <plan_feed_override+0x1e>
 8016788:	240a      	movs	r4, #10

    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 801678a:	4b13      	ldr	r3, [pc, #76]	@ (80167d8 <plan_feed_override+0x6c>)
 801678c:	69dd      	ldr	r5, [r3, #28]
 801678e:	42a5      	cmp	r5, r4
 8016790:	d106      	bne.n	80167a0 <plan_feed_override+0x34>
         (rapidrate_changed = rapid_override != sys.override.rapid_rate)) {
 8016792:	6a1b      	ldr	r3, [r3, #32]
 8016794:	428b      	cmp	r3, r1
 8016796:	bf14      	ite	ne
 8016798:	2601      	movne	r6, #1
 801679a:	2600      	moveq	r6, #0
    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 801679c:	d101      	bne.n	80167a2 <plan_feed_override+0x36>
 801679e:	e015      	b.n	80167cc <plan_feed_override+0x60>
    bool feedrate_changed = false, rapidrate_changed = false;
 80167a0:	2600      	movs	r6, #0
        sys.override.feed_rate = feed_override;
 80167a2:	4b0d      	ldr	r3, [pc, #52]	@ (80167d8 <plan_feed_override+0x6c>)
 80167a4:	61dc      	str	r4, [r3, #28]
        sys.override.rapid_rate = rapid_override;
 80167a6:	6219      	str	r1, [r3, #32]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 80167a8:	2040      	movs	r0, #64	@ 0x40
 80167aa:	f00b f80b 	bl	80217c4 <system_add_rt_report>
        if(plan_update_velocity_profile_parameters())
 80167ae:	f7ff fd99 	bl	80162e4 <plan_update_velocity_profile_parameters>
 80167b2:	b960      	cbnz	r0, 80167ce <plan_feed_override+0x62>
            plan_cycle_reinitialize();
        if(grbl.on_override_changed) {
 80167b4:	4b09      	ldr	r3, [pc, #36]	@ (80167dc <plan_feed_override+0x70>)
 80167b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80167b8:	b143      	cbz	r3, 80167cc <plan_feed_override+0x60>
            if(feedrate_changed)
 80167ba:	42a5      	cmp	r5, r4
 80167bc:	d001      	beq.n	80167c2 <plan_feed_override+0x56>
                grbl.on_override_changed(OverrideChanged_FeedRate);
 80167be:	2000      	movs	r0, #0
 80167c0:	4798      	blx	r3
            if(rapidrate_changed)
 80167c2:	b11e      	cbz	r6, 80167cc <plan_feed_override+0x60>
                grbl.on_override_changed(OverrideChanged_RapidRate);
 80167c4:	4b05      	ldr	r3, [pc, #20]	@ (80167dc <plan_feed_override+0x70>)
 80167c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80167c8:	2000      	movs	r0, #0
 80167ca:	4798      	blx	r3
        }
    }
}
 80167cc:	bd70      	pop	{r4, r5, r6, pc}
            plan_cycle_reinitialize();
 80167ce:	f7ff ffb9 	bl	8016744 <plan_cycle_reinitialize>
 80167d2:	e7ef      	b.n	80167b4 <plan_feed_override+0x48>
 80167d4:	4770      	bx	lr
 80167d6:	bf00      	nop
 80167d8:	200014a0 	.word	0x200014a0
 80167dc:	200013a8 	.word	0x200013a8

080167e0 <plan_data_init>:

void plan_data_init (plan_line_data_t *plan_data)
{
 80167e0:	b510      	push	{r4, lr}
 80167e2:	4604      	mov	r4, r0
    memset(plan_data, 0, sizeof(plan_line_data_t));
 80167e4:	2228      	movs	r2, #40	@ 0x28
 80167e6:	2100      	movs	r1, #0
 80167e8:	f00d ff21 	bl	802462e <memset>
    plan_data->offset_id = gc_state.offset_id;
 80167ec:	4b0c      	ldr	r3, [pc, #48]	@ (8016820 <plan_data_init+0x40>)
 80167ee:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 80167f2:	7662      	strb	r2, [r4, #25]
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 80167f4:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80167f6:	b178      	cbz	r0, 8016818 <plan_data_init+0x38>
 80167f8:	6120      	str	r0, [r4, #16]
    plan_data->condition.target_validated = plan_data->condition.target_valid = sys.soft_limits.mask == 0;
 80167fa:	4b0a      	ldr	r3, [pc, #40]	@ (8016824 <plan_data_init+0x44>)
 80167fc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016800:	fab3 f383 	clz	r3, r3
 8016804:	095b      	lsrs	r3, r3, #5
 8016806:	7d62      	ldrb	r2, [r4, #21]
 8016808:	f363 0241 	bfi	r2, r3, #1, #1
 801680c:	7562      	strb	r2, [r4, #21]
 801680e:	b2d2      	uxtb	r2, r2
 8016810:	f363 0282 	bfi	r2, r3, #2, #1
 8016814:	7562      	strb	r2, [r4, #21]
#ifdef KINEMATICS_API
    plan_data->rate_multiplier = 1.0f;
#endif
}
 8016816:	bd10      	pop	{r4, pc}
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 8016818:	f007 fb86 	bl	801df28 <spindle_get>
 801681c:	e7ec      	b.n	80167f8 <plan_data_init+0x18>
 801681e:	bf00      	nop
 8016820:	20000ef8 	.word	0x20000ef8
 8016824:	200014a0 	.word	0x200014a0

08016828 <recheck_line>:

static bool recheck_line (char *line, line_flags_t *flags)
{
    bool keep_rt_commands = false, first_char = true;

    flags->value = 0;
 8016828:	2300      	movs	r3, #0
 801682a:	700b      	strb	r3, [r1, #0]

    if(*line != '\0') do {
 801682c:	7803      	ldrb	r3, [r0, #0]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d075      	beq.n	801691e <recheck_line+0xf6>
{
 8016832:	b410      	push	{r4}
 8016834:	4602      	mov	r2, r0
    bool keep_rt_commands = false, first_char = true;
 8016836:	2401      	movs	r4, #1
 8016838:	2000      	movs	r0, #0
 801683a:	e008      	b.n	801684e <recheck_line+0x26>

        switch(*line) {
 801683c:	2b5b      	cmp	r3, #91	@ 0x5b
 801683e:	d101      	bne.n	8016844 <recheck_line+0x1c>

            case '$':
            case '[':
                if(first_char)
 8016840:	2c00      	cmp	r4, #0
 8016842:	d16a      	bne.n	801691a <recheck_line+0xf2>
                break;
        }

        first_char = false;

    } while(*++line != '\0');
 8016844:	f812 3f01 	ldrb.w	r3, [r2, #1]!
        first_char = false;
 8016848:	2400      	movs	r4, #0
    } while(*++line != '\0');
 801684a:	2b00      	cmp	r3, #0
 801684c:	d069      	beq.n	8016922 <recheck_line+0xfa>
        switch(*line) {
 801684e:	7813      	ldrb	r3, [r2, #0]
 8016850:	2b3b      	cmp	r3, #59	@ 0x3b
 8016852:	d8f3      	bhi.n	801683c <recheck_line+0x14>
 8016854:	2b24      	cmp	r3, #36	@ 0x24
 8016856:	d3f5      	bcc.n	8016844 <recheck_line+0x1c>
 8016858:	3b24      	subs	r3, #36	@ 0x24
 801685a:	2b17      	cmp	r3, #23
 801685c:	d8f2      	bhi.n	8016844 <recheck_line+0x1c>
 801685e:	f20f 0c08 	addw	ip, pc, #8
 8016862:	f85c f023 	ldr.w	pc, [ip, r3, lsl #2]
 8016866:	bf00      	nop
 8016868:	08016841 	.word	0x08016841
 801686c:	08016845 	.word	0x08016845
 8016870:	08016845 	.word	0x08016845
 8016874:	08016845 	.word	0x08016845
 8016878:	080168c9 	.word	0x080168c9
 801687c:	080168f5 	.word	0x080168f5
 8016880:	08016845 	.word	0x08016845
 8016884:	08016845 	.word	0x08016845
 8016888:	08016845 	.word	0x08016845
 801688c:	08016845 	.word	0x08016845
 8016890:	08016845 	.word	0x08016845
 8016894:	08016845 	.word	0x08016845
 8016898:	08016845 	.word	0x08016845
 801689c:	08016845 	.word	0x08016845
 80168a0:	08016845 	.word	0x08016845
 80168a4:	08016845 	.word	0x08016845
 80168a8:	08016845 	.word	0x08016845
 80168ac:	08016845 	.word	0x08016845
 80168b0:	08016845 	.word	0x08016845
 80168b4:	08016845 	.word	0x08016845
 80168b8:	08016845 	.word	0x08016845
 80168bc:	08016845 	.word	0x08016845
 80168c0:	08016845 	.word	0x08016845
 80168c4:	08016909 	.word	0x08016909
                if(!keep_rt_commands && (flags->comment_parentheses = !flags->comment_semicolon))
 80168c8:	2800      	cmp	r0, #0
 80168ca:	d1bb      	bne.n	8016844 <recheck_line+0x1c>
 80168cc:	780c      	ldrb	r4, [r1, #0]
 80168ce:	08a3      	lsrs	r3, r4, #2
 80168d0:	f083 0301 	eor.w	r3, r3, #1
 80168d4:	f003 0301 	and.w	r3, r3, #1
 80168d8:	f363 0441 	bfi	r4, r3, #1, #1
 80168dc:	700c      	strb	r4, [r1, #0]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d0b0      	beq.n	8016844 <recheck_line+0x1c>
                    keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 80168e2:	4b11      	ldr	r3, [pc, #68]	@ (8016928 <recheck_line+0x100>)
 80168e4:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 80168e8:	f013 0f04 	tst.w	r3, #4
 80168ec:	bf0c      	ite	eq
 80168ee:	2001      	moveq	r0, #1
 80168f0:	2000      	movne	r0, #0
 80168f2:	e7a7      	b.n	8016844 <recheck_line+0x1c>
                if(!flags->comment_semicolon)
 80168f4:	780b      	ldrb	r3, [r1, #0]
 80168f6:	f013 0f04 	tst.w	r3, #4
 80168fa:	d1a3      	bne.n	8016844 <recheck_line+0x1c>
                    flags->comment_parentheses = keep_rt_commands = false;
 80168fc:	780b      	ldrb	r3, [r1, #0]
 80168fe:	f36f 0341 	bfc	r3, #1, #1
 8016902:	700b      	strb	r3, [r1, #0]
 8016904:	2000      	movs	r0, #0
 8016906:	e79d      	b.n	8016844 <recheck_line+0x1c>
                if(!flags->comment_parentheses) {
 8016908:	780b      	ldrb	r3, [r1, #0]
 801690a:	f013 0f02 	tst.w	r3, #2
 801690e:	d199      	bne.n	8016844 <recheck_line+0x1c>
                    flags->comment_semicolon = On;
 8016910:	f043 0304 	orr.w	r3, r3, #4
 8016914:	700b      	strb	r3, [r1, #0]
                    keep_rt_commands = false;
 8016916:	2000      	movs	r0, #0
 8016918:	e794      	b.n	8016844 <recheck_line+0x1c>
                    keep_rt_commands = true;
 801691a:	4620      	mov	r0, r4
 801691c:	e792      	b.n	8016844 <recheck_line+0x1c>
    bool keep_rt_commands = false, first_char = true;
 801691e:	2000      	movs	r0, #0

    return keep_rt_commands;
}
 8016920:	4770      	bx	lr
 8016922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016926:	4770      	bx	lr
 8016928:	200011c0 	.word	0x200011c0

0801692c <protocol_execute_rt_commands>:
    return protocol_enqueue_foreground_task(fn, (void *)&dummy_data);
}

// Execute enqueued functions.
static void protocol_execute_rt_commands (sys_state_t state)
{
 801692c:	b538      	push	{r3, r4, r5, lr}
    while(realtime_queue.tail != realtime_queue.head) {
 801692e:	e00d      	b.n	801694c <protocol_execute_rt_commands+0x20>
        uint_fast8_t bptr = realtime_queue.tail;
        if(realtime_queue.task[bptr].task.fn) {
            if(realtime_queue.task[bptr].data == (void *)&dummy_data) {
                on_execute_realtime_ptr call = realtime_queue.task[bptr].task.fn_deprecated;
                realtime_queue.task[bptr].task.fn_deprecated = NULL;
 8016930:	1c62      	adds	r2, r4, #1
 8016932:	4b17      	ldr	r3, [pc, #92]	@ (8016990 <protocol_execute_rt_commands+0x64>)
 8016934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016938:	2200      	movs	r2, #0
 801693a:	605a      	str	r2, [r3, #4]
                call(state_get());
 801693c:	f007 ff84 	bl	801e848 <state_get>
 8016940:	47a8      	blx	r5
                foreground_task_ptr call = realtime_queue.task[bptr].task.fn;
                realtime_queue.task[bptr].task.fn = NULL;
                call(realtime_queue.task[bptr].data);
            }
        }
        realtime_queue.tail = (bptr + 1) & (RT_QUEUE_SIZE - 1);
 8016942:	3401      	adds	r4, #1
 8016944:	f004 040f 	and.w	r4, r4, #15
 8016948:	4b11      	ldr	r3, [pc, #68]	@ (8016990 <protocol_execute_rt_commands+0x64>)
 801694a:	605c      	str	r4, [r3, #4]
    while(realtime_queue.tail != realtime_queue.head) {
 801694c:	4b10      	ldr	r3, [pc, #64]	@ (8016990 <protocol_execute_rt_commands+0x64>)
 801694e:	685a      	ldr	r2, [r3, #4]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	429a      	cmp	r2, r3
 8016954:	d016      	beq.n	8016984 <protocol_execute_rt_commands+0x58>
        uint_fast8_t bptr = realtime_queue.tail;
 8016956:	4b0e      	ldr	r3, [pc, #56]	@ (8016990 <protocol_execute_rt_commands+0x64>)
 8016958:	685c      	ldr	r4, [r3, #4]
        if(realtime_queue.task[bptr].task.fn) {
 801695a:	1c62      	adds	r2, r4, #1
 801695c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016960:	685d      	ldr	r5, [r3, #4]
 8016962:	2d00      	cmp	r5, #0
 8016964:	d0ed      	beq.n	8016942 <protocol_execute_rt_commands+0x16>
            if(realtime_queue.task[bptr].data == (void *)&dummy_data) {
 8016966:	4613      	mov	r3, r2
 8016968:	4a09      	ldr	r2, [pc, #36]	@ (8016990 <protocol_execute_rt_commands+0x64>)
 801696a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801696e:	4b09      	ldr	r3, [pc, #36]	@ (8016994 <protocol_execute_rt_commands+0x68>)
 8016970:	4298      	cmp	r0, r3
 8016972:	d0dd      	beq.n	8016930 <protocol_execute_rt_commands+0x4>
                realtime_queue.task[bptr].task.fn = NULL;
 8016974:	1c62      	adds	r2, r4, #1
 8016976:	4b06      	ldr	r3, [pc, #24]	@ (8016990 <protocol_execute_rt_commands+0x64>)
 8016978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801697c:	2200      	movs	r2, #0
 801697e:	605a      	str	r2, [r3, #4]
                call(realtime_queue.task[bptr].data);
 8016980:	47a8      	blx	r5
 8016982:	e7de      	b.n	8016942 <protocol_execute_rt_commands+0x16>
    }

    if(!sys.driver_started)
 8016984:	4b04      	ldr	r3, [pc, #16]	@ (8016998 <protocol_execute_rt_commands+0x6c>)
 8016986:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 801698a:	b903      	cbnz	r3, 801698e <protocol_execute_rt_commands+0x62>
        while(true);
 801698c:	e7fe      	b.n	801698c <protocol_execute_rt_commands+0x60>
}
 801698e:	bd38      	pop	{r3, r4, r5, pc}
 8016990:	200017bc 	.word	0x200017bc
 8016994:	0802b4c8 	.word	0x0802b4c8
 8016998:	200014a0 	.word	0x200014a0

0801699c <protocol_on_execute_delay>:
{
 801699c:	b510      	push	{r4, lr}
 801699e:	4604      	mov	r4, r0
    if(sys.rt_exec_state & EXEC_RT_COMMAND) {
 80169a0:	4b09      	ldr	r3, [pc, #36]	@ (80169c8 <protocol_on_execute_delay+0x2c>)
 80169a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80169a4:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80169a8:	d008      	beq.n	80169bc <protocol_on_execute_delay+0x20>
        system_clear_exec_state_flag(EXEC_RT_COMMAND);
 80169aa:	4b08      	ldr	r3, [pc, #32]	@ (80169cc <protocol_on_execute_delay+0x30>)
 80169ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80169ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80169b2:	4807      	ldr	r0, [pc, #28]	@ (80169d0 <protocol_on_execute_delay+0x34>)
 80169b4:	4798      	blx	r3
        protocol_execute_rt_commands(0);
 80169b6:	2000      	movs	r0, #0
 80169b8:	f7ff ffb8 	bl	801692c <protocol_execute_rt_commands>
    on_execute_delay(state);
 80169bc:	4b05      	ldr	r3, [pc, #20]	@ (80169d4 <protocol_on_execute_delay+0x38>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	4620      	mov	r0, r4
 80169c2:	4798      	blx	r3
}
 80169c4:	bd10      	pop	{r4, pc}
 80169c6:	bf00      	nop
 80169c8:	200014a0 	.word	0x200014a0
 80169cc:	200011c0 	.word	0x200011c0
 80169d0:	200014e8 	.word	0x200014e8
 80169d4:	200017b8 	.word	0x200017b8

080169d8 <protocol_poll_cmd>:
{
 80169d8:	b508      	push	{r3, lr}
    if((c = hal.stream.read()) != SERIAL_NO_DATA) {
 80169da:	4b2b      	ldr	r3, [pc, #172]	@ (8016a88 <protocol_poll_cmd+0xb0>)
 80169dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80169e0:	4798      	blx	r3
 80169e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80169e6:	d04b      	beq.n	8016a80 <protocol_poll_cmd+0xa8>
        if ((c == '\n') || (c == '\r')) { // End of line reached
 80169e8:	280a      	cmp	r0, #10
 80169ea:	d014      	beq.n	8016a16 <protocol_poll_cmd+0x3e>
 80169ec:	280d      	cmp	r0, #13
 80169ee:	d012      	beq.n	8016a16 <protocol_poll_cmd+0x3e>
        } else if(c == ASCII_DEL || c == ASCII_BS) {
 80169f0:	287f      	cmp	r0, #127	@ 0x7f
 80169f2:	d032      	beq.n	8016a5a <protocol_poll_cmd+0x82>
 80169f4:	2808      	cmp	r0, #8
 80169f6:	d030      	beq.n	8016a5a <protocol_poll_cmd+0x82>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 80169f8:	4b24      	ldr	r3, [pc, #144]	@ (8016a8c <protocol_poll_cmd+0xb4>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d137      	bne.n	8016a70 <protocol_poll_cmd+0x98>
 8016a00:	f1b0 0220 	subs.w	r2, r0, #32
 8016a04:	bf18      	it	ne
 8016a06:	2201      	movne	r2, #1
 8016a08:	b1d2      	cbz	r2, 8016a40 <protocol_poll_cmd+0x68>
            line[char_counter++] = c;
 8016a0a:	1c59      	adds	r1, r3, #1
 8016a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8016a8c <protocol_poll_cmd+0xb4>)
 8016a0e:	6011      	str	r1, [r2, #0]
 8016a10:	4a1f      	ldr	r2, [pc, #124]	@ (8016a90 <protocol_poll_cmd+0xb8>)
 8016a12:	54d0      	strb	r0, [r2, r3]
 8016a14:	e014      	b.n	8016a40 <protocol_poll_cmd+0x68>
            line[char_counter] = '\0';
 8016a16:	4b1d      	ldr	r3, [pc, #116]	@ (8016a8c <protocol_poll_cmd+0xb4>)
 8016a18:	681a      	ldr	r2, [r3, #0]
 8016a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8016a90 <protocol_poll_cmd+0xb8>)
 8016a1c:	2100      	movs	r1, #0
 8016a1e:	5499      	strb	r1, [r3, r2]
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 8016a20:	7818      	ldrb	r0, [r3, #0]
 8016a22:	b110      	cbz	r0, 8016a2a <protocol_poll_cmd+0x52>
 8016a24:	2824      	cmp	r0, #36	@ 0x24
 8016a26:	d014      	beq.n	8016a52 <protocol_poll_cmd+0x7a>
 8016a28:	2009      	movs	r0, #9
 8016a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8016a94 <protocol_poll_cmd+0xbc>)
 8016a2c:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
            char_counter = 0;
 8016a30:	2300      	movs	r3, #0
 8016a32:	4a16      	ldr	r2, [pc, #88]	@ (8016a8c <protocol_poll_cmd+0xb4>)
 8016a34:	6013      	str	r3, [r2, #0]
            *line = '\0';
 8016a36:	4a16      	ldr	r2, [pc, #88]	@ (8016a90 <protocol_poll_cmd+0xb8>)
 8016a38:	7013      	strb	r3, [r2, #0]
            grbl.report.status_message(gc_state.last_error);
 8016a3a:	4b17      	ldr	r3, [pc, #92]	@ (8016a98 <protocol_poll_cmd+0xc0>)
 8016a3c:	689b      	ldr	r3, [r3, #8]
 8016a3e:	4798      	blx	r3
        keep_rt_commands = char_counter > 0 && *line == '$';
 8016a40:	4b12      	ldr	r3, [pc, #72]	@ (8016a8c <protocol_poll_cmd+0xb4>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	b1cb      	cbz	r3, 8016a7a <protocol_poll_cmd+0xa2>
 8016a46:	4b12      	ldr	r3, [pc, #72]	@ (8016a90 <protocol_poll_cmd+0xb8>)
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	2b24      	cmp	r3, #36	@ 0x24
 8016a4c:	d019      	beq.n	8016a82 <protocol_poll_cmd+0xaa>
 8016a4e:	2200      	movs	r2, #0
 8016a50:	e014      	b.n	8016a7c <protocol_poll_cmd+0xa4>
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 8016a52:	4618      	mov	r0, r3
 8016a54:	f00a fcfc 	bl	8021450 <system_execute_line>
 8016a58:	e7e7      	b.n	8016a2a <protocol_poll_cmd+0x52>
            if(char_counter)
 8016a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8016a8c <protocol_poll_cmd+0xb4>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d0ee      	beq.n	8016a40 <protocol_poll_cmd+0x68>
                line[--char_counter] = '\0';
 8016a62:	3b01      	subs	r3, #1
 8016a64:	4a09      	ldr	r2, [pc, #36]	@ (8016a8c <protocol_poll_cmd+0xb4>)
 8016a66:	6013      	str	r3, [r2, #0]
 8016a68:	4a09      	ldr	r2, [pc, #36]	@ (8016a90 <protocol_poll_cmd+0xb8>)
 8016a6a:	2100      	movs	r1, #0
 8016a6c:	54d1      	strb	r1, [r2, r3]
 8016a6e:	e7e7      	b.n	8016a40 <protocol_poll_cmd+0x68>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 8016a70:	2bff      	cmp	r3, #255	@ 0xff
 8016a72:	bf8c      	ite	hi
 8016a74:	2200      	movhi	r2, #0
 8016a76:	2201      	movls	r2, #1
 8016a78:	e7c6      	b.n	8016a08 <protocol_poll_cmd+0x30>
        keep_rt_commands = char_counter > 0 && *line == '$';
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	4b07      	ldr	r3, [pc, #28]	@ (8016a9c <protocol_poll_cmd+0xc4>)
 8016a7e:	701a      	strb	r2, [r3, #0]
}
 8016a80:	bd08      	pop	{r3, pc}
        keep_rt_commands = char_counter > 0 && *line == '$';
 8016a82:	2201      	movs	r2, #1
 8016a84:	e7fa      	b.n	8016a7c <protocol_poll_cmd+0xa4>
 8016a86:	bf00      	nop
 8016a88:	200011c0 	.word	0x200011c0
 8016a8c:	20001a50 	.word	0x20001a50
 8016a90:	2000194c 	.word	0x2000194c
 8016a94:	20000ef8 	.word	0x20000ef8
 8016a98:	200013a8 	.word	0x200013a8
 8016a9c:	20001844 	.word	0x20001844

08016aa0 <protocol_enqueue_gcode>:
    bool ok = xcommand[0] == '\0' &&
 8016aa0:	4b16      	ldr	r3, [pc, #88]	@ (8016afc <protocol_enqueue_gcode+0x5c>)
 8016aa2:	781b      	ldrb	r3, [r3, #0]
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 8016aa4:	b10b      	cbz	r3, 8016aaa <protocol_enqueue_gcode+0xa>
    bool ok = xcommand[0] == '\0' &&
 8016aa6:	2000      	movs	r0, #0
}
 8016aa8:	4770      	bx	lr
{
 8016aaa:	b510      	push	{r4, lr}
 8016aac:	4604      	mov	r4, r0
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 8016aae:	f007 fecb 	bl	801e848 <state_get>
    bool ok = xcommand[0] == '\0' &&
 8016ab2:	b9b8      	cbnz	r0, 8016ae4 <protocol_enqueue_gcode+0x44>
                 bit_isfalse(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 8016ab4:	4b12      	ldr	r3, [pc, #72]	@ (8016b00 <protocol_enqueue_gcode+0x60>)
 8016ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 8016ab8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016abc:	d11a      	bne.n	8016af4 <protocol_enqueue_gcode+0x54>
    if(ok && gc_state.file_run)
 8016abe:	4b11      	ldr	r3, [pc, #68]	@ (8016b04 <protocol_enqueue_gcode+0x64>)
 8016ac0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8016ac4:	b143      	cbz	r3, 8016ad8 <protocol_enqueue_gcode+0x38>
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 8016ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8016b04 <protocol_enqueue_gcode+0x64>)
 8016ac8:	7e1b      	ldrb	r3, [r3, #24]
 8016aca:	b92b      	cbnz	r3, 8016ad8 <protocol_enqueue_gcode+0x38>
 8016acc:	2203      	movs	r2, #3
 8016ace:	490e      	ldr	r1, [pc, #56]	@ (8016b08 <protocol_enqueue_gcode+0x68>)
 8016ad0:	4620      	mov	r0, r4
 8016ad2:	f00d fdd0 	bl	8024676 <strncmp>
 8016ad6:	b178      	cbz	r0, 8016af8 <protocol_enqueue_gcode+0x58>
        strcpy(xcommand, gcode);
 8016ad8:	4621      	mov	r1, r4
 8016ada:	4808      	ldr	r0, [pc, #32]	@ (8016afc <protocol_enqueue_gcode+0x5c>)
 8016adc:	f00d feff 	bl	80248de <strcpy>
 8016ae0:	2001      	movs	r0, #1
 8016ae2:	e008      	b.n	8016af6 <protocol_enqueue_gcode+0x56>
               (state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_JOG|STATE_TOOL_CHANGE))) &&
 8016ae4:	f007 feb0 	bl	801e848 <state_get>
 8016ae8:	f240 2321 	movw	r3, #545	@ 0x221
 8016aec:	4218      	tst	r0, r3
 8016aee:	d1e1      	bne.n	8016ab4 <protocol_enqueue_gcode+0x14>
    bool ok = xcommand[0] == '\0' &&
 8016af0:	2000      	movs	r0, #0
 8016af2:	e000      	b.n	8016af6 <protocol_enqueue_gcode+0x56>
 8016af4:	2000      	movs	r0, #0
}
 8016af6:	bd10      	pop	{r4, pc}
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 8016af8:	2000      	movs	r0, #0
 8016afa:	e7fc      	b.n	8016af6 <protocol_enqueue_gcode+0x56>
 8016afc:	20001848 	.word	0x20001848
 8016b00:	200014a0 	.word	0x200014a0
 8016b04:	20000ef8 	.word	0x20000ef8
 8016b08:	0802b4c4 	.word	0x0802b4c4

08016b0c <protocol_auto_cycle_start>:
{
 8016b0c:	b508      	push	{r3, lr}
    if (plan_get_current_block() != NULL) // Check if there are any blocks in the buffer.
 8016b0e:	f7ff fb67 	bl	80161e0 <plan_get_current_block>
 8016b12:	b120      	cbz	r0, 8016b1e <protocol_auto_cycle_start+0x12>
        system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8016b14:	4b02      	ldr	r3, [pc, #8]	@ (8016b20 <protocol_auto_cycle_start+0x14>)
 8016b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016b18:	2102      	movs	r1, #2
 8016b1a:	4802      	ldr	r0, [pc, #8]	@ (8016b24 <protocol_auto_cycle_start+0x18>)
 8016b1c:	4798      	blx	r3
}
 8016b1e:	bd08      	pop	{r3, pc}
 8016b20:	200011c0 	.word	0x200011c0
 8016b24:	200014e8 	.word	0x200014e8

08016b28 <protocol_exec_rt_system>:
{
 8016b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.rt_exec_alarm && (rt_exec = system_clear_exec_alarm())) { // Enter only if any bit flag is true
 8016b2a:	4ba3      	ldr	r3, [pc, #652]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d078      	beq.n	8016c24 <protocol_exec_rt_system+0xfc>
 8016b32:	4ba2      	ldr	r3, [pc, #648]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b36:	2100      	movs	r1, #0
 8016b38:	48a1      	ldr	r0, [pc, #644]	@ (8016dc0 <protocol_exec_rt_system+0x298>)
 8016b3a:	4798      	blx	r3
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	f000 8137 	beq.w	8016db2 <protocol_exec_rt_system+0x28a>
        if((sys.reset_pending = !!(sys.rt_exec_state & EXEC_RESET))) {
 8016b44:	4b9c      	ldr	r3, [pc, #624]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016b46:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
 8016b48:	f3c5 1540 	ubfx	r5, r5, #5, #1
 8016b4c:	711d      	strb	r5, [r3, #4]
 8016b4e:	b995      	cbnz	r5, 8016b76 <protocol_exec_rt_system+0x4e>
        system_raise_alarm((alarm_code_t)rt_exec);
 8016b50:	b2e6      	uxtb	r6, r4
 8016b52:	4630      	mov	r0, r6
 8016b54:	f00a fde8 	bl	8021728 <system_raise_alarm>
        if(killed) // Tell driver/plugins about reset.
 8016b58:	b11d      	cbz	r5, 8016b62 <protocol_exec_rt_system+0x3a>
            hal.driver_reset();
 8016b5a:	4b98      	ldr	r3, [pc, #608]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016b5c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8016b60:	4798      	blx	r3
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8016b62:	1e73      	subs	r3, r6, #1
 8016b64:	b2db      	uxtb	r3, r3
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d90f      	bls.n	8016b8a <protocol_exec_rt_system+0x62>
                                  (alarm_code_t)rt_exec == Alarm_SoftLimit ||
 8016b6a:	2e0a      	cmp	r6, #10
 8016b6c:	d022      	beq.n	8016bb4 <protocol_exec_rt_system+0x8c>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8016b6e:	2e11      	cmp	r6, #17
 8016b70:	d009      	beq.n	8016b86 <protocol_exec_rt_system+0x5e>
 8016b72:	2300      	movs	r3, #0
 8016b74:	e00a      	b.n	8016b8c <protocol_exec_rt_system+0x64>
            spindle_all_off();
 8016b76:	f007 fbe3 	bl	801e340 <spindle_all_off>
            hal.coolant.set_state((coolant_state_t){0});
 8016b7a:	4b90      	ldr	r3, [pc, #576]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b7e:	f04f 0000 	mov.w	r0, #0
 8016b82:	4798      	blx	r3
 8016b84:	e7e4      	b.n	8016b50 <protocol_exec_rt_system+0x28>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8016b86:	2301      	movs	r3, #1
 8016b88:	e000      	b.n	8016b8c <protocol_exec_rt_system+0x64>
 8016b8a:	2301      	movs	r3, #1
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8016b8c:	4a8a      	ldr	r2, [pc, #552]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016b8e:	7153      	strb	r3, [r2, #5]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d048      	beq.n	8016c26 <protocol_exec_rt_system+0xfe>
            system_set_exec_alarm(rt_exec);
 8016b94:	4b89      	ldr	r3, [pc, #548]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b98:	4621      	mov	r1, r4
 8016b9a:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 8016b9e:	4798      	blx	r3
            switch((alarm_code_t)rt_exec) {
 8016ba0:	b2e4      	uxtb	r4, r4
 8016ba2:	2c0a      	cmp	r4, #10
 8016ba4:	d008      	beq.n	8016bb8 <protocol_exec_rt_system+0x90>
 8016ba6:	2c11      	cmp	r4, #17
 8016ba8:	d018      	beq.n	8016bdc <protocol_exec_rt_system+0xb4>
                    grbl.report.feedback_message(Message_CriticalEvent);
 8016baa:	4b86      	ldr	r3, [pc, #536]	@ (8016dc4 <protocol_exec_rt_system+0x29c>)
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	2001      	movs	r0, #1
 8016bb0:	4798      	blx	r3
                    break;
 8016bb2:	e005      	b.n	8016bc0 <protocol_exec_rt_system+0x98>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	e7e9      	b.n	8016b8c <protocol_exec_rt_system+0x64>
                    grbl.report.feedback_message(Message_EStop);
 8016bb8:	4b82      	ldr	r3, [pc, #520]	@ (8016dc4 <protocol_exec_rt_system+0x29c>)
 8016bba:	68db      	ldr	r3, [r3, #12]
 8016bbc:	200c      	movs	r0, #12
 8016bbe:	4798      	blx	r3
            system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8016bc0:	4c7e      	ldr	r4, [pc, #504]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016bc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016bc4:	2120      	movs	r1, #32
 8016bc6:	4880      	ldr	r0, [pc, #512]	@ (8016dc8 <protocol_exec_rt_system+0x2a0>)
 8016bc8:	4798      	blx	r3
            *line = '\0';
 8016bca:	2300      	movs	r3, #0
 8016bcc:	4a7f      	ldr	r2, [pc, #508]	@ (8016dcc <protocol_exec_rt_system+0x2a4>)
 8016bce:	7013      	strb	r3, [r2, #0]
            char_counter = 0;
 8016bd0:	4a7f      	ldr	r2, [pc, #508]	@ (8016dd0 <protocol_exec_rt_system+0x2a8>)
 8016bd2:	6013      	str	r3, [r2, #0]
            hal.stream.reset_read_buffer();
 8016bd4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8016bd8:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8016bda:	e00b      	b.n	8016bf4 <protocol_exec_rt_system+0xcc>
                    grbl.report.feedback_message(Message_MotorFault);
 8016bdc:	4b79      	ldr	r3, [pc, #484]	@ (8016dc4 <protocol_exec_rt_system+0x29c>)
 8016bde:	68db      	ldr	r3, [r3, #12]
 8016be0:	2010      	movs	r0, #16
 8016be2:	4798      	blx	r3
                    break;
 8016be4:	e7ec      	b.n	8016bc0 <protocol_exec_rt_system+0x98>
                protocol_poll_cmd();
 8016be6:	f7ff fef7 	bl	80169d8 <protocol_poll_cmd>
                grbl.on_execute_realtime(STATE_ESTOP);
 8016bea:	4b76      	ldr	r3, [pc, #472]	@ (8016dc4 <protocol_exec_rt_system+0x29c>)
 8016bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016bee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8016bf2:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8016bf4:	4b70      	ldr	r3, [pc, #448]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016bf8:	f013 0f20 	tst.w	r3, #32
 8016bfc:	d10c      	bne.n	8016c18 <protocol_exec_rt_system+0xf0>
                if(bit_istrue(sys.rt_exec_state, EXEC_STATUS_REPORT)) {
 8016bfe:	4b6e      	ldr	r3, [pc, #440]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c02:	f013 0f01 	tst.w	r3, #1
 8016c06:	d0ee      	beq.n	8016be6 <protocol_exec_rt_system+0xbe>
                    system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8016c08:	4b6c      	ldr	r3, [pc, #432]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c0c:	2101      	movs	r1, #1
 8016c0e:	486e      	ldr	r0, [pc, #440]	@ (8016dc8 <protocol_exec_rt_system+0x2a0>)
 8016c10:	4798      	blx	r3
                    report_realtime_status();
 8016c12:	f003 fb29 	bl	801a268 <report_realtime_status>
 8016c16:	e7e6      	b.n	8016be6 <protocol_exec_rt_system+0xbe>
            system_clear_exec_alarm(); // Clear alarm
 8016c18:	4b68      	ldr	r3, [pc, #416]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	4868      	ldr	r0, [pc, #416]	@ (8016dc0 <protocol_exec_rt_system+0x298>)
 8016c20:	4798      	blx	r3
 8016c22:	e000      	b.n	8016c26 <protocol_exec_rt_system+0xfe>
    bool killed = false;
 8016c24:	2500      	movs	r5, #0
    if (sys.rt_exec_state && (rt_exec = system_clear_exec_states())) { // Get and clear volatile sys.rt_exec_state atomically.
 8016c26:	4b64      	ldr	r3, [pc, #400]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	f000 8095 	beq.w	8016d5a <protocol_exec_rt_system+0x232>
 8016c30:	4b62      	ldr	r3, [pc, #392]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c34:	2100      	movs	r1, #0
 8016c36:	4864      	ldr	r0, [pc, #400]	@ (8016dc8 <protocol_exec_rt_system+0x2a0>)
 8016c38:	4798      	blx	r3
 8016c3a:	4604      	mov	r4, r0
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	f000 808c 	beq.w	8016d5a <protocol_exec_rt_system+0x232>
        if((sys.reset_pending = !!(rt_exec & EXEC_RESET))) {
 8016c42:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8016c46:	4a5c      	ldr	r2, [pc, #368]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016c48:	7113      	strb	r3, [r2, #4]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	f040 80c8 	bne.w	8016de0 <protocol_exec_rt_system+0x2b8>
        if(rt_exec & EXEC_STOP) { // Experimental for now, must be verified. Do NOT move to interrupt context!
 8016c50:	f010 0f10 	tst.w	r0, #16
 8016c54:	d058      	beq.n	8016d08 <protocol_exec_rt_system+0x1e0>
            sys.cancel = true;
 8016c56:	4b58      	ldr	r3, [pc, #352]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016c58:	2201      	movs	r2, #1
 8016c5a:	705a      	strb	r2, [r3, #1]
            sys.step_control.flags = 0;
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	761a      	strb	r2, [r3, #24]
            sys.flags.feed_hold_pending = Off;
 8016c60:	7d99      	ldrb	r1, [r3, #22]
 8016c62:	f362 1145 	bfi	r1, r2, #5, #1
 8016c66:	7599      	strb	r1, [r3, #22]
            sys.override_delay.flags = 0;
 8016c68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            if(sys.override.control.sync)
 8016c6c:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8016c70:	4293      	cmp	r3, r2
 8016c72:	f2c0 80f4 	blt.w	8016e5e <protocol_exec_rt_system+0x336>
            gc_state.tool_change = false;
 8016c76:	4b57      	ldr	r3, [pc, #348]	@ (8016dd4 <protocol_exec_rt_system+0x2ac>)
 8016c78:	2200      	movs	r2, #0
 8016c7a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 8016c7e:	76da      	strb	r2, [r3, #27]
            hal.driver_reset();
 8016c80:	4b4e      	ldr	r3, [pc, #312]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016c82:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8016c86:	4798      	blx	r3
            if(!sys.flags.keep_input && hal.stream.suspend_read && hal.stream.suspend_read(false))
 8016c88:	4b4b      	ldr	r3, [pc, #300]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016c8a:	7ddb      	ldrb	r3, [r3, #23]
 8016c8c:	f013 0f01 	tst.w	r3, #1
 8016c90:	d10a      	bne.n	8016ca8 <protocol_exec_rt_system+0x180>
 8016c92:	4b4a      	ldr	r3, [pc, #296]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016c94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8016c98:	b133      	cbz	r3, 8016ca8 <protocol_exec_rt_system+0x180>
 8016c9a:	2000      	movs	r0, #0
 8016c9c:	4798      	blx	r3
 8016c9e:	b118      	cbz	r0, 8016ca8 <protocol_exec_rt_system+0x180>
                hal.stream.cancel_read_buffer(); // flush pending blocks (after M6)
 8016ca0:	4b46      	ldr	r3, [pc, #280]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016ca2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8016ca6:	4798      	blx	r3
            sys.flags.keep_input = Off;
 8016ca8:	4d43      	ldr	r5, [pc, #268]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016caa:	7deb      	ldrb	r3, [r5, #23]
 8016cac:	f36f 0300 	bfc	r3, #0, #1
 8016cb0:	75eb      	strb	r3, [r5, #23]
            gc_init();
 8016cb2:	f7f6 f889 	bl	800cdc8 <gc_init>
            plan_reset();
 8016cb6:	f7ff f9ef 	bl	8016098 <plan_reset>
            if(sys.alarm_pending == Alarm_ProbeProtect) {
 8016cba:	7d2b      	ldrb	r3, [r5, #20]
 8016cbc:	2b0d      	cmp	r3, #13
 8016cbe:	f000 80d4 	beq.w	8016e6a <protocol_exec_rt_system+0x342>
                st_reset();
 8016cc2:	f008 fca5 	bl	801f610 <st_reset>
            sync_position();
 8016cc6:	f7ff fd15 	bl	80166f4 <plan_sync_position>
 8016cca:	4943      	ldr	r1, [pc, #268]	@ (8016dd8 <protocol_exec_rt_system+0x2b0>)
 8016ccc:	4843      	ldr	r0, [pc, #268]	@ (8016ddc <protocol_exec_rt_system+0x2b4>)
 8016cce:	f00a fcd5 	bl	802167c <system_convert_array_steps_to_mpos>
            gc_spindle_off();
 8016cd2:	f7f6 f919 	bl	800cf08 <gc_spindle_off>
            gc_coolant((coolant_state_t){0});
 8016cd6:	f04f 0000 	mov.w	r0, #0
 8016cda:	f7f6 f923 	bl	800cf24 <gc_coolant>
            flush_override_buffers();
 8016cde:	f7ff f8ad 	bl	8015e3c <flush_override_buffers>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired))) {
 8016ce2:	f007 fdb1 	bl	801e848 <state_get>
 8016ce6:	2801      	cmp	r0, #1
 8016ce8:	f000 80ca 	beq.w	8016e80 <protocol_exec_rt_system+0x358>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 8016cec:	4b33      	ldr	r3, [pc, #204]	@ (8016dbc <protocol_exec_rt_system+0x294>)
 8016cee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016cf0:	4798      	blx	r3
 8016cf2:	f010 0f08 	tst.w	r0, #8
 8016cf6:	f000 80cc 	beq.w	8016e92 <protocol_exec_rt_system+0x36a>
 8016cfa:	2040      	movs	r0, #64	@ 0x40
 8016cfc:	f007 fdaa 	bl	801e854 <state_set>
                grbl.report.feedback_message(Message_Stop);
 8016d00:	4b30      	ldr	r3, [pc, #192]	@ (8016dc4 <protocol_exec_rt_system+0x29c>)
 8016d02:	68db      	ldr	r3, [r3, #12]
 8016d04:	2016      	movs	r0, #22
 8016d06:	4798      	blx	r3
        if (rt_exec & EXEC_STATUS_REPORT)
 8016d08:	f014 0f01 	tst.w	r4, #1
 8016d0c:	f040 80c3 	bne.w	8016e96 <protocol_exec_rt_system+0x36e>
        if(rt_exec & EXEC_GCODE_REPORT)
 8016d10:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8016d14:	f040 80c2 	bne.w	8016e9c <protocol_exec_rt_system+0x374>
        if(rt_exec & EXEC_TLO_REPORT)
 8016d18:	f414 5f80 	tst.w	r4, #4096	@ 0x1000
 8016d1c:	f040 80c1 	bne.w	8016ea2 <protocol_exec_rt_system+0x37a>
        if (rt_exec & EXEC_PID_REPORT)
 8016d20:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8016d24:	f040 80c0 	bne.w	8016ea8 <protocol_exec_rt_system+0x380>
        if(rt_exec & EXEC_RT_COMMAND)
 8016d28:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 8016d2c:	f040 80bf 	bne.w	8016eae <protocol_exec_rt_system+0x386>
        rt_exec &= ~(EXEC_STOP|EXEC_STATUS_REPORT|EXEC_GCODE_REPORT|EXEC_PID_REPORT|EXEC_TLO_REPORT|EXEC_RT_COMMAND); // clear requests already processed
 8016d30:	f424 5070 	bic.w	r0, r4, #15360	@ 0x3c00
 8016d34:	f020 0011 	bic.w	r0, r0, #17
        if(sys.flags.feed_hold_pending) {
 8016d38:	4b1f      	ldr	r3, [pc, #124]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016d3a:	7d9b      	ldrb	r3, [r3, #22]
 8016d3c:	f013 0f20 	tst.w	r3, #32
 8016d40:	d008      	beq.n	8016d54 <protocol_exec_rt_system+0x22c>
            if(rt_exec & EXEC_CYCLE_START)
 8016d42:	f014 0f02 	tst.w	r4, #2
 8016d46:	f000 80b6 	beq.w	8016eb6 <protocol_exec_rt_system+0x38e>
                sys.flags.feed_hold_pending = Off;
 8016d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016d4c:	7d9a      	ldrb	r2, [r3, #22]
 8016d4e:	f36f 1245 	bfc	r2, #5, #1
 8016d52:	759a      	strb	r2, [r3, #22]
        if(rt_exec)
 8016d54:	b108      	cbz	r0, 8016d5a <protocol_exec_rt_system+0x232>
            state_update(rt_exec);
 8016d56:	f007 fed5 	bl	801eb04 <state_update>
    grbl.on_execute_realtime(state_get());
 8016d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8016dc4 <protocol_exec_rt_system+0x29c>)
 8016d5c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8016d5e:	f007 fd73 	bl	801e848 <state_get>
 8016d62:	47a0      	blx	r4
    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 8016d64:	4b14      	ldr	r3, [pc, #80]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016d66:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016d6a:	f013 0f01 	tst.w	r3, #1
 8016d6e:	f000 80ac 	beq.w	8016eca <protocol_exec_rt_system+0x3a2>
    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 8016d72:	4b11      	ldr	r3, [pc, #68]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016d74:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016d78:	f013 0f04 	tst.w	r3, #4
 8016d7c:	f000 80e5 	beq.w	8016f4a <protocol_exec_rt_system+0x422>
    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 8016d80:	4b0d      	ldr	r3, [pc, #52]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016d82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016d86:	f013 0f02 	tst.w	r3, #2
 8016d8a:	f000 8145 	beq.w	8017018 <protocol_exec_rt_system+0x4f0>
    if (state_get() & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG))
 8016d8e:	f007 fd5b 	bl	801e848 <state_get>
 8016d92:	f010 0ffc 	tst.w	r0, #252	@ 0xfc
 8016d96:	f040 819a 	bne.w	80170ce <protocol_exec_rt_system+0x5a6>
    return !ABORTED;
 8016d9a:	4b07      	ldr	r3, [pc, #28]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	f040 8198 	bne.w	80170d4 <protocol_exec_rt_system+0x5ac>
 8016da4:	4b04      	ldr	r3, [pc, #16]	@ (8016db8 <protocol_exec_rt_system+0x290>)
 8016da6:	785b      	ldrb	r3, [r3, #1]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	f000 8195 	beq.w	80170d8 <protocol_exec_rt_system+0x5b0>
 8016dae:	2000      	movs	r0, #0
 8016db0:	e191      	b.n	80170d6 <protocol_exec_rt_system+0x5ae>
    bool killed = false;
 8016db2:	2500      	movs	r5, #0
 8016db4:	e737      	b.n	8016c26 <protocol_exec_rt_system+0xfe>
 8016db6:	bf00      	nop
 8016db8:	200014a0 	.word	0x200014a0
 8016dbc:	200011c0 	.word	0x200011c0
 8016dc0:	200014ec 	.word	0x200014ec
 8016dc4:	200013a8 	.word	0x200013a8
 8016dc8:	200014e8 	.word	0x200014e8
 8016dcc:	2000194c 	.word	0x2000194c
 8016dd0:	20001a50 	.word	0x20001a50
 8016dd4:	20000ef8 	.word	0x20000ef8
 8016dd8:	20001528 	.word	0x20001528
 8016ddc:	20000f60 	.word	0x20000f60
            if(!killed) {
 8016de0:	b305      	cbz	r5, 8016e24 <protocol_exec_rt_system+0x2fc>
            if(!(sys.abort = !hal.control.get_state().e_stop)) {
 8016de2:	4bae      	ldr	r3, [pc, #696]	@ (801709c <protocol_exec_rt_system+0x574>)
 8016de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016de6:	4798      	blx	r3
 8016de8:	f3c0 1381 	ubfx	r3, r0, #6, #2
 8016dec:	f083 0301 	eor.w	r3, r3, #1
 8016df0:	f003 0301 	and.w	r3, r3, #1
 8016df4:	4aaa      	ldr	r2, [pc, #680]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016df6:	7013      	strb	r3, [r2, #0]
 8016df8:	b9e3      	cbnz	r3, 8016e34 <protocol_exec_rt_system+0x30c>
                hal.stream.reset_read_buffer();
 8016dfa:	4ba8      	ldr	r3, [pc, #672]	@ (801709c <protocol_exec_rt_system+0x574>)
 8016dfc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8016e00:	4798      	blx	r3
                system_raise_alarm(Alarm_EStop);
 8016e02:	200a      	movs	r0, #10
 8016e04:	f00a fc90 	bl	8021728 <system_raise_alarm>
                grbl.report.feedback_message(Message_EStop);
 8016e08:	4ba6      	ldr	r3, [pc, #664]	@ (80170a4 <protocol_exec_rt_system+0x57c>)
 8016e0a:	68db      	ldr	r3, [r3, #12]
 8016e0c:	200c      	movs	r0, #12
 8016e0e:	4798      	blx	r3
            if(!killed) // Tell driver/plugins about reset.
 8016e10:	b91d      	cbnz	r5, 8016e1a <protocol_exec_rt_system+0x2f2>
                hal.driver_reset();
 8016e12:	4ba2      	ldr	r3, [pc, #648]	@ (801709c <protocol_exec_rt_system+0x574>)
 8016e14:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8016e18:	4798      	blx	r3
            return !sys.abort; // Nothing else to do but exit.
 8016e1a:	4ba1      	ldr	r3, [pc, #644]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016e1c:	7818      	ldrb	r0, [r3, #0]
 8016e1e:	f080 0001 	eor.w	r0, r0, #1
 8016e22:	e158      	b.n	80170d6 <protocol_exec_rt_system+0x5ae>
                spindle_all_off();
 8016e24:	f007 fa8c 	bl	801e340 <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0});
 8016e28:	4b9c      	ldr	r3, [pc, #624]	@ (801709c <protocol_exec_rt_system+0x574>)
 8016e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e2c:	f04f 0000 	mov.w	r0, #0
 8016e30:	4798      	blx	r3
 8016e32:	e7d6      	b.n	8016de2 <protocol_exec_rt_system+0x2ba>
            } else if(hal.control.get_state().motor_fault) {
 8016e34:	4b99      	ldr	r3, [pc, #612]	@ (801709c <protocol_exec_rt_system+0x574>)
 8016e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016e38:	4798      	blx	r3
 8016e3a:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8016e3e:	d0e7      	beq.n	8016e10 <protocol_exec_rt_system+0x2e8>
                sys.abort = false;
 8016e40:	4b97      	ldr	r3, [pc, #604]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016e42:	2200      	movs	r2, #0
 8016e44:	701a      	strb	r2, [r3, #0]
                hal.stream.reset_read_buffer();
 8016e46:	4b95      	ldr	r3, [pc, #596]	@ (801709c <protocol_exec_rt_system+0x574>)
 8016e48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8016e4c:	4798      	blx	r3
                system_raise_alarm(Alarm_MotorFault);
 8016e4e:	2011      	movs	r0, #17
 8016e50:	f00a fc6a 	bl	8021728 <system_raise_alarm>
                grbl.report.feedback_message(Message_MotorFault);
 8016e54:	4b93      	ldr	r3, [pc, #588]	@ (80170a4 <protocol_exec_rt_system+0x57c>)
 8016e56:	68db      	ldr	r3, [r3, #12]
 8016e58:	2010      	movs	r0, #16
 8016e5a:	4798      	blx	r3
 8016e5c:	e7d8      	b.n	8016e10 <protocol_exec_rt_system+0x2e8>
                sys.override.control = gc_state.modal.override_ctrl;
 8016e5e:	4b92      	ldr	r3, [pc, #584]	@ (80170a8 <protocol_exec_rt_system+0x580>)
 8016e60:	7f1a      	ldrb	r2, [r3, #28]
 8016e62:	4b8f      	ldr	r3, [pc, #572]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016e64:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8016e68:	e705      	b.n	8016c76 <protocol_exec_rt_system+0x14e>
                st_go_idle();
 8016e6a:	f008 fa17 	bl	801f29c <st_go_idle>
                system_set_exec_alarm(sys.alarm_pending);
 8016e6e:	4b8b      	ldr	r3, [pc, #556]	@ (801709c <protocol_exec_rt_system+0x574>)
 8016e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e72:	7d29      	ldrb	r1, [r5, #20]
 8016e74:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 8016e78:	4798      	blx	r3
                sys.alarm_pending = Alarm_None;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	752b      	strb	r3, [r5, #20]
 8016e7e:	e722      	b.n	8016cc6 <protocol_exec_rt_system+0x19e>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired))) {
 8016e80:	4b87      	ldr	r3, [pc, #540]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016e82:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8016e86:	3b0b      	subs	r3, #11
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	2b01      	cmp	r3, #1
 8016e8c:	f63f af2e 	bhi.w	8016cec <protocol_exec_rt_system+0x1c4>
 8016e90:	e73a      	b.n	8016d08 <protocol_exec_rt_system+0x1e0>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 8016e92:	2000      	movs	r0, #0
 8016e94:	e732      	b.n	8016cfc <protocol_exec_rt_system+0x1d4>
            report_realtime_status();
 8016e96:	f003 f9e7 	bl	801a268 <report_realtime_status>
 8016e9a:	e739      	b.n	8016d10 <protocol_exec_rt_system+0x1e8>
            report_gcode_modes();
 8016e9c:	f002 fbc0 	bl	8019620 <report_gcode_modes>
 8016ea0:	e73a      	b.n	8016d18 <protocol_exec_rt_system+0x1f0>
            report_tool_offsets();
 8016ea2:	f002 fa1f 	bl	80192e4 <report_tool_offsets>
 8016ea6:	e73b      	b.n	8016d20 <protocol_exec_rt_system+0x1f8>
            report_pid_log();
 8016ea8:	f004 fd12 	bl	801b8d0 <report_pid_log>
 8016eac:	e73c      	b.n	8016d28 <protocol_exec_rt_system+0x200>
            protocol_execute_rt_commands(0);
 8016eae:	2000      	movs	r0, #0
 8016eb0:	f7ff fd3c 	bl	801692c <protocol_execute_rt_commands>
 8016eb4:	e73c      	b.n	8016d30 <protocol_exec_rt_system+0x208>
            else if(!sys.override.control.feed_hold_disable)
 8016eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016eb8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8016ebc:	f013 0f02 	tst.w	r3, #2
 8016ec0:	f47f af48 	bne.w	8016d54 <protocol_exec_rt_system+0x22c>
                rt_exec |= EXEC_FEED_HOLD;
 8016ec4:	f040 0008 	orr.w	r0, r0, #8
        if(rt_exec)
 8016ec8:	e745      	b.n	8016d56 <protocol_exec_rt_system+0x22e>
    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 8016eca:	f7fe ff61 	bl	8015d90 <get_feed_override>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	f43f af4e 	beq.w	8016d72 <protocol_exec_rt_system+0x24a>
        override_t new_f_override = sys.override.feed_rate;
 8016ed6:	4a72      	ldr	r2, [pc, #456]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016ed8:	69d4      	ldr	r4, [r2, #28]
        override_t new_r_override = sys.override.rapid_rate;
 8016eda:	6a15      	ldr	r5, [r2, #32]
 8016edc:	e015      	b.n	8016f0a <protocol_exec_rt_system+0x3e2>
                    new_f_override += FEED_OVERRIDE_COARSE_INCREMENT;
 8016ede:	340a      	adds	r4, #10
                    break;
 8016ee0:	e00a      	b.n	8016ef8 <protocol_exec_rt_system+0x3d0>
                    new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT;
 8016ee2:	3c0a      	subs	r4, #10
                    break;
 8016ee4:	e008      	b.n	8016ef8 <protocol_exec_rt_system+0x3d0>
                    new_f_override += FEED_OVERRIDE_FINE_INCREMENT;
 8016ee6:	3401      	adds	r4, #1
                    break;
 8016ee8:	e006      	b.n	8016ef8 <protocol_exec_rt_system+0x3d0>
                    new_f_override -= FEED_OVERRIDE_FINE_INCREMENT;
 8016eea:	3c01      	subs	r4, #1
                    break;
 8016eec:	e004      	b.n	8016ef8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = RAPID_OVERRIDE_MEDIUM;
 8016eee:	2532      	movs	r5, #50	@ 0x32
                    break;
 8016ef0:	e002      	b.n	8016ef8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = RAPID_OVERRIDE_LOW;
 8016ef2:	2519      	movs	r5, #25
                    break;
 8016ef4:	e000      	b.n	8016ef8 <protocol_exec_rt_system+0x3d0>
                    new_r_override = DEFAULT_RAPID_OVERRIDE;
 8016ef6:	2564      	movs	r5, #100	@ 0x64
            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 8016ef8:	2c09      	cmp	r4, #9
 8016efa:	d91f      	bls.n	8016f3c <protocol_exec_rt_system+0x414>
 8016efc:	2cc8      	cmp	r4, #200	@ 0xc8
 8016efe:	bf28      	it	cs
 8016f00:	24c8      	movcs	r4, #200	@ 0xc8
        } while((rt_exec = get_feed_override()));
 8016f02:	f7fe ff45 	bl	8015d90 <get_feed_override>
 8016f06:	4603      	mov	r3, r0
 8016f08:	b1d0      	cbz	r0, 8016f40 <protocol_exec_rt_system+0x418>
            switch(rt_exec) {
 8016f0a:	3b90      	subs	r3, #144	@ 0x90
 8016f0c:	2b07      	cmp	r3, #7
 8016f0e:	d8f3      	bhi.n	8016ef8 <protocol_exec_rt_system+0x3d0>
 8016f10:	a201      	add	r2, pc, #4	@ (adr r2, 8016f18 <protocol_exec_rt_system+0x3f0>)
 8016f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f16:	bf00      	nop
 8016f18:	08016f39 	.word	0x08016f39
 8016f1c:	08016edf 	.word	0x08016edf
 8016f20:	08016ee3 	.word	0x08016ee3
 8016f24:	08016ee7 	.word	0x08016ee7
 8016f28:	08016eeb 	.word	0x08016eeb
 8016f2c:	08016ef7 	.word	0x08016ef7
 8016f30:	08016eef 	.word	0x08016eef
 8016f34:	08016ef3 	.word	0x08016ef3
 8016f38:	2464      	movs	r4, #100	@ 0x64
 8016f3a:	e7df      	b.n	8016efc <protocol_exec_rt_system+0x3d4>
            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 8016f3c:	240a      	movs	r4, #10
 8016f3e:	e7e0      	b.n	8016f02 <protocol_exec_rt_system+0x3da>
        plan_feed_override(new_f_override, new_r_override);
 8016f40:	4629      	mov	r1, r5
 8016f42:	4620      	mov	r0, r4
 8016f44:	f7ff fc12 	bl	801676c <plan_feed_override>
 8016f48:	e713      	b.n	8016d72 <protocol_exec_rt_system+0x24a>
    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 8016f4a:	f7fe ff43 	bl	8015dd4 <get_spindle_override>
 8016f4e:	4605      	mov	r5, r0
 8016f50:	2800      	cmp	r0, #0
 8016f52:	f43f af15 	beq.w	8016d80 <protocol_exec_rt_system+0x258>
        spindle_ptrs_t *spindle = gc_spindle_get();
 8016f56:	f7f5 fff5 	bl	800cf44 <gc_spindle_get>
 8016f5a:	4606      	mov	r6, r0
        override_t last_s_override = spindle->param->override_pct;
 8016f5c:	6843      	ldr	r3, [r0, #4]
 8016f5e:	68dc      	ldr	r4, [r3, #12]
        bool spindle_stop = false;
 8016f60:	2700      	movs	r7, #0
 8016f62:	e009      	b.n	8016f78 <protocol_exec_rt_system+0x450>
                    last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8016f64:	340a      	adds	r4, #10
            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 8016f66:	2c09      	cmp	r4, #9
 8016f68:	d92c      	bls.n	8016fc4 <protocol_exec_rt_system+0x49c>
 8016f6a:	2cc8      	cmp	r4, #200	@ 0xc8
 8016f6c:	bf28      	it	cs
 8016f6e:	24c8      	movcs	r4, #200	@ 0xc8
        } while((rt_exec = get_spindle_override()));
 8016f70:	f7fe ff30 	bl	8015dd4 <get_spindle_override>
 8016f74:	4605      	mov	r5, r0
 8016f76:	b338      	cbz	r0, 8016fc8 <protocol_exec_rt_system+0x4a0>
            switch(rt_exec) {
 8016f78:	f1a5 0399 	sub.w	r3, r5, #153	@ 0x99
 8016f7c:	2b05      	cmp	r3, #5
 8016f7e:	d818      	bhi.n	8016fb2 <protocol_exec_rt_system+0x48a>
 8016f80:	a201      	add	r2, pc, #4	@ (adr r2, 8016f88 <protocol_exec_rt_system+0x460>)
 8016f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f86:	bf00      	nop
 8016f88:	08016fc1 	.word	0x08016fc1
 8016f8c:	08016f65 	.word	0x08016f65
 8016f90:	08016fa1 	.word	0x08016fa1
 8016f94:	08016fa5 	.word	0x08016fa5
 8016f98:	08016fa9 	.word	0x08016fa9
 8016f9c:	08016fad 	.word	0x08016fad
                    last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8016fa0:	3c0a      	subs	r4, #10
                    break;
 8016fa2:	e7e0      	b.n	8016f66 <protocol_exec_rt_system+0x43e>
                    last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT;
 8016fa4:	3401      	adds	r4, #1
                    break;
 8016fa6:	e7de      	b.n	8016f66 <protocol_exec_rt_system+0x43e>
                    last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT;
 8016fa8:	3c01      	subs	r4, #1
                    break;
 8016faa:	e7dc      	b.n	8016f66 <protocol_exec_rt_system+0x43e>
                    spindle_stop = !spindle_stop;
 8016fac:	f087 0701 	eor.w	r7, r7, #1
                    break;
 8016fb0:	e7d9      	b.n	8016f66 <protocol_exec_rt_system+0x43e>
                    if(grbl.on_unknown_accessory_override)
 8016fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80170a4 <protocol_exec_rt_system+0x57c>)
 8016fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d0d5      	beq.n	8016f66 <protocol_exec_rt_system+0x43e>
                        grbl.on_unknown_accessory_override(rt_exec);
 8016fba:	b2e8      	uxtb	r0, r5
 8016fbc:	4798      	blx	r3
 8016fbe:	e7d2      	b.n	8016f66 <protocol_exec_rt_system+0x43e>
            switch(rt_exec) {
 8016fc0:	2464      	movs	r4, #100	@ 0x64
 8016fc2:	e7d2      	b.n	8016f6a <protocol_exec_rt_system+0x442>
            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 8016fc4:	240a      	movs	r4, #10
 8016fc6:	e7d3      	b.n	8016f70 <protocol_exec_rt_system+0x448>
        spindle_set_override(spindle, last_s_override);
 8016fc8:	4621      	mov	r1, r4
 8016fca:	4630      	mov	r0, r6
 8016fcc:	f007 f972 	bl	801e2b4 <spindle_set_override>
        if (spindle_stop && state_get() == STATE_HOLD && gc_state.modal.spindle.state.on) {
 8016fd0:	2f00      	cmp	r7, #0
 8016fd2:	f43f aed5 	beq.w	8016d80 <protocol_exec_rt_system+0x258>
 8016fd6:	f007 fc37 	bl	801e848 <state_get>
 8016fda:	2810      	cmp	r0, #16
 8016fdc:	f47f aed0 	bne.w	8016d80 <protocol_exec_rt_system+0x258>
 8016fe0:	4b31      	ldr	r3, [pc, #196]	@ (80170a8 <protocol_exec_rt_system+0x580>)
 8016fe2:	7e9b      	ldrb	r3, [r3, #26]
 8016fe4:	f013 0f01 	tst.w	r3, #1
 8016fe8:	f43f aeca 	beq.w	8016d80 <protocol_exec_rt_system+0x258>
            if (!sys.override.spindle_stop.value)
 8016fec:	4b2c      	ldr	r3, [pc, #176]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016fee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016ff2:	b92b      	cbnz	r3, 8017000 <protocol_exec_rt_system+0x4d8>
                sys.override.spindle_stop.initiate = On;
 8016ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 8016ff6:	f043 0302 	orr.w	r3, r3, #2
 8016ffa:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8016ffe:	e6bf      	b.n	8016d80 <protocol_exec_rt_system+0x258>
            else if (sys.override.spindle_stop.enabled)
 8017000:	f013 0f01 	tst.w	r3, #1
 8017004:	f43f aebc 	beq.w	8016d80 <protocol_exec_rt_system+0x258>
                sys.override.spindle_stop.restore = On;
 8017008:	4a25      	ldr	r2, [pc, #148]	@ (80170a0 <protocol_exec_rt_system+0x578>)
 801700a:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 801700e:	f043 0304 	orr.w	r3, r3, #4
 8017012:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8017016:	e6b3      	b.n	8016d80 <protocol_exec_rt_system+0x258>
    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 8017018:	f7fe fefe 	bl	8015e18 <get_coolant_override>
 801701c:	4603      	mov	r3, r0
 801701e:	2800      	cmp	r0, #0
 8017020:	f43f aeb5 	beq.w	8016d8e <protocol_exec_rt_system+0x266>
        coolant_state_t coolant_state = gc_state.modal.coolant;
 8017024:	4a20      	ldr	r2, [pc, #128]	@ (80170a8 <protocol_exec_rt_system+0x580>)
 8017026:	7e54      	ldrb	r4, [r2, #25]
 8017028:	e022      	b.n	8017070 <protocol_exec_rt_system+0x548>
                    if(hal.coolant_cap.mist && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 801702a:	f007 fc0d 	bl	801e848 <state_get>
 801702e:	f010 0f18 	tst.w	r0, #24
 8017032:	d019      	beq.n	8017068 <protocol_exec_rt_system+0x540>
 8017034:	e02a      	b.n	801708c <protocol_exec_rt_system+0x564>
                    if(hal.coolant_cap.flood && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8017036:	4b19      	ldr	r3, [pc, #100]	@ (801709c <protocol_exec_rt_system+0x574>)
 8017038:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801703c:	f013 0f01 	tst.w	r3, #1
 8017040:	d012      	beq.n	8017068 <protocol_exec_rt_system+0x540>
 8017042:	f007 fc01 	bl	801e848 <state_get>
 8017046:	b920      	cbnz	r0, 8017052 <protocol_exec_rt_system+0x52a>
                        coolant_state.flood = !coolant_state.flood;
 8017048:	f084 0301 	eor.w	r3, r4, #1
 801704c:	f363 0400 	bfi	r4, r3, #0, #1
 8017050:	e00a      	b.n	8017068 <protocol_exec_rt_system+0x540>
                    if(hal.coolant_cap.flood && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8017052:	f007 fbf9 	bl	801e848 <state_get>
 8017056:	f010 0f18 	tst.w	r0, #24
 801705a:	d005      	beq.n	8017068 <protocol_exec_rt_system+0x540>
 801705c:	e7f4      	b.n	8017048 <protocol_exec_rt_system+0x520>
                    if(grbl.on_unknown_accessory_override)
 801705e:	4a11      	ldr	r2, [pc, #68]	@ (80170a4 <protocol_exec_rt_system+0x57c>)
 8017060:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8017062:	b10a      	cbz	r2, 8017068 <protocol_exec_rt_system+0x540>
                        grbl.on_unknown_accessory_override(rt_exec);
 8017064:	b2d8      	uxtb	r0, r3
 8017066:	4790      	blx	r2
        } while((rt_exec = get_coolant_override()));
 8017068:	f7fe fed6 	bl	8015e18 <get_coolant_override>
 801706c:	4603      	mov	r3, r0
 801706e:	b1e8      	cbz	r0, 80170ac <protocol_exec_rt_system+0x584>
            switch(rt_exec) {
 8017070:	2ba0      	cmp	r3, #160	@ 0xa0
 8017072:	d0e0      	beq.n	8017036 <protocol_exec_rt_system+0x50e>
 8017074:	2ba1      	cmp	r3, #161	@ 0xa1
 8017076:	d1f2      	bne.n	801705e <protocol_exec_rt_system+0x536>
                    if(hal.coolant_cap.mist && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))))
 8017078:	4b08      	ldr	r3, [pc, #32]	@ (801709c <protocol_exec_rt_system+0x574>)
 801707a:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801707e:	f013 0f02 	tst.w	r3, #2
 8017082:	d0f1      	beq.n	8017068 <protocol_exec_rt_system+0x540>
 8017084:	f007 fbe0 	bl	801e848 <state_get>
 8017088:	2800      	cmp	r0, #0
 801708a:	d1ce      	bne.n	801702a <protocol_exec_rt_system+0x502>
                        coolant_state.mist = !coolant_state.mist;
 801708c:	f3c4 0346 	ubfx	r3, r4, #1, #7
 8017090:	f083 0301 	eor.w	r3, r3, #1
 8017094:	f363 0441 	bfi	r4, r3, #1, #1
 8017098:	e7e6      	b.n	8017068 <protocol_exec_rt_system+0x540>
 801709a:	bf00      	nop
 801709c:	200011c0 	.word	0x200011c0
 80170a0:	200014a0 	.word	0x200014a0
 80170a4:	200013a8 	.word	0x200013a8
 80170a8:	20000ef8 	.word	0x20000ef8
        if(coolant_state.value != gc_state.modal.coolant.value) {
 80170ac:	b2e3      	uxtb	r3, r4
 80170ae:	4a0b      	ldr	r2, [pc, #44]	@ (80170dc <protocol_exec_rt_system+0x5b4>)
 80170b0:	7e52      	ldrb	r2, [r2, #25]
 80170b2:	4293      	cmp	r3, r2
 80170b4:	f43f ae6b 	beq.w	8016d8e <protocol_exec_rt_system+0x266>
            gc_coolant(coolant_state); // Report flag set in gc_coolant().
 80170b8:	4620      	mov	r0, r4
 80170ba:	f7f5 ff33 	bl	800cf24 <gc_coolant>
            if(grbl.on_override_changed)
 80170be:	4b08      	ldr	r3, [pc, #32]	@ (80170e0 <protocol_exec_rt_system+0x5b8>)
 80170c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	f43f ae63 	beq.w	8016d8e <protocol_exec_rt_system+0x266>
                grbl.on_override_changed(OverrideChanged_CoolantState);
 80170c8:	2000      	movs	r0, #0
 80170ca:	4798      	blx	r3
 80170cc:	e65f      	b.n	8016d8e <protocol_exec_rt_system+0x266>
        st_prep_buffer();
 80170ce:	f008 fbc9 	bl	801f864 <st_prep_buffer>
 80170d2:	e662      	b.n	8016d9a <protocol_exec_rt_system+0x272>
    return !ABORTED;
 80170d4:	2000      	movs	r0, #0
}
 80170d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return !ABORTED;
 80170d8:	2001      	movs	r0, #1
 80170da:	e7fc      	b.n	80170d6 <protocol_exec_rt_system+0x5ae>
 80170dc:	20000ef8 	.word	0x20000ef8
 80170e0:	200013a8 	.word	0x200013a8

080170e4 <protocol_exec_rt_suspend>:
{
 80170e4:	b508      	push	{r3, lr}
    if((sys.blocking_event = state == STATE_SLEEP)) {
 80170e6:	2880      	cmp	r0, #128	@ 0x80
 80170e8:	bf14      	ite	ne
 80170ea:	2000      	movne	r0, #0
 80170ec:	2001      	moveq	r0, #1
 80170ee:	4b1c      	ldr	r3, [pc, #112]	@ (8017160 <protocol_exec_rt_suspend+0x7c>)
 80170f0:	7158      	strb	r0, [r3, #5]
 80170f2:	b1a0      	cbz	r0, 801711e <protocol_exec_rt_suspend+0x3a>
        *line = '\0';
 80170f4:	2300      	movs	r3, #0
 80170f6:	4a1b      	ldr	r2, [pc, #108]	@ (8017164 <protocol_exec_rt_suspend+0x80>)
 80170f8:	7013      	strb	r3, [r2, #0]
        char_counter = 0;
 80170fa:	4a1b      	ldr	r2, [pc, #108]	@ (8017168 <protocol_exec_rt_suspend+0x84>)
 80170fc:	6013      	str	r3, [r2, #0]
        hal.stream.reset_read_buffer();
 80170fe:	4b1b      	ldr	r3, [pc, #108]	@ (801716c <protocol_exec_rt_suspend+0x88>)
 8017100:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8017104:	4798      	blx	r3
 8017106:	e00a      	b.n	801711e <protocol_exec_rt_suspend+0x3a>
            protocol_poll_cmd();
 8017108:	f7ff fc66 	bl	80169d8 <protocol_poll_cmd>
 801710c:	e011      	b.n	8017132 <protocol_exec_rt_suspend+0x4e>
        if(settings.flags.sleep_enable)
 801710e:	4b18      	ldr	r3, [pc, #96]	@ (8017170 <protocol_exec_rt_suspend+0x8c>)
 8017110:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017114:	f013 0f08 	tst.w	r3, #8
 8017118:	d11e      	bne.n	8017158 <protocol_exec_rt_suspend+0x74>
        protocol_exec_rt_system();
 801711a:	f7ff fd05 	bl	8016b28 <protocol_exec_rt_system>
    while(sys.suspend) {
 801711e:	4b10      	ldr	r3, [pc, #64]	@ (8017160 <protocol_exec_rt_suspend+0x7c>)
 8017120:	789b      	ldrb	r3, [r3, #2]
 8017122:	b1e3      	cbz	r3, 801715e <protocol_exec_rt_suspend+0x7a>
        if(sys.abort)
 8017124:	4b0e      	ldr	r3, [pc, #56]	@ (8017160 <protocol_exec_rt_suspend+0x7c>)
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	b9cb      	cbnz	r3, 801715e <protocol_exec_rt_suspend+0x7a>
        if(sys.blocking_event)
 801712a:	4b0d      	ldr	r3, [pc, #52]	@ (8017160 <protocol_exec_rt_suspend+0x7c>)
 801712c:	795b      	ldrb	r3, [r3, #5]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d1ea      	bne.n	8017108 <protocol_exec_rt_suspend+0x24>
        state_suspend_manager();
 8017132:	f008 f80d 	bl	801f150 <state_suspend_manager>
        if(state_get() == STATE_SAFETY_DOOR && !hal.control.get_state().safety_door_ajar)
 8017136:	f007 fb87 	bl	801e848 <state_get>
 801713a:	2840      	cmp	r0, #64	@ 0x40
 801713c:	d1e7      	bne.n	801710e <protocol_exec_rt_suspend+0x2a>
 801713e:	4b0b      	ldr	r3, [pc, #44]	@ (801716c <protocol_exec_rt_suspend+0x88>)
 8017140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017142:	4798      	blx	r3
 8017144:	f010 0f08 	tst.w	r0, #8
 8017148:	d1e1      	bne.n	801710e <protocol_exec_rt_suspend+0x2a>
            system_set_exec_state_flag(EXEC_DOOR_CLOSED);
 801714a:	4b08      	ldr	r3, [pc, #32]	@ (801716c <protocol_exec_rt_suspend+0x88>)
 801714c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801714e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8017152:	4808      	ldr	r0, [pc, #32]	@ (8017174 <protocol_exec_rt_suspend+0x90>)
 8017154:	4798      	blx	r3
 8017156:	e7da      	b.n	801710e <protocol_exec_rt_suspend+0x2a>
            sleep_check();
 8017158:	f006 fc38 	bl	801d9cc <sleep_check>
 801715c:	e7dd      	b.n	801711a <protocol_exec_rt_suspend+0x36>
}
 801715e:	bd08      	pop	{r3, pc}
 8017160:	200014a0 	.word	0x200014a0
 8017164:	2000194c 	.word	0x2000194c
 8017168:	20001a50 	.word	0x20001a50
 801716c:	200011c0 	.word	0x200011c0
 8017170:	20001bd8 	.word	0x20001bd8
 8017174:	200014e8 	.word	0x200014e8

08017178 <protocol_execute_realtime>:
{
 8017178:	b510      	push	{r4, lr}
    if(protocol_exec_rt_system()) {
 801717a:	f7ff fcd5 	bl	8016b28 <protocol_exec_rt_system>
 801717e:	b938      	cbnz	r0, 8017190 <protocol_execute_realtime+0x18>
    return !ABORTED;
 8017180:	4b12      	ldr	r3, [pc, #72]	@ (80171cc <protocol_execute_realtime+0x54>)
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	b9f3      	cbnz	r3, 80171c4 <protocol_execute_realtime+0x4c>
 8017186:	4b11      	ldr	r3, [pc, #68]	@ (80171cc <protocol_execute_realtime+0x54>)
 8017188:	785b      	ldrb	r3, [r3, #1]
 801718a:	b1eb      	cbz	r3, 80171c8 <protocol_execute_realtime+0x50>
 801718c:	2000      	movs	r0, #0
 801718e:	e01a      	b.n	80171c6 <protocol_execute_realtime+0x4e>
        sys_state_t state = state_get();
 8017190:	f007 fb5a 	bl	801e848 <state_get>
 8017194:	4604      	mov	r4, r0
        if(sys.suspend)
 8017196:	4b0d      	ldr	r3, [pc, #52]	@ (80171cc <protocol_execute_realtime+0x54>)
 8017198:	789b      	ldrb	r3, [r3, #2]
 801719a:	b983      	cbnz	r3, 80171be <protocol_execute_realtime+0x46>
        if((state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))) && settings_dirty.is_dirty && !gc_state.file_run)
 801719c:	b11c      	cbz	r4, 80171a6 <protocol_execute_realtime+0x2e>
 801719e:	f240 1301 	movw	r3, #257	@ 0x101
 80171a2:	421c      	tst	r4, r3
 80171a4:	d0ec      	beq.n	8017180 <protocol_execute_realtime+0x8>
 80171a6:	4b0a      	ldr	r3, [pc, #40]	@ (80171d0 <protocol_execute_realtime+0x58>)
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d0e8      	beq.n	8017180 <protocol_execute_realtime+0x8>
 80171ae:	4b09      	ldr	r3, [pc, #36]	@ (80171d4 <protocol_execute_realtime+0x5c>)
 80171b0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d1e3      	bne.n	8017180 <protocol_execute_realtime+0x8>
            nvs_buffer_sync_physical();
 80171b8:	f7fe fcd6 	bl	8015b68 <nvs_buffer_sync_physical>
 80171bc:	e7e0      	b.n	8017180 <protocol_execute_realtime+0x8>
            protocol_exec_rt_suspend(state);
 80171be:	f7ff ff91 	bl	80170e4 <protocol_exec_rt_suspend>
 80171c2:	e7eb      	b.n	801719c <protocol_execute_realtime+0x24>
    return !ABORTED;
 80171c4:	2000      	movs	r0, #0
}
 80171c6:	bd10      	pop	{r4, pc}
    return !ABORTED;
 80171c8:	2001      	movs	r0, #1
 80171ca:	e7fc      	b.n	80171c6 <protocol_execute_realtime+0x4e>
 80171cc:	200014a0 	.word	0x200014a0
 80171d0:	200016fc 	.word	0x200016fc
 80171d4:	20000ef8 	.word	0x20000ef8

080171d8 <protocol_main_loop>:
{
 80171d8:	b510      	push	{r4, lr}
 80171da:	b082      	sub	sp, #8
    if(sys.alarm == Alarm_SelftestFailed) {
 80171dc:	4b9f      	ldr	r3, [pc, #636]	@ (801745c <protocol_main_loop+0x284>)
 80171de:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80171e2:	2b10      	cmp	r3, #16
 80171e4:	d03c      	beq.n	8017260 <protocol_main_loop+0x88>
    } else if (hal.control.get_state().e_stop) {
 80171e6:	4b9e      	ldr	r3, [pc, #632]	@ (8017460 <protocol_main_loop+0x288>)
 80171e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171ea:	4798      	blx	r3
 80171ec:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80171f0:	d13e      	bne.n	8017270 <protocol_main_loop+0x98>
    } else if(hal.control.get_state().motor_fault) {
 80171f2:	4b9b      	ldr	r3, [pc, #620]	@ (8017460 <protocol_main_loop+0x288>)
 80171f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80171f6:	4798      	blx	r3
 80171f8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80171fc:	d16b      	bne.n	80172d6 <protocol_main_loop+0xfe>
    } else if(settings.probe.enable_protection && hal.control.get_state().probe_triggered) {
 80171fe:	4b99      	ldr	r3, [pc, #612]	@ (8017464 <protocol_main_loop+0x28c>)
 8017200:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8017204:	f013 0f20 	tst.w	r3, #32
 8017208:	d005      	beq.n	8017216 <protocol_main_loop+0x3e>
 801720a:	4b95      	ldr	r3, [pc, #596]	@ (8017460 <protocol_main_loop+0x288>)
 801720c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801720e:	4798      	blx	r3
 8017210:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8017214:	d167      	bne.n	80172e6 <protocol_main_loop+0x10e>
    } else if (limits_homing_required()) {
 8017216:	f7fc f901 	bl	801341c <limits_homing_required>
 801721a:	2800      	cmp	r0, #0
 801721c:	d16b      	bne.n	80172f6 <protocol_main_loop+0x11e>
    } else if (settings.limits.flags.hard_enabled &&
 801721e:	4b91      	ldr	r3, [pc, #580]	@ (8017464 <protocol_main_loop+0x28c>)
 8017220:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8017224:	f003 0305 	and.w	r3, r3, #5
 8017228:	2b05      	cmp	r3, #5
 801722a:	d06c      	beq.n	8017306 <protocol_main_loop+0x12e>
    } else if(sys.cold_start && (settings.flags.force_initialization_alarm || hal.control.get_state().reset)) {
 801722c:	4b8b      	ldr	r3, [pc, #556]	@ (801745c <protocol_main_loop+0x284>)
 801722e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017232:	2b00      	cmp	r3, #0
 8017234:	f000 8089 	beq.w	801734a <protocol_main_loop+0x172>
 8017238:	4b8a      	ldr	r3, [pc, #552]	@ (8017464 <protocol_main_loop+0x28c>)
 801723a:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801723e:	f013 0f20 	tst.w	r3, #32
 8017242:	d105      	bne.n	8017250 <protocol_main_loop+0x78>
 8017244:	4b86      	ldr	r3, [pc, #536]	@ (8017460 <protocol_main_loop+0x288>)
 8017246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017248:	4798      	blx	r3
 801724a:	f010 0f01 	tst.w	r0, #1
 801724e:	d07c      	beq.n	801734a <protocol_main_loop+0x172>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 8017250:	2001      	movs	r0, #1
 8017252:	f007 faff 	bl	801e854 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 8017256:	4b84      	ldr	r3, [pc, #528]	@ (8017468 <protocol_main_loop+0x290>)
 8017258:	68db      	ldr	r3, [r3, #12]
 801725a:	2002      	movs	r0, #2
 801725c:	4798      	blx	r3
 801725e:	e00e      	b.n	801727e <protocol_main_loop+0xa6>
        sys.alarm = Alarm_None;
 8017260:	4b7e      	ldr	r3, [pc, #504]	@ (801745c <protocol_main_loop+0x284>)
 8017262:	2200      	movs	r2, #0
 8017264:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        system_raise_alarm(Alarm_SelftestFailed);
 8017268:	2010      	movs	r0, #16
 801726a:	f00a fa5d 	bl	8021728 <system_raise_alarm>
 801726e:	e006      	b.n	801727e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_EStop);
 8017270:	200a      	movs	r0, #10
 8017272:	f00a fa59 	bl	8021728 <system_raise_alarm>
        grbl.report.feedback_message(Message_EStop);
 8017276:	4b7c      	ldr	r3, [pc, #496]	@ (8017468 <protocol_main_loop+0x290>)
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	200c      	movs	r0, #12
 801727c:	4798      	blx	r3
    if(sys.cold_start) {
 801727e:	4b77      	ldr	r3, [pc, #476]	@ (801745c <protocol_main_loop+0x284>)
 8017280:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8017284:	2b00      	cmp	r3, #0
 8017286:	f000 8096 	beq.w	80173b6 <protocol_main_loop+0x1de>
        spindle_all_off();
 801728a:	f007 f859 	bl	801e340 <spindle_all_off>
        hal.coolant.set_state((coolant_state_t){0});
 801728e:	4b74      	ldr	r3, [pc, #464]	@ (8017460 <protocol_main_loop+0x288>)
 8017290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017292:	f04f 0000 	mov.w	r0, #0
 8017296:	4798      	blx	r3
        if(realtime_queue.head != realtime_queue.tail)
 8017298:	4b74      	ldr	r3, [pc, #464]	@ (801746c <protocol_main_loop+0x294>)
 801729a:	681a      	ldr	r2, [r3, #0]
 801729c:	685b      	ldr	r3, [r3, #4]
 801729e:	429a      	cmp	r2, r3
 80172a0:	d005      	beq.n	80172ae <protocol_main_loop+0xd6>
            system_set_exec_state_flag(EXEC_RT_COMMAND);  // execute any boot up commands
 80172a2:	4b6f      	ldr	r3, [pc, #444]	@ (8017460 <protocol_main_loop+0x288>)
 80172a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80172a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80172aa:	4871      	ldr	r0, [pc, #452]	@ (8017470 <protocol_main_loop+0x298>)
 80172ac:	4798      	blx	r3
        on_execute_delay = grbl.on_execute_delay;
 80172ae:	4b6e      	ldr	r3, [pc, #440]	@ (8017468 <protocol_main_loop+0x290>)
 80172b0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80172b2:	4a70      	ldr	r2, [pc, #448]	@ (8017474 <protocol_main_loop+0x29c>)
 80172b4:	6011      	str	r1, [r2, #0]
        grbl.on_execute_delay = protocol_on_execute_delay;
 80172b6:	4a70      	ldr	r2, [pc, #448]	@ (8017478 <protocol_main_loop+0x2a0>)
 80172b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        sys.cold_start = false;
 80172ba:	4b68      	ldr	r3, [pc, #416]	@ (801745c <protocol_main_loop+0x284>)
 80172bc:	2200      	movs	r2, #0
 80172be:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    line_flags_t line_flags = {0};
 80172c2:	2400      	movs	r4, #0
 80172c4:	f88d 4000 	strb.w	r4, [sp]
    xcommand[0] = '\0';
 80172c8:	4b6c      	ldr	r3, [pc, #432]	@ (801747c <protocol_main_loop+0x2a4>)
 80172ca:	701c      	strb	r4, [r3, #0]
    char_counter = 0;
 80172cc:	4b6c      	ldr	r3, [pc, #432]	@ (8017480 <protocol_main_loop+0x2a8>)
 80172ce:	601c      	str	r4, [r3, #0]
    keep_rt_commands = false;
 80172d0:	4b6c      	ldr	r3, [pc, #432]	@ (8017484 <protocol_main_loop+0x2ac>)
 80172d2:	701c      	strb	r4, [r3, #0]
 80172d4:	e1c7      	b.n	8017666 <protocol_main_loop+0x48e>
        system_raise_alarm(Alarm_MotorFault);
 80172d6:	2011      	movs	r0, #17
 80172d8:	f00a fa26 	bl	8021728 <system_raise_alarm>
        grbl.report.feedback_message(Message_MotorFault);
 80172dc:	4b62      	ldr	r3, [pc, #392]	@ (8017468 <protocol_main_loop+0x290>)
 80172de:	68db      	ldr	r3, [r3, #12]
 80172e0:	2010      	movs	r0, #16
 80172e2:	4798      	blx	r3
 80172e4:	e7cb      	b.n	801727e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_ProbeProtect);
 80172e6:	200d      	movs	r0, #13
 80172e8:	f00a fa1e 	bl	8021728 <system_raise_alarm>
        grbl.report.feedback_message(Message_ProbeProtected);
 80172ec:	4b5e      	ldr	r3, [pc, #376]	@ (8017468 <protocol_main_loop+0x290>)
 80172ee:	68db      	ldr	r3, [r3, #12]
 80172f0:	2015      	movs	r0, #21
 80172f2:	4798      	blx	r3
 80172f4:	e7c3      	b.n	801727e <protocol_main_loop+0xa6>
        system_raise_alarm(Alarm_HomingRequired);
 80172f6:	200b      	movs	r0, #11
 80172f8:	f00a fa16 	bl	8021728 <system_raise_alarm>
        grbl.report.feedback_message(Message_HomingCycleRequired);
 80172fc:	4b5a      	ldr	r3, [pc, #360]	@ (8017468 <protocol_main_loop+0x290>)
 80172fe:	68db      	ldr	r3, [r3, #12]
 8017300:	200d      	movs	r0, #13
 8017302:	4798      	blx	r3
 8017304:	e7bb      	b.n	801727e <protocol_main_loop+0xa6>
                 (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)) {
 8017306:	4b56      	ldr	r3, [pc, #344]	@ (8017460 <protocol_main_loop+0x288>)
 8017308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801730a:	4798      	blx	r3
 801730c:	9001      	str	r0, [sp, #4]
 801730e:	f7fb fc39 	bl	8012b84 <limit_signals_merge>
 8017312:	4b52      	ldr	r3, [pc, #328]	@ (801745c <protocol_main_loop+0x284>)
 8017314:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
                settings.limits.flags.check_at_init &&
 8017318:	4203      	tst	r3, r0
 801731a:	d087      	beq.n	801722c <protocol_main_loop+0x54>
        if(sys.alarm == Alarm_LimitsEngaged && hal.control.get_state().limits_override)
 801731c:	4b4f      	ldr	r3, [pc, #316]	@ (801745c <protocol_main_loop+0x284>)
 801731e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8017322:	2b0c      	cmp	r3, #12
 8017324:	d105      	bne.n	8017332 <protocol_main_loop+0x15a>
 8017326:	4b4e      	ldr	r3, [pc, #312]	@ (8017460 <protocol_main_loop+0x288>)
 8017328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801732a:	4798      	blx	r3
 801732c:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8017330:	d107      	bne.n	8017342 <protocol_main_loop+0x16a>
            system_raise_alarm(Alarm_LimitsEngaged);
 8017332:	200c      	movs	r0, #12
 8017334:	f00a f9f8 	bl	8021728 <system_raise_alarm>
            grbl.report.feedback_message(Message_CheckLimits);
 8017338:	4b4b      	ldr	r3, [pc, #300]	@ (8017468 <protocol_main_loop+0x290>)
 801733a:	68db      	ldr	r3, [r3, #12]
 801733c:	2007      	movs	r0, #7
 801733e:	4798      	blx	r3
 8017340:	e79d      	b.n	801727e <protocol_main_loop+0xa6>
            state_set(STATE_IDLE); // Clear alarm state to enable limit switch pulloff.
 8017342:	2000      	movs	r0, #0
 8017344:	f007 fa86 	bl	801e854 <state_set>
 8017348:	e799      	b.n	801727e <protocol_main_loop+0xa6>
    } else if (state_get() & (STATE_ALARM|STATE_SLEEP)) {
 801734a:	f007 fa7d 	bl	801e848 <state_get>
 801734e:	f010 0f81 	tst.w	r0, #129	@ 0x81
 8017352:	d011      	beq.n	8017378 <protocol_main_loop+0x1a0>
        if(sys.alarm == Alarm_HomingRequired)
 8017354:	4b41      	ldr	r3, [pc, #260]	@ (801745c <protocol_main_loop+0x284>)
 8017356:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801735a:	2b0b      	cmp	r3, #11
 801735c:	d007      	beq.n	801736e <protocol_main_loop+0x196>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 801735e:	2001      	movs	r0, #1
 8017360:	f007 fa78 	bl	801e854 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 8017364:	4b40      	ldr	r3, [pc, #256]	@ (8017468 <protocol_main_loop+0x290>)
 8017366:	68db      	ldr	r3, [r3, #12]
 8017368:	2002      	movs	r0, #2
 801736a:	4798      	blx	r3
 801736c:	e787      	b.n	801727e <protocol_main_loop+0xa6>
            sys.alarm = Alarm_None; // Clear Alarm_HomingRequired as the lock has been overridden by a soft reset.
 801736e:	4b3b      	ldr	r3, [pc, #236]	@ (801745c <protocol_main_loop+0x284>)
 8017370:	2200      	movs	r2, #0
 8017372:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8017376:	e7f2      	b.n	801735e <protocol_main_loop+0x186>
        state_set(STATE_IDLE);
 8017378:	2000      	movs	r0, #0
 801737a:	f007 fa6b 	bl	801e854 <state_set>
        if (hal.signals_cap.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle && hal.control.get_state().safety_door_ajar) {
 801737e:	4b38      	ldr	r3, [pc, #224]	@ (8017460 <protocol_main_loop+0x288>)
 8017380:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8017384:	f013 0f08 	tst.w	r3, #8
 8017388:	d012      	beq.n	80173b0 <protocol_main_loop+0x1d8>
 801738a:	4b36      	ldr	r3, [pc, #216]	@ (8017464 <protocol_main_loop+0x28c>)
 801738c:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8017390:	f013 0f01 	tst.w	r3, #1
 8017394:	d10c      	bne.n	80173b0 <protocol_main_loop+0x1d8>
 8017396:	4b32      	ldr	r3, [pc, #200]	@ (8017460 <protocol_main_loop+0x288>)
 8017398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801739a:	4798      	blx	r3
 801739c:	f010 0f08 	tst.w	r0, #8
 80173a0:	d006      	beq.n	80173b0 <protocol_main_loop+0x1d8>
            system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 80173a2:	4b2f      	ldr	r3, [pc, #188]	@ (8017460 <protocol_main_loop+0x288>)
 80173a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173a6:	2140      	movs	r1, #64	@ 0x40
 80173a8:	4831      	ldr	r0, [pc, #196]	@ (8017470 <protocol_main_loop+0x298>)
 80173aa:	4798      	blx	r3
            protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 80173ac:	f7ff fee4 	bl	8017178 <protocol_execute_realtime>
        system_execute_startup(); // Execute startup script.
 80173b0:	f009 ff32 	bl	8021218 <system_execute_startup>
 80173b4:	e763      	b.n	801727e <protocol_main_loop+0xa6>
        memset(&realtime_queue, 0, sizeof(realtime_queue_t));
 80173b6:	2288      	movs	r2, #136	@ 0x88
 80173b8:	2100      	movs	r1, #0
 80173ba:	482c      	ldr	r0, [pc, #176]	@ (801746c <protocol_main_loop+0x294>)
 80173bc:	f00d f937 	bl	802462e <memset>
 80173c0:	e77f      	b.n	80172c2 <protocol_main_loop+0xea>
                eol = xcommand[0] = '\0';
 80173c2:	2300      	movs	r3, #0
 80173c4:	4a2d      	ldr	r2, [pc, #180]	@ (801747c <protocol_main_loop+0x2a4>)
 80173c6:	7013      	strb	r3, [r2, #0]
                keep_rt_commands = false;
 80173c8:	4a2e      	ldr	r2, [pc, #184]	@ (8017484 <protocol_main_loop+0x2ac>)
 80173ca:	7013      	strb	r3, [r2, #0]
                char_counter = line_flags.value = 0;
 80173cc:	f88d 3000 	strb.w	r3, [sp]
 80173d0:	4a2b      	ldr	r2, [pc, #172]	@ (8017480 <protocol_main_loop+0x2a8>)
 80173d2:	6013      	str	r3, [r2, #0]
                gc_state.last_error = Status_OK;
 80173d4:	4a2c      	ldr	r2, [pc, #176]	@ (8017488 <protocol_main_loop+0x2b0>)
 80173d6:	f882 3081 	strb.w	r3, [r2, #129]	@ 0x81
                if (state_get() == STATE_JOG) // Block all other states from invoking motion cancel.
 80173da:	f007 fa35 	bl	801e848 <state_get>
 80173de:	2820      	cmp	r0, #32
 80173e0:	d001      	beq.n	80173e6 <protocol_main_loop+0x20e>
                eol = xcommand[0] = '\0';
 80173e2:	2400      	movs	r4, #0
 80173e4:	e13f      	b.n	8017666 <protocol_main_loop+0x48e>
                    system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 80173e6:	4b1e      	ldr	r3, [pc, #120]	@ (8017460 <protocol_main_loop+0x288>)
 80173e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173ea:	2180      	movs	r1, #128	@ 0x80
 80173ec:	4820      	ldr	r0, [pc, #128]	@ (8017470 <protocol_main_loop+0x298>)
 80173ee:	4798      	blx	r3
                eol = xcommand[0] = '\0';
 80173f0:	2400      	movs	r4, #0
 80173f2:	e138      	b.n	8017666 <protocol_main_loop+0x48e>
                if(char_counter == 0 && eol && eol != c) {
 80173f4:	4b22      	ldr	r3, [pc, #136]	@ (8017480 <protocol_main_loop+0x2a8>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	b91b      	cbnz	r3, 8017402 <protocol_main_loop+0x22a>
 80173fa:	b114      	cbz	r4, 8017402 <protocol_main_loop+0x22a>
 80173fc:	4284      	cmp	r4, r0
 80173fe:	f040 810c 	bne.w	801761a <protocol_main_loop+0x442>
                    eol = (char)c;
 8017402:	b2c4      	uxtb	r4, r0
                if(!protocol_execute_realtime()) // Runtime command check point.
 8017404:	f7ff feb8 	bl	8017178 <protocol_execute_realtime>
 8017408:	b300      	cbz	r0, 801744c <protocol_main_loop+0x274>
                line[char_counter] = '\0'; // Set string termination character.
 801740a:	4b1d      	ldr	r3, [pc, #116]	@ (8017480 <protocol_main_loop+0x2a8>)
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	4a1f      	ldr	r2, [pc, #124]	@ (801748c <protocol_main_loop+0x2b4>)
 8017410:	2100      	movs	r1, #0
 8017412:	54d1      	strb	r1, [r2, r3]
                if (line_flags.overflow) // Report line overflow error.
 8017414:	f89d 3000 	ldrb.w	r3, [sp]
 8017418:	f013 0f01 	tst.w	r3, #1
 801741c:	d038      	beq.n	8017490 <protocol_main_loop+0x2b8>
                    gc_state.last_error = Status_Overflow;
 801741e:	4b1a      	ldr	r3, [pc, #104]	@ (8017488 <protocol_main_loop+0x2b0>)
 8017420:	220b      	movs	r2, #11
 8017422:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                if(ABORTED)
 8017426:	4b0d      	ldr	r3, [pc, #52]	@ (801745c <protocol_main_loop+0x284>)
 8017428:	881b      	ldrh	r3, [r3, #0]
 801742a:	2b00      	cmp	r3, #0
 801742c:	f040 80f7 	bne.w	801761e <protocol_main_loop+0x446>
                    grbl.report.status_message(gc_state.last_error);
 8017430:	4b0d      	ldr	r3, [pc, #52]	@ (8017468 <protocol_main_loop+0x290>)
 8017432:	689b      	ldr	r3, [r3, #8]
 8017434:	4a14      	ldr	r2, [pc, #80]	@ (8017488 <protocol_main_loop+0x2b0>)
 8017436:	f892 0081 	ldrb.w	r0, [r2, #129]	@ 0x81
 801743a:	4798      	blx	r3
                keep_rt_commands = false;
 801743c:	2300      	movs	r3, #0
 801743e:	4a11      	ldr	r2, [pc, #68]	@ (8017484 <protocol_main_loop+0x2ac>)
 8017440:	7013      	strb	r3, [r2, #0]
                char_counter = line_flags.value = 0;
 8017442:	f88d 3000 	strb.w	r3, [sp]
 8017446:	4a0e      	ldr	r2, [pc, #56]	@ (8017480 <protocol_main_loop+0x2a8>)
 8017448:	6013      	str	r3, [r2, #0]
 801744a:	e10c      	b.n	8017666 <protocol_main_loop+0x48e>
                    return !sys.flags.exit;      // Bail to calling function upon system abort
 801744c:	4b03      	ldr	r3, [pc, #12]	@ (801745c <protocol_main_loop+0x284>)
 801744e:	7d98      	ldrb	r0, [r3, #22]
 8017450:	08c0      	lsrs	r0, r0, #3
 8017452:	f080 0001 	eor.w	r0, r0, #1
 8017456:	f000 0001 	and.w	r0, r0, #1
 801745a:	e144      	b.n	80176e6 <protocol_main_loop+0x50e>
 801745c:	200014a0 	.word	0x200014a0
 8017460:	200011c0 	.word	0x200011c0
 8017464:	20001bd8 	.word	0x20001bd8
 8017468:	200013a8 	.word	0x200013a8
 801746c:	200017bc 	.word	0x200017bc
 8017470:	200014e8 	.word	0x200014e8
 8017474:	200017b8 	.word	0x200017b8
 8017478:	0801699d 	.word	0x0801699d
 801747c:	20001848 	.word	0x20001848
 8017480:	20001a50 	.word	0x20001a50
 8017484:	20001844 	.word	0x20001844
 8017488:	20000ef8 	.word	0x20000ef8
 801748c:	2000194c 	.word	0x2000194c
                else if(*line == '\0') // Empty line. For syncing purposes.
 8017490:	4b97      	ldr	r3, [pc, #604]	@ (80176f0 <protocol_main_loop+0x518>)
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	b923      	cbnz	r3, 80174a0 <protocol_main_loop+0x2c8>
                    gc_state.last_error = Status_OK;
 8017496:	4b97      	ldr	r3, [pc, #604]	@ (80176f4 <protocol_main_loop+0x51c>)
 8017498:	2200      	movs	r2, #0
 801749a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801749e:	e7c2      	b.n	8017426 <protocol_main_loop+0x24e>
                else if(*line == '$') {// grblHAL '$' system command
 80174a0:	2b24      	cmp	r3, #36	@ 0x24
 80174a2:	d00b      	beq.n	80174bc <protocol_main_loop+0x2e4>
                } else if(*line == '[' && grbl.on_user_command)
 80174a4:	2b5b      	cmp	r3, #91	@ 0x5b
 80174a6:	d119      	bne.n	80174dc <protocol_main_loop+0x304>
 80174a8:	4b93      	ldr	r3, [pc, #588]	@ (80176f8 <protocol_main_loop+0x520>)
 80174aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80174ae:	b1ab      	cbz	r3, 80174dc <protocol_main_loop+0x304>
                    gc_state.last_error = grbl.on_user_command(line);
 80174b0:	488f      	ldr	r0, [pc, #572]	@ (80176f0 <protocol_main_loop+0x518>)
 80174b2:	4798      	blx	r3
 80174b4:	4b8f      	ldr	r3, [pc, #572]	@ (80176f4 <protocol_main_loop+0x51c>)
 80174b6:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 80174ba:	e7b4      	b.n	8017426 <protocol_main_loop+0x24e>
                    if((gc_state.last_error = system_execute_line(line)) == Status_LimitsEngaged) {
 80174bc:	488c      	ldr	r0, [pc, #560]	@ (80176f0 <protocol_main_loop+0x518>)
 80174be:	f009 ffc7 	bl	8021450 <system_execute_line>
 80174c2:	4b8c      	ldr	r3, [pc, #560]	@ (80176f4 <protocol_main_loop+0x51c>)
 80174c4:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 80174c8:	282d      	cmp	r0, #45	@ 0x2d
 80174ca:	d1ac      	bne.n	8017426 <protocol_main_loop+0x24e>
                        system_raise_alarm(Alarm_LimitsEngaged);
 80174cc:	200c      	movs	r0, #12
 80174ce:	f00a f92b 	bl	8021728 <system_raise_alarm>
                        grbl.report.feedback_message(Message_CheckLimits);
 80174d2:	4b89      	ldr	r3, [pc, #548]	@ (80176f8 <protocol_main_loop+0x520>)
 80174d4:	68db      	ldr	r3, [r3, #12]
 80174d6:	2007      	movs	r0, #7
 80174d8:	4798      	blx	r3
 80174da:	e7a4      	b.n	8017426 <protocol_main_loop+0x24e>
                else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog mode.
 80174dc:	f007 f9b4 	bl	801e848 <state_get>
 80174e0:	f240 1321 	movw	r3, #289	@ 0x121
 80174e4:	4218      	tst	r0, r3
 80174e6:	d004      	beq.n	80174f2 <protocol_main_loop+0x31a>
                    gc_state.last_error = Status_SystemGClock;
 80174e8:	4b82      	ldr	r3, [pc, #520]	@ (80176f4 <protocol_main_loop+0x51c>)
 80174ea:	2209      	movs	r2, #9
 80174ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80174f0:	e799      	b.n	8017426 <protocol_main_loop+0x24e>
                else if(gc_state.last_error == Status_OK || gc_state.last_error == Status_GcodeToolChangePending) { // Parse and execute g-code block.
 80174f2:	4b80      	ldr	r3, [pc, #512]	@ (80176f4 <protocol_main_loop+0x51c>)
 80174f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80174f8:	b10b      	cbz	r3, 80174fe <protocol_main_loop+0x326>
 80174fa:	2b28      	cmp	r3, #40	@ 0x28
 80174fc:	d193      	bne.n	8017426 <protocol_main_loop+0x24e>
                    gc_state.last_error = gc_execute_block(line);
 80174fe:	487c      	ldr	r0, [pc, #496]	@ (80176f0 <protocol_main_loop+0x518>)
 8017500:	f7f5 fe3c 	bl	800d17c <gc_execute_block>
 8017504:	4b7b      	ldr	r3, [pc, #492]	@ (80176f4 <protocol_main_loop+0x51c>)
 8017506:	f883 0081 	strb.w	r0, [r3, #129]	@ 0x81
 801750a:	e78c      	b.n	8017426 <protocol_main_loop+0x24e>
            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 801750c:	4b7b      	ldr	r3, [pc, #492]	@ (80176fc <protocol_main_loop+0x524>)
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	b1cb      	cbz	r3, 8017546 <protocol_main_loop+0x36e>
 8017512:	221f      	movs	r2, #31
 8017514:	4290      	cmp	r0, r2
 8017516:	f340 80a6 	ble.w	8017666 <protocol_main_loop+0x48e>
                switch(c) {
 801751a:	283b      	cmp	r0, #59	@ 0x3b
 801751c:	dc29      	bgt.n	8017572 <protocol_main_loop+0x39a>
 801751e:	2824      	cmp	r0, #36	@ 0x24
 8017520:	db13      	blt.n	801754a <protocol_main_loop+0x372>
 8017522:	f1a0 0224 	sub.w	r2, r0, #36	@ 0x24
 8017526:	2a17      	cmp	r2, #23
 8017528:	d811      	bhi.n	801754e <protocol_main_loop+0x376>
 801752a:	e8df f002 	tbb	[pc, r2]
 801752e:	1036      	.short	0x1036
 8017530:	583c1010 	.word	0x583c1010
 8017534:	10101010 	.word	0x10101010
 8017538:	10101010 	.word	0x10101010
 801753c:	10101010 	.word	0x10101010
 8017540:	10101010 	.word	0x10101010
 8017544:	6710      	.short	0x6710
            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 8017546:	2220      	movs	r2, #32
 8017548:	e7e4      	b.n	8017514 <protocol_main_loop+0x33c>
                switch(c) {
 801754a:	2808      	cmp	r0, #8
 801754c:	d015      	beq.n	801757a <protocol_main_loop+0x3a2>
                if(!(line_flags.overflow = char_counter >= (LINE_BUFFER_SIZE - 1)))
 801754e:	2bff      	cmp	r3, #255	@ 0xff
 8017550:	bf94      	ite	ls
 8017552:	2200      	movls	r2, #0
 8017554:	2201      	movhi	r2, #1
 8017556:	f89d 1000 	ldrb.w	r1, [sp]
 801755a:	f362 0100 	bfi	r1, r2, #0, #1
 801755e:	f88d 1000 	strb.w	r1, [sp]
 8017562:	2a00      	cmp	r2, #0
 8017564:	d17f      	bne.n	8017666 <protocol_main_loop+0x48e>
                    line[char_counter++] = c;
 8017566:	1c59      	adds	r1, r3, #1
 8017568:	4a64      	ldr	r2, [pc, #400]	@ (80176fc <protocol_main_loop+0x524>)
 801756a:	6011      	str	r1, [r2, #0]
 801756c:	4a60      	ldr	r2, [pc, #384]	@ (80176f0 <protocol_main_loop+0x518>)
 801756e:	54d0      	strb	r0, [r2, r3]
 8017570:	e079      	b.n	8017666 <protocol_main_loop+0x48e>
                switch(c) {
 8017572:	285b      	cmp	r0, #91	@ 0x5b
 8017574:	d011      	beq.n	801759a <protocol_main_loop+0x3c2>
 8017576:	287f      	cmp	r0, #127	@ 0x7f
 8017578:	d1e9      	bne.n	801754e <protocol_main_loop+0x376>
                        if(char_counter) {
 801757a:	4b60      	ldr	r3, [pc, #384]	@ (80176fc <protocol_main_loop+0x524>)
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d071      	beq.n	8017666 <protocol_main_loop+0x48e>
                            line[--char_counter] = '\0';
 8017582:	3b01      	subs	r3, #1
 8017584:	4a5d      	ldr	r2, [pc, #372]	@ (80176fc <protocol_main_loop+0x524>)
 8017586:	6013      	str	r3, [r2, #0]
 8017588:	4859      	ldr	r0, [pc, #356]	@ (80176f0 <protocol_main_loop+0x518>)
 801758a:	2200      	movs	r2, #0
 801758c:	54c2      	strb	r2, [r0, r3]
                            keep_rt_commands = recheck_line(line, &line_flags);
 801758e:	4669      	mov	r1, sp
 8017590:	f7ff f94a 	bl	8016828 <recheck_line>
 8017594:	4b5a      	ldr	r3, [pc, #360]	@ (8017700 <protocol_main_loop+0x528>)
 8017596:	7018      	strb	r0, [r3, #0]
                        continue;
 8017598:	e065      	b.n	8017666 <protocol_main_loop+0x48e>
                        if(char_counter == 0)
 801759a:	2b00      	cmp	r3, #0
 801759c:	d1d7      	bne.n	801754e <protocol_main_loop+0x376>
                            keep_rt_commands = true;
 801759e:	4a58      	ldr	r2, [pc, #352]	@ (8017700 <protocol_main_loop+0x528>)
 80175a0:	2101      	movs	r1, #1
 80175a2:	7011      	strb	r1, [r2, #0]
 80175a4:	e7d3      	b.n	801754e <protocol_main_loop+0x376>
                        if(!keep_rt_commands && (line_flags.comment_parentheses = !line_flags.comment_semicolon))
 80175a6:	4a56      	ldr	r2, [pc, #344]	@ (8017700 <protocol_main_loop+0x528>)
 80175a8:	7812      	ldrb	r2, [r2, #0]
 80175aa:	2a00      	cmp	r2, #0
 80175ac:	d1cf      	bne.n	801754e <protocol_main_loop+0x376>
 80175ae:	f89d 1000 	ldrb.w	r1, [sp]
 80175b2:	088a      	lsrs	r2, r1, #2
 80175b4:	f082 0201 	eor.w	r2, r2, #1
 80175b8:	f002 0201 	and.w	r2, r2, #1
 80175bc:	f362 0141 	bfi	r1, r2, #1, #1
 80175c0:	f88d 1000 	strb.w	r1, [sp]
 80175c4:	2a00      	cmp	r2, #0
 80175c6:	d0c2      	beq.n	801754e <protocol_main_loop+0x376>
                            keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 80175c8:	4a4e      	ldr	r2, [pc, #312]	@ (8017704 <protocol_main_loop+0x52c>)
 80175ca:	f892 21da 	ldrb.w	r2, [r2, #474]	@ 0x1da
 80175ce:	0892      	lsrs	r2, r2, #2
 80175d0:	f082 0201 	eor.w	r2, r2, #1
 80175d4:	f002 0201 	and.w	r2, r2, #1
 80175d8:	4949      	ldr	r1, [pc, #292]	@ (8017700 <protocol_main_loop+0x528>)
 80175da:	700a      	strb	r2, [r1, #0]
 80175dc:	e7b7      	b.n	801754e <protocol_main_loop+0x376>
                        if(!line_flags.comment_semicolon)
 80175de:	f89d 2000 	ldrb.w	r2, [sp]
 80175e2:	f012 0f04 	tst.w	r2, #4
 80175e6:	d1b2      	bne.n	801754e <protocol_main_loop+0x376>
                            line_flags.comment_parentheses = keep_rt_commands = false;
 80175e8:	2100      	movs	r1, #0
 80175ea:	4a45      	ldr	r2, [pc, #276]	@ (8017700 <protocol_main_loop+0x528>)
 80175ec:	7011      	strb	r1, [r2, #0]
 80175ee:	f89d 2000 	ldrb.w	r2, [sp]
 80175f2:	f361 0241 	bfi	r2, r1, #1, #1
 80175f6:	f88d 2000 	strb.w	r2, [sp]
 80175fa:	e7a8      	b.n	801754e <protocol_main_loop+0x376>
                        if(!line_flags.comment_parentheses) {
 80175fc:	f89d 2000 	ldrb.w	r2, [sp]
 8017600:	f012 0f02 	tst.w	r2, #2
 8017604:	d1a3      	bne.n	801754e <protocol_main_loop+0x376>
                            keep_rt_commands = false;
 8017606:	4a3e      	ldr	r2, [pc, #248]	@ (8017700 <protocol_main_loop+0x528>)
 8017608:	2100      	movs	r1, #0
 801760a:	7011      	strb	r1, [r2, #0]
                            line_flags.comment_semicolon = On;
 801760c:	f89d 2000 	ldrb.w	r2, [sp]
 8017610:	f042 0204 	orr.w	r2, r2, #4
 8017614:	f88d 2000 	strb.w	r2, [sp]
 8017618:	e799      	b.n	801754e <protocol_main_loop+0x376>
                    eol = '\0';
 801761a:	2400      	movs	r4, #0
 801761c:	e023      	b.n	8017666 <protocol_main_loop+0x48e>
        if(xcommand[0] != '\0') {
 801761e:	4b3a      	ldr	r3, [pc, #232]	@ (8017708 <protocol_main_loop+0x530>)
 8017620:	781b      	ldrb	r3, [r3, #0]
 8017622:	b173      	cbz	r3, 8017642 <protocol_main_loop+0x46a>
            if (xcommand[0] == '$') // grblHAL '$' system command
 8017624:	2b24      	cmp	r3, #36	@ 0x24
 8017626:	d04f      	beq.n	80176c8 <protocol_main_loop+0x4f0>
            else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog state.
 8017628:	f007 f90e 	bl	801e848 <state_get>
 801762c:	f240 1321 	movw	r3, #289	@ 0x121
 8017630:	4218      	tst	r0, r3
 8017632:	d04d      	beq.n	80176d0 <protocol_main_loop+0x4f8>
                grbl.report.status_message(Status_SystemGClock);
 8017634:	4b30      	ldr	r3, [pc, #192]	@ (80176f8 <protocol_main_loop+0x520>)
 8017636:	689b      	ldr	r3, [r3, #8]
 8017638:	2009      	movs	r0, #9
 801763a:	4798      	blx	r3
            xcommand[0] = '\0';
 801763c:	4b32      	ldr	r3, [pc, #200]	@ (8017708 <protocol_main_loop+0x530>)
 801763e:	2200      	movs	r2, #0
 8017640:	701a      	strb	r2, [r3, #0]
        protocol_auto_cycle_start();
 8017642:	f7ff fa63 	bl	8016b0c <protocol_auto_cycle_start>
        if(!protocol_execute_realtime() && sys.abort) // Runtime command check point.
 8017646:	f7ff fd97 	bl	8017178 <protocol_execute_realtime>
 801764a:	b918      	cbnz	r0, 8017654 <protocol_main_loop+0x47c>
 801764c:	4b2f      	ldr	r3, [pc, #188]	@ (801770c <protocol_main_loop+0x534>)
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d141      	bne.n	80176d8 <protocol_main_loop+0x500>
        sys.cancel = false;
 8017654:	4b2d      	ldr	r3, [pc, #180]	@ (801770c <protocol_main_loop+0x534>)
 8017656:	2200      	movs	r2, #0
 8017658:	705a      	strb	r2, [r3, #1]
        if(settings.flags.sleep_enable)
 801765a:	4b2d      	ldr	r3, [pc, #180]	@ (8017710 <protocol_main_loop+0x538>)
 801765c:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017660:	f013 0f08 	tst.w	r3, #8
 8017664:	d141      	bne.n	80176ea <protocol_main_loop+0x512>
        while((c = hal.stream.read()) != SERIAL_NO_DATA) {
 8017666:	4b27      	ldr	r3, [pc, #156]	@ (8017704 <protocol_main_loop+0x52c>)
 8017668:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801766c:	4798      	blx	r3
 801766e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017672:	d0d4      	beq.n	801761e <protocol_main_loop+0x446>
            if(c == ASCII_CAN) {
 8017674:	f1a0 0308 	sub.w	r3, r0, #8
 8017678:	2b10      	cmp	r3, #16
 801767a:	f63f af47 	bhi.w	801750c <protocol_main_loop+0x334>
 801767e:	a201      	add	r2, pc, #4	@ (adr r2, 8017684 <protocol_main_loop+0x4ac>)
 8017680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017684:	0801757b 	.word	0x0801757b
 8017688:	0801750d 	.word	0x0801750d
 801768c:	080173f5 	.word	0x080173f5
 8017690:	0801750d 	.word	0x0801750d
 8017694:	0801750d 	.word	0x0801750d
 8017698:	080173f5 	.word	0x080173f5
 801769c:	0801750d 	.word	0x0801750d
 80176a0:	0801750d 	.word	0x0801750d
 80176a4:	0801750d 	.word	0x0801750d
 80176a8:	0801750d 	.word	0x0801750d
 80176ac:	0801750d 	.word	0x0801750d
 80176b0:	0801750d 	.word	0x0801750d
 80176b4:	0801750d 	.word	0x0801750d
 80176b8:	0801750d 	.word	0x0801750d
 80176bc:	0801750d 	.word	0x0801750d
 80176c0:	0801750d 	.word	0x0801750d
 80176c4:	080173c3 	.word	0x080173c3
                system_execute_line(xcommand);
 80176c8:	480f      	ldr	r0, [pc, #60]	@ (8017708 <protocol_main_loop+0x530>)
 80176ca:	f009 fec1 	bl	8021450 <system_execute_line>
 80176ce:	e7b5      	b.n	801763c <protocol_main_loop+0x464>
                gc_execute_block(xcommand);
 80176d0:	480d      	ldr	r0, [pc, #52]	@ (8017708 <protocol_main_loop+0x530>)
 80176d2:	f7f5 fd53 	bl	800d17c <gc_execute_block>
 80176d6:	e7b1      	b.n	801763c <protocol_main_loop+0x464>
            return !sys.flags.exit;                   // Bail to main() program loop to reset system.
 80176d8:	4b0c      	ldr	r3, [pc, #48]	@ (801770c <protocol_main_loop+0x534>)
 80176da:	7d98      	ldrb	r0, [r3, #22]
 80176dc:	08c0      	lsrs	r0, r0, #3
 80176de:	f080 0001 	eor.w	r0, r0, #1
 80176e2:	f000 0001 	and.w	r0, r0, #1
}
 80176e6:	b002      	add	sp, #8
 80176e8:	bd10      	pop	{r4, pc}
            sleep_check();
 80176ea:	f006 f96f 	bl	801d9cc <sleep_check>
 80176ee:	e7ba      	b.n	8017666 <protocol_main_loop+0x48e>
 80176f0:	2000194c 	.word	0x2000194c
 80176f4:	20000ef8 	.word	0x20000ef8
 80176f8:	200013a8 	.word	0x200013a8
 80176fc:	20001a50 	.word	0x20001a50
 8017700:	20001844 	.word	0x20001844
 8017704:	200011c0 	.word	0x200011c0
 8017708:	20001848 	.word	0x20001848
 801770c:	200014a0 	.word	0x200014a0
 8017710:	20001bd8 	.word	0x20001bd8

08017714 <protocol_buffer_synchronize>:
{
 8017714:	b510      	push	{r4, lr}
    protocol_auto_cycle_start();
 8017716:	f7ff f9f9 	bl	8016b0c <protocol_auto_cycle_start>
    sys.flags.synchronizing = On;
 801771a:	4a0c      	ldr	r2, [pc, #48]	@ (801774c <protocol_buffer_synchronize+0x38>)
 801771c:	7dd3      	ldrb	r3, [r2, #23]
 801771e:	f043 0304 	orr.w	r3, r3, #4
 8017722:	75d3      	strb	r3, [r2, #23]
    while ((ok = protocol_execute_realtime()) && (plan_get_current_block() || state_get() == STATE_CYCLE));
 8017724:	f7ff fd28 	bl	8017178 <protocol_execute_realtime>
 8017728:	4604      	mov	r4, r0
 801772a:	b138      	cbz	r0, 801773c <protocol_buffer_synchronize+0x28>
 801772c:	f7fe fd58 	bl	80161e0 <plan_get_current_block>
 8017730:	2800      	cmp	r0, #0
 8017732:	d1f7      	bne.n	8017724 <protocol_buffer_synchronize+0x10>
 8017734:	f007 f888 	bl	801e848 <state_get>
 8017738:	2808      	cmp	r0, #8
 801773a:	d0f3      	beq.n	8017724 <protocol_buffer_synchronize+0x10>
    sys.flags.synchronizing = Off;
 801773c:	4b03      	ldr	r3, [pc, #12]	@ (801774c <protocol_buffer_synchronize+0x38>)
 801773e:	7dda      	ldrb	r2, [r3, #23]
 8017740:	f36f 0282 	bfc	r2, #2, #1
 8017744:	75da      	strb	r2, [r3, #23]
}
 8017746:	4620      	mov	r0, r4
 8017748:	bd10      	pop	{r4, pc}
 801774a:	bf00      	nop
 801774c:	200014a0 	.word	0x200014a0

08017750 <protocol_enqueue_foreground_task>:
{
 8017750:	b538      	push	{r3, r4, r5, lr}
    uint_fast8_t bptr = (realtime_queue.head + 1) & (RT_QUEUE_SIZE - 1);    // Get next head pointer
 8017752:	4a0f      	ldr	r2, [pc, #60]	@ (8017790 <protocol_enqueue_foreground_task+0x40>)
 8017754:	6813      	ldr	r3, [r2, #0]
 8017756:	3301      	adds	r3, #1
 8017758:	f003 030f 	and.w	r3, r3, #15
    if((ok = bptr != realtime_queue.tail)) {                    // If not buffer full
 801775c:	6852      	ldr	r2, [r2, #4]
 801775e:	429a      	cmp	r2, r3
 8017760:	bf14      	ite	ne
 8017762:	2401      	movne	r4, #1
 8017764:	2400      	moveq	r4, #0
 8017766:	d011      	beq.n	801778c <protocol_enqueue_foreground_task+0x3c>
        realtime_queue.task[realtime_queue.head].data = data;
 8017768:	4a09      	ldr	r2, [pc, #36]	@ (8017790 <protocol_enqueue_foreground_task+0x40>)
 801776a:	6815      	ldr	r5, [r2, #0]
 801776c:	f105 0c01 	add.w	ip, r5, #1
 8017770:	f842 103c 	str.w	r1, [r2, ip, lsl #3]
        realtime_queue.task[realtime_queue.head].task = fn;       // add function pointer to buffer,
 8017774:	6811      	ldr	r1, [r2, #0]
 8017776:	3101      	adds	r1, #1
 8017778:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801777c:	6048      	str	r0, [r1, #4]
        realtime_queue.head = bptr;                             // update pointer and
 801777e:	6013      	str	r3, [r2, #0]
        system_set_exec_state_flag(EXEC_RT_COMMAND);            // flag it for execute
 8017780:	4b04      	ldr	r3, [pc, #16]	@ (8017794 <protocol_enqueue_foreground_task+0x44>)
 8017782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017784:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017788:	4803      	ldr	r0, [pc, #12]	@ (8017798 <protocol_enqueue_foreground_task+0x48>)
 801778a:	4798      	blx	r3
}
 801778c:	4620      	mov	r0, r4
 801778e:	bd38      	pop	{r3, r4, r5, pc}
 8017790:	200017bc 	.word	0x200017bc
 8017794:	200011c0 	.word	0x200011c0
 8017798:	200014e8 	.word	0x200014e8

0801779c <protocol_enqueue_realtime_command>:
{
 801779c:	b538      	push	{r3, r4, r5, lr}
 801779e:	4604      	mov	r4, r0
    switch ((unsigned char)c) {
 80177a0:	1ec3      	subs	r3, r0, #3
 80177a2:	2ba1      	cmp	r3, #161	@ 0xa1
 80177a4:	f200 81b0 	bhi.w	8017b08 <protocol_enqueue_realtime_command+0x36c>
 80177a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80177ac:	01ae00cc 	.word	0x01ae00cc
 80177b0:	01ae00ef 	.word	0x01ae00ef
 80177b4:	01ae01ae 	.word	0x01ae01ae
 80177b8:	01c401ae 	.word	0x01c401ae
 80177bc:	01ae01ae 	.word	0x01ae01ae
 80177c0:	01ae01c4 	.word	0x01ae01c4
 80177c4:	01ae01ae 	.word	0x01ae01ae
 80177c8:	01ae01ae 	.word	0x01ae01ae
 80177cc:	01a301ae 	.word	0x01a301ae
 80177d0:	01ae01ae 	.word	0x01ae01ae
 80177d4:	00c001ae 	.word	0x00c001ae
 80177d8:	01ae00b3 	.word	0x01ae00b3
 80177dc:	01ae01ae 	.word	0x01ae01ae
 80177e0:	01ae01ae 	.word	0x01ae01ae
 80177e4:	01ae01ae 	.word	0x01ae01ae
 80177e8:	01ae01ae 	.word	0x01ae01ae
 80177ec:	00a201ae 	.word	0x00a201ae
 80177f0:	01ae01ae 	.word	0x01ae01ae
 80177f4:	01ae01ae 	.word	0x01ae01ae
 80177f8:	01ae01ae 	.word	0x01ae01ae
 80177fc:	01ae01ae 	.word	0x01ae01ae
 8017800:	01ae01ae 	.word	0x01ae01ae
 8017804:	01ae01ae 	.word	0x01ae01ae
 8017808:	01ae01ae 	.word	0x01ae01ae
 801780c:	01ae01ae 	.word	0x01ae01ae
 8017810:	01ae01ae 	.word	0x01ae01ae
 8017814:	01ae01ae 	.word	0x01ae01ae
 8017818:	01ae01ae 	.word	0x01ae01ae
 801781c:	01ae01ae 	.word	0x01ae01ae
 8017820:	01ae01ae 	.word	0x01ae01ae
 8017824:	01ae01ae 	.word	0x01ae01ae
 8017828:	01ae01ae 	.word	0x01ae01ae
 801782c:	01ae01ae 	.word	0x01ae01ae
 8017830:	01ae01ae 	.word	0x01ae01ae
 8017834:	01ae01ae 	.word	0x01ae01ae
 8017838:	01ae01ae 	.word	0x01ae01ae
 801783c:	01ae01ae 	.word	0x01ae01ae
 8017840:	01ae01ae 	.word	0x01ae01ae
 8017844:	01ae01ae 	.word	0x01ae01ae
 8017848:	01ae01ae 	.word	0x01ae01ae
 801784c:	01ae01ae 	.word	0x01ae01ae
 8017850:	01ae01ae 	.word	0x01ae01ae
 8017854:	01ae01ae 	.word	0x01ae01ae
 8017858:	01ae01ae 	.word	0x01ae01ae
 801785c:	01ae01ae 	.word	0x01ae01ae
 8017860:	01ae01ae 	.word	0x01ae01ae
 8017864:	01ae01ae 	.word	0x01ae01ae
 8017868:	01ae01ae 	.word	0x01ae01ae
 801786c:	01ae01ae 	.word	0x01ae01ae
 8017870:	01ae01ae 	.word	0x01ae01ae
 8017874:	01ae01ae 	.word	0x01ae01ae
 8017878:	01ae01ae 	.word	0x01ae01ae
 801787c:	01ae01ae 	.word	0x01ae01ae
 8017880:	01ae01ae 	.word	0x01ae01ae
 8017884:	01ae01ae 	.word	0x01ae01ae
 8017888:	01ae01ae 	.word	0x01ae01ae
 801788c:	01ae01ae 	.word	0x01ae01ae
 8017890:	01ae01ae 	.word	0x01ae01ae
 8017894:	01ae01ae 	.word	0x01ae01ae
 8017898:	01ae01ae 	.word	0x01ae01ae
 801789c:	01ae01ae 	.word	0x01ae01ae
 80178a0:	01ae01ae 	.word	0x01ae01ae
 80178a4:	00ef01ae 	.word	0x00ef01ae
 80178a8:	010700fc 	.word	0x010700fc
 80178ac:	010e012c 	.word	0x010e012c
 80178b0:	01ae011a 	.word	0x01ae011a
 80178b4:	013d00d5 	.word	0x013d00d5
 80178b8:	019f014e 	.word	0x019f014e
 80178bc:	01870166 	.word	0x01870166
 80178c0:	01ae01ae 	.word	0x01ae01ae
 80178c4:	019701ae 	.word	0x019701ae
 80178c8:	01970197 	.word	0x01970197
 80178cc:	01970197 	.word	0x01970197
 80178d0:	01970197 	.word	0x01970197
 80178d4:	01ae0197 	.word	0x01ae0197
 80178d8:	019b019b 	.word	0x019b019b
 80178dc:	019b019b 	.word	0x019b019b
 80178e0:	019b019b 	.word	0x019b019b
 80178e4:	019f01ae 	.word	0x019f01ae
 80178e8:	015e019f 	.word	0x015e019f
 80178ec:	013401ae 	.word	0x013401ae
            if(char_counter == 0)
 80178f0:	4ba3      	ldr	r3, [pc, #652]	@ (8017b80 <protocol_enqueue_realtime_command+0x3e4>)
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	f040 811f 	bne.w	8017b38 <protocol_enqueue_realtime_command+0x39c>
                keep_rt_commands = !settings.flags.legacy_rt_commands;
 80178fa:	4ba2      	ldr	r3, [pc, #648]	@ (8017b84 <protocol_enqueue_realtime_command+0x3e8>)
 80178fc:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017900:	099b      	lsrs	r3, r3, #6
 8017902:	f083 0301 	eor.w	r3, r3, #1
 8017906:	f003 0301 	and.w	r3, r3, #1
 801790a:	4a9f      	ldr	r2, [pc, #636]	@ (8017b88 <protocol_enqueue_realtime_command+0x3ec>)
 801790c:	7013      	strb	r3, [r2, #0]
    bool drop = false;
 801790e:	2500      	movs	r5, #0
 8017910:	e0bc      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
            system_set_exec_state_flag(EXEC_STOP);
 8017912:	4d9e      	ldr	r5, [pc, #632]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017914:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8017916:	2110      	movs	r1, #16
 8017918:	489d      	ldr	r0, [pc, #628]	@ (8017b90 <protocol_enqueue_realtime_command+0x3f4>)
 801791a:	4798      	blx	r3
            char_counter = 0;
 801791c:	4b98      	ldr	r3, [pc, #608]	@ (8017b80 <protocol_enqueue_realtime_command+0x3e4>)
 801791e:	2200      	movs	r2, #0
 8017920:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 8017922:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
 8017926:	4798      	blx	r3
            drop = true;
 8017928:	2501      	movs	r5, #1
 801792a:	e120      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            if(!hal.control.get_state().e_stop)
 801792c:	4b97      	ldr	r3, [pc, #604]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 801792e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017930:	4798      	blx	r3
 8017932:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8017936:	d001      	beq.n	801793c <protocol_enqueue_realtime_command+0x1a0>
            drop = true;
 8017938:	2501      	movs	r5, #1
 801793a:	e118      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
                mc_reset();
 801793c:	f7fc fe50 	bl	80145e0 <mc_reset>
            drop = true;
 8017940:	2501      	movs	r5, #1
 8017942:	e114      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            mc_reset();
 8017944:	f7fc fe4c 	bl	80145e0 <mc_reset>
            sys.flags.exit = On;
 8017948:	4a92      	ldr	r2, [pc, #584]	@ (8017b94 <protocol_enqueue_realtime_command+0x3f8>)
 801794a:	7d93      	ldrb	r3, [r2, #22]
 801794c:	f043 0308 	orr.w	r3, r3, #8
 8017950:	7593      	strb	r3, [r2, #22]
            drop = true;
 8017952:	2501      	movs	r5, #1
 8017954:	e10b      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
                report.value = (uint32_t)Report_All;
 8017956:	4890      	ldr	r0, [pc, #576]	@ (8017b98 <protocol_enqueue_realtime_command+0x3fc>)
                report.tool_offset = sys.report.tool_offset;
 8017958:	4d8e      	ldr	r5, [pc, #568]	@ (8017b94 <protocol_enqueue_realtime_command+0x3f8>)
 801795a:	f895 3031 	ldrb.w	r3, [r5, #49]	@ 0x31
 801795e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017962:	f363 208a 	bfi	r0, r3, #10, #1
                report.m66result = sys.var5399 > -2;
 8017966:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8017968:	f1b3 3fff 	cmp.w	r3, #4294967295
 801796c:	bfb4      	ite	lt
 801796e:	2300      	movlt	r3, #0
 8017970:	2301      	movge	r3, #1
 8017972:	f363 20cb 	bfi	r0, r3, #11, #1
                system_add_rt_report((report_tracking_t)report.value);
 8017976:	f009 ff25 	bl	80217c4 <system_add_rt_report>
            system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801797a:	4b84      	ldr	r3, [pc, #528]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 801797c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801797e:	2101      	movs	r1, #1
 8017980:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8017984:	4798      	blx	r3
            drop = true;
 8017986:	2501      	movs	r5, #1
 8017988:	e0f1      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            if(!sys.flags.auto_reporting)
 801798a:	4b82      	ldr	r3, [pc, #520]	@ (8017b94 <protocol_enqueue_realtime_command+0x3f8>)
 801798c:	7ddb      	ldrb	r3, [r3, #23]
 801798e:	f013 0f02 	tst.w	r3, #2
 8017992:	f040 8133 	bne.w	8017bfc <protocol_enqueue_realtime_command+0x460>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8017996:	4b7d      	ldr	r3, [pc, #500]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801799a:	2101      	movs	r1, #1
 801799c:	487c      	ldr	r0, [pc, #496]	@ (8017b90 <protocol_enqueue_realtime_command+0x3f4>)
 801799e:	4798      	blx	r3
            drop = true;
 80179a0:	2501      	movs	r5, #1
 80179a2:	e0e4      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_CYCLE_START);
 80179a4:	4b79      	ldr	r3, [pc, #484]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 80179a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80179a8:	2102      	movs	r1, #2
 80179aa:	4879      	ldr	r0, [pc, #484]	@ (8017b90 <protocol_enqueue_realtime_command+0x3f4>)
 80179ac:	4798      	blx	r3
            gc_state.tool_change = false;
 80179ae:	4b7b      	ldr	r3, [pc, #492]	@ (8017b9c <protocol_enqueue_realtime_command+0x400>)
 80179b0:	2200      	movs	r2, #0
 80179b2:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
            drop = true;
 80179b6:	2501      	movs	r5, #1
 80179b8:	e0d9      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 80179ba:	4b74      	ldr	r3, [pc, #464]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 80179bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80179be:	2108      	movs	r1, #8
 80179c0:	4873      	ldr	r0, [pc, #460]	@ (8017b90 <protocol_enqueue_realtime_command+0x3f4>)
 80179c2:	4798      	blx	r3
            drop = true;
 80179c4:	2501      	movs	r5, #1
 80179c6:	e0d2      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            if(state_get() != STATE_SAFETY_DOOR) {
 80179c8:	f006 ff3e 	bl	801e848 <state_get>
 80179cc:	2840      	cmp	r0, #64	@ 0x40
 80179ce:	f000 80b5 	beq.w	8017b3c <protocol_enqueue_realtime_command+0x3a0>
                system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 80179d2:	4b6e      	ldr	r3, [pc, #440]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 80179d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80179d6:	2140      	movs	r1, #64	@ 0x40
 80179d8:	486d      	ldr	r0, [pc, #436]	@ (8017b90 <protocol_enqueue_realtime_command+0x3f4>)
 80179da:	4798      	blx	r3
                drop = true;
 80179dc:	2501      	movs	r5, #1
 80179de:	e0c6      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            char_counter = 0;
 80179e0:	4b67      	ldr	r3, [pc, #412]	@ (8017b80 <protocol_enqueue_realtime_command+0x3e4>)
 80179e2:	2200      	movs	r2, #0
 80179e4:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 80179e6:	4b69      	ldr	r3, [pc, #420]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 80179e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80179ec:	4798      	blx	r3
            if(grbl.on_jog_cancel)
 80179ee:	4b6c      	ldr	r3, [pc, #432]	@ (8017ba0 <protocol_enqueue_realtime_command+0x404>)
 80179f0:	f8d3 50c0 	ldr.w	r5, [r3, #192]	@ 0xc0
 80179f4:	2d00      	cmp	r5, #0
 80179f6:	f000 8103 	beq.w	8017c00 <protocol_enqueue_realtime_command+0x464>
                grbl.on_jog_cancel(state_get());
 80179fa:	f006 ff25 	bl	801e848 <state_get>
 80179fe:	47a8      	blx	r5
            drop = true;
 8017a00:	2501      	movs	r5, #1
 8017a02:	e0b4      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 8017a04:	4b61      	ldr	r3, [pc, #388]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017a0c:	4860      	ldr	r0, [pc, #384]	@ (8017b90 <protocol_enqueue_realtime_command+0x3f4>)
 8017a0e:	4798      	blx	r3
            drop = true;
 8017a10:	2501      	movs	r5, #1
 8017a12:	e0ac      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            if(hal.probe.connected_toggle)
 8017a14:	4b5d      	ldr	r3, [pc, #372]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017a16:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	f000 8090 	beq.w	8017b40 <protocol_enqueue_realtime_command+0x3a4>
                hal.probe.connected_toggle();
 8017a20:	4798      	blx	r3
    bool drop = false;
 8017a22:	2500      	movs	r5, #0
 8017a24:	e032      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
            if(!hal.signals_cap.stop_disable) // Not available as realtime command if HAL supports physical switch
 8017a26:	4b59      	ldr	r3, [pc, #356]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017a28:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8017a2c:	f013 0f20 	tst.w	r3, #32
 8017a30:	f040 8088 	bne.w	8017b44 <protocol_enqueue_realtime_command+0x3a8>
                sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 8017a34:	4957      	ldr	r1, [pc, #348]	@ (8017b94 <protocol_enqueue_realtime_command+0x3f8>)
 8017a36:	7d8b      	ldrb	r3, [r1, #22]
 8017a38:	099a      	lsrs	r2, r3, #6
 8017a3a:	f082 0201 	eor.w	r2, r2, #1
 8017a3e:	f362 1386 	bfi	r3, r2, #6, #1
 8017a42:	758b      	strb	r3, [r1, #22]
    bool drop = false;
 8017a44:	2500      	movs	r5, #0
 8017a46:	e021      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
            if(!hal.signals_cap.single_block) // Not available as realtime command if HAL supports physical switch
 8017a48:	4b50      	ldr	r3, [pc, #320]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017a4a:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 8017a4e:	f013 0f08 	tst.w	r3, #8
 8017a52:	d179      	bne.n	8017b48 <protocol_enqueue_realtime_command+0x3ac>
                sys.flags.single_block = !sys.flags.single_block;
 8017a54:	494f      	ldr	r1, [pc, #316]	@ (8017b94 <protocol_enqueue_realtime_command+0x3f8>)
 8017a56:	7d8b      	ldrb	r3, [r1, #22]
 8017a58:	43da      	mvns	r2, r3
 8017a5a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8017a5e:	f362 13c7 	bfi	r3, r2, #7, #1
 8017a62:	758b      	strb	r3, [r1, #22]
    bool drop = false;
 8017a64:	2500      	movs	r5, #0
 8017a66:	e011      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
            system_set_exec_state_flag(EXEC_PID_REPORT);
 8017a68:	4b48      	ldr	r3, [pc, #288]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8017a70:	4847      	ldr	r0, [pc, #284]	@ (8017b90 <protocol_enqueue_realtime_command+0x3f4>)
 8017a72:	4798      	blx	r3
            drop = true;
 8017a74:	2501      	movs	r5, #1
 8017a76:	e07a      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            if((drop = hal.stream.type == StreamType_MPG))
 8017a78:	4b44      	ldr	r3, [pc, #272]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017a7a:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8017a7e:	2b01      	cmp	r3, #1
 8017a80:	bf0c      	ite	eq
 8017a82:	2501      	moveq	r5, #1
 8017a84:	2500      	movne	r5, #0
 8017a86:	d013      	beq.n	8017ab0 <protocol_enqueue_realtime_command+0x314>
    if(!drop) switch ((unsigned char)c) {
 8017a88:	2d00      	cmp	r5, #0
 8017a8a:	d170      	bne.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
 8017a8c:	2c3f      	cmp	r4, #63	@ 0x3f
 8017a8e:	d05f      	beq.n	8017b50 <protocol_enqueue_realtime_command+0x3b4>
 8017a90:	2c7e      	cmp	r4, #126	@ 0x7e
 8017a92:	f000 808b 	beq.w	8017bac <protocol_enqueue_realtime_command+0x410>
 8017a96:	2c21      	cmp	r4, #33	@ 0x21
 8017a98:	f000 809c 	beq.w	8017bd4 <protocol_enqueue_realtime_command+0x438>
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 8017a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8017b88 <protocol_enqueue_realtime_command+0x3ec>)
 8017a9e:	781b      	ldrb	r3, [r3, #0]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	f040 80a7 	bne.w	8017bf4 <protocol_enqueue_realtime_command+0x458>
 8017aa6:	2c7e      	cmp	r4, #126	@ 0x7e
 8017aa8:	f200 80a6 	bhi.w	8017bf8 <protocol_enqueue_realtime_command+0x45c>
 8017aac:	2500      	movs	r5, #0
 8017aae:	e05e      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
                protocol_enqueue_foreground_task(stream_mpg_set_mode, NULL);
 8017ab0:	2100      	movs	r1, #0
 8017ab2:	483c      	ldr	r0, [pc, #240]	@ (8017ba4 <protocol_enqueue_realtime_command+0x408>)
 8017ab4:	f7ff fe4c 	bl	8017750 <protocol_enqueue_foreground_task>
 8017ab8:	e7e6      	b.n	8017a88 <protocol_enqueue_realtime_command+0x2ec>
            if((drop = settings.report_interval != 0))
 8017aba:	4b32      	ldr	r3, [pc, #200]	@ (8017b84 <protocol_enqueue_realtime_command+0x3e8>)
 8017abc:	8a9b      	ldrh	r3, [r3, #20]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	bf14      	ite	ne
 8017ac2:	2501      	movne	r5, #1
 8017ac4:	2500      	moveq	r5, #0
 8017ac6:	d0df      	beq.n	8017a88 <protocol_enqueue_realtime_command+0x2ec>
                sys.flags.auto_reporting = !sys.flags.auto_reporting;
 8017ac8:	4932      	ldr	r1, [pc, #200]	@ (8017b94 <protocol_enqueue_realtime_command+0x3f8>)
 8017aca:	7dcb      	ldrb	r3, [r1, #23]
 8017acc:	085a      	lsrs	r2, r3, #1
 8017ace:	f082 0201 	eor.w	r2, r2, #1
 8017ad2:	f362 0341 	bfi	r3, r2, #1, #1
 8017ad6:	75cb      	strb	r3, [r1, #23]
 8017ad8:	e7d6      	b.n	8017a88 <protocol_enqueue_realtime_command+0x2ec>
            enqueue_feed_override(c);
 8017ada:	f7fe f949 	bl	8015d70 <enqueue_feed_override>
            drop = true;
 8017ade:	2501      	movs	r5, #1
 8017ae0:	e045      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            enqueue_spindle_override((uint8_t)c);
 8017ae2:	f7fe f967 	bl	8015db4 <enqueue_spindle_override>
            drop = true;
 8017ae6:	2501      	movs	r5, #1
 8017ae8:	e041      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            enqueue_coolant_override((uint8_t)c);
 8017aea:	f7fe f985 	bl	8015df8 <enqueue_coolant_override>
            drop = true;
 8017aee:	2501      	movs	r5, #1
 8017af0:	e03d      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            if(esc && hal.reboot)
 8017af2:	4b2d      	ldr	r3, [pc, #180]	@ (8017ba8 <protocol_enqueue_realtime_command+0x40c>)
 8017af4:	781d      	ldrb	r5, [r3, #0]
 8017af6:	2d00      	cmp	r5, #0
 8017af8:	d0c8      	beq.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
 8017afa:	4b24      	ldr	r3, [pc, #144]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017afc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8017b00:	b323      	cbz	r3, 8017b4c <protocol_enqueue_realtime_command+0x3b0>
                hal.reboot(); // Force MCU reboot. This call should never return.
 8017b02:	4798      	blx	r3
    bool drop = false;
 8017b04:	2500      	movs	r5, #0
 8017b06:	e7c1      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 8017b08:	281f      	cmp	r0, #31
 8017b0a:	d80d      	bhi.n	8017b28 <protocol_enqueue_realtime_command+0x38c>
 8017b0c:	2808      	cmp	r0, #8
 8017b0e:	d009      	beq.n	8017b24 <protocol_enqueue_realtime_command+0x388>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 8017b10:	4b23      	ldr	r3, [pc, #140]	@ (8017ba0 <protocol_enqueue_realtime_command+0x404>)
 8017b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d074      	beq.n	8017c04 <protocol_enqueue_realtime_command+0x468>
 8017b1a:	4620      	mov	r0, r4
 8017b1c:	4798      	blx	r3
 8017b1e:	4605      	mov	r5, r0
 8017b20:	bb28      	cbnz	r0, 8017b6e <protocol_enqueue_realtime_command+0x3d2>
 8017b22:	e7b3      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
    bool drop = false;
 8017b24:	2500      	movs	r5, #0
 8017b26:	e7af      	b.n	8017a88 <protocol_enqueue_realtime_command+0x2ec>
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 8017b28:	f080 0380 	eor.w	r3, r0, #128	@ 0x80
 8017b2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8017b2e:	d9ef      	bls.n	8017b10 <protocol_enqueue_realtime_command+0x374>
    bool drop = false;
 8017b30:	2500      	movs	r5, #0
 8017b32:	e7ab      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
    switch ((unsigned char)c) {
 8017b34:	2500      	movs	r5, #0
 8017b36:	e7a9      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
    bool drop = false;
 8017b38:	2500      	movs	r5, #0
 8017b3a:	e7a7      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
 8017b3c:	2500      	movs	r5, #0
 8017b3e:	e7a5      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
 8017b40:	2500      	movs	r5, #0
 8017b42:	e7a3      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
 8017b44:	2500      	movs	r5, #0
 8017b46:	e7a1      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
 8017b48:	2500      	movs	r5, #0
 8017b4a:	e79f      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
 8017b4c:	2500      	movs	r5, #0
 8017b4e:	e79d      	b.n	8017a8c <protocol_enqueue_realtime_command+0x2f0>
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8017b50:	4b0d      	ldr	r3, [pc, #52]	@ (8017b88 <protocol_enqueue_realtime_command+0x3ec>)
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	b12b      	cbz	r3, 8017b62 <protocol_enqueue_realtime_command+0x3c6>
 8017b56:	4b0b      	ldr	r3, [pc, #44]	@ (8017b84 <protocol_enqueue_realtime_command+0x3e8>)
 8017b58:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017b5c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8017b60:	d005      	beq.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8017b62:	4b0a      	ldr	r3, [pc, #40]	@ (8017b8c <protocol_enqueue_realtime_command+0x3f0>)
 8017b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017b66:	2101      	movs	r1, #1
 8017b68:	4809      	ldr	r0, [pc, #36]	@ (8017b90 <protocol_enqueue_realtime_command+0x3f4>)
 8017b6a:	4798      	blx	r3
                drop = true;
 8017b6c:	2501      	movs	r5, #1
    esc = c == ASCII_ESC;
 8017b6e:	2c1b      	cmp	r4, #27
 8017b70:	bf14      	ite	ne
 8017b72:	2400      	movne	r4, #0
 8017b74:	2401      	moveq	r4, #1
 8017b76:	4b0c      	ldr	r3, [pc, #48]	@ (8017ba8 <protocol_enqueue_realtime_command+0x40c>)
 8017b78:	701c      	strb	r4, [r3, #0]
}
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	bd38      	pop	{r3, r4, r5, pc}
 8017b7e:	bf00      	nop
 8017b80:	20001a50 	.word	0x20001a50
 8017b84:	20001bd8 	.word	0x20001bd8
 8017b88:	20001844 	.word	0x20001844
 8017b8c:	200011c0 	.word	0x200011c0
 8017b90:	200014e8 	.word	0x200014e8
 8017b94:	200014a0 	.word	0x200014a0
 8017b98:	8003ffff 	.word	0x8003ffff
 8017b9c:	20000ef8 	.word	0x20000ef8
 8017ba0:	200013a8 	.word	0x200013a8
 8017ba4:	080208c1 	.word	0x080208c1
 8017ba8:	200017b4 	.word	0x200017b4
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8017bac:	4b16      	ldr	r3, [pc, #88]	@ (8017c08 <protocol_enqueue_realtime_command+0x46c>)
 8017bae:	781b      	ldrb	r3, [r3, #0]
 8017bb0:	b12b      	cbz	r3, 8017bbe <protocol_enqueue_realtime_command+0x422>
 8017bb2:	4b16      	ldr	r3, [pc, #88]	@ (8017c0c <protocol_enqueue_realtime_command+0x470>)
 8017bb4:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017bb8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8017bbc:	d0d7      	beq.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 8017bbe:	4b14      	ldr	r3, [pc, #80]	@ (8017c10 <protocol_enqueue_realtime_command+0x474>)
 8017bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bc2:	2102      	movs	r1, #2
 8017bc4:	4813      	ldr	r0, [pc, #76]	@ (8017c14 <protocol_enqueue_realtime_command+0x478>)
 8017bc6:	4798      	blx	r3
                gc_state.tool_change = false;
 8017bc8:	4b13      	ldr	r3, [pc, #76]	@ (8017c18 <protocol_enqueue_realtime_command+0x47c>)
 8017bca:	2200      	movs	r2, #0
 8017bcc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
                drop = true;
 8017bd0:	2501      	movs	r5, #1
 8017bd2:	e7cc      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8017bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8017c08 <protocol_enqueue_realtime_command+0x46c>)
 8017bd6:	781b      	ldrb	r3, [r3, #0]
 8017bd8:	b12b      	cbz	r3, 8017be6 <protocol_enqueue_realtime_command+0x44a>
 8017bda:	4b0c      	ldr	r3, [pc, #48]	@ (8017c0c <protocol_enqueue_realtime_command+0x470>)
 8017bdc:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8017be0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8017be4:	d0c3      	beq.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 8017be6:	4b0a      	ldr	r3, [pc, #40]	@ (8017c10 <protocol_enqueue_realtime_command+0x474>)
 8017be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bea:	2108      	movs	r1, #8
 8017bec:	4809      	ldr	r0, [pc, #36]	@ (8017c14 <protocol_enqueue_realtime_command+0x478>)
 8017bee:	4798      	blx	r3
                drop = true;
 8017bf0:	2501      	movs	r5, #1
 8017bf2:	e7bc      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 8017bf4:	2500      	movs	r5, #0
 8017bf6:	e7ba      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
 8017bf8:	2501      	movs	r5, #1
            break;
 8017bfa:	e7b8      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            drop = true;
 8017bfc:	2501      	movs	r5, #1
 8017bfe:	e7b6      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
            drop = true;
 8017c00:	2501      	movs	r5, #1
 8017c02:	e7b4      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 8017c04:	2501      	movs	r5, #1
 8017c06:	e7b2      	b.n	8017b6e <protocol_enqueue_realtime_command+0x3d2>
 8017c08:	20001844 	.word	0x20001844
 8017c0c:	20001bd8 	.word	0x20001bd8
 8017c10:	200011c0 	.word	0x200011c0
 8017c14:	200014e8 	.word	0x200014e8
 8017c18:	20000ef8 	.word	0x20000ef8

08017c1c <matchstar>:
    return 0;
}

/* matchstar: search for c*regexp at beginning of text */
int matchstar(int c, char *regexp, char *text)
{
 8017c1c:	b570      	push	{r4, r5, r6, lr}
 8017c1e:	4605      	mov	r5, r0
 8017c20:	460e      	mov	r6, r1
 8017c22:	4614      	mov	r4, r2
    do {    /* a * matches zero or more instances */
        if (matchhere(regexp, text))
 8017c24:	4621      	mov	r1, r4
 8017c26:	4630      	mov	r0, r6
 8017c28:	f000 f80d 	bl	8017c46 <matchhere>
 8017c2c:	4602      	mov	r2, r0
 8017c2e:	b938      	cbnz	r0, 8017c40 <matchstar+0x24>
            return 1;
    } while (*text != '\0' && (*text++ == c || c == '.'));
 8017c30:	7823      	ldrb	r3, [r4, #0]
 8017c32:	b133      	cbz	r3, 8017c42 <matchstar+0x26>
 8017c34:	3401      	adds	r4, #1
 8017c36:	42ab      	cmp	r3, r5
 8017c38:	d0f4      	beq.n	8017c24 <matchstar+0x8>
 8017c3a:	2d2e      	cmp	r5, #46	@ 0x2e
 8017c3c:	d0f2      	beq.n	8017c24 <matchstar+0x8>
 8017c3e:	e000      	b.n	8017c42 <matchstar+0x26>
            return 1;
 8017c40:	2201      	movs	r2, #1
    return 0;
}
 8017c42:	4610      	mov	r0, r2
 8017c44:	bd70      	pop	{r4, r5, r6, pc}

08017c46 <matchhere>:
{
 8017c46:	b508      	push	{r3, lr}
    if (regexp[0] == '\0')
 8017c48:	7803      	ldrb	r3, [r0, #0]
 8017c4a:	b1f3      	cbz	r3, 8017c8a <matchhere+0x44>
    if (regexp[1] == '*')
 8017c4c:	7842      	ldrb	r2, [r0, #1]
 8017c4e:	2a2a      	cmp	r2, #42	@ 0x2a
 8017c50:	d009      	beq.n	8017c66 <matchhere+0x20>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8017c52:	2b24      	cmp	r3, #36	@ 0x24
 8017c54:	d00d      	beq.n	8017c72 <matchhere+0x2c>
    if (*text!='\0' && (regexp[0]=='.' || regexp[0]==*text))
 8017c56:	780a      	ldrb	r2, [r1, #0]
 8017c58:	b1ca      	cbz	r2, 8017c8e <matchhere+0x48>
 8017c5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c5c:	d010      	beq.n	8017c80 <matchhere+0x3a>
 8017c5e:	4293      	cmp	r3, r2
 8017c60:	d00e      	beq.n	8017c80 <matchhere+0x3a>
    return 0;
 8017c62:	2000      	movs	r0, #0
 8017c64:	e012      	b.n	8017c8c <matchhere+0x46>
        return matchstar(regexp[0], regexp+2, text);
 8017c66:	460a      	mov	r2, r1
 8017c68:	1c81      	adds	r1, r0, #2
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f7ff ffd6 	bl	8017c1c <matchstar>
 8017c70:	e00c      	b.n	8017c8c <matchhere+0x46>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8017c72:	2a00      	cmp	r2, #0
 8017c74:	d1ef      	bne.n	8017c56 <matchhere+0x10>
        return *text == '\0';
 8017c76:	7808      	ldrb	r0, [r1, #0]
 8017c78:	fab0 f080 	clz	r0, r0
 8017c7c:	0940      	lsrs	r0, r0, #5
 8017c7e:	e005      	b.n	8017c8c <matchhere+0x46>
        return matchhere(regexp+1, text+1);
 8017c80:	3101      	adds	r1, #1
 8017c82:	3001      	adds	r0, #1
 8017c84:	f7ff ffdf 	bl	8017c46 <matchhere>
 8017c88:	e000      	b.n	8017c8c <matchhere+0x46>
        return 1;
 8017c8a:	2001      	movs	r0, #1
}
 8017c8c:	bd08      	pop	{r3, pc}
    return 0;
 8017c8e:	2000      	movs	r0, #0
 8017c90:	e7fc      	b.n	8017c8c <matchhere+0x46>
	...

08017c94 <axis_signals_tostring>:
// NOTE: returns pointer to null terminator!
inline static char *axis_signals_tostring (char *buf, axes_signals_t signals)
{
    uint_fast16_t idx = 0;

    signals.mask &= AXES_BITMASK;
 8017c94:	f001 0107 	and.w	r1, r1, #7
    uint_fast16_t idx = 0;
 8017c98:	2300      	movs	r3, #0

    while(signals.mask) {
 8017c9a:	e002      	b.n	8017ca2 <axis_signals_tostring+0xe>
        if(signals.mask & 0x01)
            *buf++ = *axis_letter[idx];
        idx++;
 8017c9c:	3301      	adds	r3, #1
        signals.mask >>= 1;
 8017c9e:	f3c1 0147 	ubfx	r1, r1, #1, #8
    while(signals.mask) {
 8017ca2:	b2c9      	uxtb	r1, r1
 8017ca4:	b149      	cbz	r1, 8017cba <axis_signals_tostring+0x26>
        if(signals.mask & 0x01)
 8017ca6:	f011 0f01 	tst.w	r1, #1
 8017caa:	d0f7      	beq.n	8017c9c <axis_signals_tostring+0x8>
            *buf++ = *axis_letter[idx];
 8017cac:	4a04      	ldr	r2, [pc, #16]	@ (8017cc0 <axis_signals_tostring+0x2c>)
 8017cae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017cb2:	7812      	ldrb	r2, [r2, #0]
 8017cb4:	f800 2b01 	strb.w	r2, [r0], #1
 8017cb8:	e7f0      	b.n	8017c9c <axis_signals_tostring+0x8>
    };

    *buf = '\0';
 8017cba:	2300      	movs	r3, #0
 8017cbc:	7003      	strb	r3, [r0, #0]

    return buf;
}
 8017cbe:	4770      	bx	lr
 8017cc0:	0802b3ec 	.word	0x0802b3ec

08017cc4 <control_signals_tostring>:
{
    static const char signals_map[] = "RHSDLTEOFM Q  P ";

    char *map = (char *)signals_map;

    if(!signals.deasserted)
 8017cc4:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8017cc8:	d12e      	bne.n	8017d28 <control_signals_tostring+0x64>
    char *map = (char *)signals_map;
 8017cca:	4b1a      	ldr	r3, [pc, #104]	@ (8017d34 <control_signals_tostring+0x70>)
 8017ccc:	e01f      	b.n	8017d0e <control_signals_tostring+0x4a>
                    if(hal.signals_cap.safety_door_ajar)
                        *buf++ = *map;
                    break;

                default:
                    *buf++ = *map;
 8017cce:	f800 2b01 	strb.w	r2, [r0], #1
                    break;
            }
        }

        map++;
 8017cd2:	3301      	adds	r3, #1
        signals.mask >>= 1;
 8017cd4:	f3c1 014f 	ubfx	r1, r1, #1, #16
      while(signals.mask) {
 8017cd8:	b289      	uxth	r1, r1
 8017cda:	b181      	cbz	r1, 8017cfe <control_signals_tostring+0x3a>
        if(signals.mask & 0x01) {
 8017cdc:	f011 0f01 	tst.w	r1, #1
 8017ce0:	d0f7      	beq.n	8017cd2 <control_signals_tostring+0xe>
            switch(*map) {
 8017ce2:	781a      	ldrb	r2, [r3, #0]
 8017ce4:	2a20      	cmp	r2, #32
 8017ce6:	d0f4      	beq.n	8017cd2 <control_signals_tostring+0xe>
 8017ce8:	2a44      	cmp	r2, #68	@ 0x44
 8017cea:	d1f0      	bne.n	8017cce <control_signals_tostring+0xa>
                    if(hal.signals_cap.safety_door_ajar)
 8017cec:	4c12      	ldr	r4, [pc, #72]	@ (8017d38 <control_signals_tostring+0x74>)
 8017cee:	f894 c1dc 	ldrb.w	ip, [r4, #476]	@ 0x1dc
 8017cf2:	f01c 0f08 	tst.w	ip, #8
 8017cf6:	d0ec      	beq.n	8017cd2 <control_signals_tostring+0xe>
                        *buf++ = *map;
 8017cf8:	f800 2b01 	strb.w	r2, [r0], #1
 8017cfc:	e7e9      	b.n	8017cd2 <control_signals_tostring+0xe>
    }

    *buf = '\0';
 8017cfe:	2300      	movs	r3, #0
 8017d00:	7003      	strb	r3, [r0, #0]

    return buf;
}
 8017d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d06:	4770      	bx	lr
        map++;
 8017d08:	3301      	adds	r3, #1
        signals.mask >>= 1;
 8017d0a:	f3c1 014f 	ubfx	r1, r1, #1, #16
      while(signals.mask) {
 8017d0e:	b289      	uxth	r1, r1
 8017d10:	b151      	cbz	r1, 8017d28 <control_signals_tostring+0x64>
        if(signals.mask & 0x01) {
 8017d12:	f011 0f01 	tst.w	r1, #1
 8017d16:	d0f7      	beq.n	8017d08 <control_signals_tostring+0x44>
            switch(*map) {
 8017d18:	781a      	ldrb	r2, [r3, #0]
 8017d1a:	2a20      	cmp	r2, #32
 8017d1c:	d0f4      	beq.n	8017d08 <control_signals_tostring+0x44>
 8017d1e:	2a44      	cmp	r2, #68	@ 0x44
 8017d20:	d005      	beq.n	8017d2e <control_signals_tostring+0x6a>
                    *buf++ = *map;
 8017d22:	f800 2b01 	strb.w	r2, [r0], #1
                    break;
 8017d26:	e7ef      	b.n	8017d08 <control_signals_tostring+0x44>
    *buf = '\0';
 8017d28:	2300      	movs	r3, #0
 8017d2a:	7003      	strb	r3, [r0, #0]
}
 8017d2c:	4770      	bx	lr
{
 8017d2e:	b410      	push	{r4}
 8017d30:	e7dc      	b.n	8017cec <control_signals_tostring+0x28>
 8017d32:	bf00      	nop
 8017d34:	0802bd80 	.word	0x0802bd80
 8017d38:	200011c0 	.word	0x200011c0

08017d3c <report_init_message>:
    return id;
}

// Welcome message
static void report_init_message (void)
{
 8017d3c:	b508      	push	{r3, lr}
    override_counter = wco_counter = 0;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	4a04      	ldr	r2, [pc, #16]	@ (8017d54 <report_init_message+0x18>)
 8017d42:	7013      	strb	r3, [r2, #0]
 8017d44:	4a04      	ldr	r2, [pc, #16]	@ (8017d58 <report_init_message+0x1c>)
 8017d46:	7013      	strb	r3, [r2, #0]

#if COMPATIBILITY_LEVEL == 0
    hal.stream.write_all(ASCII_EOL "GrblHAL " GRBL_VERSION " ['$' or '$HELP' for help]" ASCII_EOL);
 8017d48:	4b04      	ldr	r3, [pc, #16]	@ (8017d5c <report_init_message+0x20>)
 8017d4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017d4e:	4804      	ldr	r0, [pc, #16]	@ (8017d60 <report_init_message+0x24>)
 8017d50:	4798      	blx	r3
#else
    hal.stream.write_all(ASCII_EOL "Grbl " GRBL_VERSION " ['$' for help]" ASCII_EOL);
#endif
}
 8017d52:	bd08      	pop	{r3, pc}
 8017d54:	20001a99 	.word	0x20001a99
 8017d58:	20001a9a 	.word	0x20001a9a
 8017d5c:	200011c0 	.word	0x200011c0
 8017d60:	0802b4cc 	.word	0x0802b4cc

08017d64 <report_help_message>:

// grblHAL help message
static void report_help_message (void)
{
 8017d64:	b508      	push	{r3, lr}
    hal.stream.write("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H $B ~ ! ? ctrl-x]" ASCII_EOL);
 8017d66:	4b03      	ldr	r3, [pc, #12]	@ (8017d74 <report_help_message+0x10>)
 8017d68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017d6c:	4802      	ldr	r0, [pc, #8]	@ (8017d78 <report_help_message+0x14>)
 8017d6e:	4798      	blx	r3
}
 8017d70:	bd08      	pop	{r3, pc}
 8017d72:	bf00      	nop
 8017d74:	200011c0 	.word	0x200011c0
 8017d78:	0802b4f8 	.word	0x0802b4f8

08017d7c <cmp_settings>:

// grblHAL settings print out.

static int cmp_settings (const void *a, const void *b)
{
  return (*(setting_detail_t **)(a))->id - (*(setting_detail_t **)(b))->id;
 8017d7c:	6803      	ldr	r3, [r0, #0]
 8017d7e:	8818      	ldrh	r0, [r3, #0]
 8017d80:	680b      	ldr	r3, [r1, #0]
 8017d82:	881b      	ldrh	r3, [r3, #0]
}
 8017d84:	1ac0      	subs	r0, r0, r3
 8017d86:	4770      	bx	lr

08017d88 <write_quoted>:
        free(s);
    }
}

static void write_quoted (const char *s, const char *sep)
{
 8017d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d8a:	4606      	mov	r6, r0
 8017d8c:	460c      	mov	r4, r1
    hal.stream.write("\"");
 8017d8e:	4d0a      	ldr	r5, [pc, #40]	@ (8017db8 <write_quoted+0x30>)
 8017d90:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017d94:	4f09      	ldr	r7, [pc, #36]	@ (8017dbc <write_quoted+0x34>)
 8017d96:	4638      	mov	r0, r7
 8017d98:	4798      	blx	r3
    hal.stream.write(s); // TODO: escape double quoutes
 8017d9a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017d9e:	4630      	mov	r0, r6
 8017da0:	4798      	blx	r3
    hal.stream.write("\"");
 8017da2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017da6:	4638      	mov	r0, r7
 8017da8:	4798      	blx	r3
    if(sep)
 8017daa:	b11c      	cbz	r4, 8017db4 <write_quoted+0x2c>
        hal.stream.write(sep);
 8017dac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017db0:	4620      	mov	r0, r4
 8017db2:	4798      	blx	r3
}
 8017db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017db6:	bf00      	nop
 8017db8:	200011c0 	.word	0x200011c0
 8017dbc:	0802b548 	.word	0x0802b548

08017dc0 <cmp_alarms>:

#endif

static int cmp_alarms (const void *a, const void *b)
{
  return (*(alarm_detail_t **)(a))->id - (*(alarm_detail_t **)(b))->id;
 8017dc0:	6803      	ldr	r3, [r0, #0]
 8017dc2:	7818      	ldrb	r0, [r3, #0]
 8017dc4:	680b      	ldr	r3, [r1, #0]
 8017dc6:	781b      	ldrb	r3, [r3, #0]
}
 8017dc8:	1ac0      	subs	r0, r0, r3
 8017dca:	4770      	bx	lr

08017dcc <cmp_errors>:
    return Status_OK;
}

static int cmp_errors (const void *a, const void *b)
{
  return (*(status_detail_t **)(a))->id - (*(status_detail_t **)(b))->id;
 8017dcc:	6803      	ldr	r3, [r0, #0]
 8017dce:	7818      	ldrb	r0, [r3, #0]
 8017dd0:	680b      	ldr	r3, [r1, #0]
 8017dd2:	781b      	ldrb	r3, [r3, #0]
}
 8017dd4:	1ac0      	subs	r0, r0, r3
 8017dd6:	4770      	bx	lr

08017dd8 <cmp_setting_group_id>:
    }
}

static int cmp_setting_group_id (const void *a, const void *b)
{
    return (*(setting_group_detail_t **)(a))->id - (*(setting_group_detail_t **)(b))->id;
 8017dd8:	6803      	ldr	r3, [r0, #0]
 8017dda:	7858      	ldrb	r0, [r3, #1]
 8017ddc:	680b      	ldr	r3, [r1, #0]
 8017dde:	785b      	ldrb	r3, [r3, #1]
}
 8017de0:	1ac0      	subs	r0, r0, r3
 8017de2:	4770      	bx	lr

08017de4 <group_is_dup>:
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
}

static bool group_is_dup (setting_group_detail_t **groups, setting_group_t group)
{
    while(*groups) {
 8017de4:	e000      	b.n	8017de8 <group_is_dup+0x4>
        if((*groups)->id == group)
            return true;
        groups++;
 8017de6:	3004      	adds	r0, #4
    while(*groups) {
 8017de8:	6803      	ldr	r3, [r0, #0]
 8017dea:	b123      	cbz	r3, 8017df6 <group_is_dup+0x12>
        if((*groups)->id == group)
 8017dec:	785b      	ldrb	r3, [r3, #1]
 8017dee:	428b      	cmp	r3, r1
 8017df0:	d1f9      	bne.n	8017de6 <group_is_dup+0x2>
            return true;
 8017df2:	2001      	movs	r0, #1
    }

    return false;
}
 8017df4:	4770      	bx	lr
    return false;
 8017df6:	2000      	movs	r0, #0
 8017df8:	4770      	bx	lr

08017dfa <add_limits>:

    return Status_OK;
}

static char *add_limits (char *buf, limit_signals_t limits)
{
 8017dfa:	b510      	push	{r4, lr}
 8017dfc:	b082      	sub	sp, #8
 8017dfe:	9101      	str	r1, [sp, #4]
    buf = axis_signals_tostring(buf, limits.min);
 8017e00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017e04:	f7ff ff46 	bl	8017c94 <axis_signals_tostring>
    *buf++ = ',';
 8017e08:	242c      	movs	r4, #44	@ 0x2c
 8017e0a:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.max);
 8017e0e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8017e12:	f7ff ff3f 	bl	8017c94 <axis_signals_tostring>
    *buf++ = ',';
 8017e16:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.min2);
 8017e1a:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8017e1e:	f7ff ff39 	bl	8017c94 <axis_signals_tostring>
    *buf++ = ',';
 8017e22:	f800 4b01 	strb.w	r4, [r0], #1
    buf = axis_signals_tostring(buf, limits.max2);
 8017e26:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017e2a:	f7ff ff33 	bl	8017c94 <axis_signals_tostring>

    return buf;
}
 8017e2e:	b002      	add	sp, #8
 8017e30:	bd10      	pop	{r4, pc}

08017e32 <count_pins>:
    return info;
}

static void count_pins (xbar_t *pin, void *data)
{
    ((pin_data_t *)data)->n_pins++;
 8017e32:	684b      	ldr	r3, [r1, #4]
 8017e34:	3301      	adds	r3, #1
 8017e36:	604b      	str	r3, [r1, #4]
}
 8017e38:	4770      	bx	lr

08017e3a <cmp_pins>:
    get_pin_info(pin, &((pin_data_t *)data)->pins[((pin_data_t *)data)->idx++]);
}

static int cmp_pins (const void *a, const void *b)
{
    return ((pin_info_t *)a)->sortkey - ((pin_info_t *)b)->sortkey;
 8017e3a:	6940      	ldr	r0, [r0, #20]
 8017e3c:	694b      	ldr	r3, [r1, #20]
}
 8017e3e:	1ac0      	subs	r0, r0, r3
 8017e40:	4770      	bx	lr
	...

08017e44 <irq_mode>:

#ifndef NO_SETTINGS_DESCRIPTIONS

static char *irq_mode (pin_irq_mode_t mode)
{
    switch(mode) {
 8017e44:	3801      	subs	r0, #1
 8017e46:	281e      	cmp	r0, #30
 8017e48:	d81f      	bhi.n	8017e8a <irq_mode+0x46>
 8017e4a:	e8df f000 	tbb	[pc, r0]
 8017e4e:	2010      	.short	0x2010
 8017e50:	1e1e1412 	.word	0x1e1e1412
 8017e54:	1e1e1816 	.word	0x1e1e1816
 8017e58:	1e1e1e1e 	.word	0x1e1e1e1e
 8017e5c:	1e1e1a1e 	.word	0x1e1e1a1e
 8017e60:	1e1e1e1e 	.word	0x1e1e1e1e
 8017e64:	1e1e1e1e 	.word	0x1e1e1e1e
 8017e68:	1e1e1e1e 	.word	0x1e1e1e1e
 8017e6c:	1c          	.byte	0x1c
 8017e6d:	00          	.byte	0x00
 8017e6e:	4809      	ldr	r0, [pc, #36]	@ (8017e94 <irq_mode+0x50>)
 8017e70:	4770      	bx	lr
        case IRQ_Mode_Rising:
            return "R";
        case IRQ_Mode_Falling:
            return "F";
        case IRQ_Mode_RisingFalling:
            return "T";
 8017e72:	4809      	ldr	r0, [pc, #36]	@ (8017e98 <irq_mode+0x54>)
 8017e74:	4770      	bx	lr
        case IRQ_Mode_Change:
            return "C";
 8017e76:	4809      	ldr	r0, [pc, #36]	@ (8017e9c <irq_mode+0x58>)
 8017e78:	4770      	bx	lr
        case IRQ_Mode_Edges:
            return "E";
 8017e7a:	4809      	ldr	r0, [pc, #36]	@ (8017ea0 <irq_mode+0x5c>)
 8017e7c:	4770      	bx	lr
        case IRQ_Mode_High:
            return "H";
 8017e7e:	4809      	ldr	r0, [pc, #36]	@ (8017ea4 <irq_mode+0x60>)
 8017e80:	4770      	bx	lr
        case IRQ_Mode_Low:
            return "L";
 8017e82:	4809      	ldr	r0, [pc, #36]	@ (8017ea8 <irq_mode+0x64>)
 8017e84:	4770      	bx	lr
        case IRQ_Mode_All:
            return "A";
 8017e86:	4809      	ldr	r0, [pc, #36]	@ (8017eac <irq_mode+0x68>)
 8017e88:	4770      	bx	lr
        default:
            break;
    }

    return "-";
 8017e8a:	4809      	ldr	r0, [pc, #36]	@ (8017eb0 <irq_mode+0x6c>)
 8017e8c:	4770      	bx	lr
            return "F";
 8017e8e:	4809      	ldr	r0, [pc, #36]	@ (8017eb4 <irq_mode+0x70>)
}
 8017e90:	4770      	bx	lr
 8017e92:	bf00      	nop
 8017e94:	0802978c 	.word	0x0802978c
 8017e98:	0802b550 	.word	0x0802b550
 8017e9c:	0802b554 	.word	0x0802b554
 8017ea0:	0802b558 	.word	0x0802b558
 8017ea4:	0802b970 	.word	0x0802b970
 8017ea8:	0802b55c 	.word	0x0802b55c
 8017eac:	08029858 	.word	0x08029858
 8017eb0:	0802b560 	.word	0x0802b560
 8017eb4:	0802b54c 	.word	0x0802b54c

08017eb8 <pull_mode>:

static char *pull_mode (pull_mode_t mode)
{
    switch(mode) {
 8017eb8:	2802      	cmp	r0, #2
 8017eba:	d007      	beq.n	8017ecc <pull_mode+0x14>
 8017ebc:	2803      	cmp	r0, #3
 8017ebe:	d007      	beq.n	8017ed0 <pull_mode+0x18>
 8017ec0:	2801      	cmp	r0, #1
 8017ec2:	d001      	beq.n	8017ec8 <pull_mode+0x10>
            return "B";
        default:
            break;
    }

    return "-";
 8017ec4:	4803      	ldr	r0, [pc, #12]	@ (8017ed4 <pull_mode+0x1c>)
}
 8017ec6:	4770      	bx	lr
    switch(mode) {
 8017ec8:	4803      	ldr	r0, [pc, #12]	@ (8017ed8 <pull_mode+0x20>)
 8017eca:	4770      	bx	lr
            return "D";
 8017ecc:	4803      	ldr	r0, [pc, #12]	@ (8017edc <pull_mode+0x24>)
 8017ece:	4770      	bx	lr
            return "B";
 8017ed0:	4803      	ldr	r0, [pc, #12]	@ (8017ee0 <pull_mode+0x28>)
 8017ed2:	4770      	bx	lr
 8017ed4:	0802b560 	.word	0x0802b560
 8017ed8:	0802b564 	.word	0x0802b564
 8017edc:	0802b568 	.word	0x0802b568
 8017ee0:	0802979c 	.word	0x0802979c

08017ee4 <get_rate_value_mm>:
{
 8017ee4:	b508      	push	{r3, lr}
    return uitoa((uint32_t)value);
 8017ee6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8017eea:	ee17 0a90 	vmov	r0, s15
 8017eee:	f7fd f9e7 	bl	80152c0 <uitoa>
}
 8017ef2:	bd08      	pop	{r3, pc}

08017ef4 <get_rate_value_inch>:
{
 8017ef4:	b508      	push	{r3, lr}
    return uitoa((uint32_t)(value * INCH_PER_MM));
 8017ef6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8017f0c <get_rate_value_inch+0x18>
 8017efa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017efe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8017f02:	ee17 0a90 	vmov	r0, s15
 8017f06:	f7fd f9db 	bl	80152c0 <uitoa>
}
 8017f0a:	bd08      	pop	{r3, pc}
 8017f0c:	3d21428b 	.word	0x3d21428b

08017f10 <print_setting>:
{
 8017f10:	b570      	push	{r4, r5, r6, lr}
 8017f12:	4604      	mov	r4, r0
    if(setting->value != NULL)
 8017f14:	6a03      	ldr	r3, [r0, #32]
 8017f16:	b123      	cbz	r3, 8017f22 <print_setting+0x12>
        grbl.report.setting(setting, offset, data);
 8017f18:	4b0a      	ldr	r3, [pc, #40]	@ (8017f44 <print_setting+0x34>)
 8017f1a:	695b      	ldr	r3, [r3, #20]
 8017f1c:	4798      	blx	r3
}
 8017f1e:	2001      	movs	r0, #1
 8017f20:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write("$");
 8017f22:	4d09      	ldr	r5, [pc, #36]	@ (8017f48 <print_setting+0x38>)
 8017f24:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017f28:	4808      	ldr	r0, [pc, #32]	@ (8017f4c <print_setting+0x3c>)
 8017f2a:	4798      	blx	r3
        hal.stream.write(uitoa(setting->id));
 8017f2c:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8017f30:	8820      	ldrh	r0, [r4, #0]
 8017f32:	f7fd f9c5 	bl	80152c0 <uitoa>
 8017f36:	47b0      	blx	r6
        hal.stream.write("=N/A" ASCII_EOL);
 8017f38:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017f3c:	4804      	ldr	r0, [pc, #16]	@ (8017f50 <print_setting+0x40>)
 8017f3e:	4798      	blx	r3
 8017f40:	e7ed      	b.n	8017f1e <print_setting+0xe>
 8017f42:	bf00      	nop
 8017f44:	200013a8 	.word	0x200013a8
 8017f48:	200011c0 	.word	0x200011c0
 8017f4c:	0802b56c 	.word	0x0802b56c
 8017f50:	0802b570 	.word	0x0802b570

08017f54 <print_alarm>:
{
 8017f54:	b570      	push	{r4, r5, r6, lr}
 8017f56:	4604      	mov	r4, r0
    if(grbl_format) {
 8017f58:	b9f1      	cbnz	r1, 8017f98 <print_alarm+0x44>
        hal.stream.write("[ALARMCODE:");
 8017f5a:	4d1b      	ldr	r5, [pc, #108]	@ (8017fc8 <print_alarm+0x74>)
 8017f5c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017f60:	481a      	ldr	r0, [pc, #104]	@ (8017fcc <print_alarm+0x78>)
 8017f62:	4798      	blx	r3
        hal.stream.write(uitoa(alarm->id));
 8017f64:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8017f68:	7820      	ldrb	r0, [r4, #0]
 8017f6a:	f7fd f9a9 	bl	80152c0 <uitoa>
 8017f6e:	47b0      	blx	r6
        hal.stream.write(vbar);
 8017f70:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017f74:	4e16      	ldr	r6, [pc, #88]	@ (8017fd0 <print_alarm+0x7c>)
 8017f76:	4630      	mov	r0, r6
 8017f78:	4798      	blx	r3
        hal.stream.write(vbar);
 8017f7a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017f7e:	4630      	mov	r0, r6
 8017f80:	4798      	blx	r3
        if(alarm->description)
 8017f82:	6860      	ldr	r0, [r4, #4]
 8017f84:	b110      	cbz	r0, 8017f8c <print_alarm+0x38>
            hal.stream.write(alarm->description);
 8017f86:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017f8a:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8017f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8017fc8 <print_alarm+0x74>)
 8017f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017f92:	4810      	ldr	r0, [pc, #64]	@ (8017fd4 <print_alarm+0x80>)
 8017f94:	4798      	blx	r3
}
 8017f96:	bd70      	pop	{r4, r5, r6, pc}
        write_quoted(uitoa(alarm->id), ",");
 8017f98:	7800      	ldrb	r0, [r0, #0]
 8017f9a:	f7fd f991 	bl	80152c0 <uitoa>
 8017f9e:	4d0e      	ldr	r5, [pc, #56]	@ (8017fd8 <print_alarm+0x84>)
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	f7ff fef1 	bl	8017d88 <write_quoted>
        write_quoted("N/A", ",");
 8017fa6:	4629      	mov	r1, r5
 8017fa8:	480c      	ldr	r0, [pc, #48]	@ (8017fdc <print_alarm+0x88>)
 8017faa:	f7ff feed 	bl	8017d88 <write_quoted>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 8017fae:	6860      	ldr	r0, [r4, #4]
 8017fb0:	b140      	cbz	r0, 8017fc4 <print_alarm+0x70>
 8017fb2:	2100      	movs	r1, #0
 8017fb4:	f7ff fee8 	bl	8017d88 <write_quoted>
        hal.stream.write(ASCII_EOL);
 8017fb8:	4b03      	ldr	r3, [pc, #12]	@ (8017fc8 <print_alarm+0x74>)
 8017fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017fbe:	4808      	ldr	r0, [pc, #32]	@ (8017fe0 <print_alarm+0x8c>)
 8017fc0:	4798      	blx	r3
 8017fc2:	e7e8      	b.n	8017f96 <print_alarm+0x42>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 8017fc4:	4807      	ldr	r0, [pc, #28]	@ (8017fe4 <print_alarm+0x90>)
 8017fc6:	e7f4      	b.n	8017fb2 <print_alarm+0x5e>
 8017fc8:	200011c0 	.word	0x200011c0
 8017fcc:	0802b578 	.word	0x0802b578
 8017fd0:	0802bdac 	.word	0x0802bdac
 8017fd4:	0802b584 	.word	0x0802b584
 8017fd8:	0802b9b0 	.word	0x0802b9b0
 8017fdc:	08029208 	.word	0x08029208
 8017fe0:	0802bc30 	.word	0x0802bc30
 8017fe4:	0802b6ec 	.word	0x0802b6ec

08017fe8 <print_error>:
{
 8017fe8:	b570      	push	{r4, r5, r6, lr}
 8017fea:	4604      	mov	r4, r0
    if(grbl_format) {
 8017fec:	b9f1      	cbnz	r1, 801802c <print_error+0x44>
        hal.stream.write("[ERRORCODE:");
 8017fee:	4d1b      	ldr	r5, [pc, #108]	@ (801805c <print_error+0x74>)
 8017ff0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8017ff4:	481a      	ldr	r0, [pc, #104]	@ (8018060 <print_error+0x78>)
 8017ff6:	4798      	blx	r3
        hal.stream.write(uitoa(error->id));
 8017ff8:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8017ffc:	7820      	ldrb	r0, [r4, #0]
 8017ffe:	f7fd f95f 	bl	80152c0 <uitoa>
 8018002:	47b0      	blx	r6
        hal.stream.write(vbar);
 8018004:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018008:	4e16      	ldr	r6, [pc, #88]	@ (8018064 <print_error+0x7c>)
 801800a:	4630      	mov	r0, r6
 801800c:	4798      	blx	r3
        hal.stream.write(vbar);
 801800e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018012:	4630      	mov	r0, r6
 8018014:	4798      	blx	r3
        if(error->description)
 8018016:	6860      	ldr	r0, [r4, #4]
 8018018:	b110      	cbz	r0, 8018020 <print_error+0x38>
            hal.stream.write(error->description);
 801801a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801801e:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8018020:	4b0e      	ldr	r3, [pc, #56]	@ (801805c <print_error+0x74>)
 8018022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018026:	4810      	ldr	r0, [pc, #64]	@ (8018068 <print_error+0x80>)
 8018028:	4798      	blx	r3
}
 801802a:	bd70      	pop	{r4, r5, r6, pc}
        write_quoted(uitoa(error->id), ",");
 801802c:	7800      	ldrb	r0, [r0, #0]
 801802e:	f7fd f947 	bl	80152c0 <uitoa>
 8018032:	4d0e      	ldr	r5, [pc, #56]	@ (801806c <print_error+0x84>)
 8018034:	4629      	mov	r1, r5
 8018036:	f7ff fea7 	bl	8017d88 <write_quoted>
        write_quoted("N/A", ",");
 801803a:	4629      	mov	r1, r5
 801803c:	480c      	ldr	r0, [pc, #48]	@ (8018070 <print_error+0x88>)
 801803e:	f7ff fea3 	bl	8017d88 <write_quoted>
        write_quoted(error->description ? error->description : "", NULL);
 8018042:	6860      	ldr	r0, [r4, #4]
 8018044:	b140      	cbz	r0, 8018058 <print_error+0x70>
 8018046:	2100      	movs	r1, #0
 8018048:	f7ff fe9e 	bl	8017d88 <write_quoted>
        hal.stream.write(ASCII_EOL);
 801804c:	4b03      	ldr	r3, [pc, #12]	@ (801805c <print_error+0x74>)
 801804e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018052:	4808      	ldr	r0, [pc, #32]	@ (8018074 <print_error+0x8c>)
 8018054:	4798      	blx	r3
 8018056:	e7e8      	b.n	801802a <print_error+0x42>
        write_quoted(error->description ? error->description : "", NULL);
 8018058:	4807      	ldr	r0, [pc, #28]	@ (8018078 <print_error+0x90>)
 801805a:	e7f4      	b.n	8018046 <print_error+0x5e>
 801805c:	200011c0 	.word	0x200011c0
 8018060:	0802b588 	.word	0x0802b588
 8018064:	0802bdac 	.word	0x0802bdac
 8018068:	0802b584 	.word	0x0802b584
 801806c:	0802b9b0 	.word	0x0802b9b0
 8018070:	08029208 	.word	0x08029208
 8018074:	0802bc30 	.word	0x0802bc30
 8018078:	0802b6ec 	.word	0x0802b6ec

0801807c <print_uito2a>:
}

#endif

static void print_uito2a (char *prefix, uint32_t v)
{
 801807c:	b538      	push	{r3, r4, r5, lr}
 801807e:	460c      	mov	r4, r1
    hal.stream.write(prefix);
 8018080:	4b09      	ldr	r3, [pc, #36]	@ (80180a8 <print_uito2a+0x2c>)
 8018082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018086:	4798      	blx	r3
    if(v < 10)
 8018088:	2c09      	cmp	r4, #9
 801808a:	d804      	bhi.n	8018096 <print_uito2a+0x1a>
        hal.stream.write("0");
 801808c:	4b06      	ldr	r3, [pc, #24]	@ (80180a8 <print_uito2a+0x2c>)
 801808e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018092:	4806      	ldr	r0, [pc, #24]	@ (80180ac <print_uito2a+0x30>)
 8018094:	4798      	blx	r3
    hal.stream.write(uitoa(v));
 8018096:	4b04      	ldr	r3, [pc, #16]	@ (80180a8 <print_uito2a+0x2c>)
 8018098:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 801809c:	4620      	mov	r0, r4
 801809e:	f7fd f90f 	bl	80152c0 <uitoa>
 80180a2:	47a8      	blx	r5
}
 80180a4:	bd38      	pop	{r3, r4, r5, pc}
 80180a6:	bf00      	nop
 80180a8:	200011c0 	.word	0x200011c0
 80180ac:	0802965c 	.word	0x0802965c

080180b0 <report_spindle>:

    return ok ? Status_OK : Status_InvalidStatement;
}

static void report_spindle (spindle_info_t *spindle, void *data)
{
 80180b0:	b570      	push	{r4, r5, r6, lr}
 80180b2:	4604      	mov	r4, r0
    if(data) {
 80180b4:	2900      	cmp	r1, #0
 80180b6:	f000 80bc 	beq.w	8018232 <report_spindle+0x182>
        char *caps = buf;
        hal.stream.write("[SPINDLE:");
 80180ba:	4d68      	ldr	r5, [pc, #416]	@ (801825c <report_spindle+0x1ac>)
 80180bc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80180c0:	4867      	ldr	r0, [pc, #412]	@ (8018260 <report_spindle+0x1b0>)
 80180c2:	4798      	blx	r3
        hal.stream.write(uitoa(spindle->id));
 80180c4:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80180c8:	f994 0000 	ldrsb.w	r0, [r4]
 80180cc:	f7fd f8f8 	bl	80152c0 <uitoa>
 80180d0:	47b0      	blx	r6
        hal.stream.write("|");
 80180d2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80180d6:	4863      	ldr	r0, [pc, #396]	@ (8018264 <report_spindle+0x1b4>)
 80180d8:	4798      	blx	r3
        hal.stream.write(spindle->enabled ? uitoa(spindle->num) : "-");
 80180da:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80180de:	7a23      	ldrb	r3, [r4, #8]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	f040 809b 	bne.w	801821c <report_spindle+0x16c>
 80180e6:	4860      	ldr	r0, [pc, #384]	@ (8018268 <report_spindle+0x1b8>)
 80180e8:	47a8      	blx	r5
        hal.stream.write("|");
 80180ea:	4d5c      	ldr	r5, [pc, #368]	@ (801825c <report_spindle+0x1ac>)
 80180ec:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80180f0:	485c      	ldr	r0, [pc, #368]	@ (8018264 <report_spindle+0x1b4>)
 80180f2:	4798      	blx	r3
        hal.stream.write(uitoa(spindle->hal->type));
 80180f4:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80180f8:	68e3      	ldr	r3, [r4, #12]
 80180fa:	7a18      	ldrb	r0, [r3, #8]
 80180fc:	f7fd f8e0 	bl	80152c0 <uitoa>
 8018100:	47a8      	blx	r5
        *caps++ = '|';
 8018102:	4b5a      	ldr	r3, [pc, #360]	@ (801826c <report_spindle+0x1bc>)
 8018104:	227c      	movs	r2, #124	@ 0x7c
 8018106:	701a      	strb	r2, [r3, #0]
#if N_SYS_SPINDLE == 1
        if(spindle->is_current)
 8018108:	7a63      	ldrb	r3, [r4, #9]
 801810a:	2b00      	cmp	r3, #0
 801810c:	f000 808b 	beq.w	8018226 <report_spindle+0x176>
            *caps++ = '*';
 8018110:	4b56      	ldr	r3, [pc, #344]	@ (801826c <report_spindle+0x1bc>)
 8018112:	222a      	movs	r2, #42	@ 0x2a
 8018114:	705a      	strb	r2, [r3, #1]
 8018116:	3302      	adds	r3, #2
#endif
        if(spindle->hal->cap.at_speed)
 8018118:	68e2      	ldr	r2, [r4, #12]
 801811a:	7a92      	ldrb	r2, [r2, #10]
 801811c:	f012 0f04 	tst.w	r2, #4
 8018120:	d002      	beq.n	8018128 <report_spindle+0x78>
            *caps++ = 'S';
 8018122:	2253      	movs	r2, #83	@ 0x53
 8018124:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.direction)
 8018128:	68e2      	ldr	r2, [r4, #12]
 801812a:	7a92      	ldrb	r2, [r2, #10]
 801812c:	f012 0f02 	tst.w	r2, #2
 8018130:	d002      	beq.n	8018138 <report_spindle+0x88>
            *caps++ = 'D';
 8018132:	2244      	movs	r2, #68	@ 0x44
 8018134:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.laser)
 8018138:	68e2      	ldr	r2, [r4, #12]
 801813a:	7a92      	ldrb	r2, [r2, #10]
 801813c:	f012 0f08 	tst.w	r2, #8
 8018140:	d002      	beq.n	8018148 <report_spindle+0x98>
            *caps++ = 'L';
 8018142:	224c      	movs	r2, #76	@ 0x4c
 8018144:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.laser && spindle->hal->pulse_on)
 8018148:	68e2      	ldr	r2, [r4, #12]
 801814a:	7a91      	ldrb	r1, [r2, #10]
 801814c:	f011 0f08 	tst.w	r1, #8
 8018150:	d004      	beq.n	801815c <report_spindle+0xac>
 8018152:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8018154:	b112      	cbz	r2, 801815c <report_spindle+0xac>
            *caps++ = 'A';
 8018156:	2241      	movs	r2, #65	@ 0x41
 8018158:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pid)
 801815c:	68e2      	ldr	r2, [r4, #12]
 801815e:	7a92      	ldrb	r2, [r2, #10]
 8018160:	f012 0f20 	tst.w	r2, #32
 8018164:	d002      	beq.n	801816c <report_spindle+0xbc>
            *caps++ = 'P';
 8018166:	2250      	movs	r2, #80	@ 0x50
 8018168:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pwm_invert)
 801816c:	68e2      	ldr	r2, [r4, #12]
 801816e:	7a92      	ldrb	r2, [r2, #10]
 8018170:	f012 0f10 	tst.w	r2, #16
 8018174:	d002      	beq.n	801817c <report_spindle+0xcc>
            *caps++ = 'I';
 8018176:	2249      	movs	r2, #73	@ 0x49
 8018178:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.pwm_linearization)
 801817c:	68e2      	ldr	r2, [r4, #12]
 801817e:	7a92      	ldrb	r2, [r2, #10]
 8018180:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8018184:	d002      	beq.n	801818c <report_spindle+0xdc>
            *caps++ = 'N';
 8018186:	224e      	movs	r2, #78	@ 0x4e
 8018188:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->cap.rpm_range_locked)
 801818c:	68e2      	ldr	r2, [r4, #12]
 801818e:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8018192:	2a00      	cmp	r2, #0
 8018194:	db49      	blt.n	801822a <report_spindle+0x17a>
            *caps++ = 'R';
        if(spindle->hal->cap.variable)
 8018196:	68e2      	ldr	r2, [r4, #12]
 8018198:	7a92      	ldrb	r2, [r2, #10]
 801819a:	f012 0f01 	tst.w	r2, #1
 801819e:	d002      	beq.n	80181a6 <report_spindle+0xf6>
            *caps++ = 'V';
 80181a0:	2256      	movs	r2, #86	@ 0x56
 80181a2:	f803 2b01 	strb.w	r2, [r3], #1
        if(spindle->hal->get_data)
 80181a6:	68e2      	ldr	r2, [r4, #12]
 80181a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80181aa:	b112      	cbz	r2, 80181b2 <report_spindle+0x102>
            *caps++ = 'E';
 80181ac:	2245      	movs	r2, #69	@ 0x45
 80181ae:	f803 2b01 	strb.w	r2, [r3], #1
        *caps++ = '|';
 80181b2:	227c      	movs	r2, #124	@ 0x7c
 80181b4:	701a      	strb	r2, [r3, #0]
        *caps = '\0';
 80181b6:	2200      	movs	r2, #0
 80181b8:	705a      	strb	r2, [r3, #1]
        hal.stream.write(buf);
 80181ba:	4d28      	ldr	r5, [pc, #160]	@ (801825c <report_spindle+0x1ac>)
 80181bc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80181c0:	482a      	ldr	r0, [pc, #168]	@ (801826c <report_spindle+0x1bc>)
 80181c2:	4798      	blx	r3
        hal.stream.write(spindle->name);
 80181c4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80181c8:	6860      	ldr	r0, [r4, #4]
 80181ca:	4798      	blx	r3
        if(spindle->hal->rpm_max > 0.0f) {
 80181cc:	68e3      	ldr	r3, [r4, #12]
 80181ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80181d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80181d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181da:	dd19      	ble.n	8018210 <report_spindle+0x160>
            hal.stream.write("|");
 80181dc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80181e0:	4820      	ldr	r0, [pc, #128]	@ (8018264 <report_spindle+0x1b4>)
 80181e2:	4798      	blx	r3
            hal.stream.write(ftoa(spindle->hal->rpm_min, 1));
 80181e4:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80181e8:	68e3      	ldr	r3, [r4, #12]
 80181ea:	2001      	movs	r0, #1
 80181ec:	ed93 0a05 	vldr	s0, [r3, #20]
 80181f0:	f7fd f888 	bl	8015304 <ftoa>
 80181f4:	47b0      	blx	r6
            hal.stream.write(",");
 80181f6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80181fa:	481d      	ldr	r0, [pc, #116]	@ (8018270 <report_spindle+0x1c0>)
 80181fc:	4798      	blx	r3
            hal.stream.write(ftoa(spindle->hal->rpm_max, 1));
 80181fe:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8018202:	68e3      	ldr	r3, [r4, #12]
 8018204:	2001      	movs	r0, #1
 8018206:	ed93 0a06 	vldr	s0, [r3, #24]
 801820a:	f7fd f87b 	bl	8015304 <ftoa>
 801820e:	47a8      	blx	r5
        }
        hal.stream.write("]" ASCII_EOL);
 8018210:	4b12      	ldr	r3, [pc, #72]	@ (801825c <report_spindle+0x1ac>)
 8018212:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018216:	4817      	ldr	r0, [pc, #92]	@ (8018274 <report_spindle+0x1c4>)
 8018218:	4798      	blx	r3
 #endif
#endif
        }
        hal.stream.write(ASCII_EOL);
    }
}
 801821a:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write(spindle->enabled ? uitoa(spindle->num) : "-");
 801821c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8018220:	f7fd f84e 	bl	80152c0 <uitoa>
 8018224:	e760      	b.n	80180e8 <report_spindle+0x38>
        *caps++ = '|';
 8018226:	4b14      	ldr	r3, [pc, #80]	@ (8018278 <report_spindle+0x1c8>)
 8018228:	e776      	b.n	8018118 <report_spindle+0x68>
            *caps++ = 'R';
 801822a:	2252      	movs	r2, #82	@ 0x52
 801822c:	f803 2b01 	strb.w	r2, [r3], #1
 8018230:	e7b1      	b.n	8018196 <report_spindle+0xe6>
        hal.stream.write(uitoa(spindle->id));
 8018232:	4d0a      	ldr	r5, [pc, #40]	@ (801825c <report_spindle+0x1ac>)
 8018234:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018238:	f990 0000 	ldrsb.w	r0, [r0]
 801823c:	f7fd f840 	bl	80152c0 <uitoa>
 8018240:	47b0      	blx	r6
        hal.stream.write(" - ");
 8018242:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018246:	480d      	ldr	r0, [pc, #52]	@ (801827c <report_spindle+0x1cc>)
 8018248:	4798      	blx	r3
        hal.stream.write(spindle->name);
 801824a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801824e:	6860      	ldr	r0, [r4, #4]
 8018250:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 8018252:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018256:	480a      	ldr	r0, [pc, #40]	@ (8018280 <report_spindle+0x1d0>)
 8018258:	4798      	blx	r3
}
 801825a:	e7de      	b.n	801821a <report_spindle+0x16a>
 801825c:	200011c0 	.word	0x200011c0
 8018260:	0802b594 	.word	0x0802b594
 8018264:	0802b5a0 	.word	0x0802b5a0
 8018268:	0802b560 	.word	0x0802b560
 801826c:	20001aa8 	.word	0x20001aa8
 8018270:	0802b9b0 	.word	0x0802b9b0
 8018274:	0802b584 	.word	0x0802b584
 8018278:	20001aa9 	.word	0x20001aa9
 801827c:	0802b5a4 	.word	0x0802b5a4
 8018280:	0802bc30 	.word	0x0802bc30

08018284 <get_axis_values_mm>:
{
 8018284:	b570      	push	{r4, r5, r6, lr}
 8018286:	4605      	mov	r5, r0
    buf[0] = '\0';
 8018288:	2400      	movs	r4, #0
 801828a:	4b18      	ldr	r3, [pc, #96]	@ (80182ec <get_axis_values_mm+0x68>)
 801828c:	701c      	strb	r4, [r3, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 801828e:	e014      	b.n	80182ba <get_axis_values_mm+0x36>
            strcat(buf, ftoa(axis_values[idx], N_DECIMAL_COORDVALUE_MM));
 8018290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018294:	2003      	movs	r0, #3
 8018296:	ed93 0a00 	vldr	s0, [r3]
 801829a:	f7fd f833 	bl	8015304 <ftoa>
 801829e:	4601      	mov	r1, r0
 80182a0:	4812      	ldr	r0, [pc, #72]	@ (80182ec <get_axis_values_mm+0x68>)
 80182a2:	f00c f9cc 	bl	802463e <strcat>
        if (idx < (N_AXIS - 1))
 80182a6:	2c01      	cmp	r4, #1
 80182a8:	d806      	bhi.n	80182b8 <get_axis_values_mm+0x34>
            strcat(buf, ",");
 80182aa:	4e10      	ldr	r6, [pc, #64]	@ (80182ec <get_axis_values_mm+0x68>)
 80182ac:	4630      	mov	r0, r6
 80182ae:	f7ef ff27 	bl	8008100 <strlen>
 80182b2:	4b0f      	ldr	r3, [pc, #60]	@ (80182f0 <get_axis_values_mm+0x6c>)
 80182b4:	881b      	ldrh	r3, [r3, #0]
 80182b6:	5233      	strh	r3, [r6, r0]
    for (idx = 0; idx < N_AXIS; idx++) {
 80182b8:	3401      	adds	r4, #1
 80182ba:	2c02      	cmp	r4, #2
 80182bc:	d813      	bhi.n	80182e6 <get_axis_values_mm+0x62>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 80182be:	2c00      	cmp	r4, #0
 80182c0:	d1e6      	bne.n	8018290 <get_axis_values_mm+0xc>
 80182c2:	4b0c      	ldr	r3, [pc, #48]	@ (80182f4 <get_axis_values_mm+0x70>)
 80182c4:	795b      	ldrb	r3, [r3, #5]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d0e2      	beq.n	8018290 <get_axis_values_mm+0xc>
            strcat(buf, ftoa(axis_values[idx] * 2.0f, N_DECIMAL_COORDVALUE_MM));
 80182ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80182ce:	ed93 0a00 	vldr	s0, [r3]
 80182d2:	2003      	movs	r0, #3
 80182d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80182d8:	f7fd f814 	bl	8015304 <ftoa>
 80182dc:	4601      	mov	r1, r0
 80182de:	4803      	ldr	r0, [pc, #12]	@ (80182ec <get_axis_values_mm+0x68>)
 80182e0:	f00c f9ad 	bl	802463e <strcat>
 80182e4:	e7df      	b.n	80182a6 <get_axis_values_mm+0x22>
}
 80182e6:	4801      	ldr	r0, [pc, #4]	@ (80182ec <get_axis_values_mm+0x68>)
 80182e8:	bd70      	pop	{r4, r5, r6, pc}
 80182ea:	bf00      	nop
 80182ec:	20001aa8 	.word	0x20001aa8
 80182f0:	0802b9b0 	.word	0x0802b9b0
 80182f4:	20000ef8 	.word	0x20000ef8

080182f8 <get_axis_values_inches>:
{
 80182f8:	b570      	push	{r4, r5, r6, lr}
 80182fa:	4605      	mov	r5, r0
    buf[0] = '\0';
 80182fc:	2400      	movs	r4, #0
 80182fe:	4b1c      	ldr	r3, [pc, #112]	@ (8018370 <get_axis_values_inches+0x78>)
 8018300:	701c      	strb	r4, [r3, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018302:	e018      	b.n	8018336 <get_axis_values_inches+0x3e>
             strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 8018304:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018308:	ed93 0a00 	vldr	s0, [r3]
 801830c:	2004      	movs	r0, #4
 801830e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018374 <get_axis_values_inches+0x7c>
 8018312:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018316:	f7fc fff5 	bl	8015304 <ftoa>
 801831a:	4601      	mov	r1, r0
 801831c:	4814      	ldr	r0, [pc, #80]	@ (8018370 <get_axis_values_inches+0x78>)
 801831e:	f00c f98e 	bl	802463e <strcat>
        if (idx < (N_AXIS - 1))
 8018322:	2c01      	cmp	r4, #1
 8018324:	d806      	bhi.n	8018334 <get_axis_values_inches+0x3c>
            strcat(buf, ",");
 8018326:	4e12      	ldr	r6, [pc, #72]	@ (8018370 <get_axis_values_inches+0x78>)
 8018328:	4630      	mov	r0, r6
 801832a:	f7ef fee9 	bl	8008100 <strlen>
 801832e:	4b12      	ldr	r3, [pc, #72]	@ (8018378 <get_axis_values_inches+0x80>)
 8018330:	881b      	ldrh	r3, [r3, #0]
 8018332:	5233      	strh	r3, [r6, r0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8018334:	3401      	adds	r4, #1
 8018336:	2c02      	cmp	r4, #2
 8018338:	d817      	bhi.n	801836a <get_axis_values_inches+0x72>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 801833a:	2c00      	cmp	r4, #0
 801833c:	d1e2      	bne.n	8018304 <get_axis_values_inches+0xc>
 801833e:	4b0f      	ldr	r3, [pc, #60]	@ (801837c <get_axis_values_inches+0x84>)
 8018340:	795b      	ldrb	r3, [r3, #5]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d0de      	beq.n	8018304 <get_axis_values_inches+0xc>
            strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM * 2.0f, N_DECIMAL_COORDVALUE_INCH));
 8018346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801834a:	ed93 0a00 	vldr	s0, [r3]
 801834e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018374 <get_axis_values_inches+0x7c>
 8018352:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018356:	2004      	movs	r0, #4
 8018358:	ee30 0a00 	vadd.f32	s0, s0, s0
 801835c:	f7fc ffd2 	bl	8015304 <ftoa>
 8018360:	4601      	mov	r1, r0
 8018362:	4803      	ldr	r0, [pc, #12]	@ (8018370 <get_axis_values_inches+0x78>)
 8018364:	f00c f96b 	bl	802463e <strcat>
 8018368:	e7db      	b.n	8018322 <get_axis_values_inches+0x2a>
}
 801836a:	4801      	ldr	r0, [pc, #4]	@ (8018370 <get_axis_values_inches+0x78>)
 801836c:	bd70      	pop	{r4, r5, r6, pc}
 801836e:	bf00      	nop
 8018370:	20001aa8 	.word	0x20001aa8
 8018374:	3d21428b 	.word	0x3d21428b
 8018378:	0802b9b0 	.word	0x0802b9b0
 801837c:	20000ef8 	.word	0x20000ef8

08018380 <get_axis_value_mm>:
{
 8018380:	b508      	push	{r3, lr}
    return strcpy(buf, ftoa(value, N_DECIMAL_COORDVALUE_MM));
 8018382:	2003      	movs	r0, #3
 8018384:	f7fc ffbe 	bl	8015304 <ftoa>
 8018388:	4601      	mov	r1, r0
 801838a:	4802      	ldr	r0, [pc, #8]	@ (8018394 <get_axis_value_mm+0x14>)
 801838c:	f00c faa7 	bl	80248de <strcpy>
}
 8018390:	bd08      	pop	{r3, pc}
 8018392:	bf00      	nop
 8018394:	20001aa8 	.word	0x20001aa8

08018398 <get_axis_value_inches>:
{
 8018398:	b508      	push	{r3, lr}
    return strcpy(buf, ftoa(value * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 801839a:	2004      	movs	r0, #4
 801839c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80183b4 <get_axis_value_inches+0x1c>
 80183a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80183a4:	f7fc ffae 	bl	8015304 <ftoa>
 80183a8:	4601      	mov	r1, r0
 80183aa:	4803      	ldr	r0, [pc, #12]	@ (80183b8 <get_axis_value_inches+0x20>)
 80183ac:	f00c fa97 	bl	80248de <strcpy>
}
 80183b0:	bd08      	pop	{r3, pc}
 80183b2:	bf00      	nop
 80183b4:	3d21428b 	.word	0x3d21428b
 80183b8:	20001aa8 	.word	0x20001aa8

080183bc <map_coord_system>:
{
 80183bc:	b538      	push	{r3, r4, r5, lr}
    uint8_t g5x = id + 54;
 80183be:	f100 0436 	add.w	r4, r0, #54	@ 0x36
 80183c2:	b2e4      	uxtb	r4, r4
    strcpy(buf, uitoa((uint32_t)(g5x > 59 ? 59 : g5x)));
 80183c4:	4620      	mov	r0, r4
 80183c6:	2c3b      	cmp	r4, #59	@ 0x3b
 80183c8:	bf28      	it	cs
 80183ca:	203b      	movcs	r0, #59	@ 0x3b
 80183cc:	f7fc ff78 	bl	80152c0 <uitoa>
 80183d0:	4601      	mov	r1, r0
 80183d2:	480b      	ldr	r0, [pc, #44]	@ (8018400 <map_coord_system+0x44>)
 80183d4:	f00c fa83 	bl	80248de <strcpy>
    if(g5x > 59) {
 80183d8:	2c3b      	cmp	r4, #59	@ 0x3b
 80183da:	d801      	bhi.n	80183e0 <map_coord_system+0x24>
}
 80183dc:	4808      	ldr	r0, [pc, #32]	@ (8018400 <map_coord_system+0x44>)
 80183de:	bd38      	pop	{r3, r4, r5, pc}
        strcat(buf, ".");
 80183e0:	4d07      	ldr	r5, [pc, #28]	@ (8018400 <map_coord_system+0x44>)
 80183e2:	4628      	mov	r0, r5
 80183e4:	f7ef fe8c 	bl	8008100 <strlen>
 80183e8:	4b06      	ldr	r3, [pc, #24]	@ (8018404 <map_coord_system+0x48>)
 80183ea:	881b      	ldrh	r3, [r3, #0]
 80183ec:	522b      	strh	r3, [r5, r0]
        strcat(buf, uitoa((uint32_t)(g5x - 59)));
 80183ee:	f1a4 003b 	sub.w	r0, r4, #59	@ 0x3b
 80183f2:	f7fc ff65 	bl	80152c0 <uitoa>
 80183f6:	4601      	mov	r1, r0
 80183f8:	4628      	mov	r0, r5
 80183fa:	f00c f920 	bl	802463e <strcat>
 80183fe:	e7ed      	b.n	80183dc <map_coord_system+0x20>
 8018400:	20001aa8 	.word	0x20001aa8
 8018404:	08028e1c 	.word	0x08028e1c

08018408 <get_pin_info>:
{
 8018408:	b510      	push	{r4, lr}
 801840a:	460c      	mov	r4, r1
    info->function = pin->function;
 801840c:	7843      	ldrb	r3, [r0, #1]
 801840e:	704b      	strb	r3, [r1, #1]
    info->pin = pin->pin;
 8018410:	6903      	ldr	r3, [r0, #16]
 8018412:	700b      	strb	r3, [r1, #0]
    info->description = pin->description;
 8018414:	68c3      	ldr	r3, [r0, #12]
 8018416:	610b      	str	r3, [r1, #16]
    info->sortkey = (pin->function << 8) | pin->id | (pin->group >= PinGroup_UART1 && pin->group <= PinGroup_UART4 ? pin->group << 16 : 0);
 8018418:	7842      	ldrb	r2, [r0, #1]
 801841a:	7803      	ldrb	r3, [r0, #0]
 801841c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018420:	6842      	ldr	r2, [r0, #4]
 8018422:	f1a2 0111 	sub.w	r1, r2, #17
 8018426:	2903      	cmp	r1, #3
 8018428:	d809      	bhi.n	801843e <get_pin_info+0x36>
 801842a:	0412      	lsls	r2, r2, #16
 801842c:	4313      	orrs	r3, r2
 801842e:	6163      	str	r3, [r4, #20]
    if(pin->port)
 8018430:	6881      	ldr	r1, [r0, #8]
 8018432:	b131      	cbz	r1, 8018442 <get_pin_info+0x3a>
        strcpy(info->port, (char *)pin->port);
 8018434:	1ca0      	adds	r0, r4, #2
 8018436:	f00c fa52 	bl	80248de <strcpy>
}
 801843a:	4620      	mov	r0, r4
 801843c:	bd10      	pop	{r4, pc}
    info->sortkey = (pin->function << 8) | pin->id | (pin->group >= PinGroup_UART1 && pin->group <= PinGroup_UART4 ? pin->group << 16 : 0);
 801843e:	2200      	movs	r2, #0
 8018440:	e7f4      	b.n	801842c <get_pin_info+0x24>
        *info->port = '\0';
 8018442:	2300      	movs	r3, #0
 8018444:	70a3      	strb	r3, [r4, #2]
 8018446:	e7f8      	b.n	801843a <get_pin_info+0x32>

08018448 <get_pins>:
{
 8018448:	b510      	push	{r4, lr}
    get_pin_info(pin, &((pin_data_t *)data)->pins[((pin_data_t *)data)->idx++]);
 801844a:	688a      	ldr	r2, [r1, #8]
 801844c:	680b      	ldr	r3, [r1, #0]
 801844e:	1c5c      	adds	r4, r3, #1
 8018450:	600c      	str	r4, [r1, #0]
 8018452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018456:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801845a:	f7ff ffd5 	bl	8018408 <get_pin_info>
}
 801845e:	bd10      	pop	{r4, pc}

08018460 <appendbuf>:
{
 8018460:	b40f      	push	{r0, r1, r2, r3}
 8018462:	b410      	push	{r4}
 8018464:	b083      	sub	sp, #12
 8018466:	ab04      	add	r3, sp, #16
 8018468:	f853 4b04 	ldr.w	r4, [r3], #4
    va_start(list, argc);
 801846c:	9301      	str	r3, [sp, #4]
    char c, *s = buf, *arg;
 801846e:	480c      	ldr	r0, [pc, #48]	@ (80184a0 <appendbuf+0x40>)
    while(argc--) {
 8018470:	e00b      	b.n	801848a <appendbuf+0x2a>
        arg = va_arg(list, char *);
 8018472:	9b01      	ldr	r3, [sp, #4]
 8018474:	1d1a      	adds	r2, r3, #4
 8018476:	9201      	str	r2, [sp, #4]
 8018478:	6819      	ldr	r1, [r3, #0]
 801847a:	4602      	mov	r2, r0
            c = *s++ = *arg++;
 801847c:	4610      	mov	r0, r2
 801847e:	3201      	adds	r2, #1
 8018480:	780b      	ldrb	r3, [r1, #0]
 8018482:	3101      	adds	r1, #1
 8018484:	7003      	strb	r3, [r0, #0]
        } while(c);
 8018486:	2b00      	cmp	r3, #0
 8018488:	d1f8      	bne.n	801847c <appendbuf+0x1c>
    while(argc--) {
 801848a:	4623      	mov	r3, r4
 801848c:	3c01      	subs	r4, #1
 801848e:	2b00      	cmp	r3, #0
 8018490:	d1ef      	bne.n	8018472 <appendbuf+0x12>
}
 8018492:	4803      	ldr	r0, [pc, #12]	@ (80184a0 <appendbuf+0x40>)
 8018494:	b003      	add	sp, #12
 8018496:	f85d 4b04 	ldr.w	r4, [sp], #4
 801849a:	b004      	add	sp, #16
 801849c:	4770      	bx	lr
 801849e:	bf00      	nop
 80184a0:	20001aa8 	.word	0x20001aa8

080184a4 <report_alarm_message>:
{
 80184a4:	b570      	push	{r4, r5, r6, lr}
 80184a6:	4604      	mov	r4, r0
    hal.stream.write_all(appendbuf(3, "ALARM:", uitoa((uint32_t)alarm_code), ASCII_EOL));
 80184a8:	4d08      	ldr	r5, [pc, #32]	@ (80184cc <report_alarm_message+0x28>)
 80184aa:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 80184ae:	f7fc ff07 	bl	80152c0 <uitoa>
 80184b2:	4602      	mov	r2, r0
 80184b4:	4b06      	ldr	r3, [pc, #24]	@ (80184d0 <report_alarm_message+0x2c>)
 80184b6:	4907      	ldr	r1, [pc, #28]	@ (80184d4 <report_alarm_message+0x30>)
 80184b8:	2003      	movs	r0, #3
 80184ba:	f7ff ffd1 	bl	8018460 <appendbuf>
 80184be:	47b0      	blx	r6
    hal.delay_ms(100, NULL); // Force delay to ensure message clears output stream buffer.
 80184c0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80184c2:	2100      	movs	r1, #0
 80184c4:	2064      	movs	r0, #100	@ 0x64
 80184c6:	4798      	blx	r3
}
 80184c8:	4620      	mov	r0, r4
 80184ca:	bd70      	pop	{r4, r5, r6, pc}
 80184cc:	200011c0 	.word	0x200011c0
 80184d0:	0802bc30 	.word	0x0802bc30
 80184d4:	0802b5a8 	.word	0x0802b5a8

080184d8 <report_status_message>:
{
 80184d8:	b538      	push	{r3, r4, r5, lr}
    switch(status_code) {
 80184da:	4604      	mov	r4, r0
 80184dc:	b930      	cbnz	r0, 80184ec <report_status_message+0x14>
            hal.stream.write("ok" ASCII_EOL);
 80184de:	4b0a      	ldr	r3, [pc, #40]	@ (8018508 <report_status_message+0x30>)
 80184e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80184e4:	4809      	ldr	r0, [pc, #36]	@ (801850c <report_status_message+0x34>)
 80184e6:	4798      	blx	r3
}
 80184e8:	4620      	mov	r0, r4
 80184ea:	bd38      	pop	{r3, r4, r5, pc}
            hal.stream.write(appendbuf(3, "error:", uitoa((uint32_t)status_code), ASCII_EOL));
 80184ec:	4b06      	ldr	r3, [pc, #24]	@ (8018508 <report_status_message+0x30>)
 80184ee:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 80184f2:	f7fc fee5 	bl	80152c0 <uitoa>
 80184f6:	4602      	mov	r2, r0
 80184f8:	4b05      	ldr	r3, [pc, #20]	@ (8018510 <report_status_message+0x38>)
 80184fa:	4906      	ldr	r1, [pc, #24]	@ (8018514 <report_status_message+0x3c>)
 80184fc:	2003      	movs	r0, #3
 80184fe:	f7ff ffaf 	bl	8018460 <appendbuf>
 8018502:	47a8      	blx	r5
            break;
 8018504:	e7f0      	b.n	80184e8 <report_status_message+0x10>
 8018506:	bf00      	nop
 8018508:	200011c0 	.word	0x200011c0
 801850c:	0802b5b0 	.word	0x0802b5b0
 8018510:	0802bc30 	.word	0x0802bc30
 8018514:	0802b5b8 	.word	0x0802b5b8

08018518 <report_bitfield>:
{
 8018518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801851c:	4604      	mov	r4, r0
 801851e:	4688      	mov	r8, r1
    if((s = (char *)malloc(strlen(format) + 1))) {
 8018520:	f7ef fdee 	bl	8008100 <strlen>
 8018524:	3001      	adds	r0, #1
 8018526:	f009 ffb9 	bl	802249c <malloc>
 801852a:	2800      	cmp	r0, #0
 801852c:	d049      	beq.n	80185c2 <report_bitfield+0xaa>
 801852e:	4681      	mov	r9, r0
        strcpy(s, format);
 8018530:	4621      	mov	r1, r4
 8018532:	f00c f9d4 	bl	80248de <strcpy>
        char *element = strtok(s, ",");
 8018536:	4924      	ldr	r1, [pc, #144]	@ (80185c8 <report_bitfield+0xb0>)
 8018538:	4648      	mov	r0, r9
 801853a:	f00c f8d7 	bl	80246ec <strtok>
 801853e:	4604      	mov	r4, r0
    uint_fast16_t val = 1;
 8018540:	2701      	movs	r7, #1
    uint_fast8_t bit = 0;
 8018542:	2600      	movs	r6, #0
        while(element) {
 8018544:	e006      	b.n	8018554 <report_bitfield+0x3c>
            bit++;
 8018546:	3601      	adds	r6, #1
            val <<= 1;
 8018548:	007f      	lsls	r7, r7, #1
            element = strtok(NULL, ",");
 801854a:	491f      	ldr	r1, [pc, #124]	@ (80185c8 <report_bitfield+0xb0>)
 801854c:	2000      	movs	r0, #0
 801854e:	f00c f8cd 	bl	80246ec <strtok>
 8018552:	4604      	mov	r4, r0
        while(element) {
 8018554:	2c00      	cmp	r4, #0
 8018556:	d031      	beq.n	80185bc <report_bitfield+0xa4>
            if(strcmp(element, "N/A")) {
 8018558:	491c      	ldr	r1, [pc, #112]	@ (80185cc <report_bitfield+0xb4>)
 801855a:	4620      	mov	r0, r4
 801855c:	f7ef fd70 	bl	8008040 <strcmp>
 8018560:	2800      	cmp	r0, #0
 8018562:	d0f0      	beq.n	8018546 <report_bitfield+0x2e>
                hal.stream.write(ASCII_EOL);
 8018564:	4d1a      	ldr	r5, [pc, #104]	@ (80185d0 <report_bitfield+0xb8>)
 8018566:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801856a:	481a      	ldr	r0, [pc, #104]	@ (80185d4 <report_bitfield+0xbc>)
 801856c:	4798      	blx	r3
                hal.stream.write("    ");
 801856e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018572:	4819      	ldr	r0, [pc, #100]	@ (80185d8 <report_bitfield+0xc0>)
 8018574:	4798      	blx	r3
                hal.stream.write(uitoa(bit));
 8018576:	f8d5 a0b4 	ldr.w	sl, [r5, #180]	@ 0xb4
 801857a:	4630      	mov	r0, r6
 801857c:	f7fc fea0 	bl	80152c0 <uitoa>
 8018580:	47d0      	blx	sl
                hal.stream.write(" - ");
 8018582:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018586:	4815      	ldr	r0, [pc, #84]	@ (80185dc <report_bitfield+0xc4>)
 8018588:	4798      	blx	r3
                if(*element)
 801858a:	7823      	ldrb	r3, [r4, #0]
 801858c:	b11b      	cbz	r3, 8018596 <report_bitfield+0x7e>
                hal.stream.write(element);
 801858e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018592:	4620      	mov	r0, r4
 8018594:	4798      	blx	r3
                if(bitmap) {
 8018596:	f1b8 0f00 	cmp.w	r8, #0
 801859a:	d0d4      	beq.n	8018546 <report_bitfield+0x2e>
                    hal.stream.write(" (");
 801859c:	4c0c      	ldr	r4, [pc, #48]	@ (80185d0 <report_bitfield+0xb8>)
 801859e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80185a2:	480f      	ldr	r0, [pc, #60]	@ (80185e0 <report_bitfield+0xc8>)
 80185a4:	4798      	blx	r3
                    hal.stream.write(uitoa(val));
 80185a6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80185aa:	4638      	mov	r0, r7
 80185ac:	f7fc fe88 	bl	80152c0 <uitoa>
 80185b0:	47a8      	blx	r5
                    hal.stream.write(")");
 80185b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80185b6:	480b      	ldr	r0, [pc, #44]	@ (80185e4 <report_bitfield+0xcc>)
 80185b8:	4798      	blx	r3
 80185ba:	e7c4      	b.n	8018546 <report_bitfield+0x2e>
        free(s);
 80185bc:	4648      	mov	r0, r9
 80185be:	f009 ff75 	bl	80224ac <free>
}
 80185c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185c6:	bf00      	nop
 80185c8:	0802b9b0 	.word	0x0802b9b0
 80185cc:	08029208 	.word	0x08029208
 80185d0:	200011c0 	.word	0x200011c0
 80185d4:	0802bc30 	.word	0x0802bc30
 80185d8:	0802b5c0 	.word	0x0802b5c0
 80185dc:	0802b5a4 	.word	0x0802b5a4
 80185e0:	0802b5c8 	.word	0x0802b5c8
 80185e4:	0802ab08 	.word	0x0802ab08

080185e8 <cmp_setting_group_name>:
{
 80185e8:	b508      	push	{r3, lr}
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
 80185ea:	6803      	ldr	r3, [r0, #0]
 80185ec:	680a      	ldr	r2, [r1, #0]
 80185ee:	6851      	ldr	r1, [r2, #4]
 80185f0:	6858      	ldr	r0, [r3, #4]
 80185f2:	f7ef fd25 	bl	8008040 <strcmp>
}
 80185f6:	bd08      	pop	{r3, pc}

080185f8 <write_name>:
{
 80185f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185fa:	4604      	mov	r4, r0
    char *q = hal.stream.write_n ? strchr(s, '?') : NULL;
 80185fc:	4b10      	ldr	r3, [pc, #64]	@ (8018640 <write_name+0x48>)
 80185fe:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 8018602:	b1bd      	cbz	r5, 8018634 <write_name+0x3c>
 8018604:	460f      	mov	r7, r1
 8018606:	213f      	movs	r1, #63	@ 0x3f
 8018608:	f00c f828 	bl	802465c <strchr>
    if(q) {
 801860c:	4606      	mov	r6, r0
 801860e:	b188      	cbz	r0, 8018634 <write_name+0x3c>
        if(q != s)
 8018610:	4284      	cmp	r4, r0
 8018612:	d003      	beq.n	801861c <write_name+0x24>
            hal.stream.write_n(s, q - s);
 8018614:	1b01      	subs	r1, r0, r4
 8018616:	b289      	uxth	r1, r1
 8018618:	4620      	mov	r0, r4
 801861a:	47a8      	blx	r5
        hal.stream.write(uitoa(offset + 1));
 801861c:	4c08      	ldr	r4, [pc, #32]	@ (8018640 <write_name+0x48>)
 801861e:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8018622:	1c78      	adds	r0, r7, #1
 8018624:	f7fc fe4c 	bl	80152c0 <uitoa>
 8018628:	47a8      	blx	r5
        hal.stream.write(q + 1);
 801862a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801862e:	1c70      	adds	r0, r6, #1
 8018630:	4798      	blx	r3
 8018632:	e004      	b.n	801863e <write_name+0x46>
        hal.stream.write(s);
 8018634:	4b02      	ldr	r3, [pc, #8]	@ (8018640 <write_name+0x48>)
 8018636:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801863a:	4620      	mov	r0, r4
 801863c:	4798      	blx	r3
}
 801863e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018640:	200011c0 	.word	0x200011c0

08018644 <report_settings_detail>:
{
 8018644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018648:	460c      	mov	r4, r1
 801864a:	4615      	mov	r5, r2
    uint_fast8_t suboffset = setting->flags.subgroups ? offset / setting->flags.increment : offset;
 801864c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8018650:	f013 0f04 	tst.w	r3, #4
 8018654:	d004      	beq.n	8018660 <report_settings_detail+0x1c>
 8018656:	f3c3 06c3 	ubfx	r6, r3, #3, #4
 801865a:	fbb2 f6f6 	udiv	r6, r2, r6
 801865e:	e000      	b.n	8018662 <report_settings_detail+0x1e>
 8018660:	4616      	mov	r6, r2
    switch(format)
 8018662:	2803      	cmp	r0, #3
 8018664:	f200 82d3 	bhi.w	8018c0e <report_settings_detail+0x5ca>
 8018668:	e8df f010 	tbh	[pc, r0, lsl #1]
 801866c:	00040132 	.word	0x00040132
 8018670:	01fa01c3 	.word	0x01fa01c3
                hal.stream.write(ASCII_EOL "$");
 8018674:	4f81      	ldr	r7, [pc, #516]	@ (801887c <report_settings_detail+0x238>)
 8018676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801867a:	4881      	ldr	r0, [pc, #516]	@ (8018880 <report_settings_detail+0x23c>)
 801867c:	4798      	blx	r3
                hal.stream.write(uitoa(setting->id + offset));
 801867e:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 8018682:	8820      	ldrh	r0, [r4, #0]
 8018684:	4428      	add	r0, r5
 8018686:	f7fc fe1b 	bl	80152c0 <uitoa>
 801868a:	47c0      	blx	r8
                hal.stream.write(": ");
 801868c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018690:	487c      	ldr	r0, [pc, #496]	@ (8018884 <report_settings_detail+0x240>)
 8018692:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8018694:	78a3      	ldrb	r3, [r4, #2]
 8018696:	2b2b      	cmp	r3, #43	@ 0x2b
 8018698:	d010      	beq.n	80186bc <report_settings_detail+0x78>
                write_name(setting->name, suboffset);
 801869a:	4631      	mov	r1, r6
 801869c:	6860      	ldr	r0, [r4, #4]
 801869e:	f7ff ffab 	bl	80185f8 <write_name>
                switch(setting_datatype_to_external(setting->datatype)) {
 80186a2:	7b20      	ldrb	r0, [r4, #12]
 80186a4:	f004 fed3 	bl	801d44e <setting_datatype_to_external>
 80186a8:	2809      	cmp	r0, #9
 80186aa:	f200 8087 	bhi.w	80187bc <report_settings_detail+0x178>
 80186ae:	e8df f000 	tbb	[pc, r0]
 80186b2:	5d56      	.short	0x5d56
 80186b4:	850c7368 	.word	0x850c7368
 80186b8:	7e858585 	.word	0x7e858585
                    hal.stream.write(axis_letter[offset]);
 80186bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80186c0:	4a71      	ldr	r2, [pc, #452]	@ (8018888 <report_settings_detail+0x244>)
 80186c2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80186c6:	4798      	blx	r3
 80186c8:	e7e7      	b.n	801869a <report_settings_detail+0x56>
                        hal.stream.write(" as axismask");
 80186ca:	4b6c      	ldr	r3, [pc, #432]	@ (801887c <report_settings_detail+0x238>)
 80186cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80186d0:	486e      	ldr	r0, [pc, #440]	@ (801888c <report_settings_detail+0x248>)
 80186d2:	4798      	blx	r3
                bool reboot_newline = false;
 80186d4:	2700      	movs	r7, #0
                if(setting->min_value && setting->max_value) {
 80186d6:	6963      	ldr	r3, [r4, #20]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d07e      	beq.n	80187da <report_settings_detail+0x196>
 80186dc:	69a3      	ldr	r3, [r4, #24]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d07b      	beq.n	80187da <report_settings_detail+0x196>
                    hal.stream.write(", range: ");
 80186e2:	4e66      	ldr	r6, [pc, #408]	@ (801887c <report_settings_detail+0x238>)
 80186e4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80186e8:	4869      	ldr	r0, [pc, #420]	@ (8018890 <report_settings_detail+0x24c>)
 80186ea:	4798      	blx	r3
                    hal.stream.write(setting->min_value);
 80186ec:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80186f0:	6960      	ldr	r0, [r4, #20]
 80186f2:	4798      	blx	r3
                    hal.stream.write(" - ");
 80186f4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80186f8:	4866      	ldr	r0, [pc, #408]	@ (8018894 <report_settings_detail+0x250>)
 80186fa:	4798      	blx	r3
                    hal.stream.write(setting->max_value);
 80186fc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018700:	69a0      	ldr	r0, [r4, #24]
 8018702:	4798      	blx	r3
                if(setting->flags.reboot_required)
 8018704:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018708:	f013 0f01 	tst.w	r3, #1
 801870c:	d006      	beq.n	801871c <report_settings_detail+0xd8>
                    hal.stream.write(reboot_newline ? ASCII_EOL ASCII_EOL "Reboot required." : ", reboot required");
 801870e:	4b5b      	ldr	r3, [pc, #364]	@ (801887c <report_settings_detail+0x238>)
 8018710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018714:	2f00      	cmp	r7, #0
 8018716:	d07d      	beq.n	8018814 <report_settings_detail+0x1d0>
 8018718:	485f      	ldr	r0, [pc, #380]	@ (8018898 <report_settings_detail+0x254>)
 801871a:	4798      	blx	r3
                if(hal.stream.write_n) {
 801871c:	4b57      	ldr	r3, [pc, #348]	@ (801887c <report_settings_detail+0x238>)
 801871e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018722:	2b00      	cmp	r3, #0
 8018724:	f000 8273 	beq.w	8018c0e <report_settings_detail+0x5ca>
                    const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8018728:	8820      	ldrh	r0, [r4, #0]
 801872a:	fa10 f085 	uxtah	r0, r0, r5
 801872e:	b280      	uxth	r0, r0
 8018730:	f004 fdde 	bl	801d2f0 <setting_get_description>
                    if(description && *description != '\0') {
 8018734:	4606      	mov	r6, r0
 8018736:	2800      	cmp	r0, #0
 8018738:	f000 808c 	beq.w	8018854 <report_settings_detail+0x210>
 801873c:	7803      	ldrb	r3, [r0, #0]
 801873e:	2b00      	cmp	r3, #0
 8018740:	f000 8088 	beq.w	8018854 <report_settings_detail+0x210>
                        hal.stream.write(ASCII_EOL);
 8018744:	4b4d      	ldr	r3, [pc, #308]	@ (801887c <report_settings_detail+0x238>)
 8018746:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801874a:	4854      	ldr	r0, [pc, #336]	@ (801889c <report_settings_detail+0x258>)
 801874c:	4798      	blx	r3
                        if((lf = strstr(description, "\\n"))) while(lf) {
 801874e:	4954      	ldr	r1, [pc, #336]	@ (80188a0 <report_settings_detail+0x25c>)
 8018750:	4630      	mov	r0, r6
 8018752:	f00c f827 	bl	80247a4 <strstr>
 8018756:	4605      	mov	r5, r0
 8018758:	2800      	cmp	r0, #0
 801875a:	d16e      	bne.n	801883a <report_settings_detail+0x1f6>
 801875c:	e06f      	b.n	801883e <report_settings_detail+0x1fa>
                        hal.stream.write(" as boolean");
 801875e:	4b47      	ldr	r3, [pc, #284]	@ (801887c <report_settings_detail+0x238>)
 8018760:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018764:	484f      	ldr	r0, [pc, #316]	@ (80188a4 <report_settings_detail+0x260>)
 8018766:	4798      	blx	r3
                bool reboot_newline = false;
 8018768:	2700      	movs	r7, #0
                        break;
 801876a:	e7b4      	b.n	80186d6 <report_settings_detail+0x92>
                        hal.stream.write(" as bitfield:");
 801876c:	4b43      	ldr	r3, [pc, #268]	@ (801887c <report_settings_detail+0x238>)
 801876e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018772:	484d      	ldr	r0, [pc, #308]	@ (80188a8 <report_settings_detail+0x264>)
 8018774:	4798      	blx	r3
                        report_bitfield(setting->format, true);
 8018776:	2101      	movs	r1, #1
 8018778:	6920      	ldr	r0, [r4, #16]
 801877a:	f7ff fecd 	bl	8018518 <report_bitfield>
                        reboot_newline = true;
 801877e:	2701      	movs	r7, #1
                        break;
 8018780:	e7a9      	b.n	80186d6 <report_settings_detail+0x92>
                        hal.stream.write(" as bitfield where setting bit 0 enables the rest:");
 8018782:	4b3e      	ldr	r3, [pc, #248]	@ (801887c <report_settings_detail+0x238>)
 8018784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018788:	4848      	ldr	r0, [pc, #288]	@ (80188ac <report_settings_detail+0x268>)
 801878a:	4798      	blx	r3
                        report_bitfield(setting->format, true);
 801878c:	2101      	movs	r1, #1
 801878e:	6920      	ldr	r0, [r4, #16]
 8018790:	f7ff fec2 	bl	8018518 <report_bitfield>
                        reboot_newline = true;
 8018794:	2701      	movs	r7, #1
                        break;
 8018796:	e79e      	b.n	80186d6 <report_settings_detail+0x92>
                        hal.stream.write(":");
 8018798:	4b38      	ldr	r3, [pc, #224]	@ (801887c <report_settings_detail+0x238>)
 801879a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801879e:	4844      	ldr	r0, [pc, #272]	@ (80188b0 <report_settings_detail+0x26c>)
 80187a0:	4798      	blx	r3
                        report_bitfield(setting->format, false);
 80187a2:	2100      	movs	r1, #0
 80187a4:	6920      	ldr	r0, [r4, #16]
 80187a6:	f7ff feb7 	bl	8018518 <report_bitfield>
                        reboot_newline = true;
 80187aa:	2701      	movs	r7, #1
                        break;
 80187ac:	e793      	b.n	80186d6 <report_settings_detail+0x92>
                        hal.stream.write(" as IP address");
 80187ae:	4b33      	ldr	r3, [pc, #204]	@ (801887c <report_settings_detail+0x238>)
 80187b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80187b4:	483f      	ldr	r0, [pc, #252]	@ (80188b4 <report_settings_detail+0x270>)
 80187b6:	4798      	blx	r3
                bool reboot_newline = false;
 80187b8:	2700      	movs	r7, #0
                        break;
 80187ba:	e78c      	b.n	80186d6 <report_settings_detail+0x92>
                        if(setting->unit) {
 80187bc:	68a3      	ldr	r3, [r4, #8]
 80187be:	b153      	cbz	r3, 80187d6 <report_settings_detail+0x192>
                            hal.stream.write(" in ");
 80187c0:	4e2e      	ldr	r6, [pc, #184]	@ (801887c <report_settings_detail+0x238>)
 80187c2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80187c6:	483c      	ldr	r0, [pc, #240]	@ (80188b8 <report_settings_detail+0x274>)
 80187c8:	4798      	blx	r3
                            hal.stream.write(setting->unit);
 80187ca:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80187ce:	68a0      	ldr	r0, [r4, #8]
 80187d0:	4798      	blx	r3
                bool reboot_newline = false;
 80187d2:	2700      	movs	r7, #0
 80187d4:	e77f      	b.n	80186d6 <report_settings_detail+0x92>
 80187d6:	2700      	movs	r7, #0
 80187d8:	e77d      	b.n	80186d6 <report_settings_detail+0x92>
                } else if(!setting_is_list(setting)) {
 80187da:	4620      	mov	r0, r4
 80187dc:	f004 fe3e 	bl	801d45c <setting_is_list>
 80187e0:	2800      	cmp	r0, #0
 80187e2:	d18f      	bne.n	8018704 <report_settings_detail+0xc0>
                    if(setting->min_value) {
 80187e4:	6963      	ldr	r3, [r4, #20]
 80187e6:	b143      	cbz	r3, 80187fa <report_settings_detail+0x1b6>
                        hal.stream.write(", min: ");
 80187e8:	4e24      	ldr	r6, [pc, #144]	@ (801887c <report_settings_detail+0x238>)
 80187ea:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80187ee:	4833      	ldr	r0, [pc, #204]	@ (80188bc <report_settings_detail+0x278>)
 80187f0:	4798      	blx	r3
                        hal.stream.write(setting->min_value);
 80187f2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 80187f6:	6960      	ldr	r0, [r4, #20]
 80187f8:	4798      	blx	r3
                    if(setting->max_value) {
 80187fa:	69a3      	ldr	r3, [r4, #24]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d081      	beq.n	8018704 <report_settings_detail+0xc0>
                        hal.stream.write(", max: ");
 8018800:	4e1e      	ldr	r6, [pc, #120]	@ (801887c <report_settings_detail+0x238>)
 8018802:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018806:	482e      	ldr	r0, [pc, #184]	@ (80188c0 <report_settings_detail+0x27c>)
 8018808:	4798      	blx	r3
                        hal.stream.write(setting->max_value);
 801880a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801880e:	69a0      	ldr	r0, [r4, #24]
 8018810:	4798      	blx	r3
 8018812:	e777      	b.n	8018704 <report_settings_detail+0xc0>
                    hal.stream.write(reboot_newline ? ASCII_EOL ASCII_EOL "Reboot required." : ", reboot required");
 8018814:	482b      	ldr	r0, [pc, #172]	@ (80188c4 <report_settings_detail+0x280>)
 8018816:	e780      	b.n	801871a <report_settings_detail+0xd6>
                            hal.stream.write(ASCII_EOL);
 8018818:	4f18      	ldr	r7, [pc, #96]	@ (801887c <report_settings_detail+0x238>)
 801881a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801881e:	481f      	ldr	r0, [pc, #124]	@ (801889c <report_settings_detail+0x258>)
 8018820:	4798      	blx	r3
                            hal.stream.write_n(description, lf - description);
 8018822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018826:	1ba9      	subs	r1, r5, r6
 8018828:	b289      	uxth	r1, r1
 801882a:	4630      	mov	r0, r6
 801882c:	4798      	blx	r3
                            description = lf + 2;
 801882e:	1cae      	adds	r6, r5, #2
                            lf = strstr(description, "\\n");
 8018830:	491b      	ldr	r1, [pc, #108]	@ (80188a0 <report_settings_detail+0x25c>)
 8018832:	4630      	mov	r0, r6
 8018834:	f00b ffb6 	bl	80247a4 <strstr>
 8018838:	4605      	mov	r5, r0
                        if((lf = strstr(description, "\\n"))) while(lf) {
 801883a:	2d00      	cmp	r5, #0
 801883c:	d1ec      	bne.n	8018818 <report_settings_detail+0x1d4>
                        if(*description != '\0') {
 801883e:	7833      	ldrb	r3, [r6, #0]
 8018840:	b143      	cbz	r3, 8018854 <report_settings_detail+0x210>
                            hal.stream.write(ASCII_EOL);
 8018842:	4d0e      	ldr	r5, [pc, #56]	@ (801887c <report_settings_detail+0x238>)
 8018844:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018848:	4814      	ldr	r0, [pc, #80]	@ (801889c <report_settings_detail+0x258>)
 801884a:	4798      	blx	r3
                            hal.stream.write(description);
 801884c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018850:	4630      	mov	r0, r6
 8018852:	4798      	blx	r3
                    if(setting->flags.reboot_required) {
 8018854:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018858:	f013 0f01 	tst.w	r3, #1
 801885c:	f000 81d7 	beq.w	8018c0e <report_settings_detail+0x5ca>
                        if(description && *description != '\0')
 8018860:	b136      	cbz	r6, 8018870 <report_settings_detail+0x22c>
 8018862:	7833      	ldrb	r3, [r6, #0]
 8018864:	b123      	cbz	r3, 8018870 <report_settings_detail+0x22c>
                            hal.stream.write(ASCII_EOL ASCII_EOL);
 8018866:	4b05      	ldr	r3, [pc, #20]	@ (801887c <report_settings_detail+0x238>)
 8018868:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801886c:	4816      	ldr	r0, [pc, #88]	@ (80188c8 <report_settings_detail+0x284>)
 801886e:	4798      	blx	r3
                        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + 4);
 8018870:	4b02      	ldr	r3, [pc, #8]	@ (801887c <report_settings_detail+0x238>)
 8018872:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018876:	4815      	ldr	r0, [pc, #84]	@ (80188cc <report_settings_detail+0x288>)
 8018878:	4798      	blx	r3
 801887a:	e1c8      	b.n	8018c0e <report_settings_detail+0x5ca>
 801887c:	200011c0 	.word	0x200011c0
 8018880:	0802b64c 	.word	0x0802b64c
 8018884:	0802b80c 	.word	0x0802b80c
 8018888:	0802b3ec 	.word	0x0802b3ec
 801888c:	0802b650 	.word	0x0802b650
 8018890:	0802b6c8 	.word	0x0802b6c8
 8018894:	0802b5a4 	.word	0x0802b5a4
 8018898:	0802b5cc 	.word	0x0802b5cc
 801889c:	0802bc30 	.word	0x0802bc30
 80188a0:	0802b6e4 	.word	0x0802b6e4
 80188a4:	0802b660 	.word	0x0802b660
 80188a8:	0802b66c 	.word	0x0802b66c
 80188ac:	0802b67c 	.word	0x0802b67c
 80188b0:	0802b8ec 	.word	0x0802b8ec
 80188b4:	0802b6b0 	.word	0x0802b6b0
 80188b8:	0802b6c0 	.word	0x0802b6c0
 80188bc:	0802b6d4 	.word	0x0802b6d4
 80188c0:	0802b6dc 	.word	0x0802b6dc
 80188c4:	0802b5e4 	.word	0x0802b5e4
 80188c8:	0802b6e8 	.word	0x0802b6e8
 80188cc:	0802b5fc 	.word	0x0802b5fc
            hal.stream.write("[SETTING:");
 80188d0:	4f8f      	ldr	r7, [pc, #572]	@ (8018b10 <report_settings_detail+0x4cc>)
 80188d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80188d6:	488f      	ldr	r0, [pc, #572]	@ (8018b14 <report_settings_detail+0x4d0>)
 80188d8:	4798      	blx	r3
            hal.stream.write(uitoa(setting->id + offset));
 80188da:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 80188de:	8820      	ldrh	r0, [r4, #0]
 80188e0:	4428      	add	r0, r5
 80188e2:	f7fc fced 	bl	80152c0 <uitoa>
 80188e6:	47c0      	blx	r8
            hal.stream.write(vbar);
 80188e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80188ec:	488a      	ldr	r0, [pc, #552]	@ (8018b18 <report_settings_detail+0x4d4>)
 80188ee:	4798      	blx	r3
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 80188f0:	f8d7 70b4 	ldr.w	r7, [r7, #180]	@ 0xb4
 80188f4:	78a0      	ldrb	r0, [r4, #2]
 80188f6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80188fa:	f013 0f04 	tst.w	r3, #4
 80188fe:	d06e      	beq.n	80189de <report_settings_detail+0x39a>
 8018900:	4633      	mov	r3, r6
 8018902:	4418      	add	r0, r3
 8018904:	f7fc fcdc 	bl	80152c0 <uitoa>
 8018908:	47b8      	blx	r7
            hal.stream.write(vbar);
 801890a:	4b81      	ldr	r3, [pc, #516]	@ (8018b10 <report_settings_detail+0x4cc>)
 801890c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018910:	4881      	ldr	r0, [pc, #516]	@ (8018b18 <report_settings_detail+0x4d4>)
 8018912:	4798      	blx	r3
            if(setting->group == Group_Axis0)
 8018914:	78a3      	ldrb	r3, [r4, #2]
 8018916:	2b2b      	cmp	r3, #43	@ 0x2b
 8018918:	d063      	beq.n	80189e2 <report_settings_detail+0x39e>
            write_name(setting->name, suboffset);
 801891a:	4631      	mov	r1, r6
 801891c:	6860      	ldr	r0, [r4, #4]
 801891e:	f7ff fe6b 	bl	80185f8 <write_name>
            hal.stream.write(vbar);
 8018922:	4b7b      	ldr	r3, [pc, #492]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018924:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018928:	487b      	ldr	r0, [pc, #492]	@ (8018b18 <report_settings_detail+0x4d4>)
 801892a:	4798      	blx	r3
            if(setting->unit)
 801892c:	68a0      	ldr	r0, [r4, #8]
 801892e:	b118      	cbz	r0, 8018938 <report_settings_detail+0x2f4>
                hal.stream.write(setting->unit);
 8018930:	4b77      	ldr	r3, [pc, #476]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018932:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018936:	4798      	blx	r3
            hal.stream.write(vbar);
 8018938:	4d75      	ldr	r5, [pc, #468]	@ (8018b10 <report_settings_detail+0x4cc>)
 801893a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801893e:	4e76      	ldr	r6, [pc, #472]	@ (8018b18 <report_settings_detail+0x4d4>)
 8018940:	4630      	mov	r0, r6
 8018942:	4798      	blx	r3
            hal.stream.write(uitoa(setting_datatype_to_external(setting->datatype)));
 8018944:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8018948:	7b20      	ldrb	r0, [r4, #12]
 801894a:	f004 fd80 	bl	801d44e <setting_datatype_to_external>
 801894e:	f7fc fcb7 	bl	80152c0 <uitoa>
 8018952:	47b8      	blx	r7
            hal.stream.write(vbar);
 8018954:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018958:	4630      	mov	r0, r6
 801895a:	4798      	blx	r3
            if(setting->format)
 801895c:	6920      	ldr	r0, [r4, #16]
 801895e:	b110      	cbz	r0, 8018966 <report_settings_detail+0x322>
                hal.stream.write(setting->format);
 8018960:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018964:	4798      	blx	r3
            hal.stream.write(vbar);
 8018966:	4b6a      	ldr	r3, [pc, #424]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018968:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801896c:	486a      	ldr	r0, [pc, #424]	@ (8018b18 <report_settings_detail+0x4d4>)
 801896e:	4798      	blx	r3
            if(setting->min_value && !setting_is_list(setting))
 8018970:	6963      	ldr	r3, [r4, #20]
 8018972:	b143      	cbz	r3, 8018986 <report_settings_detail+0x342>
 8018974:	4620      	mov	r0, r4
 8018976:	f004 fd71 	bl	801d45c <setting_is_list>
 801897a:	b920      	cbnz	r0, 8018986 <report_settings_detail+0x342>
                hal.stream.write(setting->min_value);
 801897c:	4b64      	ldr	r3, [pc, #400]	@ (8018b10 <report_settings_detail+0x4cc>)
 801897e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018982:	6960      	ldr	r0, [r4, #20]
 8018984:	4798      	blx	r3
            hal.stream.write(vbar);
 8018986:	4b62      	ldr	r3, [pc, #392]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801898c:	4862      	ldr	r0, [pc, #392]	@ (8018b18 <report_settings_detail+0x4d4>)
 801898e:	4798      	blx	r3
            if(setting->max_value)
 8018990:	69a0      	ldr	r0, [r4, #24]
 8018992:	b118      	cbz	r0, 801899c <report_settings_detail+0x358>
                hal.stream.write(setting->max_value);
 8018994:	4b5e      	ldr	r3, [pc, #376]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801899a:	4798      	blx	r3
            hal.stream.write(vbar);
 801899c:	4d5c      	ldr	r5, [pc, #368]	@ (8018b10 <report_settings_detail+0x4cc>)
 801899e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80189a2:	4e5d      	ldr	r6, [pc, #372]	@ (8018b18 <report_settings_detail+0x4d4>)
 80189a4:	4630      	mov	r0, r6
 80189a6:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.reboot_required));
 80189a8:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 80189ac:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80189b0:	f000 0001 	and.w	r0, r0, #1
 80189b4:	f7fc fc84 	bl	80152c0 <uitoa>
 80189b8:	47b8      	blx	r7
            hal.stream.write(vbar);
 80189ba:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80189be:	4630      	mov	r0, r6
 80189c0:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.allow_null));
 80189c2:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80189c6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80189ca:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80189ce:	f7fc fc77 	bl	80152c0 <uitoa>
 80189d2:	47b0      	blx	r6
            hal.stream.write("]");
 80189d4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80189d8:	4850      	ldr	r0, [pc, #320]	@ (8018b1c <report_settings_detail+0x4d8>)
 80189da:	4798      	blx	r3
            break;
 80189dc:	e117      	b.n	8018c0e <report_settings_detail+0x5ca>
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 80189de:	2300      	movs	r3, #0
 80189e0:	e78f      	b.n	8018902 <report_settings_detail+0x2be>
                hal.stream.write(axis_letter[offset]);
 80189e2:	4b4b      	ldr	r3, [pc, #300]	@ (8018b10 <report_settings_detail+0x4cc>)
 80189e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80189e8:	4a4d      	ldr	r2, [pc, #308]	@ (8018b20 <report_settings_detail+0x4dc>)
 80189ea:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80189ee:	4798      	blx	r3
 80189f0:	e793      	b.n	801891a <report_settings_detail+0x2d6>
                write_quoted(uitoa(setting->id + offset), ",");
 80189f2:	8820      	ldrh	r0, [r4, #0]
 80189f4:	4428      	add	r0, r5
 80189f6:	f7fc fc63 	bl	80152c0 <uitoa>
 80189fa:	494a      	ldr	r1, [pc, #296]	@ (8018b24 <report_settings_detail+0x4e0>)
 80189fc:	f7ff f9c4 	bl	8017d88 <write_quoted>
                hal.stream.write("\"");
 8018a00:	4b43      	ldr	r3, [pc, #268]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018a02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a06:	4848      	ldr	r0, [pc, #288]	@ (8018b28 <report_settings_detail+0x4e4>)
 8018a08:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8018a0a:	78a3      	ldrb	r3, [r4, #2]
 8018a0c:	2b2b      	cmp	r3, #43	@ 0x2b
 8018a0e:	d018      	beq.n	8018a42 <report_settings_detail+0x3fe>
                write_name(setting->name, suboffset);
 8018a10:	4631      	mov	r1, r6
 8018a12:	6860      	ldr	r0, [r4, #4]
 8018a14:	f7ff fdf0 	bl	80185f8 <write_name>
                hal.stream.write("\",");
 8018a18:	4b3d      	ldr	r3, [pc, #244]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018a1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a1e:	4843      	ldr	r0, [pc, #268]	@ (8018b2c <report_settings_detail+0x4e8>)
 8018a20:	4798      	blx	r3
                if(setting->unit) {
 8018a22:	68a0      	ldr	r0, [r4, #8]
 8018a24:	b1a8      	cbz	r0, 8018a52 <report_settings_detail+0x40e>
                    write_quoted(setting->unit, ",");
 8018a26:	493f      	ldr	r1, [pc, #252]	@ (8018b24 <report_settings_detail+0x4e0>)
 8018a28:	f7ff f9ae 	bl	8017d88 <write_quoted>
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8018a2c:	8820      	ldrh	r0, [r4, #0]
 8018a2e:	fa10 f085 	uxtah	r0, r0, r5
 8018a32:	b280      	uxth	r0, r0
 8018a34:	f004 fc5c 	bl	801d2f0 <setting_get_description>
                write_quoted(description ? description : "", ",");
 8018a38:	b180      	cbz	r0, 8018a5c <report_settings_detail+0x418>
 8018a3a:	493a      	ldr	r1, [pc, #232]	@ (8018b24 <report_settings_detail+0x4e0>)
 8018a3c:	f7ff f9a4 	bl	8017d88 <write_quoted>
            break;
 8018a40:	e0e5      	b.n	8018c0e <report_settings_detail+0x5ca>
                    hal.stream.write(axis_letter[offset]);
 8018a42:	4b33      	ldr	r3, [pc, #204]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018a44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a48:	4a35      	ldr	r2, [pc, #212]	@ (8018b20 <report_settings_detail+0x4dc>)
 8018a4a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018a4e:	4798      	blx	r3
 8018a50:	e7de      	b.n	8018a10 <report_settings_detail+0x3cc>
                    write_quoted("", ",");
 8018a52:	4934      	ldr	r1, [pc, #208]	@ (8018b24 <report_settings_detail+0x4e0>)
 8018a54:	4836      	ldr	r0, [pc, #216]	@ (8018b30 <report_settings_detail+0x4ec>)
 8018a56:	f7ff f997 	bl	8017d88 <write_quoted>
 8018a5a:	e7e7      	b.n	8018a2c <report_settings_detail+0x3e8>
                write_quoted(description ? description : "", ",");
 8018a5c:	4834      	ldr	r0, [pc, #208]	@ (8018b30 <report_settings_detail+0x4ec>)
 8018a5e:	e7ec      	b.n	8018a3a <report_settings_detail+0x3f6>
                hal.stream.write(uitoa(setting->id + offset));
 8018a60:	4f2b      	ldr	r7, [pc, #172]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018a62:	f8d7 80b4 	ldr.w	r8, [r7, #180]	@ 0xb4
 8018a66:	8820      	ldrh	r0, [r4, #0]
 8018a68:	4428      	add	r0, r5
 8018a6a:	f7fc fc29 	bl	80152c0 <uitoa>
 8018a6e:	47c0      	blx	r8
                hal.stream.write("\t");
 8018a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018a74:	482f      	ldr	r0, [pc, #188]	@ (8018b34 <report_settings_detail+0x4f0>)
 8018a76:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8018a78:	78a3      	ldrb	r3, [r4, #2]
 8018a7a:	2b2b      	cmp	r3, #43	@ 0x2b
 8018a7c:	d024      	beq.n	8018ac8 <report_settings_detail+0x484>
                write_name(setting->name, suboffset);
 8018a7e:	4631      	mov	r1, r6
 8018a80:	6860      	ldr	r0, [r4, #4]
 8018a82:	f7ff fdb9 	bl	80185f8 <write_name>
                hal.stream.write("\t");
 8018a86:	4b22      	ldr	r3, [pc, #136]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018a88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a8c:	4829      	ldr	r0, [pc, #164]	@ (8018b34 <report_settings_detail+0x4f0>)
 8018a8e:	4798      	blx	r3
                if(setting->unit)
 8018a90:	68a0      	ldr	r0, [r4, #8]
 8018a92:	b300      	cbz	r0, 8018ad6 <report_settings_detail+0x492>
                    hal.stream.write(setting->unit);
 8018a94:	4b1e      	ldr	r3, [pc, #120]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018a96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018a9a:	4798      	blx	r3
                hal.stream.write("\t");
 8018a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018aa2:	4824      	ldr	r0, [pc, #144]	@ (8018b34 <report_settings_detail+0x4f0>)
 8018aa4:	4798      	blx	r3
                switch(setting_datatype_to_external(setting->datatype)) {
 8018aa6:	7b20      	ldrb	r0, [r4, #12]
 8018aa8:	f004 fcd1 	bl	801d44e <setting_datatype_to_external>
 8018aac:	2809      	cmp	r0, #9
 8018aae:	d84e      	bhi.n	8018b4e <report_settings_detail+0x50a>
 8018ab0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8018ab4:	00c000ba 	.word	0x00c000ba
 8018ab8:	00cc00c6 	.word	0x00cc00c6
 8018abc:	004800c0 	.word	0x004800c0
 8018ac0:	00d800b4 	.word	0x00d800b4
 8018ac4:	00d200de 	.word	0x00d200de
                    hal.stream.write(axis_letter[offset]);
 8018ac8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8018acc:	4a14      	ldr	r2, [pc, #80]	@ (8018b20 <report_settings_detail+0x4dc>)
 8018ace:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018ad2:	4798      	blx	r3
 8018ad4:	e7d3      	b.n	8018a7e <report_settings_detail+0x43a>
                else if(setting->datatype == Format_AxisMask || setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield)
 8018ad6:	7b23      	ldrb	r3, [r4, #12]
 8018ad8:	2b04      	cmp	r3, #4
 8018ada:	d00a      	beq.n	8018af2 <report_settings_detail+0x4ae>
 8018adc:	2b01      	cmp	r3, #1
 8018ade:	d008      	beq.n	8018af2 <report_settings_detail+0x4ae>
 8018ae0:	2b02      	cmp	r3, #2
 8018ae2:	d006      	beq.n	8018af2 <report_settings_detail+0x4ae>
                else if(setting->datatype == Format_Bool)
 8018ae4:	b95b      	cbnz	r3, 8018afe <report_settings_detail+0x4ba>
                    hal.stream.write("boolean");
 8018ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018ae8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018aec:	4812      	ldr	r0, [pc, #72]	@ (8018b38 <report_settings_detail+0x4f4>)
 8018aee:	4798      	blx	r3
 8018af0:	e7d4      	b.n	8018a9c <report_settings_detail+0x458>
                    hal.stream.write("mask");
 8018af2:	4b07      	ldr	r3, [pc, #28]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018af8:	4810      	ldr	r0, [pc, #64]	@ (8018b3c <report_settings_detail+0x4f8>)
 8018afa:	4798      	blx	r3
 8018afc:	e7ce      	b.n	8018a9c <report_settings_detail+0x458>
                else if(setting->datatype == Format_RadioButtons)
 8018afe:	2b03      	cmp	r3, #3
 8018b00:	d1cc      	bne.n	8018a9c <report_settings_detail+0x458>
                    hal.stream.write("integer");
 8018b02:	4b03      	ldr	r3, [pc, #12]	@ (8018b10 <report_settings_detail+0x4cc>)
 8018b04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b08:	480d      	ldr	r0, [pc, #52]	@ (8018b40 <report_settings_detail+0x4fc>)
 8018b0a:	4798      	blx	r3
 8018b0c:	e7c6      	b.n	8018a9c <report_settings_detail+0x458>
 8018b0e:	bf00      	nop
 8018b10:	200011c0 	.word	0x200011c0
 8018b14:	0802b6f0 	.word	0x0802b6f0
 8018b18:	0802bdac 	.word	0x0802bdac
 8018b1c:	0802b6fc 	.word	0x0802b6fc
 8018b20:	0802b3ec 	.word	0x0802b3ec
 8018b24:	0802b9b0 	.word	0x0802b9b0
 8018b28:	0802b548 	.word	0x0802b548
 8018b2c:	0802b700 	.word	0x0802b700
 8018b30:	0802b6ec 	.word	0x0802b6ec
 8018b34:	0802b704 	.word	0x0802b704
 8018b38:	0802b664 	.word	0x0802b664
 8018b3c:	0802b658 	.word	0x0802b658
 8018b40:	0802b708 	.word	0x0802b708
                        hal.stream.write("integer");
 8018b44:	4b55      	ldr	r3, [pc, #340]	@ (8018c9c <report_settings_detail+0x658>)
 8018b46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b4a:	4855      	ldr	r0, [pc, #340]	@ (8018ca0 <report_settings_detail+0x65c>)
 8018b4c:	4798      	blx	r3
                hal.stream.write("\t");
 8018b4e:	4b53      	ldr	r3, [pc, #332]	@ (8018c9c <report_settings_detail+0x658>)
 8018b50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b54:	4853      	ldr	r0, [pc, #332]	@ (8018ca4 <report_settings_detail+0x660>)
 8018b56:	4798      	blx	r3
                if(setting->format)
 8018b58:	6920      	ldr	r0, [r4, #16]
 8018b5a:	2800      	cmp	r0, #0
 8018b5c:	f000 808e 	beq.w	8018c7c <report_settings_detail+0x638>
                    hal.stream.write(setting->format);
 8018b60:	4b4e      	ldr	r3, [pc, #312]	@ (8018c9c <report_settings_detail+0x658>)
 8018b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b66:	4798      	blx	r3
                hal.stream.write("\t");
 8018b68:	4e4c      	ldr	r6, [pc, #304]	@ (8018c9c <report_settings_detail+0x658>)
 8018b6a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018b6e:	484d      	ldr	r0, [pc, #308]	@ (8018ca4 <report_settings_detail+0x660>)
 8018b70:	4798      	blx	r3
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8018b72:	8823      	ldrh	r3, [r4, #0]
 8018b74:	fa13 f085 	uxtah	r0, r3, r5
 8018b78:	b280      	uxth	r0, r0
 8018b7a:	f004 fbb9 	bl	801d2f0 <setting_get_description>
                hal.stream.write(description ? description : "");
 8018b7e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018b82:	4605      	mov	r5, r0
 8018b84:	2800      	cmp	r0, #0
 8018b86:	f000 8083 	beq.w	8018c90 <report_settings_detail+0x64c>
 8018b8a:	4798      	blx	r3
                if(setting->flags.reboot_required)
 8018b8c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018b90:	f013 0f01 	tst.w	r3, #1
 8018b94:	d009      	beq.n	8018baa <report_settings_detail+0x566>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8018b96:	4b41      	ldr	r3, [pc, #260]	@ (8018c9c <report_settings_detail+0x658>)
 8018b98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b9c:	2d00      	cmp	r5, #0
 8018b9e:	d079      	beq.n	8018c94 <report_settings_detail+0x650>
 8018ba0:	782a      	ldrb	r2, [r5, #0]
 8018ba2:	2a00      	cmp	r2, #0
 8018ba4:	d178      	bne.n	8018c98 <report_settings_detail+0x654>
 8018ba6:	4840      	ldr	r0, [pc, #256]	@ (8018ca8 <report_settings_detail+0x664>)
 8018ba8:	4798      	blx	r3
                hal.stream.write("\t");
 8018baa:	4b3c      	ldr	r3, [pc, #240]	@ (8018c9c <report_settings_detail+0x658>)
 8018bac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018bb0:	483c      	ldr	r0, [pc, #240]	@ (8018ca4 <report_settings_detail+0x660>)
 8018bb2:	4798      	blx	r3
                if(setting->min_value)
 8018bb4:	6960      	ldr	r0, [r4, #20]
 8018bb6:	b118      	cbz	r0, 8018bc0 <report_settings_detail+0x57c>
                    hal.stream.write(setting->min_value);
 8018bb8:	4b38      	ldr	r3, [pc, #224]	@ (8018c9c <report_settings_detail+0x658>)
 8018bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018bbe:	4798      	blx	r3
                hal.stream.write("\t");
 8018bc0:	4b36      	ldr	r3, [pc, #216]	@ (8018c9c <report_settings_detail+0x658>)
 8018bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018bc6:	4837      	ldr	r0, [pc, #220]	@ (8018ca4 <report_settings_detail+0x660>)
 8018bc8:	4798      	blx	r3
                if(setting->max_value)
 8018bca:	69a0      	ldr	r0, [r4, #24]
 8018bcc:	b118      	cbz	r0, 8018bd6 <report_settings_detail+0x592>
                    hal.stream.write(setting->max_value);
 8018bce:	4b33      	ldr	r3, [pc, #204]	@ (8018c9c <report_settings_detail+0x658>)
 8018bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018bd4:	4798      	blx	r3
                hal.stream.write("\t");
 8018bd6:	4d31      	ldr	r5, [pc, #196]	@ (8018c9c <report_settings_detail+0x658>)
 8018bd8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018bdc:	4e31      	ldr	r6, [pc, #196]	@ (8018ca4 <report_settings_detail+0x660>)
 8018bde:	4630      	mov	r0, r6
 8018be0:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.reboot_required));
 8018be2:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8018be6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018bea:	f000 0001 	and.w	r0, r0, #1
 8018bee:	f7fc fb67 	bl	80152c0 <uitoa>
 8018bf2:	47b8      	blx	r7
                hal.stream.write("\t");
 8018bf4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.allow_null));
 8018bfc:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8018c00:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018c04:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8018c08:	f7fc fb5a 	bl	80152c0 <uitoa>
 8018c0c:	47a8      	blx	r5
    hal.stream.write(ASCII_EOL);
 8018c0e:	4b23      	ldr	r3, [pc, #140]	@ (8018c9c <report_settings_detail+0x658>)
 8018c10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c14:	4825      	ldr	r0, [pc, #148]	@ (8018cac <report_settings_detail+0x668>)
 8018c16:	4798      	blx	r3
}
 8018c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        hal.stream.write("float");
 8018c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8018c9c <report_settings_detail+0x658>)
 8018c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c22:	4823      	ldr	r0, [pc, #140]	@ (8018cb0 <report_settings_detail+0x66c>)
 8018c24:	4798      	blx	r3
                        break;
 8018c26:	e792      	b.n	8018b4e <report_settings_detail+0x50a>
                        hal.stream.write("bool");
 8018c28:	4b1c      	ldr	r3, [pc, #112]	@ (8018c9c <report_settings_detail+0x658>)
 8018c2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c2e:	4821      	ldr	r0, [pc, #132]	@ (8018cb4 <report_settings_detail+0x670>)
 8018c30:	4798      	blx	r3
                        break;
 8018c32:	e78c      	b.n	8018b4e <report_settings_detail+0x50a>
                        hal.stream.write("bitfield");
 8018c34:	4b19      	ldr	r3, [pc, #100]	@ (8018c9c <report_settings_detail+0x658>)
 8018c36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c3a:	481f      	ldr	r0, [pc, #124]	@ (8018cb8 <report_settings_detail+0x674>)
 8018c3c:	4798      	blx	r3
                        break;
 8018c3e:	e786      	b.n	8018b4e <report_settings_detail+0x50a>
                        hal.stream.write("xbitfield");
 8018c40:	4b16      	ldr	r3, [pc, #88]	@ (8018c9c <report_settings_detail+0x658>)
 8018c42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c46:	481d      	ldr	r0, [pc, #116]	@ (8018cbc <report_settings_detail+0x678>)
 8018c48:	4798      	blx	r3
                        break;
 8018c4a:	e780      	b.n	8018b4e <report_settings_detail+0x50a>
                        hal.stream.write("radiobuttons");
 8018c4c:	4b13      	ldr	r3, [pc, #76]	@ (8018c9c <report_settings_detail+0x658>)
 8018c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c52:	481b      	ldr	r0, [pc, #108]	@ (8018cc0 <report_settings_detail+0x67c>)
 8018c54:	4798      	blx	r3
                        break;
 8018c56:	e77a      	b.n	8018b4e <report_settings_detail+0x50a>
                        hal.stream.write("ipv4");
 8018c58:	4b10      	ldr	r3, [pc, #64]	@ (8018c9c <report_settings_detail+0x658>)
 8018c5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c5e:	4819      	ldr	r0, [pc, #100]	@ (8018cc4 <report_settings_detail+0x680>)
 8018c60:	4798      	blx	r3
                        break;
 8018c62:	e774      	b.n	8018b4e <report_settings_detail+0x50a>
                        hal.stream.write("string");
 8018c64:	4b0d      	ldr	r3, [pc, #52]	@ (8018c9c <report_settings_detail+0x658>)
 8018c66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c6a:	4817      	ldr	r0, [pc, #92]	@ (8018cc8 <report_settings_detail+0x684>)
 8018c6c:	4798      	blx	r3
                        break;
 8018c6e:	e76e      	b.n	8018b4e <report_settings_detail+0x50a>
                        hal.stream.write("password");
 8018c70:	4b0a      	ldr	r3, [pc, #40]	@ (8018c9c <report_settings_detail+0x658>)
 8018c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c76:	4815      	ldr	r0, [pc, #84]	@ (8018ccc <report_settings_detail+0x688>)
 8018c78:	4798      	blx	r3
                        break;
 8018c7a:	e768      	b.n	8018b4e <report_settings_detail+0x50a>
                else if (setting->datatype == Format_AxisMask)
 8018c7c:	7b23      	ldrb	r3, [r4, #12]
 8018c7e:	2b04      	cmp	r3, #4
 8018c80:	f47f af72 	bne.w	8018b68 <report_settings_detail+0x524>
                    hal.stream.write("axes");
 8018c84:	4b05      	ldr	r3, [pc, #20]	@ (8018c9c <report_settings_detail+0x658>)
 8018c86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018c8a:	4811      	ldr	r0, [pc, #68]	@ (8018cd0 <report_settings_detail+0x68c>)
 8018c8c:	4798      	blx	r3
 8018c8e:	e76b      	b.n	8018b68 <report_settings_detail+0x524>
                hal.stream.write(description ? description : "");
 8018c90:	4810      	ldr	r0, [pc, #64]	@ (8018cd4 <report_settings_detail+0x690>)
 8018c92:	e77a      	b.n	8018b8a <report_settings_detail+0x546>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8018c94:	4804      	ldr	r0, [pc, #16]	@ (8018ca8 <report_settings_detail+0x664>)
 8018c96:	e787      	b.n	8018ba8 <report_settings_detail+0x564>
 8018c98:	480f      	ldr	r0, [pc, #60]	@ (8018cd8 <report_settings_detail+0x694>)
 8018c9a:	e785      	b.n	8018ba8 <report_settings_detail+0x564>
 8018c9c:	200011c0 	.word	0x200011c0
 8018ca0:	0802b708 	.word	0x0802b708
 8018ca4:	0802b704 	.word	0x0802b704
 8018ca8:	0802b5fc 	.word	0x0802b5fc
 8018cac:	0802bc30 	.word	0x0802bc30
 8018cb0:	0802b710 	.word	0x0802b710
 8018cb4:	0802b718 	.word	0x0802b718
 8018cb8:	0802b720 	.word	0x0802b720
 8018cbc:	0802b72c 	.word	0x0802b72c
 8018cc0:	0802b738 	.word	0x0802b738
 8018cc4:	0802b748 	.word	0x0802b748
 8018cc8:	080306e0 	.word	0x080306e0
 8018ccc:	0802b750 	.word	0x0802b750
 8018cd0:	0802b75c 	.word	0x0802b75c
 8018cd4:	0802b6ec 	.word	0x0802b6ec
 8018cd8:	0802b5f8 	.word	0x0802b5f8

08018cdc <print_unsorted>:
{
 8018cdc:	b570      	push	{r4, r5, r6, lr}
 8018cde:	4604      	mov	r4, r0
 8018ce0:	460e      	mov	r6, r1
 8018ce2:	4615      	mov	r5, r2
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 8018ce4:	7850      	ldrb	r0, [r2, #1]
 8018ce6:	78a3      	ldrb	r3, [r4, #2]
 8018ce8:	4298      	cmp	r0, r3
 8018cea:	d00b      	beq.n	8018d04 <print_unsorted+0x28>
       (setting->is_available == NULL ||setting->is_available(setting)))
 8018cec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 8018cee:	b113      	cbz	r3, 8018cf6 <print_unsorted+0x1a>
       (setting->is_available == NULL ||setting->is_available(setting)))
 8018cf0:	4620      	mov	r0, r4
 8018cf2:	4798      	blx	r3
 8018cf4:	b120      	cbz	r0, 8018d00 <print_unsorted+0x24>
        report_settings_detail(((report_args_t *)args)->format, setting, offset);
 8018cf6:	4632      	mov	r2, r6
 8018cf8:	4621      	mov	r1, r4
 8018cfa:	7828      	ldrb	r0, [r5, #0]
 8018cfc:	f7ff fca2 	bl	8018644 <report_settings_detail>
}
 8018d00:	2001      	movs	r0, #1
 8018d02:	bd70      	pop	{r4, r5, r6, pc}
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 8018d04:	6853      	ldr	r3, [r2, #4]
 8018d06:	428b      	cmp	r3, r1
 8018d08:	d1fa      	bne.n	8018d00 <print_unsorted+0x24>
 8018d0a:	e7ef      	b.n	8018cec <print_unsorted+0x10>

08018d0c <print_sorted>:
{
 8018d0c:	b508      	push	{r3, lr}
 8018d0e:	4613      	mov	r3, r2
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset))
 8018d10:	f892 c001 	ldrb.w	ip, [r2, #1]
 8018d14:	7882      	ldrb	r2, [r0, #2]
 8018d16:	4594      	cmp	ip, r2
 8018d18:	d102      	bne.n	8018d20 <print_sorted+0x14>
 8018d1a:	685a      	ldr	r2, [r3, #4]
 8018d1c:	428a      	cmp	r2, r1
 8018d1e:	d104      	bne.n	8018d2a <print_sorted+0x1e>
        report_settings_detail (((report_args_t *)args)->format, setting, offset);
 8018d20:	460a      	mov	r2, r1
 8018d22:	4601      	mov	r1, r0
 8018d24:	7818      	ldrb	r0, [r3, #0]
 8018d26:	f7ff fc8d 	bl	8018644 <report_settings_detail>
}
 8018d2a:	2001      	movs	r0, #1
 8018d2c:	bd08      	pop	{r3, pc}
	...

08018d30 <print_settings_details>:
{
 8018d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d34:	b083      	sub	sp, #12
 8018d36:	4606      	mov	r6, r0
    bool reported = group == Group_All;
 8018d38:	4688      	mov	r8, r1
 8018d3a:	fab1 fb81 	clz	fp, r1
 8018d3e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    setting_details_t *details = settings_get_details();
 8018d42:	f003 fdeb 	bl	801c91c <settings_get_details>
 8018d46:	4604      	mov	r4, r0
    args.group = settings_normalize_group(group);
 8018d48:	4640      	mov	r0, r8
 8018d4a:	f004 fa33 	bl	801d1b4 <settings_normalize_group>
 8018d4e:	f88d 0001 	strb.w	r0, [sp, #1]
    args.offset = group - args.group;
 8018d52:	eba8 0000 	sub.w	r0, r8, r0
 8018d56:	9001      	str	r0, [sp, #4]
    args.format = format;
 8018d58:	f88d 6000 	strb.w	r6, [sp]
    uint_fast16_t idx, n_settings = 0;
 8018d5c:	2500      	movs	r5, #0
        n_settings += details->n_settings;
 8018d5e:	8923      	ldrh	r3, [r4, #8]
 8018d60:	441d      	add	r5, r3
    } while((details = details->next));
 8018d62:	69a4      	ldr	r4, [r4, #24]
 8018d64:	2c00      	cmp	r4, #0
 8018d66:	d1fa      	bne.n	8018d5e <print_settings_details+0x2e>
    if(format == SettingsFormat_Grbl)
 8018d68:	2e02      	cmp	r6, #2
 8018d6a:	d00f      	beq.n	8018d8c <print_settings_details+0x5c>
    else if(format == SettingsFormat_grblHAL)
 8018d6c:	2e03      	cmp	r6, #3
 8018d6e:	d013      	beq.n	8018d98 <print_settings_details+0x68>
    details = settings_get_details();
 8018d70:	f003 fdd4 	bl	801c91c <settings_get_details>
 8018d74:	4607      	mov	r7, r0
    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 8018d76:	2104      	movs	r1, #4
 8018d78:	4628      	mov	r0, r5
 8018d7a:	f009 fb73 	bl	8022464 <calloc>
 8018d7e:	4682      	mov	sl, r0
 8018d80:	2800      	cmp	r0, #0
 8018d82:	d068      	beq.n	8018e56 <print_settings_details+0x126>
 8018d84:	4606      	mov	r6, r0
        n_settings = 0;
 8018d86:	f04f 0900 	mov.w	r9, #0
 8018d8a:	e028      	b.n	8018dde <print_settings_details+0xae>
        hal.stream.write("\"$-Code\",\" Setting\",\" Units\",\" Setting Description\"" ASCII_EOL);
 8018d8c:	4b34      	ldr	r3, [pc, #208]	@ (8018e60 <print_settings_details+0x130>)
 8018d8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018d92:	4834      	ldr	r0, [pc, #208]	@ (8018e64 <print_settings_details+0x134>)
 8018d94:	4798      	blx	r3
 8018d96:	e7eb      	b.n	8018d70 <print_settings_details+0x40>
        hal.stream.write("$-Code\tSetting\tUnits\tDatatype\tData format\tSetting Description\tMin\tMax" ASCII_EOL);
 8018d98:	4b31      	ldr	r3, [pc, #196]	@ (8018e60 <print_settings_details+0x130>)
 8018d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018d9e:	4832      	ldr	r0, [pc, #200]	@ (8018e68 <print_settings_details+0x138>)
 8018da0:	4798      	blx	r3
 8018da2:	e7e5      	b.n	8018d70 <print_settings_details+0x40>
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 8018da4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8018da6:	b113      	cbz	r3, 8018dae <print_settings_details+0x7e>
 8018da8:	4628      	mov	r0, r5
 8018daa:	4798      	blx	r3
 8018dac:	b118      	cbz	r0, 8018db6 <print_settings_details+0x86>
                    *psetting++ = (setting_detail_t *)setting;
 8018dae:	f846 5b04 	str.w	r5, [r6], #4
                    n_settings++;
 8018db2:	f109 0901 	add.w	r9, r9, #1
            for(idx = 0; idx < details->n_settings; idx++) {
 8018db6:	3401      	adds	r4, #1
 8018db8:	893b      	ldrh	r3, [r7, #8]
 8018dba:	42a3      	cmp	r3, r4
 8018dbc:	d90d      	bls.n	8018dda <print_settings_details+0xaa>
                setting = &details->settings[idx];
 8018dbe:	68fd      	ldr	r5, [r7, #12]
 8018dc0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8018dc4:	eb05 1503 	add.w	r5, r5, r3, lsl #4
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 8018dc8:	f1b8 0f00 	cmp.w	r8, #0
 8018dcc:	d0ea      	beq.n	8018da4 <print_settings_details+0x74>
 8018dce:	78aa      	ldrb	r2, [r5, #2]
 8018dd0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8018dd4:	429a      	cmp	r2, r3
 8018dd6:	d1ee      	bne.n	8018db6 <print_settings_details+0x86>
 8018dd8:	e7e4      	b.n	8018da4 <print_settings_details+0x74>
        } while((details = details->next));
 8018dda:	69bf      	ldr	r7, [r7, #24]
 8018ddc:	b10f      	cbz	r7, 8018de2 <print_settings_details+0xb2>
            for(idx = 0; idx < details->n_settings; idx++) {
 8018dde:	2400      	movs	r4, #0
 8018de0:	e7ea      	b.n	8018db8 <print_settings_details+0x88>
        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 8018de2:	4b22      	ldr	r3, [pc, #136]	@ (8018e6c <print_settings_details+0x13c>)
 8018de4:	2204      	movs	r2, #4
 8018de6:	4649      	mov	r1, r9
 8018de8:	4650      	mov	r0, sl
 8018dea:	f00a fb0c 	bl	8023406 <qsort>
        for(idx = 0; idx < n_settings; idx++) {
 8018dee:	2400      	movs	r4, #0
 8018df0:	e000      	b.n	8018df4 <print_settings_details+0xc4>
 8018df2:	3401      	adds	r4, #1
 8018df4:	454c      	cmp	r4, r9
 8018df6:	d209      	bcs.n	8018e0c <print_settings_details+0xdc>
            if(settings_iterator(all_settings[idx], print_sorted, &args))
 8018df8:	466a      	mov	r2, sp
 8018dfa:	491d      	ldr	r1, [pc, #116]	@ (8018e70 <print_settings_details+0x140>)
 8018dfc:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8018e00:	f004 fa3a 	bl	801d278 <settings_iterator>
 8018e04:	2800      	cmp	r0, #0
 8018e06:	d0f4      	beq.n	8018df2 <print_settings_details+0xc2>
                reported = true;
 8018e08:	4683      	mov	fp, r0
 8018e0a:	e7f2      	b.n	8018df2 <print_settings_details+0xc2>
        free(all_settings);
 8018e0c:	4650      	mov	r0, sl
 8018e0e:	f009 fb4d 	bl	80224ac <free>
    return reported ? Status_OK : Status_SettingDisabled;
 8018e12:	f1bb 0f00 	cmp.w	fp, #0
 8018e16:	d020      	beq.n	8018e5a <print_settings_details+0x12a>
 8018e18:	2000      	movs	r0, #0
}
 8018e1a:	b003      	add	sp, #12
 8018e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(settings_iterator(setting, print_unsorted, &args))
 8018e20:	466a      	mov	r2, sp
 8018e22:	4914      	ldr	r1, [pc, #80]	@ (8018e74 <print_settings_details+0x144>)
 8018e24:	f004 fa28 	bl	801d278 <settings_iterator>
 8018e28:	b100      	cbz	r0, 8018e2c <print_settings_details+0xfc>
                    reported = true;
 8018e2a:	4683      	mov	fp, r0
        for(idx = 0; idx < details->n_settings; idx++) {
 8018e2c:	3401      	adds	r4, #1
 8018e2e:	893b      	ldrh	r3, [r7, #8]
 8018e30:	42a3      	cmp	r3, r4
 8018e32:	d90d      	bls.n	8018e50 <print_settings_details+0x120>
            setting = &details->settings[idx];
 8018e34:	68f8      	ldr	r0, [r7, #12]
 8018e36:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8018e3a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
            if(group == Group_All || setting->group == args.group) {
 8018e3e:	f1b8 0f00 	cmp.w	r8, #0
 8018e42:	d0ed      	beq.n	8018e20 <print_settings_details+0xf0>
 8018e44:	7882      	ldrb	r2, [r0, #2]
 8018e46:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8018e4a:	429a      	cmp	r2, r3
 8018e4c:	d1ee      	bne.n	8018e2c <print_settings_details+0xfc>
 8018e4e:	e7e7      	b.n	8018e20 <print_settings_details+0xf0>
    } while((details = details->next));
 8018e50:	69bf      	ldr	r7, [r7, #24]
 8018e52:	2f00      	cmp	r7, #0
 8018e54:	d0dd      	beq.n	8018e12 <print_settings_details+0xe2>
        for(idx = 0; idx < details->n_settings; idx++) {
 8018e56:	2400      	movs	r4, #0
 8018e58:	e7e9      	b.n	8018e2e <print_settings_details+0xfe>
    return reported ? Status_OK : Status_SettingDisabled;
 8018e5a:	2035      	movs	r0, #53	@ 0x35
 8018e5c:	e7dd      	b.n	8018e1a <print_settings_details+0xea>
 8018e5e:	bf00      	nop
 8018e60:	200011c0 	.word	0x200011c0
 8018e64:	0802b764 	.word	0x0802b764
 8018e68:	0802b79c 	.word	0x0802b79c
 8018e6c:	08017d7d 	.word	0x08017d7d
 8018e70:	08018d0d 	.word	0x08018d0d
 8018e74:	08018cdd 	.word	0x08018cdd

08018e78 <print_setting_group>:
{
 8018e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e7a:	4604      	mov	r4, r0
 8018e7c:	460d      	mov	r5, r1
    if(settings_is_group_available(group->id)) {
 8018e7e:	7840      	ldrb	r0, [r0, #1]
 8018e80:	f004 fa80 	bl	801d384 <settings_is_group_available>
 8018e84:	b178      	cbz	r0, 8018ea6 <print_setting_group+0x2e>
        if(!prefix) {
 8018e86:	b17d      	cbz	r5, 8018ea8 <print_setting_group+0x30>
        } else if(group->id != Group_Root) {
 8018e88:	7863      	ldrb	r3, [r4, #1]
 8018e8a:	b163      	cbz	r3, 8018ea6 <print_setting_group+0x2e>
            hal.stream.write(prefix);
 8018e8c:	4e18      	ldr	r6, [pc, #96]	@ (8018ef0 <print_setting_group+0x78>)
 8018e8e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018e92:	4628      	mov	r0, r5
 8018e94:	4798      	blx	r3
            hal.stream.write(group->name);
 8018e96:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018e9a:	6860      	ldr	r0, [r4, #4]
 8018e9c:	4798      	blx	r3
            hal.stream.write(ASCII_EOL);
 8018e9e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 8018ea2:	4814      	ldr	r0, [pc, #80]	@ (8018ef4 <print_setting_group+0x7c>)
 8018ea4:	4798      	blx	r3
}
 8018ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hal.stream.write("[SETTINGGROUP:");
 8018ea8:	4d11      	ldr	r5, [pc, #68]	@ (8018ef0 <print_setting_group+0x78>)
 8018eaa:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018eae:	4812      	ldr	r0, [pc, #72]	@ (8018ef8 <print_setting_group+0x80>)
 8018eb0:	4798      	blx	r3
            hal.stream.write(uitoa(group->id));
 8018eb2:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018eb6:	7860      	ldrb	r0, [r4, #1]
 8018eb8:	f7fc fa02 	bl	80152c0 <uitoa>
 8018ebc:	47b0      	blx	r6
            hal.stream.write(vbar);
 8018ebe:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018ec2:	4e0e      	ldr	r6, [pc, #56]	@ (8018efc <print_setting_group+0x84>)
 8018ec4:	4630      	mov	r0, r6
 8018ec6:	4798      	blx	r3
            hal.stream.write(uitoa(group->parent));
 8018ec8:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8018ecc:	7820      	ldrb	r0, [r4, #0]
 8018ece:	f7fc f9f7 	bl	80152c0 <uitoa>
 8018ed2:	47b8      	blx	r7
            hal.stream.write(vbar);
 8018ed4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018ed8:	4630      	mov	r0, r6
 8018eda:	4798      	blx	r3
            hal.stream.write(group->name);
 8018edc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018ee0:	6860      	ldr	r0, [r4, #4]
 8018ee2:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8018ee4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018ee8:	4805      	ldr	r0, [pc, #20]	@ (8018f00 <print_setting_group+0x88>)
 8018eea:	4798      	blx	r3
 8018eec:	e7db      	b.n	8018ea6 <print_setting_group+0x2e>
 8018eee:	bf00      	nop
 8018ef0:	200011c0 	.word	0x200011c0
 8018ef4:	0802bc30 	.word	0x0802bc30
 8018ef8:	0802b7e4 	.word	0x0802b7e4
 8018efc:	0802bdac 	.word	0x0802bdac
 8018f00:	0802b584 	.word	0x0802b584

08018f04 <report_pin_info>:
{
 8018f04:	b570      	push	{r4, r5, r6, lr}
 8018f06:	4604      	mov	r4, r0
    hal.stream.write("[PIN:");
 8018f08:	4b16      	ldr	r3, [pc, #88]	@ (8018f64 <report_pin_info+0x60>)
 8018f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f0e:	4816      	ldr	r0, [pc, #88]	@ (8018f68 <report_pin_info+0x64>)
 8018f10:	4798      	blx	r3
    if(*pin->port)
 8018f12:	78a3      	ldrb	r3, [r4, #2]
 8018f14:	b123      	cbz	r3, 8018f20 <report_pin_info+0x1c>
        hal.stream.write(pin->port);
 8018f16:	4b13      	ldr	r3, [pc, #76]	@ (8018f64 <report_pin_info+0x60>)
 8018f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f1c:	1ca0      	adds	r0, r4, #2
 8018f1e:	4798      	blx	r3
    hal.stream.write(uitoa(pin->pin));
 8018f20:	4d10      	ldr	r5, [pc, #64]	@ (8018f64 <report_pin_info+0x60>)
 8018f22:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8018f26:	7820      	ldrb	r0, [r4, #0]
 8018f28:	f7fc f9ca 	bl	80152c0 <uitoa>
 8018f2c:	47b0      	blx	r6
    hal.stream.write(",");
 8018f2e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018f32:	480e      	ldr	r0, [pc, #56]	@ (8018f6c <report_pin_info+0x68>)
 8018f34:	4798      	blx	r3
    hal.stream.write(xbar_fn_to_pinname(pin->function));
 8018f36:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8018f3a:	7860      	ldrb	r0, [r4, #1]
 8018f3c:	f7f3 fd4a 	bl	800c9d4 <xbar_fn_to_pinname>
 8018f40:	47a8      	blx	r5
    if(pin->description) {
 8018f42:	6923      	ldr	r3, [r4, #16]
 8018f44:	b143      	cbz	r3, 8018f58 <report_pin_info+0x54>
        hal.stream.write(",");
 8018f46:	4d07      	ldr	r5, [pc, #28]	@ (8018f64 <report_pin_info+0x60>)
 8018f48:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018f4c:	4807      	ldr	r0, [pc, #28]	@ (8018f6c <report_pin_info+0x68>)
 8018f4e:	4798      	blx	r3
        hal.stream.write(pin->description);
 8018f50:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8018f54:	6920      	ldr	r0, [r4, #16]
 8018f56:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8018f58:	4b02      	ldr	r3, [pc, #8]	@ (8018f64 <report_pin_info+0x60>)
 8018f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018f5e:	4804      	ldr	r0, [pc, #16]	@ (8018f70 <report_pin_info+0x6c>)
 8018f60:	4798      	blx	r3
}
 8018f62:	bd70      	pop	{r4, r5, r6, pc}
 8018f64:	200011c0 	.word	0x200011c0
 8018f68:	0802b7f4 	.word	0x0802b7f4
 8018f6c:	0802b9b0 	.word	0x0802b9b0
 8018f70:	0802b584 	.word	0x0802b584

08018f74 <report_pin>:
{
 8018f74:	b500      	push	{lr}
 8018f76:	b087      	sub	sp, #28
    report_pin_info(get_pin_info(pin, &info));
 8018f78:	4669      	mov	r1, sp
 8018f7a:	f7ff fa45 	bl	8018408 <get_pin_info>
 8018f7e:	f7ff ffc1 	bl	8018f04 <report_pin_info>
}
 8018f82:	b007      	add	sp, #28
 8018f84:	f85d fb04 	ldr.w	pc, [sp], #4

08018f88 <report_setting>:
{
 8018f88:	b538      	push	{r3, r4, r5, lr}
 8018f8a:	4604      	mov	r4, r0
 8018f8c:	460d      	mov	r5, r1
    appendbuf(3, "$", uitoa(setting->id + offset), "=");
 8018f8e:	8800      	ldrh	r0, [r0, #0]
 8018f90:	4408      	add	r0, r1
 8018f92:	f7fc f995 	bl	80152c0 <uitoa>
 8018f96:	4602      	mov	r2, r0
 8018f98:	4b0c      	ldr	r3, [pc, #48]	@ (8018fcc <report_setting+0x44>)
 8018f9a:	490d      	ldr	r1, [pc, #52]	@ (8018fd0 <report_setting+0x48>)
 8018f9c:	2003      	movs	r0, #3
 8018f9e:	f7ff fa5f 	bl	8018460 <appendbuf>
    char *value = setting_get_value(setting, offset);
 8018fa2:	4629      	mov	r1, r5
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	f003 fe9b 	bl	801cce0 <setting_get_value>
    if(value) {
 8018faa:	b168      	cbz	r0, 8018fc8 <report_setting+0x40>
 8018fac:	4605      	mov	r5, r0
        hal.stream.write(buf);
 8018fae:	4c09      	ldr	r4, [pc, #36]	@ (8018fd4 <report_setting+0x4c>)
 8018fb0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018fb4:	4808      	ldr	r0, [pc, #32]	@ (8018fd8 <report_setting+0x50>)
 8018fb6:	4798      	blx	r3
        hal.stream.write(value);
 8018fb8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018fbc:	4628      	mov	r0, r5
 8018fbe:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 8018fc0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8018fc4:	4805      	ldr	r0, [pc, #20]	@ (8018fdc <report_setting+0x54>)
 8018fc6:	4798      	blx	r3
}
 8018fc8:	2001      	movs	r0, #1
 8018fca:	bd38      	pop	{r3, r4, r5, pc}
 8018fcc:	0802b7fc 	.word	0x0802b7fc
 8018fd0:	0802b56c 	.word	0x0802b56c
 8018fd4:	200011c0 	.word	0x200011c0
 8018fd8:	20001aa8 	.word	0x20001aa8
 8018fdc:	0802bc30 	.word	0x0802bc30

08018fe0 <report_init>:
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 8018fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8019010 <report_init+0x30>)
 8018fe2:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8018fe6:	f013 0301 	ands.w	r3, r3, #1
 8018fea:	d00b      	beq.n	8019004 <report_init+0x24>
 8018fec:	4909      	ldr	r1, [pc, #36]	@ (8019014 <report_init+0x34>)
 8018fee:	4a0a      	ldr	r2, [pc, #40]	@ (8019018 <report_init+0x38>)
 8018ff0:	6011      	str	r1, [r2, #0]
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 8018ff2:	b14b      	cbz	r3, 8019008 <report_init+0x28>
 8018ff4:	4909      	ldr	r1, [pc, #36]	@ (801901c <report_init+0x3c>)
 8018ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8019020 <report_init+0x40>)
 8018ff8:	6011      	str	r1, [r2, #0]
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 8018ffa:	b13b      	cbz	r3, 801900c <report_init+0x2c>
 8018ffc:	4a09      	ldr	r2, [pc, #36]	@ (8019024 <report_init+0x44>)
 8018ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8019028 <report_init+0x48>)
 8019000:	601a      	str	r2, [r3, #0]
}
 8019002:	4770      	bx	lr
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 8019004:	4909      	ldr	r1, [pc, #36]	@ (801902c <report_init+0x4c>)
 8019006:	e7f2      	b.n	8018fee <report_init+0xe>
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 8019008:	4909      	ldr	r1, [pc, #36]	@ (8019030 <report_init+0x50>)
 801900a:	e7f4      	b.n	8018ff6 <report_init+0x16>
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 801900c:	4a09      	ldr	r2, [pc, #36]	@ (8019034 <report_init+0x54>)
 801900e:	e7f6      	b.n	8018ffe <report_init+0x1e>
 8019010:	20001bd8 	.word	0x20001bd8
 8019014:	08018399 	.word	0x08018399
 8019018:	20001aa0 	.word	0x20001aa0
 801901c:	080182f9 	.word	0x080182f9
 8019020:	20001aa4 	.word	0x20001aa4
 8019024:	08017ef5 	.word	0x08017ef5
 8019028:	20001a9c 	.word	0x20001a9c
 801902c:	08018381 	.word	0x08018381
 8019030:	08018285 	.word	0x08018285
 8019034:	08017ee5 	.word	0x08017ee5

08019038 <report_message>:
{
 8019038:	b538      	push	{r3, r4, r5, lr}
 801903a:	4605      	mov	r5, r0
 801903c:	460c      	mov	r4, r1
    if(hal.stream.is_connected()) {
 801903e:	4b16      	ldr	r3, [pc, #88]	@ (8019098 <report_message+0x60>)
 8019040:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8019044:	4798      	blx	r3
 8019046:	b198      	cbz	r0, 8019070 <report_message+0x38>
        hal.stream.write("[MSG:");
 8019048:	4b13      	ldr	r3, [pc, #76]	@ (8019098 <report_message+0x60>)
 801904a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801904e:	4813      	ldr	r0, [pc, #76]	@ (801909c <report_message+0x64>)
 8019050:	4798      	blx	r3
        switch(type) {
 8019052:	2c02      	cmp	r4, #2
 8019054:	d013      	beq.n	801907e <report_message+0x46>
 8019056:	2c03      	cmp	r4, #3
 8019058:	d017      	beq.n	801908a <report_message+0x52>
 801905a:	2c01      	cmp	r4, #1
 801905c:	d009      	beq.n	8019072 <report_message+0x3a>
        hal.stream.write(msg);
 801905e:	4c0e      	ldr	r4, [pc, #56]	@ (8019098 <report_message+0x60>)
 8019060:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019064:	4628      	mov	r0, r5
 8019066:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8019068:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801906c:	480c      	ldr	r0, [pc, #48]	@ (80190a0 <report_message+0x68>)
 801906e:	4798      	blx	r3
}
 8019070:	bd38      	pop	{r3, r4, r5, pc}
                hal.stream.write("Info: ");
 8019072:	4b09      	ldr	r3, [pc, #36]	@ (8019098 <report_message+0x60>)
 8019074:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019078:	480a      	ldr	r0, [pc, #40]	@ (80190a4 <report_message+0x6c>)
 801907a:	4798      	blx	r3
                break;
 801907c:	e7ef      	b.n	801905e <report_message+0x26>
                hal.stream.write("Warning: ");
 801907e:	4b06      	ldr	r3, [pc, #24]	@ (8019098 <report_message+0x60>)
 8019080:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019084:	4808      	ldr	r0, [pc, #32]	@ (80190a8 <report_message+0x70>)
 8019086:	4798      	blx	r3
                break;
 8019088:	e7e9      	b.n	801905e <report_message+0x26>
                hal.stream.write("Debug: ");
 801908a:	4b03      	ldr	r3, [pc, #12]	@ (8019098 <report_message+0x60>)
 801908c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019090:	4806      	ldr	r0, [pc, #24]	@ (80190ac <report_message+0x74>)
 8019092:	4798      	blx	r3
                break;
 8019094:	e7e3      	b.n	801905e <report_message+0x26>
 8019096:	bf00      	nop
 8019098:	200011c0 	.word	0x200011c0
 801909c:	0802b800 	.word	0x0802b800
 80190a0:	0802b584 	.word	0x0802b584
 80190a4:	0802b808 	.word	0x0802b808
 80190a8:	0802b810 	.word	0x0802b810
 80190ac:	0802b81c 	.word	0x0802b81c

080190b0 <report_feedback_message>:
{
 80190b0:	b510      	push	{r4, lr}
 80190b2:	4604      	mov	r4, r0
    const message_t *msg = message_get(id);
 80190b4:	f7fa f9f6 	bl	80134a4 <message_get>
    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 80190b8:	b168      	cbz	r0, 80190d6 <report_feedback_message+0x26>
 80190ba:	4603      	mov	r3, r0
 80190bc:	6840      	ldr	r0, [r0, #4]
 80190be:	7859      	ldrb	r1, [r3, #1]
 80190c0:	f7ff ffba 	bl	8019038 <report_message>
    if(id == Message_None && grbl.on_gcode_message)
 80190c4:	b92c      	cbnz	r4, 80190d2 <report_feedback_message+0x22>
 80190c6:	4b05      	ldr	r3, [pc, #20]	@ (80190dc <report_feedback_message+0x2c>)
 80190c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80190cc:	b10b      	cbz	r3, 80190d2 <report_feedback_message+0x22>
        grbl.on_gcode_message("");
 80190ce:	4804      	ldr	r0, [pc, #16]	@ (80190e0 <report_feedback_message+0x30>)
 80190d0:	4798      	blx	r3
}
 80190d2:	4620      	mov	r0, r4
 80190d4:	bd10      	pop	{r4, pc}
    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 80190d6:	4802      	ldr	r0, [pc, #8]	@ (80190e0 <report_feedback_message+0x30>)
 80190d8:	2100      	movs	r1, #0
 80190da:	e7f1      	b.n	80190c0 <report_feedback_message+0x10>
 80190dc:	200013a8 	.word	0x200013a8
 80190e0:	0802b6ec 	.word	0x0802b6ec

080190e4 <report_plain>:
{
 80190e4:	b508      	push	{r3, lr}
    report_message((char *)message, Message_Plain);
 80190e6:	2100      	movs	r1, #0
 80190e8:	f7ff ffa6 	bl	8019038 <report_message>
}
 80190ec:	bd08      	pop	{r3, pc}

080190ee <report_warning>:
{
 80190ee:	b508      	push	{r3, lr}
    report_message((char *)message, Message_Warning);
 80190f0:	2102      	movs	r1, #2
 80190f2:	f7ff ffa1 	bl	8019038 <report_message>
}
 80190f6:	bd08      	pop	{r3, pc}

080190f8 <report_grbl_setting>:
{
 80190f8:	b570      	push	{r4, r5, r6, lr}
 80190fa:	4604      	mov	r4, r0
 80190fc:	460d      	mov	r5, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 80190fe:	2100      	movs	r1, #0
 8019100:	f004 f860 	bl	801d1c4 <setting_get_details>
    if(setting)
 8019104:	b138      	cbz	r0, 8019116 <report_grbl_setting+0x1e>
        grbl.report.setting(setting, id - setting->id, data);
 8019106:	4a05      	ldr	r2, [pc, #20]	@ (801911c <report_grbl_setting+0x24>)
 8019108:	6956      	ldr	r6, [r2, #20]
 801910a:	8801      	ldrh	r1, [r0, #0]
 801910c:	462a      	mov	r2, r5
 801910e:	1a61      	subs	r1, r4, r1
 8019110:	47b0      	blx	r6
    status_code_t status = Status_OK;
 8019112:	2000      	movs	r0, #0
}
 8019114:	bd70      	pop	{r4, r5, r6, pc}
        status = Status_SettingDisabled;
 8019116:	2035      	movs	r0, #53	@ 0x35
 8019118:	e7fc      	b.n	8019114 <report_grbl_setting+0x1c>
 801911a:	bf00      	nop
 801911c:	200013a8 	.word	0x200013a8

08019120 <report_grbl_settings>:
{
 8019120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019124:	4606      	mov	r6, r0
 8019126:	4689      	mov	r9, r1
    setting_details_t *details = settings_get_details();
 8019128:	f003 fbf8 	bl	801c91c <settings_get_details>
    uint_fast16_t idx, n_settings = 0;
 801912c:	2400      	movs	r4, #0
        n_settings += details->n_settings;
 801912e:	8903      	ldrh	r3, [r0, #8]
 8019130:	441c      	add	r4, r3
    } while((details = details->next));
 8019132:	6980      	ldr	r0, [r0, #24]
 8019134:	2800      	cmp	r0, #0
 8019136:	d1fa      	bne.n	801912e <report_grbl_settings+0xe>
    details = settings_get_details();
 8019138:	f003 fbf0 	bl	801c91c <settings_get_details>
 801913c:	4683      	mov	fp, r0
    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 801913e:	2104      	movs	r1, #4
 8019140:	4620      	mov	r0, r4
 8019142:	f009 f98f 	bl	8022464 <calloc>
 8019146:	4680      	mov	r8, r0
 8019148:	2800      	cmp	r0, #0
 801914a:	d067      	beq.n	801921c <report_grbl_settings+0xfc>
 801914c:	4682      	mov	sl, r0
        n_settings = 0;
 801914e:	2700      	movs	r7, #0
        for(idx = 0; idx < details->n_settings; idx++) {
 8019150:	463d      	mov	r5, r7
 8019152:	e00a      	b.n	801916a <report_grbl_settings+0x4a>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 8019154:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 8019156:	b113      	cbz	r3, 801915e <report_grbl_settings+0x3e>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 8019158:	4620      	mov	r0, r4
 801915a:	4798      	blx	r3
 801915c:	b120      	cbz	r0, 8019168 <report_grbl_settings+0x48>
                *psetting++ = (setting_detail_t *)setting;
 801915e:	4653      	mov	r3, sl
 8019160:	f843 4b04 	str.w	r4, [r3], #4
                n_settings++;
 8019164:	3701      	adds	r7, #1
                *psetting++ = (setting_detail_t *)setting;
 8019166:	469a      	mov	sl, r3
        for(idx = 0; idx < details->n_settings; idx++) {
 8019168:	3501      	adds	r5, #1
 801916a:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801916e:	42ab      	cmp	r3, r5
 8019170:	d90d      	bls.n	801918e <report_grbl_settings+0x6e>
            setting = &details->settings[idx];
 8019172:	f8db 400c 	ldr.w	r4, [fp, #12]
 8019176:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801917a:	eb04 1403 	add.w	r4, r4, r3, lsl #4
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 801917e:	2e00      	cmp	r6, #0
 8019180:	d1e8      	bne.n	8019154 <report_grbl_settings+0x34>
 8019182:	7f23      	ldrb	r3, [r4, #28]
 8019184:	2b04      	cmp	r3, #4
 8019186:	d0e5      	beq.n	8019154 <report_grbl_settings+0x34>
 8019188:	2b05      	cmp	r3, #5
 801918a:	d1ed      	bne.n	8019168 <report_grbl_settings+0x48>
 801918c:	e7e2      	b.n	8019154 <report_grbl_settings+0x34>
        if(all && (details = details->next)) do {
 801918e:	b116      	cbz	r6, 8019196 <report_grbl_settings+0x76>
 8019190:	f8db 6018 	ldr.w	r6, [fp, #24]
 8019194:	bb06      	cbnz	r6, 80191d8 <report_grbl_settings+0xb8>
        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 8019196:	4b22      	ldr	r3, [pc, #136]	@ (8019220 <report_grbl_settings+0x100>)
 8019198:	2204      	movs	r2, #4
 801919a:	4639      	mov	r1, r7
 801919c:	4640      	mov	r0, r8
 801919e:	f00a f932 	bl	8023406 <qsort>
        for(idx = 0; idx < n_settings; idx++)
 80191a2:	2400      	movs	r4, #0
 80191a4:	e021      	b.n	80191ea <report_grbl_settings+0xca>
                    *psetting++ = (setting_detail_t *)setting;
 80191a6:	4653      	mov	r3, sl
 80191a8:	f843 4b04 	str.w	r4, [r3], #4
                    n_settings++;
 80191ac:	3701      	adds	r7, #1
                    *psetting++ = (setting_detail_t *)setting;
 80191ae:	469a      	mov	sl, r3
            for(idx = 0; idx < details->n_settings; idx++) {
 80191b0:	3501      	adds	r5, #1
 80191b2:	8933      	ldrh	r3, [r6, #8]
 80191b4:	42ab      	cmp	r3, r5
 80191b6:	d90c      	bls.n	80191d2 <report_grbl_settings+0xb2>
                setting = &details->settings[idx];
 80191b8:	68f4      	ldr	r4, [r6, #12]
 80191ba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80191be:	eb04 1403 	add.w	r4, r4, r3, lsl #4
                if(setting->is_available == NULL ||setting->is_available(setting)) {
 80191c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d0ee      	beq.n	80191a6 <report_grbl_settings+0x86>
 80191c8:	4620      	mov	r0, r4
 80191ca:	4798      	blx	r3
 80191cc:	2800      	cmp	r0, #0
 80191ce:	d0ef      	beq.n	80191b0 <report_grbl_settings+0x90>
 80191d0:	e7e9      	b.n	80191a6 <report_grbl_settings+0x86>
        } while((details = details->next));
 80191d2:	69b6      	ldr	r6, [r6, #24]
 80191d4:	2e00      	cmp	r6, #0
 80191d6:	d0de      	beq.n	8019196 <report_grbl_settings+0x76>
            for(idx = 0; idx < details->n_settings; idx++) {
 80191d8:	2500      	movs	r5, #0
 80191da:	e7ea      	b.n	80191b2 <report_grbl_settings+0x92>
            settings_iterator(all_settings[idx], print_setting, data);
 80191dc:	464a      	mov	r2, r9
 80191de:	4911      	ldr	r1, [pc, #68]	@ (8019224 <report_grbl_settings+0x104>)
 80191e0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80191e4:	f004 f848 	bl	801d278 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 80191e8:	3401      	adds	r4, #1
 80191ea:	42bc      	cmp	r4, r7
 80191ec:	d3f6      	bcc.n	80191dc <report_grbl_settings+0xbc>
        free(all_settings);
 80191ee:	4640      	mov	r0, r8
 80191f0:	f009 f95c 	bl	80224ac <free>
}
 80191f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            settings_iterator(&details->settings[idx], print_setting, data);
 80191f8:	f8db 300c 	ldr.w	r3, [fp, #12]
 80191fc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8019200:	464a      	mov	r2, r9
 8019202:	4908      	ldr	r1, [pc, #32]	@ (8019224 <report_grbl_settings+0x104>)
 8019204:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8019208:	f004 f836 	bl	801d278 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 801920c:	3501      	adds	r5, #1
 801920e:	42a5      	cmp	r5, r4
 8019210:	d3f2      	bcc.n	80191f8 <report_grbl_settings+0xd8>
    } while((details = details->next));
 8019212:	f8db b018 	ldr.w	fp, [fp, #24]
 8019216:	f1bb 0f00 	cmp.w	fp, #0
 801921a:	d0eb      	beq.n	80191f4 <report_grbl_settings+0xd4>
        for(idx = 0; idx < n_settings; idx++)
 801921c:	2500      	movs	r5, #0
 801921e:	e7f6      	b.n	801920e <report_grbl_settings+0xee>
 8019220:	08017d7d 	.word	0x08017d7d
 8019224:	08017f11 	.word	0x08017f11

08019228 <report_probe_parameters>:
{
 8019228:	b570      	push	{r4, r5, r6, lr}
 801922a:	b084      	sub	sp, #16
    system_convert_array_steps_to_mpos(print_position, sys.probe_position);
 801922c:	4d11      	ldr	r5, [pc, #68]	@ (8019274 <report_probe_parameters+0x4c>)
 801922e:	4629      	mov	r1, r5
 8019230:	a801      	add	r0, sp, #4
 8019232:	f008 fa23 	bl	802167c <system_convert_array_steps_to_mpos>
    hal.stream.write("[PRB:");
 8019236:	4c10      	ldr	r4, [pc, #64]	@ (8019278 <report_probe_parameters+0x50>)
 8019238:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801923c:	480f      	ldr	r0, [pc, #60]	@ (801927c <report_probe_parameters+0x54>)
 801923e:	4798      	blx	r3
    hal.stream.write(get_axis_values(print_position));
 8019240:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019244:	4b0e      	ldr	r3, [pc, #56]	@ (8019280 <report_probe_parameters+0x58>)
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	a801      	add	r0, sp, #4
 801924a:	4798      	blx	r3
 801924c:	47b0      	blx	r6
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 801924e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019252:	f815 2c22 	ldrb.w	r2, [r5, #-34]
 8019256:	f012 0f02 	tst.w	r2, #2
 801925a:	d008      	beq.n	801926e <report_probe_parameters+0x46>
 801925c:	4809      	ldr	r0, [pc, #36]	@ (8019284 <report_probe_parameters+0x5c>)
 801925e:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8019260:	4b05      	ldr	r3, [pc, #20]	@ (8019278 <report_probe_parameters+0x50>)
 8019262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019266:	4808      	ldr	r0, [pc, #32]	@ (8019288 <report_probe_parameters+0x60>)
 8019268:	4798      	blx	r3
}
 801926a:	b004      	add	sp, #16
 801926c:	bd70      	pop	{r4, r5, r6, pc}
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 801926e:	4807      	ldr	r0, [pc, #28]	@ (801928c <report_probe_parameters+0x64>)
 8019270:	e7f5      	b.n	801925e <report_probe_parameters+0x36>
 8019272:	bf00      	nop
 8019274:	200014d8 	.word	0x200014d8
 8019278:	200011c0 	.word	0x200011c0
 801927c:	0802b824 	.word	0x0802b824
 8019280:	20001aa4 	.word	0x20001aa4
 8019284:	0802bae0 	.word	0x0802bae0
 8019288:	0802b584 	.word	0x0802b584
 801928c:	0802bae8 	.word	0x0802bae8

08019290 <report_home_position>:
{
 8019290:	b570      	push	{r4, r5, r6, lr}
    hal.stream.write("[HOME:");
 8019292:	4c0e      	ldr	r4, [pc, #56]	@ (80192cc <report_home_position+0x3c>)
 8019294:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019298:	480d      	ldr	r0, [pc, #52]	@ (80192d0 <report_home_position+0x40>)
 801929a:	4798      	blx	r3
    hal.stream.write(get_axis_values(sys.home_position));
 801929c:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 80192a0:	4b0c      	ldr	r3, [pc, #48]	@ (80192d4 <report_home_position+0x44>)
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	4d0c      	ldr	r5, [pc, #48]	@ (80192d8 <report_home_position+0x48>)
 80192a6:	4628      	mov	r0, r5
 80192a8:	4798      	blx	r3
 80192aa:	47b0      	blx	r6
    hal.stream.write(":");
 80192ac:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80192b0:	480a      	ldr	r0, [pc, #40]	@ (80192dc <report_home_position+0x4c>)
 80192b2:	4798      	blx	r3
    hal.stream.write(uitoa(sys.homed.mask));
 80192b4:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 80192b8:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80192bc:	f7fc f800 	bl	80152c0 <uitoa>
 80192c0:	47b0      	blx	r6
    hal.stream.write("]" ASCII_EOL);
 80192c2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80192c6:	4806      	ldr	r0, [pc, #24]	@ (80192e0 <report_home_position+0x50>)
 80192c8:	4798      	blx	r3
}
 80192ca:	bd70      	pop	{r4, r5, r6, pc}
 80192cc:	200011c0 	.word	0x200011c0
 80192d0:	0802b82c 	.word	0x0802b82c
 80192d4:	20001aa4 	.word	0x20001aa4
 80192d8:	200014f8 	.word	0x200014f8
 80192dc:	0802b8ec 	.word	0x0802b8ec
 80192e0:	0802b584 	.word	0x0802b584

080192e4 <report_tool_offsets>:
{
 80192e4:	b538      	push	{r3, r4, r5, lr}
    hal.stream.write("[TLO:");
 80192e6:	4c08      	ldr	r4, [pc, #32]	@ (8019308 <report_tool_offsets+0x24>)
 80192e8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80192ec:	4807      	ldr	r0, [pc, #28]	@ (801930c <report_tool_offsets+0x28>)
 80192ee:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.tool_length_offset));
 80192f0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80192f4:	4b06      	ldr	r3, [pc, #24]	@ (8019310 <report_tool_offsets+0x2c>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	4806      	ldr	r0, [pc, #24]	@ (8019314 <report_tool_offsets+0x30>)
 80192fa:	4798      	blx	r3
 80192fc:	47a8      	blx	r5
    hal.stream.write("]" ASCII_EOL);
 80192fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019302:	4805      	ldr	r0, [pc, #20]	@ (8019318 <report_tool_offsets+0x34>)
 8019304:	4798      	blx	r3
}
 8019306:	bd38      	pop	{r3, r4, r5, pc}
 8019308:	200011c0 	.word	0x200011c0
 801930c:	0802b834 	.word	0x0802b834
 8019310:	20001aa4 	.word	0x20001aa4
 8019314:	20000fbc 	.word	0x20000fbc
 8019318:	0802b584 	.word	0x0802b584

0801931c <report_ngc_parameter>:
{
 801931c:	b530      	push	{r4, r5, lr}
 801931e:	ed2d 8b02 	vpush	{d8}
 8019322:	b083      	sub	sp, #12
 8019324:	4604      	mov	r4, r0
    hal.stream.write("[PARAM:");
 8019326:	4d19      	ldr	r5, [pc, #100]	@ (801938c <report_ngc_parameter+0x70>)
 8019328:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801932c:	4818      	ldr	r0, [pc, #96]	@ (8019390 <report_ngc_parameter+0x74>)
 801932e:	4798      	blx	r3
    hal.stream.write(uitoa(id));
 8019330:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 8019334:	4620      	mov	r0, r4
 8019336:	f7fb ffc3 	bl	80152c0 <uitoa>
 801933a:	47a8      	blx	r5
    if(ngc_param_get(id, &value)) {
 801933c:	a901      	add	r1, sp, #4
 801933e:	4620      	mov	r0, r4
 8019340:	f7fb fc94 	bl	8014c6c <ngc_param_get>
 8019344:	b1d8      	cbz	r0, 801937e <report_ngc_parameter+0x62>
        hal.stream.write("=");
 8019346:	4c11      	ldr	r4, [pc, #68]	@ (801938c <report_ngc_parameter+0x70>)
 8019348:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801934c:	4811      	ldr	r0, [pc, #68]	@ (8019394 <report_ngc_parameter+0x78>)
 801934e:	4798      	blx	r3
        hal.stream.write(trim_float(ftoa(value, ngc_float_decimals())));
 8019350:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019354:	ed9d 8a01 	vldr	s16, [sp, #4]
 8019358:	f7fb ffa6 	bl	80152a8 <ngc_float_decimals>
 801935c:	eeb0 0a48 	vmov.f32	s0, s16
 8019360:	f7fb ffd0 	bl	8015304 <ftoa>
 8019364:	f7fc f84a 	bl	80153fc <trim_float>
 8019368:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 801936a:	4b08      	ldr	r3, [pc, #32]	@ (801938c <report_ngc_parameter+0x70>)
 801936c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019370:	4809      	ldr	r0, [pc, #36]	@ (8019398 <report_ngc_parameter+0x7c>)
 8019372:	4798      	blx	r3
}
 8019374:	2000      	movs	r0, #0
 8019376:	b003      	add	sp, #12
 8019378:	ecbd 8b02 	vpop	{d8}
 801937c:	bd30      	pop	{r4, r5, pc}
        hal.stream.write("=N/A");
 801937e:	4b03      	ldr	r3, [pc, #12]	@ (801938c <report_ngc_parameter+0x70>)
 8019380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019384:	4805      	ldr	r0, [pc, #20]	@ (801939c <report_ngc_parameter+0x80>)
 8019386:	4798      	blx	r3
 8019388:	e7ef      	b.n	801936a <report_ngc_parameter+0x4e>
 801938a:	bf00      	nop
 801938c:	200011c0 	.word	0x200011c0
 8019390:	0802b83c 	.word	0x0802b83c
 8019394:	0802b7fc 	.word	0x0802b7fc
 8019398:	0802b584 	.word	0x0802b584
 801939c:	0802b844 	.word	0x0802b844

080193a0 <report_named_ngc_parameter>:
{
 80193a0:	b530      	push	{r4, r5, lr}
 80193a2:	ed2d 8b02 	vpush	{d8}
 80193a6:	b083      	sub	sp, #12
 80193a8:	4604      	mov	r4, r0
    hal.stream.write("[PARAM:");
 80193aa:	4d17      	ldr	r5, [pc, #92]	@ (8019408 <report_named_ngc_parameter+0x68>)
 80193ac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80193b0:	4816      	ldr	r0, [pc, #88]	@ (801940c <report_named_ngc_parameter+0x6c>)
 80193b2:	4798      	blx	r3
    hal.stream.write(arg);
 80193b4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80193b8:	4620      	mov	r0, r4
 80193ba:	4798      	blx	r3
    if(ngc_named_param_get(arg, &value)) {
 80193bc:	a901      	add	r1, sp, #4
 80193be:	4620      	mov	r0, r4
 80193c0:	f7fb ff20 	bl	8015204 <ngc_named_param_get>
 80193c4:	b1d0      	cbz	r0, 80193fc <report_named_ngc_parameter+0x5c>
        hal.stream.write("=");
 80193c6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 80193ca:	4811      	ldr	r0, [pc, #68]	@ (8019410 <report_named_ngc_parameter+0x70>)
 80193cc:	4798      	blx	r3
        hal.stream.write(trim_float(ftoa(value, ngc_float_decimals())));
 80193ce:	f8d5 40b4 	ldr.w	r4, [r5, #180]	@ 0xb4
 80193d2:	ed9d 8a01 	vldr	s16, [sp, #4]
 80193d6:	f7fb ff67 	bl	80152a8 <ngc_float_decimals>
 80193da:	eeb0 0a48 	vmov.f32	s0, s16
 80193de:	f7fb ff91 	bl	8015304 <ftoa>
 80193e2:	f7fc f80b 	bl	80153fc <trim_float>
 80193e6:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 80193e8:	4b07      	ldr	r3, [pc, #28]	@ (8019408 <report_named_ngc_parameter+0x68>)
 80193ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80193ee:	4809      	ldr	r0, [pc, #36]	@ (8019414 <report_named_ngc_parameter+0x74>)
 80193f0:	4798      	blx	r3
}
 80193f2:	2000      	movs	r0, #0
 80193f4:	b003      	add	sp, #12
 80193f6:	ecbd 8b02 	vpop	{d8}
 80193fa:	bd30      	pop	{r4, r5, pc}
        hal.stream.write("=N/A");
 80193fc:	4b02      	ldr	r3, [pc, #8]	@ (8019408 <report_named_ngc_parameter+0x68>)
 80193fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019402:	4805      	ldr	r0, [pc, #20]	@ (8019418 <report_named_ngc_parameter+0x78>)
 8019404:	4798      	blx	r3
 8019406:	e7ef      	b.n	80193e8 <report_named_ngc_parameter+0x48>
 8019408:	200011c0 	.word	0x200011c0
 801940c:	0802b83c 	.word	0x0802b83c
 8019410:	0802b7fc 	.word	0x0802b7fc
 8019414:	0802b584 	.word	0x0802b584
 8019418:	0802b844 	.word	0x0802b844

0801941c <report_ngc_parameters>:
{
 801941c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019420:	b085      	sub	sp, #20
    if(gc_state.modal.scaling_active) {
 8019422:	4b6d      	ldr	r3, [pc, #436]	@ (80195d8 <report_ngc_parameters+0x1bc>)
 8019424:	7f9b      	ldrb	r3, [r3, #30]
 8019426:	b183      	cbz	r3, 801944a <report_ngc_parameters+0x2e>
        hal.stream.write("[G51:");
 8019428:	4c6c      	ldr	r4, [pc, #432]	@ (80195dc <report_ngc_parameters+0x1c0>)
 801942a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801942e:	486c      	ldr	r0, [pc, #432]	@ (80195e0 <report_ngc_parameters+0x1c4>)
 8019430:	4798      	blx	r3
        hal.stream.write(get_axis_values(gc_get_scaling()));
 8019432:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019436:	4b6b      	ldr	r3, [pc, #428]	@ (80195e4 <report_ngc_parameters+0x1c8>)
 8019438:	681e      	ldr	r6, [r3, #0]
 801943a:	f7f3 fbb3 	bl	800cba4 <gc_get_scaling>
 801943e:	47b0      	blx	r6
 8019440:	47a8      	blx	r5
        hal.stream.write("]" ASCII_EOL);
 8019442:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019446:	4868      	ldr	r0, [pc, #416]	@ (80195e8 <report_ngc_parameters+0x1cc>)
 8019448:	4798      	blx	r3
{
 801944a:	2400      	movs	r4, #0
 801944c:	e01c      	b.n	8019488 <report_ngc_parameters+0x6c>
            grbl.report.status_message(Status_SettingReadFail);
 801944e:	4b67      	ldr	r3, [pc, #412]	@ (80195ec <report_ngc_parameters+0x1d0>)
 8019450:	689b      	ldr	r3, [r3, #8]
 8019452:	2007      	movs	r0, #7
 8019454:	4798      	blx	r3
            return;
 8019456:	e091      	b.n	801957c <report_ngc_parameters+0x160>
                hal.stream.write("28");
 8019458:	4b60      	ldr	r3, [pc, #384]	@ (80195dc <report_ngc_parameters+0x1c0>)
 801945a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801945e:	4864      	ldr	r0, [pc, #400]	@ (80195f0 <report_ngc_parameters+0x1d4>)
 8019460:	4798      	blx	r3
        if(idx != CoordinateSystem_G92) {
 8019462:	2c0b      	cmp	r4, #11
 8019464:	d00f      	beq.n	8019486 <report_ngc_parameters+0x6a>
            hal.stream.write(":");
 8019466:	4d5d      	ldr	r5, [pc, #372]	@ (80195dc <report_ngc_parameters+0x1c0>)
 8019468:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801946c:	4861      	ldr	r0, [pc, #388]	@ (80195f4 <report_ngc_parameters+0x1d8>)
 801946e:	4798      	blx	r3
            hal.stream.write(get_axis_values(coord_data));
 8019470:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019474:	4b5b      	ldr	r3, [pc, #364]	@ (80195e4 <report_ngc_parameters+0x1c8>)
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	a801      	add	r0, sp, #4
 801947a:	4798      	blx	r3
 801947c:	47b0      	blx	r6
            hal.stream.write("]" ASCII_EOL);
 801947e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019482:	4859      	ldr	r0, [pc, #356]	@ (80195e8 <report_ngc_parameters+0x1cc>)
 8019484:	4798      	blx	r3
    for (idx = 0; idx < N_CoordinateSystems; idx++) {
 8019486:	3401      	adds	r4, #1
 8019488:	2c0b      	cmp	r4, #11
 801948a:	d81f      	bhi.n	80194cc <report_ngc_parameters+0xb0>
        if (!(settings_read_coord_data((coord_system_id_t)idx, &coord_data))) {
 801948c:	b2e5      	uxtb	r5, r4
 801948e:	a901      	add	r1, sp, #4
 8019490:	4628      	mov	r0, r5
 8019492:	f003 fd7f 	bl	801cf94 <settings_read_coord_data>
 8019496:	2800      	cmp	r0, #0
 8019498:	d0d9      	beq.n	801944e <report_ngc_parameters+0x32>
        hal.stream.write("[G");
 801949a:	4b50      	ldr	r3, [pc, #320]	@ (80195dc <report_ngc_parameters+0x1c0>)
 801949c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80194a0:	4855      	ldr	r0, [pc, #340]	@ (80195f8 <report_ngc_parameters+0x1dc>)
 80194a2:	4798      	blx	r3
        switch (idx) {
 80194a4:	2c0a      	cmp	r4, #10
 80194a6:	d00b      	beq.n	80194c0 <report_ngc_parameters+0xa4>
 80194a8:	2c0b      	cmp	r4, #11
 80194aa:	d0ec      	beq.n	8019486 <report_ngc_parameters+0x6a>
 80194ac:	2c09      	cmp	r4, #9
 80194ae:	d0d3      	beq.n	8019458 <report_ngc_parameters+0x3c>
                hal.stream.write(map_coord_system((coord_system_id_t)idx));
 80194b0:	4b4a      	ldr	r3, [pc, #296]	@ (80195dc <report_ngc_parameters+0x1c0>)
 80194b2:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 80194b6:	4628      	mov	r0, r5
 80194b8:	f7fe ff80 	bl	80183bc <map_coord_system>
 80194bc:	47b0      	blx	r6
                break;
 80194be:	e7d0      	b.n	8019462 <report_ngc_parameters+0x46>
                hal.stream.write("30");
 80194c0:	4b46      	ldr	r3, [pc, #280]	@ (80195dc <report_ngc_parameters+0x1c0>)
 80194c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80194c6:	484d      	ldr	r0, [pc, #308]	@ (80195fc <report_ngc_parameters+0x1e0>)
 80194c8:	4798      	blx	r3
                break;
 80194ca:	e7ca      	b.n	8019462 <report_ngc_parameters+0x46>
    hal.stream.write("92:");
 80194cc:	4c43      	ldr	r4, [pc, #268]	@ (80195dc <report_ngc_parameters+0x1c0>)
 80194ce:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80194d2:	484b      	ldr	r0, [pc, #300]	@ (8019600 <report_ngc_parameters+0x1e4>)
 80194d4:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.g92_coord_offset));
 80194d6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80194da:	4b42      	ldr	r3, [pc, #264]	@ (80195e4 <report_ngc_parameters+0x1c8>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	4849      	ldr	r0, [pc, #292]	@ (8019604 <report_ngc_parameters+0x1e8>)
 80194e0:	4798      	blx	r3
 80194e2:	47a8      	blx	r5
    hal.stream.write("]" ASCII_EOL);
 80194e4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80194e8:	483f      	ldr	r0, [pc, #252]	@ (80195e8 <report_ngc_parameters+0x1cc>)
 80194ea:	4798      	blx	r3
    for (idx = 1; idx <= grbl.tool_table.n_tools; idx++) {
 80194ec:	2501      	movs	r5, #1
 80194ee:	e030      	b.n	8019552 <report_ngc_parameters+0x136>
        hal.stream.write("[T:");
 80194f0:	4c3a      	ldr	r4, [pc, #232]	@ (80195dc <report_ngc_parameters+0x1c0>)
 80194f2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80194f6:	4844      	ldr	r0, [pc, #272]	@ (8019608 <report_ngc_parameters+0x1ec>)
 80194f8:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)idx));
 80194fa:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 80194fe:	4628      	mov	r0, r5
 8019500:	f7fb fede 	bl	80152c0 <uitoa>
 8019504:	47b0      	blx	r6
        hal.stream.write("|");
 8019506:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801950a:	4f40      	ldr	r7, [pc, #256]	@ (801960c <report_ngc_parameters+0x1f0>)
 801950c:	4638      	mov	r0, r7
 801950e:	4798      	blx	r3
        hal.stream.write(get_axis_values(grbl.tool_table.tool[idx].offset));
 8019510:	f8d4 90b4 	ldr.w	r9, [r4, #180]	@ 0xb4
 8019514:	4b33      	ldr	r3, [pc, #204]	@ (80195e4 <report_ngc_parameters+0x1c8>)
 8019516:	681a      	ldr	r2, [r3, #0]
 8019518:	4e34      	ldr	r6, [pc, #208]	@ (80195ec <report_ngc_parameters+0x1d0>)
 801951a:	69f0      	ldr	r0, [r6, #28]
 801951c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8019520:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8019524:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019528:	4790      	blx	r2
 801952a:	47c8      	blx	r9
        hal.stream.write("|");
 801952c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019530:	4638      	mov	r0, r7
 8019532:	4798      	blx	r3
        hal.stream.write(get_axis_value(grbl.tool_table.tool[idx].radius));
 8019534:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 8019538:	4b35      	ldr	r3, [pc, #212]	@ (8019610 <report_ngc_parameters+0x1f4>)
 801953a:	681a      	ldr	r2, [r3, #0]
 801953c:	69f3      	ldr	r3, [r6, #28]
 801953e:	4443      	add	r3, r8
 8019540:	ed93 0a03 	vldr	s0, [r3, #12]
 8019544:	4790      	blx	r2
 8019546:	47b8      	blx	r7
        hal.stream.write("]" ASCII_EOL);
 8019548:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801954c:	4826      	ldr	r0, [pc, #152]	@ (80195e8 <report_ngc_parameters+0x1cc>)
 801954e:	4798      	blx	r3
    for (idx = 1; idx <= grbl.tool_table.n_tools; idx++) {
 8019550:	3501      	adds	r5, #1
 8019552:	4b26      	ldr	r3, [pc, #152]	@ (80195ec <report_ngc_parameters+0x1d0>)
 8019554:	699b      	ldr	r3, [r3, #24]
 8019556:	42ab      	cmp	r3, r5
 8019558:	d2ca      	bcs.n	80194f0 <report_ngc_parameters+0xd4>
    if(settings.homing.flags.enabled)
 801955a:	4b2e      	ldr	r3, [pc, #184]	@ (8019614 <report_ngc_parameters+0x1f8>)
 801955c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8019560:	f013 0f01 	tst.w	r3, #1
 8019564:	d10d      	bne.n	8019582 <report_ngc_parameters+0x166>
    report_tool_offsets();      // Print tool length offset value.
 8019566:	f7ff febd 	bl	80192e4 <report_tool_offsets>
    report_probe_parameters();  // Print probe parameters. Not persistent in memory.
 801956a:	f7ff fe5d 	bl	8019228 <report_probe_parameters>
    if(sys.tlo_reference_set.mask) { // Print tool length reference offset. Not persistent in memory.
 801956e:	4b2a      	ldr	r3, [pc, #168]	@ (8019618 <report_ngc_parameters+0x1fc>)
 8019570:	79db      	ldrb	r3, [r3, #7]
 8019572:	b94b      	cbnz	r3, 8019588 <report_ngc_parameters+0x16c>
    if(grbl.on_report_ngc_parameters)
 8019574:	4b1d      	ldr	r3, [pc, #116]	@ (80195ec <report_ngc_parameters+0x1d0>)
 8019576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019578:	b103      	cbz	r3, 801957c <report_ngc_parameters+0x160>
        grbl.on_report_ngc_parameters();
 801957a:	4798      	blx	r3
}
 801957c:	b005      	add	sp, #20
 801957e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        report_home_position();
 8019582:	f7ff fe85 	bl	8019290 <report_home_position>
 8019586:	e7ee      	b.n	8019566 <report_ngc_parameters+0x14a>
        gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8019588:	4b13      	ldr	r3, [pc, #76]	@ (80195d8 <report_ngc_parameters+0x1bc>)
 801958a:	7999      	ldrb	r1, [r3, #6]
 801958c:	4668      	mov	r0, sp
 801958e:	f7f3 fc03 	bl	800cd98 <gc_get_plane_data>
        hal.stream.write("[TLR:");
 8019592:	4c12      	ldr	r4, [pc, #72]	@ (80195dc <report_ngc_parameters+0x1c0>)
 8019594:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019598:	4820      	ldr	r0, [pc, #128]	@ (801961c <report_ngc_parameters+0x200>)
 801959a:	4798      	blx	r3
        hal.stream.write(get_axis_value(sys.tlo_reference[plane.axis_linear] / settings.axis[plane.axis_linear].steps_per_mm));
 801959c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80195a0:	4b1b      	ldr	r3, [pc, #108]	@ (8019610 <report_ngc_parameters+0x1f4>)
 80195a2:	6819      	ldr	r1, [r3, #0]
 80195a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80195a8:	1c98      	adds	r0, r3, #2
 80195aa:	4a1b      	ldr	r2, [pc, #108]	@ (8019618 <report_ngc_parameters+0x1fc>)
 80195ac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80195b0:	edd2 7a00 	vldr	s15, [r2]
 80195b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80195b8:	4a16      	ldr	r2, [pc, #88]	@ (8019614 <report_ngc_parameters+0x1f8>)
 80195ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80195be:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
 80195c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195c6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80195ca:	4788      	blx	r1
 80195cc:	47a8      	blx	r5
        hal.stream.write("]" ASCII_EOL);
 80195ce:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80195d2:	4805      	ldr	r0, [pc, #20]	@ (80195e8 <report_ngc_parameters+0x1cc>)
 80195d4:	4798      	blx	r3
 80195d6:	e7cd      	b.n	8019574 <report_ngc_parameters+0x158>
 80195d8:	20000ef8 	.word	0x20000ef8
 80195dc:	200011c0 	.word	0x200011c0
 80195e0:	0802b84c 	.word	0x0802b84c
 80195e4:	20001aa4 	.word	0x20001aa4
 80195e8:	0802b584 	.word	0x0802b584
 80195ec:	200013a8 	.word	0x200013a8
 80195f0:	0802b858 	.word	0x0802b858
 80195f4:	0802b8ec 	.word	0x0802b8ec
 80195f8:	0802b854 	.word	0x0802b854
 80195fc:	0802b85c 	.word	0x0802b85c
 8019600:	0802b860 	.word	0x0802b860
 8019604:	20000fb0 	.word	0x20000fb0
 8019608:	0802b864 	.word	0x0802b864
 801960c:	0802b5a0 	.word	0x0802b5a0
 8019610:	20001aa0 	.word	0x20001aa0
 8019614:	20001bd8 	.word	0x20001bd8
 8019618:	200014a0 	.word	0x200014a0
 801961c:	0802b868 	.word	0x0802b868

08019620 <report_gcode_modes>:
{
 8019620:	b570      	push	{r4, r5, r6, lr}
    hal.stream.write("[GC:G");
 8019622:	4b8c      	ldr	r3, [pc, #560]	@ (8019854 <report_gcode_modes+0x234>)
 8019624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019628:	488b      	ldr	r0, [pc, #556]	@ (8019858 <report_gcode_modes+0x238>)
 801962a:	4798      	blx	r3
    if (gc_state.modal.motion >= MotionMode_ProbeToward) {
 801962c:	4b8b      	ldr	r3, [pc, #556]	@ (801985c <report_gcode_modes+0x23c>)
 801962e:	8818      	ldrh	r0, [r3, #0]
 8019630:	288b      	cmp	r0, #139	@ 0x8b
 8019632:	f240 80ab 	bls.w	801978c <report_gcode_modes+0x16c>
        hal.stream.write("38.");
 8019636:	4c87      	ldr	r4, [pc, #540]	@ (8019854 <report_gcode_modes+0x234>)
 8019638:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801963c:	4888      	ldr	r0, [pc, #544]	@ (8019860 <report_gcode_modes+0x240>)
 801963e:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)(gc_state.modal.motion - (MotionMode_ProbeToward - 2))));
 8019640:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8019644:	4b85      	ldr	r3, [pc, #532]	@ (801985c <report_gcode_modes+0x23c>)
 8019646:	8818      	ldrh	r0, [r3, #0]
 8019648:	388a      	subs	r0, #138	@ 0x8a
 801964a:	f7fb fe39 	bl	80152c0 <uitoa>
 801964e:	47a0      	blx	r4
    hal.stream.write(" G");
 8019650:	4c80      	ldr	r4, [pc, #512]	@ (8019854 <report_gcode_modes+0x234>)
 8019652:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019656:	4883      	ldr	r0, [pc, #524]	@ (8019864 <report_gcode_modes+0x244>)
 8019658:	4798      	blx	r3
    hal.stream.write(map_coord_system(gc_state.modal.coord_system.id));
 801965a:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 801965e:	4b7f      	ldr	r3, [pc, #508]	@ (801985c <report_gcode_modes+0x23c>)
 8019660:	7d18      	ldrb	r0, [r3, #20]
 8019662:	f7fe feab 	bl	80183bc <map_coord_system>
 8019666:	47a0      	blx	r4
    uint_fast32_t idx = N_AXIS;
 8019668:	2303      	movs	r3, #3
        idx--;
 801966a:	3b01      	subs	r3, #1
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 801966c:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8019670:	4a7a      	ldr	r2, [pc, #488]	@ (801985c <report_gcode_modes+0x23c>)
 8019672:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019676:	edd2 7a00 	vldr	s15, [r2]
    } while(idx && !active);
 801967a:	b123      	cbz	r3, 8019686 <report_gcode_modes+0x66>
 801967c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019684:	d0f1      	beq.n	801966a <report_gcode_modes+0x4a>
    if(is_g92_active())
 8019686:	eef5 7a40 	vcmp.f32	s15, #0.0
 801968a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801968e:	d004      	beq.n	801969a <report_gcode_modes+0x7a>
        hal.stream.write(" G92");
 8019690:	4b70      	ldr	r3, [pc, #448]	@ (8019854 <report_gcode_modes+0x234>)
 8019692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019696:	4874      	ldr	r0, [pc, #464]	@ (8019868 <report_gcode_modes+0x248>)
 8019698:	4798      	blx	r3
    if(settings.mode == Mode_Lathe)
 801969a:	4b74      	ldr	r3, [pc, #464]	@ (801986c <report_gcode_modes+0x24c>)
 801969c:	7e1b      	ldrb	r3, [r3, #24]
 801969e:	2b02      	cmp	r3, #2
 80196a0:	d07b      	beq.n	801979a <report_gcode_modes+0x17a>
    hal.stream.write(" G");
 80196a2:	4c6c      	ldr	r4, [pc, #432]	@ (8019854 <report_gcode_modes+0x234>)
 80196a4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80196a8:	486e      	ldr	r0, [pc, #440]	@ (8019864 <report_gcode_modes+0x244>)
 80196aa:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(gc_state.modal.plane_select + 17)));
 80196ac:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 80196b0:	4d6a      	ldr	r5, [pc, #424]	@ (801985c <report_gcode_modes+0x23c>)
 80196b2:	79a8      	ldrb	r0, [r5, #6]
 80196b4:	3011      	adds	r0, #17
 80196b6:	f7fb fe03 	bl	80152c0 <uitoa>
 80196ba:	47b0      	blx	r6
    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 80196bc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80196c0:	78ea      	ldrb	r2, [r5, #3]
 80196c2:	2a00      	cmp	r2, #0
 80196c4:	d074      	beq.n	80197b0 <report_gcode_modes+0x190>
 80196c6:	486a      	ldr	r0, [pc, #424]	@ (8019870 <report_gcode_modes+0x250>)
 80196c8:	4798      	blx	r3
    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 80196ca:	4b62      	ldr	r3, [pc, #392]	@ (8019854 <report_gcode_modes+0x234>)
 80196cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80196d0:	4a62      	ldr	r2, [pc, #392]	@ (801985c <report_gcode_modes+0x23c>)
 80196d2:	7912      	ldrb	r2, [r2, #4]
 80196d4:	2a00      	cmp	r2, #0
 80196d6:	d06d      	beq.n	80197b4 <report_gcode_modes+0x194>
 80196d8:	4866      	ldr	r0, [pc, #408]	@ (8019874 <report_gcode_modes+0x254>)
 80196da:	4798      	blx	r3
    hal.stream.write(" G");
 80196dc:	4c5d      	ldr	r4, [pc, #372]	@ (8019854 <report_gcode_modes+0x234>)
 80196de:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80196e2:	4860      	ldr	r0, [pc, #384]	@ (8019864 <report_gcode_modes+0x244>)
 80196e4:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(93 + (gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 2 : gc_state.modal.feed_mode ^ 1))));
 80196e6:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 80196ea:	4b5c      	ldr	r3, [pc, #368]	@ (801985c <report_gcode_modes+0x23c>)
 80196ec:	7898      	ldrb	r0, [r3, #2]
 80196ee:	2802      	cmp	r0, #2
 80196f0:	d062      	beq.n	80197b8 <report_gcode_modes+0x198>
 80196f2:	f080 0001 	eor.w	r0, r0, #1
 80196f6:	305d      	adds	r0, #93	@ 0x5d
 80196f8:	f7fb fde2 	bl	80152c0 <uitoa>
 80196fc:	47a0      	blx	r4
    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 80196fe:	4b5b      	ldr	r3, [pc, #364]	@ (801986c <report_gcode_modes+0x24c>)
 8019700:	7e1b      	ldrb	r3, [r3, #24]
 8019702:	2b02      	cmp	r3, #2
 8019704:	d05a      	beq.n	80197bc <report_gcode_modes+0x19c>
    if(gc_state.modal.tool_offset_mode == ToolLengthOffset_Cancel)
 8019706:	4b55      	ldr	r3, [pc, #340]	@ (801985c <report_gcode_modes+0x23c>)
 8019708:	79db      	ldrb	r3, [r3, #7]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d167      	bne.n	80197de <report_gcode_modes+0x1be>
        hal.stream.write(" G49");
 801970e:	4b51      	ldr	r3, [pc, #324]	@ (8019854 <report_gcode_modes+0x234>)
 8019710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019714:	4858      	ldr	r0, [pc, #352]	@ (8019878 <report_gcode_modes+0x258>)
 8019716:	4798      	blx	r3
    hal.stream.write(gc_state.modal.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 8019718:	4b4e      	ldr	r3, [pc, #312]	@ (8019854 <report_gcode_modes+0x234>)
 801971a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801971e:	4a4f      	ldr	r2, [pc, #316]	@ (801985c <report_gcode_modes+0x23c>)
 8019720:	7f52      	ldrb	r2, [r2, #29]
 8019722:	2a01      	cmp	r2, #1
 8019724:	d06e      	beq.n	8019804 <report_gcode_modes+0x1e4>
 8019726:	4855      	ldr	r0, [pc, #340]	@ (801987c <report_gcode_modes+0x25c>)
 8019728:	4798      	blx	r3
    if(gc_state.modal.scaling_active) {
 801972a:	4b4c      	ldr	r3, [pc, #304]	@ (801985c <report_gcode_modes+0x23c>)
 801972c:	7f9b      	ldrb	r3, [r3, #30]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d06a      	beq.n	8019808 <report_gcode_modes+0x1e8>
        hal.stream.write(" G51:");
 8019732:	4d48      	ldr	r5, [pc, #288]	@ (8019854 <report_gcode_modes+0x234>)
 8019734:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019738:	4851      	ldr	r0, [pc, #324]	@ (8019880 <report_gcode_modes+0x260>)
 801973a:	4798      	blx	r3
        axis_signals_tostring(buf, gc_get_g51_state());
 801973c:	f7f3 fa36 	bl	800cbac <gc_get_g51_state>
 8019740:	4601      	mov	r1, r0
 8019742:	4c50      	ldr	r4, [pc, #320]	@ (8019884 <report_gcode_modes+0x264>)
 8019744:	4620      	mov	r0, r4
 8019746:	f7fe faa5 	bl	8017c94 <axis_signals_tostring>
        hal.stream.write(buf);
 801974a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801974e:	4620      	mov	r0, r4
 8019750:	4798      	blx	r3
    if (gc_state.modal.program_flow) {
 8019752:	4b42      	ldr	r3, [pc, #264]	@ (801985c <report_gcode_modes+0x23c>)
 8019754:	7e1b      	ldrb	r3, [r3, #24]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d069      	beq.n	801982e <report_gcode_modes+0x20e>
        switch (gc_state.modal.program_flow) {
 801975a:	2b1e      	cmp	r3, #30
 801975c:	d85a      	bhi.n	8019814 <report_gcode_modes+0x1f4>
 801975e:	b25a      	sxtb	r2, r3
 8019760:	2a00      	cmp	r2, #0
 8019762:	d064      	beq.n	801982e <report_gcode_modes+0x20e>
 8019764:	3b01      	subs	r3, #1
 8019766:	2b1d      	cmp	r3, #29
 8019768:	d861      	bhi.n	801982e <report_gcode_modes+0x20e>
 801976a:	e8df f003 	tbb	[pc, r3]
 801976e:	ab6d      	.short	0xab6d
 8019770:	6060605b 	.word	0x6060605b
 8019774:	60606060 	.word	0x60606060
 8019778:	60606060 	.word	0x60606060
 801977c:	60606060 	.word	0x60606060
 8019780:	60606060 	.word	0x60606060
 8019784:	60606060 	.word	0x60606060
 8019788:	b1606060 	.word	0xb1606060
        hal.stream.write(uitoa((uint32_t)gc_state.modal.motion));
 801978c:	4b31      	ldr	r3, [pc, #196]	@ (8019854 <report_gcode_modes+0x234>)
 801978e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8019792:	f7fb fd95 	bl	80152c0 <uitoa>
 8019796:	47a0      	blx	r4
 8019798:	e75a      	b.n	8019650 <report_gcode_modes+0x30>
        hal.stream.write(gc_state.modal.diameter_mode ? " G7" : " G8");
 801979a:	4b2e      	ldr	r3, [pc, #184]	@ (8019854 <report_gcode_modes+0x234>)
 801979c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197a0:	4a2e      	ldr	r2, [pc, #184]	@ (801985c <report_gcode_modes+0x23c>)
 80197a2:	7952      	ldrb	r2, [r2, #5]
 80197a4:	b112      	cbz	r2, 80197ac <report_gcode_modes+0x18c>
 80197a6:	4838      	ldr	r0, [pc, #224]	@ (8019888 <report_gcode_modes+0x268>)
 80197a8:	4798      	blx	r3
 80197aa:	e77a      	b.n	80196a2 <report_gcode_modes+0x82>
 80197ac:	4837      	ldr	r0, [pc, #220]	@ (801988c <report_gcode_modes+0x26c>)
 80197ae:	e7fb      	b.n	80197a8 <report_gcode_modes+0x188>
    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 80197b0:	4837      	ldr	r0, [pc, #220]	@ (8019890 <report_gcode_modes+0x270>)
 80197b2:	e789      	b.n	80196c8 <report_gcode_modes+0xa8>
    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 80197b4:	4837      	ldr	r0, [pc, #220]	@ (8019894 <report_gcode_modes+0x274>)
 80197b6:	e790      	b.n	80196da <report_gcode_modes+0xba>
    hal.stream.write(uitoa((uint32_t)(93 + (gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 2 : gc_state.modal.feed_mode ^ 1))));
 80197b8:	205f      	movs	r0, #95	@ 0x5f
 80197ba:	e79d      	b.n	80196f8 <report_gcode_modes+0xd8>
    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 80197bc:	f7f3 fbc2 	bl	800cf44 <gc_spindle_get>
 80197c0:	7a83      	ldrb	r3, [r0, #10]
 80197c2:	f013 0f01 	tst.w	r3, #1
 80197c6:	d09e      	beq.n	8019706 <report_gcode_modes+0xe6>
        hal.stream.write(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? " G97" : " G96");
 80197c8:	4b22      	ldr	r3, [pc, #136]	@ (8019854 <report_gcode_modes+0x234>)
 80197ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197ce:	4a23      	ldr	r2, [pc, #140]	@ (801985c <report_gcode_modes+0x23c>)
 80197d0:	7ed2      	ldrb	r2, [r2, #27]
 80197d2:	b912      	cbnz	r2, 80197da <report_gcode_modes+0x1ba>
 80197d4:	4830      	ldr	r0, [pc, #192]	@ (8019898 <report_gcode_modes+0x278>)
 80197d6:	4798      	blx	r3
 80197d8:	e795      	b.n	8019706 <report_gcode_modes+0xe6>
 80197da:	4830      	ldr	r0, [pc, #192]	@ (801989c <report_gcode_modes+0x27c>)
 80197dc:	e7fb      	b.n	80197d6 <report_gcode_modes+0x1b6>
        hal.stream.write(" G43");
 80197de:	4b1d      	ldr	r3, [pc, #116]	@ (8019854 <report_gcode_modes+0x234>)
 80197e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80197e4:	482e      	ldr	r0, [pc, #184]	@ (80198a0 <report_gcode_modes+0x280>)
 80197e6:	4798      	blx	r3
        if(gc_state.modal.tool_offset_mode != ToolLengthOffset_Enable)
 80197e8:	4b1c      	ldr	r3, [pc, #112]	@ (801985c <report_gcode_modes+0x23c>)
 80197ea:	79db      	ldrb	r3, [r3, #7]
 80197ec:	2b01      	cmp	r3, #1
 80197ee:	d093      	beq.n	8019718 <report_gcode_modes+0xf8>
            hal.stream.write(gc_state.modal.tool_offset_mode == ToolLengthOffset_EnableDynamic ? ".1" : ".2");
 80197f0:	4a18      	ldr	r2, [pc, #96]	@ (8019854 <report_gcode_modes+0x234>)
 80197f2:	f8d2 20b4 	ldr.w	r2, [r2, #180]	@ 0xb4
 80197f6:	2b02      	cmp	r3, #2
 80197f8:	d002      	beq.n	8019800 <report_gcode_modes+0x1e0>
 80197fa:	482a      	ldr	r0, [pc, #168]	@ (80198a4 <report_gcode_modes+0x284>)
 80197fc:	4790      	blx	r2
 80197fe:	e78b      	b.n	8019718 <report_gcode_modes+0xf8>
 8019800:	4829      	ldr	r0, [pc, #164]	@ (80198a8 <report_gcode_modes+0x288>)
 8019802:	e7fb      	b.n	80197fc <report_gcode_modes+0x1dc>
    hal.stream.write(gc_state.modal.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 8019804:	4829      	ldr	r0, [pc, #164]	@ (80198ac <report_gcode_modes+0x28c>)
 8019806:	e78f      	b.n	8019728 <report_gcode_modes+0x108>
        hal.stream.write(" G50");
 8019808:	4b12      	ldr	r3, [pc, #72]	@ (8019854 <report_gcode_modes+0x234>)
 801980a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801980e:	4828      	ldr	r0, [pc, #160]	@ (80198b0 <report_gcode_modes+0x290>)
 8019810:	4798      	blx	r3
 8019812:	e79e      	b.n	8019752 <report_gcode_modes+0x132>
        switch (gc_state.modal.program_flow) {
 8019814:	2b3c      	cmp	r3, #60	@ 0x3c
 8019816:	d10a      	bne.n	801982e <report_gcode_modes+0x20e>
                hal.stream.write(" M60");
 8019818:	4b0e      	ldr	r3, [pc, #56]	@ (8019854 <report_gcode_modes+0x234>)
 801981a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801981e:	4825      	ldr	r0, [pc, #148]	@ (80198b4 <report_gcode_modes+0x294>)
 8019820:	4798      	blx	r3
                break;
 8019822:	e004      	b.n	801982e <report_gcode_modes+0x20e>
                hal.stream.write(" M0");
 8019824:	4b0b      	ldr	r3, [pc, #44]	@ (8019854 <report_gcode_modes+0x234>)
 8019826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801982a:	4823      	ldr	r0, [pc, #140]	@ (80198b8 <report_gcode_modes+0x298>)
 801982c:	4798      	blx	r3
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 801982e:	4b09      	ldr	r3, [pc, #36]	@ (8019854 <report_gcode_modes+0x234>)
 8019830:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8019834:	4b09      	ldr	r3, [pc, #36]	@ (801985c <report_gcode_modes+0x23c>)
 8019836:	7e9b      	ldrb	r3, [r3, #26]
 8019838:	f013 0f01 	tst.w	r3, #1
 801983c:	d04e      	beq.n	80198dc <report_gcode_modes+0x2bc>
 801983e:	f013 0f02 	tst.w	r3, #2
 8019842:	d06c      	beq.n	801991e <report_gcode_modes+0x2fe>
 8019844:	481d      	ldr	r0, [pc, #116]	@ (80198bc <report_gcode_modes+0x29c>)
 8019846:	e04a      	b.n	80198de <report_gcode_modes+0x2be>
                hal.stream.write(" M1");
 8019848:	4b02      	ldr	r3, [pc, #8]	@ (8019854 <report_gcode_modes+0x234>)
 801984a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801984e:	481c      	ldr	r0, [pc, #112]	@ (80198c0 <report_gcode_modes+0x2a0>)
 8019850:	4798      	blx	r3
                break;
 8019852:	e7ec      	b.n	801982e <report_gcode_modes+0x20e>
 8019854:	200011c0 	.word	0x200011c0
 8019858:	0802b8c0 	.word	0x0802b8c0
 801985c:	20000ef8 	.word	0x20000ef8
 8019860:	0802b8c8 	.word	0x0802b8c8
 8019864:	0802b8cc 	.word	0x0802b8cc
 8019868:	0802b8d0 	.word	0x0802b8d0
 801986c:	20001bd8 	.word	0x20001bd8
 8019870:	0802b878 	.word	0x0802b878
 8019874:	0802b888 	.word	0x0802b888
 8019878:	0802b8d8 	.word	0x0802b8d8
 801987c:	0802b8b8 	.word	0x0802b8b8
 8019880:	0802b8e8 	.word	0x0802b8e8
 8019884:	20001aa8 	.word	0x20001aa8
 8019888:	0802b870 	.word	0x0802b870
 801988c:	0802b874 	.word	0x0802b874
 8019890:	0802b880 	.word	0x0802b880
 8019894:	0802b890 	.word	0x0802b890
 8019898:	0802b898 	.word	0x0802b898
 801989c:	0802b8a0 	.word	0x0802b8a0
 80198a0:	0802b8e0 	.word	0x0802b8e0
 80198a4:	0802b8ac 	.word	0x0802b8ac
 80198a8:	0802b8a8 	.word	0x0802b8a8
 80198ac:	0802b8b0 	.word	0x0802b8b0
 80198b0:	0802b8f0 	.word	0x0802b8f0
 80198b4:	0802b90c 	.word	0x0802b90c
 80198b8:	0802b8f8 	.word	0x0802b8f8
 80198bc:	080298a0 	.word	0x080298a0
 80198c0:	0802b8fc 	.word	0x0802b8fc
                hal.stream.write(" M2");
 80198c4:	4b4e      	ldr	r3, [pc, #312]	@ (8019a00 <report_gcode_modes+0x3e0>)
 80198c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80198ca:	484e      	ldr	r0, [pc, #312]	@ (8019a04 <report_gcode_modes+0x3e4>)
 80198cc:	4798      	blx	r3
                break;
 80198ce:	e7ae      	b.n	801982e <report_gcode_modes+0x20e>
                hal.stream.write(" M30");
 80198d0:	4b4b      	ldr	r3, [pc, #300]	@ (8019a00 <report_gcode_modes+0x3e0>)
 80198d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80198d6:	484c      	ldr	r0, [pc, #304]	@ (8019a08 <report_gcode_modes+0x3e8>)
 80198d8:	4798      	blx	r3
                break;
 80198da:	e7a8      	b.n	801982e <report_gcode_modes+0x20e>
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 80198dc:	484b      	ldr	r0, [pc, #300]	@ (8019a0c <report_gcode_modes+0x3ec>)
 80198de:	4790      	blx	r2
    if(gc_state.tool_change)
 80198e0:	4b4b      	ldr	r3, [pc, #300]	@ (8019a10 <report_gcode_modes+0x3f0>)
 80198e2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80198e6:	b123      	cbz	r3, 80198f2 <report_gcode_modes+0x2d2>
        hal.stream.write(" M6");
 80198e8:	4b45      	ldr	r3, [pc, #276]	@ (8019a00 <report_gcode_modes+0x3e0>)
 80198ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80198ee:	4849      	ldr	r0, [pc, #292]	@ (8019a14 <report_gcode_modes+0x3f4>)
 80198f0:	4798      	blx	r3
    if (gc_state.modal.coolant.value) {
 80198f2:	4b47      	ldr	r3, [pc, #284]	@ (8019a10 <report_gcode_modes+0x3f0>)
 80198f4:	7e5b      	ldrb	r3, [r3, #25]
 80198f6:	b1a3      	cbz	r3, 8019922 <report_gcode_modes+0x302>
        if (gc_state.modal.coolant.mist)
 80198f8:	f013 0f02 	tst.w	r3, #2
 80198fc:	d004      	beq.n	8019908 <report_gcode_modes+0x2e8>
             hal.stream.write(" M7");
 80198fe:	4b40      	ldr	r3, [pc, #256]	@ (8019a00 <report_gcode_modes+0x3e0>)
 8019900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019904:	4844      	ldr	r0, [pc, #272]	@ (8019a18 <report_gcode_modes+0x3f8>)
 8019906:	4798      	blx	r3
        if (gc_state.modal.coolant.flood)
 8019908:	4b41      	ldr	r3, [pc, #260]	@ (8019a10 <report_gcode_modes+0x3f0>)
 801990a:	7e5b      	ldrb	r3, [r3, #25]
 801990c:	f013 0f01 	tst.w	r3, #1
 8019910:	d00c      	beq.n	801992c <report_gcode_modes+0x30c>
            hal.stream.write(" M8");
 8019912:	4b3b      	ldr	r3, [pc, #236]	@ (8019a00 <report_gcode_modes+0x3e0>)
 8019914:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019918:	4840      	ldr	r0, [pc, #256]	@ (8019a1c <report_gcode_modes+0x3fc>)
 801991a:	4798      	blx	r3
 801991c:	e006      	b.n	801992c <report_gcode_modes+0x30c>
    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 801991e:	4840      	ldr	r0, [pc, #256]	@ (8019a20 <report_gcode_modes+0x400>)
 8019920:	e7dd      	b.n	80198de <report_gcode_modes+0x2be>
        hal.stream.write(" M9");
 8019922:	4b37      	ldr	r3, [pc, #220]	@ (8019a00 <report_gcode_modes+0x3e0>)
 8019924:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019928:	483e      	ldr	r0, [pc, #248]	@ (8019a24 <report_gcode_modes+0x404>)
 801992a:	4798      	blx	r3
    if (sys.override.control.feed_rate_disable)
 801992c:	4b3e      	ldr	r3, [pc, #248]	@ (8019a28 <report_gcode_modes+0x408>)
 801992e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8019932:	f013 0f01 	tst.w	r3, #1
 8019936:	d004      	beq.n	8019942 <report_gcode_modes+0x322>
        hal.stream.write(" M50");
 8019938:	4b31      	ldr	r3, [pc, #196]	@ (8019a00 <report_gcode_modes+0x3e0>)
 801993a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801993e:	483b      	ldr	r0, [pc, #236]	@ (8019a2c <report_gcode_modes+0x40c>)
 8019940:	4798      	blx	r3
    if (sys.override.control.spindle_rpm_disable)
 8019942:	4b39      	ldr	r3, [pc, #228]	@ (8019a28 <report_gcode_modes+0x408>)
 8019944:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8019948:	f013 0f04 	tst.w	r3, #4
 801994c:	d004      	beq.n	8019958 <report_gcode_modes+0x338>
        hal.stream.write(" M51");
 801994e:	4b2c      	ldr	r3, [pc, #176]	@ (8019a00 <report_gcode_modes+0x3e0>)
 8019950:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8019954:	4836      	ldr	r0, [pc, #216]	@ (8019a30 <report_gcode_modes+0x410>)
 8019956:	4798      	blx	r3
    if (sys.override.control.feed_hold_disable)
 8019958:	4b33      	ldr	r3, [pc, #204]	@ (8019a28 <report_gcode_modes+0x408>)
 801995a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801995e:	f013 0f02 	tst.w	r3, #2
 8019962:	d004      	beq.n	801996e <report_gcode_modes+0x34e>
        hal.stream.write(" M53");
 8019964:	4b26      	ldr	r3, [pc, #152]	@ (8019a00 <report_gcode_modes+0x3e0>)
 8019966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801996a:	4832      	ldr	r0, [pc, #200]	@ (8019a34 <report_gcode_modes+0x414>)
 801996c:	4798      	blx	r3
    if (settings.parking.flags.enable_override_control && sys.override.control.parking_disable)
 801996e:	4b32      	ldr	r3, [pc, #200]	@ (8019a38 <report_gcode_modes+0x418>)
 8019970:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8019974:	f013 0f04 	tst.w	r3, #4
 8019978:	d00a      	beq.n	8019990 <report_gcode_modes+0x370>
 801997a:	4b2b      	ldr	r3, [pc, #172]	@ (8019a28 <report_gcode_modes+0x408>)
 801997c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8019980:	f013 0f08 	tst.w	r3, #8
 8019984:	d004      	beq.n	8019990 <report_gcode_modes+0x370>
        hal.stream.write(" M56");
 8019986:	4b1e      	ldr	r3, [pc, #120]	@ (8019a00 <report_gcode_modes+0x3e0>)
 8019988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801998c:	482b      	ldr	r0, [pc, #172]	@ (8019a3c <report_gcode_modes+0x41c>)
 801998e:	4798      	blx	r3
    hal.stream.write(appendbuf(2, " T", uitoa((uint32_t)gc_state.tool->tool_id)));
 8019990:	4d1b      	ldr	r5, [pc, #108]	@ (8019a00 <report_gcode_modes+0x3e0>)
 8019992:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019996:	4c1e      	ldr	r4, [pc, #120]	@ (8019a10 <report_gcode_modes+0x3f0>)
 8019998:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 801999c:	6918      	ldr	r0, [r3, #16]
 801999e:	f7fb fc8f 	bl	80152c0 <uitoa>
 80199a2:	4602      	mov	r2, r0
 80199a4:	4926      	ldr	r1, [pc, #152]	@ (8019a40 <report_gcode_modes+0x420>)
 80199a6:	2002      	movs	r0, #2
 80199a8:	f7fe fd5a 	bl	8018460 <appendbuf>
 80199ac:	47b0      	blx	r6
    hal.stream.write(appendbuf(2, " F", get_rate_value(gc_state.feed_rate)));
 80199ae:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 80199b2:	4b24      	ldr	r3, [pc, #144]	@ (8019a44 <report_gcode_modes+0x424>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	ed94 0a18 	vldr	s0, [r4, #96]	@ 0x60
 80199ba:	4798      	blx	r3
 80199bc:	4602      	mov	r2, r0
 80199be:	4922      	ldr	r1, [pc, #136]	@ (8019a48 <report_gcode_modes+0x428>)
 80199c0:	2002      	movs	r0, #2
 80199c2:	f7fe fd4d 	bl	8018460 <appendbuf>
 80199c6:	47a8      	blx	r5
    if(gc_spindle_get()->cap.variable)
 80199c8:	f7f3 fabc 	bl	800cf44 <gc_spindle_get>
 80199cc:	7a83      	ldrb	r3, [r0, #10]
 80199ce:	f013 0f01 	tst.w	r3, #1
 80199d2:	d105      	bne.n	80199e0 <report_gcode_modes+0x3c0>
    hal.stream.write("]" ASCII_EOL);
 80199d4:	4b0a      	ldr	r3, [pc, #40]	@ (8019a00 <report_gcode_modes+0x3e0>)
 80199d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80199da:	481c      	ldr	r0, [pc, #112]	@ (8019a4c <report_gcode_modes+0x42c>)
 80199dc:	4798      	blx	r3
}
 80199de:	bd70      	pop	{r4, r5, r6, pc}
        hal.stream.write(appendbuf(2, " S", ftoa(gc_state.spindle.rpm, N_DECIMAL_RPMVALUE)));
 80199e0:	4b07      	ldr	r3, [pc, #28]	@ (8019a00 <report_gcode_modes+0x3e0>)
 80199e2:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 80199e6:	2000      	movs	r0, #0
 80199e8:	4b09      	ldr	r3, [pc, #36]	@ (8019a10 <report_gcode_modes+0x3f0>)
 80199ea:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 80199ee:	f7fb fc89 	bl	8015304 <ftoa>
 80199f2:	4602      	mov	r2, r0
 80199f4:	4916      	ldr	r1, [pc, #88]	@ (8019a50 <report_gcode_modes+0x430>)
 80199f6:	2002      	movs	r0, #2
 80199f8:	f7fe fd32 	bl	8018460 <appendbuf>
 80199fc:	47a0      	blx	r4
 80199fe:	e7e9      	b.n	80199d4 <report_gcode_modes+0x3b4>
 8019a00:	200011c0 	.word	0x200011c0
 8019a04:	0802b900 	.word	0x0802b900
 8019a08:	0802b904 	.word	0x0802b904
 8019a0c:	080298a8 	.word	0x080298a8
 8019a10:	20000ef8 	.word	0x20000ef8
 8019a14:	080298b0 	.word	0x080298b0
 8019a18:	080298b8 	.word	0x080298b8
 8019a1c:	0802b914 	.word	0x0802b914
 8019a20:	08029898 	.word	0x08029898
 8019a24:	0802b918 	.word	0x0802b918
 8019a28:	200014a0 	.word	0x200014a0
 8019a2c:	0802b91c 	.word	0x0802b91c
 8019a30:	0802b924 	.word	0x0802b924
 8019a34:	0802b92c 	.word	0x0802b92c
 8019a38:	20001bd8 	.word	0x20001bd8
 8019a3c:	0802b934 	.word	0x0802b934
 8019a40:	0802b93c 	.word	0x0802b93c
 8019a44:	20001a9c 	.word	0x20001a9c
 8019a48:	0802b940 	.word	0x0802b940
 8019a4c:	0802b584 	.word	0x0802b584
 8019a50:	0802b944 	.word	0x0802b944

08019a54 <report_startup_line>:
{
 8019a54:	b570      	push	{r4, r5, r6, lr}
 8019a56:	460d      	mov	r5, r1
    hal.stream.write(appendbuf(3, "$N", uitoa((uint32_t)n), "="));
 8019a58:	4c0a      	ldr	r4, [pc, #40]	@ (8019a84 <report_startup_line+0x30>)
 8019a5a:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019a5e:	f7fb fc2f 	bl	80152c0 <uitoa>
 8019a62:	4602      	mov	r2, r0
 8019a64:	4b08      	ldr	r3, [pc, #32]	@ (8019a88 <report_startup_line+0x34>)
 8019a66:	4909      	ldr	r1, [pc, #36]	@ (8019a8c <report_startup_line+0x38>)
 8019a68:	2003      	movs	r0, #3
 8019a6a:	f7fe fcf9 	bl	8018460 <appendbuf>
 8019a6e:	47b0      	blx	r6
    hal.stream.write(line);
 8019a70:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019a74:	4628      	mov	r0, r5
 8019a76:	4798      	blx	r3
    hal.stream.write(ASCII_EOL);
 8019a78:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019a7c:	4804      	ldr	r0, [pc, #16]	@ (8019a90 <report_startup_line+0x3c>)
 8019a7e:	4798      	blx	r3
}
 8019a80:	bd70      	pop	{r4, r5, r6, pc}
 8019a82:	bf00      	nop
 8019a84:	200011c0 	.word	0x200011c0
 8019a88:	0802b7fc 	.word	0x0802b7fc
 8019a8c:	0802b948 	.word	0x0802b948
 8019a90:	0802bc30 	.word	0x0802bc30

08019a94 <report_execute_startup_message>:
{
 8019a94:	b570      	push	{r4, r5, r6, lr}
 8019a96:	4606      	mov	r6, r0
 8019a98:	460c      	mov	r4, r1
    hal.stream.write(">");
 8019a9a:	4d09      	ldr	r5, [pc, #36]	@ (8019ac0 <report_execute_startup_message+0x2c>)
 8019a9c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019aa0:	4808      	ldr	r0, [pc, #32]	@ (8019ac4 <report_execute_startup_message+0x30>)
 8019aa2:	4798      	blx	r3
    hal.stream.write(line);
 8019aa4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019aa8:	4630      	mov	r0, r6
 8019aaa:	4798      	blx	r3
    hal.stream.write(":");
 8019aac:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019ab0:	4805      	ldr	r0, [pc, #20]	@ (8019ac8 <report_execute_startup_message+0x34>)
 8019ab2:	4798      	blx	r3
    grbl.report.status_message(status_code);
 8019ab4:	4b05      	ldr	r3, [pc, #20]	@ (8019acc <report_execute_startup_message+0x38>)
 8019ab6:	689b      	ldr	r3, [r3, #8]
 8019ab8:	4620      	mov	r0, r4
 8019aba:	4798      	blx	r3
}
 8019abc:	bd70      	pop	{r4, r5, r6, pc}
 8019abe:	bf00      	nop
 8019ac0:	200011c0 	.word	0x200011c0
 8019ac4:	0802b94c 	.word	0x0802b94c
 8019ac8:	0802b8ec 	.word	0x0802b8ec
 8019acc:	200013a8 	.word	0x200013a8

08019ad0 <report_build_info>:
{
 8019ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad2:	b09b      	sub	sp, #108	@ 0x6c
 8019ad4:	4605      	mov	r5, r0
    hal.stream.write("[VER:" GRBL_VERSION ".");
 8019ad6:	4c7f      	ldr	r4, [pc, #508]	@ (8019cd4 <report_build_info+0x204>)
 8019ad8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019adc:	487e      	ldr	r0, [pc, #504]	@ (8019cd8 <report_build_info+0x208>)
 8019ade:	4798      	blx	r3
    hal.stream.write(uitoa(GRBL_BUILD));
 8019ae0:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8019ae4:	487d      	ldr	r0, [pc, #500]	@ (8019cdc <report_build_info+0x20c>)
 8019ae6:	f7fb fbeb 	bl	80152c0 <uitoa>
 8019aea:	47b0      	blx	r6
    hal.stream.write(":");
 8019aec:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019af0:	487b      	ldr	r0, [pc, #492]	@ (8019ce0 <report_build_info+0x210>)
 8019af2:	4798      	blx	r3
    hal.stream.write(line);
 8019af4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019af8:	4628      	mov	r0, r5
 8019afa:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8019afc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019b00:	4878      	ldr	r0, [pc, #480]	@ (8019ce4 <report_build_info+0x214>)
 8019b02:	4798      	blx	r3
    spindle_ptrs_t *spindle = spindle_get(0);
 8019b04:	2000      	movs	r0, #0
 8019b06:	f004 fa0f 	bl	801df28 <spindle_get>
 8019b0a:	4603      	mov	r3, r0
    strcpy(buf, "[OPT:");
 8019b0c:	4a76      	ldr	r2, [pc, #472]	@ (8019ce8 <report_build_info+0x218>)
 8019b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019b12:	9001      	str	r0, [sp, #4]
 8019b14:	f8ad 1008 	strh.w	r1, [sp, #8]
    if(spindle && spindle->cap.variable)
 8019b18:	461a      	mov	r2, r3
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	f000 80d4 	beq.w	8019cc8 <report_build_info+0x1f8>
 8019b20:	7a9b      	ldrb	r3, [r3, #10]
 8019b22:	f013 0f01 	tst.w	r3, #1
 8019b26:	f000 80d2 	beq.w	8019cce <report_build_info+0x1fe>
        *append++ = 'V';
 8019b2a:	2356      	movs	r3, #86	@ 0x56
 8019b2c:	f88d 3009 	strb.w	r3, [sp, #9]
 8019b30:	f10d 010a 	add.w	r1, sp, #10
    *append++ = 'N';
 8019b34:	460b      	mov	r3, r1
 8019b36:	204e      	movs	r0, #78	@ 0x4e
 8019b38:	f803 0b01 	strb.w	r0, [r3], #1
    if(hal.coolant_cap.mist)
 8019b3c:	4865      	ldr	r0, [pc, #404]	@ (8019cd4 <report_build_info+0x204>)
 8019b3e:	f890 01e4 	ldrb.w	r0, [r0, #484]	@ 0x1e4
 8019b42:	f010 0f02 	tst.w	r0, #2
 8019b46:	d002      	beq.n	8019b4e <report_build_info+0x7e>
        *append++ = 'M';
 8019b48:	1c8b      	adds	r3, r1, #2
 8019b4a:	204d      	movs	r0, #77	@ 0x4d
 8019b4c:	7048      	strb	r0, [r1, #1]
    if(settings.parking.flags.enabled)
 8019b4e:	4967      	ldr	r1, [pc, #412]	@ (8019cec <report_build_info+0x21c>)
 8019b50:	f891 1128 	ldrb.w	r1, [r1, #296]	@ 0x128
 8019b54:	f011 0f01 	tst.w	r1, #1
 8019b58:	d002      	beq.n	8019b60 <report_build_info+0x90>
        *append++ = 'P';
 8019b5a:	2150      	movs	r1, #80	@ 0x50
 8019b5c:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.homing.flags.force_set_origin)
 8019b60:	4962      	ldr	r1, [pc, #392]	@ (8019cec <report_build_info+0x21c>)
 8019b62:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 8019b66:	f011 0f08 	tst.w	r1, #8
 8019b6a:	d002      	beq.n	8019b72 <report_build_info+0xa2>
        *append++ = 'Z';
 8019b6c:	215a      	movs	r1, #90	@ 0x5a
 8019b6e:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.homing.flags.single_axis_commands)
 8019b72:	495e      	ldr	r1, [pc, #376]	@ (8019cec <report_build_info+0x21c>)
 8019b74:	f891 1114 	ldrb.w	r1, [r1, #276]	@ 0x114
 8019b78:	f011 0f02 	tst.w	r1, #2
 8019b7c:	d002      	beq.n	8019b84 <report_build_info+0xb4>
        *append++ = 'H';
 8019b7e:	2148      	movs	r1, #72	@ 0x48
 8019b80:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.limits.flags.two_switches)
 8019b84:	4959      	ldr	r1, [pc, #356]	@ (8019cec <report_build_info+0x21c>)
 8019b86:	f891 1124 	ldrb.w	r1, [r1, #292]	@ 0x124
 8019b8a:	f011 0f10 	tst.w	r1, #16
 8019b8e:	d002      	beq.n	8019b96 <report_build_info+0xc6>
        *append++ = 'T';
 8019b90:	2154      	movs	r1, #84	@ 0x54
 8019b92:	f803 1b01 	strb.w	r1, [r3], #1
    if(settings.probe.allow_feed_override)
 8019b96:	4955      	ldr	r1, [pc, #340]	@ (8019cec <report_build_info+0x21c>)
 8019b98:	f891 1100 	ldrb.w	r1, [r1, #256]	@ 0x100
 8019b9c:	f011 0f10 	tst.w	r1, #16
 8019ba0:	d002      	beq.n	8019ba8 <report_build_info+0xd8>
        *append++ = 'A';
 8019ba2:	2141      	movs	r1, #65	@ 0x41
 8019ba4:	f803 1b01 	strb.w	r1, [r3], #1
    if(spindle && !spindle->cap.direction) // NOTE: Shown when disabled.
 8019ba8:	b132      	cbz	r2, 8019bb8 <report_build_info+0xe8>
 8019baa:	7a92      	ldrb	r2, [r2, #10]
 8019bac:	f012 0f02 	tst.w	r2, #2
 8019bb0:	d102      	bne.n	8019bb8 <report_build_info+0xe8>
        *append++ = 'D';
 8019bb2:	2244      	movs	r2, #68	@ 0x44
 8019bb4:	f803 2b01 	strb.w	r2, [r3], #1
    if(settings.spindle.flags.enable_rpm_controlled)
 8019bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8019cec <report_build_info+0x21c>)
 8019bba:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8019bbe:	f012 0f01 	tst.w	r2, #1
 8019bc2:	d002      	beq.n	8019bca <report_build_info+0xfa>
        *append++ = '0';
 8019bc4:	2230      	movs	r2, #48	@ 0x30
 8019bc6:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.driver_cap.software_debounce)
 8019bca:	4a42      	ldr	r2, [pc, #264]	@ (8019cd4 <report_build_info+0x204>)
 8019bcc:	f892 21d8 	ldrb.w	r2, [r2, #472]	@ 0x1d8
 8019bd0:	f012 0f01 	tst.w	r2, #1
 8019bd4:	d002      	beq.n	8019bdc <report_build_info+0x10c>
        *append++ = 'S';
 8019bd6:	2253      	movs	r2, #83	@ 0x53
 8019bd8:	f803 2b01 	strb.w	r2, [r3], #1
    if(settings.parking.flags.enable_override_control)
 8019bdc:	4a43      	ldr	r2, [pc, #268]	@ (8019cec <report_build_info+0x21c>)
 8019bde:	f892 2128 	ldrb.w	r2, [r2, #296]	@ 0x128
 8019be2:	f012 0f04 	tst.w	r2, #4
 8019be6:	d002      	beq.n	8019bee <report_build_info+0x11e>
        *append++ = 'R';
 8019be8:	2252      	movs	r2, #82	@ 0x52
 8019bea:	f803 2b01 	strb.w	r2, [r3], #1
    if(!settings.homing.flags.init_lock)
 8019bee:	4a3f      	ldr	r2, [pc, #252]	@ (8019cec <report_build_info+0x21c>)
 8019bf0:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8019bf4:	f012 0f04 	tst.w	r2, #4
 8019bf8:	d102      	bne.n	8019c00 <report_build_info+0x130>
        *append++ = 'L';
 8019bfa:	224c      	movs	r2, #76	@ 0x4c
 8019bfc:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.signals_cap.safety_door_ajar)
 8019c00:	4a34      	ldr	r2, [pc, #208]	@ (8019cd4 <report_build_info+0x204>)
 8019c02:	f892 21dc 	ldrb.w	r2, [r2, #476]	@ 0x1dc
 8019c06:	f012 0f08 	tst.w	r2, #8
 8019c0a:	d002      	beq.n	8019c12 <report_build_info+0x142>
        *append++ = '+';
 8019c0c:	222b      	movs	r2, #43	@ 0x2b
 8019c0e:	f803 2b01 	strb.w	r2, [r3], #1
    if(!settings.status_report.sync_on_wco_change) // NOTE: Shown when disabled.
 8019c12:	4a36      	ldr	r2, [pc, #216]	@ (8019cec <report_build_info+0x21c>)
 8019c14:	f892 20fd 	ldrb.w	r2, [r2, #253]	@ 0xfd
 8019c18:	f012 0f01 	tst.w	r2, #1
 8019c1c:	d102      	bne.n	8019c24 <report_build_info+0x154>
        *append++ = 'W';
 8019c1e:	2257      	movs	r2, #87	@ 0x57
 8019c20:	f803 2b01 	strb.w	r2, [r3], #1
    if(hal.stepper.get_ganged)
 8019c24:	4a2b      	ldr	r2, [pc, #172]	@ (8019cd4 <report_build_info+0x204>)
 8019c26:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 8019c2a:	b112      	cbz	r2, 8019c32 <report_build_info+0x162>
        *append++ = '2';
 8019c2c:	2232      	movs	r2, #50	@ 0x32
 8019c2e:	f803 2b01 	strb.w	r2, [r3], #1
    *append++ = ',';
 8019c32:	222c      	movs	r2, #44	@ 0x2c
 8019c34:	701a      	strb	r2, [r3, #0]
    *append = '\0';
 8019c36:	2400      	movs	r4, #0
 8019c38:	705c      	strb	r4, [r3, #1]
    hal.stream.write(buf);
 8019c3a:	4d26      	ldr	r5, [pc, #152]	@ (8019cd4 <report_build_info+0x204>)
 8019c3c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019c40:	a801      	add	r0, sp, #4
 8019c42:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)plan_get_buffer_size()));
 8019c44:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019c48:	f7fc fa20 	bl	801608c <plan_get_buffer_size>
 8019c4c:	f7fb fb38 	bl	80152c0 <uitoa>
 8019c50:	47b0      	blx	r6
    hal.stream.write(",");
 8019c52:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019c56:	4e26      	ldr	r6, [pc, #152]	@ (8019cf0 <report_build_info+0x220>)
 8019c58:	4630      	mov	r0, r6
 8019c5a:	4798      	blx	r3
    hal.stream.write(uitoa(hal.rx_buffer_size));
 8019c5c:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8019c60:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8019c62:	f7fb fb2d 	bl	80152c0 <uitoa>
 8019c66:	47b8      	blx	r7
        hal.stream.write(",");
 8019c68:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019c6c:	4630      	mov	r0, r6
 8019c6e:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)N_AXIS));
 8019c70:	f8d5 70b4 	ldr.w	r7, [r5, #180]	@ 0xb4
 8019c74:	2003      	movs	r0, #3
 8019c76:	f7fb fb23 	bl	80152c0 <uitoa>
 8019c7a:	47b8      	blx	r7
        hal.stream.write(",");
 8019c7c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019c80:	4630      	mov	r0, r6
 8019c82:	4798      	blx	r3
        hal.stream.write(uitoa(grbl.tool_table.n_tools));
 8019c84:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8019c88:	4b1a      	ldr	r3, [pc, #104]	@ (8019cf4 <report_build_info+0x224>)
 8019c8a:	6998      	ldr	r0, [r3, #24]
 8019c8c:	f7fb fb18 	bl	80152c0 <uitoa>
 8019c90:	47b0      	blx	r6
    hal.stream.write("]" ASCII_EOL);
 8019c92:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8019c96:	4813      	ldr	r0, [pc, #76]	@ (8019ce4 <report_build_info+0x214>)
 8019c98:	4798      	blx	r3
        nvs_io_t *nvs = nvs_buffer_get_physical();
 8019c9a:	f7fc f859 	bl	8015d50 <nvs_buffer_get_physical>
 8019c9e:	4605      	mov	r5, r0
        strcat(strcpy(buf, "[AXS:"), uitoa(N_AXIS));
 8019ca0:	4b15      	ldr	r3, [pc, #84]	@ (8019cf8 <report_build_info+0x228>)
 8019ca2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019ca6:	9001      	str	r0, [sp, #4]
 8019ca8:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019cac:	2003      	movs	r0, #3
 8019cae:	f7fb fb07 	bl	80152c0 <uitoa>
 8019cb2:	4601      	mov	r1, r0
 8019cb4:	a801      	add	r0, sp, #4
 8019cb6:	f00a fcc2 	bl	802463e <strcat>
        *append++ = ':';
 8019cba:	233a      	movs	r3, #58	@ 0x3a
 8019cbc:	f88d 300a 	strb.w	r3, [sp, #10]
        for(idx = 0; idx < N_AXIS; idx++)
 8019cc0:	4622      	mov	r2, r4
        *append++ = ':';
 8019cc2:	f10d 030b 	add.w	r3, sp, #11
        for(idx = 0; idx < N_AXIS; idx++)
 8019cc6:	e020      	b.n	8019d0a <report_build_info+0x23a>
    char *append = &buf[5];
 8019cc8:	f10d 0109 	add.w	r1, sp, #9
 8019ccc:	e732      	b.n	8019b34 <report_build_info+0x64>
 8019cce:	f10d 0109 	add.w	r1, sp, #9
 8019cd2:	e72f      	b.n	8019b34 <report_build_info+0x64>
 8019cd4:	200011c0 	.word	0x200011c0
 8019cd8:	0802b97c 	.word	0x0802b97c
 8019cdc:	0134d94f 	.word	0x0134d94f
 8019ce0:	0802b8ec 	.word	0x0802b8ec
 8019ce4:	0802b584 	.word	0x0802b584
 8019ce8:	0802b988 	.word	0x0802b988
 8019cec:	20001bd8 	.word	0x20001bd8
 8019cf0:	0802b9b0 	.word	0x0802b9b0
 8019cf4:	200013a8 	.word	0x200013a8
 8019cf8:	0802b990 	.word	0x0802b990
            *append++ = *axis_letter[idx];
 8019cfc:	49ab      	ldr	r1, [pc, #684]	@ (8019fac <report_build_info+0x4dc>)
 8019cfe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019d02:	7809      	ldrb	r1, [r1, #0]
 8019d04:	f803 1b01 	strb.w	r1, [r3], #1
        for(idx = 0; idx < N_AXIS; idx++)
 8019d08:	3201      	adds	r2, #1
 8019d0a:	2a02      	cmp	r2, #2
 8019d0c:	d9f6      	bls.n	8019cfc <report_build_info+0x22c>
        *append = '\0';
 8019d0e:	2200      	movs	r2, #0
 8019d10:	701a      	strb	r2, [r3, #0]
        hal.stream.write(strcat(buf, "]" ASCII_EOL));
 8019d12:	4ba7      	ldr	r3, [pc, #668]	@ (8019fb0 <report_build_info+0x4e0>)
 8019d14:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 8019d18:	ac01      	add	r4, sp, #4
 8019d1a:	4620      	mov	r0, r4
 8019d1c:	f7ee f9f0 	bl	8008100 <strlen>
 8019d20:	4603      	mov	r3, r0
 8019d22:	4aa4      	ldr	r2, [pc, #656]	@ (8019fb4 <report_build_info+0x4e4>)
 8019d24:	6810      	ldr	r0, [r2, #0]
 8019d26:	50e0      	str	r0, [r4, r3]
 8019d28:	4620      	mov	r0, r4
 8019d2a:	47b0      	blx	r6
        strcpy(buf, "[NEWOPT:ENUMS,RT");
 8019d2c:	4ea2      	ldr	r6, [pc, #648]	@ (8019fb8 <report_build_info+0x4e8>)
 8019d2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d32:	6833      	ldr	r3, [r6, #0]
 8019d34:	7023      	strb	r3, [r4, #0]
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 8019d36:	4ba1      	ldr	r3, [pc, #644]	@ (8019fbc <report_build_info+0x4ec>)
 8019d38:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8019d3c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8019d40:	f000 81b7 	beq.w	801a0b2 <report_build_info+0x5e2>
 8019d44:	4e9e      	ldr	r6, [pc, #632]	@ (8019fc0 <report_build_info+0x4f0>)
 8019d46:	ac01      	add	r4, sp, #4
 8019d48:	4620      	mov	r0, r4
 8019d4a:	f7ee f9d9 	bl	8008100 <strlen>
 8019d4e:	1823      	adds	r3, r4, r0
 8019d50:	8831      	ldrh	r1, [r6, #0]
 8019d52:	78b2      	ldrb	r2, [r6, #2]
 8019d54:	5221      	strh	r1, [r4, r0]
 8019d56:	709a      	strb	r2, [r3, #2]
        if(settings.homing.flags.enabled)
 8019d58:	4b98      	ldr	r3, [pc, #608]	@ (8019fbc <report_build_info+0x4ec>)
 8019d5a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8019d5e:	f013 0f01 	tst.w	r3, #1
 8019d62:	f040 81a8 	bne.w	801a0b6 <report_build_info+0x5e6>
        if(!hal.probe.get_state)
 8019d66:	4b92      	ldr	r3, [pc, #584]	@ (8019fb0 <report_build_info+0x4e0>)
 8019d68:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	f000 81ad 	beq.w	801a0cc <report_build_info+0x5fc>
        else if(hal.signals_cap.probe_disconnected)
 8019d72:	4b8f      	ldr	r3, [pc, #572]	@ (8019fb0 <report_build_info+0x4e0>)
 8019d74:	f993 31dc 	ldrsb.w	r3, [r3, #476]	@ 0x1dc
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	f2c0 81b4 	blt.w	801a0e6 <report_build_info+0x616>
        if(hal.signals_cap.stop_disable)
 8019d7e:	4b8c      	ldr	r3, [pc, #560]	@ (8019fb0 <report_build_info+0x4e0>)
 8019d80:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8019d84:	f013 0f20 	tst.w	r3, #32
 8019d88:	f040 81b6 	bne.w	801a0f8 <report_build_info+0x628>
        if(hal.signals_cap.block_delete)
 8019d8c:	4b88      	ldr	r3, [pc, #544]	@ (8019fb0 <report_build_info+0x4e0>)
 8019d8e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8019d92:	f013 0f10 	tst.w	r3, #16
 8019d96:	f040 81b8 	bne.w	801a10a <report_build_info+0x63a>
        if(hal.signals_cap.e_stop)
 8019d9a:	4b85      	ldr	r3, [pc, #532]	@ (8019fb0 <report_build_info+0x4e0>)
 8019d9c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8019da0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8019da4:	f040 81ba 	bne.w	801a11c <report_build_info+0x64c>
        if(hal.driver_cap.mpg_mode)
 8019da8:	4b81      	ldr	r3, [pc, #516]	@ (8019fb0 <report_build_info+0x4e0>)
 8019daa:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	f2c0 81bd 	blt.w	801a12e <report_build_info+0x65e>
        if(settings.mode == Mode_Lathe)
 8019db4:	4b81      	ldr	r3, [pc, #516]	@ (8019fbc <report_build_info+0x4ec>)
 8019db6:	7e1b      	ldrb	r3, [r3, #24]
 8019db8:	2b02      	cmp	r3, #2
 8019dba:	f000 81c4 	beq.w	801a146 <report_build_info+0x676>
        if(hal.driver_cap.laser_ppi_mode)
 8019dbe:	4b7c      	ldr	r3, [pc, #496]	@ (8019fb0 <report_build_info+0x4e0>)
 8019dc0:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8019dc4:	f013 0f01 	tst.w	r3, #1
 8019dc8:	f040 81cb 	bne.w	801a162 <report_build_info+0x692>
        if(hal.reboot)
 8019dcc:	4b78      	ldr	r3, [pc, #480]	@ (8019fb0 <report_build_info+0x4e0>)
 8019dce:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8019dd2:	b14b      	cbz	r3, 8019de8 <report_build_info+0x318>
            strcat(buf, "REBOOT,");
 8019dd4:	ac01      	add	r4, sp, #4
 8019dd6:	4620      	mov	r0, r4
 8019dd8:	f7ee f992 	bl	8008100 <strlen>
 8019ddc:	4603      	mov	r3, r0
 8019dde:	1826      	adds	r6, r4, r0
 8019de0:	4a78      	ldr	r2, [pc, #480]	@ (8019fc4 <report_build_info+0x4f4>)
 8019de2:	ca03      	ldmia	r2!, {r0, r1}
 8019de4:	50e0      	str	r0, [r4, r3]
 8019de6:	6071      	str	r1, [r6, #4]
        if(hal.tool.change)
 8019de8:	4b71      	ldr	r3, [pc, #452]	@ (8019fb0 <report_build_info+0x4e0>)
 8019dea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8019dee:	b153      	cbz	r3, 8019e06 <report_build_info+0x336>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 8019df0:	4b6f      	ldr	r3, [pc, #444]	@ (8019fb0 <report_build_info+0x4e0>)
 8019df2:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8019df6:	f013 0f02 	tst.w	r3, #2
 8019dfa:	f000 81be 	beq.w	801a17a <report_build_info+0x6aa>
 8019dfe:	4972      	ldr	r1, [pc, #456]	@ (8019fc8 <report_build_info+0x4f8>)
 8019e00:	a801      	add	r0, sp, #4
 8019e02:	f00a fc1c 	bl	802463e <strcat>
        if(hal.driver_cap.spindle_sync)
 8019e06:	4b6a      	ldr	r3, [pc, #424]	@ (8019fb0 <report_build_info+0x4e0>)
 8019e08:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 8019e0c:	f013 0f01 	tst.w	r3, #1
 8019e10:	f040 81b5 	bne.w	801a17e <report_build_info+0x6ae>
        strcat(buf, "SED,");
 8019e14:	ac01      	add	r4, sp, #4
 8019e16:	4620      	mov	r0, r4
 8019e18:	f7ee f972 	bl	8008100 <strlen>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	1821      	adds	r1, r4, r0
 8019e20:	4a6a      	ldr	r2, [pc, #424]	@ (8019fcc <report_build_info+0x4fc>)
 8019e22:	6810      	ldr	r0, [r2, #0]
 8019e24:	50e0      	str	r0, [r4, r3]
 8019e26:	7913      	ldrb	r3, [r2, #4]
 8019e28:	710b      	strb	r3, [r1, #4]
        if(hal.rtc.get_datetime)
 8019e2a:	4b61      	ldr	r3, [pc, #388]	@ (8019fb0 <report_build_info+0x4e0>)
 8019e2c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8019e30:	b14b      	cbz	r3, 8019e46 <report_build_info+0x376>
            strcat(buf, "RTC,");
 8019e32:	4620      	mov	r0, r4
 8019e34:	f7ee f964 	bl	8008100 <strlen>
 8019e38:	4603      	mov	r3, r0
 8019e3a:	1821      	adds	r1, r4, r0
 8019e3c:	4a64      	ldr	r2, [pc, #400]	@ (8019fd0 <report_build_info+0x500>)
 8019e3e:	6810      	ldr	r0, [r2, #0]
 8019e40:	50e0      	str	r0, [r4, r3]
 8019e42:	7913      	ldrb	r3, [r2, #4]
 8019e44:	710b      	strb	r3, [r1, #4]
        if(canbus_enabled())
 8019e46:	f7f2 fcff 	bl	800c848 <canbus_enabled>
 8019e4a:	2800      	cmp	r0, #0
 8019e4c:	f040 81a0 	bne.w	801a190 <report_build_info+0x6c0>
        append = &buf[strlen(buf) - 1];
 8019e50:	a801      	add	r0, sp, #4
 8019e52:	f7ee f955 	bl	8008100 <strlen>
        if(*append == ',')
 8019e56:	f100 0367 	add.w	r3, r0, #103	@ 0x67
        append = &buf[strlen(buf) - 1];
 8019e5a:	3801      	subs	r0, #1
        if(*append == ',')
 8019e5c:	446b      	add	r3, sp
 8019e5e:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8019e62:	2b2c      	cmp	r3, #44	@ 0x2c
 8019e64:	f000 81a0 	beq.w	801a1a8 <report_build_info+0x6d8>
        hal.stream.write(buf);
 8019e68:	4c51      	ldr	r4, [pc, #324]	@ (8019fb0 <report_build_info+0x4e0>)
 8019e6a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e6e:	a801      	add	r0, sp, #4
 8019e70:	4798      	blx	r3
        grbl.on_report_options(true);
 8019e72:	4b58      	ldr	r3, [pc, #352]	@ (8019fd4 <report_build_info+0x504>)
 8019e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019e76:	2001      	movs	r0, #1
 8019e78:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8019e7a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e7e:	4e4d      	ldr	r6, [pc, #308]	@ (8019fb4 <report_build_info+0x4e4>)
 8019e80:	4630      	mov	r0, r6
 8019e82:	4798      	blx	r3
        hal.stream.write("[FIRMWARE:grblHAL]" ASCII_EOL);
 8019e84:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e88:	4853      	ldr	r0, [pc, #332]	@ (8019fd8 <report_build_info+0x508>)
 8019e8a:	4798      	blx	r3
        hal.stream.write("[SIGNALS:");
 8019e8c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019e90:	4852      	ldr	r0, [pc, #328]	@ (8019fdc <report_build_info+0x50c>)
 8019e92:	4798      	blx	r3
        control_signals_tostring(buf, hal.signals_cap);
 8019e94:	f8b4 11dc 	ldrh.w	r1, [r4, #476]	@ 0x1dc
 8019e98:	a801      	add	r0, sp, #4
 8019e9a:	f7fd ff13 	bl	8017cc4 <control_signals_tostring>
        hal.stream.write(buf);
 8019e9e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019ea2:	a801      	add	r0, sp, #4
 8019ea4:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8019ea6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019eaa:	4630      	mov	r0, r6
 8019eac:	4798      	blx	r3
        if(!(nvs->type == NVS_None || nvs->type == NVS_Emulated)) {
 8019eae:	782b      	ldrb	r3, [r5, #0]
 8019eb0:	b33b      	cbz	r3, 8019f02 <report_build_info+0x432>
 8019eb2:	2b04      	cmp	r3, #4
 8019eb4:	d025      	beq.n	8019f02 <report_build_info+0x432>
            hal.stream.write("[NVS STORAGE:");
 8019eb6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019eba:	4849      	ldr	r0, [pc, #292]	@ (8019fe0 <report_build_info+0x510>)
 8019ebc:	4798      	blx	r3
            *buf = '\0';
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	f88d 3004 	strb.w	r3, [sp, #4]
            if(hal.nvs.type == NVS_Emulated)
 8019ec4:	f894 3174 	ldrb.w	r3, [r4, #372]	@ 0x174
 8019ec8:	2b04      	cmp	r3, #4
 8019eca:	f000 8175 	beq.w	801a1b8 <report_build_info+0x6e8>
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 8019ece:	782b      	ldrb	r3, [r5, #0]
 8019ed0:	2b03      	cmp	r3, #3
 8019ed2:	f000 817b 	beq.w	801a1cc <report_build_info+0x6fc>
 8019ed6:	2b02      	cmp	r3, #2
 8019ed8:	f000 8176 	beq.w	801a1c8 <report_build_info+0x6f8>
 8019edc:	4941      	ldr	r1, [pc, #260]	@ (8019fe4 <report_build_info+0x514>)
 8019ede:	a801      	add	r0, sp, #4
 8019ee0:	f00a fbad 	bl	802463e <strcat>
            if(hal.nvs.size_max) {
 8019ee4:	4b32      	ldr	r3, [pc, #200]	@ (8019fb0 <report_build_info+0x4e0>)
 8019ee6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f040 8170 	bne.w	801a1d0 <report_build_info+0x700>
            hal.stream.write(buf);
 8019ef0:	4c2f      	ldr	r4, [pc, #188]	@ (8019fb0 <report_build_info+0x4e0>)
 8019ef2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019ef6:	a801      	add	r0, sp, #4
 8019ef8:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019efa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019efe:	482d      	ldr	r0, [pc, #180]	@ (8019fb4 <report_build_info+0x4e4>)
 8019f00:	4798      	blx	r3
        if(hal.get_free_mem) {
 8019f02:	4b2b      	ldr	r3, [pc, #172]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019f06:	b183      	cbz	r3, 8019f2a <report_build_info+0x45a>
            hal.stream.write("[FREE MEMORY:");
 8019f08:	4c29      	ldr	r4, [pc, #164]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f0a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f0e:	4836      	ldr	r0, [pc, #216]	@ (8019fe8 <report_build_info+0x518>)
 8019f10:	4798      	blx	r3
            hal.stream.write(uitoa(hal.get_free_mem() / 1024));
 8019f12:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8019f16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019f18:	4798      	blx	r3
 8019f1a:	0a80      	lsrs	r0, r0, #10
 8019f1c:	f7fb f9d0 	bl	80152c0 <uitoa>
 8019f20:	47a8      	blx	r5
            hal.stream.write("K]" ASCII_EOL);
 8019f22:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f26:	4831      	ldr	r0, [pc, #196]	@ (8019fec <report_build_info+0x51c>)
 8019f28:	4798      	blx	r3
        if(hal.info) {
 8019f2a:	4b21      	ldr	r3, [pc, #132]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f2c:	685b      	ldr	r3, [r3, #4]
 8019f2e:	b163      	cbz	r3, 8019f4a <report_build_info+0x47a>
            hal.stream.write("[DRIVER:");
 8019f30:	4c1f      	ldr	r4, [pc, #124]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f32:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f36:	482e      	ldr	r0, [pc, #184]	@ (8019ff0 <report_build_info+0x520>)
 8019f38:	4798      	blx	r3
            hal.stream.write(hal.info);
 8019f3a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f3e:	6860      	ldr	r0, [r4, #4]
 8019f40:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019f42:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f46:	481b      	ldr	r0, [pc, #108]	@ (8019fb4 <report_build_info+0x4e4>)
 8019f48:	4798      	blx	r3
        if(hal.driver_version) {
 8019f4a:	4b19      	ldr	r3, [pc, #100]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f4c:	689b      	ldr	r3, [r3, #8]
 8019f4e:	b163      	cbz	r3, 8019f6a <report_build_info+0x49a>
            hal.stream.write("[DRIVER VERSION:");
 8019f50:	4c17      	ldr	r4, [pc, #92]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f52:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f56:	4827      	ldr	r0, [pc, #156]	@ (8019ff4 <report_build_info+0x524>)
 8019f58:	4798      	blx	r3
            hal.stream.write(hal.driver_version);
 8019f5a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f5e:	68a0      	ldr	r0, [r4, #8]
 8019f60:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019f62:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f66:	4813      	ldr	r0, [pc, #76]	@ (8019fb4 <report_build_info+0x4e4>)
 8019f68:	4798      	blx	r3
        if(hal.driver_options) {
 8019f6a:	4b11      	ldr	r3, [pc, #68]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f6c:	68db      	ldr	r3, [r3, #12]
 8019f6e:	b163      	cbz	r3, 8019f8a <report_build_info+0x4ba>
            hal.stream.write("[DRIVER OPTIONS:");
 8019f70:	4c0f      	ldr	r4, [pc, #60]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f72:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f76:	4820      	ldr	r0, [pc, #128]	@ (8019ff8 <report_build_info+0x528>)
 8019f78:	4798      	blx	r3
            hal.stream.write(hal.driver_options);
 8019f7a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f7e:	68e0      	ldr	r0, [r4, #12]
 8019f80:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019f82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f86:	480b      	ldr	r0, [pc, #44]	@ (8019fb4 <report_build_info+0x4e4>)
 8019f88:	4798      	blx	r3
        if(hal.board) {
 8019f8a:	4b09      	ldr	r3, [pc, #36]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f8c:	695b      	ldr	r3, [r3, #20]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d038      	beq.n	801a004 <report_build_info+0x534>
            hal.stream.write("[BOARD:");
 8019f92:	4c07      	ldr	r4, [pc, #28]	@ (8019fb0 <report_build_info+0x4e0>)
 8019f94:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019f98:	4818      	ldr	r0, [pc, #96]	@ (8019ffc <report_build_info+0x52c>)
 8019f9a:	4798      	blx	r3
            hal.stream.write(hal.board);
 8019f9c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019fa0:	6960      	ldr	r0, [r4, #20]
 8019fa2:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8019fa4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8019fa8:	e02a      	b.n	801a000 <report_build_info+0x530>
 8019faa:	bf00      	nop
 8019fac:	0802b3ec 	.word	0x0802b3ec
 8019fb0:	200011c0 	.word	0x200011c0
 8019fb4:	0802b584 	.word	0x0802b584
 8019fb8:	0802b998 	.word	0x0802b998
 8019fbc:	20001bd8 	.word	0x20001bd8
 8019fc0:	0802b950 	.word	0x0802b950
 8019fc4:	0802b9e8 	.word	0x0802b9e8
 8019fc8:	0802b958 	.word	0x0802b958
 8019fcc:	0802b9f4 	.word	0x0802b9f4
 8019fd0:	0802b9fc 	.word	0x0802b9fc
 8019fd4:	200013a8 	.word	0x200013a8
 8019fd8:	0802ba0c 	.word	0x0802ba0c
 8019fdc:	0802ba24 	.word	0x0802ba24
 8019fe0:	0802ba30 	.word	0x0802ba30
 8019fe4:	0802b964 	.word	0x0802b964
 8019fe8:	0802ba48 	.word	0x0802ba48
 8019fec:	0802ba58 	.word	0x0802ba58
 8019ff0:	0802ba60 	.word	0x0802ba60
 8019ff4:	0802ba6c 	.word	0x0802ba6c
 8019ff8:	0802ba80 	.word	0x0802ba80
 8019ffc:	0802ba94 	.word	0x0802ba94
 801a000:	4880      	ldr	r0, [pc, #512]	@ (801a204 <report_build_info+0x734>)
 801a002:	4798      	blx	r3
        if(hal.max_step_rate) {
 801a004:	4b80      	ldr	r3, [pc, #512]	@ (801a208 <report_build_info+0x738>)
 801a006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a008:	b173      	cbz	r3, 801a028 <report_build_info+0x558>
            hal.stream.write("[MAX STEP RATE:");
 801a00a:	4c7f      	ldr	r4, [pc, #508]	@ (801a208 <report_build_info+0x738>)
 801a00c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a010:	487e      	ldr	r0, [pc, #504]	@ (801a20c <report_build_info+0x73c>)
 801a012:	4798      	blx	r3
            hal.stream.write(uitoa(hal.max_step_rate));
 801a014:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a018:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a01a:	f7fb f951 	bl	80152c0 <uitoa>
 801a01e:	47a8      	blx	r5
            hal.stream.write(" Hz]" ASCII_EOL);
 801a020:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a024:	487a      	ldr	r0, [pc, #488]	@ (801a210 <report_build_info+0x740>)
 801a026:	4798      	blx	r3
        if(hal.port.num_digital_in + hal.port.num_digital_out + hal.port.num_analog_in + hal.port.num_analog_out > 0) {
 801a028:	4a77      	ldr	r2, [pc, #476]	@ (801a208 <report_build_info+0x738>)
 801a02a:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801a02e:	f892 1115 	ldrb.w	r1, [r2, #277]	@ 0x115
 801a032:	440b      	add	r3, r1
 801a034:	f892 1116 	ldrb.w	r1, [r2, #278]	@ 0x116
 801a038:	440b      	add	r3, r1
 801a03a:	f892 2117 	ldrb.w	r2, [r2, #279]	@ 0x117
 801a03e:	42d3      	cmn	r3, r2
 801a040:	d031      	beq.n	801a0a6 <report_build_info+0x5d6>
            hal.stream.write("[AUX IO:");
 801a042:	4c71      	ldr	r4, [pc, #452]	@ (801a208 <report_build_info+0x738>)
 801a044:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a048:	4872      	ldr	r0, [pc, #456]	@ (801a214 <report_build_info+0x744>)
 801a04a:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_in));
 801a04c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a050:	f894 0114 	ldrb.w	r0, [r4, #276]	@ 0x114
 801a054:	f7fb f934 	bl	80152c0 <uitoa>
 801a058:	47a8      	blx	r5
            hal.stream.write(",");
 801a05a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a05e:	4d6e      	ldr	r5, [pc, #440]	@ (801a218 <report_build_info+0x748>)
 801a060:	4628      	mov	r0, r5
 801a062:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_out));
 801a064:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a068:	f894 0115 	ldrb.w	r0, [r4, #277]	@ 0x115
 801a06c:	f7fb f928 	bl	80152c0 <uitoa>
 801a070:	47b0      	blx	r6
            hal.stream.write(",");
 801a072:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a076:	4628      	mov	r0, r5
 801a078:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_in));
 801a07a:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801a07e:	f894 0116 	ldrb.w	r0, [r4, #278]	@ 0x116
 801a082:	f7fb f91d 	bl	80152c0 <uitoa>
 801a086:	47b0      	blx	r6
            hal.stream.write(",");
 801a088:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a08c:	4628      	mov	r0, r5
 801a08e:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_out));
 801a090:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801a094:	f894 0117 	ldrb.w	r0, [r4, #279]	@ 0x117
 801a098:	f7fb f912 	bl	80152c0 <uitoa>
 801a09c:	47a8      	blx	r5
            hal.stream.write("]" ASCII_EOL);
 801a09e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801a0a2:	4858      	ldr	r0, [pc, #352]	@ (801a204 <report_build_info+0x734>)
 801a0a4:	4798      	blx	r3
        grbl.on_report_options(false);
 801a0a6:	4b5d      	ldr	r3, [pc, #372]	@ (801a21c <report_build_info+0x74c>)
 801a0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a0aa:	2000      	movs	r0, #0
 801a0ac:	4798      	blx	r3
}
 801a0ae:	b01b      	add	sp, #108	@ 0x6c
 801a0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 801a0b2:	4e5b      	ldr	r6, [pc, #364]	@ (801a220 <report_build_info+0x750>)
 801a0b4:	e647      	b.n	8019d46 <report_build_info+0x276>
            strcat(buf, "HOME,");
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	f7ee f822 	bl	8008100 <strlen>
 801a0bc:	4603      	mov	r3, r0
 801a0be:	1821      	adds	r1, r4, r0
 801a0c0:	4a58      	ldr	r2, [pc, #352]	@ (801a224 <report_build_info+0x754>)
 801a0c2:	6810      	ldr	r0, [r2, #0]
 801a0c4:	50e0      	str	r0, [r4, r3]
 801a0c6:	8893      	ldrh	r3, [r2, #4]
 801a0c8:	808b      	strh	r3, [r1, #4]
 801a0ca:	e64c      	b.n	8019d66 <report_build_info+0x296>
            strcat(buf, "NOPROBE,");
 801a0cc:	ac01      	add	r4, sp, #4
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	f7ee f816 	bl	8008100 <strlen>
 801a0d4:	4602      	mov	r2, r0
 801a0d6:	1826      	adds	r6, r4, r0
 801a0d8:	4b53      	ldr	r3, [pc, #332]	@ (801a228 <report_build_info+0x758>)
 801a0da:	cb03      	ldmia	r3!, {r0, r1}
 801a0dc:	50a0      	str	r0, [r4, r2]
 801a0de:	6071      	str	r1, [r6, #4]
 801a0e0:	781b      	ldrb	r3, [r3, #0]
 801a0e2:	7233      	strb	r3, [r6, #8]
 801a0e4:	e64b      	b.n	8019d7e <report_build_info+0x2ae>
            strcat(buf, "PC,");
 801a0e6:	ac01      	add	r4, sp, #4
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	f7ee f809 	bl	8008100 <strlen>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	4a4e      	ldr	r2, [pc, #312]	@ (801a22c <report_build_info+0x75c>)
 801a0f2:	6810      	ldr	r0, [r2, #0]
 801a0f4:	50e0      	str	r0, [r4, r3]
 801a0f6:	e642      	b.n	8019d7e <report_build_info+0x2ae>
            strcat(buf, "OS,");
 801a0f8:	ac01      	add	r4, sp, #4
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	f7ee f800 	bl	8008100 <strlen>
 801a100:	4603      	mov	r3, r0
 801a102:	4a4b      	ldr	r2, [pc, #300]	@ (801a230 <report_build_info+0x760>)
 801a104:	6810      	ldr	r0, [r2, #0]
 801a106:	50e0      	str	r0, [r4, r3]
 801a108:	e640      	b.n	8019d8c <report_build_info+0x2bc>
            strcat(buf, "BD,");
 801a10a:	ac01      	add	r4, sp, #4
 801a10c:	4620      	mov	r0, r4
 801a10e:	f7ed fff7 	bl	8008100 <strlen>
 801a112:	4603      	mov	r3, r0
 801a114:	4a47      	ldr	r2, [pc, #284]	@ (801a234 <report_build_info+0x764>)
 801a116:	6810      	ldr	r0, [r2, #0]
 801a118:	50e0      	str	r0, [r4, r3]
 801a11a:	e63e      	b.n	8019d9a <report_build_info+0x2ca>
            strcat(buf, "ES,");
 801a11c:	ac01      	add	r4, sp, #4
 801a11e:	4620      	mov	r0, r4
 801a120:	f7ed ffee 	bl	8008100 <strlen>
 801a124:	4603      	mov	r3, r0
 801a126:	4a44      	ldr	r2, [pc, #272]	@ (801a238 <report_build_info+0x768>)
 801a128:	6810      	ldr	r0, [r2, #0]
 801a12a:	50e0      	str	r0, [r4, r3]
 801a12c:	e63c      	b.n	8019da8 <report_build_info+0x2d8>
            strcat(buf, "MPG,");
 801a12e:	ac01      	add	r4, sp, #4
 801a130:	4620      	mov	r0, r4
 801a132:	f7ed ffe5 	bl	8008100 <strlen>
 801a136:	4603      	mov	r3, r0
 801a138:	1821      	adds	r1, r4, r0
 801a13a:	4a40      	ldr	r2, [pc, #256]	@ (801a23c <report_build_info+0x76c>)
 801a13c:	6810      	ldr	r0, [r2, #0]
 801a13e:	50e0      	str	r0, [r4, r3]
 801a140:	7913      	ldrb	r3, [r2, #4]
 801a142:	710b      	strb	r3, [r1, #4]
 801a144:	e636      	b.n	8019db4 <report_build_info+0x2e4>
            strcat(buf, "LATHE,");
 801a146:	ac01      	add	r4, sp, #4
 801a148:	4620      	mov	r0, r4
 801a14a:	f7ed ffd9 	bl	8008100 <strlen>
 801a14e:	4603      	mov	r3, r0
 801a150:	1821      	adds	r1, r4, r0
 801a152:	4a3b      	ldr	r2, [pc, #236]	@ (801a240 <report_build_info+0x770>)
 801a154:	6810      	ldr	r0, [r2, #0]
 801a156:	50e0      	str	r0, [r4, r3]
 801a158:	8890      	ldrh	r0, [r2, #4]
 801a15a:	7993      	ldrb	r3, [r2, #6]
 801a15c:	8088      	strh	r0, [r1, #4]
 801a15e:	718b      	strb	r3, [r1, #6]
 801a160:	e62d      	b.n	8019dbe <report_build_info+0x2ee>
            strcat(buf, "PPI,");
 801a162:	ac01      	add	r4, sp, #4
 801a164:	4620      	mov	r0, r4
 801a166:	f7ed ffcb 	bl	8008100 <strlen>
 801a16a:	4603      	mov	r3, r0
 801a16c:	1821      	adds	r1, r4, r0
 801a16e:	4a35      	ldr	r2, [pc, #212]	@ (801a244 <report_build_info+0x774>)
 801a170:	6810      	ldr	r0, [r2, #0]
 801a172:	50e0      	str	r0, [r4, r3]
 801a174:	7913      	ldrb	r3, [r2, #4]
 801a176:	710b      	strb	r3, [r1, #4]
 801a178:	e628      	b.n	8019dcc <report_build_info+0x2fc>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 801a17a:	4933      	ldr	r1, [pc, #204]	@ (801a248 <report_build_info+0x778>)
 801a17c:	e640      	b.n	8019e00 <report_build_info+0x330>
            strcat(buf, "SS,");
 801a17e:	ac01      	add	r4, sp, #4
 801a180:	4620      	mov	r0, r4
 801a182:	f7ed ffbd 	bl	8008100 <strlen>
 801a186:	4603      	mov	r3, r0
 801a188:	4a30      	ldr	r2, [pc, #192]	@ (801a24c <report_build_info+0x77c>)
 801a18a:	6810      	ldr	r0, [r2, #0]
 801a18c:	50e0      	str	r0, [r4, r3]
 801a18e:	e641      	b.n	8019e14 <report_build_info+0x344>
            strcat(buf, "CAN,");
 801a190:	ac01      	add	r4, sp, #4
 801a192:	4620      	mov	r0, r4
 801a194:	f7ed ffb4 	bl	8008100 <strlen>
 801a198:	4603      	mov	r3, r0
 801a19a:	1821      	adds	r1, r4, r0
 801a19c:	4a2c      	ldr	r2, [pc, #176]	@ (801a250 <report_build_info+0x780>)
 801a19e:	6810      	ldr	r0, [r2, #0]
 801a1a0:	50e0      	str	r0, [r4, r3]
 801a1a2:	7913      	ldrb	r3, [r2, #4]
 801a1a4:	710b      	strb	r3, [r1, #4]
 801a1a6:	e653      	b.n	8019e50 <report_build_info+0x380>
            *append = '\0';
 801a1a8:	f100 0368 	add.w	r3, r0, #104	@ 0x68
 801a1ac:	eb0d 0003 	add.w	r0, sp, r3
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	f800 3c64 	strb.w	r3, [r0, #-100]
 801a1b6:	e657      	b.n	8019e68 <report_build_info+0x398>
                strcat(buf, "*");
 801a1b8:	ac01      	add	r4, sp, #4
 801a1ba:	4620      	mov	r0, r4
 801a1bc:	f7ed ffa0 	bl	8008100 <strlen>
 801a1c0:	4b24      	ldr	r3, [pc, #144]	@ (801a254 <report_build_info+0x784>)
 801a1c2:	881b      	ldrh	r3, [r3, #0]
 801a1c4:	5223      	strh	r3, [r4, r0]
 801a1c6:	e682      	b.n	8019ece <report_build_info+0x3fe>
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 801a1c8:	4923      	ldr	r1, [pc, #140]	@ (801a258 <report_build_info+0x788>)
 801a1ca:	e688      	b.n	8019ede <report_build_info+0x40e>
 801a1cc:	4923      	ldr	r1, [pc, #140]	@ (801a25c <report_build_info+0x78c>)
 801a1ce:	e686      	b.n	8019ede <report_build_info+0x40e>
                strcat(buf, " ");
 801a1d0:	a801      	add	r0, sp, #4
 801a1d2:	f7ed ff95 	bl	8008100 <strlen>
 801a1d6:	4b22      	ldr	r3, [pc, #136]	@ (801a260 <report_build_info+0x790>)
 801a1d8:	881b      	ldrh	r3, [r3, #0]
 801a1da:	aa01      	add	r2, sp, #4
 801a1dc:	5213      	strh	r3, [r2, r0]
                strcat(buf, uitoa(hal.nvs.size_max / 1024));
 801a1de:	4b0a      	ldr	r3, [pc, #40]	@ (801a208 <report_build_info+0x738>)
 801a1e0:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 801a1e4:	0a80      	lsrs	r0, r0, #10
 801a1e6:	f7fb f86b 	bl	80152c0 <uitoa>
 801a1ea:	4601      	mov	r1, r0
 801a1ec:	a801      	add	r0, sp, #4
 801a1ee:	f00a fa26 	bl	802463e <strcat>
                strcat(buf, "K");
 801a1f2:	a801      	add	r0, sp, #4
 801a1f4:	f7ed ff84 	bl	8008100 <strlen>
 801a1f8:	4b1a      	ldr	r3, [pc, #104]	@ (801a264 <report_build_info+0x794>)
 801a1fa:	881b      	ldrh	r3, [r3, #0]
 801a1fc:	aa01      	add	r2, sp, #4
 801a1fe:	5213      	strh	r3, [r2, r0]
 801a200:	e676      	b.n	8019ef0 <report_build_info+0x420>
 801a202:	bf00      	nop
 801a204:	0802b584 	.word	0x0802b584
 801a208:	200011c0 	.word	0x200011c0
 801a20c:	0802ba9c 	.word	0x0802ba9c
 801a210:	0802baac 	.word	0x0802baac
 801a214:	0802bab4 	.word	0x0802bab4
 801a218:	0802b9b0 	.word	0x0802b9b0
 801a21c:	200013a8 	.word	0x200013a8
 801a220:	0802b954 	.word	0x0802b954
 801a224:	0802b9ac 	.word	0x0802b9ac
 801a228:	0802b9b4 	.word	0x0802b9b4
 801a22c:	0802b9c0 	.word	0x0802b9c0
 801a230:	0802b9c4 	.word	0x0802b9c4
 801a234:	0802b9c8 	.word	0x0802b9c8
 801a238:	0802b9cc 	.word	0x0802b9cc
 801a23c:	0802b9d0 	.word	0x0802b9d0
 801a240:	0802b9d8 	.word	0x0802b9d8
 801a244:	0802b9e0 	.word	0x0802b9e0
 801a248:	0802b960 	.word	0x0802b960
 801a24c:	0802b9f0 	.word	0x0802b9f0
 801a250:	0802ba04 	.word	0x0802ba04
 801a254:	0802ba40 	.word	0x0802ba40
 801a258:	0802b974 	.word	0x0802b974
 801a25c:	0802b96c 	.word	0x0802b96c
 801a260:	0802b6d0 	.word	0x0802b6d0
 801a264:	0802ba44 	.word	0x0802ba44

0801a268 <report_realtime_status>:
{
 801a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a26c:	b08b      	sub	sp, #44	@ 0x2c
    report_tracking_flags_t report = system_get_rt_report_flags();
 801a26e:	f007 faa3 	bl	80217b8 <system_get_rt_report_flags>
 801a272:	4604      	mov	r4, r0
    probe_state_t probe_state = {
 801a274:	f04f 0902 	mov.w	r9, #2
    system_convert_array_steps_to_mpos(print_position, sys.position);
 801a278:	49a2      	ldr	r1, [pc, #648]	@ (801a504 <report_realtime_status+0x29c>)
 801a27a:	a806      	add	r0, sp, #24
 801a27c:	f007 f9fe 	bl	802167c <system_convert_array_steps_to_mpos>
    if(hal.probe.get_state)
 801a280:	4ba1      	ldr	r3, [pc, #644]	@ (801a508 <report_realtime_status+0x2a0>)
 801a282:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801a286:	b10b      	cbz	r3, 801a28c <report_realtime_status+0x24>
        probe_state = hal.probe.get_state();
 801a288:	4798      	blx	r3
 801a28a:	4681      	mov	r9, r0
    hal.stream.write_all("<");
 801a28c:	4b9e      	ldr	r3, [pc, #632]	@ (801a508 <report_realtime_status+0x2a0>)
 801a28e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a292:	489e      	ldr	r0, [pc, #632]	@ (801a50c <report_realtime_status+0x2a4>)
 801a294:	4798      	blx	r3
    sys_state_t state = state_get();
 801a296:	f004 fad7 	bl	801e848 <state_get>
 801a29a:	4680      	mov	r8, r0
    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 801a29c:	4b9c      	ldr	r3, [pc, #624]	@ (801a510 <report_realtime_status+0x2a8>)
 801a29e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801a2a2:	b10b      	cbz	r3, 801a2a8 <report_realtime_status+0x40>
 801a2a4:	2808      	cmp	r0, #8
 801a2a6:	d035      	beq.n	801a314 <report_realtime_status+0xac>
 801a2a8:	f1b8 0f20 	cmp.w	r8, #32
 801a2ac:	d825      	bhi.n	801a2fa <report_realtime_status+0x92>
 801a2ae:	f1b8 0f20 	cmp.w	r8, #32
 801a2b2:	d834      	bhi.n	801a31e <report_realtime_status+0xb6>
 801a2b4:	e8df f018 	tbh	[pc, r8, lsl #1]
 801a2b8:	015200d1 	.word	0x015200d1
 801a2bc:	00330170 	.word	0x00330170
 801a2c0:	0033011f 	.word	0x0033011f
 801a2c4:	00330033 	.word	0x00330033
 801a2c8:	003300d7 	.word	0x003300d7
 801a2cc:	00330033 	.word	0x00330033
 801a2d0:	00330033 	.word	0x00330033
 801a2d4:	00330033 	.word	0x00330033
 801a2d8:	00330109 	.word	0x00330109
 801a2dc:	00330033 	.word	0x00330033
 801a2e0:	00330033 	.word	0x00330033
 801a2e4:	00330033 	.word	0x00330033
 801a2e8:	00330033 	.word	0x00330033
 801a2ec:	00330033 	.word	0x00330033
 801a2f0:	00330033 	.word	0x00330033
 801a2f4:	00330033 	.word	0x00330033
 801a2f8:	0119      	.short	0x0119
 801a2fa:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
 801a2fe:	f000 8151 	beq.w	801a5a4 <report_realtime_status+0x33c>
 801a302:	f240 8097 	bls.w	801a434 <report_realtime_status+0x1cc>
 801a306:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 801a30a:	f000 8127 	beq.w	801a55c <report_realtime_status+0x2f4>
 801a30e:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
 801a312:	d104      	bne.n	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all("Tool");
 801a314:	4b7c      	ldr	r3, [pc, #496]	@ (801a508 <report_realtime_status+0x2a0>)
 801a316:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a31a:	487e      	ldr	r0, [pc, #504]	@ (801a514 <report_realtime_status+0x2ac>)
 801a31c:	4798      	blx	r3
    if(!settings.status_report.machine_position || report.wco) {
 801a31e:	4b7e      	ldr	r3, [pc, #504]	@ (801a518 <report_realtime_status+0x2b0>)
 801a320:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a324:	f013 0f01 	tst.w	r3, #1
 801a328:	f000 815f 	beq.w	801a5ea <report_realtime_status+0x382>
 801a32c:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801a330:	f040 815d 	bne.w	801a5ee <report_realtime_status+0x386>
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 801a334:	4b74      	ldr	r3, [pc, #464]	@ (801a508 <report_realtime_status+0x2a0>)
 801a336:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a33a:	4a77      	ldr	r2, [pc, #476]	@ (801a518 <report_realtime_status+0x2b0>)
 801a33c:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
 801a340:	f012 0f01 	tst.w	r2, #1
 801a344:	f000 8155 	beq.w	801a5f2 <report_realtime_status+0x38a>
 801a348:	4874      	ldr	r0, [pc, #464]	@ (801a51c <report_realtime_status+0x2b4>)
 801a34a:	4798      	blx	r3
    hal.stream.write_all(get_axis_values(print_position));
 801a34c:	4b6e      	ldr	r3, [pc, #440]	@ (801a508 <report_realtime_status+0x2a0>)
 801a34e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a352:	4b73      	ldr	r3, [pc, #460]	@ (801a520 <report_realtime_status+0x2b8>)
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	a806      	add	r0, sp, #24
 801a358:	4798      	blx	r3
 801a35a:	47a8      	blx	r5
    if (settings.status_report.buffer_state) {
 801a35c:	4b6e      	ldr	r3, [pc, #440]	@ (801a518 <report_realtime_status+0x2b0>)
 801a35e:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a362:	f013 0f02 	tst.w	r3, #2
 801a366:	d017      	beq.n	801a398 <report_realtime_status+0x130>
        hal.stream.write_all("|Bf:");
 801a368:	4d67      	ldr	r5, [pc, #412]	@ (801a508 <report_realtime_status+0x2a0>)
 801a36a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801a36e:	486d      	ldr	r0, [pc, #436]	@ (801a524 <report_realtime_status+0x2bc>)
 801a370:	4798      	blx	r3
        hal.stream.write_all(uitoa((uint32_t)plan_get_block_buffer_available()));
 801a372:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801a376:	f7fc f9c7 	bl	8016708 <plan_get_block_buffer_available>
 801a37a:	f7fa ffa1 	bl	80152c0 <uitoa>
 801a37e:	47b0      	blx	r6
        hal.stream.write_all(",");
 801a380:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801a384:	4868      	ldr	r0, [pc, #416]	@ (801a528 <report_realtime_status+0x2c0>)
 801a386:	4798      	blx	r3
        hal.stream.write_all(uitoa(hal.stream.get_rx_buffer_free()));
 801a388:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 801a38c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 801a390:	4798      	blx	r3
 801a392:	f7fa ff95 	bl	80152c0 <uitoa>
 801a396:	47b0      	blx	r6
    if(settings.status_report.line_numbers) {
 801a398:	4b5f      	ldr	r3, [pc, #380]	@ (801a518 <report_realtime_status+0x2b0>)
 801a39a:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a39e:	f013 0f04 	tst.w	r3, #4
 801a3a2:	f040 8128 	bne.w	801a5f6 <report_realtime_status+0x38e>
    spindle_0 = spindle_get(0);
 801a3a6:	2000      	movs	r0, #0
 801a3a8:	f003 fdbe 	bl	801df28 <spindle_get>
 801a3ac:	4606      	mov	r6, r0
    spindle_0_state = spindle_0->get_state(spindle_0);
 801a3ae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a3b0:	4798      	blx	r3
 801a3b2:	4607      	mov	r7, r0
    if(settings.status_report.feed_speed) {
 801a3b4:	4b58      	ldr	r3, [pc, #352]	@ (801a518 <report_realtime_status+0x2b0>)
 801a3b6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a3ba:	f013 0f08 	tst.w	r3, #8
 801a3be:	f000 8144 	beq.w	801a64a <report_realtime_status+0x3e2>
        if(spindle_0->cap.variable) {
 801a3c2:	7ab3      	ldrb	r3, [r6, #10]
 801a3c4:	f013 0f01 	tst.w	r3, #1
 801a3c8:	f000 8130 	beq.w	801a62c <report_realtime_status+0x3c4>
            hal.stream.write_all(appendbuf(2, "|FS:", get_rate_value(st_get_realtime_rate())));
 801a3cc:	4d4e      	ldr	r5, [pc, #312]	@ (801a508 <report_realtime_status+0x2a0>)
 801a3ce:	f8d5 a0b8 	ldr.w	sl, [r5, #184]	@ 0xb8
 801a3d2:	4b56      	ldr	r3, [pc, #344]	@ (801a52c <report_realtime_status+0x2c4>)
 801a3d4:	f8d3 b000 	ldr.w	fp, [r3]
 801a3d8:	f005 fe8a 	bl	80200f0 <st_get_realtime_rate>
 801a3dc:	47d8      	blx	fp
 801a3de:	4602      	mov	r2, r0
 801a3e0:	4953      	ldr	r1, [pc, #332]	@ (801a530 <report_realtime_status+0x2c8>)
 801a3e2:	2002      	movs	r0, #2
 801a3e4:	f7fe f83c 	bl	8018460 <appendbuf>
 801a3e8:	47d0      	blx	sl
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 801a3ea:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801a3ee:	f017 0f01 	tst.w	r7, #1
 801a3f2:	f040 8115 	bne.w	801a620 <report_realtime_status+0x3b8>
 801a3f6:	2000      	movs	r0, #0
 801a3f8:	f7fa ff62 	bl	80152c0 <uitoa>
 801a3fc:	4602      	mov	r2, r0
 801a3fe:	494a      	ldr	r1, [pc, #296]	@ (801a528 <report_realtime_status+0x2c0>)
 801a400:	2002      	movs	r0, #2
 801a402:	f7fe f82d 	bl	8018460 <appendbuf>
 801a406:	47a8      	blx	r5
            if(spindle_0->get_data /* && sys.mpg_mode */)
 801a408:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	f000 811d 	beq.w	801a64a <report_realtime_status+0x3e2>
                hal.stream.write_all(appendbuf(2, ",", uitoa(lroundf(spindle_0->get_data(SpindleData_RPM)->rpm))));
 801a410:	4a3d      	ldr	r2, [pc, #244]	@ (801a508 <report_realtime_status+0x2a0>)
 801a412:	f8d2 50b8 	ldr.w	r5, [r2, #184]	@ 0xb8
 801a416:	2001      	movs	r0, #1
 801a418:	4798      	blx	r3
 801a41a:	ed90 0a00 	vldr	s0, [r0]
 801a41e:	f00c ff45 	bl	80272ac <lroundf>
 801a422:	f7fa ff4d 	bl	80152c0 <uitoa>
 801a426:	4602      	mov	r2, r0
 801a428:	493f      	ldr	r1, [pc, #252]	@ (801a528 <report_realtime_status+0x2c0>)
 801a42a:	2002      	movs	r0, #2
 801a42c:	f7fe f818 	bl	8018460 <appendbuf>
 801a430:	47a8      	blx	r5
 801a432:	e10a      	b.n	801a64a <report_realtime_status+0x3e2>
    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 801a434:	f1b8 0f40 	cmp.w	r8, #64	@ 0x40
 801a438:	f47f af71 	bne.w	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all(appendbuf(2, "Door:", uitoa((uint32_t)sys.parking_state)));
 801a43c:	4b32      	ldr	r3, [pc, #200]	@ (801a508 <report_realtime_status+0x2a0>)
 801a43e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a442:	4b3c      	ldr	r3, [pc, #240]	@ (801a534 <report_realtime_status+0x2cc>)
 801a444:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 801a448:	f7fa ff3a 	bl	80152c0 <uitoa>
 801a44c:	4602      	mov	r2, r0
 801a44e:	493a      	ldr	r1, [pc, #232]	@ (801a538 <report_realtime_status+0x2d0>)
 801a450:	2002      	movs	r0, #2
 801a452:	f7fe f805 	bl	8018460 <appendbuf>
 801a456:	47a8      	blx	r5
            break;
 801a458:	e761      	b.n	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all("Idle");
 801a45a:	4b2b      	ldr	r3, [pc, #172]	@ (801a508 <report_realtime_status+0x2a0>)
 801a45c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a460:	4836      	ldr	r0, [pc, #216]	@ (801a53c <report_realtime_status+0x2d4>)
 801a462:	4798      	blx	r3
            break;
 801a464:	e75b      	b.n	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all("Run");
 801a466:	4b28      	ldr	r3, [pc, #160]	@ (801a508 <report_realtime_status+0x2a0>)
 801a468:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a46c:	4834      	ldr	r0, [pc, #208]	@ (801a540 <report_realtime_status+0x2d8>)
 801a46e:	4798      	blx	r3
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 801a470:	4b30      	ldr	r3, [pc, #192]	@ (801a534 <report_realtime_status+0x2cc>)
 801a472:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801a476:	b2db      	uxtb	r3, r3
 801a478:	2b01      	cmp	r3, #1
 801a47a:	d011      	beq.n	801a4a0 <report_realtime_status+0x238>
            else if (probing)
 801a47c:	4b31      	ldr	r3, [pc, #196]	@ (801a544 <report_realtime_status+0x2dc>)
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	b11b      	cbz	r3, 801a48a <report_realtime_status+0x222>
                probing = probe_state.triggered;
 801a482:	f3c9 0200 	ubfx	r2, r9, #0, #1
 801a486:	4b2f      	ldr	r3, [pc, #188]	@ (801a544 <report_realtime_status+0x2dc>)
 801a488:	701a      	strb	r2, [r3, #0]
            if(sys.flags.feed_hold_pending)
 801a48a:	4b2a      	ldr	r3, [pc, #168]	@ (801a534 <report_realtime_status+0x2cc>)
 801a48c:	7d9b      	ldrb	r3, [r3, #22]
 801a48e:	f013 0f20 	tst.w	r3, #32
 801a492:	d00f      	beq.n	801a4b4 <report_realtime_status+0x24c>
                hal.stream.write_all(":1");
 801a494:	4b1c      	ldr	r3, [pc, #112]	@ (801a508 <report_realtime_status+0x2a0>)
 801a496:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a49a:	482b      	ldr	r0, [pc, #172]	@ (801a548 <report_realtime_status+0x2e0>)
 801a49c:	4798      	blx	r3
 801a49e:	e73e      	b.n	801a31e <report_realtime_status+0xb6>
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 801a4a0:	4b1d      	ldr	r3, [pc, #116]	@ (801a518 <report_realtime_status+0x2b0>)
 801a4a2:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801a4a6:	f013 0f08 	tst.w	r3, #8
 801a4aa:	d0e7      	beq.n	801a47c <report_realtime_status+0x214>
                probing = true;
 801a4ac:	4b25      	ldr	r3, [pc, #148]	@ (801a544 <report_realtime_status+0x2dc>)
 801a4ae:	2201      	movs	r2, #1
 801a4b0:	701a      	strb	r2, [r3, #0]
 801a4b2:	e7ea      	b.n	801a48a <report_realtime_status+0x222>
            else if(probing)
 801a4b4:	4b23      	ldr	r3, [pc, #140]	@ (801a544 <report_realtime_status+0x2dc>)
 801a4b6:	781b      	ldrb	r3, [r3, #0]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	f43f af30 	beq.w	801a31e <report_realtime_status+0xb6>
                hal.stream.write_all(":2");
 801a4be:	4b12      	ldr	r3, [pc, #72]	@ (801a508 <report_realtime_status+0x2a0>)
 801a4c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a4c4:	4821      	ldr	r0, [pc, #132]	@ (801a54c <report_realtime_status+0x2e4>)
 801a4c6:	4798      	blx	r3
 801a4c8:	e729      	b.n	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all(appendbuf(2, "Hold:", uitoa((uint32_t)(sys.holding_state - 1))));
 801a4ca:	4b0f      	ldr	r3, [pc, #60]	@ (801a508 <report_realtime_status+0x2a0>)
 801a4cc:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a4d0:	4b18      	ldr	r3, [pc, #96]	@ (801a534 <report_realtime_status+0x2cc>)
 801a4d2:	f893 0035 	ldrb.w	r0, [r3, #53]	@ 0x35
 801a4d6:	3801      	subs	r0, #1
 801a4d8:	f7fa fef2 	bl	80152c0 <uitoa>
 801a4dc:	4602      	mov	r2, r0
 801a4de:	491c      	ldr	r1, [pc, #112]	@ (801a550 <report_realtime_status+0x2e8>)
 801a4e0:	2002      	movs	r0, #2
 801a4e2:	f7fd ffbd 	bl	8018460 <appendbuf>
 801a4e6:	47a8      	blx	r5
            break;
 801a4e8:	e719      	b.n	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all("Jog");
 801a4ea:	4b07      	ldr	r3, [pc, #28]	@ (801a508 <report_realtime_status+0x2a0>)
 801a4ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a4f0:	4818      	ldr	r0, [pc, #96]	@ (801a554 <report_realtime_status+0x2ec>)
 801a4f2:	4798      	blx	r3
            break;
 801a4f4:	e713      	b.n	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all("Home");
 801a4f6:	4b04      	ldr	r3, [pc, #16]	@ (801a508 <report_realtime_status+0x2a0>)
 801a4f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a4fc:	4816      	ldr	r0, [pc, #88]	@ (801a558 <report_realtime_status+0x2f0>)
 801a4fe:	4798      	blx	r3
            break;
 801a500:	e70d      	b.n	801a31e <report_realtime_status+0xb6>
 801a502:	bf00      	nop
 801a504:	20001528 	.word	0x20001528
 801a508:	200011c0 	.word	0x200011c0
 801a50c:	0802bafc 	.word	0x0802bafc
 801a510:	20000ef8 	.word	0x20000ef8
 801a514:	0802bb4c 	.word	0x0802bb4c
 801a518:	20001bd8 	.word	0x20001bd8
 801a51c:	0802bac0 	.word	0x0802bac0
 801a520:	20001aa4 	.word	0x20001aa4
 801a524:	0802bb54 	.word	0x0802bb54
 801a528:	0802b9b0 	.word	0x0802b9b0
 801a52c:	20001a9c 	.word	0x20001a9c
 801a530:	0802bb64 	.word	0x0802bb64
 801a534:	200014a0 	.word	0x200014a0
 801a538:	0802bb3c 	.word	0x0802bb3c
 801a53c:	0802bb00 	.word	0x0802bb00
 801a540:	0802bb08 	.word	0x0802bb08
 801a544:	20001a98 	.word	0x20001a98
 801a548:	0802bae0 	.word	0x0802bae0
 801a54c:	0802bb0c 	.word	0x0802bb0c
 801a550:	0802bb10 	.word	0x0802bb10
 801a554:	0802bb18 	.word	0x0802bb18
 801a558:	0802bb1c 	.word	0x0802bb1c
            if((report.all || settings.status_report.alarm_substate) && sys.alarm)
 801a55c:	2c00      	cmp	r4, #0
 801a55e:	db05      	blt.n	801a56c <report_realtime_status+0x304>
 801a560:	4ba0      	ldr	r3, [pc, #640]	@ (801a7e4 <report_realtime_status+0x57c>)
 801a562:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801a566:	f013 0f04 	tst.w	r3, #4
 801a56a:	d003      	beq.n	801a574 <report_realtime_status+0x30c>
 801a56c:	4b9e      	ldr	r3, [pc, #632]	@ (801a7e8 <report_realtime_status+0x580>)
 801a56e:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 801a572:	b928      	cbnz	r0, 801a580 <report_realtime_status+0x318>
                hal.stream.write_all("Alarm");
 801a574:	4b9d      	ldr	r3, [pc, #628]	@ (801a7ec <report_realtime_status+0x584>)
 801a576:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a57a:	489d      	ldr	r0, [pc, #628]	@ (801a7f0 <report_realtime_status+0x588>)
 801a57c:	4798      	blx	r3
 801a57e:	e6ce      	b.n	801a31e <report_realtime_status+0xb6>
                hal.stream.write_all(appendbuf(2, "Alarm:", uitoa((uint32_t)sys.alarm)));
 801a580:	4b9a      	ldr	r3, [pc, #616]	@ (801a7ec <report_realtime_status+0x584>)
 801a582:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a586:	f7fa fe9b 	bl	80152c0 <uitoa>
 801a58a:	4602      	mov	r2, r0
 801a58c:	4999      	ldr	r1, [pc, #612]	@ (801a7f4 <report_realtime_status+0x58c>)
 801a58e:	2002      	movs	r0, #2
 801a590:	f7fd ff66 	bl	8018460 <appendbuf>
 801a594:	47a8      	blx	r5
 801a596:	e6c2      	b.n	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all("Check");
 801a598:	4b94      	ldr	r3, [pc, #592]	@ (801a7ec <report_realtime_status+0x584>)
 801a59a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a59e:	4896      	ldr	r0, [pc, #600]	@ (801a7f8 <report_realtime_status+0x590>)
 801a5a0:	4798      	blx	r3
            break;
 801a5a2:	e6bc      	b.n	801a31e <report_realtime_status+0xb6>
            hal.stream.write_all("Sleep");
 801a5a4:	4b91      	ldr	r3, [pc, #580]	@ (801a7ec <report_realtime_status+0x584>)
 801a5a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a5aa:	4894      	ldr	r0, [pc, #592]	@ (801a7fc <report_realtime_status+0x594>)
 801a5ac:	4798      	blx	r3
            break;
 801a5ae:	e6b6      	b.n	801a31e <report_realtime_status+0xb6>
        for(idx = 0; idx < N_AXIS; idx++) {
 801a5b0:	3501      	adds	r5, #1
 801a5b2:	2d02      	cmp	r5, #2
 801a5b4:	f63f aebe 	bhi.w	801a334 <report_realtime_status+0xcc>
            wco[idx] = gc_get_offset(idx, true);
 801a5b8:	2101      	movs	r1, #1
 801a5ba:	4628      	mov	r0, r5
 801a5bc:	f7f2 fb46 	bl	800cc4c <gc_get_offset>
 801a5c0:	ab0a      	add	r3, sp, #40	@ 0x28
 801a5c2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801a5c6:	ed03 0a07 	vstr	s0, [r3, #-28]	@ 0xffffffe4
            if(!settings.status_report.machine_position)
 801a5ca:	4b86      	ldr	r3, [pc, #536]	@ (801a7e4 <report_realtime_status+0x57c>)
 801a5cc:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a5d0:	f013 0f01 	tst.w	r3, #1
 801a5d4:	d1ec      	bne.n	801a5b0 <report_realtime_status+0x348>
                print_position[idx] -= wco[idx];
 801a5d6:	ab0a      	add	r3, sp, #40	@ 0x28
 801a5d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801a5dc:	ed53 7a04 	vldr	s15, [r3, #-16]
 801a5e0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a5e4:	ed43 7a04 	vstr	s15, [r3, #-16]
 801a5e8:	e7e2      	b.n	801a5b0 <report_realtime_status+0x348>
 801a5ea:	2500      	movs	r5, #0
 801a5ec:	e7e1      	b.n	801a5b2 <report_realtime_status+0x34a>
 801a5ee:	2500      	movs	r5, #0
 801a5f0:	e7df      	b.n	801a5b2 <report_realtime_status+0x34a>
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 801a5f2:	4883      	ldr	r0, [pc, #524]	@ (801a800 <report_realtime_status+0x598>)
 801a5f4:	e6a9      	b.n	801a34a <report_realtime_status+0xe2>
        plan_block_t *cur_block = plan_get_current_block();
 801a5f6:	f7fb fdf3 	bl	80161e0 <plan_get_current_block>
        if (cur_block != NULL && cur_block->line_number > 0)
 801a5fa:	2800      	cmp	r0, #0
 801a5fc:	f43f aed3 	beq.w	801a3a6 <report_realtime_status+0x13e>
 801a600:	6980      	ldr	r0, [r0, #24]
 801a602:	2800      	cmp	r0, #0
 801a604:	f77f aecf 	ble.w	801a3a6 <report_realtime_status+0x13e>
            hal.stream.write_all(appendbuf(2, "|Ln:", uitoa((uint32_t)cur_block->line_number)));
 801a608:	4b78      	ldr	r3, [pc, #480]	@ (801a7ec <report_realtime_status+0x584>)
 801a60a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a60e:	f7fa fe57 	bl	80152c0 <uitoa>
 801a612:	4602      	mov	r2, r0
 801a614:	497b      	ldr	r1, [pc, #492]	@ (801a804 <report_realtime_status+0x59c>)
 801a616:	2002      	movs	r0, #2
 801a618:	f7fd ff22 	bl	8018460 <appendbuf>
 801a61c:	47a8      	blx	r5
 801a61e:	e6c2      	b.n	801a3a6 <report_realtime_status+0x13e>
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 801a620:	6873      	ldr	r3, [r6, #4]
 801a622:	ed93 0a01 	vldr	s0, [r3, #4]
 801a626:	f00c fe41 	bl	80272ac <lroundf>
 801a62a:	e6e5      	b.n	801a3f8 <report_realtime_status+0x190>
            hal.stream.write_all(appendbuf(2, "|F:", get_rate_value(st_get_realtime_rate())));
 801a62c:	4b6f      	ldr	r3, [pc, #444]	@ (801a7ec <report_realtime_status+0x584>)
 801a62e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801a632:	4b75      	ldr	r3, [pc, #468]	@ (801a808 <report_realtime_status+0x5a0>)
 801a634:	f8d3 a000 	ldr.w	sl, [r3]
 801a638:	f005 fd5a 	bl	80200f0 <st_get_realtime_rate>
 801a63c:	47d0      	blx	sl
 801a63e:	4602      	mov	r2, r0
 801a640:	4972      	ldr	r1, [pc, #456]	@ (801a80c <report_realtime_status+0x5a4>)
 801a642:	2002      	movs	r0, #2
 801a644:	f7fd ff0c 	bl	8018460 <appendbuf>
 801a648:	47a8      	blx	r5
    if(settings.status_report.pin_state) {
 801a64a:	4b66      	ldr	r3, [pc, #408]	@ (801a7e4 <report_realtime_status+0x57c>)
 801a64c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a650:	f013 0f10 	tst.w	r3, #16
 801a654:	d045      	beq.n	801a6e2 <report_realtime_status+0x47a>
        axes_signals_t lim_pin_state = limit_signals_merge(hal.limits.get_state());
 801a656:	4d65      	ldr	r5, [pc, #404]	@ (801a7ec <report_realtime_status+0x584>)
 801a658:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801a65a:	4798      	blx	r3
 801a65c:	9009      	str	r0, [sp, #36]	@ 0x24
 801a65e:	f7f8 fa91 	bl	8012b84 <limit_signals_merge>
 801a662:	4682      	mov	sl, r0
        control_signals_t ctrl_pin_state = hal.control.get_state();
 801a664:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801a666:	4798      	blx	r3
 801a668:	4605      	mov	r5, r0
        ctrl_pin_state.probe_triggered = probe_state.triggered;
 801a66a:	f369 358e 	bfi	r5, r9, #14, #1
        ctrl_pin_state.probe_disconnected = !probe_state.connected;
 801a66e:	f3c9 0946 	ubfx	r9, r9, #1, #7
 801a672:	f089 0901 	eor.w	r9, r9, #1
 801a676:	f369 15c7 	bfi	r5, r9, #7, #1
        ctrl_pin_state.cycle_start |= sys.report.cycle_start;
 801a67a:	f3c5 0380 	ubfx	r3, r5, #2, #1
 801a67e:	495a      	ldr	r1, [pc, #360]	@ (801a7e8 <report_realtime_status+0x580>)
 801a680:	f891 2033 	ldrb.w	r2, [r1, #51]	@ 0x33
 801a684:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801a688:	4313      	orrs	r3, r2
 801a68a:	f363 0582 	bfi	r5, r3, #2, #1
        if(sys.flags.value & sys_switches.value) {
 801a68e:	8acb      	ldrh	r3, [r1, #22]
 801a690:	f013 0fd0 	tst.w	r3, #208	@ 0xd0
 801a694:	d01e      	beq.n	801a6d4 <report_realtime_status+0x46c>
            if(!hal.signals_cap.stop_disable)
 801a696:	4b55      	ldr	r3, [pc, #340]	@ (801a7ec <report_realtime_status+0x584>)
 801a698:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801a69c:	f013 0f20 	tst.w	r3, #32
 801a6a0:	d104      	bne.n	801a6ac <report_realtime_status+0x444>
                ctrl_pin_state.stop_disable = sys.flags.optional_stop_disable;
 801a6a2:	7d8a      	ldrb	r2, [r1, #22]
 801a6a4:	f3c2 1280 	ubfx	r2, r2, #6, #1
 801a6a8:	f362 1545 	bfi	r5, r2, #5, #1
            if(!hal.signals_cap.block_delete)
 801a6ac:	f013 0f10 	tst.w	r3, #16
 801a6b0:	d105      	bne.n	801a6be <report_realtime_status+0x456>
                ctrl_pin_state.block_delete = sys.flags.block_delete_enabled;
 801a6b2:	4b4d      	ldr	r3, [pc, #308]	@ (801a7e8 <report_realtime_status+0x580>)
 801a6b4:	7d9b      	ldrb	r3, [r3, #22]
 801a6b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a6ba:	f363 1504 	bfi	r5, r3, #4, #1
            if(!hal.signals_cap.single_block)
 801a6be:	4b4b      	ldr	r3, [pc, #300]	@ (801a7ec <report_realtime_status+0x584>)
 801a6c0:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 801a6c4:	f013 0f08 	tst.w	r3, #8
 801a6c8:	d104      	bne.n	801a6d4 <report_realtime_status+0x46c>
                ctrl_pin_state.single_block = sys.flags.single_block;
 801a6ca:	4b47      	ldr	r3, [pc, #284]	@ (801a7e8 <report_realtime_status+0x580>)
 801a6cc:	7d9b      	ldrb	r3, [r3, #22]
 801a6ce:	09db      	lsrs	r3, r3, #7
 801a6d0:	f363 25cb 	bfi	r5, r3, #11, #1
        if(lim_pin_state.value | ctrl_pin_state.value) {
 801a6d4:	fa5f f38a 	uxtb.w	r3, sl
 801a6d8:	fa1f f985 	uxth.w	r9, r5
 801a6dc:	ea53 0209 	orrs.w	r2, r3, r9
 801a6e0:	d118      	bne.n	801a714 <report_realtime_status+0x4ac>
    if(settings.status_report.work_coord_offset) {
 801a6e2:	4b40      	ldr	r3, [pc, #256]	@ (801a7e4 <report_realtime_status+0x57c>)
 801a6e4:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801a6e8:	f013 0f20 	tst.w	r3, #32
 801a6ec:	d03b      	beq.n	801a766 <report_realtime_status+0x4fe>
        if(wco_counter > 0 && !report.wco) {
 801a6ee:	4a48      	ldr	r2, [pc, #288]	@ (801a810 <report_realtime_status+0x5a8>)
 801a6f0:	7812      	ldrb	r2, [r2, #0]
 801a6f2:	b37a      	cbz	r2, 801a754 <report_realtime_status+0x4ec>
 801a6f4:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801a6f8:	d12c      	bne.n	801a754 <report_realtime_status+0x4ec>
            if(wco_counter > (REPORT_WCO_REFRESH_IDLE_COUNT - 1) && state == STATE_IDLE)
 801a6fa:	2a09      	cmp	r2, #9
 801a6fc:	d905      	bls.n	801a70a <report_realtime_status+0x4a2>
 801a6fe:	f1b8 0f00 	cmp.w	r8, #0
 801a702:	d102      	bne.n	801a70a <report_realtime_status+0x4a2>
                wco_counter = REPORT_WCO_REFRESH_IDLE_COUNT - 1;
 801a704:	4a42      	ldr	r2, [pc, #264]	@ (801a810 <report_realtime_status+0x5a8>)
 801a706:	2109      	movs	r1, #9
 801a708:	7011      	strb	r1, [r2, #0]
            wco_counter--;
 801a70a:	4941      	ldr	r1, [pc, #260]	@ (801a810 <report_realtime_status+0x5a8>)
 801a70c:	780a      	ldrb	r2, [r1, #0]
 801a70e:	3a01      	subs	r2, #1
 801a710:	700a      	strb	r2, [r1, #0]
 801a712:	e02a      	b.n	801a76a <report_realtime_status+0x502>
            strcpy(buf, "|Pn:");
 801a714:	4a3f      	ldr	r2, [pc, #252]	@ (801a814 <report_realtime_status+0x5ac>)
 801a716:	4940      	ldr	r1, [pc, #256]	@ (801a818 <report_realtime_status+0x5b0>)
 801a718:	c903      	ldmia	r1, {r0, r1}
 801a71a:	6010      	str	r0, [r2, #0]
 801a71c:	7111      	strb	r1, [r2, #4]
            if(lim_pin_state.value && !ctrl_pin_state.limits_override)
 801a71e:	b14b      	cbz	r3, 801a734 <report_realtime_status+0x4cc>
 801a720:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801a724:	d001      	beq.n	801a72a <report_realtime_status+0x4c2>
            char *append = &buf[4];
 801a726:	483d      	ldr	r0, [pc, #244]	@ (801a81c <report_realtime_status+0x5b4>)
 801a728:	e005      	b.n	801a736 <report_realtime_status+0x4ce>
                append = axis_signals_tostring(append, lim_pin_state);
 801a72a:	4651      	mov	r1, sl
 801a72c:	1d10      	adds	r0, r2, #4
 801a72e:	f7fd fab1 	bl	8017c94 <axis_signals_tostring>
 801a732:	e000      	b.n	801a736 <report_realtime_status+0x4ce>
            char *append = &buf[4];
 801a734:	4839      	ldr	r0, [pc, #228]	@ (801a81c <report_realtime_status+0x5b4>)
            if(ctrl_pin_state.value)
 801a736:	f1b9 0f00 	cmp.w	r9, #0
 801a73a:	d107      	bne.n	801a74c <report_realtime_status+0x4e4>
            *append = '\0';
 801a73c:	2300      	movs	r3, #0
 801a73e:	7003      	strb	r3, [r0, #0]
            hal.stream.write_all(buf);
 801a740:	4b2a      	ldr	r3, [pc, #168]	@ (801a7ec <report_realtime_status+0x584>)
 801a742:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a746:	4833      	ldr	r0, [pc, #204]	@ (801a814 <report_realtime_status+0x5ac>)
 801a748:	4798      	blx	r3
 801a74a:	e7ca      	b.n	801a6e2 <report_realtime_status+0x47a>
                append = control_signals_tostring(append, ctrl_pin_state);
 801a74c:	4629      	mov	r1, r5
 801a74e:	f7fd fab9 	bl	8017cc4 <control_signals_tostring>
 801a752:	e7f3      	b.n	801a73c <report_realtime_status+0x4d4>
            wco_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801a754:	f018 0f7c 	tst.w	r8, #124	@ 0x7c
 801a758:	d003      	beq.n	801a762 <report_realtime_status+0x4fa>
 801a75a:	211d      	movs	r1, #29
 801a75c:	4a2c      	ldr	r2, [pc, #176]	@ (801a810 <report_realtime_status+0x5a8>)
 801a75e:	7011      	strb	r1, [r2, #0]
 801a760:	e003      	b.n	801a76a <report_realtime_status+0x502>
 801a762:	2109      	movs	r1, #9
 801a764:	e7fa      	b.n	801a75c <report_realtime_status+0x4f4>
        report.wco = Off;
 801a766:	f36f 2408 	bfc	r4, #8, #1
    if(settings.status_report.overrides) {
 801a76a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801a76e:	d059      	beq.n	801a824 <report_realtime_status+0x5bc>
        if (override_counter > 0 && !report.overrides)
 801a770:	4b2b      	ldr	r3, [pc, #172]	@ (801a820 <report_realtime_status+0x5b8>)
 801a772:	781b      	ldrb	r3, [r3, #0]
 801a774:	b133      	cbz	r3, 801a784 <report_realtime_status+0x51c>
 801a776:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801a77a:	d103      	bne.n	801a784 <report_realtime_status+0x51c>
            override_counter--;
 801a77c:	3b01      	subs	r3, #1
 801a77e:	4a28      	ldr	r2, [pc, #160]	@ (801a820 <report_realtime_status+0x5b8>)
 801a780:	7013      	strb	r3, [r2, #0]
 801a782:	e051      	b.n	801a828 <report_realtime_status+0x5c0>
        else if((report.overrides = !report.wco)) {
 801a784:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801a788:	f083 0301 	eor.w	r3, r3, #1
 801a78c:	f003 0301 	and.w	r3, r3, #1
 801a790:	f363 1486 	bfi	r4, r3, #6, #1
 801a794:	2b00      	cmp	r3, #0
 801a796:	d047      	beq.n	801a828 <report_realtime_status+0x5c0>
            report.spindle = report.spindle || spindle_0_state.on;
 801a798:	f014 0f10 	tst.w	r4, #16
 801a79c:	d104      	bne.n	801a7a8 <report_realtime_status+0x540>
 801a79e:	f017 0f01 	tst.w	r7, #1
 801a7a2:	d00e      	beq.n	801a7c2 <report_realtime_status+0x55a>
 801a7a4:	2301      	movs	r3, #1
 801a7a6:	e000      	b.n	801a7aa <report_realtime_status+0x542>
 801a7a8:	2301      	movs	r3, #1
 801a7aa:	f363 1404 	bfi	r4, r3, #4, #1
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801a7ae:	f014 0f20 	tst.w	r4, #32
 801a7b2:	d108      	bne.n	801a7c6 <report_realtime_status+0x55e>
 801a7b4:	4b0d      	ldr	r3, [pc, #52]	@ (801a7ec <report_realtime_status+0x584>)
 801a7b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a7b8:	4798      	blx	r3
 801a7ba:	b2c0      	uxtb	r0, r0
 801a7bc:	b968      	cbnz	r0, 801a7da <report_realtime_status+0x572>
 801a7be:	2300      	movs	r3, #0
 801a7c0:	e002      	b.n	801a7c8 <report_realtime_status+0x560>
            report.spindle = report.spindle || spindle_0_state.on;
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	e7f1      	b.n	801a7aa <report_realtime_status+0x542>
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801a7c6:	2301      	movs	r3, #1
 801a7c8:	f363 1445 	bfi	r4, r3, #5, #1
            override_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801a7cc:	f018 0f7c 	tst.w	r8, #124	@ 0x7c
 801a7d0:	d005      	beq.n	801a7de <report_realtime_status+0x576>
 801a7d2:	2213      	movs	r2, #19
 801a7d4:	4b12      	ldr	r3, [pc, #72]	@ (801a820 <report_realtime_status+0x5b8>)
 801a7d6:	701a      	strb	r2, [r3, #0]
 801a7d8:	e026      	b.n	801a828 <report_realtime_status+0x5c0>
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801a7da:	2301      	movs	r3, #1
 801a7dc:	e7f4      	b.n	801a7c8 <report_realtime_status+0x560>
            override_counter = state & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801a7de:	2209      	movs	r2, #9
 801a7e0:	e7f8      	b.n	801a7d4 <report_realtime_status+0x56c>
 801a7e2:	bf00      	nop
 801a7e4:	20001bd8 	.word	0x20001bd8
 801a7e8:	200014a0 	.word	0x200014a0
 801a7ec:	200011c0 	.word	0x200011c0
 801a7f0:	0802bb2c 	.word	0x0802bb2c
 801a7f4:	0802bb24 	.word	0x0802bb24
 801a7f8:	0802bb34 	.word	0x0802bb34
 801a7fc:	0802bb44 	.word	0x0802bb44
 801a800:	0802bac8 	.word	0x0802bac8
 801a804:	0802bb5c 	.word	0x0802bb5c
 801a808:	20001a9c 	.word	0x20001a9c
 801a80c:	0802bb6c 	.word	0x0802bb6c
 801a810:	20001a99 	.word	0x20001a99
 801a814:	20001aa8 	.word	0x20001aa8
 801a818:	0802bb70 	.word	0x0802bb70
 801a81c:	20001aac 	.word	0x20001aac
 801a820:	20001a9a 	.word	0x20001a9a
        report.overrides = Off;
 801a824:	f36f 1486 	bfc	r4, #6, #1
    if(report.value || gc_state.tool_change) {
 801a828:	9400      	str	r4, [sp, #0]
 801a82a:	b92c      	cbnz	r4, 801a838 <report_realtime_status+0x5d0>
 801a82c:	4b9e      	ldr	r3, [pc, #632]	@ (801aaa8 <report_realtime_status+0x840>)
 801a82e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801a832:	2b00      	cmp	r3, #0
 801a834:	f000 80e2 	beq.w	801a9fc <report_realtime_status+0x794>
        if(report.wco) {
 801a838:	f3c4 2907 	ubfx	r9, r4, #8, #8
 801a83c:	46c8      	mov	r8, r9
 801a83e:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801a842:	d014      	beq.n	801a86e <report_realtime_status+0x606>
            if(report.force_wco || !sys.flags.synchronizing) {
 801a844:	f014 5f00 	tst.w	r4, #536870912	@ 0x20000000
 801a848:	d105      	bne.n	801a856 <report_realtime_status+0x5ee>
 801a84a:	4b98      	ldr	r3, [pc, #608]	@ (801aaac <report_realtime_status+0x844>)
 801a84c:	7ddb      	ldrb	r3, [r3, #23]
 801a84e:	f013 0f04 	tst.w	r3, #4
 801a852:	f040 8124 	bne.w	801aa9e <report_realtime_status+0x836>
                hal.stream.write_all("|WCO:");
 801a856:	4d96      	ldr	r5, [pc, #600]	@ (801aab0 <report_realtime_status+0x848>)
 801a858:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801a85c:	4895      	ldr	r0, [pc, #596]	@ (801aab4 <report_realtime_status+0x84c>)
 801a85e:	4798      	blx	r3
                hal.stream.write_all(get_axis_values(wco));
 801a860:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801a864:	4b94      	ldr	r3, [pc, #592]	@ (801aab8 <report_realtime_status+0x850>)
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	a803      	add	r0, sp, #12
 801a86a:	4798      	blx	r3
 801a86c:	47a8      	blx	r5
        if(report.gwco) {
 801a86e:	f018 0f02 	tst.w	r8, #2
 801a872:	d00b      	beq.n	801a88c <report_realtime_status+0x624>
            hal.stream.write_all("|WCS:G");
 801a874:	4d8e      	ldr	r5, [pc, #568]	@ (801aab0 <report_realtime_status+0x848>)
 801a876:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 801a87a:	4890      	ldr	r0, [pc, #576]	@ (801aabc <report_realtime_status+0x854>)
 801a87c:	4798      	blx	r3
            hal.stream.write_all(map_coord_system(gc_state.modal.coord_system.id));
 801a87e:	f8d5 50b8 	ldr.w	r5, [r5, #184]	@ 0xb8
 801a882:	4b89      	ldr	r3, [pc, #548]	@ (801aaa8 <report_realtime_status+0x840>)
 801a884:	7d18      	ldrb	r0, [r3, #20]
 801a886:	f7fd fd99 	bl	80183bc <map_coord_system>
 801a88a:	47a8      	blx	r5
        if(report.overrides) {
 801a88c:	b2e5      	uxtb	r5, r4
 801a88e:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801a892:	f040 8133 	bne.w	801aafc <report_realtime_status+0x894>
        if(report.spindle || report.coolant || report.tool || gc_state.tool_change) {
 801a896:	f015 0fb0 	tst.w	r5, #176	@ 0xb0
 801a89a:	d104      	bne.n	801a8a6 <report_realtime_status+0x63e>
 801a89c:	4b82      	ldr	r3, [pc, #520]	@ (801aaa8 <report_realtime_status+0x840>)
 801a89e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d03c      	beq.n	801a920 <report_realtime_status+0x6b8>
            coolant_state_t cl_state = hal.coolant.get_state();
 801a8a6:	4b82      	ldr	r3, [pc, #520]	@ (801aab0 <report_realtime_status+0x848>)
 801a8a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a8aa:	4798      	blx	r3
            strcpy(buf, "|A:");
 801a8ac:	4b84      	ldr	r3, [pc, #528]	@ (801aac0 <report_realtime_status+0x858>)
 801a8ae:	4a85      	ldr	r2, [pc, #532]	@ (801aac4 <report_realtime_status+0x85c>)
 801a8b0:	601a      	str	r2, [r3, #0]
            if (spindle_0_state.on)
 801a8b2:	b2fa      	uxtb	r2, r7
 801a8b4:	f017 0f01 	tst.w	r7, #1
 801a8b8:	f000 8151 	beq.w	801ab5e <report_realtime_status+0x8f6>
                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 801a8bc:	f012 0f02 	tst.w	r2, #2
 801a8c0:	f000 814b 	beq.w	801ab5a <report_realtime_status+0x8f2>
 801a8c4:	2143      	movs	r1, #67	@ 0x43
 801a8c6:	4b7e      	ldr	r3, [pc, #504]	@ (801aac0 <report_realtime_status+0x858>)
 801a8c8:	70d9      	strb	r1, [r3, #3]
 801a8ca:	3304      	adds	r3, #4
            if(spindle_0_state.encoder_error && hal.driver_cap.spindle_sync)
 801a8cc:	f012 0f20 	tst.w	r2, #32
 801a8d0:	d008      	beq.n	801a8e4 <report_realtime_status+0x67c>
 801a8d2:	4a77      	ldr	r2, [pc, #476]	@ (801aab0 <report_realtime_status+0x848>)
 801a8d4:	f892 21d9 	ldrb.w	r2, [r2, #473]	@ 0x1d9
 801a8d8:	f012 0f01 	tst.w	r2, #1
 801a8dc:	d002      	beq.n	801a8e4 <report_realtime_status+0x67c>
                *append++ = 'E';
 801a8de:	2245      	movs	r2, #69	@ 0x45
 801a8e0:	f803 2b01 	strb.w	r2, [r3], #1
            if (cl_state.flood)
 801a8e4:	b2c2      	uxtb	r2, r0
 801a8e6:	f010 0f01 	tst.w	r0, #1
 801a8ea:	d002      	beq.n	801a8f2 <report_realtime_status+0x68a>
                *append++ = 'F';
 801a8ec:	2146      	movs	r1, #70	@ 0x46
 801a8ee:	f803 1b01 	strb.w	r1, [r3], #1
            if (cl_state.mist)
 801a8f2:	f012 0f02 	tst.w	r2, #2
 801a8f6:	d002      	beq.n	801a8fe <report_realtime_status+0x696>
                *append++ = 'M';
 801a8f8:	224d      	movs	r2, #77	@ 0x4d
 801a8fa:	f803 2b01 	strb.w	r2, [r3], #1
            if(gc_state.tool_change && !report.tool)
 801a8fe:	4a6a      	ldr	r2, [pc, #424]	@ (801aaa8 <report_realtime_status+0x840>)
 801a900:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 801a904:	b12a      	cbz	r2, 801a912 <report_realtime_status+0x6aa>
 801a906:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801a90a:	d102      	bne.n	801a912 <report_realtime_status+0x6aa>
                *append++ = 'T';
 801a90c:	2254      	movs	r2, #84	@ 0x54
 801a90e:	f803 2b01 	strb.w	r2, [r3], #1
            *append = '\0';
 801a912:	2200      	movs	r2, #0
 801a914:	701a      	strb	r2, [r3, #0]
            hal.stream.write_all(buf);
 801a916:	4b66      	ldr	r3, [pc, #408]	@ (801aab0 <report_realtime_status+0x848>)
 801a918:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a91c:	4868      	ldr	r0, [pc, #416]	@ (801aac0 <report_realtime_status+0x858>)
 801a91e:	4798      	blx	r3
        if(report.scaling) {
 801a920:	f015 0f02 	tst.w	r5, #2
 801a924:	f040 811d 	bne.w	801ab62 <report_realtime_status+0x8fa>
        if((report.all || report.mpg_mode) && settings.report_interval) {
 801a928:	4b67      	ldr	r3, [pc, #412]	@ (801aac8 <report_realtime_status+0x860>)
 801a92a:	9a00      	ldr	r2, [sp, #0]
 801a92c:	421a      	tst	r2, r3
 801a92e:	d013      	beq.n	801a958 <report_realtime_status+0x6f0>
 801a930:	4b66      	ldr	r3, [pc, #408]	@ (801aacc <report_realtime_status+0x864>)
 801a932:	8a9b      	ldrh	r3, [r3, #20]
 801a934:	b183      	cbz	r3, 801a958 <report_realtime_status+0x6f0>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801a936:	4b5e      	ldr	r3, [pc, #376]	@ (801aab0 <report_realtime_status+0x848>)
 801a938:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a93c:	4a5b      	ldr	r2, [pc, #364]	@ (801aaac <report_realtime_status+0x844>)
 801a93e:	7dd2      	ldrb	r2, [r2, #23]
 801a940:	f012 0f02 	tst.w	r2, #2
 801a944:	f000 811e 	beq.w	801ab84 <report_realtime_status+0x91c>
 801a948:	4861      	ldr	r0, [pc, #388]	@ (801aad0 <report_realtime_status+0x868>)
 801a94a:	4798      	blx	r3
            if(sys.flags.auto_reporting)
 801a94c:	4b57      	ldr	r3, [pc, #348]	@ (801aaac <report_realtime_status+0x844>)
 801a94e:	7ddb      	ldrb	r3, [r3, #23]
 801a950:	f013 0f02 	tst.w	r3, #2
 801a954:	f040 8118 	bne.w	801ab88 <report_realtime_status+0x920>
        if(report.mpg_mode)
 801a958:	f015 0f01 	tst.w	r5, #1
 801a95c:	d00a      	beq.n	801a974 <report_realtime_status+0x70c>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801a95e:	4b54      	ldr	r3, [pc, #336]	@ (801aab0 <report_realtime_status+0x848>)
 801a960:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a964:	4a51      	ldr	r2, [pc, #324]	@ (801aaac <report_realtime_status+0x844>)
 801a966:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 801a96a:	2a00      	cmp	r2, #0
 801a96c:	f000 8115 	beq.w	801ab9a <report_realtime_status+0x932>
 801a970:	4858      	ldr	r0, [pc, #352]	@ (801aad4 <report_realtime_status+0x86c>)
 801a972:	4798      	blx	r3
        if(report.homed && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)) {
 801a974:	f015 0f04 	tst.w	r5, #4
 801a978:	d020      	beq.n	801a9bc <report_realtime_status+0x754>
 801a97a:	4b4c      	ldr	r3, [pc, #304]	@ (801aaac <report_realtime_status+0x844>)
 801a97c:	7e9b      	ldrb	r3, [r3, #26]
 801a97e:	b92b      	cbnz	r3, 801a98c <report_realtime_status+0x724>
 801a980:	4a52      	ldr	r2, [pc, #328]	@ (801aacc <report_realtime_status+0x864>)
 801a982:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801a986:	f012 0f12 	tst.w	r2, #18
 801a98a:	d017      	beq.n	801a9bc <report_realtime_status+0x754>
            axes_signals_t homing = {sys.homing.mask ? sys.homing.mask : AXES_BITMASK};
 801a98c:	b903      	cbnz	r3, 801a990 <report_realtime_status+0x728>
 801a98e:	2307      	movs	r3, #7
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801a990:	4a47      	ldr	r2, [pc, #284]	@ (801aab0 <report_realtime_status+0x848>)
 801a992:	f8d2 60b8 	ldr.w	r6, [r2, #184]	@ 0xb8
 801a996:	4a45      	ldr	r2, [pc, #276]	@ (801aaac <report_realtime_status+0x844>)
 801a998:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801a99c:	4393      	bics	r3, r2
 801a99e:	f000 80fe 	beq.w	801ab9e <report_realtime_status+0x936>
 801a9a2:	4a4d      	ldr	r2, [pc, #308]	@ (801aad8 <report_realtime_status+0x870>)
 801a9a4:	494d      	ldr	r1, [pc, #308]	@ (801aadc <report_realtime_status+0x874>)
 801a9a6:	2002      	movs	r0, #2
 801a9a8:	f7fd fd5a 	bl	8018460 <appendbuf>
 801a9ac:	47b0      	blx	r6
            if(settings.homing.flags.single_axis_commands)
 801a9ae:	4b47      	ldr	r3, [pc, #284]	@ (801aacc <report_realtime_status+0x864>)
 801a9b0:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 801a9b4:	f013 0f02 	tst.w	r3, #2
 801a9b8:	f040 80f3 	bne.w	801aba2 <report_realtime_status+0x93a>
        if(report.xmode && settings.mode == Mode_Lathe)
 801a9bc:	f015 0f08 	tst.w	r5, #8
 801a9c0:	d004      	beq.n	801a9cc <report_realtime_status+0x764>
 801a9c2:	4b42      	ldr	r3, [pc, #264]	@ (801aacc <report_realtime_status+0x864>)
 801a9c4:	7e1b      	ldrb	r3, [r3, #24]
 801a9c6:	2b02      	cmp	r3, #2
 801a9c8:	f000 80fa 	beq.w	801abc0 <report_realtime_status+0x958>
        if(report.tool)
 801a9cc:	f015 0f80 	tst.w	r5, #128	@ 0x80
 801a9d0:	f040 8101 	bne.w	801abd6 <report_realtime_status+0x96e>
        if(report.tlo_reference)
 801a9d4:	f019 0f80 	tst.w	r9, #128	@ 0x80
 801a9d8:	f040 810d 	bne.w	801abf6 <report_realtime_status+0x98e>
        if(report.m66result && sys.var5399 > -2) { // M66 result
 801a9dc:	f018 0f08 	tst.w	r8, #8
 801a9e0:	d00c      	beq.n	801a9fc <report_realtime_status+0x794>
 801a9e2:	4b32      	ldr	r3, [pc, #200]	@ (801aaac <report_realtime_status+0x844>)
 801a9e4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801a9e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a9ea:	db07      	blt.n	801a9fc <report_realtime_status+0x794>
            if(sys.var5399 >= 0)
 801a9ec:	2800      	cmp	r0, #0
 801a9ee:	f280 8113 	bge.w	801ac18 <report_realtime_status+0x9b0>
                hal.stream.write_all("|In:-1");
 801a9f2:	4b2f      	ldr	r3, [pc, #188]	@ (801aab0 <report_realtime_status+0x848>)
 801a9f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801a9f8:	4839      	ldr	r0, [pc, #228]	@ (801aae0 <report_realtime_status+0x878>)
 801a9fa:	4798      	blx	r3
    if(grbl.on_realtime_report)
 801a9fc:	4b39      	ldr	r3, [pc, #228]	@ (801aae4 <report_realtime_status+0x87c>)
 801a9fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801aa00:	b12b      	cbz	r3, 801aa0e <report_realtime_status+0x7a6>
        grbl.on_realtime_report(hal.stream.write_all, sys.report);
 801aa02:	4a2a      	ldr	r2, [pc, #168]	@ (801aaac <report_realtime_status+0x844>)
 801aa04:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801aa06:	4a2a      	ldr	r2, [pc, #168]	@ (801aab0 <report_realtime_status+0x848>)
 801aa08:	f8d2 00b8 	ldr.w	r0, [r2, #184]	@ 0xb8
 801aa0c:	4798      	blx	r3
    if(report.all) {
 801aa0e:	2c00      	cmp	r4, #0
 801aa10:	f2c0 810e 	blt.w	801ac30 <report_realtime_status+0x9c8>
    if(settings.status_report.parser_state) {
 801aa14:	4b2d      	ldr	r3, [pc, #180]	@ (801aacc <report_realtime_status+0x864>)
 801aa16:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 801aa1a:	f013 0f02 	tst.w	r3, #2
 801aa1e:	f000 8114 	beq.w	801ac4a <report_realtime_status+0x9e2>
        bool is_changed = feed_rate != gc_state.feed_rate || spindle_rpm != gc_state.spindle.rpm || tool_id != gc_state.tool->tool_id;
 801aa22:	4b21      	ldr	r3, [pc, #132]	@ (801aaa8 <report_realtime_status+0x840>)
 801aa24:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 801aa28:	4b2f      	ldr	r3, [pc, #188]	@ (801aae8 <report_realtime_status+0x880>)
 801aa2a:	ed93 7a00 	vldr	s14, [r3]
 801aa2e:	eef4 7a47 	vcmp.f32	s15, s14
 801aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa36:	d113      	bne.n	801aa60 <report_realtime_status+0x7f8>
 801aa38:	4b1b      	ldr	r3, [pc, #108]	@ (801aaa8 <report_realtime_status+0x840>)
 801aa3a:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 801aa3e:	4b2b      	ldr	r3, [pc, #172]	@ (801aaec <report_realtime_status+0x884>)
 801aa40:	ed93 7a00 	vldr	s14, [r3]
 801aa44:	eef4 6a47 	vcmp.f32	s13, s14
 801aa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa4c:	d108      	bne.n	801aa60 <report_realtime_status+0x7f8>
 801aa4e:	4b16      	ldr	r3, [pc, #88]	@ (801aaa8 <report_realtime_status+0x840>)
 801aa50:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801aa54:	691a      	ldr	r2, [r3, #16]
 801aa56:	4b26      	ldr	r3, [pc, #152]	@ (801aaf0 <report_realtime_status+0x888>)
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	429a      	cmp	r2, r3
 801aa5c:	f000 810a 	beq.w	801ac74 <report_realtime_status+0xa0c>
            feed_rate = gc_state.feed_rate;
 801aa60:	4b21      	ldr	r3, [pc, #132]	@ (801aae8 <report_realtime_status+0x880>)
 801aa62:	edc3 7a00 	vstr	s15, [r3]
            tool_id = gc_state.tool->tool_id;
 801aa66:	4b10      	ldr	r3, [pc, #64]	@ (801aaa8 <report_realtime_status+0x840>)
 801aa68:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 801aa6c:	6911      	ldr	r1, [r2, #16]
 801aa6e:	4a20      	ldr	r2, [pc, #128]	@ (801aaf0 <report_realtime_status+0x888>)
 801aa70:	6011      	str	r1, [r2, #0]
            spindle_rpm = gc_state.spindle.rpm;
 801aa72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801aa74:	4b1d      	ldr	r3, [pc, #116]	@ (801aaec <report_realtime_status+0x884>)
 801aa76:	601a      	str	r2, [r3, #0]
 801aa78:	2501      	movs	r5, #1
        if (is_changed)
 801aa7a:	b12d      	cbz	r5, 801aa88 <report_realtime_status+0x820>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 801aa7c:	4b0c      	ldr	r3, [pc, #48]	@ (801aab0 <report_realtime_status+0x848>)
 801aa7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aa80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801aa84:	481b      	ldr	r0, [pc, #108]	@ (801aaf4 <report_realtime_status+0x88c>)
 801aa86:	4798      	blx	r3
        if(report.tool_offset)
 801aa88:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 801aa8c:	f000 80dd 	beq.w	801ac4a <report_realtime_status+0x9e2>
            system_set_exec_state_flag(EXEC_TLO_REPORT);
 801aa90:	4b07      	ldr	r3, [pc, #28]	@ (801aab0 <report_realtime_status+0x848>)
 801aa92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aa94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801aa98:	4816      	ldr	r0, [pc, #88]	@ (801aaf4 <report_realtime_status+0x88c>)
 801aa9a:	4798      	blx	r3
 801aa9c:	e0d5      	b.n	801ac4a <report_realtime_status+0x9e2>
                wco_counter = 0;
 801aa9e:	4b16      	ldr	r3, [pc, #88]	@ (801aaf8 <report_realtime_status+0x890>)
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	701a      	strb	r2, [r3, #0]
 801aaa4:	e6e3      	b.n	801a86e <report_realtime_status+0x606>
 801aaa6:	bf00      	nop
 801aaa8:	20000ef8 	.word	0x20000ef8
 801aaac:	200014a0 	.word	0x200014a0
 801aab0:	200011c0 	.word	0x200011c0
 801aab4:	0802bb78 	.word	0x0802bb78
 801aab8:	20001aa4 	.word	0x20001aa4
 801aabc:	0802bb80 	.word	0x0802bb80
 801aac0:	20001aa8 	.word	0x20001aa8
 801aac4:	003a417c 	.word	0x003a417c
 801aac8:	80000001 	.word	0x80000001
 801aacc:	20001bd8 	.word	0x20001bd8
 801aad0:	0802bad0 	.word	0x0802bad0
 801aad4:	0802badc 	.word	0x0802badc
 801aad8:	0802965c 	.word	0x0802965c
 801aadc:	0802bb98 	.word	0x0802bb98
 801aae0:	0802bbb0 	.word	0x0802bbb0
 801aae4:	200013a8 	.word	0x200013a8
 801aae8:	20001a94 	.word	0x20001a94
 801aaec:	20001a90 	.word	0x20001a90
 801aaf0:	20001a8c 	.word	0x20001a8c
 801aaf4:	200014e8 	.word	0x200014e8
 801aaf8:	20001a99 	.word	0x20001a99
            hal.stream.write_all(appendbuf(2, "|Ov:", uitoa((uint32_t)sys.override.feed_rate)));
 801aafc:	f8df a1f4 	ldr.w	sl, [pc, #500]	@ 801acf4 <report_realtime_status+0xa8c>
 801ab00:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801ab04:	9301      	str	r3, [sp, #4]
 801ab06:	f8df b204 	ldr.w	fp, [pc, #516]	@ 801ad0c <report_realtime_status+0xaa4>
 801ab0a:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ab0e:	f7fa fbd7 	bl	80152c0 <uitoa>
 801ab12:	4602      	mov	r2, r0
 801ab14:	4974      	ldr	r1, [pc, #464]	@ (801ace8 <report_realtime_status+0xa80>)
 801ab16:	2002      	movs	r0, #2
 801ab18:	f7fd fca2 	bl	8018460 <appendbuf>
 801ab1c:	9b01      	ldr	r3, [sp, #4]
 801ab1e:	4798      	blx	r3
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)sys.override.rapid_rate)));
 801ab20:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 801ab24:	9301      	str	r3, [sp, #4]
 801ab26:	f8db 0020 	ldr.w	r0, [fp, #32]
 801ab2a:	f7fa fbc9 	bl	80152c0 <uitoa>
 801ab2e:	4602      	mov	r2, r0
 801ab30:	f8df b1dc 	ldr.w	fp, [pc, #476]	@ 801ad10 <report_realtime_status+0xaa8>
 801ab34:	4659      	mov	r1, fp
 801ab36:	2002      	movs	r0, #2
 801ab38:	f7fd fc92 	bl	8018460 <appendbuf>
 801ab3c:	9b01      	ldr	r3, [sp, #4]
 801ab3e:	4798      	blx	r3
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)spindle_0->param->override_pct)));
 801ab40:	f8da a0b8 	ldr.w	sl, [sl, #184]	@ 0xb8
 801ab44:	6873      	ldr	r3, [r6, #4]
 801ab46:	68d8      	ldr	r0, [r3, #12]
 801ab48:	f7fa fbba 	bl	80152c0 <uitoa>
 801ab4c:	4602      	mov	r2, r0
 801ab4e:	4659      	mov	r1, fp
 801ab50:	2002      	movs	r0, #2
 801ab52:	f7fd fc85 	bl	8018460 <appendbuf>
 801ab56:	47d0      	blx	sl
 801ab58:	e69d      	b.n	801a896 <report_realtime_status+0x62e>
                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 801ab5a:	2153      	movs	r1, #83	@ 0x53
 801ab5c:	e6b3      	b.n	801a8c6 <report_realtime_status+0x65e>
            char *append = &buf[3];
 801ab5e:	4b63      	ldr	r3, [pc, #396]	@ (801acec <report_realtime_status+0xa84>)
 801ab60:	e6b4      	b.n	801a8cc <report_realtime_status+0x664>
            axis_signals_tostring(buf, gc_get_g51_state());
 801ab62:	f7f2 f823 	bl	800cbac <gc_get_g51_state>
 801ab66:	4601      	mov	r1, r0
 801ab68:	4e61      	ldr	r6, [pc, #388]	@ (801acf0 <report_realtime_status+0xa88>)
 801ab6a:	4630      	mov	r0, r6
 801ab6c:	f7fd f892 	bl	8017c94 <axis_signals_tostring>
            hal.stream.write_all("|Sc:");
 801ab70:	4f60      	ldr	r7, [pc, #384]	@ (801acf4 <report_realtime_status+0xa8c>)
 801ab72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801ab76:	4860      	ldr	r0, [pc, #384]	@ (801acf8 <report_realtime_status+0xa90>)
 801ab78:	4798      	blx	r3
            hal.stream.write_all(buf);
 801ab7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801ab7e:	4630      	mov	r0, r6
 801ab80:	4798      	blx	r3
 801ab82:	e6d1      	b.n	801a928 <report_realtime_status+0x6c0>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801ab84:	485d      	ldr	r0, [pc, #372]	@ (801acfc <report_realtime_status+0xa94>)
 801ab86:	e6e0      	b.n	801a94a <report_realtime_status+0x6e2>
                hal.stream.write_all(uitoa(settings.report_interval));
 801ab88:	4b5a      	ldr	r3, [pc, #360]	@ (801acf4 <report_realtime_status+0xa8c>)
 801ab8a:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 801ab8e:	4b5c      	ldr	r3, [pc, #368]	@ (801ad00 <report_realtime_status+0xa98>)
 801ab90:	8a98      	ldrh	r0, [r3, #20]
 801ab92:	f7fa fb95 	bl	80152c0 <uitoa>
 801ab96:	47b0      	blx	r6
 801ab98:	e6de      	b.n	801a958 <report_realtime_status+0x6f0>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801ab9a:	485a      	ldr	r0, [pc, #360]	@ (801ad04 <report_realtime_status+0xa9c>)
 801ab9c:	e6e9      	b.n	801a972 <report_realtime_status+0x70a>
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801ab9e:	4a5a      	ldr	r2, [pc, #360]	@ (801ad08 <report_realtime_status+0xaa0>)
 801aba0:	e700      	b.n	801a9a4 <report_realtime_status+0x73c>
                hal.stream.write_all(appendbuf(2, ",", uitoa(sys.homed.mask)));
 801aba2:	4b54      	ldr	r3, [pc, #336]	@ (801acf4 <report_realtime_status+0xa8c>)
 801aba4:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 801aba8:	4b58      	ldr	r3, [pc, #352]	@ (801ad0c <report_realtime_status+0xaa4>)
 801abaa:	f893 0054 	ldrb.w	r0, [r3, #84]	@ 0x54
 801abae:	f7fa fb87 	bl	80152c0 <uitoa>
 801abb2:	4602      	mov	r2, r0
 801abb4:	4956      	ldr	r1, [pc, #344]	@ (801ad10 <report_realtime_status+0xaa8>)
 801abb6:	2002      	movs	r0, #2
 801abb8:	f7fd fc52 	bl	8018460 <appendbuf>
 801abbc:	47b0      	blx	r6
 801abbe:	e6fd      	b.n	801a9bc <report_realtime_status+0x754>
            hal.stream.write_all(gc_state.modal.diameter_mode ? "|D:1" : "|D:0");
 801abc0:	4b4c      	ldr	r3, [pc, #304]	@ (801acf4 <report_realtime_status+0xa8c>)
 801abc2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801abc6:	4a53      	ldr	r2, [pc, #332]	@ (801ad14 <report_realtime_status+0xaac>)
 801abc8:	7952      	ldrb	r2, [r2, #5]
 801abca:	b112      	cbz	r2, 801abd2 <report_realtime_status+0x96a>
 801abcc:	4852      	ldr	r0, [pc, #328]	@ (801ad18 <report_realtime_status+0xab0>)
 801abce:	4798      	blx	r3
 801abd0:	e6fc      	b.n	801a9cc <report_realtime_status+0x764>
 801abd2:	4852      	ldr	r0, [pc, #328]	@ (801ad1c <report_realtime_status+0xab4>)
 801abd4:	e7fb      	b.n	801abce <report_realtime_status+0x966>
            hal.stream.write_all(appendbuf(2, "|T:", uitoa((uint32_t)gc_state.tool->tool_id)));
 801abd6:	4b47      	ldr	r3, [pc, #284]	@ (801acf4 <report_realtime_status+0xa8c>)
 801abd8:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801abdc:	4b4d      	ldr	r3, [pc, #308]	@ (801ad14 <report_realtime_status+0xaac>)
 801abde:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801abe2:	6918      	ldr	r0, [r3, #16]
 801abe4:	f7fa fb6c 	bl	80152c0 <uitoa>
 801abe8:	4602      	mov	r2, r0
 801abea:	494d      	ldr	r1, [pc, #308]	@ (801ad20 <report_realtime_status+0xab8>)
 801abec:	2002      	movs	r0, #2
 801abee:	f7fd fc37 	bl	8018460 <appendbuf>
 801abf2:	47a8      	blx	r5
 801abf4:	e6ee      	b.n	801a9d4 <report_realtime_status+0x76c>
            hal.stream.write_all(appendbuf(2, "|TLR:", uitoa(sys.tlo_reference_set.mask != 0)));
 801abf6:	4b3f      	ldr	r3, [pc, #252]	@ (801acf4 <report_realtime_status+0xa8c>)
 801abf8:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801abfc:	4b43      	ldr	r3, [pc, #268]	@ (801ad0c <report_realtime_status+0xaa4>)
 801abfe:	79d8      	ldrb	r0, [r3, #7]
 801ac00:	3800      	subs	r0, #0
 801ac02:	bf18      	it	ne
 801ac04:	2001      	movne	r0, #1
 801ac06:	f7fa fb5b 	bl	80152c0 <uitoa>
 801ac0a:	4602      	mov	r2, r0
 801ac0c:	4945      	ldr	r1, [pc, #276]	@ (801ad24 <report_realtime_status+0xabc>)
 801ac0e:	2002      	movs	r0, #2
 801ac10:	f7fd fc26 	bl	8018460 <appendbuf>
 801ac14:	47a8      	blx	r5
 801ac16:	e6e1      	b.n	801a9dc <report_realtime_status+0x774>
                hal.stream.write_all(appendbuf(2, "|In:", uitoa(sys.var5399)));
 801ac18:	4b36      	ldr	r3, [pc, #216]	@ (801acf4 <report_realtime_status+0xa8c>)
 801ac1a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801ac1e:	f7fa fb4f 	bl	80152c0 <uitoa>
 801ac22:	4602      	mov	r2, r0
 801ac24:	4940      	ldr	r1, [pc, #256]	@ (801ad28 <report_realtime_status+0xac0>)
 801ac26:	2002      	movs	r0, #2
 801ac28:	f7fd fc1a 	bl	8018460 <appendbuf>
 801ac2c:	47a8      	blx	r5
 801ac2e:	e6e5      	b.n	801a9fc <report_realtime_status+0x794>
        hal.stream.write_all("|FW:grblHAL");
 801ac30:	4b30      	ldr	r3, [pc, #192]	@ (801acf4 <report_realtime_status+0xa8c>)
 801ac32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ac36:	483d      	ldr	r0, [pc, #244]	@ (801ad2c <report_realtime_status+0xac4>)
 801ac38:	4798      	blx	r3
        if(sys.blocking_event)
 801ac3a:	4b34      	ldr	r3, [pc, #208]	@ (801ad0c <report_realtime_status+0xaa4>)
 801ac3c:	795b      	ldrb	r3, [r3, #5]
 801ac3e:	b123      	cbz	r3, 801ac4a <report_realtime_status+0x9e2>
            hal.stream.write_all("|$C:1");
 801ac40:	4b2c      	ldr	r3, [pc, #176]	@ (801acf4 <report_realtime_status+0xa8c>)
 801ac42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ac46:	483a      	ldr	r0, [pc, #232]	@ (801ad30 <report_realtime_status+0xac8>)
 801ac48:	4798      	blx	r3
    hal.stream.write_all(">" ASCII_EOL);
 801ac4a:	4b2a      	ldr	r3, [pc, #168]	@ (801acf4 <report_realtime_status+0xa8c>)
 801ac4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ac50:	4838      	ldr	r0, [pc, #224]	@ (801ad34 <report_realtime_status+0xacc>)
 801ac52:	4798      	blx	r3
    system_add_rt_report(Report_ClearAll);
 801ac54:	2000      	movs	r0, #0
 801ac56:	f006 fdb5 	bl	80217c4 <system_add_rt_report>
    if(settings.status_report.work_coord_offset && wco_counter == 0)
 801ac5a:	4b29      	ldr	r3, [pc, #164]	@ (801ad00 <report_realtime_status+0xa98>)
 801ac5c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801ac60:	f013 0f20 	tst.w	r3, #32
 801ac64:	d003      	beq.n	801ac6e <report_realtime_status+0xa06>
 801ac66:	4b34      	ldr	r3, [pc, #208]	@ (801ad38 <report_realtime_status+0xad0>)
 801ac68:	781b      	ldrb	r3, [r3, #0]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d037      	beq.n	801acde <report_realtime_status+0xa76>
}
 801ac6e:	b00b      	add	sp, #44	@ 0x2c
 801ac70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint_fast32_t idx = N_AXIS;
 801ac74:	2303      	movs	r3, #3
        idx--;
 801ac76:	3b01      	subs	r3, #1
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 801ac78:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 801ac7c:	4a25      	ldr	r2, [pc, #148]	@ (801ad14 <report_realtime_status+0xaac>)
 801ac7e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ac82:	edd2 7a00 	vldr	s15, [r2]
 801ac86:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ac8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac8e:	bf14      	ite	ne
 801ac90:	2201      	movne	r2, #1
 801ac92:	2200      	moveq	r2, #0
    } while(idx && !active);
 801ac94:	b123      	cbz	r3, 801aca0 <report_realtime_status+0xa38>
 801ac96:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ac9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac9e:	d0ea      	beq.n	801ac76 <report_realtime_status+0xa0e>
        } else if ((is_changed = g92_active != is_g92_active()))
 801aca0:	4b26      	ldr	r3, [pc, #152]	@ (801ad3c <report_realtime_status+0xad4>)
 801aca2:	781b      	ldrb	r3, [r3, #0]
 801aca4:	4293      	cmp	r3, r2
 801aca6:	bf14      	ite	ne
 801aca8:	2501      	movne	r5, #1
 801acaa:	2500      	moveq	r5, #0
 801acac:	d004      	beq.n	801acb8 <report_realtime_status+0xa50>
            g92_active = !g92_active;
 801acae:	f083 0301 	eor.w	r3, r3, #1
 801acb2:	4a22      	ldr	r2, [pc, #136]	@ (801ad3c <report_realtime_status+0xad4>)
 801acb4:	7013      	strb	r3, [r2, #0]
 801acb6:	e6e0      	b.n	801aa7a <report_realtime_status+0x812>
        else if(memcmp(&last_state, &gc_state.modal, sizeof(gc_modal_t))) {
 801acb8:	2234      	movs	r2, #52	@ 0x34
 801acba:	4916      	ldr	r1, [pc, #88]	@ (801ad14 <report_realtime_status+0xaac>)
 801acbc:	4820      	ldr	r0, [pc, #128]	@ (801ad40 <report_realtime_status+0xad8>)
 801acbe:	f009 fc8c 	bl	80245da <memcmp>
 801acc2:	2800      	cmp	r0, #0
 801acc4:	f43f aed9 	beq.w	801aa7a <report_realtime_status+0x812>
            last_state = gc_state.modal;
 801acc8:	4d1d      	ldr	r5, [pc, #116]	@ (801ad40 <report_realtime_status+0xad8>)
 801acca:	4e12      	ldr	r6, [pc, #72]	@ (801ad14 <report_realtime_status+0xaac>)
 801accc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801acce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801acd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801acd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801acd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801acd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801acd8:	6833      	ldr	r3, [r6, #0]
 801acda:	602b      	str	r3, [r5, #0]
        if (is_changed)
 801acdc:	e6ce      	b.n	801aa7c <report_realtime_status+0x814>
        system_add_rt_report(Report_WCO); // Set to report on next request
 801acde:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801ace2:	f006 fd6f 	bl	80217c4 <system_add_rt_report>
}
 801ace6:	e7c2      	b.n	801ac6e <report_realtime_status+0xa06>
 801ace8:	0802bb88 	.word	0x0802bb88
 801acec:	20001aab 	.word	0x20001aab
 801acf0:	20001aa8 	.word	0x20001aa8
 801acf4:	200011c0 	.word	0x200011c0
 801acf8:	0802bb90 	.word	0x0802bb90
 801acfc:	0802bad8 	.word	0x0802bad8
 801ad00:	20001bd8 	.word	0x20001bd8
 801ad04:	0802bae4 	.word	0x0802bae4
 801ad08:	08029668 	.word	0x08029668
 801ad0c:	200014a0 	.word	0x200014a0
 801ad10:	0802b9b0 	.word	0x0802b9b0
 801ad14:	20000ef8 	.word	0x20000ef8
 801ad18:	0802baec 	.word	0x0802baec
 801ad1c:	0802baf4 	.word	0x0802baf4
 801ad20:	0802bb9c 	.word	0x0802bb9c
 801ad24:	0802bba0 	.word	0x0802bba0
 801ad28:	0802bba8 	.word	0x0802bba8
 801ad2c:	0802bbb8 	.word	0x0802bbb8
 801ad30:	0802bbc4 	.word	0x0802bbc4
 801ad34:	0802bbcc 	.word	0x0802bbcc
 801ad38:	20001a99 	.word	0x20001a99
 801ad3c:	20001a88 	.word	0x20001a88
 801ad40:	20001a54 	.word	0x20001a54

0801ad44 <report_settings_details>:
{
 801ad44:	b538      	push	{r3, r4, r5, lr}
 801ad46:	4605      	mov	r5, r0
    if(id != Setting_SettingsAll) {
 801ad48:	f240 23e5 	movw	r3, #741	@ 0x2e5
 801ad4c:	4299      	cmp	r1, r3
 801ad4e:	d00f      	beq.n	801ad70 <report_settings_details+0x2c>
 801ad50:	460c      	mov	r4, r1
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801ad52:	2100      	movs	r1, #0
 801ad54:	4620      	mov	r0, r4
 801ad56:	f002 fa35 	bl	801d1c4 <setting_get_details>
        if(setting)
 801ad5a:	4601      	mov	r1, r0
 801ad5c:	b130      	cbz	r0, 801ad6c <report_settings_details+0x28>
            report_settings_detail(format, setting, id - setting->id);
 801ad5e:	8802      	ldrh	r2, [r0, #0]
 801ad60:	1aa2      	subs	r2, r4, r2
 801ad62:	4628      	mov	r0, r5
 801ad64:	f7fd fc6e 	bl	8018644 <report_settings_detail>
        status_code_t status = Status_OK;
 801ad68:	2000      	movs	r0, #0
 801ad6a:	e004      	b.n	801ad76 <report_settings_details+0x32>
            status = Status_SettingDisabled;
 801ad6c:	2035      	movs	r0, #53	@ 0x35
        return status;
 801ad6e:	e002      	b.n	801ad76 <report_settings_details+0x32>
    return print_settings_details(format, group);
 801ad70:	4611      	mov	r1, r2
 801ad72:	f7fd ffdd 	bl	8018d30 <print_settings_details>
}
 801ad76:	bd38      	pop	{r3, r4, r5, pc}

0801ad78 <report_group_settings>:
{
 801ad78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad7c:	b089      	sub	sp, #36	@ 0x24
 801ad7e:	4680      	mov	r8, r0
 801ad80:	460e      	mov	r6, r1
 801ad82:	4617      	mov	r7, r2
    for(idx = 0; idx < n_groups; idx++) {
 801ad84:	2400      	movs	r4, #0
    bool found = false;
 801ad86:	46a1      	mov	r9, r4
    for(idx = 0; idx < n_groups; idx++) {
 801ad88:	e017      	b.n	801adba <report_group_settings+0x42>
            *s++ = CAPS(c);
 801ad8a:	f803 2b01 	strb.w	r2, [r3], #1
        while((c = *s))
 801ad8e:	781a      	ldrb	r2, [r3, #0]
 801ad90:	b13a      	cbz	r2, 801ada2 <report_group_settings+0x2a>
            *s++ = CAPS(c);
 801ad92:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 801ad96:	b2c9      	uxtb	r1, r1
 801ad98:	2919      	cmp	r1, #25
 801ad9a:	d8f6      	bhi.n	801ad8a <report_group_settings+0x12>
 801ad9c:	f002 025f 	and.w	r2, r2, #95	@ 0x5f
 801ada0:	e7f3      	b.n	801ad8a <report_group_settings+0x12>
        if((found = matchhere(args, group))) {
 801ada2:	a901      	add	r1, sp, #4
 801ada4:	4638      	mov	r0, r7
 801ada6:	f7fc ff4e 	bl	8017c46 <matchhere>
 801adaa:	2800      	cmp	r0, #0
 801adac:	bf14      	ite	ne
 801adae:	f04f 0901 	movne.w	r9, #1
 801adb2:	f04f 0900 	moveq.w	r9, #0
 801adb6:	d10d      	bne.n	801add4 <report_group_settings+0x5c>
    for(idx = 0; idx < n_groups; idx++) {
 801adb8:	3401      	adds	r4, #1
 801adba:	42b4      	cmp	r4, r6
 801adbc:	d21d      	bcs.n	801adfa <report_group_settings+0x82>
        strncpy(group, groups[idx].name, sizeof(group) - 1);
 801adbe:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801adc2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801adc6:	2219      	movs	r2, #25
 801adc8:	6869      	ldr	r1, [r5, #4]
 801adca:	a801      	add	r0, sp, #4
 801adcc:	f009 fc65 	bl	802469a <strncpy>
        s = group;
 801add0:	ab01      	add	r3, sp, #4
        while((c = *s))
 801add2:	e7dc      	b.n	801ad8e <report_group_settings+0x16>
            hal.stream.write(ASCII_EOL "---- ");
 801add4:	4c0b      	ldr	r4, [pc, #44]	@ (801ae04 <report_group_settings+0x8c>)
 801add6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801adda:	480b      	ldr	r0, [pc, #44]	@ (801ae08 <report_group_settings+0x90>)
 801addc:	4798      	blx	r3
            hal.stream.write(groups[idx].name);
 801adde:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801ade2:	6868      	ldr	r0, [r5, #4]
 801ade4:	4798      	blx	r3
            hal.stream.write(":" ASCII_EOL);
 801ade6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801adea:	4808      	ldr	r0, [pc, #32]	@ (801ae0c <report_group_settings+0x94>)
 801adec:	4798      	blx	r3
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, groups[idx].id);
 801adee:	786a      	ldrb	r2, [r5, #1]
 801adf0:	f240 21e5 	movw	r1, #741	@ 0x2e5
 801adf4:	2001      	movs	r0, #1
 801adf6:	f7ff ffa5 	bl	801ad44 <report_settings_details>
}
 801adfa:	4648      	mov	r0, r9
 801adfc:	b009      	add	sp, #36	@ 0x24
 801adfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae02:	bf00      	nop
 801ae04:	200011c0 	.word	0x200011c0
 801ae08:	0802bbd0 	.word	0x0802bbd0
 801ae0c:	0802bbd8 	.word	0x0802bbd8

0801ae10 <report_setting_description>:
{
 801ae10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae14:	4606      	mov	r6, r0
 801ae16:	460c      	mov	r4, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801ae18:	2100      	movs	r1, #0
 801ae1a:	4620      	mov	r0, r4
 801ae1c:	f002 f9d2 	bl	801d1c4 <setting_get_details>
 801ae20:	4607      	mov	r7, r0
    const char *description = setting_get_description(id);
 801ae22:	4620      	mov	r0, r4
 801ae24:	f002 fa64 	bl	801d2f0 <setting_get_description>
 801ae28:	4680      	mov	r8, r0
    if(format == SettingsFormat_MachineReadable) {
 801ae2a:	b976      	cbnz	r6, 801ae4a <report_setting_description+0x3a>
        hal.stream.write("[SETTINGDESCR:");
 801ae2c:	4d1c      	ldr	r5, [pc, #112]	@ (801aea0 <report_setting_description+0x90>)
 801ae2e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801ae32:	481c      	ldr	r0, [pc, #112]	@ (801aea4 <report_setting_description+0x94>)
 801ae34:	4798      	blx	r3
        hal.stream.write(uitoa(id));
 801ae36:	f8d5 90b4 	ldr.w	r9, [r5, #180]	@ 0xb4
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	f7fa fa40 	bl	80152c0 <uitoa>
 801ae40:	47c8      	blx	r9
        hal.stream.write(vbar);
 801ae42:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801ae46:	4818      	ldr	r0, [pc, #96]	@ (801aea8 <report_setting_description+0x98>)
 801ae48:	4798      	blx	r3
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801ae4a:	4b15      	ldr	r3, [pc, #84]	@ (801aea0 <report_setting_description+0x90>)
 801ae4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ae50:	f1b8 0f00 	cmp.w	r8, #0
 801ae54:	d01b      	beq.n	801ae8e <report_setting_description+0x7e>
 801ae56:	4640      	mov	r0, r8
 801ae58:	4798      	blx	r3
    if(setting && setting->flags.reboot_required)
 801ae5a:	b17f      	cbz	r7, 801ae7c <report_setting_description+0x6c>
 801ae5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801ae60:	f013 0f01 	tst.w	r3, #1
 801ae64:	d00a      	beq.n	801ae7c <report_setting_description+0x6c>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 801ae66:	4b0e      	ldr	r3, [pc, #56]	@ (801aea0 <report_setting_description+0x90>)
 801ae68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ae6c:	f1b8 0f00 	cmp.w	r8, #0
 801ae70:	d012      	beq.n	801ae98 <report_setting_description+0x88>
 801ae72:	f898 2000 	ldrb.w	r2, [r8]
 801ae76:	b98a      	cbnz	r2, 801ae9c <report_setting_description+0x8c>
 801ae78:	480c      	ldr	r0, [pc, #48]	@ (801aeac <report_setting_description+0x9c>)
 801ae7a:	4798      	blx	r3
    if(format == SettingsFormat_MachineReadable)
 801ae7c:	b926      	cbnz	r6, 801ae88 <report_setting_description+0x78>
        hal.stream.write("]" ASCII_EOL);
 801ae7e:	4b08      	ldr	r3, [pc, #32]	@ (801aea0 <report_setting_description+0x90>)
 801ae80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ae84:	480a      	ldr	r0, [pc, #40]	@ (801aeb0 <report_setting_description+0xa0>)
 801ae86:	4798      	blx	r3
}
 801ae88:	2000      	movs	r0, #0
 801ae8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801ae8e:	b10f      	cbz	r7, 801ae94 <report_setting_description+0x84>
 801ae90:	4808      	ldr	r0, [pc, #32]	@ (801aeb4 <report_setting_description+0xa4>)
 801ae92:	e7e1      	b.n	801ae58 <report_setting_description+0x48>
 801ae94:	4808      	ldr	r0, [pc, #32]	@ (801aeb8 <report_setting_description+0xa8>)
 801ae96:	e7df      	b.n	801ae58 <report_setting_description+0x48>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 801ae98:	4804      	ldr	r0, [pc, #16]	@ (801aeac <report_setting_description+0x9c>)
 801ae9a:	e7ee      	b.n	801ae7a <report_setting_description+0x6a>
 801ae9c:	4807      	ldr	r0, [pc, #28]	@ (801aebc <report_setting_description+0xac>)
 801ae9e:	e7ec      	b.n	801ae7a <report_setting_description+0x6a>
 801aea0:	200011c0 	.word	0x200011c0
 801aea4:	0802bbdc 	.word	0x0802bbdc
 801aea8:	0802bdac 	.word	0x0802bdac
 801aeac:	0802b5fc 	.word	0x0802b5fc
 801aeb0:	0802b584 	.word	0x0802b584
 801aeb4:	0802b6ec 	.word	0x0802b6ec
 801aeb8:	08029208 	.word	0x08029208
 801aebc:	0802b5f8 	.word	0x0802b5f8

0801aec0 <report_alarm_details>:
{
 801aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aec2:	4606      	mov	r6, r0
    alarm_details_t *details = grbl.on_get_alarms();
 801aec4:	4b25      	ldr	r3, [pc, #148]	@ (801af5c <report_alarm_details+0x9c>)
 801aec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aec8:	4798      	blx	r3
 801aeca:	4604      	mov	r4, r0
    if(grbl_format)
 801aecc:	b126      	cbz	r6, 801aed8 <report_alarm_details+0x18>
        hal.stream.write("\"Alarm Code in v1.1+\",\" Alarm Message in v1.0-\",\" Alarm Description\"" ASCII_EOL);
 801aece:	4b24      	ldr	r3, [pc, #144]	@ (801af60 <report_alarm_details+0xa0>)
 801aed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801aed4:	4823      	ldr	r0, [pc, #140]	@ (801af64 <report_alarm_details+0xa4>)
 801aed6:	4798      	blx	r3
{
 801aed8:	2500      	movs	r5, #0
        n_alarms += details->n_alarms;
 801aeda:	8823      	ldrh	r3, [r4, #0]
 801aedc:	441d      	add	r5, r3
    } while((details = details->next));
 801aede:	68a4      	ldr	r4, [r4, #8]
 801aee0:	2c00      	cmp	r4, #0
 801aee2:	d1fa      	bne.n	801aeda <report_alarm_details+0x1a>
    details = grbl.on_get_alarms();
 801aee4:	4b1d      	ldr	r3, [pc, #116]	@ (801af5c <report_alarm_details+0x9c>)
 801aee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aee8:	4798      	blx	r3
 801aeea:	4604      	mov	r4, r0
    if((all_alarms = palarm = calloc(n_alarms, sizeof(alarm_detail_t *)))) {
 801aeec:	2104      	movs	r1, #4
 801aeee:	4628      	mov	r0, r5
 801aef0:	f007 fab8 	bl	8022464 <calloc>
 801aef4:	4607      	mov	r7, r0
 801aef6:	b328      	cbz	r0, 801af44 <report_alarm_details+0x84>
 801aef8:	4603      	mov	r3, r0
 801aefa:	e00a      	b.n	801af12 <report_alarm_details+0x52>
                *palarm++ = (alarm_detail_t *)&(details->alarms[idx]);
 801aefc:	6861      	ldr	r1, [r4, #4]
 801aefe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801af02:	f843 1b04 	str.w	r1, [r3], #4
            for(idx = 0; idx < details->n_alarms; idx++)
 801af06:	3201      	adds	r2, #1
 801af08:	8821      	ldrh	r1, [r4, #0]
 801af0a:	4291      	cmp	r1, r2
 801af0c:	d8f6      	bhi.n	801aefc <report_alarm_details+0x3c>
        } while((details = details->next));
 801af0e:	68a4      	ldr	r4, [r4, #8]
 801af10:	b10c      	cbz	r4, 801af16 <report_alarm_details+0x56>
            for(idx = 0; idx < details->n_alarms; idx++)
 801af12:	2200      	movs	r2, #0
 801af14:	e7f8      	b.n	801af08 <report_alarm_details+0x48>
        qsort(all_alarms, n_alarms, sizeof(alarm_detail_t *), cmp_alarms);
 801af16:	4b14      	ldr	r3, [pc, #80]	@ (801af68 <report_alarm_details+0xa8>)
 801af18:	2204      	movs	r2, #4
 801af1a:	4629      	mov	r1, r5
 801af1c:	4638      	mov	r0, r7
 801af1e:	f008 fa72 	bl	8023406 <qsort>
        for(idx = 0; idx < n_alarms; idx++)
 801af22:	e005      	b.n	801af30 <report_alarm_details+0x70>
            print_alarm(all_alarms[idx], grbl_format);
 801af24:	4631      	mov	r1, r6
 801af26:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801af2a:	f7fd f813 	bl	8017f54 <print_alarm>
        for(idx = 0; idx < n_alarms; idx++)
 801af2e:	3401      	adds	r4, #1
 801af30:	42ac      	cmp	r4, r5
 801af32:	d3f7      	bcc.n	801af24 <report_alarm_details+0x64>
        free(all_alarms);
 801af34:	4638      	mov	r0, r7
 801af36:	f007 fab9 	bl	80224ac <free>
}
 801af3a:	2000      	movs	r0, #0
 801af3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while((details = details->next));
 801af3e:	68a4      	ldr	r4, [r4, #8]
 801af40:	2c00      	cmp	r4, #0
 801af42:	d0fa      	beq.n	801af3a <report_alarm_details+0x7a>
        for(idx = 0; idx < details->n_alarms; idx++)
 801af44:	2500      	movs	r5, #0
 801af46:	8823      	ldrh	r3, [r4, #0]
 801af48:	42ab      	cmp	r3, r5
 801af4a:	d9f8      	bls.n	801af3e <report_alarm_details+0x7e>
            print_alarm(&details->alarms[idx], grbl_format);
 801af4c:	6860      	ldr	r0, [r4, #4]
 801af4e:	4631      	mov	r1, r6
 801af50:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801af54:	f7fc fffe 	bl	8017f54 <print_alarm>
        for(idx = 0; idx < details->n_alarms; idx++)
 801af58:	3501      	adds	r5, #1
 801af5a:	e7f4      	b.n	801af46 <report_alarm_details+0x86>
 801af5c:	200013a8 	.word	0x200013a8
 801af60:	200011c0 	.word	0x200011c0
 801af64:	0802bbec 	.word	0x0802bbec
 801af68:	08017dc1 	.word	0x08017dc1

0801af6c <report_error_details>:
{
 801af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af6e:	4606      	mov	r6, r0
    error_details_t *details = grbl.on_get_errors();
 801af70:	4b25      	ldr	r3, [pc, #148]	@ (801b008 <report_error_details+0x9c>)
 801af72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801af74:	4798      	blx	r3
 801af76:	4604      	mov	r4, r0
    if(grbl_format)
 801af78:	b126      	cbz	r6, 801af84 <report_error_details+0x18>
        hal.stream.write("\"Error Code in v1.1+\",\"Error Message in v1.0-\",\"Error Description\"" ASCII_EOL);
 801af7a:	4b24      	ldr	r3, [pc, #144]	@ (801b00c <report_error_details+0xa0>)
 801af7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801af80:	4823      	ldr	r0, [pc, #140]	@ (801b010 <report_error_details+0xa4>)
 801af82:	4798      	blx	r3
{
 801af84:	2500      	movs	r5, #0
        n_errors += details->n_errors;
 801af86:	8823      	ldrh	r3, [r4, #0]
 801af88:	441d      	add	r5, r3
    } while((details = details->next));
 801af8a:	68a4      	ldr	r4, [r4, #8]
 801af8c:	2c00      	cmp	r4, #0
 801af8e:	d1fa      	bne.n	801af86 <report_error_details+0x1a>
    details = grbl.on_get_errors();
 801af90:	4b1d      	ldr	r3, [pc, #116]	@ (801b008 <report_error_details+0x9c>)
 801af92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801af94:	4798      	blx	r3
 801af96:	4604      	mov	r4, r0
    if((all_errors = perror = calloc(n_errors, sizeof(status_detail_t *)))) {
 801af98:	2104      	movs	r1, #4
 801af9a:	4628      	mov	r0, r5
 801af9c:	f007 fa62 	bl	8022464 <calloc>
 801afa0:	4607      	mov	r7, r0
 801afa2:	b328      	cbz	r0, 801aff0 <report_error_details+0x84>
 801afa4:	4603      	mov	r3, r0
 801afa6:	e00a      	b.n	801afbe <report_error_details+0x52>
                *perror++ = (status_detail_t *)&(details->errors[idx]);
 801afa8:	6861      	ldr	r1, [r4, #4]
 801afaa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801afae:	f843 1b04 	str.w	r1, [r3], #4
            for(idx = 0; idx < details->n_errors; idx++)
 801afb2:	3201      	adds	r2, #1
 801afb4:	8821      	ldrh	r1, [r4, #0]
 801afb6:	4291      	cmp	r1, r2
 801afb8:	d8f6      	bhi.n	801afa8 <report_error_details+0x3c>
        } while((details = details->next));
 801afba:	68a4      	ldr	r4, [r4, #8]
 801afbc:	b10c      	cbz	r4, 801afc2 <report_error_details+0x56>
            for(idx = 0; idx < details->n_errors; idx++)
 801afbe:	2200      	movs	r2, #0
 801afc0:	e7f8      	b.n	801afb4 <report_error_details+0x48>
        qsort(all_errors, n_errors, sizeof(status_detail_t *), cmp_errors);
 801afc2:	4b14      	ldr	r3, [pc, #80]	@ (801b014 <report_error_details+0xa8>)
 801afc4:	2204      	movs	r2, #4
 801afc6:	4629      	mov	r1, r5
 801afc8:	4638      	mov	r0, r7
 801afca:	f008 fa1c 	bl	8023406 <qsort>
        for(idx = 0; idx < n_errors; idx++)
 801afce:	e005      	b.n	801afdc <report_error_details+0x70>
            print_error(all_errors[idx], grbl_format);
 801afd0:	4631      	mov	r1, r6
 801afd2:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 801afd6:	f7fd f807 	bl	8017fe8 <print_error>
        for(idx = 0; idx < n_errors; idx++)
 801afda:	3401      	adds	r4, #1
 801afdc:	42ac      	cmp	r4, r5
 801afde:	d3f7      	bcc.n	801afd0 <report_error_details+0x64>
        free(all_errors);
 801afe0:	4638      	mov	r0, r7
 801afe2:	f007 fa63 	bl	80224ac <free>
}
 801afe6:	2000      	movs	r0, #0
 801afe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while((details = details->next));
 801afea:	68a4      	ldr	r4, [r4, #8]
 801afec:	2c00      	cmp	r4, #0
 801afee:	d0fa      	beq.n	801afe6 <report_error_details+0x7a>
        for(idx = 0; idx < details->n_errors; idx++)
 801aff0:	2500      	movs	r5, #0
 801aff2:	8823      	ldrh	r3, [r4, #0]
 801aff4:	42ab      	cmp	r3, r5
 801aff6:	d9f8      	bls.n	801afea <report_error_details+0x7e>
            print_error(&details->errors[idx], grbl_format);
 801aff8:	6860      	ldr	r0, [r4, #4]
 801affa:	4631      	mov	r1, r6
 801affc:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 801b000:	f7fc fff2 	bl	8017fe8 <print_error>
        for(idx = 0; idx < details->n_errors; idx++)
 801b004:	3501      	adds	r5, #1
 801b006:	e7f4      	b.n	801aff2 <report_error_details+0x86>
 801b008:	200013a8 	.word	0x200013a8
 801b00c:	200011c0 	.word	0x200011c0
 801b010:	0802bc34 	.word	0x0802bc34
 801b014:	08017dcd 	.word	0x08017dcd

0801b018 <report_setting_group_details>:
{
 801b018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b01c:	4683      	mov	fp, r0
 801b01e:	468a      	mov	sl, r1
    setting_details_t *details = settings_get_details();
 801b020:	f001 fc7c 	bl	801c91c <settings_get_details>
    uint_fast16_t idx, n_groups = 0;
 801b024:	f04f 0800 	mov.w	r8, #0
        n_groups += details->n_groups;
 801b028:	7803      	ldrb	r3, [r0, #0]
 801b02a:	4498      	add	r8, r3
    } while((details = details->next));
 801b02c:	6980      	ldr	r0, [r0, #24]
 801b02e:	2800      	cmp	r0, #0
 801b030:	d1fa      	bne.n	801b028 <report_setting_group_details+0x10>
    details = settings_get_details();
 801b032:	f001 fc73 	bl	801c91c <settings_get_details>
 801b036:	4607      	mov	r7, r0
    if((all_groups = group = calloc(n_groups, sizeof(setting_group_detail_t *)))) {
 801b038:	2104      	movs	r1, #4
 801b03a:	4640      	mov	r0, r8
 801b03c:	f007 fa12 	bl	8022464 <calloc>
 801b040:	4681      	mov	r9, r0
 801b042:	2800      	cmp	r0, #0
 801b044:	d037      	beq.n	801b0b6 <report_setting_group_details+0x9e>
 801b046:	4606      	mov	r6, r0
 801b048:	e015      	b.n	801b076 <report_setting_group_details+0x5e>
                    *group++ = (setting_group_detail_t *)&details->groups[idx];
 801b04a:	f846 5b04 	str.w	r5, [r6], #4
            for(idx = 0; idx < details->n_groups; idx++) {
 801b04e:	3401      	adds	r4, #1
 801b050:	783b      	ldrb	r3, [r7, #0]
 801b052:	42a3      	cmp	r3, r4
 801b054:	d90d      	bls.n	801b072 <report_setting_group_details+0x5a>
                if(group_is_dup(all_groups, details->groups[idx].id))
 801b056:	687d      	ldr	r5, [r7, #4]
 801b058:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801b05c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801b060:	7869      	ldrb	r1, [r5, #1]
 801b062:	4648      	mov	r0, r9
 801b064:	f7fc febe 	bl	8017de4 <group_is_dup>
 801b068:	2800      	cmp	r0, #0
 801b06a:	d0ee      	beq.n	801b04a <report_setting_group_details+0x32>
                    n_groups--;
 801b06c:	f108 38ff 	add.w	r8, r8, #4294967295
 801b070:	e7ed      	b.n	801b04e <report_setting_group_details+0x36>
        } while((details = details->next));
 801b072:	69bf      	ldr	r7, [r7, #24]
 801b074:	b10f      	cbz	r7, 801b07a <report_setting_group_details+0x62>
            for(idx = 0; idx < details->n_groups; idx++) {
 801b076:	2400      	movs	r4, #0
 801b078:	e7ea      	b.n	801b050 <report_setting_group_details+0x38>
        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 801b07a:	f1bb 0f00 	cmp.w	fp, #0
 801b07e:	d007      	beq.n	801b090 <report_setting_group_details+0x78>
 801b080:	4b14      	ldr	r3, [pc, #80]	@ (801b0d4 <report_setting_group_details+0xbc>)
 801b082:	2204      	movs	r2, #4
 801b084:	4641      	mov	r1, r8
 801b086:	4648      	mov	r0, r9
 801b088:	f008 f9bd 	bl	8023406 <qsort>
        for(idx = 0; idx < n_groups; idx++)
 801b08c:	2400      	movs	r4, #0
 801b08e:	e007      	b.n	801b0a0 <report_setting_group_details+0x88>
        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 801b090:	4b11      	ldr	r3, [pc, #68]	@ (801b0d8 <report_setting_group_details+0xc0>)
 801b092:	e7f6      	b.n	801b082 <report_setting_group_details+0x6a>
            print_setting_group(all_groups[idx], prefix);
 801b094:	4651      	mov	r1, sl
 801b096:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 801b09a:	f7fd feed 	bl	8018e78 <print_setting_group>
        for(idx = 0; idx < n_groups; idx++)
 801b09e:	3401      	adds	r4, #1
 801b0a0:	45a0      	cmp	r8, r4
 801b0a2:	d8f7      	bhi.n	801b094 <report_setting_group_details+0x7c>
        free(all_groups);
 801b0a4:	4648      	mov	r0, r9
 801b0a6:	f007 fa01 	bl	80224ac <free>
}
 801b0aa:	2000      	movs	r0, #0
 801b0ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } while((details = details->next));
 801b0b0:	69bf      	ldr	r7, [r7, #24]
 801b0b2:	2f00      	cmp	r7, #0
 801b0b4:	d0f9      	beq.n	801b0aa <report_setting_group_details+0x92>
        for(idx = 0; idx < details->n_groups; idx++)
 801b0b6:	2400      	movs	r4, #0
 801b0b8:	783b      	ldrb	r3, [r7, #0]
 801b0ba:	42a3      	cmp	r3, r4
 801b0bc:	d9f8      	bls.n	801b0b0 <report_setting_group_details+0x98>
            print_setting_group(&details->groups[idx], prefix);
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801b0c4:	4651      	mov	r1, sl
 801b0c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b0ca:	f7fd fed5 	bl	8018e78 <print_setting_group>
        for(idx = 0; idx < details->n_groups; idx++)
 801b0ce:	3401      	adds	r4, #1
 801b0d0:	e7f2      	b.n	801b0b8 <report_setting_group_details+0xa0>
 801b0d2:	bf00      	nop
 801b0d4:	08017dd9 	.word	0x08017dd9
 801b0d8:	080185e9 	.word	0x080185e9

0801b0dc <report_help>:
{
 801b0dc:	b538      	push	{r3, r4, r5, lr}
 801b0de:	4604      	mov	r4, r0
    while(*args == ' ')
 801b0e0:	e000      	b.n	801b0e4 <report_help+0x8>
        args++;
 801b0e2:	3401      	adds	r4, #1
    while(*args == ' ')
 801b0e4:	7823      	ldrb	r3, [r4, #0]
 801b0e6:	2b20      	cmp	r3, #32
 801b0e8:	d0fb      	beq.n	801b0e2 <report_help+0x6>
    if(*args == '\0') {
 801b0ea:	b9f3      	cbnz	r3, 801b12a <report_help+0x4e>
        hal.stream.write("Help topics:" ASCII_EOL);
 801b0ec:	4c2d      	ldr	r4, [pc, #180]	@ (801b1a4 <report_help+0xc8>)
 801b0ee:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b0f2:	482d      	ldr	r0, [pc, #180]	@ (801b1a8 <report_help+0xcc>)
 801b0f4:	4798      	blx	r3
        hal.stream.write(" Commands" ASCII_EOL);
 801b0f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b0fa:	482c      	ldr	r0, [pc, #176]	@ (801b1ac <report_help+0xd0>)
 801b0fc:	4798      	blx	r3
        hal.stream.write(" Settings" ASCII_EOL);
 801b0fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b102:	482b      	ldr	r0, [pc, #172]	@ (801b1b0 <report_help+0xd4>)
 801b104:	4798      	blx	r3
        report_setting_group_details(false, " ");
 801b106:	492b      	ldr	r1, [pc, #172]	@ (801b1b4 <report_help+0xd8>)
 801b108:	2000      	movs	r0, #0
 801b10a:	f7ff ff85 	bl	801b018 <report_setting_group_details>
}
 801b10e:	2000      	movs	r0, #0
 801b110:	bd38      	pop	{r3, r4, r5, pc}
            *s++ = CAPS(c);
 801b112:	f803 2b01 	strb.w	r2, [r3], #1
        while((c = *s))
 801b116:	781a      	ldrb	r2, [r3, #0]
 801b118:	b14a      	cbz	r2, 801b12e <report_help+0x52>
            *s++ = CAPS(c);
 801b11a:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 801b11e:	b2c9      	uxtb	r1, r1
 801b120:	2919      	cmp	r1, #25
 801b122:	d8f6      	bhi.n	801b112 <report_help+0x36>
 801b124:	f002 025f 	and.w	r2, r2, #95	@ 0x5f
 801b128:	e7f3      	b.n	801b112 <report_help+0x36>
        char c, *s = args;
 801b12a:	4623      	mov	r3, r4
 801b12c:	e7f3      	b.n	801b116 <report_help+0x3a>
        if(matchhere(args, "COMMANDS")) {
 801b12e:	4922      	ldr	r1, [pc, #136]	@ (801b1b8 <report_help+0xdc>)
 801b130:	4620      	mov	r0, r4
 801b132:	f7fc fd88 	bl	8017c46 <matchhere>
 801b136:	b128      	cbz	r0, 801b144 <report_help+0x68>
            if(grbl.on_report_command_help)
 801b138:	4b20      	ldr	r3, [pc, #128]	@ (801b1bc <report_help+0xe0>)
 801b13a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d0e6      	beq.n	801b10e <report_help+0x32>
                grbl.on_report_command_help();
 801b140:	4798      	blx	r3
 801b142:	e7e4      	b.n	801b10e <report_help+0x32>
        } else if(matchhere(args, "SETTINGS"))
 801b144:	491e      	ldr	r1, [pc, #120]	@ (801b1c0 <report_help+0xe4>)
 801b146:	4620      	mov	r0, r4
 801b148:	f7fc fd7d 	bl	8017c46 <matchhere>
 801b14c:	b130      	cbz	r0, 801b15c <report_help+0x80>
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, Group_All);
 801b14e:	2200      	movs	r2, #0
 801b150:	f240 21e5 	movw	r1, #741	@ 0x2e5
 801b154:	2001      	movs	r0, #1
 801b156:	f7ff fdf5 	bl	801ad44 <report_settings_details>
 801b15a:	e7d8      	b.n	801b10e <report_help+0x32>
            setting_details_t *settings_info = settings_get_details();
 801b15c:	f001 fbde 	bl	801c91c <settings_get_details>
 801b160:	4605      	mov	r5, r0
            found = report_group_settings(settings_info->groups, settings_info->n_groups, args);
 801b162:	4622      	mov	r2, r4
 801b164:	7801      	ldrb	r1, [r0, #0]
 801b166:	6840      	ldr	r0, [r0, #4]
 801b168:	f7ff fe06 	bl	801ad78 <report_group_settings>
            if(!found && (settings_info = settings_info->next)) do {
 801b16c:	4603      	mov	r3, r0
 801b16e:	2800      	cmp	r0, #0
 801b170:	d1cd      	bne.n	801b10e <report_help+0x32>
 801b172:	69ad      	ldr	r5, [r5, #24]
 801b174:	b955      	cbnz	r5, 801b18c <report_help+0xb0>
            if(!found)
 801b176:	2b00      	cmp	r3, #0
 801b178:	d1c9      	bne.n	801b10e <report_help+0x32>
                hal.stream.write( ASCII_EOL "N/A" ASCII_EOL);
 801b17a:	4b0a      	ldr	r3, [pc, #40]	@ (801b1a4 <report_help+0xc8>)
 801b17c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b180:	4810      	ldr	r0, [pc, #64]	@ (801b1c4 <report_help+0xe8>)
 801b182:	4798      	blx	r3
 801b184:	e7c3      	b.n	801b10e <report_help+0x32>
            } while((settings_info = settings_info->next));
 801b186:	69ad      	ldr	r5, [r5, #24]
 801b188:	2d00      	cmp	r5, #0
 801b18a:	d0f4      	beq.n	801b176 <report_help+0x9a>
                if(settings_info->groups && (found = report_group_settings(settings_info->groups, settings_info->n_groups, args)))
 801b18c:	6868      	ldr	r0, [r5, #4]
 801b18e:	2800      	cmp	r0, #0
 801b190:	d0f9      	beq.n	801b186 <report_help+0xaa>
 801b192:	4622      	mov	r2, r4
 801b194:	7829      	ldrb	r1, [r5, #0]
 801b196:	f7ff fdef 	bl	801ad78 <report_group_settings>
 801b19a:	4603      	mov	r3, r0
 801b19c:	2800      	cmp	r0, #0
 801b19e:	d0f2      	beq.n	801b186 <report_help+0xaa>
 801b1a0:	e7e9      	b.n	801b176 <report_help+0x9a>
 801b1a2:	bf00      	nop
 801b1a4:	200011c0 	.word	0x200011c0
 801b1a8:	0802bc7c 	.word	0x0802bc7c
 801b1ac:	0802bc8c 	.word	0x0802bc8c
 801b1b0:	0802bc98 	.word	0x0802bc98
 801b1b4:	0802b6d0 	.word	0x0802b6d0
 801b1b8:	0802bca4 	.word	0x0802bca4
 801b1bc:	200013a8 	.word	0x200013a8
 801b1c0:	0802bcb0 	.word	0x0802bcb0
 801b1c4:	0802bcbc 	.word	0x0802bcbc

0801b1c8 <report_last_signals_event>:
{
 801b1c8:	b538      	push	{r3, r4, r5, lr}
    strcpy(buf, "[LASTEVENTS:");
 801b1ca:	4d10      	ldr	r5, [pc, #64]	@ (801b20c <report_last_signals_event+0x44>)
 801b1cc:	4b10      	ldr	r3, [pc, #64]	@ (801b210 <report_last_signals_event+0x48>)
 801b1ce:	46ac      	mov	ip, r5
 801b1d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b1d2:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 801b1d6:	f88c 3000 	strb.w	r3, [ip]
    append = control_signals_tostring(append, sys.last_event.control);
 801b1da:	4c0e      	ldr	r4, [pc, #56]	@ (801b214 <report_last_signals_event+0x4c>)
 801b1dc:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 801b1e0:	4660      	mov	r0, ip
 801b1e2:	f7fc fd6f 	bl	8017cc4 <control_signals_tostring>
    *append++ = ',';
 801b1e6:	232c      	movs	r3, #44	@ 0x2c
 801b1e8:	f800 3b01 	strb.w	r3, [r0], #1
    append = add_limits(append, sys.last_event.limits);
 801b1ec:	f8d4 1082 	ldr.w	r1, [r4, #130]	@ 0x82
 801b1f0:	f7fc fe03 	bl	8017dfa <add_limits>
    hal.stream.write(buf);
 801b1f4:	4c08      	ldr	r4, [pc, #32]	@ (801b218 <report_last_signals_event+0x50>)
 801b1f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b1fa:	4628      	mov	r0, r5
 801b1fc:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b1fe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b202:	4806      	ldr	r0, [pc, #24]	@ (801b21c <report_last_signals_event+0x54>)
 801b204:	4798      	blx	r3
}
 801b206:	2000      	movs	r0, #0
 801b208:	bd38      	pop	{r3, r4, r5, pc}
 801b20a:	bf00      	nop
 801b20c:	20001aa8 	.word	0x20001aa8
 801b210:	0802bcc4 	.word	0x0802bcc4
 801b214:	200014a0 	.word	0x200014a0
 801b218:	200011c0 	.word	0x200011c0
 801b21c:	0802b584 	.word	0x0802b584

0801b220 <report_current_limit_state>:
{
 801b220:	b570      	push	{r4, r5, r6, lr}
 801b222:	b082      	sub	sp, #8
    strcpy(buf, "[LIMITS:");
 801b224:	4e0c      	ldr	r6, [pc, #48]	@ (801b258 <report_current_limit_state+0x38>)
 801b226:	4b0d      	ldr	r3, [pc, #52]	@ (801b25c <report_current_limit_state+0x3c>)
 801b228:	4634      	mov	r4, r6
 801b22a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b22e:	c403      	stmia	r4!, {r0, r1}
 801b230:	7022      	strb	r2, [r4, #0]
    append = add_limits(append, hal.limits.get_state());
 801b232:	4d0b      	ldr	r5, [pc, #44]	@ (801b260 <report_current_limit_state+0x40>)
 801b234:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801b236:	4798      	blx	r3
 801b238:	4601      	mov	r1, r0
 801b23a:	9001      	str	r0, [sp, #4]
 801b23c:	4620      	mov	r0, r4
 801b23e:	f7fc fddc 	bl	8017dfa <add_limits>
    hal.stream.write(buf);
 801b242:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b246:	4630      	mov	r0, r6
 801b248:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b24a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b24e:	4805      	ldr	r0, [pc, #20]	@ (801b264 <report_current_limit_state+0x44>)
 801b250:	4798      	blx	r3
}
 801b252:	2000      	movs	r0, #0
 801b254:	b002      	add	sp, #8
 801b256:	bd70      	pop	{r4, r5, r6, pc}
 801b258:	20001aa8 	.word	0x20001aa8
 801b25c:	0802bcd4 	.word	0x0802bcd4
 801b260:	200011c0 	.word	0x200011c0
 801b264:	0802b584 	.word	0x0802b584

0801b268 <report_current_home_signal_state>:
{
 801b268:	b530      	push	{r4, r5, lr}
 801b26a:	b083      	sub	sp, #12
    home_signals_t home = hal.homing.get_state();
 801b26c:	4d18      	ldr	r5, [pc, #96]	@ (801b2d0 <report_current_home_signal_state+0x68>)
 801b26e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 801b270:	4798      	blx	r3
 801b272:	f8ad 0004 	strh.w	r0, [sp, #4]
    strcpy(buf, "[HOMES:");
 801b276:	4b17      	ldr	r3, [pc, #92]	@ (801b2d4 <report_current_home_signal_state+0x6c>)
 801b278:	4a17      	ldr	r2, [pc, #92]	@ (801b2d8 <report_current_home_signal_state+0x70>)
 801b27a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b27e:	e883 0003 	stmia.w	r3, {r0, r1}
    append = axis_signals_tostring(append, home.a);
 801b282:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801b286:	1dd8      	adds	r0, r3, #7
 801b288:	f7fc fd04 	bl	8017c94 <axis_signals_tostring>
    *append++ = ',';
 801b28c:	232c      	movs	r3, #44	@ 0x2c
 801b28e:	f800 3b01 	strb.w	r3, [r0], #1
    append = axis_signals_tostring(append, home.b);
 801b292:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801b296:	f7fc fcfd 	bl	8017c94 <axis_signals_tostring>
 801b29a:	4604      	mov	r4, r0
    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 801b29c:	f895 31e2 	ldrb.w	r3, [r5, #482]	@ 0x1e2
 801b2a0:	b1a3      	cbz	r3, 801b2cc <report_current_home_signal_state+0x64>
 801b2a2:	4d0e      	ldr	r5, [pc, #56]	@ (801b2dc <report_current_home_signal_state+0x74>)
 801b2a4:	4620      	mov	r0, r4
 801b2a6:	f7ec ff2b 	bl	8008100 <strlen>
 801b2aa:	1823      	adds	r3, r4, r0
 801b2ac:	8829      	ldrh	r1, [r5, #0]
 801b2ae:	78aa      	ldrb	r2, [r5, #2]
 801b2b0:	5221      	strh	r1, [r4, r0]
 801b2b2:	709a      	strb	r2, [r3, #2]
    hal.stream.write(buf);
 801b2b4:	4c06      	ldr	r4, [pc, #24]	@ (801b2d0 <report_current_home_signal_state+0x68>)
 801b2b6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b2ba:	4806      	ldr	r0, [pc, #24]	@ (801b2d4 <report_current_home_signal_state+0x6c>)
 801b2bc:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801b2be:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b2c2:	4807      	ldr	r0, [pc, #28]	@ (801b2e0 <report_current_home_signal_state+0x78>)
 801b2c4:	4798      	blx	r3
}
 801b2c6:	2000      	movs	r0, #0
 801b2c8:	b003      	add	sp, #12
 801b2ca:	bd30      	pop	{r4, r5, pc}
    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 801b2cc:	4d05      	ldr	r5, [pc, #20]	@ (801b2e4 <report_current_home_signal_state+0x7c>)
 801b2ce:	e7e9      	b.n	801b2a4 <report_current_home_signal_state+0x3c>
 801b2d0:	200011c0 	.word	0x200011c0
 801b2d4:	20001aa8 	.word	0x20001aa8
 801b2d8:	0802bce8 	.word	0x0802bce8
 801b2dc:	0802bce0 	.word	0x0802bce0
 801b2e0:	0802b584 	.word	0x0802b584
 801b2e4:	0802bce4 	.word	0x0802bce4

0801b2e8 <report_spindle_data>:
{
 801b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ec:	ed2d 8b02 	vpush	{d8}
    spindle_ptrs_t *spindle = gc_spindle_get();
 801b2f0:	f7f1 fe28 	bl	800cf44 <gc_spindle_get>
 801b2f4:	4605      	mov	r5, r0
    if(spindle->get_data) {
 801b2f6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d037      	beq.n	801b36c <report_spindle_data+0x84>
        float apos = spindle->get_data(SpindleData_AngularPosition)->angular_position;
 801b2fc:	2002      	movs	r0, #2
 801b2fe:	4798      	blx	r3
 801b300:	ed90 8a03 	vldr	s16, [r0, #12]
        spindle_data_t *data = spindle->get_data(SpindleData_Counters);
 801b304:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801b306:	2000      	movs	r0, #0
 801b308:	4798      	blx	r3
 801b30a:	4606      	mov	r6, r0
        hal.stream.write("[SPINDLEENCODER:");
 801b30c:	4c1c      	ldr	r4, [pc, #112]	@ (801b380 <report_spindle_data+0x98>)
 801b30e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b312:	481c      	ldr	r0, [pc, #112]	@ (801b384 <report_spindle_data+0x9c>)
 801b314:	4798      	blx	r3
        hal.stream.write(uitoa(data->index_count));
 801b316:	f8d4 70b4 	ldr.w	r7, [r4, #180]	@ 0xb4
 801b31a:	6970      	ldr	r0, [r6, #20]
 801b31c:	f7f9 ffd0 	bl	80152c0 <uitoa>
 801b320:	47b8      	blx	r7
        hal.stream.write(",");
 801b322:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b326:	4f18      	ldr	r7, [pc, #96]	@ (801b388 <report_spindle_data+0xa0>)
 801b328:	4638      	mov	r0, r7
 801b32a:	4798      	blx	r3
        hal.stream.write(uitoa(data->pulse_count));
 801b32c:	f8d4 80b4 	ldr.w	r8, [r4, #180]	@ 0xb4
 801b330:	69b0      	ldr	r0, [r6, #24]
 801b332:	f7f9 ffc5 	bl	80152c0 <uitoa>
 801b336:	47c0      	blx	r8
        hal.stream.write(",");
 801b338:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b33c:	4638      	mov	r0, r7
 801b33e:	4798      	blx	r3
        hal.stream.write(uitoa(data->error_count));
 801b340:	f8d4 80b4 	ldr.w	r8, [r4, #180]	@ 0xb4
 801b344:	69f0      	ldr	r0, [r6, #28]
 801b346:	f7f9 ffbb 	bl	80152c0 <uitoa>
 801b34a:	47c0      	blx	r8
        hal.stream.write(",");
 801b34c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b350:	4638      	mov	r0, r7
 801b352:	4798      	blx	r3
        hal.stream.write(ftoa(apos, 3));
 801b354:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 801b358:	2003      	movs	r0, #3
 801b35a:	eeb0 0a48 	vmov.f32	s0, s16
 801b35e:	f7f9 ffd1 	bl	8015304 <ftoa>
 801b362:	47b0      	blx	r6
        hal.stream.write("]" ASCII_EOL);
 801b364:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b368:	4808      	ldr	r0, [pc, #32]	@ (801b38c <report_spindle_data+0xa4>)
 801b36a:	4798      	blx	r3
    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 801b36c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801b36e:	b123      	cbz	r3, 801b37a <report_spindle_data+0x92>
 801b370:	2000      	movs	r0, #0
}
 801b372:	ecbd 8b02 	vpop	{d8}
 801b376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 801b37a:	2003      	movs	r0, #3
 801b37c:	e7f9      	b.n	801b372 <report_spindle_data+0x8a>
 801b37e:	bf00      	nop
 801b380:	200011c0 	.word	0x200011c0
 801b384:	0802bcf0 	.word	0x0802bcf0
 801b388:	0802b9b0 	.word	0x0802b9b0
 801b38c:	0802b584 	.word	0x0802b584

0801b390 <report_pins>:
{
 801b390:	b500      	push	{lr}
 801b392:	b085      	sub	sp, #20
    pin_data_t pin_data = {0};
 801b394:	2300      	movs	r3, #0
 801b396:	9301      	str	r3, [sp, #4]
 801b398:	9302      	str	r3, [sp, #8]
 801b39a:	9303      	str	r3, [sp, #12]
    if(hal.enumerate_pins) {
 801b39c:	4b1e      	ldr	r3, [pc, #120]	@ (801b418 <report_pins+0x88>)
 801b39e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801b3a2:	b363      	cbz	r3, 801b3fe <report_pins+0x6e>
        hal.enumerate_pins(false, count_pins, (void *)&pin_data);
 801b3a4:	aa01      	add	r2, sp, #4
 801b3a6:	491d      	ldr	r1, [pc, #116]	@ (801b41c <report_pins+0x8c>)
 801b3a8:	2000      	movs	r0, #0
 801b3aa:	4798      	blx	r3
        if((pin_data.pins = malloc(pin_data.n_pins * sizeof(pin_info_t)))) {
 801b3ac:	9802      	ldr	r0, [sp, #8]
 801b3ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b3b2:	00c0      	lsls	r0, r0, #3
 801b3b4:	f007 f872 	bl	802249c <malloc>
 801b3b8:	9003      	str	r0, [sp, #12]
 801b3ba:	b320      	cbz	r0, 801b406 <report_pins+0x76>
            hal.enumerate_pins(false, get_pins, (void *)&pin_data);
 801b3bc:	4b16      	ldr	r3, [pc, #88]	@ (801b418 <report_pins+0x88>)
 801b3be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801b3c2:	aa01      	add	r2, sp, #4
 801b3c4:	4916      	ldr	r1, [pc, #88]	@ (801b420 <report_pins+0x90>)
 801b3c6:	2000      	movs	r0, #0
 801b3c8:	4798      	blx	r3
            qsort(pin_data.pins, pin_data.n_pins, sizeof(pin_info_t), cmp_pins);
 801b3ca:	4b16      	ldr	r3, [pc, #88]	@ (801b424 <report_pins+0x94>)
 801b3cc:	2218      	movs	r2, #24
 801b3ce:	9902      	ldr	r1, [sp, #8]
 801b3d0:	9803      	ldr	r0, [sp, #12]
 801b3d2:	f008 f818 	bl	8023406 <qsort>
            for(pin_data.idx = 0; pin_data.idx < pin_data.n_pins; pin_data.idx++)
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	9301      	str	r3, [sp, #4]
 801b3da:	e009      	b.n	801b3f0 <report_pins+0x60>
                report_pin_info(&pin_data.pins[pin_data.idx]);
 801b3dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b3e0:	9b03      	ldr	r3, [sp, #12]
 801b3e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801b3e6:	f7fd fd8d 	bl	8018f04 <report_pin_info>
            for(pin_data.idx = 0; pin_data.idx < pin_data.n_pins; pin_data.idx++)
 801b3ea:	9b01      	ldr	r3, [sp, #4]
 801b3ec:	3301      	adds	r3, #1
 801b3ee:	9301      	str	r3, [sp, #4]
 801b3f0:	9801      	ldr	r0, [sp, #4]
 801b3f2:	9b02      	ldr	r3, [sp, #8]
 801b3f4:	4298      	cmp	r0, r3
 801b3f6:	d3f1      	bcc.n	801b3dc <report_pins+0x4c>
            free(pin_data.pins);
 801b3f8:	9803      	ldr	r0, [sp, #12]
 801b3fa:	f007 f857 	bl	80224ac <free>
}
 801b3fe:	2000      	movs	r0, #0
 801b400:	b005      	add	sp, #20
 801b402:	f85d fb04 	ldr.w	pc, [sp], #4
            hal.enumerate_pins(false, report_pin, NULL);
 801b406:	4b04      	ldr	r3, [pc, #16]	@ (801b418 <report_pins+0x88>)
 801b408:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 801b40c:	2200      	movs	r2, #0
 801b40e:	4906      	ldr	r1, [pc, #24]	@ (801b428 <report_pins+0x98>)
 801b410:	4610      	mov	r0, r2
 801b412:	4798      	blx	r3
 801b414:	e7f3      	b.n	801b3fe <report_pins+0x6e>
 801b416:	bf00      	nop
 801b418:	200011c0 	.word	0x200011c0
 801b41c:	08017e33 	.word	0x08017e33
 801b420:	08018449 	.word	0x08018449
 801b424:	08017e3b 	.word	0x08017e3b
 801b428:	08018f75 	.word	0x08018f75

0801b42c <report_pin_states>:
{
 801b42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if((ports = ioports_available(Port_Digital, Port_Input))) {
 801b430:	2100      	movs	r1, #0
 801b432:	2001      	movs	r0, #1
 801b434:	f7f6 fa2c 	bl	8011890 <ioports_available>
 801b438:	2800      	cmp	r0, #0
 801b43a:	f040 80b3 	bne.w	801b5a4 <report_pin_states+0x178>
    if((ports = ioports_available(Port_Digital, Port_Output))) {
 801b43e:	2101      	movs	r1, #1
 801b440:	4608      	mov	r0, r1
 801b442:	f7f6 fa25 	bl	8011890 <ioports_available>
 801b446:	4607      	mov	r7, r0
 801b448:	2800      	cmp	r0, #0
 801b44a:	f040 8110 	bne.w	801b66e <report_pin_states+0x242>
    if((ports = ioports_available(Port_Analog, Port_Input))) {
 801b44e:	2100      	movs	r1, #0
 801b450:	4608      	mov	r0, r1
 801b452:	f7f6 fa1d 	bl	8011890 <ioports_available>
 801b456:	4607      	mov	r7, r0
 801b458:	2800      	cmp	r0, #0
 801b45a:	f040 8146 	bne.w	801b6ea <report_pin_states+0x2be>
    if((ports = ioports_available(Port_Analog, Port_Output))) {
 801b45e:	2101      	movs	r1, #1
 801b460:	2000      	movs	r0, #0
 801b462:	f7f6 fa15 	bl	8011890 <ioports_available>
 801b466:	4607      	mov	r7, r0
 801b468:	2800      	cmp	r0, #0
 801b46a:	f040 81c3 	bne.w	801b7f4 <report_pin_states+0x3c8>
}
 801b46e:	2000      	movs	r0, #0
 801b470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801b474:	7860      	ldrb	r0, [r4, #1]
 801b476:	f7f1 faad 	bl	800c9d4 <xbar_fn_to_pinname>
 801b47a:	e04e      	b.n	801b51a <report_pin_states+0xee>
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801b47c:	48a6      	ldr	r0, [pc, #664]	@ (801b718 <report_pin_states+0x2ec>)
 801b47e:	e065      	b.n	801b54c <report_pin_states+0x120>
                hal.stream.write(port->mode.debounce ? "D" : "-");
 801b480:	48a6      	ldr	r0, [pc, #664]	@ (801b71c <report_pin_states+0x2f0>)
 801b482:	e07c      	b.n	801b57e <report_pin_states+0x152>
                hal.stream.write(port->cap.invert ? "I" : "-");
 801b484:	48a6      	ldr	r0, [pc, #664]	@ (801b720 <report_pin_states+0x2f4>)
 801b486:	4798      	blx	r3
                hal.stream.write(pull_mode((pull_mode_t)port->cap.pull_mode));
 801b488:	4ea6      	ldr	r6, [pc, #664]	@ (801b724 <report_pin_states+0x2f8>)
 801b48a:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801b48e:	7d20      	ldrb	r0, [r4, #20]
 801b490:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801b494:	f7fc fd10 	bl	8017eb8 <pull_mode>
 801b498:	47c0      	blx	r8
                hal.stream.write(irq_mode((pin_irq_mode_t)port->cap.irq_mode));
 801b49a:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801b49e:	8aa0      	ldrh	r0, [r4, #20]
 801b4a0:	f3c0 1044 	ubfx	r0, r0, #5, #5
 801b4a4:	f7fc fcce 	bl	8017e44 <irq_mode>
 801b4a8:	47c0      	blx	r8
                hal.stream.write(port->cap.debounce ? "D" : "-");
 801b4aa:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b4ae:	f994 2015 	ldrsb.w	r2, [r4, #21]
 801b4b2:	2a00      	cmp	r2, #0
 801b4b4:	db72      	blt.n	801b59c <report_pin_states+0x170>
 801b4b6:	489a      	ldr	r0, [pc, #616]	@ (801b720 <report_pin_states+0x2f4>)
 801b4b8:	4798      	blx	r3
                hal.stream.write("|");
 801b4ba:	4e9a      	ldr	r6, [pc, #616]	@ (801b724 <report_pin_states+0x2f8>)
 801b4bc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b4c0:	4899      	ldr	r0, [pc, #612]	@ (801b728 <report_pin_states+0x2fc>)
 801b4c2:	4798      	blx	r3
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801b4c4:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b4c8:	69e3      	ldr	r3, [r4, #28]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d068      	beq.n	801b5a0 <report_pin_states+0x174>
 801b4ce:	4620      	mov	r0, r4
 801b4d0:	4798      	blx	r3
 801b4d2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b4d6:	ee17 0a90 	vmov	r0, s15
 801b4da:	f7f9 fef1 	bl	80152c0 <uitoa>
 801b4de:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801b4e0:	4b90      	ldr	r3, [pc, #576]	@ (801b724 <report_pin_states+0x2f8>)
 801b4e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b4e6:	4891      	ldr	r0, [pc, #580]	@ (801b72c <report_pin_states+0x300>)
 801b4e8:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801b4ea:	3501      	adds	r5, #1
 801b4ec:	b2ed      	uxtb	r5, r5
 801b4ee:	42bd      	cmp	r5, r7
 801b4f0:	d2a5      	bcs.n	801b43e <report_pin_states+0x12>
            if((port = hal.port.get_pin_info(Port_Digital, Port_Input, idx))) {
 801b4f2:	4b8c      	ldr	r3, [pc, #560]	@ (801b724 <report_pin_states+0x2f8>)
 801b4f4:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b4f8:	462a      	mov	r2, r5
 801b4fa:	2100      	movs	r1, #0
 801b4fc:	2001      	movs	r0, #1
 801b4fe:	4798      	blx	r3
 801b500:	4604      	mov	r4, r0
 801b502:	2800      	cmp	r0, #0
 801b504:	d0f1      	beq.n	801b4ea <report_pin_states+0xbe>
                hal.stream.write("[PINSTATE:DIN|");
 801b506:	4e87      	ldr	r6, [pc, #540]	@ (801b724 <report_pin_states+0x2f8>)
 801b508:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b50c:	4888      	ldr	r0, [pc, #544]	@ (801b730 <report_pin_states+0x304>)
 801b50e:	4798      	blx	r3
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801b510:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b514:	68e0      	ldr	r0, [r4, #12]
 801b516:	2800      	cmp	r0, #0
 801b518:	d0ac      	beq.n	801b474 <report_pin_states+0x48>
 801b51a:	47b0      	blx	r6
                hal.stream.write("|");
 801b51c:	4e81      	ldr	r6, [pc, #516]	@ (801b724 <report_pin_states+0x2f8>)
 801b51e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b522:	f8df 8204 	ldr.w	r8, [pc, #516]	@ 801b728 <report_pin_states+0x2fc>
 801b526:	4640      	mov	r0, r8
 801b528:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801b52a:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801b52e:	7820      	ldrb	r0, [r4, #0]
 801b530:	f7f9 fec6 	bl	80152c0 <uitoa>
 801b534:	47c8      	blx	r9
                hal.stream.write("|");
 801b536:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b53a:	4640      	mov	r0, r8
 801b53c:	4798      	blx	r3
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801b53e:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b542:	7de2      	ldrb	r2, [r4, #23]
 801b544:	f012 0f04 	tst.w	r2, #4
 801b548:	d098      	beq.n	801b47c <report_pin_states+0x50>
 801b54a:	487a      	ldr	r0, [pc, #488]	@ (801b734 <report_pin_states+0x308>)
 801b54c:	4798      	blx	r3
                hal.stream.write(pull_mode((pull_mode_t)port->mode.pull_mode));
 801b54e:	4e75      	ldr	r6, [pc, #468]	@ (801b724 <report_pin_states+0x2f8>)
 801b550:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801b554:	7da0      	ldrb	r0, [r4, #22]
 801b556:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801b55a:	f7fc fcad 	bl	8017eb8 <pull_mode>
 801b55e:	47c0      	blx	r8
                hal.stream.write(irq_mode((pin_irq_mode_t)port->mode.irq_mode));
 801b560:	f8d6 80b4 	ldr.w	r8, [r6, #180]	@ 0xb4
 801b564:	8ae0      	ldrh	r0, [r4, #22]
 801b566:	f3c0 1044 	ubfx	r0, r0, #5, #5
 801b56a:	f7fc fc6b 	bl	8017e44 <irq_mode>
 801b56e:	47c0      	blx	r8
                hal.stream.write(port->mode.debounce ? "D" : "-");
 801b570:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b574:	f994 2017 	ldrsb.w	r2, [r4, #23]
 801b578:	2a00      	cmp	r2, #0
 801b57a:	db81      	blt.n	801b480 <report_pin_states+0x54>
 801b57c:	4868      	ldr	r0, [pc, #416]	@ (801b720 <report_pin_states+0x2f4>)
 801b57e:	4798      	blx	r3
                hal.stream.write("|");
 801b580:	4e68      	ldr	r6, [pc, #416]	@ (801b724 <report_pin_states+0x2f8>)
 801b582:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b586:	4868      	ldr	r0, [pc, #416]	@ (801b728 <report_pin_states+0x2fc>)
 801b588:	4798      	blx	r3
                hal.stream.write(port->cap.invert ? "I" : "-");
 801b58a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b58e:	7d62      	ldrb	r2, [r4, #21]
 801b590:	f012 0f04 	tst.w	r2, #4
 801b594:	f43f af76 	beq.w	801b484 <report_pin_states+0x58>
 801b598:	4866      	ldr	r0, [pc, #408]	@ (801b734 <report_pin_states+0x308>)
 801b59a:	e774      	b.n	801b486 <report_pin_states+0x5a>
                hal.stream.write(port->cap.debounce ? "D" : "-");
 801b59c:	485f      	ldr	r0, [pc, #380]	@ (801b71c <report_pin_states+0x2f0>)
 801b59e:	e78b      	b.n	801b4b8 <report_pin_states+0x8c>
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801b5a0:	4865      	ldr	r0, [pc, #404]	@ (801b738 <report_pin_states+0x30c>)
 801b5a2:	e79c      	b.n	801b4de <report_pin_states+0xb2>
 801b5a4:	4607      	mov	r7, r0
        for(idx = 0; idx < ports; idx++) {
 801b5a6:	2500      	movs	r5, #0
 801b5a8:	e7a1      	b.n	801b4ee <report_pin_states+0xc2>
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801b5aa:	7868      	ldrb	r0, [r5, #1]
 801b5ac:	f7f1 fa12 	bl	800c9d4 <xbar_fn_to_pinname>
 801b5b0:	e034      	b.n	801b61c <report_pin_states+0x1f0>
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801b5b2:	4859      	ldr	r0, [pc, #356]	@ (801b718 <report_pin_states+0x2ec>)
 801b5b4:	e04b      	b.n	801b64e <report_pin_states+0x222>
                hal.stream.write(port->cap.invert ? "I" : "-");
 801b5b6:	485a      	ldr	r0, [pc, #360]	@ (801b720 <report_pin_states+0x2f4>)
 801b5b8:	4798      	blx	r3
                hal.stream.write("|");
 801b5ba:	4e5a      	ldr	r6, [pc, #360]	@ (801b724 <report_pin_states+0x2f8>)
 801b5bc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b5c0:	4859      	ldr	r0, [pc, #356]	@ (801b728 <report_pin_states+0x2fc>)
 801b5c2:	4798      	blx	r3
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801b5c4:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b5c8:	69eb      	ldr	r3, [r5, #28]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d04d      	beq.n	801b66a <report_pin_states+0x23e>
 801b5ce:	4628      	mov	r0, r5
 801b5d0:	4798      	blx	r3
 801b5d2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b5d6:	ee17 0a90 	vmov	r0, s15
 801b5da:	f7f9 fe71 	bl	80152c0 <uitoa>
 801b5de:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801b5e0:	4b50      	ldr	r3, [pc, #320]	@ (801b724 <report_pin_states+0x2f8>)
 801b5e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b5e6:	4851      	ldr	r0, [pc, #324]	@ (801b72c <report_pin_states+0x300>)
 801b5e8:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801b5ea:	3401      	adds	r4, #1
 801b5ec:	b2e4      	uxtb	r4, r4
 801b5ee:	42bc      	cmp	r4, r7
 801b5f0:	f4bf af2d 	bcs.w	801b44e <report_pin_states+0x22>
            if((port = hal.port.get_pin_info(Port_Digital, Port_Output, idx))) {
 801b5f4:	4b4b      	ldr	r3, [pc, #300]	@ (801b724 <report_pin_states+0x2f8>)
 801b5f6:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b5fa:	4622      	mov	r2, r4
 801b5fc:	2101      	movs	r1, #1
 801b5fe:	4608      	mov	r0, r1
 801b600:	4798      	blx	r3
 801b602:	4605      	mov	r5, r0
 801b604:	2800      	cmp	r0, #0
 801b606:	d0f0      	beq.n	801b5ea <report_pin_states+0x1be>
                hal.stream.write("[PINSTATE:DOUT|");
 801b608:	4e46      	ldr	r6, [pc, #280]	@ (801b724 <report_pin_states+0x2f8>)
 801b60a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b60e:	484b      	ldr	r0, [pc, #300]	@ (801b73c <report_pin_states+0x310>)
 801b610:	4798      	blx	r3
                hal.stream.write(port->description ? port->description : xbar_fn_to_pinname(port->function));
 801b612:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b616:	68e8      	ldr	r0, [r5, #12]
 801b618:	2800      	cmp	r0, #0
 801b61a:	d0c6      	beq.n	801b5aa <report_pin_states+0x17e>
 801b61c:	47b0      	blx	r6
                hal.stream.write("|");
 801b61e:	4e41      	ldr	r6, [pc, #260]	@ (801b724 <report_pin_states+0x2f8>)
 801b620:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b624:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 801b728 <report_pin_states+0x2fc>
 801b628:	4640      	mov	r0, r8
 801b62a:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801b62c:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801b630:	7828      	ldrb	r0, [r5, #0]
 801b632:	f7f9 fe45 	bl	80152c0 <uitoa>
 801b636:	47c8      	blx	r9
                hal.stream.write("|");
 801b638:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b63c:	4640      	mov	r0, r8
 801b63e:	4798      	blx	r3
                hal.stream.write(port->mode.inverted ? "I" : "N");
 801b640:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b644:	7dea      	ldrb	r2, [r5, #23]
 801b646:	f012 0f04 	tst.w	r2, #4
 801b64a:	d0b2      	beq.n	801b5b2 <report_pin_states+0x186>
 801b64c:	4839      	ldr	r0, [pc, #228]	@ (801b734 <report_pin_states+0x308>)
 801b64e:	4798      	blx	r3
                hal.stream.write("|");
 801b650:	4e34      	ldr	r6, [pc, #208]	@ (801b724 <report_pin_states+0x2f8>)
 801b652:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b656:	4834      	ldr	r0, [pc, #208]	@ (801b728 <report_pin_states+0x2fc>)
 801b658:	4798      	blx	r3
                hal.stream.write(port->cap.invert ? "I" : "-");
 801b65a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b65e:	7d6a      	ldrb	r2, [r5, #21]
 801b660:	f012 0f04 	tst.w	r2, #4
 801b664:	d0a7      	beq.n	801b5b6 <report_pin_states+0x18a>
 801b666:	4833      	ldr	r0, [pc, #204]	@ (801b734 <report_pin_states+0x308>)
 801b668:	e7a6      	b.n	801b5b8 <report_pin_states+0x18c>
                hal.stream.write(port->get_value ? uitoa((uint32_t)port->get_value(port)) : "?");
 801b66a:	4833      	ldr	r0, [pc, #204]	@ (801b738 <report_pin_states+0x30c>)
 801b66c:	e7b7      	b.n	801b5de <report_pin_states+0x1b2>
        for(idx = 0; idx < ports; idx++) {
 801b66e:	2400      	movs	r4, #0
 801b670:	e7bd      	b.n	801b5ee <report_pin_states+0x1c2>
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801b672:	4831      	ldr	r0, [pc, #196]	@ (801b738 <report_pin_states+0x30c>)
 801b674:	47a8      	blx	r5
                hal.stream.write("]" ASCII_EOL);
 801b676:	4b2b      	ldr	r3, [pc, #172]	@ (801b724 <report_pin_states+0x2f8>)
 801b678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b67c:	482b      	ldr	r0, [pc, #172]	@ (801b72c <report_pin_states+0x300>)
 801b67e:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801b680:	3401      	adds	r4, #1
 801b682:	b2e4      	uxtb	r4, r4
 801b684:	42bc      	cmp	r4, r7
 801b686:	f4bf aeea 	bcs.w	801b45e <report_pin_states+0x32>
            if((port = hal.port.get_pin_info(Port_Analog, Port_Input, idx))) {
 801b68a:	4b26      	ldr	r3, [pc, #152]	@ (801b724 <report_pin_states+0x2f8>)
 801b68c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b690:	4622      	mov	r2, r4
 801b692:	2100      	movs	r1, #0
 801b694:	4608      	mov	r0, r1
 801b696:	4798      	blx	r3
 801b698:	4606      	mov	r6, r0
 801b69a:	2800      	cmp	r0, #0
 801b69c:	d0f0      	beq.n	801b680 <report_pin_states+0x254>
                hal.stream.write("[PINSTATE:AIN|");
 801b69e:	4d21      	ldr	r5, [pc, #132]	@ (801b724 <report_pin_states+0x2f8>)
 801b6a0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b6a4:	4826      	ldr	r0, [pc, #152]	@ (801b740 <report_pin_states+0x314>)
 801b6a6:	4798      	blx	r3
                hal.stream.write(port->description);
 801b6a8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b6ac:	68f0      	ldr	r0, [r6, #12]
 801b6ae:	4798      	blx	r3
                hal.stream.write("|");
 801b6b0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b6b4:	481c      	ldr	r0, [pc, #112]	@ (801b728 <report_pin_states+0x2fc>)
 801b6b6:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801b6b8:	f8d5 80b4 	ldr.w	r8, [r5, #180]	@ 0xb4
 801b6bc:	7830      	ldrb	r0, [r6, #0]
 801b6be:	f7f9 fdff 	bl	80152c0 <uitoa>
 801b6c2:	47c0      	blx	r8
                hal.stream.write("|||");
 801b6c4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 801b6c8:	481e      	ldr	r0, [pc, #120]	@ (801b744 <report_pin_states+0x318>)
 801b6ca:	4798      	blx	r3
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801b6cc:	f8d5 50b4 	ldr.w	r5, [r5, #180]	@ 0xb4
 801b6d0:	69f3      	ldr	r3, [r6, #28]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d0cd      	beq.n	801b672 <report_pin_states+0x246>
 801b6d6:	4630      	mov	r0, r6
 801b6d8:	4798      	blx	r3
 801b6da:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b6de:	2002      	movs	r0, #2
 801b6e0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801b6e4:	f7f9 fe0e 	bl	8015304 <ftoa>
 801b6e8:	e7c4      	b.n	801b674 <report_pin_states+0x248>
        for(idx = 0; idx < ports; idx++) {
 801b6ea:	2400      	movs	r4, #0
 801b6ec:	e7ca      	b.n	801b684 <report_pin_states+0x258>
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801b6ee:	4816      	ldr	r0, [pc, #88]	@ (801b748 <report_pin_states+0x31c>)
 801b6f0:	4790      	blx	r2
                hal.stream.write("|");
 801b6f2:	4e0c      	ldr	r6, [pc, #48]	@ (801b724 <report_pin_states+0x2f8>)
 801b6f4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b6f8:	480b      	ldr	r0, [pc, #44]	@ (801b728 <report_pin_states+0x2fc>)
 801b6fa:	4798      	blx	r3
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801b6fc:	f8d6 20b4 	ldr.w	r2, [r6, #180]	@ 0xb4
 801b700:	7d6b      	ldrb	r3, [r5, #21]
 801b702:	f013 0f10 	tst.w	r3, #16
 801b706:	d123      	bne.n	801b750 <report_pin_states+0x324>
 801b708:	f013 0f20 	tst.w	r3, #32
 801b70c:	d06e      	beq.n	801b7ec <report_pin_states+0x3c0>
 801b70e:	480f      	ldr	r0, [pc, #60]	@ (801b74c <report_pin_states+0x320>)
 801b710:	e01f      	b.n	801b752 <report_pin_states+0x326>
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801b712:	4801      	ldr	r0, [pc, #4]	@ (801b718 <report_pin_states+0x2ec>)
 801b714:	e7ec      	b.n	801b6f0 <report_pin_states+0x2c4>
 801b716:	bf00      	nop
 801b718:	0802bd08 	.word	0x0802bd08
 801b71c:	0802b568 	.word	0x0802b568
 801b720:	0802b560 	.word	0x0802b560
 801b724:	200011c0 	.word	0x200011c0
 801b728:	0802b5a0 	.word	0x0802b5a0
 801b72c:	0802b584 	.word	0x0802b584
 801b730:	0802bd18 	.word	0x0802bd18
 801b734:	0802bd04 	.word	0x0802bd04
 801b738:	0802bd0c 	.word	0x0802bd0c
 801b73c:	0802bd28 	.word	0x0802bd28
 801b740:	0802bd38 	.word	0x0802bd38
 801b744:	0802bd48 	.word	0x0802bd48
 801b748:	0802bd10 	.word	0x0802bd10
 801b74c:	0802bd14 	.word	0x0802bd14
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801b750:	4829      	ldr	r0, [pc, #164]	@ (801b7f8 <report_pin_states+0x3cc>)
 801b752:	4790      	blx	r2
                hal.stream.write("|");
 801b754:	4e29      	ldr	r6, [pc, #164]	@ (801b7fc <report_pin_states+0x3d0>)
 801b756:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b75a:	4829      	ldr	r0, [pc, #164]	@ (801b800 <report_pin_states+0x3d4>)
 801b75c:	4798      	blx	r3
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801b75e:	f8d6 60b4 	ldr.w	r6, [r6, #180]	@ 0xb4
 801b762:	69eb      	ldr	r3, [r5, #28]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d043      	beq.n	801b7f0 <report_pin_states+0x3c4>
 801b768:	4628      	mov	r0, r5
 801b76a:	4798      	blx	r3
 801b76c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b770:	2002      	movs	r0, #2
 801b772:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801b776:	f7f9 fdc5 	bl	8015304 <ftoa>
 801b77a:	47b0      	blx	r6
                hal.stream.write("]" ASCII_EOL);
 801b77c:	4b1f      	ldr	r3, [pc, #124]	@ (801b7fc <report_pin_states+0x3d0>)
 801b77e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b782:	4820      	ldr	r0, [pc, #128]	@ (801b804 <report_pin_states+0x3d8>)
 801b784:	4798      	blx	r3
        for(idx = 0; idx < ports; idx++) {
 801b786:	3401      	adds	r4, #1
 801b788:	b2e4      	uxtb	r4, r4
 801b78a:	42bc      	cmp	r4, r7
 801b78c:	f4bf ae6f 	bcs.w	801b46e <report_pin_states+0x42>
            if((port = hal.port.get_pin_info(Port_Analog, Port_Output, idx))) {
 801b790:	4b1a      	ldr	r3, [pc, #104]	@ (801b7fc <report_pin_states+0x3d0>)
 801b792:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b796:	4622      	mov	r2, r4
 801b798:	2101      	movs	r1, #1
 801b79a:	2000      	movs	r0, #0
 801b79c:	4798      	blx	r3
 801b79e:	4605      	mov	r5, r0
 801b7a0:	2800      	cmp	r0, #0
 801b7a2:	d0f0      	beq.n	801b786 <report_pin_states+0x35a>
                hal.stream.write("[PINSTATE:AOUT|");
 801b7a4:	4e15      	ldr	r6, [pc, #84]	@ (801b7fc <report_pin_states+0x3d0>)
 801b7a6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b7aa:	4817      	ldr	r0, [pc, #92]	@ (801b808 <report_pin_states+0x3dc>)
 801b7ac:	4798      	blx	r3
                hal.stream.write(port->description);
 801b7ae:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b7b2:	68e8      	ldr	r0, [r5, #12]
 801b7b4:	4798      	blx	r3
                hal.stream.write("|");
 801b7b6:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b7ba:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 801b800 <report_pin_states+0x3d4>
 801b7be:	4640      	mov	r0, r8
 801b7c0:	4798      	blx	r3
                hal.stream.write(uitoa(port->id));
 801b7c2:	f8d6 90b4 	ldr.w	r9, [r6, #180]	@ 0xb4
 801b7c6:	7828      	ldrb	r0, [r5, #0]
 801b7c8:	f7f9 fd7a 	bl	80152c0 <uitoa>
 801b7cc:	47c8      	blx	r9
                hal.stream.write("|");
 801b7ce:	f8d6 30b4 	ldr.w	r3, [r6, #180]	@ 0xb4
 801b7d2:	4640      	mov	r0, r8
 801b7d4:	4798      	blx	r3
                hal.stream.write(port->mode.pwm ? "P" : (port->mode.servo_pwm ? "S" : "N"));
 801b7d6:	f8d6 20b4 	ldr.w	r2, [r6, #180]	@ 0xb4
 801b7da:	7deb      	ldrb	r3, [r5, #23]
 801b7dc:	f013 0f10 	tst.w	r3, #16
 801b7e0:	d185      	bne.n	801b6ee <report_pin_states+0x2c2>
 801b7e2:	f013 0f20 	tst.w	r3, #32
 801b7e6:	d094      	beq.n	801b712 <report_pin_states+0x2e6>
 801b7e8:	4808      	ldr	r0, [pc, #32]	@ (801b80c <report_pin_states+0x3e0>)
 801b7ea:	e781      	b.n	801b6f0 <report_pin_states+0x2c4>
                hal.stream.write(port->cap.pwm ? "P" : (port->cap.servo_pwm ? "S" : "N"));
 801b7ec:	4808      	ldr	r0, [pc, #32]	@ (801b810 <report_pin_states+0x3e4>)
 801b7ee:	e7b0      	b.n	801b752 <report_pin_states+0x326>
                hal.stream.write(port->get_value ? ftoa((uint32_t)port->get_value(port), 2) : "?");
 801b7f0:	4808      	ldr	r0, [pc, #32]	@ (801b814 <report_pin_states+0x3e8>)
 801b7f2:	e7c2      	b.n	801b77a <report_pin_states+0x34e>
        for(idx = 0; idx < ports; idx++) {
 801b7f4:	2400      	movs	r4, #0
 801b7f6:	e7c8      	b.n	801b78a <report_pin_states+0x35e>
 801b7f8:	0802bd10 	.word	0x0802bd10
 801b7fc:	200011c0 	.word	0x200011c0
 801b800:	0802b5a0 	.word	0x0802b5a0
 801b804:	0802b584 	.word	0x0802b584
 801b808:	0802bd4c 	.word	0x0802bd4c
 801b80c:	0802bd14 	.word	0x0802bd14
 801b810:	0802bd08 	.word	0x0802bd08
 801b814:	0802bd0c 	.word	0x0802bd0c

0801b818 <report_time>:
    if(hal.rtc.get_datetime) {
 801b818:	4b1c      	ldr	r3, [pc, #112]	@ (801b88c <report_time+0x74>)
 801b81a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d031      	beq.n	801b886 <report_time+0x6e>
{
 801b822:	b530      	push	{r4, r5, lr}
 801b824:	b08b      	sub	sp, #44	@ 0x2c
        if((ok = !!hal.rtc.get_datetime(&time))) {
 801b826:	a801      	add	r0, sp, #4
 801b828:	4798      	blx	r3
 801b82a:	b350      	cbz	r0, 801b882 <report_time+0x6a>
            hal.stream.write("[RTC:");
 801b82c:	4c17      	ldr	r4, [pc, #92]	@ (801b88c <report_time+0x74>)
 801b82e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b832:	4817      	ldr	r0, [pc, #92]	@ (801b890 <report_time+0x78>)
 801b834:	4798      	blx	r3
            hal.stream.write(uitoa(time.tm_year + 1900));
 801b836:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 801b83a:	9806      	ldr	r0, [sp, #24]
 801b83c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801b840:	f7f9 fd3e 	bl	80152c0 <uitoa>
 801b844:	47a8      	blx	r5
            print_uito2a("-", time.tm_mon + 1);
 801b846:	4d13      	ldr	r5, [pc, #76]	@ (801b894 <report_time+0x7c>)
 801b848:	9905      	ldr	r1, [sp, #20]
 801b84a:	3101      	adds	r1, #1
 801b84c:	4628      	mov	r0, r5
 801b84e:	f7fc fc15 	bl	801807c <print_uito2a>
            print_uito2a("-", time.tm_mday);
 801b852:	9904      	ldr	r1, [sp, #16]
 801b854:	4628      	mov	r0, r5
 801b856:	f7fc fc11 	bl	801807c <print_uito2a>
            print_uito2a("T", time.tm_hour);
 801b85a:	9903      	ldr	r1, [sp, #12]
 801b85c:	480e      	ldr	r0, [pc, #56]	@ (801b898 <report_time+0x80>)
 801b85e:	f7fc fc0d 	bl	801807c <print_uito2a>
            print_uito2a(":", time.tm_min);
 801b862:	4d0e      	ldr	r5, [pc, #56]	@ (801b89c <report_time+0x84>)
 801b864:	9902      	ldr	r1, [sp, #8]
 801b866:	4628      	mov	r0, r5
 801b868:	f7fc fc08 	bl	801807c <print_uito2a>
            print_uito2a(":", time.tm_sec);
 801b86c:	9901      	ldr	r1, [sp, #4]
 801b86e:	4628      	mov	r0, r5
 801b870:	f7fc fc04 	bl	801807c <print_uito2a>
            hal.stream.write("]" ASCII_EOL);
 801b874:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 801b878:	4809      	ldr	r0, [pc, #36]	@ (801b8a0 <report_time+0x88>)
 801b87a:	4798      	blx	r3
    return ok ? Status_OK : Status_InvalidStatement;
 801b87c:	2000      	movs	r0, #0
}
 801b87e:	b00b      	add	sp, #44	@ 0x2c
 801b880:	bd30      	pop	{r4, r5, pc}
    return ok ? Status_OK : Status_InvalidStatement;
 801b882:	2003      	movs	r0, #3
 801b884:	e7fb      	b.n	801b87e <report_time+0x66>
 801b886:	2003      	movs	r0, #3
}
 801b888:	4770      	bx	lr
 801b88a:	bf00      	nop
 801b88c:	200011c0 	.word	0x200011c0
 801b890:	0802bd5c 	.word	0x0802bd5c
 801b894:	0802b560 	.word	0x0802b560
 801b898:	0802b550 	.word	0x0802b550
 801b89c:	0802b8ec 	.word	0x0802b8ec
 801b8a0:	0802b584 	.word	0x0802b584

0801b8a4 <report_spindles>:

status_code_t report_spindles (bool machine_readable)
{
 801b8a4:	b510      	push	{r4, lr}
 801b8a6:	4604      	mov	r4, r0
    if(!spindle_enumerate_spindles(report_spindle, (void *)machine_readable) && !machine_readable)
 801b8a8:	4601      	mov	r1, r0
 801b8aa:	4806      	ldr	r0, [pc, #24]	@ (801b8c4 <report_spindles+0x20>)
 801b8ac:	f002 facc 	bl	801de48 <spindle_enumerate_spindles>
 801b8b0:	b928      	cbnz	r0, 801b8be <report_spindles+0x1a>
 801b8b2:	b924      	cbnz	r4, 801b8be <report_spindles+0x1a>
        hal.stream.write("No spindles registered." ASCII_EOL);
 801b8b4:	4b04      	ldr	r3, [pc, #16]	@ (801b8c8 <report_spindles+0x24>)
 801b8b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b8ba:	4804      	ldr	r0, [pc, #16]	@ (801b8cc <report_spindles+0x28>)
 801b8bc:	4798      	blx	r3

    return Status_OK;
}
 801b8be:	2000      	movs	r0, #0
 801b8c0:	bd10      	pop	{r4, pc}
 801b8c2:	bf00      	nop
 801b8c4:	080180b1 	.word	0x080180b1
 801b8c8:	200011c0 	.word	0x200011c0
 801b8cc:	0802bd64 	.word	0x0802bd64

0801b8d0 <report_pid_log>:

void report_pid_log (void)
{
 801b8d0:	b508      	push	{r3, lr}
    } while(idx != sys.pid_log.idx);

    hal.stream.write("]" ASCII_EOL);
    grbl.report.status_message(Status_OK);
#else
    grbl.report.status_message(Status_GcodeUnsupportedCommand);
 801b8d2:	4b02      	ldr	r3, [pc, #8]	@ (801b8dc <report_pid_log+0xc>)
 801b8d4:	689b      	ldr	r3, [r3, #8]
 801b8d6:	2014      	movs	r0, #20
 801b8d8:	4798      	blx	r3
#endif
}
 801b8da:	bd08      	pop	{r3, pc}
 801b8dc:	200013a8 	.word	0x200013a8

0801b8e0 <report_init_fns>:
    .alarm_message = report_alarm_message,
    .setting = report_setting
};

void report_init_fns (void)
{
 801b8e0:	b538      	push	{r3, r4, r5, lr}
    memcpy(&grbl.report, &report_fns, sizeof(report_t));
 801b8e2:	4d07      	ldr	r5, [pc, #28]	@ (801b900 <report_init_fns+0x20>)
 801b8e4:	46ac      	mov	ip, r5
 801b8e6:	4c07      	ldr	r4, [pc, #28]	@ (801b904 <report_init_fns+0x24>)
 801b8e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b8ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b8f2:	e88c 0003 	stmia.w	ip, {r0, r1}

    if(grbl.on_report_handlers_init)
 801b8f6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801b8f8:	b103      	cbz	r3, 801b8fc <report_init_fns+0x1c>
        grbl.on_report_handlers_init();
 801b8fa:	4798      	blx	r3
}
 801b8fc:	bd38      	pop	{r3, r4, r5, pc}
 801b8fe:	bf00      	nop
 801b900:	200013a8 	.word	0x200013a8
 801b904:	0802bd94 	.word	0x0802bd94

0801b908 <group_is_available>:
};

static bool group_is_available (const setting_group_detail_t *group)
{
    return true;
}
 801b908:	2001      	movs	r0, #1
 801b90a:	4770      	bx	lr

0801b90c <restore_override_backup>:

static void restore_override_backup (void)
{
    uint_fast8_t idx = N_AXIS;

    if(override_backup.valid) do {
 801b90c:	4b08      	ldr	r3, [pc, #32]	@ (801b930 <restore_override_backup+0x24>)
 801b90e:	781b      	ldrb	r3, [r3, #0]
 801b910:	b16b      	cbz	r3, 801b92e <restore_override_backup+0x22>
    uint_fast8_t idx = N_AXIS;
 801b912:	2303      	movs	r3, #3
        idx--;
 801b914:	3b01      	subs	r3, #1
        settings.axis[idx].acceleration = override_backup.acceleration[idx];
 801b916:	4a06      	ldr	r2, [pc, #24]	@ (801b930 <restore_override_backup+0x24>)
 801b918:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b91c:	6850      	ldr	r0, [r2, #4]
 801b91e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801b922:	0091      	lsls	r1, r2, #2
 801b924:	4a03      	ldr	r2, [pc, #12]	@ (801b934 <restore_override_backup+0x28>)
 801b926:	440a      	add	r2, r1
 801b928:	6390      	str	r0, [r2, #56]	@ 0x38
    } while(idx);
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d1f2      	bne.n	801b914 <restore_override_backup+0x8>
}
 801b92e:	4770      	bx	lr
 801b930:	20001b60 	.word	0x20001b60
 801b934:	20001bd8 	.word	0x20001bd8

0801b938 <set_ganged_dir_invert>:
    return Status_OK;
}

static status_code_t set_ganged_dir_invert (setting_id_t id, uint_fast16_t int_value)
{
    if(!hal.stepper.get_ganged)
 801b938:	4b08      	ldr	r3, [pc, #32]	@ (801b95c <set_ganged_dir_invert+0x24>)
 801b93a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801b93e:	b15b      	cbz	r3, 801b958 <set_ganged_dir_invert+0x20>
{
 801b940:	b510      	push	{r4, lr}
 801b942:	460c      	mov	r4, r1
        return Status_SettingDisabled;

    settings.steppers.ganged_dir_invert.mask = int_value & hal.stepper.get_ganged(false).mask;
 801b944:	2000      	movs	r0, #0
 801b946:	4798      	blx	r3
 801b948:	b2c0      	uxtb	r0, r0
 801b94a:	ea00 0104 	and.w	r1, r0, r4
 801b94e:	4b04      	ldr	r3, [pc, #16]	@ (801b960 <set_ganged_dir_invert+0x28>)
 801b950:	f883 10ea 	strb.w	r1, [r3, #234]	@ 0xea

    return Status_OK;
 801b954:	2000      	movs	r0, #0
}
 801b956:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801b958:	2035      	movs	r0, #53	@ 0x35
}
 801b95a:	4770      	bx	lr
 801b95c:	200011c0 	.word	0x200011c0
 801b960:	20001bd8 	.word	0x20001bd8

0801b964 <set_stepper_deenergize_mask>:

static status_code_t set_stepper_deenergize_mask (setting_id_t id, uint_fast16_t int_value)
{
 801b964:	b508      	push	{r3, lr}
    settings.steppers.deenergize.mask = int_value;
 801b966:	4b05      	ldr	r3, [pc, #20]	@ (801b97c <set_stepper_deenergize_mask+0x18>)
 801b968:	f883 10ec 	strb.w	r1, [r3, #236]	@ 0xec

    hal.stepper.enable(settings.steppers.deenergize);
 801b96c:	4a04      	ldr	r2, [pc, #16]	@ (801b980 <set_stepper_deenergize_mask+0x1c>)
 801b96e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801b972:	b2c8      	uxtb	r0, r1
 801b974:	4790      	blx	r2

    return Status_OK;
}
 801b976:	2000      	movs	r0, #0
 801b978:	bd08      	pop	{r3, pc}
 801b97a:	bf00      	nop
 801b97c:	20001bd8 	.word	0x20001bd8
 801b980:	200011c0 	.word	0x200011c0

0801b984 <set_report_interval>:

static status_code_t set_report_interval (setting_id_t setting, uint_fast16_t int_value)
{
    if((settings.report_interval = int_value) == 0)
 801b984:	b289      	uxth	r1, r1
 801b986:	4b05      	ldr	r3, [pc, #20]	@ (801b99c <set_report_interval+0x18>)
 801b988:	8299      	strh	r1, [r3, #20]
 801b98a:	b921      	cbnz	r1, 801b996 <set_report_interval+0x12>
        sys.flags.auto_reporting = Off;
 801b98c:	4b04      	ldr	r3, [pc, #16]	@ (801b9a0 <set_report_interval+0x1c>)
 801b98e:	7dda      	ldrb	r2, [r3, #23]
 801b990:	f36f 0241 	bfc	r2, #1, #1
 801b994:	75da      	strb	r2, [r3, #23]

    return Status_OK;
}
 801b996:	2000      	movs	r0, #0
 801b998:	4770      	bx	lr
 801b99a:	bf00      	nop
 801b99c:	20001bd8 	.word	0x20001bd8
 801b9a0:	200014a0 	.word	0x200014a0

0801b9a4 <set_report_mask>:

static status_code_t set_report_mask (setting_id_t id, uint_fast16_t int_value)
{
#if COMPATIBILITY_LEVEL <= 1
    settings.status_report.mask = int_value;
 801b9a4:	4b02      	ldr	r3, [pc, #8]	@ (801b9b0 <set_report_mask+0xc>)
 801b9a6:	f8a3 10fc 	strh.w	r1, [r3, #252]	@ 0xfc
    int_value &= 0b11;
    settings.status_report.mask = (settings.status_report.mask & ~0b11) | int_value;
#endif

    return Status_OK;
}
 801b9aa:	2000      	movs	r0, #0
 801b9ac:	4770      	bx	lr
 801b9ae:	bf00      	nop
 801b9b0:	20001bd8 	.word	0x20001bd8

0801b9b4 <set_pwm_mode>:
    return Status_OK;
}

static status_code_t set_pwm_mode (setting_id_t id, uint_fast16_t int_value)
{
    settings.spindle.flags.enable_rpm_controlled = int_value != 0;
 801b9b4:	3900      	subs	r1, #0
 801b9b6:	bf18      	it	ne
 801b9b8:	2101      	movne	r1, #1
 801b9ba:	4b04      	ldr	r3, [pc, #16]	@ (801b9cc <set_pwm_mode+0x18>)
 801b9bc:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801b9c0:	f361 0200 	bfi	r2, r1, #0, #1
 801b9c4:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

    return Status_OK;
}
 801b9c8:	2000      	movs	r0, #0
 801b9ca:	4770      	bx	lr
 801b9cc:	20001bd8 	.word	0x20001bd8

0801b9d0 <set_pwm_options>:

static status_code_t set_pwm_options (setting_id_t id, uint_fast16_t int_value)
{
    if(int_value & 0x001) {
 801b9d0:	f011 0f01 	tst.w	r1, #1
 801b9d4:	d018      	beq.n	801ba08 <set_pwm_options+0x38>
        if(int_value > 0b111)
 801b9d6:	2907      	cmp	r1, #7
 801b9d8:	d829      	bhi.n	801ba2e <set_pwm_options+0x5e>
            return Status_SettingValueOutOfRange;
        settings.spindle.flags.pwm_disable = Off;
 801b9da:	4b16      	ldr	r3, [pc, #88]	@ (801ba34 <set_pwm_options+0x64>)
 801b9dc:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801b9e0:	f36f 12c7 	bfc	r2, #7, #1
 801b9e4:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.enable_rpm_controlled = !!(int_value & 0b010);
 801b9e8:	f3c1 0040 	ubfx	r0, r1, #1, #1
 801b9ec:	b2d2      	uxtb	r2, r2
 801b9ee:	f360 0200 	bfi	r2, r0, #0, #1
 801b9f2:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.laser_mode_disable = !!(int_value & 0b100);
 801b9f6:	f3c1 0180 	ubfx	r1, r1, #2, #1
 801b9fa:	b2d2      	uxtb	r2, r2
 801b9fc:	f361 0241 	bfi	r2, r1, #1, #1
 801ba00:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    } else {
        settings.spindle.flags.pwm_disable = On;
        settings.spindle.flags.enable_rpm_controlled = settings.spindle.flags.laser_mode_disable = Off;
    }

    return Status_OK;
 801ba04:	2000      	movs	r0, #0
 801ba06:	4770      	bx	lr
        settings.spindle.flags.pwm_disable = On;
 801ba08:	4b0a      	ldr	r3, [pc, #40]	@ (801ba34 <set_pwm_options+0x64>)
 801ba0a:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801ba0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801ba12:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
        settings.spindle.flags.enable_rpm_controlled = settings.spindle.flags.laser_mode_disable = Off;
 801ba16:	b2d2      	uxtb	r2, r2
 801ba18:	f36f 0241 	bfc	r2, #1, #1
 801ba1c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
 801ba20:	b2d2      	uxtb	r2, r2
 801ba22:	f36f 0200 	bfc	r2, #0, #1
 801ba26:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    return Status_OK;
 801ba2a:	2000      	movs	r0, #0
 801ba2c:	4770      	bx	lr
            return Status_SettingValueOutOfRange;
 801ba2e:	2034      	movs	r0, #52	@ 0x34
}
 801ba30:	4770      	bx	lr
 801ba32:	bf00      	nop
 801ba34:	20001bd8 	.word	0x20001bd8

0801ba38 <tmp_set_soft_limits>:
    return Status_OK;
}

static void tmp_set_soft_limits (void)
{
    sys.soft_limits.mask = 0;
 801ba38:	4b11      	ldr	r3, [pc, #68]	@ (801ba80 <tmp_set_soft_limits+0x48>)
 801ba3a:	2200      	movs	r2, #0
 801ba3c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

    if(settings.limits.flags.soft_enabled) {
 801ba40:	4b10      	ldr	r3, [pc, #64]	@ (801ba84 <tmp_set_soft_limits+0x4c>)
 801ba42:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801ba46:	f013 0f02 	tst.w	r3, #2
 801ba4a:	d018      	beq.n	801ba7e <tmp_set_soft_limits+0x46>
        uint_fast8_t idx = N_AXIS;
 801ba4c:	2303      	movs	r3, #3
 801ba4e:	e000      	b.n	801ba52 <tmp_set_soft_limits+0x1a>
        do {
            if(settings.axis[--idx].max_travel < -0.0f)
                bit_true(sys.soft_limits.mask, bit(idx));
        } while(idx);
 801ba50:	b1ab      	cbz	r3, 801ba7e <tmp_set_soft_limits+0x46>
            if(settings.axis[--idx].max_travel < -0.0f)
 801ba52:	3b01      	subs	r3, #1
 801ba54:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801ba58:	0091      	lsls	r1, r2, #2
 801ba5a:	4a0a      	ldr	r2, [pc, #40]	@ (801ba84 <tmp_set_soft_limits+0x4c>)
 801ba5c:	440a      	add	r2, r1
 801ba5e:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 801ba62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba6a:	d5f1      	bpl.n	801ba50 <tmp_set_soft_limits+0x18>
                bit_true(sys.soft_limits.mask, bit(idx));
 801ba6c:	4804      	ldr	r0, [pc, #16]	@ (801ba80 <tmp_set_soft_limits+0x48>)
 801ba6e:	f890 2095 	ldrb.w	r2, [r0, #149]	@ 0x95
 801ba72:	2101      	movs	r1, #1
 801ba74:	4099      	lsls	r1, r3
 801ba76:	430a      	orrs	r2, r1
 801ba78:	f880 2095 	strb.w	r2, [r0, #149]	@ 0x95
 801ba7c:	e7e8      	b.n	801ba50 <tmp_set_soft_limits+0x18>
    }
}
 801ba7e:	4770      	bx	lr
 801ba80:	200014a0 	.word	0x200014a0
 801ba84:	20001bd8 	.word	0x20001bd8

0801ba88 <set_soft_limits_enable>:

static status_code_t set_soft_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 801ba88:	b508      	push	{r3, lr}
    if(int_value && !settings.homing.flags.enabled)
 801ba8a:	460b      	mov	r3, r1
 801ba8c:	b129      	cbz	r1, 801ba9a <set_soft_limits_enable+0x12>
 801ba8e:	4a0b      	ldr	r2, [pc, #44]	@ (801babc <set_soft_limits_enable+0x34>)
 801ba90:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801ba94:	f012 0f01 	tst.w	r2, #1
 801ba98:	d00d      	beq.n	801bab6 <set_soft_limits_enable+0x2e>
        return Status_SoftLimitError;

    settings.limits.flags.soft_enabled = int_value != 0;
 801ba9a:	3b00      	subs	r3, #0
 801ba9c:	bf18      	it	ne
 801ba9e:	2301      	movne	r3, #1
 801baa0:	4a06      	ldr	r2, [pc, #24]	@ (801babc <set_soft_limits_enable+0x34>)
 801baa2:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 801baa6:	f363 0141 	bfi	r1, r3, #1, #1
 801baaa:	f882 1124 	strb.w	r1, [r2, #292]	@ 0x124

    tmp_set_soft_limits();
 801baae:	f7ff ffc3 	bl	801ba38 <tmp_set_soft_limits>

    return Status_OK;
 801bab2:	2000      	movs	r0, #0
}
 801bab4:	bd08      	pop	{r3, pc}
        return Status_SoftLimitError;
 801bab6:	200a      	movs	r0, #10
 801bab8:	e7fc      	b.n	801bab4 <set_soft_limits_enable+0x2c>
 801baba:	bf00      	nop
 801babc:	20001bd8 	.word	0x20001bd8

0801bac0 <set_estop_unlock>:

static status_code_t set_estop_unlock (setting_id_t id, uint_fast16_t int_value)
{
    if(!hal.signals_cap.e_stop)
 801bac0:	4b09      	ldr	r3, [pc, #36]	@ (801bae8 <set_estop_unlock+0x28>)
 801bac2:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801bac6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801baca:	d00b      	beq.n	801bae4 <set_estop_unlock+0x24>
        return Status_SettingDisabled;

    settings.flags.no_unlock_after_estop = int_value == 0;
 801bacc:	fab1 f181 	clz	r1, r1
 801bad0:	0949      	lsrs	r1, r1, #5
 801bad2:	4b06      	ldr	r3, [pc, #24]	@ (801baec <set_estop_unlock+0x2c>)
 801bad4:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801bad8:	f361 12c7 	bfi	r2, r1, #7, #1
 801badc:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
 801bae0:	2000      	movs	r0, #0
 801bae2:	4770      	bx	lr
        return Status_SettingDisabled;
 801bae4:	2035      	movs	r0, #53	@ 0x35
}
 801bae6:	4770      	bx	lr
 801bae8:	200011c0 	.word	0x200011c0
 801baec:	20001bd8 	.word	0x20001bd8

0801baf0 <set_offset_lock>:

#if COMPATIBILITY_LEVEL <= 1

static status_code_t set_offset_lock (setting_id_t id, uint_fast16_t int_value)
{
    settings.parking.flags.offset_lock = int_value & 0b111; // TODO: remove
 801baf0:	f001 0107 	and.w	r1, r1, #7
 801baf4:	4a08      	ldr	r2, [pc, #32]	@ (801bb18 <set_offset_lock+0x28>)
 801baf6:	f892 3128 	ldrb.w	r3, [r2, #296]	@ 0x128
 801bafa:	f361 1347 	bfi	r3, r1, #5, #3
 801bafe:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
    settings.offset_lock.mask &= ~0b111; // TODO: remove
 801bb02:	f892 3102 	ldrb.w	r3, [r2, #258]	@ 0x102
 801bb06:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801bb0a:	f882 3102 	strb.w	r3, [r2, #258]	@ 0x102
    settings.offset_lock.mask |= settings.parking.flags.offset_lock;
 801bb0e:	430b      	orrs	r3, r1
 801bb10:	f882 3102 	strb.w	r3, [r2, #258]	@ 0x102

    return Status_OK;
}
 801bb14:	2000      	movs	r0, #0
 801bb16:	4770      	bx	lr
 801bb18:	20001bd8 	.word	0x20001bd8

0801bb1c <set_hard_limits_enable>:
        sys.hard_limits.mask &= ~settings.steppers.is_rotary.mask;
  #endif
}

static status_code_t set_hard_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 801bb1c:	b510      	push	{r4, lr}
    if((settings.limits.flags.hard_enabled = bit_istrue(int_value, bit(0)))) {
 801bb1e:	f001 0001 	and.w	r0, r1, #1
 801bb22:	4b16      	ldr	r3, [pc, #88]	@ (801bb7c <set_hard_limits_enable+0x60>)
 801bb24:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 801bb28:	f360 0200 	bfi	r2, r0, #0, #1
 801bb2c:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801bb30:	b1b8      	cbz	r0, 801bb62 <set_hard_limits_enable+0x46>
#if COMPATIBILITY_LEVEL <= 1
        settings.limits.flags.check_at_init = bit_istrue(int_value, bit(1));
 801bb32:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801bb36:	b2d2      	uxtb	r2, r2
 801bb38:	f361 0282 	bfi	r2, r1, #2, #1
 801bb3c:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 801bb40:	4b0e      	ldr	r3, [pc, #56]	@ (801bb7c <set_hard_limits_enable+0x60>)
 801bb42:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 801bb46:	f013 0301 	ands.w	r3, r3, #1
 801bb4a:	d000      	beq.n	801bb4e <set_hard_limits_enable+0x32>
 801bb4c:	2307      	movs	r3, #7
 801bb4e:	4a0c      	ldr	r2, [pc, #48]	@ (801bb80 <set_hard_limits_enable+0x64>)
 801bb50:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
#endif
    } else
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;

    tmp_set_hard_limits();
    hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0}); // Change immediately. NOTE: Nice to have but could be problematic later.
 801bb54:	4b0b      	ldr	r3, [pc, #44]	@ (801bb84 <set_hard_limits_enable+0x68>)
 801bb56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bb58:	2400      	movs	r4, #0
 801bb5a:	4621      	mov	r1, r4
 801bb5c:	4798      	blx	r3

    return Status_OK;
}
 801bb5e:	4620      	mov	r0, r4
 801bb60:	bd10      	pop	{r4, pc}
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;
 801bb62:	4b06      	ldr	r3, [pc, #24]	@ (801bb7c <set_hard_limits_enable+0x60>)
 801bb64:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 801bb68:	f36f 1245 	bfc	r2, #5, #1
 801bb6c:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801bb70:	b2d2      	uxtb	r2, r2
 801bb72:	f36f 0282 	bfc	r2, #2, #1
 801bb76:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 801bb7a:	e7e1      	b.n	801bb40 <set_hard_limits_enable+0x24>
 801bb7c:	20001bd8 	.word	0x20001bd8
 801bb80:	200014a0 	.word	0x200014a0
 801bb84:	200011c0 	.word	0x200011c0

0801bb88 <set_jog_soft_limited>:

static status_code_t set_jog_soft_limited (setting_id_t id, uint_fast16_t int_value)
{
    if (int_value && !settings.homing.flags.enabled)
 801bb88:	460b      	mov	r3, r1
 801bb8a:	b129      	cbz	r1, 801bb98 <set_jog_soft_limited+0x10>
 801bb8c:	4a09      	ldr	r2, [pc, #36]	@ (801bbb4 <set_jog_soft_limited+0x2c>)
 801bb8e:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801bb92:	f012 0f01 	tst.w	r2, #1
 801bb96:	d00b      	beq.n	801bbb0 <set_jog_soft_limited+0x28>
        return Status_SoftLimitError;

    settings.limits.flags.jog_soft_limited = int_value != 0;
 801bb98:	3b00      	subs	r3, #0
 801bb9a:	bf18      	it	ne
 801bb9c:	2301      	movne	r3, #1
 801bb9e:	4a05      	ldr	r2, [pc, #20]	@ (801bbb4 <set_jog_soft_limited+0x2c>)
 801bba0:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 801bba4:	f363 01c3 	bfi	r1, r3, #3, #1
 801bba8:	f882 1124 	strb.w	r1, [r2, #292]	@ 0x124

    return Status_OK;
 801bbac:	2000      	movs	r0, #0
 801bbae:	4770      	bx	lr
        return Status_SoftLimitError;
 801bbb0:	200a      	movs	r0, #10
}
 801bbb2:	4770      	bx	lr
 801bbb4:	20001bd8 	.word	0x20001bd8

0801bbb8 <set_homing_enable>:

static status_code_t set_homing_enable (setting_id_t id, uint_fast16_t int_value)
{
    homing_flags_t homing;

    homing.value = int_value;
 801bbb8:	b28a      	uxth	r2, r1

    if(homing.enabled) {
 801bbba:	f011 0f01 	tst.w	r1, #1
 801bbbe:	d02b      	beq.n	801bc18 <set_homing_enable+0x60>
        settings.homing.flags.override_locks = DEFAULT_HOMING_OVERRIDE_LOCKS;
        settings.homing.flags.keep_on_reset = DEFAULT_HOMING_KEEP_STATUS_ON_RESET;
        settings.homing.flags.use_limit_switches = DEFAULT_HOMING_USE_LIMIT_SWITCHES;
        settings.limits.flags.two_switches = DEFAULT_LIMITS_TWO_SWITCHES_ON_AXES;
#else
        settings.homing.flags.value = int_value & 0b1111;
 801bbc0:	f001 010f 	and.w	r1, r1, #15
 801bbc4:	4b1c      	ldr	r3, [pc, #112]	@ (801bc38 <set_homing_enable+0x80>)
 801bbc6:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.limits.flags.two_switches = homing.two_switches;
 801bbca:	f3c2 1000 	ubfx	r0, r2, #4, #1
 801bbce:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 801bbd2:	f360 1104 	bfi	r1, r0, #4, #1
 801bbd6:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
        settings.homing.flags.manual = homing.manual;
 801bbda:	f3c2 1040 	ubfx	r0, r2, #5, #1
 801bbde:	f893 1114 	ldrb.w	r1, [r3, #276]	@ 0x114
 801bbe2:	f360 1104 	bfi	r1, r0, #4, #1
 801bbe6:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.override_locks = homing.override_locks;
 801bbea:	f3c2 1080 	ubfx	r0, r2, #6, #1
 801bbee:	b2c9      	uxtb	r1, r1
 801bbf0:	f360 1145 	bfi	r1, r0, #5, #1
 801bbf4:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.keep_on_reset = homing.keep_on_reset;
 801bbf8:	f3c2 10c0 	ubfx	r0, r2, #7, #1
 801bbfc:	b2c9      	uxtb	r1, r1
 801bbfe:	f360 1186 	bfi	r1, r0, #6, #1
 801bc02:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.homing.flags.use_limit_switches = homing.use_limit_switches;
 801bc06:	f3c2 2200 	ubfx	r2, r2, #8, #1
 801bc0a:	b2c9      	uxtb	r1, r1
 801bc0c:	f362 11c7 	bfi	r1, r2, #7, #1
 801bc10:	f883 1114 	strb.w	r1, [r3, #276]	@ 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
        settings.limits.flags.jog_soft_limited = Off;
    }

    return Status_OK;
}
 801bc14:	2000      	movs	r0, #0
 801bc16:	4770      	bx	lr
        settings.homing.flags.value = 0;
 801bc18:	4b07      	ldr	r3, [pc, #28]	@ (801bc38 <set_homing_enable+0x80>)
 801bc1a:	2200      	movs	r2, #0
 801bc1c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
 801bc20:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 801bc24:	f362 0141 	bfi	r1, r2, #1, #1
 801bc28:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
        settings.limits.flags.jog_soft_limited = Off;
 801bc2c:	b2c9      	uxtb	r1, r1
 801bc2e:	f362 01c3 	bfi	r1, r2, #3, #1
 801bc32:	f883 1124 	strb.w	r1, [r3, #292]	@ 0x124
 801bc36:	e7ed      	b.n	801bc14 <set_homing_enable+0x5c>
 801bc38:	20001bd8 	.word	0x20001bd8

0801bc3c <set_enable_legacy_rt_commands>:

static status_code_t set_enable_legacy_rt_commands (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.legacy_rt_commands = int_value != 0;
 801bc3c:	3900      	subs	r1, #0
 801bc3e:	bf18      	it	ne
 801bc40:	2101      	movne	r1, #1
 801bc42:	4b04      	ldr	r3, [pc, #16]	@ (801bc54 <set_enable_legacy_rt_commands+0x18>)
 801bc44:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bc48:	f361 1286 	bfi	r2, r1, #6, #1
 801bc4c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bc50:	2000      	movs	r0, #0
 801bc52:	4770      	bx	lr
 801bc54:	20001bd8 	.word	0x20001bd8

0801bc58 <set_parking_enable>:

#ifndef NO_SAFETY_DOOR_SUPPORT

static status_code_t set_parking_enable (setting_id_t id, uint_fast16_t int_value)
{
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 801bc58:	f011 0f01 	tst.w	r1, #1
 801bc5c:	d006      	beq.n	801bc6c <set_parking_enable+0x14>
 801bc5e:	f001 0107 	and.w	r1, r1, #7
 801bc62:	4b03      	ldr	r3, [pc, #12]	@ (801bc70 <set_parking_enable+0x18>)
 801bc64:	f883 1128 	strb.w	r1, [r3, #296]	@ 0x128

    return Status_OK;
}
 801bc68:	2000      	movs	r0, #0
 801bc6a:	4770      	bx	lr
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 801bc6c:	2100      	movs	r1, #0
 801bc6e:	e7f8      	b.n	801bc62 <set_parking_enable+0xa>
 801bc70:	20001bd8 	.word	0x20001bd8

0801bc74 <set_restore_overrides>:

static status_code_t set_restore_overrides (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.restore_overrides = int_value != 0;
 801bc74:	3900      	subs	r1, #0
 801bc76:	bf18      	it	ne
 801bc78:	2101      	movne	r1, #1
 801bc7a:	4b04      	ldr	r3, [pc, #16]	@ (801bc8c <set_restore_overrides+0x18>)
 801bc7c:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bc80:	f361 0241 	bfi	r2, r1, #1, #1
 801bc84:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bc88:	2000      	movs	r0, #0
 801bc8a:	4770      	bx	lr
 801bc8c:	20001bd8 	.word	0x20001bd8

0801bc90 <set_sleep_enable>:

#endif // NO_SAFETY_DOOR_SUPPORT

static status_code_t set_sleep_enable (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.sleep_enable = int_value != 0;
 801bc90:	3900      	subs	r1, #0
 801bc92:	bf18      	it	ne
 801bc94:	2101      	movne	r1, #1
 801bc96:	4b04      	ldr	r3, [pc, #16]	@ (801bca8 <set_sleep_enable+0x18>)
 801bc98:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bc9c:	f361 02c3 	bfi	r2, r1, #3, #1
 801bca0:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bca4:	2000      	movs	r0, #0
 801bca6:	4770      	bx	lr
 801bca8:	20001bd8 	.word	0x20001bd8

0801bcac <set_hold_actions>:

static status_code_t set_hold_actions (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.disable_laser_during_hold = bit_istrue(int_value, bit(0));
 801bcac:	4b07      	ldr	r3, [pc, #28]	@ (801bccc <set_hold_actions+0x20>)
 801bcae:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bcb2:	f361 1204 	bfi	r2, r1, #4, #1
 801bcb6:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    settings.flags.restore_after_feed_hold = bit_istrue(int_value, bit(1));
 801bcba:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801bcbe:	b2d2      	uxtb	r2, r2
 801bcc0:	f361 12c7 	bfi	r2, r1, #7, #1
 801bcc4:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bcc8:	2000      	movs	r0, #0
 801bcca:	4770      	bx	lr
 801bccc:	20001bd8 	.word	0x20001bd8

0801bcd0 <set_g92_disable_persistence>:

#if COMPATIBILITY_LEVEL <= 1
static status_code_t set_g92_disable_persistence (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.g92_is_volatile = int_value != 0;
 801bcd0:	3900      	subs	r1, #0
 801bcd2:	bf18      	it	ne
 801bcd4:	2101      	movne	r1, #1
 801bcd6:	4b04      	ldr	r3, [pc, #16]	@ (801bce8 <set_g92_disable_persistence+0x18>)
 801bcd8:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801bcdc:	f361 0241 	bfi	r2, r1, #1, #1
 801bce0:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
}
 801bce4:	2000      	movs	r0, #0
 801bce6:	4770      	bx	lr
 801bce8:	20001bd8 	.word	0x20001bd8

0801bcec <set_force_initialization_alarm>:
#endif

static status_code_t set_force_initialization_alarm (setting_id_t id, uint_fast16_t int_value)
{
    settings.flags.force_initialization_alarm = int_value != 0;
 801bcec:	3900      	subs	r1, #0
 801bcee:	bf18      	it	ne
 801bcf0:	2101      	movne	r1, #1
 801bcf2:	4b04      	ldr	r3, [pc, #16]	@ (801bd04 <set_force_initialization_alarm+0x18>)
 801bcf4:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801bcf8:	f361 1245 	bfi	r2, r1, #5, #1
 801bcfc:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe

    return Status_OK;
}
 801bd00:	2000      	movs	r0, #0
 801bd02:	4770      	bx	lr
 801bd04:	20001bd8 	.word	0x20001bd8

0801bd08 <set_probe_allow_feed_override>:

static status_code_t set_probe_allow_feed_override (setting_id_t id, uint_fast16_t int_value)
{
    settings.probe.allow_feed_override = int_value != 0;
 801bd08:	3900      	subs	r1, #0
 801bd0a:	bf18      	it	ne
 801bd0c:	2101      	movne	r1, #1
 801bd0e:	4b04      	ldr	r3, [pc, #16]	@ (801bd20 <set_probe_allow_feed_override+0x18>)
 801bd10:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801bd14:	f361 1204 	bfi	r2, r1, #4, #1
 801bd18:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

    return Status_OK;
}
 801bd1c:	2000      	movs	r0, #0
 801bd1e:	4770      	bx	lr
 801bd20:	20001bd8 	.word	0x20001bd8

0801bd24 <set_tool_change_probing_distance>:
    return Status_OK;
}

static status_code_t set_tool_change_probing_distance (setting_id_t id, float value)
{
    if(hal.driver_cap.atc)
 801bd24:	4b05      	ldr	r3, [pc, #20]	@ (801bd3c <set_tool_change_probing_distance+0x18>)
 801bd26:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801bd2a:	f010 0002 	ands.w	r0, r0, #2
 801bd2e:	d103      	bne.n	801bd38 <set_tool_change_probing_distance+0x14>
        return Status_InvalidStatement;

    settings.tool_change.probing_distance = value;
 801bd30:	4b03      	ldr	r3, [pc, #12]	@ (801bd40 <set_tool_change_probing_distance+0x1c>)
 801bd32:	ed83 0a0a 	vstr	s0, [r3, #40]	@ 0x28

    return Status_OK;
 801bd36:	4770      	bx	lr
        return Status_InvalidStatement;
 801bd38:	2003      	movs	r0, #3
}
 801bd3a:	4770      	bx	lr
 801bd3c:	200011c0 	.word	0x200011c0
 801bd40:	20001bd8 	.word	0x20001bd8

0801bd44 <set_tool_restore_pos>:

static status_code_t set_tool_restore_pos (setting_id_t id, uint_fast16_t int_value)
{
    if(hal.driver_cap.atc)
 801bd44:	4b09      	ldr	r3, [pc, #36]	@ (801bd6c <set_tool_restore_pos+0x28>)
 801bd46:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801bd4a:	f010 0002 	ands.w	r0, r0, #2
 801bd4e:	d10a      	bne.n	801bd66 <set_tool_restore_pos+0x22>
        return Status_InvalidStatement;

    settings.flags.no_restore_position_after_M6 = int_value == 0;
 801bd50:	fab1 f181 	clz	r1, r1
 801bd54:	0949      	lsrs	r1, r1, #5
 801bd56:	4b06      	ldr	r3, [pc, #24]	@ (801bd70 <set_tool_restore_pos+0x2c>)
 801bd58:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801bd5c:	f361 1286 	bfi	r2, r1, #6, #1
 801bd60:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    return Status_OK;
 801bd64:	4770      	bx	lr
        return Status_InvalidStatement;
 801bd66:	2003      	movs	r0, #3
}
 801bd68:	4770      	bx	lr
 801bd6a:	bf00      	nop
 801bd6c:	200011c0 	.word	0x200011c0
 801bd70:	20001bd8 	.word	0x20001bd8

0801bd74 <normalize_id>:

#endif

inline static setting_id_t normalize_id (setting_id_t id)
{
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 801bd74:	f1a0 0365 	sub.w	r3, r0, #101	@ 0x65
 801bd78:	b29b      	uxth	r3, r3
 801bd7a:	2b5c      	cmp	r3, #92	@ 0x5c
 801bd7c:	d904      	bls.n	801bd88 <normalize_id+0x14>
       (id > Setting_AxisSettingsBase2 && id <= Setting_AxisSettingsMax2))
 801bd7e:	f1a0 03c9 	sub.w	r3, r0, #201	@ 0xc9
 801bd82:	b29b      	uxth	r3, r3
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 801bd84:	2b5c      	cmp	r3, #92	@ 0x5c
 801bd86:	d80b      	bhi.n	801bda0 <normalize_id+0x2c>
        id -= id % AXIS_SETTINGS_INCREMENT;
 801bd88:	4b24      	ldr	r3, [pc, #144]	@ (801be1c <normalize_id+0xa8>)
 801bd8a:	fba3 2300 	umull	r2, r3, r3, r0
 801bd8e:	08db      	lsrs	r3, r3, #3
 801bd90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bd94:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801bd98:	b29b      	uxth	r3, r3
 801bd9a:	1ac0      	subs	r0, r0, r3
 801bd9c:	b280      	uxth	r0, r0
 801bd9e:	4770      	bx	lr
    else if(id > Setting_EncoderSettingsBase && id <= Setting_EncoderSettingsMax)
 801bda0:	f2a0 1391 	subw	r3, r0, #401	@ 0x191
 801bda4:	b29b      	uxth	r3, r3
 801bda6:	2b30      	cmp	r3, #48	@ 0x30
 801bda8:	d80c      	bhi.n	801bdc4 <normalize_id+0x50>
        id = (setting_id_t)(Setting_EncoderSettingsBase + (id % ENCODER_SETTINGS_INCREMENT));
 801bdaa:	4b1c      	ldr	r3, [pc, #112]	@ (801be1c <normalize_id+0xa8>)
 801bdac:	fba3 2300 	umull	r2, r3, r3, r0
 801bdb0:	08db      	lsrs	r3, r3, #3
 801bdb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bdb6:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 801bdba:	b280      	uxth	r0, r0
 801bdbc:	f500 70c8 	add.w	r0, r0, #400	@ 0x190
 801bdc0:	b280      	uxth	r0, r0
 801bdc2:	4770      	bx	lr
    else if(id > Setting_ModbusTCPBase && id <= Setting_ModbusTCPMax)
 801bdc4:	f2a0 2359 	subw	r3, r0, #601	@ 0x259
 801bdc8:	b29b      	uxth	r3, r3
 801bdca:	2b26      	cmp	r3, #38	@ 0x26
 801bdcc:	d80b      	bhi.n	801bde6 <normalize_id+0x72>
        id = (setting_id_t)(Setting_ModbusTCPBase + (id % MODBUS_TCP_SETTINGS_INCREMENT));
 801bdce:	4b13      	ldr	r3, [pc, #76]	@ (801be1c <normalize_id+0xa8>)
 801bdd0:	fba3 2300 	umull	r2, r3, r3, r0
 801bdd4:	089b      	lsrs	r3, r3, #2
 801bdd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bdda:	1ac0      	subs	r0, r0, r3
 801bddc:	b280      	uxth	r0, r0
 801bdde:	f500 7016 	add.w	r0, r0, #600	@ 0x258
 801bde2:	b280      	uxth	r0, r0
 801bde4:	4770      	bx	lr
    else if((id > Setting_Macro0 && id <= Setting_Macro9) || (id > Setting_MacroPort0 && id <= Setting_MacroPort9) || (id > Setting_ButtonAction0 && id <= Setting_ButtonAction9))
 801bde6:	f2a0 13eb 	subw	r3, r0, #491	@ 0x1eb
 801bdea:	b29b      	uxth	r3, r3
 801bdec:	2b08      	cmp	r3, #8
 801bdee:	d909      	bls.n	801be04 <normalize_id+0x90>
 801bdf0:	f2a0 13f5 	subw	r3, r0, #501	@ 0x1f5
 801bdf4:	b29b      	uxth	r3, r3
 801bdf6:	2b08      	cmp	r3, #8
 801bdf8:	d904      	bls.n	801be04 <normalize_id+0x90>
 801bdfa:	f2a0 234f 	subw	r3, r0, #591	@ 0x24f
 801bdfe:	b29b      	uxth	r3, r3
 801be00:	2b08      	cmp	r3, #8
 801be02:	d80a      	bhi.n	801be1a <normalize_id+0xa6>
        id = (setting_id_t)(id - (id % 10));
 801be04:	4b05      	ldr	r3, [pc, #20]	@ (801be1c <normalize_id+0xa8>)
 801be06:	fba3 2300 	umull	r2, r3, r3, r0
 801be0a:	08db      	lsrs	r3, r3, #3
 801be0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801be10:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801be14:	b29b      	uxth	r3, r3
 801be16:	1ac0      	subs	r0, r0, r3
 801be18:	b280      	uxth	r0, r0

    return id;
}
 801be1a:	4770      	bx	lr
 801be1c:	cccccccd 	.word	0xcccccccd

0801be20 <get_int>:

static uint32_t get_int (setting_id_t id)
{
    uint32_t value = 0;

    switch(id) {
 801be20:	2841      	cmp	r0, #65	@ 0x41
 801be22:	d844      	bhi.n	801beae <get_int+0x8e>
 801be24:	2806      	cmp	r0, #6
 801be26:	f0c0 8148 	bcc.w	801c0ba <get_int+0x29a>
 801be2a:	1f83      	subs	r3, r0, #6
 801be2c:	2b3b      	cmp	r3, #59	@ 0x3b
 801be2e:	f200 8146 	bhi.w	801c0be <get_int+0x29e>
 801be32:	e8df f013 	tbh	[pc, r3, lsl #1]
 801be36:	0095      	.short	0x0095
 801be38:	009b0144 	.word	0x009b0144
 801be3c:	009f0081 	.word	0x009f0081
 801be40:	01440144 	.word	0x01440144
 801be44:	00a900a3 	.word	0x00a900a3
 801be48:	00b30144 	.word	0x00b30144
 801be4c:	014400b7 	.word	0x014400b7
 801be50:	00c100bb 	.word	0x00c100bb
 801be54:	00dd00c7 	.word	0x00dd00c7
 801be58:	01440144 	.word	0x01440144
 801be5c:	01440144 	.word	0x01440144
 801be60:	01440144 	.word	0x01440144
 801be64:	01440144 	.word	0x01440144
 801be68:	00920144 	.word	0x00920144
 801be6c:	01440144 	.word	0x01440144
 801be70:	01440144 	.word	0x01440144
 801be74:	014400f9 	.word	0x014400f9
 801be78:	00d700fd 	.word	0x00d700fd
 801be7c:	01440103 	.word	0x01440103
 801be80:	01070144 	.word	0x01070144
 801be84:	01070107 	.word	0x01070107
 801be88:	01070107 	.word	0x01070107
 801be8c:	01440107 	.word	0x01440107
 801be90:	01440144 	.word	0x01440144
 801be94:	01440144 	.word	0x01440144
 801be98:	01440144 	.word	0x01440144
 801be9c:	01440144 	.word	0x01440144
 801bea0:	010d0144 	.word	0x010d0144
 801bea4:	01130144 	.word	0x01130144
 801bea8:	01230119 	.word	0x01230119
 801beac:	0129      	.short	0x0129
 801beae:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801beb2:	4298      	cmp	r0, r3
 801beb4:	f000 80f8 	beq.w	801c0a8 <get_int+0x288>
 801beb8:	f5b0 7ff1 	cmp.w	r0, #482	@ 0x1e2
 801bebc:	d30c      	bcc.n	801bed8 <get_int+0xb8>
 801bebe:	f5b0 7ff3 	cmp.w	r0, #486	@ 0x1e6
 801bec2:	f000 80f4 	beq.w	801c0ae <get_int+0x28e>
 801bec6:	f240 2307 	movw	r3, #519	@ 0x207
 801beca:	4298      	cmp	r0, r3
 801becc:	d128      	bne.n	801bf20 <get_int+0x100>
        case Setting_OffsetLock:
            value = settings.offset_lock.mask & 0b111;
            break;

        case Setting_EncoderSpindle:
            value = settings.offset_lock.encoder_spindle;
 801bece:	4b7f      	ldr	r3, [pc, #508]	@ (801c0cc <get_int+0x2ac>)
 801bed0:	f893 0102 	ldrb.w	r0, [r3, #258]	@ 0x102
 801bed4:	08c0      	lsrs	r0, r0, #3
            break;
 801bed6:	4770      	bx	lr
    switch(id) {
 801bed8:	f5b0 7fc0 	cmp.w	r0, #384	@ 0x180
 801bedc:	f000 80de 	beq.w	801c09c <get_int+0x27c>
 801bee0:	d909      	bls.n	801bef6 <get_int+0xd6>
 801bee2:	f240 138b 	movw	r3, #395	@ 0x18b
 801bee6:	4298      	cmp	r0, r3
 801bee8:	d118      	bne.n	801bf1c <get_int+0xfc>
            value = settings.spindle.flags.type;
 801beea:	4b78      	ldr	r3, [pc, #480]	@ (801c0cc <get_int+0x2ac>)
 801beec:	f893 00e7 	ldrb.w	r0, [r3, #231]	@ 0xe7
 801bef0:	f3c0 0084 	ubfx	r0, r0, #2, #5
            break;
 801bef4:	4770      	bx	lr
    switch(id) {
 801bef6:	f240 1355 	movw	r3, #341	@ 0x155
 801befa:	4298      	cmp	r0, r3
 801befc:	f000 80ca 	beq.w	801c094 <get_int+0x274>
 801bf00:	f5b0 7fad 	cmp.w	r0, #346	@ 0x15a
 801bf04:	d108      	bne.n	801bf18 <get_int+0xf8>
            value = settings.flags.no_restore_position_after_M6 ? 0 : 1;
 801bf06:	4b71      	ldr	r3, [pc, #452]	@ (801c0cc <get_int+0x2ac>)
 801bf08:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801bf0c:	0980      	lsrs	r0, r0, #6
 801bf0e:	f080 0001 	eor.w	r0, r0, #1
 801bf12:	f000 0001 	and.w	r0, r0, #1
            break;
 801bf16:	4770      	bx	lr
    switch(id) {
 801bf18:	2000      	movs	r0, #0
 801bf1a:	4770      	bx	lr
 801bf1c:	2000      	movs	r0, #0
 801bf1e:	4770      	bx	lr
 801bf20:	f5b0 7ff2 	cmp.w	r0, #484	@ 0x1e4
 801bf24:	d106      	bne.n	801bf34 <get_int+0x114>
            value = settings.flags.no_unlock_after_estop ? 0 : 1;
 801bf26:	4b69      	ldr	r3, [pc, #420]	@ (801c0cc <get_int+0x2ac>)
 801bf28:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801bf2c:	43c0      	mvns	r0, r0
 801bf2e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
            break;
 801bf32:	4770      	bx	lr
    switch(id) {
 801bf34:	2000      	movs	r0, #0
 801bf36:	4770      	bx	lr
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801bf38:	4a64      	ldr	r2, [pc, #400]	@ (801c0cc <get_int+0x2ac>)
 801bf3a:	f892 30e7 	ldrb.w	r3, [r2, #231]	@ 0xe7
 801bf3e:	f992 20e7 	ldrsb.w	r2, [r2, #231]	@ 0xe7
 801bf42:	2a00      	cmp	r2, #0
 801bf44:	f2c0 80bd 	blt.w	801c0c2 <get_int+0x2a2>
                                                              (settings.spindle.flags.enable_rpm_controlled ? 0b010 : 0) |
 801bf48:	005b      	lsls	r3, r3, #1
 801bf4a:	f003 0002 	and.w	r0, r3, #2
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801bf4e:	f040 0001 	orr.w	r0, r0, #1
                                                               (settings.spindle.flags.laser_mode_disable ? 0b100 : 0));
 801bf52:	f003 0304 	and.w	r3, r3, #4
                                                              (settings.spindle.flags.enable_rpm_controlled ? 0b010 : 0) |
 801bf56:	4318      	orrs	r0, r3
 801bf58:	4770      	bx	lr
            value = settings.mode;
 801bf5a:	4b5c      	ldr	r3, [pc, #368]	@ (801c0cc <get_int+0x2ac>)
 801bf5c:	7e18      	ldrb	r0, [r3, #24]
            break;
 801bf5e:	4770      	bx	lr
            value = settings.probe.invert_probe_pin;
 801bf60:	4b5a      	ldr	r3, [pc, #360]	@ (801c0cc <get_int+0x2ac>)
 801bf62:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801bf66:	f000 0001 	and.w	r0, r0, #1
            break;
 801bf6a:	4770      	bx	lr
            value = settings.steppers.ganged_dir_invert.mask;
 801bf6c:	4b57      	ldr	r3, [pc, #348]	@ (801c0cc <get_int+0x2ac>)
 801bf6e:	f893 00ea 	ldrb.w	r0, [r3, #234]	@ 0xea
            break;
 801bf72:	4770      	bx	lr
            value = settings.status_report.mask;
 801bf74:	4b55      	ldr	r3, [pc, #340]	@ (801c0cc <get_int+0x2ac>)
 801bf76:	f8b3 00fc 	ldrh.w	r0, [r3, #252]	@ 0xfc
            break;
 801bf7a:	4770      	bx	lr
            value = settings.flags.report_inches;
 801bf7c:	4b53      	ldr	r3, [pc, #332]	@ (801c0cc <get_int+0x2ac>)
 801bf7e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801bf82:	f000 0001 	and.w	r0, r0, #1
            break;
 801bf86:	4770      	bx	lr
            value = settings.control_invert.mask & (hal.signals_cap.mask & ~limits_override.mask);
 801bf88:	4b50      	ldr	r3, [pc, #320]	@ (801c0cc <get_int+0x2ac>)
 801bf8a:	f8b3 006c 	ldrh.w	r0, [r3, #108]	@ 0x6c
 801bf8e:	4b50      	ldr	r3, [pc, #320]	@ (801c0d0 <get_int+0x2b0>)
 801bf90:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801bf94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801bf98:	4018      	ands	r0, r3
            break;
 801bf9a:	4770      	bx	lr
            value = settings.spindle.invert.mask;
 801bf9c:	4b4b      	ldr	r3, [pc, #300]	@ (801c0cc <get_int+0x2ac>)
 801bf9e:	f893 00e6 	ldrb.w	r0, [r3, #230]	@ 0xe6
            break;
 801bfa2:	4770      	bx	lr
            value = settings.control_disable_pullup.mask;
 801bfa4:	4b49      	ldr	r3, [pc, #292]	@ (801c0cc <get_int+0x2ac>)
 801bfa6:	f8b3 006e 	ldrh.w	r0, [r3, #110]	@ 0x6e
            break;
 801bfaa:	4770      	bx	lr
            value = settings.probe.disable_probe_pullup;
 801bfac:	4b47      	ldr	r3, [pc, #284]	@ (801c0cc <get_int+0x2ac>)
 801bfae:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801bfb2:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801bfb6:	4770      	bx	lr
            value = settings.limits.flags.soft_enabled;
 801bfb8:	4b44      	ldr	r3, [pc, #272]	@ (801c0cc <get_int+0x2ac>)
 801bfba:	f893 0124 	ldrb.w	r0, [r3, #292]	@ 0x124
 801bfbe:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801bfc2:	4770      	bx	lr
            value = ((settings.limits.flags.hard_enabled & bit(0)) ? bit(0) |
 801bfc4:	4b41      	ldr	r3, [pc, #260]	@ (801c0cc <get_int+0x2ac>)
 801bfc6:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801bfca:	f013 0f01 	tst.w	r3, #1
 801bfce:	d07a      	beq.n	801c0c6 <get_int+0x2a6>
                     (settings.limits.flags.check_at_init ? bit(1) : 0) |
 801bfd0:	0858      	lsrs	r0, r3, #1
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801bfd2:	08db      	lsrs	r3, r3, #3
 801bfd4:	f000 0002 	and.w	r0, r0, #2
 801bfd8:	f003 0304 	and.w	r3, r3, #4
 801bfdc:	4318      	orrs	r0, r3
 801bfde:	f040 0001 	orr.w	r0, r0, #1
 801bfe2:	4770      	bx	lr
            value = settings.limits.flags.jog_soft_limited;
 801bfe4:	4b39      	ldr	r3, [pc, #228]	@ (801c0cc <get_int+0x2ac>)
 801bfe6:	f893 0124 	ldrb.w	r0, [r3, #292]	@ 0x124
 801bfea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801bfee:	4770      	bx	lr
            homing.value = settings.homing.flags.value & 0b1111;
 801bff0:	4a36      	ldr	r2, [pc, #216]	@ (801c0cc <get_int+0x2ac>)
 801bff2:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801bff6:	f003 000f 	and.w	r0, r3, #15
            homing.two_switches = settings.limits.flags.two_switches;
 801bffa:	f892 2124 	ldrb.w	r2, [r2, #292]	@ 0x124
 801bffe:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801c002:	f362 1004 	bfi	r0, r2, #4, #1
            homing.manual = settings.homing.flags.manual;
 801c006:	f3c3 1200 	ubfx	r2, r3, #4, #1
 801c00a:	f362 1045 	bfi	r0, r2, #5, #1
            homing.override_locks = settings.homing.flags.override_locks;
 801c00e:	f3c3 1240 	ubfx	r2, r3, #5, #1
 801c012:	f362 1086 	bfi	r0, r2, #6, #1
            homing.keep_on_reset = settings.homing.flags.keep_on_reset;
 801c016:	f3c3 1280 	ubfx	r2, r3, #6, #1
 801c01a:	f362 10c7 	bfi	r0, r2, #7, #1
            homing.use_limit_switches = settings.homing.flags.use_limit_switches;
 801c01e:	09db      	lsrs	r3, r3, #7
 801c020:	f363 2008 	bfi	r0, r3, #8, #1
            value = homing.value;
 801c024:	b280      	uxth	r0, r0
            break;
 801c026:	4770      	bx	lr
            value = settings.steppers.deenergize.mask;
 801c028:	4b28      	ldr	r3, [pc, #160]	@ (801c0cc <get_int+0x2ac>)
 801c02a:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
            break;
 801c02e:	4770      	bx	lr
            value = settings.flags.legacy_rt_commands;
 801c030:	4b26      	ldr	r3, [pc, #152]	@ (801c0cc <get_int+0x2ac>)
 801c032:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c036:	f3c0 1080 	ubfx	r0, r0, #6, #1
            break;
 801c03a:	4770      	bx	lr
            value = settings.parking.flags.value;
 801c03c:	4b23      	ldr	r3, [pc, #140]	@ (801c0cc <get_int+0x2ac>)
 801c03e:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
            break;
 801c042:	4770      	bx	lr
            value = settings.homing.cycle[id - Setting_HomingCycle_1].mask;
 801c044:	382c      	subs	r0, #44	@ 0x2c
 801c046:	4b21      	ldr	r3, [pc, #132]	@ (801c0cc <get_int+0x2ac>)
 801c048:	4403      	add	r3, r0
 801c04a:	f893 0115 	ldrb.w	r0, [r3, #277]	@ 0x115
            break;
 801c04e:	4770      	bx	lr
            value = settings.flags.restore_overrides;
 801c050:	4b1e      	ldr	r3, [pc, #120]	@ (801c0cc <get_int+0x2ac>)
 801c052:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c056:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c05a:	4770      	bx	lr
            value = settings.flags.sleep_enable;
 801c05c:	4b1b      	ldr	r3, [pc, #108]	@ (801c0cc <get_int+0x2ac>)
 801c05e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c062:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801c066:	4770      	bx	lr
            value = (settings.flags.disable_laser_during_hold ? bit(0) : 0) | (settings.flags.restore_after_feed_hold ? bit(1) : 0);
 801c068:	4b18      	ldr	r3, [pc, #96]	@ (801c0cc <get_int+0x2ac>)
 801c06a:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c06e:	0983      	lsrs	r3, r0, #6
 801c070:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801c074:	f003 0302 	and.w	r3, r3, #2
 801c078:	4318      	orrs	r0, r3
            break;
 801c07a:	4770      	bx	lr
            value = settings.flags.force_initialization_alarm;
 801c07c:	4b13      	ldr	r3, [pc, #76]	@ (801c0cc <get_int+0x2ac>)
 801c07e:	f893 00fe 	ldrb.w	r0, [r3, #254]	@ 0xfe
 801c082:	f3c0 1040 	ubfx	r0, r0, #5, #1
            break;
 801c086:	4770      	bx	lr
            value = settings.probe.allow_feed_override;
 801c088:	4b10      	ldr	r3, [pc, #64]	@ (801c0cc <get_int+0x2ac>)
 801c08a:	f893 0100 	ldrb.w	r0, [r3, #256]	@ 0x100
 801c08e:	f3c0 1000 	ubfx	r0, r0, #4, #1
            break;
 801c092:	4770      	bx	lr
            value = settings.tool_change.mode;
 801c094:	4b0d      	ldr	r3, [pc, #52]	@ (801c0cc <get_int+0x2ac>)
 801c096:	f893 002c 	ldrb.w	r0, [r3, #44]	@ 0x2c
            break;
 801c09a:	4770      	bx	lr
            value = settings.flags.g92_is_volatile;
 801c09c:	4b0b      	ldr	r3, [pc, #44]	@ (801c0cc <get_int+0x2ac>)
 801c09e:	f893 00ff 	ldrb.w	r0, [r3, #255]	@ 0xff
 801c0a2:	f3c0 0040 	ubfx	r0, r0, #1, #1
            break;
 801c0a6:	4770      	bx	lr
            value = settings.report_interval;
 801c0a8:	4b08      	ldr	r3, [pc, #32]	@ (801c0cc <get_int+0x2ac>)
 801c0aa:	8a98      	ldrh	r0, [r3, #20]
            break;
 801c0ac:	4770      	bx	lr
            value = settings.offset_lock.mask & 0b111;
 801c0ae:	4b07      	ldr	r3, [pc, #28]	@ (801c0cc <get_int+0x2ac>)
 801c0b0:	f893 0102 	ldrb.w	r0, [r3, #258]	@ 0x102
 801c0b4:	f000 0007 	and.w	r0, r0, #7
            break;
 801c0b8:	4770      	bx	lr
    switch(id) {
 801c0ba:	2000      	movs	r0, #0
 801c0bc:	4770      	bx	lr
 801c0be:	2000      	movs	r0, #0
 801c0c0:	4770      	bx	lr
            value = settings.spindle.flags.pwm_disable ? 0 : (0b001 |
 801c0c2:	2000      	movs	r0, #0
 801c0c4:	4770      	bx	lr
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801c0c6:	2000      	movs	r0, #0
        default:
            break;
    }

    return value;
}
 801c0c8:	4770      	bx	lr
 801c0ca:	bf00      	nop
 801c0cc:	20001bd8 	.word	0x20001bd8
 801c0d0:	200011c0 	.word	0x200011c0

0801c0d4 <settings_write_global>:
}


// Write global settings to persistent storage
void settings_write_global (void)
{
 801c0d4:	b510      	push	{r4, lr}
    if(override_backup.valid)
 801c0d6:	4b0d      	ldr	r3, [pc, #52]	@ (801c10c <settings_write_global+0x38>)
 801c0d8:	781b      	ldrb	r3, [r3, #0]
 801c0da:	b9a3      	cbnz	r3, 801c106 <settings_write_global+0x32>
        restore_override_backup();

    settings.flags.compatibility_level = COMPATIBILITY_LEVEL;
 801c0dc:	4b0c      	ldr	r3, [pc, #48]	@ (801c110 <settings_write_global+0x3c>)
 801c0de:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 801c0e2:	f36f 0285 	bfc	r2, #2, #4
 801c0e6:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    if(hal.nvs.type != NVS_None)
 801c0ea:	4b0a      	ldr	r3, [pc, #40]	@ (801c114 <settings_write_global+0x40>)
 801c0ec:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801c0f0:	b143      	cbz	r3, 801c104 <settings_write_global+0x30>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)&settings, sizeof(settings_t), true);
 801c0f2:	4b08      	ldr	r3, [pc, #32]	@ (801c114 <settings_write_global+0x40>)
 801c0f4:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801c0f8:	2301      	movs	r3, #1
 801c0fa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801c0fe:	4904      	ldr	r1, [pc, #16]	@ (801c110 <settings_write_global+0x3c>)
 801c100:	4618      	mov	r0, r3
 801c102:	47a0      	blx	r4
}
 801c104:	bd10      	pop	{r4, pc}
        restore_override_backup();
 801c106:	f7ff fc01 	bl	801b90c <restore_override_backup>
 801c10a:	e7e7      	b.n	801c0dc <settings_write_global+0x8>
 801c10c:	20001b60 	.word	0x20001b60
 801c110:	20001bd8 	.word	0x20001bd8
 801c114:	200011c0 	.word	0x200011c0

0801c118 <is_available>:

    nvs_buffer_sync_physical();
}

inline static bool is_available (const setting_detail_t *setting)
{
 801c118:	b508      	push	{r3, lr}
    return setting->is_available == NULL || setting->is_available(setting);
 801c11a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801c11c:	b113      	cbz	r3, 801c124 <is_available+0xc>
 801c11e:	4798      	blx	r3
 801c120:	b910      	cbnz	r0, 801c128 <is_available+0x10>
}
 801c122:	bd08      	pop	{r3, pc}
    return setting->is_available == NULL || setting->is_available(setting);
 801c124:	2001      	movs	r0, #1
 801c126:	e7fc      	b.n	801c122 <is_available+0xa>
 801c128:	2001      	movs	r0, #1
 801c12a:	e7fa      	b.n	801c122 <is_available+0xa>

0801c12c <remove_element>:
    return setting->datatype == Format_Integer || setting->datatype == Format_Int8 || setting->datatype == Format_Int16;
}

static char *remove_element (char *s, uint_fast8_t entry)
{
    while(entry && *s) {
 801c12c:	e000      	b.n	801c130 <remove_element+0x4>
        if(*s == ',')
            entry--;
        s++;
 801c12e:	3001      	adds	r0, #1
    while(entry && *s) {
 801c130:	b129      	cbz	r1, 801c13e <remove_element+0x12>
 801c132:	7803      	ldrb	r3, [r0, #0]
 801c134:	b11b      	cbz	r3, 801c13e <remove_element+0x12>
        if(*s == ',')
 801c136:	2b2c      	cmp	r3, #44	@ 0x2c
 801c138:	d1f9      	bne.n	801c12e <remove_element+0x2>
            entry--;
 801c13a:	3901      	subs	r1, #1
 801c13c:	e7f7      	b.n	801c12e <remove_element+0x2>
    }

    if(entry == 0) {
 801c13e:	b9b9      	cbnz	r1, 801c170 <remove_element+0x44>
        *s++ = 'N';
 801c140:	234e      	movs	r3, #78	@ 0x4e
 801c142:	7003      	strb	r3, [r0, #0]
        *s++ = '/';
 801c144:	232f      	movs	r3, #47	@ 0x2f
 801c146:	7043      	strb	r3, [r0, #1]
        *s++ = 'A';
 801c148:	1cc3      	adds	r3, r0, #3
 801c14a:	2241      	movs	r2, #65	@ 0x41
 801c14c:	7082      	strb	r2, [r0, #2]
        char *s2 = s;
 801c14e:	461a      	mov	r2, r3
        while(*s2 && *s2 != ',')
 801c150:	e000      	b.n	801c154 <remove_element+0x28>
            s2++;
 801c152:	3201      	adds	r2, #1
        while(*s2 && *s2 != ',')
 801c154:	7811      	ldrb	r1, [r2, #0]
 801c156:	b129      	cbz	r1, 801c164 <remove_element+0x38>
 801c158:	292c      	cmp	r1, #44	@ 0x2c
 801c15a:	d1fa      	bne.n	801c152 <remove_element+0x26>
 801c15c:	e002      	b.n	801c164 <remove_element+0x38>
        while(*s2)
            *s++ = *s2++;
 801c15e:	3201      	adds	r2, #1
 801c160:	f803 1b01 	strb.w	r1, [r3], #1
        while(*s2)
 801c164:	7811      	ldrb	r1, [r2, #0]
 801c166:	2900      	cmp	r1, #0
 801c168:	d1f9      	bne.n	801c15e <remove_element+0x32>
        *s = '\0';
 801c16a:	2200      	movs	r2, #0
 801c16c:	701a      	strb	r2, [r3, #0]
 801c16e:	4618      	mov	r0, r3
    }

    return s;
}
 801c170:	4770      	bx	lr
	...

0801c174 <set_encoder_spindle>:
{
 801c174:	b510      	push	{r4, lr}
 801c176:	460c      	mov	r4, r1
    if(spindle_get_count() < 2)
 801c178:	f001 ff30 	bl	801dfdc <spindle_get_count>
 801c17c:	2801      	cmp	r0, #1
 801c17e:	d90c      	bls.n	801c19a <set_encoder_spindle+0x26>
    else if(int_value >= spindle_get_count())
 801c180:	f001 ff2c 	bl	801dfdc <spindle_get_count>
 801c184:	42a0      	cmp	r0, r4
 801c186:	d90a      	bls.n	801c19e <set_encoder_spindle+0x2a>
    settings.offset_lock.encoder_spindle = int_value;
 801c188:	4b06      	ldr	r3, [pc, #24]	@ (801c1a4 <set_encoder_spindle+0x30>)
 801c18a:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 801c18e:	f364 02c7 	bfi	r2, r4, #3, #5
 801c192:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    return Status_OK;
 801c196:	2000      	movs	r0, #0
}
 801c198:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801c19a:	2035      	movs	r0, #53	@ 0x35
 801c19c:	e7fc      	b.n	801c198 <set_encoder_spindle+0x24>
        return Status_SettingValueOutOfRange;
 801c19e:	2034      	movs	r0, #52	@ 0x34
 801c1a0:	e7fa      	b.n	801c198 <set_encoder_spindle+0x24>
 801c1a2:	bf00      	nop
 801c1a4:	20001bd8 	.word	0x20001bd8

0801c1a8 <set_spindle_type>:
{
 801c1a8:	b510      	push	{r4, lr}
 801c1aa:	460c      	mov	r4, r1
    if(spindle_get_count() < 2)
 801c1ac:	f001 ff16 	bl	801dfdc <spindle_get_count>
 801c1b0:	2801      	cmp	r0, #1
 801c1b2:	d910      	bls.n	801c1d6 <set_spindle_type+0x2e>
    else if(int_value >= spindle_get_count())
 801c1b4:	f001 ff12 	bl	801dfdc <spindle_get_count>
 801c1b8:	42a0      	cmp	r0, r4
 801c1ba:	d90e      	bls.n	801c1da <set_spindle_type+0x32>
    settings.spindle.flags.type = int_value;
 801c1bc:	f004 001f 	and.w	r0, r4, #31
 801c1c0:	4b07      	ldr	r3, [pc, #28]	@ (801c1e0 <set_spindle_type+0x38>)
 801c1c2:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801c1c6:	f360 0286 	bfi	r2, r0, #2, #5
 801c1ca:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    spindle_select(settings.spindle.flags.type);
 801c1ce:	f001 fee5 	bl	801df9c <spindle_select>
    return Status_OK;
 801c1d2:	2000      	movs	r0, #0
}
 801c1d4:	bd10      	pop	{r4, pc}
        return Status_SettingDisabled;
 801c1d6:	2035      	movs	r0, #53	@ 0x35
 801c1d8:	e7fc      	b.n	801c1d4 <set_spindle_type+0x2c>
        return Status_SettingValueOutOfRange;
 801c1da:	2034      	movs	r0, #52	@ 0x34
 801c1dc:	e7fa      	b.n	801c1d4 <set_spindle_type+0x2c>
 801c1de:	bf00      	nop
 801c1e0:	20001bd8 	.word	0x20001bd8

0801c1e4 <set_tool_change_mode>:
{
 801c1e4:	b510      	push	{r4, lr}
    if(!hal.driver_cap.atc && hal.stream.suspend_read && int_value <= ToolChange_Ignore) {
 801c1e6:	4b0c      	ldr	r3, [pc, #48]	@ (801c218 <set_tool_change_mode+0x34>)
 801c1e8:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c1ec:	f010 0402 	ands.w	r4, r0, #2
 801c1f0:	d10b      	bne.n	801c20a <set_tool_change_mode+0x26>
 801c1f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801c1f6:	b153      	cbz	r3, 801c20e <set_tool_change_mode+0x2a>
 801c1f8:	2904      	cmp	r1, #4
 801c1fa:	d80a      	bhi.n	801c212 <set_tool_change_mode+0x2e>
        settings.tool_change.mode = (toolchange_mode_t)int_value;
 801c1fc:	4b07      	ldr	r3, [pc, #28]	@ (801c21c <set_tool_change_mode+0x38>)
 801c1fe:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
        tc_init();
 801c202:	f005 ffd1 	bl	80221a8 <tc_init>
}
 801c206:	4620      	mov	r0, r4
 801c208:	bd10      	pop	{r4, pc}
        return Status_InvalidStatement;
 801c20a:	2403      	movs	r4, #3
 801c20c:	e7fb      	b.n	801c206 <set_tool_change_mode+0x22>
 801c20e:	2403      	movs	r4, #3
 801c210:	e7f9      	b.n	801c206 <set_tool_change_mode+0x22>
 801c212:	2403      	movs	r4, #3
 801c214:	e7f7      	b.n	801c206 <set_tool_change_mode+0x22>
 801c216:	bf00      	nop
 801c218:	200011c0 	.word	0x200011c0
 801c21c:	20001bd8 	.word	0x20001bd8

0801c220 <set_homing_cycle>:
{
 801c220:	b508      	push	{r3, lr}
    settings.homing.cycle[id - Setting_HomingCycle_1].mask = int_value;
 801c222:	382c      	subs	r0, #44	@ 0x2c
 801c224:	4b03      	ldr	r3, [pc, #12]	@ (801c234 <set_homing_cycle+0x14>)
 801c226:	4403      	add	r3, r0
 801c228:	f883 1115 	strb.w	r1, [r3, #277]	@ 0x115
    limits_set_homing_axes();
 801c22c:	f7f7 f8dc 	bl	80133e8 <limits_set_homing_axes>
}
 801c230:	2000      	movs	r0, #0
 801c232:	bd08      	pop	{r3, pc}
 801c234:	20001bd8 	.word	0x20001bd8

0801c238 <set_mode>:
{
 801c238:	b510      	push	{r4, lr}
    switch((machine_mode_t)int_value) {
 801c23a:	b2cc      	uxtb	r4, r1
 801c23c:	2c01      	cmp	r4, #1
 801c23e:	d00e      	beq.n	801c25e <set_mode+0x26>
 801c240:	2c02      	cmp	r4, #2
 801c242:	d005      	beq.n	801c250 <set_mode+0x18>
 801c244:	b10c      	cbz	r4, 801c24a <set_mode+0x12>
 801c246:	2003      	movs	r0, #3
 801c248:	e008      	b.n	801c25c <set_mode+0x24>
           gc_state.modal.diameter_mode = false;
 801c24a:	4b0b      	ldr	r3, [pc, #44]	@ (801c278 <set_mode+0x40>)
 801c24c:	2200      	movs	r2, #0
 801c24e:	715a      	strb	r2, [r3, #5]
    machine_mode_changed = true;
 801c250:	4b0a      	ldr	r3, [pc, #40]	@ (801c27c <set_mode+0x44>)
 801c252:	2201      	movs	r2, #1
 801c254:	701a      	strb	r2, [r3, #0]
    settings.mode = (machine_mode_t)int_value;
 801c256:	4b0a      	ldr	r3, [pc, #40]	@ (801c280 <set_mode+0x48>)
 801c258:	761c      	strb	r4, [r3, #24]
    return Status_OK;
 801c25a:	2000      	movs	r0, #0
}
 801c25c:	bd10      	pop	{r4, pc}
            if(!spindle_get_caps(false).laser)
 801c25e:	2000      	movs	r0, #0
 801c260:	f001 fdce 	bl	801de00 <spindle_get_caps>
 801c264:	f010 0f08 	tst.w	r0, #8
 801c268:	d003      	beq.n	801c272 <set_mode+0x3a>
            gc_state.modal.diameter_mode = false;
 801c26a:	4b03      	ldr	r3, [pc, #12]	@ (801c278 <set_mode+0x40>)
 801c26c:	2200      	movs	r2, #0
 801c26e:	715a      	strb	r2, [r3, #5]
            break;
 801c270:	e7ee      	b.n	801c250 <set_mode+0x18>
                return Status_SettingDisabledLaser;
 801c272:	2011      	movs	r0, #17
 801c274:	e7f2      	b.n	801c25c <set_mode+0x24>
 801c276:	bf00      	nop
 801c278:	20000ef8 	.word	0x20000ef8
 801c27c:	20001bd4 	.word	0x20001bd4
 801c280:	20001bd8 	.word	0x20001bd8

0801c284 <set_spindle_invert>:
{
 801c284:	b508      	push	{r3, lr}
    settings.spindle.invert.mask = int_value;
 801c286:	b2c9      	uxtb	r1, r1
 801c288:	4b0b      	ldr	r3, [pc, #44]	@ (801c2b8 <set_spindle_invert+0x34>)
 801c28a:	f883 10e6 	strb.w	r1, [r3, #230]	@ 0xe6
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 801c28e:	f011 0004 	ands.w	r0, r1, #4
 801c292:	d100      	bne.n	801c296 <set_spindle_invert+0x12>
}
 801c294:	bd08      	pop	{r3, pc}
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 801c296:	2000      	movs	r0, #0
 801c298:	f001 fdb2 	bl	801de00 <spindle_get_caps>
 801c29c:	f010 0f10 	tst.w	r0, #16
 801c2a0:	d001      	beq.n	801c2a6 <set_spindle_invert+0x22>
    return Status_OK;
 801c2a2:	2000      	movs	r0, #0
 801c2a4:	e7f6      	b.n	801c294 <set_spindle_invert+0x10>
        settings.spindle.invert.pwm = Off;
 801c2a6:	4b04      	ldr	r3, [pc, #16]	@ (801c2b8 <set_spindle_invert+0x34>)
 801c2a8:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 801c2ac:	f36f 0282 	bfc	r2, #2, #1
 801c2b0:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
        return Status_SettingDisabled;
 801c2b4:	2035      	movs	r0, #53	@ 0x35
 801c2b6:	e7ed      	b.n	801c294 <set_spindle_invert+0x10>
 801c2b8:	20001bd8 	.word	0x20001bd8

0801c2bc <is_setting_available>:
    if(setting) switch(normalize_id(setting->id)) {
 801c2bc:	2800      	cmp	r0, #0
 801c2be:	f000 81b4 	beq.w	801c62a <is_setting_available+0x36e>
{
 801c2c2:	b508      	push	{r3, lr}
    if(setting) switch(normalize_id(setting->id)) {
 801c2c4:	8800      	ldrh	r0, [r0, #0]
 801c2c6:	f7ff fd55 	bl	801bd74 <normalize_id>
 801c2ca:	f5b0 7fc6 	cmp.w	r0, #396	@ 0x18c
 801c2ce:	f080 809e 	bcs.w	801c40e <is_setting_available+0x152>
 801c2d2:	f5b0 7faa 	cmp.w	r0, #340	@ 0x154
 801c2d6:	d247      	bcs.n	801c368 <is_setting_available+0xac>
 801c2d8:	2841      	cmp	r0, #65	@ 0x41
 801c2da:	f200 8086 	bhi.w	801c3ea <is_setting_available+0x12e>
 801c2de:	2806      	cmp	r0, #6
 801c2e0:	d340      	bcc.n	801c364 <is_setting_available+0xa8>
 801c2e2:	3806      	subs	r0, #6
 801c2e4:	283b      	cmp	r0, #59	@ 0x3b
 801c2e6:	d87e      	bhi.n	801c3e6 <is_setting_available+0x12a>
 801c2e8:	e8df f010 	tbh	[pc, r0, lsl #1]
 801c2ec:	007d00e8 	.word	0x007d00e8
 801c2f0:	00ef00da 	.word	0x00ef00da
 801c2f4:	007d007d 	.word	0x007d007d
 801c2f8:	007d007d 	.word	0x007d007d
 801c2fc:	007d007d 	.word	0x007d007d
 801c300:	007d0101 	.word	0x007d0101
 801c304:	00e8007d 	.word	0x00e8007d
 801c308:	007d007d 	.word	0x007d007d
 801c30c:	007d007d 	.word	0x007d007d
 801c310:	007d007d 	.word	0x007d007d
 801c314:	007d007d 	.word	0x007d007d
 801c318:	007d007d 	.word	0x007d007d
 801c31c:	01190119 	.word	0x01190119
 801c320:	0107007d 	.word	0x0107007d
 801c324:	01070107 	.word	0x01070107
 801c328:	007d0107 	.word	0x007d0107
 801c32c:	007d0114 	.word	0x007d0114
 801c330:	0123007d 	.word	0x0123007d
 801c334:	007d0123 	.word	0x007d0123
 801c338:	007d007d 	.word	0x007d007d
 801c33c:	007d007d 	.word	0x007d007d
 801c340:	007d007d 	.word	0x007d007d
 801c344:	007d007d 	.word	0x007d007d
 801c348:	007d007d 	.word	0x007d007d
 801c34c:	007d007d 	.word	0x007d007d
 801c350:	01230123 	.word	0x01230123
 801c354:	01230123 	.word	0x01230123
 801c358:	01230123 	.word	0x01230123
 801c35c:	007d01a3 	.word	0x007d01a3
 801c360:	00e8007d 	.word	0x00e8007d
 801c364:	2000      	movs	r0, #0
 801c366:	e163      	b.n	801c630 <is_setting_available+0x374>
 801c368:	f5a0 70aa 	sub.w	r0, r0, #340	@ 0x154
 801c36c:	2837      	cmp	r0, #55	@ 0x37
 801c36e:	f200 815e 	bhi.w	801c62e <is_setting_available+0x372>
 801c372:	e8df f010 	tbh	[pc, r0, lsl #1]
 801c376:	010b      	.short	0x010b
 801c378:	015c015c 	.word	0x015c015c
 801c37c:	015c015c 	.word	0x015c015c
 801c380:	015c015c 	.word	0x015c015c
 801c384:	003c003c 	.word	0x003c003c
 801c388:	015c003c 	.word	0x015c003c
 801c38c:	015c015c 	.word	0x015c015c
 801c390:	015c015c 	.word	0x015c015c
 801c394:	015c015c 	.word	0x015c015c
 801c398:	015c015c 	.word	0x015c015c
 801c39c:	015c015c 	.word	0x015c015c
 801c3a0:	015c015c 	.word	0x015c015c
 801c3a4:	015c015c 	.word	0x015c015c
 801c3a8:	015c015c 	.word	0x015c015c
 801c3ac:	015c015c 	.word	0x015c015c
 801c3b0:	015c015c 	.word	0x015c015c
 801c3b4:	015c015c 	.word	0x015c015c
 801c3b8:	015c015c 	.word	0x015c015c
 801c3bc:	015c015c 	.word	0x015c015c
 801c3c0:	015c015c 	.word	0x015c015c
 801c3c4:	015c015c 	.word	0x015c015c
 801c3c8:	015c015c 	.word	0x015c015c
 801c3cc:	015c015c 	.word	0x015c015c
 801c3d0:	015c015c 	.word	0x015c015c
 801c3d4:	015c015c 	.word	0x015c015c
 801c3d8:	015c015c 	.word	0x015c015c
 801c3dc:	00e4015c 	.word	0x00e4015c
 801c3e0:	011c00fb 	.word	0x011c00fb
 801c3e4:	00c8      	.short	0x00c8
 801c3e6:	2000      	movs	r0, #0
 801c3e8:	e122      	b.n	801c630 <is_setting_available+0x374>
 801c3ea:	28aa      	cmp	r0, #170	@ 0xaa
 801c3ec:	d10d      	bne.n	801c40a <is_setting_available+0x14e>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801c3ee:	4b92      	ldr	r3, [pc, #584]	@ (801c638 <is_setting_available+0x37c>)
 801c3f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	f000 8098 	beq.w	801c52a <is_setting_available+0x26e>
 801c3fa:	2001      	movs	r0, #1
 801c3fc:	4798      	blx	r3
 801c3fe:	b2c0      	uxtb	r0, r0
 801c400:	2800      	cmp	r0, #0
 801c402:	f000 8094 	beq.w	801c52e <is_setting_available+0x272>
 801c406:	2001      	movs	r0, #1
 801c408:	e112      	b.n	801c630 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c40a:	2000      	movs	r0, #0
 801c40c:	e110      	b.n	801c630 <is_setting_available+0x374>
 801c40e:	f240 2307 	movw	r3, #519	@ 0x207
 801c412:	4298      	cmp	r0, r3
 801c414:	f000 80e9 	beq.w	801c5ea <is_setting_available+0x32e>
 801c418:	f5b0 7f02 	cmp.w	r0, #520	@ 0x208
 801c41c:	d317      	bcc.n	801c44e <is_setting_available+0x192>
 801c41e:	f240 239f 	movw	r3, #671	@ 0x29f
 801c422:	4298      	cmp	r0, r3
 801c424:	f000 80f0 	beq.w	801c608 <is_setting_available+0x34c>
 801c428:	f240 23a1 	movw	r3, #673	@ 0x2a1
 801c42c:	4298      	cmp	r0, r3
 801c42e:	d128      	bne.n	801c482 <is_setting_available+0x1c6>
            available = !hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801c430:	4b81      	ldr	r3, [pc, #516]	@ (801c638 <is_setting_available+0x37c>)
 801c432:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c436:	f013 0f08 	tst.w	r3, #8
 801c43a:	f040 80f2 	bne.w	801c622 <is_setting_available+0x366>
 801c43e:	4b7e      	ldr	r3, [pc, #504]	@ (801c638 <is_setting_available+0x37c>)
 801c440:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801c444:	2b00      	cmp	r3, #0
 801c446:	f040 80ee 	bne.w	801c626 <is_setting_available+0x36a>
 801c44a:	2000      	movs	r0, #0
 801c44c:	e0f0      	b.n	801c630 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c44e:	f5b0 7ff1 	cmp.w	r0, #482	@ 0x1e2
 801c452:	f000 80c3 	beq.w	801c5dc <is_setting_available+0x320>
 801c456:	f5b0 7ff2 	cmp.w	r0, #484	@ 0x1e4
 801c45a:	d105      	bne.n	801c468 <is_setting_available+0x1ac>
            available = hal.signals_cap.e_stop;
 801c45c:	4b76      	ldr	r3, [pc, #472]	@ (801c638 <is_setting_available+0x37c>)
 801c45e:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 801c462:	f3c0 1080 	ubfx	r0, r0, #6, #1
            break;
 801c466:	e0e3      	b.n	801c630 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c468:	f240 13e1 	movw	r3, #481	@ 0x1e1
 801c46c:	4298      	cmp	r0, r3
 801c46e:	d106      	bne.n	801c47e <is_setting_available+0x1c2>
            available = hal.get_elapsed_ticks != NULL;
 801c470:	4b71      	ldr	r3, [pc, #452]	@ (801c638 <is_setting_available+0x37c>)
 801c472:	f8d3 01a8 	ldr.w	r0, [r3, #424]	@ 0x1a8
 801c476:	3800      	subs	r0, #0
 801c478:	bf18      	it	ne
 801c47a:	2001      	movne	r0, #1
            break;
 801c47c:	e0d8      	b.n	801c630 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c47e:	2000      	movs	r0, #0
 801c480:	e0d6      	b.n	801c630 <is_setting_available+0x374>
 801c482:	f240 238a 	movw	r3, #650	@ 0x28a
 801c486:	4298      	cmp	r0, r3
 801c488:	d108      	bne.n	801c49c <is_setting_available+0x1e0>
            available = hal.driver_cap.sd_card || hal.driver_cap.littlefs;
 801c48a:	4b6b      	ldr	r3, [pc, #428]	@ (801c638 <is_setting_available+0x37c>)
 801c48c:	f893 31d9 	ldrb.w	r3, [r3, #473]	@ 0x1d9
 801c490:	f013 0f06 	tst.w	r3, #6
 801c494:	bf14      	ite	ne
 801c496:	2001      	movne	r0, #1
 801c498:	2000      	moveq	r0, #0
            break;
 801c49a:	e0c9      	b.n	801c630 <is_setting_available+0x374>
    if(setting) switch(normalize_id(setting->id)) {
 801c49c:	2000      	movs	r0, #0
 801c49e:	e0c7      	b.n	801c630 <is_setting_available+0x374>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(false).mask != 0;
 801c4a0:	4b65      	ldr	r3, [pc, #404]	@ (801c638 <is_setting_available+0x37c>)
 801c4a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c4a6:	b12b      	cbz	r3, 801c4b4 <is_setting_available+0x1f8>
 801c4a8:	2000      	movs	r0, #0
 801c4aa:	4798      	blx	r3
 801c4ac:	b2c0      	uxtb	r0, r0
 801c4ae:	b118      	cbz	r0, 801c4b8 <is_setting_available+0x1fc>
 801c4b0:	2001      	movs	r0, #1
 801c4b2:	e0bd      	b.n	801c630 <is_setting_available+0x374>
 801c4b4:	2000      	movs	r0, #0
 801c4b6:	e0bb      	b.n	801c630 <is_setting_available+0x374>
 801c4b8:	2000      	movs	r0, #0
            break;
 801c4ba:	e0b9      	b.n	801c630 <is_setting_available+0x374>
            available = hal.probe.get_state != NULL;
 801c4bc:	4b5e      	ldr	r3, [pc, #376]	@ (801c638 <is_setting_available+0x37c>)
 801c4be:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
 801c4c2:	3800      	subs	r0, #0
 801c4c4:	bf18      	it	ne
 801c4c6:	2001      	movne	r0, #1
            break;
 801c4c8:	e0b2      	b.n	801c630 <is_setting_available+0x374>
            available = hal.driver_cap.pwm_spindle && spindle_get_caps(false).laser;
 801c4ca:	4b5b      	ldr	r3, [pc, #364]	@ (801c638 <is_setting_available+0x37c>)
 801c4cc:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 801c4d0:	f013 0f10 	tst.w	r3, #16
 801c4d4:	d101      	bne.n	801c4da <is_setting_available+0x21e>
 801c4d6:	2000      	movs	r0, #0
 801c4d8:	e0aa      	b.n	801c630 <is_setting_available+0x374>
 801c4da:	2000      	movs	r0, #0
 801c4dc:	f001 fc90 	bl	801de00 <spindle_get_caps>
 801c4e0:	f010 0f08 	tst.w	r0, #8
 801c4e4:	d001      	beq.n	801c4ea <is_setting_available+0x22e>
 801c4e6:	2001      	movs	r0, #1
 801c4e8:	e0a2      	b.n	801c630 <is_setting_available+0x374>
 801c4ea:	2000      	movs	r0, #0
            break;
 801c4ec:	e0a0      	b.n	801c630 <is_setting_available+0x374>
            available = spindle_get_caps(false).gpio_controlled;
 801c4ee:	2000      	movs	r0, #0
 801c4f0:	f001 fc86 	bl	801de00 <spindle_get_caps>
 801c4f4:	f3c0 2000 	ubfx	r0, r0, #8, #1
            break;
 801c4f8:	e09a      	b.n	801c630 <is_setting_available+0x374>
            available = hal.driver_cap.pwm_spindle;
 801c4fa:	4b4f      	ldr	r3, [pc, #316]	@ (801c638 <is_setting_available+0x37c>)
 801c4fc:	f893 01da 	ldrb.w	r0, [r3, #474]	@ 0x1da
 801c500:	f3c0 1000 	ubfx	r0, r0, #4, #1
            break;
 801c504:	e094      	b.n	801c630 <is_setting_available+0x374>
            available = spindle_get_count() > 1;
 801c506:	f001 fd69 	bl	801dfdc <spindle_get_count>
 801c50a:	2801      	cmp	r0, #1
 801c50c:	bf94      	ite	ls
 801c50e:	2000      	movls	r0, #0
 801c510:	2001      	movhi	r0, #1
            break;
 801c512:	e08d      	b.n	801c630 <is_setting_available+0x374>
            available = hal.driver_cap.spindle_encoder;
 801c514:	4b48      	ldr	r3, [pc, #288]	@ (801c638 <is_setting_available+0x37c>)
 801c516:	f893 01d8 	ldrb.w	r0, [r3, #472]	@ 0x1d8
 801c51a:	09c0      	lsrs	r0, r0, #7
            break;
 801c51c:	e088      	b.n	801c630 <is_setting_available+0x374>
            available = spindle_get_caps(false).variable;
 801c51e:	2000      	movs	r0, #0
 801c520:	f001 fc6e 	bl	801de00 <spindle_get_caps>
 801c524:	f000 0001 	and.w	r0, r0, #1
            break;
 801c528:	e082      	b.n	801c630 <is_setting_available+0x374>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801c52a:	2000      	movs	r0, #0
 801c52c:	e080      	b.n	801c630 <is_setting_available+0x374>
 801c52e:	2000      	movs	r0, #0
            break;
 801c530:	e07e      	b.n	801c630 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar;
 801c532:	4b41      	ldr	r3, [pc, #260]	@ (801c638 <is_setting_available+0x37c>)
 801c534:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 801c538:	f3c0 00c0 	ubfx	r0, r0, #3, #1
            break;
 801c53c:	e078      	b.n	801c630 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar && spindle_get_count() && !spindle_get_caps(true).at_speed;
 801c53e:	4b3e      	ldr	r3, [pc, #248]	@ (801c638 <is_setting_available+0x37c>)
 801c540:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c544:	f013 0f08 	tst.w	r3, #8
 801c548:	d101      	bne.n	801c54e <is_setting_available+0x292>
 801c54a:	2000      	movs	r0, #0
 801c54c:	e070      	b.n	801c630 <is_setting_available+0x374>
 801c54e:	f001 fd45 	bl	801dfdc <spindle_get_count>
 801c552:	b908      	cbnz	r0, 801c558 <is_setting_available+0x29c>
 801c554:	2000      	movs	r0, #0
 801c556:	e06b      	b.n	801c630 <is_setting_available+0x374>
 801c558:	2001      	movs	r0, #1
 801c55a:	f001 fc51 	bl	801de00 <spindle_get_caps>
 801c55e:	f010 0f04 	tst.w	r0, #4
 801c562:	d101      	bne.n	801c568 <is_setting_available+0x2ac>
 801c564:	2001      	movs	r0, #1
 801c566:	e063      	b.n	801c630 <is_setting_available+0x374>
 801c568:	2000      	movs	r0, #0
            break;
 801c56a:	e061      	b.n	801c630 <is_setting_available+0x374>
            available = hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801c56c:	4b32      	ldr	r3, [pc, #200]	@ (801c638 <is_setting_available+0x37c>)
 801c56e:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c572:	f013 0f08 	tst.w	r3, #8
 801c576:	d005      	beq.n	801c584 <is_setting_available+0x2c8>
 801c578:	4b2f      	ldr	r3, [pc, #188]	@ (801c638 <is_setting_available+0x37c>)
 801c57a:	f893 31e4 	ldrb.w	r3, [r3, #484]	@ 0x1e4
 801c57e:	b91b      	cbnz	r3, 801c588 <is_setting_available+0x2cc>
 801c580:	2000      	movs	r0, #0
 801c582:	e055      	b.n	801c630 <is_setting_available+0x374>
 801c584:	2000      	movs	r0, #0
 801c586:	e053      	b.n	801c630 <is_setting_available+0x374>
 801c588:	2001      	movs	r0, #1
            break;
 801c58a:	e051      	b.n	801c630 <is_setting_available+0x374>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_encoder;
 801c58c:	2001      	movs	r0, #1
 801c58e:	f001 fc37 	bl	801de00 <spindle_get_caps>
 801c592:	f010 0f04 	tst.w	r0, #4
 801c596:	d108      	bne.n	801c5aa <is_setting_available+0x2ee>
 801c598:	4b27      	ldr	r3, [pc, #156]	@ (801c638 <is_setting_available+0x37c>)
 801c59a:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	db01      	blt.n	801c5a6 <is_setting_available+0x2ea>
 801c5a2:	2000      	movs	r0, #0
            break;
 801c5a4:	e044      	b.n	801c630 <is_setting_available+0x374>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_encoder;
 801c5a6:	2001      	movs	r0, #1
 801c5a8:	e042      	b.n	801c630 <is_setting_available+0x374>
 801c5aa:	2001      	movs	r0, #1
 801c5ac:	e040      	b.n	801c630 <is_setting_available+0x374>
            available = !hal.signals_cap.safety_door_ajar && spindle_get_count() && !spindle_get_caps(true).at_speed;
 801c5ae:	4b22      	ldr	r3, [pc, #136]	@ (801c638 <is_setting_available+0x37c>)
 801c5b0:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 801c5b4:	f013 0f08 	tst.w	r3, #8
 801c5b8:	d001      	beq.n	801c5be <is_setting_available+0x302>
 801c5ba:	2000      	movs	r0, #0
 801c5bc:	e038      	b.n	801c630 <is_setting_available+0x374>
 801c5be:	f001 fd0d 	bl	801dfdc <spindle_get_count>
 801c5c2:	b908      	cbnz	r0, 801c5c8 <is_setting_available+0x30c>
 801c5c4:	2000      	movs	r0, #0
 801c5c6:	e033      	b.n	801c630 <is_setting_available+0x374>
 801c5c8:	2001      	movs	r0, #1
 801c5ca:	f001 fc19 	bl	801de00 <spindle_get_caps>
 801c5ce:	f010 0f04 	tst.w	r0, #4
 801c5d2:	d101      	bne.n	801c5d8 <is_setting_available+0x31c>
 801c5d4:	2001      	movs	r0, #1
 801c5d6:	e02b      	b.n	801c630 <is_setting_available+0x374>
 801c5d8:	2000      	movs	r0, #0
            break;
 801c5da:	e029      	b.n	801c630 <is_setting_available+0x374>
            available = hal.rtc.set_datetime != NULL;
 801c5dc:	4b16      	ldr	r3, [pc, #88]	@ (801c638 <is_setting_available+0x37c>)
 801c5de:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
 801c5e2:	3800      	subs	r0, #0
 801c5e4:	bf18      	it	ne
 801c5e6:	2001      	movne	r0, #1
            break;
 801c5e8:	e022      	b.n	801c630 <is_setting_available+0x374>
            available = hal.driver_cap.spindle_encoder && spindle_get_count() > 1;
 801c5ea:	4b13      	ldr	r3, [pc, #76]	@ (801c638 <is_setting_available+0x37c>)
 801c5ec:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	db01      	blt.n	801c5f8 <is_setting_available+0x33c>
 801c5f4:	2000      	movs	r0, #0
 801c5f6:	e01b      	b.n	801c630 <is_setting_available+0x374>
 801c5f8:	f001 fcf0 	bl	801dfdc <spindle_get_count>
 801c5fc:	2801      	cmp	r0, #1
 801c5fe:	d901      	bls.n	801c604 <is_setting_available+0x348>
 801c600:	2001      	movs	r0, #1
 801c602:	e015      	b.n	801c630 <is_setting_available+0x374>
 801c604:	2000      	movs	r0, #0
            break;
 801c606:	e013      	b.n	801c630 <is_setting_available+0x374>
            available = hal.homing.get_state != NULL && hal.home_cap.a.mask != 0;
 801c608:	4b0b      	ldr	r3, [pc, #44]	@ (801c638 <is_setting_available+0x37c>)
 801c60a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c60c:	b12b      	cbz	r3, 801c61a <is_setting_available+0x35e>
 801c60e:	4b0a      	ldr	r3, [pc, #40]	@ (801c638 <is_setting_available+0x37c>)
 801c610:	f893 31e2 	ldrb.w	r3, [r3, #482]	@ 0x1e2
 801c614:	b91b      	cbnz	r3, 801c61e <is_setting_available+0x362>
 801c616:	2000      	movs	r0, #0
 801c618:	e00a      	b.n	801c630 <is_setting_available+0x374>
 801c61a:	2000      	movs	r0, #0
 801c61c:	e008      	b.n	801c630 <is_setting_available+0x374>
 801c61e:	2001      	movs	r0, #1
            break;
 801c620:	e006      	b.n	801c630 <is_setting_available+0x374>
            available = !hal.signals_cap.safety_door_ajar && hal.coolant_cap.mask;
 801c622:	2000      	movs	r0, #0
 801c624:	e004      	b.n	801c630 <is_setting_available+0x374>
 801c626:	2001      	movs	r0, #1
            break;
 801c628:	e002      	b.n	801c630 <is_setting_available+0x374>
    bool available = false;
 801c62a:	2000      	movs	r0, #0
}
 801c62c:	4770      	bx	lr
    if(setting) switch(normalize_id(setting->id)) {
 801c62e:	2000      	movs	r0, #0
}
 801c630:	bd08      	pop	{r3, pc}
            available = SLEEP_DURATION > 0.0f;
 801c632:	2001      	movs	r0, #1
 801c634:	e7fc      	b.n	801c630 <is_setting_available+0x374>
 801c636:	bf00      	nop
 801c638:	200011c0 	.word	0x200011c0

0801c63c <set_probe_disable_pullup>:
{
 801c63c:	b508      	push	{r3, lr}
    if(!hal.probe.configure)
 801c63e:	4b0a      	ldr	r3, [pc, #40]	@ (801c668 <set_probe_disable_pullup+0x2c>)
 801c640:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801c644:	b16b      	cbz	r3, 801c662 <set_probe_disable_pullup+0x26>
    settings.probe.disable_probe_pullup = int_value != 0;
 801c646:	3900      	subs	r1, #0
 801c648:	bf18      	it	ne
 801c64a:	2101      	movne	r1, #1
 801c64c:	4b07      	ldr	r3, [pc, #28]	@ (801c66c <set_probe_disable_pullup+0x30>)
 801c64e:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801c652:	f361 0241 	bfi	r2, r1, #1, #1
 801c656:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ioport_setting_changed(id);
 801c65a:	f7f5 fd2b 	bl	80120b4 <ioport_setting_changed>
    return Status_OK;
 801c65e:	2000      	movs	r0, #0
}
 801c660:	bd08      	pop	{r3, pc}
        return Status_SettingDisabled;
 801c662:	2035      	movs	r0, #53	@ 0x35
 801c664:	e7fc      	b.n	801c660 <set_probe_disable_pullup+0x24>
 801c666:	bf00      	nop
 801c668:	200011c0 	.word	0x200011c0
 801c66c:	20001bd8 	.word	0x20001bd8

0801c670 <set_control_disable_pullup>:
{
 801c670:	b508      	push	{r3, lr}
    settings.control_disable_pullup.mask = int_value & (hal.signals_cap.mask & ~limits_override.mask);
 801c672:	4b06      	ldr	r3, [pc, #24]	@ (801c68c <set_control_disable_pullup+0x1c>)
 801c674:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801c678:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801c67c:	400b      	ands	r3, r1
 801c67e:	4a04      	ldr	r2, [pc, #16]	@ (801c690 <set_control_disable_pullup+0x20>)
 801c680:	f8a2 306e 	strh.w	r3, [r2, #110]	@ 0x6e
    ioport_setting_changed(id);
 801c684:	f7f5 fd16 	bl	80120b4 <ioport_setting_changed>
}
 801c688:	2000      	movs	r0, #0
 801c68a:	bd08      	pop	{r3, pc}
 801c68c:	200011c0 	.word	0x200011c0
 801c690:	20001bd8 	.word	0x20001bd8

0801c694 <set_probe_invert>:
{
 801c694:	b508      	push	{r3, lr}
    if(!hal.probe.configure)
 801c696:	4b0d      	ldr	r3, [pc, #52]	@ (801c6cc <set_probe_invert+0x38>)
 801c698:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801c69c:	b19b      	cbz	r3, 801c6c6 <set_probe_invert+0x32>
    settings.probe.invert_probe_pin = int_value != 0;
 801c69e:	3900      	subs	r1, #0
 801c6a0:	bf18      	it	ne
 801c6a2:	2101      	movne	r1, #1
 801c6a4:	4b0a      	ldr	r3, [pc, #40]	@ (801c6d0 <set_probe_invert+0x3c>)
 801c6a6:	f893 2100 	ldrb.w	r2, [r3, #256]	@ 0x100
 801c6aa:	f361 0200 	bfi	r2, r1, #0, #1
 801c6ae:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ioport_setting_changed(id);
 801c6b2:	f7f5 fcff 	bl	80120b4 <ioport_setting_changed>
    hal.probe.configure(false, false);
 801c6b6:	4b05      	ldr	r3, [pc, #20]	@ (801c6cc <set_probe_invert+0x38>)
 801c6b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801c6bc:	2100      	movs	r1, #0
 801c6be:	4608      	mov	r0, r1
 801c6c0:	4798      	blx	r3
    return Status_OK;
 801c6c2:	2000      	movs	r0, #0
}
 801c6c4:	bd08      	pop	{r3, pc}
        return Status_SettingDisabled;
 801c6c6:	2035      	movs	r0, #53	@ 0x35
 801c6c8:	e7fc      	b.n	801c6c4 <set_probe_invert+0x30>
 801c6ca:	bf00      	nop
 801c6cc:	200011c0 	.word	0x200011c0
 801c6d0:	20001bd8 	.word	0x20001bd8

0801c6d4 <set_control_invert>:
{
 801c6d4:	b508      	push	{r3, lr}
    settings.control_invert.mask = (int_value & hal.signals_cap.mask) | limits_override.mask;
 801c6d6:	4b07      	ldr	r3, [pc, #28]	@ (801c6f4 <set_control_invert+0x20>)
 801c6d8:	f8b3 31dc 	ldrh.w	r3, [r3, #476]	@ 0x1dc
 801c6dc:	400b      	ands	r3, r1
 801c6de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801c6e2:	4a05      	ldr	r2, [pc, #20]	@ (801c6f8 <set_control_invert+0x24>)
 801c6e4:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
    ioport_setting_changed(id);
 801c6e8:	f7f5 fce4 	bl	80120b4 <ioport_setting_changed>
    system_init_switches();
 801c6ec:	f004 fc98 	bl	8021020 <system_init_switches>
}
 801c6f0:	2000      	movs	r0, #0
 801c6f2:	bd08      	pop	{r3, pc}
 801c6f4:	200011c0 	.word	0x200011c0
 801c6f8:	20001bd8 	.word	0x20001bd8

0801c6fc <set_report_inches>:
{
 801c6fc:	b508      	push	{r3, lr}
    settings.flags.report_inches = int_value != 0;
 801c6fe:	3900      	subs	r1, #0
 801c700:	bf18      	it	ne
 801c702:	2101      	movne	r1, #1
 801c704:	4b06      	ldr	r3, [pc, #24]	@ (801c720 <set_report_inches+0x24>)
 801c706:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 801c70a:	f361 0200 	bfi	r2, r1, #0, #1
 801c70e:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
    report_init();
 801c712:	f7fc fc65 	bl	8018fe0 <report_init>
    system_flag_wco_change(); // Make sure WCO is immediately updated.
 801c716:	f005 f8e1 	bl	80218dc <system_flag_wco_change>
}
 801c71a:	2000      	movs	r0, #0
 801c71c:	bd08      	pop	{r3, pc}
 801c71e:	bf00      	nop
 801c720:	20001bd8 	.word	0x20001bd8

0801c724 <strnumentries>:
{
 801c724:	b538      	push	{r3, r4, r5, lr}
    if(s == NULL || *s == '\0')
 801c726:	b170      	cbz	r0, 801c746 <strnumentries+0x22>
 801c728:	460d      	mov	r5, r1
 801c72a:	7803      	ldrb	r3, [r0, #0]
 801c72c:	b16b      	cbz	r3, 801c74a <strnumentries+0x26>
    uint32_t entries = 1;
 801c72e:	2401      	movs	r4, #1
 801c730:	e001      	b.n	801c736 <strnumentries+0x12>
        p++;
 801c732:	1c58      	adds	r0, r3, #1
        entries++;
 801c734:	3401      	adds	r4, #1
    while((p = strchr(p, delimiter))) {
 801c736:	4629      	mov	r1, r5
 801c738:	f007 ff90 	bl	802465c <strchr>
 801c73c:	4603      	mov	r3, r0
 801c73e:	2800      	cmp	r0, #0
 801c740:	d1f7      	bne.n	801c732 <strnumentries+0xe>
}
 801c742:	4620      	mov	r0, r4
 801c744:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 801c746:	2400      	movs	r4, #0
 801c748:	e7fb      	b.n	801c742 <strnumentries+0x1e>
 801c74a:	2400      	movs	r4, #0
 801c74c:	e7f9      	b.n	801c742 <strnumentries+0x1e>

0801c74e <get_decimal_places>:
    char *dp = format == NULL ? NULL : strchr(format, '.');
 801c74e:	b178      	cbz	r0, 801c770 <get_decimal_places+0x22>
{
 801c750:	b538      	push	{r3, r4, r5, lr}
 801c752:	4604      	mov	r4, r0
    char *dp = format == NULL ? NULL : strchr(format, '.');
 801c754:	212e      	movs	r1, #46	@ 0x2e
 801c756:	f007 ff81 	bl	802465c <strchr>
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801c75a:	4605      	mov	r5, r0
 801c75c:	b150      	cbz	r0, 801c774 <get_decimal_places+0x26>
 801c75e:	4620      	mov	r0, r4
 801c760:	f7eb fcce 	bl	8008100 <strlen>
 801c764:	4420      	add	r0, r4
 801c766:	1b40      	subs	r0, r0, r5
 801c768:	b2c0      	uxtb	r0, r0
 801c76a:	3801      	subs	r0, #1
 801c76c:	b2c0      	uxtb	r0, r0
}
 801c76e:	bd38      	pop	{r3, r4, r5, pc}
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801c770:	2001      	movs	r0, #1
}
 801c772:	4770      	bx	lr
    return dp ? strchr(format, '\0') - dp - 1 : 1;
 801c774:	2001      	movs	r0, #1
 801c776:	e7fa      	b.n	801c76e <get_decimal_places+0x20>

0801c778 <validate_uint_value>:
{
 801c778:	b530      	push	{r4, r5, lr}
 801c77a:	b083      	sub	sp, #12
 801c77c:	4604      	mov	r4, r0
 801c77e:	460d      	mov	r5, r1
    uint_fast8_t set_idx = 0;
 801c780:	2300      	movs	r3, #0
 801c782:	9300      	str	r3, [sp, #0]
    if(setting->min_value) {
 801c784:	6940      	ldr	r0, [r0, #20]
 801c786:	b168      	cbz	r0, 801c7a4 <validate_uint_value+0x2c>
        if((status = read_uint((char *)setting->min_value, &set_idx, &val)) != Status_OK)
 801c788:	aa01      	add	r2, sp, #4
 801c78a:	4669      	mov	r1, sp
 801c78c:	f7f8 fe50 	bl	8015430 <read_uint>
 801c790:	b9d8      	cbnz	r0, 801c7ca <validate_uint_value+0x52>
        if(!(value >= val || (setting->flags.allow_null && value == 0)))
 801c792:	9b01      	ldr	r3, [sp, #4]
 801c794:	42ab      	cmp	r3, r5
 801c796:	d905      	bls.n	801c7a4 <validate_uint_value+0x2c>
 801c798:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801c79c:	f013 0f02 	tst.w	r3, #2
 801c7a0:	d00e      	beq.n	801c7c0 <validate_uint_value+0x48>
 801c7a2:	b97d      	cbnz	r5, 801c7c4 <validate_uint_value+0x4c>
    if(setting->max_value) {
 801c7a4:	69a0      	ldr	r0, [r4, #24]
 801c7a6:	b178      	cbz	r0, 801c7c8 <validate_uint_value+0x50>
        set_idx = 0;
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	9300      	str	r3, [sp, #0]
        if((status = read_uint((char *)setting->max_value, &set_idx, &val)) != Status_OK)
 801c7ac:	aa01      	add	r2, sp, #4
 801c7ae:	4669      	mov	r1, sp
 801c7b0:	f7f8 fe3e 	bl	8015430 <read_uint>
 801c7b4:	b958      	cbnz	r0, 801c7ce <validate_uint_value+0x56>
        if(value > val)
 801c7b6:	9b01      	ldr	r3, [sp, #4]
 801c7b8:	42ab      	cmp	r3, r5
 801c7ba:	d206      	bcs.n	801c7ca <validate_uint_value+0x52>
            return Status_SettingValueOutOfRange;
 801c7bc:	2034      	movs	r0, #52	@ 0x34
 801c7be:	e004      	b.n	801c7ca <validate_uint_value+0x52>
            return Status_SettingValueOutOfRange;
 801c7c0:	2034      	movs	r0, #52	@ 0x34
 801c7c2:	e002      	b.n	801c7ca <validate_uint_value+0x52>
 801c7c4:	2034      	movs	r0, #52	@ 0x34
 801c7c6:	e000      	b.n	801c7ca <validate_uint_value+0x52>
    return Status_OK;
 801c7c8:	2000      	movs	r0, #0
}
 801c7ca:	b003      	add	sp, #12
 801c7cc:	bd30      	pop	{r4, r5, pc}
            return Status_BadNumberFormat;
 801c7ce:	2002      	movs	r0, #2
 801c7d0:	e7fb      	b.n	801c7ca <validate_uint_value+0x52>

0801c7d2 <setting_validate_me_uint>:
{
    return !(type == Setting_NonCore || type == Setting_NonCoreFn);
}

static status_code_t setting_validate_me_uint (const setting_detail_t *setting, char *svalue)
{
 801c7d2:	b530      	push	{r4, r5, lr}
 801c7d4:	b083      	sub	sp, #12
 801c7d6:	4604      	mov	r4, r0
 801c7d8:	4608      	mov	r0, r1
    uint_fast8_t idx = 0;
 801c7da:	2300      	movs	r3, #0
 801c7dc:	9301      	str	r3, [sp, #4]
    uint32_t value;
    status_code_t status;

    if((status = read_uint(svalue, &idx, &value)) != Status_OK)
 801c7de:	466a      	mov	r2, sp
 801c7e0:	a901      	add	r1, sp, #4
 801c7e2:	f7f8 fe25 	bl	8015430 <read_uint>
 801c7e6:	4605      	mov	r5, r0
 801c7e8:	bb68      	cbnz	r0, 801c846 <setting_validate_me_uint+0x74>
        return status;

    switch(setting->datatype) {
 801c7ea:	7b23      	ldrb	r3, [r4, #12]
 801c7ec:	2b0b      	cmp	r3, #11
 801c7ee:	d82a      	bhi.n	801c846 <setting_validate_me_uint+0x74>
 801c7f0:	e8df f003 	tbb	[pc, r3]
 801c7f4:	160b0b06 	.word	0x160b0b06
 801c7f8:	2929241f 	.word	0x2929241f
 801c7fc:	24242929 	.word	0x24242929

        case Format_Bool:
            if(!(value == 0 || value == 1))
 801c800:	9b00      	ldr	r3, [sp, #0]
 801c802:	2b01      	cmp	r3, #1
 801c804:	d91f      	bls.n	801c846 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801c806:	2534      	movs	r5, #52	@ 0x34
 801c808:	e01d      	b.n	801c846 <setting_validate_me_uint+0x74>
            break;

        case Format_Bitfield:
        case Format_XBitfield:;
            if(value >= (1UL << strnumentries(setting->format, ',')))
 801c80a:	212c      	movs	r1, #44	@ 0x2c
 801c80c:	6920      	ldr	r0, [r4, #16]
 801c80e:	f7ff ff89 	bl	801c724 <strnumentries>
 801c812:	2301      	movs	r3, #1
 801c814:	4083      	lsls	r3, r0
 801c816:	9a00      	ldr	r2, [sp, #0]
 801c818:	4293      	cmp	r3, r2
 801c81a:	d814      	bhi.n	801c846 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801c81c:	2534      	movs	r5, #52	@ 0x34
 801c81e:	e012      	b.n	801c846 <setting_validate_me_uint+0x74>
            break;

        case Format_RadioButtons:
            if(value >= strnumentries(setting->format, ','))
 801c820:	212c      	movs	r1, #44	@ 0x2c
 801c822:	6920      	ldr	r0, [r4, #16]
 801c824:	f7ff ff7e 	bl	801c724 <strnumentries>
 801c828:	9b00      	ldr	r3, [sp, #0]
 801c82a:	4298      	cmp	r0, r3
 801c82c:	d80b      	bhi.n	801c846 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801c82e:	2534      	movs	r5, #52	@ 0x34
 801c830:	e009      	b.n	801c846 <setting_validate_me_uint+0x74>
            break;

        case Format_AxisMask:
            if(value >= (1 << N_AXIS))
 801c832:	9b00      	ldr	r3, [sp, #0]
 801c834:	2b07      	cmp	r3, #7
 801c836:	d906      	bls.n	801c846 <setting_validate_me_uint+0x74>
                status = Status_SettingValueOutOfRange;
 801c838:	2534      	movs	r5, #52	@ 0x34
 801c83a:	e004      	b.n	801c846 <setting_validate_me_uint+0x74>
            break;

        case Format_Int8:
        case Format_Int16:
        case Format_Integer:
            status = validate_uint_value(setting, value);
 801c83c:	9900      	ldr	r1, [sp, #0]
 801c83e:	4620      	mov	r0, r4
 801c840:	f7ff ff9a 	bl	801c778 <validate_uint_value>
 801c844:	4605      	mov	r5, r0
        default:
            break;
    }

    return status;
}
 801c846:	4628      	mov	r0, r5
 801c848:	b003      	add	sp, #12
 801c84a:	bd30      	pop	{r4, r5, pc}

0801c84c <validate_value>:
{
 801c84c:	b510      	push	{r4, lr}
 801c84e:	ed2d 8b02 	vpush	{d8}
 801c852:	b082      	sub	sp, #8
 801c854:	4604      	mov	r4, r0
 801c856:	eeb0 8a40 	vmov.f32	s16, s0
    uint_fast8_t set_idx = 0;
 801c85a:	2300      	movs	r3, #0
 801c85c:	9300      	str	r3, [sp, #0]
    if(setting->min_value) {
 801c85e:	6940      	ldr	r0, [r0, #20]
 801c860:	b1b8      	cbz	r0, 801c892 <validate_value+0x46>
        if(!read_float((char *)setting->min_value, &set_idx, &val))
 801c862:	aa01      	add	r2, sp, #4
 801c864:	4669      	mov	r1, sp
 801c866:	f7f8 fe2d 	bl	80154c4 <read_float>
 801c86a:	b348      	cbz	r0, 801c8c0 <validate_value+0x74>
        if(!(value >= val || (setting->flags.allow_null && value == 0.0f)))
 801c86c:	eddd 7a01 	vldr	s15, [sp, #4]
 801c870:	eef4 7ac8 	vcmpe.f32	s15, s16
 801c874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c878:	d910      	bls.n	801c89c <validate_value+0x50>
 801c87a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801c87e:	f013 0f02 	tst.w	r3, #2
 801c882:	d01f      	beq.n	801c8c4 <validate_value+0x78>
 801c884:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c88c:	d006      	beq.n	801c89c <validate_value+0x50>
            return Status_SettingValueOutOfRange;
 801c88e:	2034      	movs	r0, #52	@ 0x34
 801c890:	e01d      	b.n	801c8ce <validate_value+0x82>
    } else if(value < 0.0f)
 801c892:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c89a:	d415      	bmi.n	801c8c8 <validate_value+0x7c>
    if(setting->max_value) {
 801c89c:	69a0      	ldr	r0, [r4, #24]
 801c89e:	b1a8      	cbz	r0, 801c8cc <validate_value+0x80>
        set_idx = 0;
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	9300      	str	r3, [sp, #0]
        if(!read_float((char *)setting->max_value, &set_idx, &val))
 801c8a4:	aa01      	add	r2, sp, #4
 801c8a6:	4669      	mov	r1, sp
 801c8a8:	f7f8 fe0c 	bl	80154c4 <read_float>
 801c8ac:	b198      	cbz	r0, 801c8d6 <validate_value+0x8a>
        if(value > val)
 801c8ae:	eddd 7a01 	vldr	s15, [sp, #4]
 801c8b2:	eef4 7ac8 	vcmpe.f32	s15, s16
 801c8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8ba:	d40e      	bmi.n	801c8da <validate_value+0x8e>
    return Status_OK;
 801c8bc:	2000      	movs	r0, #0
 801c8be:	e006      	b.n	801c8ce <validate_value+0x82>
            return Status_BadNumberFormat;
 801c8c0:	2002      	movs	r0, #2
 801c8c2:	e004      	b.n	801c8ce <validate_value+0x82>
            return Status_SettingValueOutOfRange;
 801c8c4:	2034      	movs	r0, #52	@ 0x34
 801c8c6:	e002      	b.n	801c8ce <validate_value+0x82>
        return Status_NegativeValue;
 801c8c8:	2004      	movs	r0, #4
 801c8ca:	e000      	b.n	801c8ce <validate_value+0x82>
    return Status_OK;
 801c8cc:	2000      	movs	r0, #0
}
 801c8ce:	b002      	add	sp, #8
 801c8d0:	ecbd 8b02 	vpop	{d8}
 801c8d4:	bd10      	pop	{r4, pc}
            return Status_BadNumberFormat;
 801c8d6:	2002      	movs	r0, #2
 801c8d8:	e7f9      	b.n	801c8ce <validate_value+0x82>
            return Status_SettingValueOutOfRange;
 801c8da:	2034      	movs	r0, #52	@ 0x34
 801c8dc:	e7f7      	b.n	801c8ce <validate_value+0x82>
	...

0801c8e0 <settings_changed_spindle>:
    // If no details available setting could nevertheless be a valid setting id.
    return setting == NULL ? Status_OK : setting_validate_me(setting, value, svalue);
}

static bool settings_changed_spindle (void)
{
 801c8e0:	b510      	push	{r4, lr}
    static spindle_settings_t spindle_settings = {0};

    bool changed;

    if((changed = memcmp(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t))) != 0)
 801c8e2:	2274      	movs	r2, #116	@ 0x74
 801c8e4:	4907      	ldr	r1, [pc, #28]	@ (801c904 <settings_changed_spindle+0x24>)
 801c8e6:	4808      	ldr	r0, [pc, #32]	@ (801c908 <settings_changed_spindle+0x28>)
 801c8e8:	f007 fe77 	bl	80245da <memcmp>
 801c8ec:	2800      	cmp	r0, #0
 801c8ee:	bf14      	ite	ne
 801c8f0:	2401      	movne	r4, #1
 801c8f2:	2400      	moveq	r4, #0
 801c8f4:	d004      	beq.n	801c900 <settings_changed_spindle+0x20>
        memcpy(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t));
 801c8f6:	2274      	movs	r2, #116	@ 0x74
 801c8f8:	4902      	ldr	r1, [pc, #8]	@ (801c904 <settings_changed_spindle+0x24>)
 801c8fa:	4803      	ldr	r0, [pc, #12]	@ (801c908 <settings_changed_spindle+0x28>)
 801c8fc:	f007 fff7 	bl	80248ee <memcpy>

    return changed;
}
 801c900:	4620      	mov	r0, r4
 801c902:	bd10      	pop	{r4, pc}
 801c904:	20001c4c 	.word	0x20001c4c
 801c908:	20001aec 	.word	0x20001aec

0801c90c <settings_register>:
    settingsd->next = details;
 801c90c:	4b02      	ldr	r3, [pc, #8]	@ (801c918 <settings_register+0xc>)
 801c90e:	681a      	ldr	r2, [r3, #0]
 801c910:	6190      	str	r0, [r2, #24]
    settingsd = details;
 801c912:	6018      	str	r0, [r3, #0]
}
 801c914:	4770      	bx	lr
 801c916:	bf00      	nop
 801c918:	20000200 	.word	0x20000200

0801c91c <settings_get_details>:
}
 801c91c:	4800      	ldr	r0, [pc, #0]	@ (801c920 <settings_get_details+0x4>)
 801c91e:	4770      	bx	lr
 801c920:	20000204 	.word	0x20000204

0801c924 <settings_get_axis_base>:
{
 801c924:	b538      	push	{r3, r4, r5, lr}
 801c926:	4604      	mov	r4, r0
 801c928:	460d      	mov	r5, r1
    setting_id_t base = normalize_id(id);
 801c92a:	f7ff fa23 	bl	801bd74 <normalize_id>
    *idx = id - base;
 801c92e:	1a24      	subs	r4, r4, r0
 801c930:	602c      	str	r4, [r5, #0]
    return *idx < N_AXIS ? base : Setting_SettingsMax;
 801c932:	2c02      	cmp	r4, #2
 801c934:	d800      	bhi.n	801c938 <settings_get_axis_base+0x14>
}
 801c936:	bd38      	pop	{r3, r4, r5, pc}
    return *idx < N_AXIS ? base : Setting_SettingsMax;
 801c938:	f240 20e5 	movw	r0, #741	@ 0x2e5
 801c93c:	e7fb      	b.n	801c936 <settings_get_axis_base+0x12>
	...

0801c940 <get_float>:
    if (setting >= Setting_AxisSettingsBase && setting <= Setting_AxisSettingsMax) {
 801c940:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 801c944:	b29b      	uxth	r3, r3
 801c946:	2b5d      	cmp	r3, #93	@ 0x5d
 801c948:	d905      	bls.n	801c956 <get_float+0x16>
    } else switch(setting) {
 801c94a:	f5b0 7fab 	cmp.w	r0, #342	@ 0x156
 801c94e:	d060      	beq.n	801ca12 <get_float+0xd2>
    float value = 0.0f;
 801c950:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 801ca1c <get_float+0xdc>
}
 801c954:	4770      	bx	lr
{
 801c956:	b500      	push	{lr}
 801c958:	b083      	sub	sp, #12
        switch(settings_get_axis_base(setting, &idx)) {
 801c95a:	a901      	add	r1, sp, #4
 801c95c:	f7ff ffe2 	bl	801c924 <settings_get_axis_base>
 801c960:	2882      	cmp	r0, #130	@ 0x82
 801c962:	d816      	bhi.n	801c992 <get_float+0x52>
 801c964:	2864      	cmp	r0, #100	@ 0x64
 801c966:	d34c      	bcc.n	801ca02 <get_float+0xc2>
 801c968:	3864      	subs	r0, #100	@ 0x64
 801c96a:	281e      	cmp	r0, #30
 801c96c:	d84c      	bhi.n	801ca08 <get_float+0xc8>
 801c96e:	e8df f000 	tbb	[pc, r0]
 801c972:	4b1e      	.short	0x4b1e
 801c974:	4b4b4b4b 	.word	0x4b4b4b4b
 801c978:	4b4b4b4b 	.word	0x4b4b4b4b
 801c97c:	4b4b4b27 	.word	0x4b4b4b27
 801c980:	4b4b4b4b 	.word	0x4b4b4b4b
 801c984:	4b304b4b 	.word	0x4b304b4b
 801c988:	4b4b4b4b 	.word	0x4b4b4b4b
 801c98c:	4b4b4b4b 	.word	0x4b4b4b4b
 801c990:	3d          	.byte	0x3d
 801c991:	00          	.byte	0x00
 801c992:	28aa      	cmp	r0, #170	@ 0xaa
 801c994:	d108      	bne.n	801c9a8 <get_float+0x68>
                value = settings.axis[idx].dual_axis_offset;
 801c996:	9b01      	ldr	r3, [sp, #4]
 801c998:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c99c:	4a20      	ldr	r2, [pc, #128]	@ (801ca20 <get_float+0xe0>)
 801c99e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c9a2:	ed93 0a10 	vldr	s0, [r3, #64]	@ 0x40
                break;
 801c9a6:	e031      	b.n	801ca0c <get_float+0xcc>
        switch(settings_get_axis_base(setting, &idx)) {
 801c9a8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 801ca1c <get_float+0xdc>
 801c9ac:	e02e      	b.n	801ca0c <get_float+0xcc>
                value = settings.axis[idx].steps_per_mm;
 801c9ae:	9b01      	ldr	r3, [sp, #4]
 801c9b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c9b4:	4a1a      	ldr	r2, [pc, #104]	@ (801ca20 <get_float+0xe0>)
 801c9b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c9ba:	ed93 0a0c 	vldr	s0, [r3, #48]	@ 0x30
                break;
 801c9be:	e025      	b.n	801ca0c <get_float+0xcc>
                value = settings.axis[idx].max_rate;
 801c9c0:	9b01      	ldr	r3, [sp, #4]
 801c9c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c9c6:	4a16      	ldr	r2, [pc, #88]	@ (801ca20 <get_float+0xe0>)
 801c9c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c9cc:	ed93 0a0d 	vldr	s0, [r3, #52]	@ 0x34
                break;
 801c9d0:	e01c      	b.n	801ca0c <get_float+0xcc>
                value = settings.axis[idx].acceleration / (60.0f * 60.0f); // Convert from mm/min^2 to mm/sec^2.
 801c9d2:	9b01      	ldr	r3, [sp, #4]
 801c9d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c9d8:	4a11      	ldr	r2, [pc, #68]	@ (801ca20 <get_float+0xe0>)
 801c9da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c9de:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801c9e2:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801ca24 <get_float+0xe4>
 801c9e6:	ee87 0a27 	vdiv.f32	s0, s14, s15
                break;
 801c9ea:	e00f      	b.n	801ca0c <get_float+0xcc>
                value = -settings.axis[idx].max_travel; // Store as negative for grbl internal use.
 801c9ec:	9b01      	ldr	r3, [sp, #4]
 801c9ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c9f2:	4a0b      	ldr	r2, [pc, #44]	@ (801ca20 <get_float+0xe0>)
 801c9f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c9f8:	ed93 0a0f 	vldr	s0, [r3, #60]	@ 0x3c
 801c9fc:	eeb1 0a40 	vneg.f32	s0, s0
                break;
 801ca00:	e004      	b.n	801ca0c <get_float+0xcc>
        switch(settings_get_axis_base(setting, &idx)) {
 801ca02:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 801ca1c <get_float+0xdc>
 801ca06:	e001      	b.n	801ca0c <get_float+0xcc>
 801ca08:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 801ca1c <get_float+0xdc>
}
 801ca0c:	b003      	add	sp, #12
 801ca0e:	f85d fb04 	ldr.w	pc, [sp], #4
            value = settings.tool_change.probing_distance;
 801ca12:	4b03      	ldr	r3, [pc, #12]	@ (801ca20 <get_float+0xe0>)
 801ca14:	ed93 0a0a 	vldr	s0, [r3, #40]	@ 0x28
            break;
 801ca18:	4770      	bx	lr
 801ca1a:	bf00      	nop
 801ca1c:	00000000 	.word	0x00000000
 801ca20:	20001bd8 	.word	0x20001bd8
 801ca24:	45610000 	.word	0x45610000

0801ca28 <set_axis_setting>:
{
 801ca28:	b510      	push	{r4, lr}
 801ca2a:	ed2d 8b02 	vpush	{d8}
 801ca2e:	b082      	sub	sp, #8
 801ca30:	eeb0 8a40 	vmov.f32	s16, s0
    switch(settings_get_axis_base(setting, &idx)) {
 801ca34:	a901      	add	r1, sp, #4
 801ca36:	f7ff ff75 	bl	801c924 <settings_get_axis_base>
 801ca3a:	2882      	cmp	r0, #130	@ 0x82
 801ca3c:	d827      	bhi.n	801ca8e <set_axis_setting+0x66>
 801ca3e:	2864      	cmp	r0, #100	@ 0x64
 801ca40:	f0c0 8131 	bcc.w	801cca6 <set_axis_setting+0x27e>
 801ca44:	3864      	subs	r0, #100	@ 0x64
 801ca46:	281e      	cmp	r0, #30
 801ca48:	f200 812f 	bhi.w	801ccaa <set_axis_setting+0x282>
 801ca4c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801ca50:	012d003b 	.word	0x012d003b
 801ca54:	012d012d 	.word	0x012d012d
 801ca58:	012d012d 	.word	0x012d012d
 801ca5c:	012d012d 	.word	0x012d012d
 801ca60:	012d012d 	.word	0x012d012d
 801ca64:	012d00b6 	.word	0x012d00b6
 801ca68:	012d012d 	.word	0x012d012d
 801ca6c:	012d012d 	.word	0x012d012d
 801ca70:	012d012d 	.word	0x012d012d
 801ca74:	012d012d 	.word	0x012d012d
 801ca78:	012d00da 	.word	0x012d00da
 801ca7c:	012d012d 	.word	0x012d012d
 801ca80:	012d012d 	.word	0x012d012d
 801ca84:	012d012d 	.word	0x012d012d
 801ca88:	012d012d 	.word	0x012d012d
 801ca8c:	00ef      	.short	0x00ef
 801ca8e:	28aa      	cmp	r0, #170	@ 0xaa
 801ca90:	d117      	bne.n	801cac2 <set_axis_setting+0x9a>
            if(hal.stepper.get_ganged && bit_istrue(hal.stepper.get_ganged(true).mask, bit(idx)))
 801ca92:	4b8c      	ldr	r3, [pc, #560]	@ (801ccc4 <set_axis_setting+0x29c>)
 801ca94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	f000 810f 	beq.w	801ccbc <set_axis_setting+0x294>
 801ca9e:	2001      	movs	r0, #1
 801caa0:	4798      	blx	r3
 801caa2:	b2c0      	uxtb	r0, r0
 801caa4:	9b01      	ldr	r3, [sp, #4]
 801caa6:	40d8      	lsrs	r0, r3
 801caa8:	f010 0f01 	tst.w	r0, #1
 801caac:	f000 8108 	beq.w	801ccc0 <set_axis_setting+0x298>
                settings.axis[idx].dual_axis_offset = value;
 801cab0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cab4:	4a84      	ldr	r2, [pc, #528]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cab6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801caba:	ed83 8a10 	vstr	s16, [r3, #64]	@ 0x40
    status_code_t status = Status_OK;
 801cabe:	2000      	movs	r0, #0
                settings.axis[idx].dual_axis_offset = value;
 801cac0:	e0f4      	b.n	801ccac <set_axis_setting+0x284>
    switch(settings_get_axis_base(setting, &idx)) {
 801cac2:	2035      	movs	r0, #53	@ 0x35
 801cac4:	e0f2      	b.n	801ccac <set_axis_setting+0x284>
            if (hal.max_step_rate && value * settings.axis[idx].max_rate > (float)hal.max_step_rate * 60.0f)
 801cac6:	4b7f      	ldr	r3, [pc, #508]	@ (801ccc4 <set_axis_setting+0x29c>)
 801cac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801caca:	b1bb      	cbz	r3, 801cafc <set_axis_setting+0xd4>
 801cacc:	9a01      	ldr	r2, [sp, #4]
 801cace:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cad2:	497d      	ldr	r1, [pc, #500]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cad4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801cad8:	ed92 7a0d 	vldr	s14, [r2, #52]	@ 0x34
 801cadc:	ee27 7a08 	vmul.f32	s14, s14, s16
 801cae0:	ee07 3a90 	vmov	s15, r3
 801cae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cae8:	eddf 6a78 	vldr	s13, [pc, #480]	@ 801cccc <set_axis_setting+0x2a4>
 801caec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801caf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801caf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caf8:	f300 80dc 	bgt.w	801ccb4 <set_axis_setting+0x28c>
                if(settings.axis[idx].steps_per_mm > 0.0f && settings.axis[idx].steps_per_mm != value) {
 801cafc:	9b01      	ldr	r3, [sp, #4]
 801cafe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801cb02:	4a71      	ldr	r2, [pc, #452]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cb04:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801cb08:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 801cb0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb14:	dd04      	ble.n	801cb20 <set_axis_setting+0xf8>
 801cb16:	eef4 7a48 	vcmp.f32	s15, s16
 801cb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb1e:	d109      	bne.n	801cb34 <set_axis_setting+0x10c>
                settings.axis[idx].steps_per_mm = value;
 801cb20:	9b01      	ldr	r3, [sp, #4]
 801cb22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cb26:	4a68      	ldr	r2, [pc, #416]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cb28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb2c:	ed83 8a0c 	vstr	s16, [r3, #48]	@ 0x30
    status_code_t status = Status_OK;
 801cb30:	2000      	movs	r0, #0
 801cb32:	e0bb      	b.n	801ccac <set_axis_setting+0x284>
                    float comp = value / settings.axis[idx].steps_per_mm;
 801cb34:	ee88 7a27 	vdiv.f32	s14, s16, s15
                    sys.position[idx] *= comp;
 801cb38:	4c65      	ldr	r4, [pc, #404]	@ (801ccd0 <set_axis_setting+0x2a8>)
 801cb3a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801cb3e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 801cb42:	ee07 1a90 	vmov	s15, r1
 801cb46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cb4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb52:	ee17 1a90 	vmov	r1, s15
 801cb56:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
                    sys.home_position[idx] *= comp;
 801cb5a:	f103 0216 	add.w	r2, r3, #22
 801cb5e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801cb62:	edd2 7a00 	vldr	s15, [r2]
 801cb66:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cb6a:	edc2 7a00 	vstr	s15, [r2]
                    sys.probe_position[idx] *= comp;
 801cb6e:	f103 020e 	add.w	r2, r3, #14
 801cb72:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 801cb76:	ee07 1a90 	vmov	s15, r1
 801cb7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cb82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb86:	ee17 1a90 	vmov	r1, s15
 801cb8a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
                    sys.tlo_reference[idx] *= comp;
 801cb8e:	3302      	adds	r3, #2
 801cb90:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 801cb94:	ee07 2a90 	vmov	s15, r2
 801cb98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cba4:	ee17 2a90 	vmov	r2, s15
 801cba8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    sync_position();
 801cbac:	f7f9 fda2 	bl	80166f4 <plan_sync_position>
 801cbb0:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801cbb4:	4847      	ldr	r0, [pc, #284]	@ (801ccd4 <set_axis_setting+0x2ac>)
 801cbb6:	f004 fd61 	bl	802167c <system_convert_array_steps_to_mpos>
 801cbba:	e7b1      	b.n	801cb20 <set_axis_setting+0xf8>
            if (hal.max_step_rate && value * settings.axis[idx].steps_per_mm > (float)hal.max_step_rate * 60.0f)
 801cbbc:	4b41      	ldr	r3, [pc, #260]	@ (801ccc4 <set_axis_setting+0x29c>)
 801cbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cbc0:	b1b3      	cbz	r3, 801cbf0 <set_axis_setting+0x1c8>
 801cbc2:	9a01      	ldr	r2, [sp, #4]
 801cbc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cbc8:	493f      	ldr	r1, [pc, #252]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cbca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801cbce:	ed92 7a0c 	vldr	s14, [r2, #48]	@ 0x30
 801cbd2:	ee27 7a08 	vmul.f32	s14, s14, s16
 801cbd6:	ee07 3a90 	vmov	s15, r3
 801cbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cbde:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801cccc <set_axis_setting+0x2a4>
 801cbe2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cbe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbee:	dc63      	bgt.n	801ccb8 <set_axis_setting+0x290>
                settings.axis[idx].max_rate = value;
 801cbf0:	9b01      	ldr	r3, [sp, #4]
 801cbf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cbf6:	4a34      	ldr	r2, [pc, #208]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cbf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cbfc:	ed83 8a0d 	vstr	s16, [r3, #52]	@ 0x34
    status_code_t status = Status_OK;
 801cc00:	2000      	movs	r0, #0
 801cc02:	e053      	b.n	801ccac <set_axis_setting+0x284>
            settings.axis[idx].acceleration = override_backup.acceleration[idx] = value * 60.0f * 60.0f; // Convert to mm/min^2 for grbl internal use.
 801cc04:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801cccc <set_axis_setting+0x2a4>
 801cc08:	ee28 0a27 	vmul.f32	s0, s16, s15
 801cc0c:	9b01      	ldr	r3, [sp, #4]
 801cc0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801cc12:	4a31      	ldr	r2, [pc, #196]	@ (801ccd8 <set_axis_setting+0x2b0>)
 801cc14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801cc18:	ed82 0a01 	vstr	s0, [r2, #4]
 801cc1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cc20:	4a29      	ldr	r2, [pc, #164]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cc22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cc26:	ed83 0a0e 	vstr	s0, [r3, #56]	@ 0x38
    status_code_t status = Status_OK;
 801cc2a:	2000      	movs	r0, #0
            break;
 801cc2c:	e03e      	b.n	801ccac <set_axis_setting+0x284>
            if(settings.axis[idx].max_travel != -value) {
 801cc2e:	9a01      	ldr	r2, [sp, #4]
 801cc30:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801cc34:	4b24      	ldr	r3, [pc, #144]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cc36:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801cc3a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 801cc3e:	eeb1 8a48 	vneg.f32	s16, s16
 801cc42:	eef4 7a48 	vcmp.f32	s15, s16
 801cc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc4a:	d116      	bne.n	801cc7a <set_axis_setting+0x252>
            settings.axis[idx].max_travel = -value; // Store as negative for grbl internal use.
 801cc4c:	9b01      	ldr	r3, [sp, #4]
 801cc4e:	4a1e      	ldr	r2, [pc, #120]	@ (801ccc8 <set_axis_setting+0x2a0>)
 801cc50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cc54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cc58:	ed83 8a0f 	vstr	s16, [r3, #60]	@ 0x3c
            if(settings.homing.flags.init_lock && (sys.homing.mask & sys.homed.mask) != sys.homing.mask) {
 801cc5c:	f892 3114 	ldrb.w	r3, [r2, #276]	@ 0x114
 801cc60:	f013 0f04 	tst.w	r3, #4
 801cc64:	d005      	beq.n	801cc72 <set_axis_setting+0x24a>
 801cc66:	4a1a      	ldr	r2, [pc, #104]	@ (801ccd0 <set_axis_setting+0x2a8>)
 801cc68:	7e93      	ldrb	r3, [r2, #26]
 801cc6a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 801cc6e:	4393      	bics	r3, r2
 801cc70:	d111      	bne.n	801cc96 <set_axis_setting+0x26e>
            tmp_set_soft_limits();
 801cc72:	f7fe fee1 	bl	801ba38 <tmp_set_soft_limits>
    status_code_t status = Status_OK;
 801cc76:	2000      	movs	r0, #0
            break;
 801cc78:	e018      	b.n	801ccac <set_axis_setting+0x284>
                bit_false(sys.homed.mask, bit(idx));
 801cc7a:	4815      	ldr	r0, [pc, #84]	@ (801ccd0 <set_axis_setting+0x2a8>)
 801cc7c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 801cc80:	2101      	movs	r1, #1
 801cc82:	fa01 f202 	lsl.w	r2, r1, r2
 801cc86:	ea23 0302 	bic.w	r3, r3, r2
 801cc8a:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
                system_add_rt_report(Report_Homed);
 801cc8e:	2004      	movs	r0, #4
 801cc90:	f004 fd98 	bl	80217c4 <system_add_rt_report>
 801cc94:	e7da      	b.n	801cc4c <set_axis_setting+0x224>
                system_raise_alarm(Alarm_HomingRequired);
 801cc96:	200b      	movs	r0, #11
 801cc98:	f004 fd46 	bl	8021728 <system_raise_alarm>
                grbl.report.feedback_message(Message_HomingCycleRequired);
 801cc9c:	4b0f      	ldr	r3, [pc, #60]	@ (801ccdc <set_axis_setting+0x2b4>)
 801cc9e:	68db      	ldr	r3, [r3, #12]
 801cca0:	200d      	movs	r0, #13
 801cca2:	4798      	blx	r3
 801cca4:	e7e5      	b.n	801cc72 <set_axis_setting+0x24a>
    switch(settings_get_axis_base(setting, &idx)) {
 801cca6:	2035      	movs	r0, #53	@ 0x35
 801cca8:	e000      	b.n	801ccac <set_axis_setting+0x284>
 801ccaa:	2035      	movs	r0, #53	@ 0x35
}
 801ccac:	b002      	add	sp, #8
 801ccae:	ecbd 8b02 	vpop	{d8}
 801ccb2:	bd10      	pop	{r4, pc}
                status = Status_MaxStepRateExceeded;
 801ccb4:	200c      	movs	r0, #12
 801ccb6:	e7f9      	b.n	801ccac <set_axis_setting+0x284>
                status = Status_MaxStepRateExceeded;
 801ccb8:	200c      	movs	r0, #12
 801ccba:	e7f7      	b.n	801ccac <set_axis_setting+0x284>
                status = Status_SettingDisabled;
 801ccbc:	2035      	movs	r0, #53	@ 0x35
 801ccbe:	e7f5      	b.n	801ccac <set_axis_setting+0x284>
 801ccc0:	2035      	movs	r0, #53	@ 0x35
 801ccc2:	e7f3      	b.n	801ccac <set_axis_setting+0x284>
 801ccc4:	200011c0 	.word	0x200011c0
 801ccc8:	20001bd8 	.word	0x20001bd8
 801cccc:	42700000 	.word	0x42700000
 801ccd0:	200014a0 	.word	0x200014a0
 801ccd4:	20000f60 	.word	0x20000f60
 801ccd8:	20001b60 	.word	0x20001b60
 801ccdc:	200013a8 	.word	0x200013a8

0801cce0 <setting_get_value>:
{
 801cce0:	b510      	push	{r4, lr}
 801cce2:	ed2d 8b02 	vpush	{d8}
    if(setting == NULL)
 801cce6:	4604      	mov	r4, r0
 801cce8:	2800      	cmp	r0, #0
 801ccea:	d063      	beq.n	801cdb4 <setting_get_value+0xd4>
    switch(setting->type) {
 801ccec:	7f02      	ldrb	r2, [r0, #28]
 801ccee:	2a07      	cmp	r2, #7
 801ccf0:	d85f      	bhi.n	801cdb2 <setting_get_value+0xd2>
 801ccf2:	2301      	movs	r3, #1
 801ccf4:	4093      	lsls	r3, r2
 801ccf6:	f013 0faa 	tst.w	r3, #170	@ 0xaa
 801ccfa:	d131      	bne.n	801cd60 <setting_get_value+0x80>
 801ccfc:	f013 0f55 	tst.w	r3, #85	@ 0x55
 801cd00:	d05b      	beq.n	801cdba <setting_get_value+0xda>
            switch(setting->datatype) {
 801cd02:	7b03      	ldrb	r3, [r0, #12]
 801cd04:	2b0b      	cmp	r3, #11
 801cd06:	d85a      	bhi.n	801cdbe <setting_get_value+0xde>
 801cd08:	e8df f003 	tbb	[pc, r3]
 801cd0c:	11111111 	.word	0x11111111
 801cd10:	28061b11 	.word	0x28061b11
 801cd14:	16112820 	.word	0x16112820
                    value = ftoa(*((float *)(setting->value)), get_decimal_places(setting->format));
 801cd18:	6a03      	ldr	r3, [r0, #32]
 801cd1a:	ed93 8a00 	vldr	s16, [r3]
 801cd1e:	6900      	ldr	r0, [r0, #16]
 801cd20:	f7ff fd15 	bl	801c74e <get_decimal_places>
 801cd24:	eeb0 0a48 	vmov.f32	s0, s16
 801cd28:	f7f8 faec 	bl	8015304 <ftoa>
                    break;
 801cd2c:	e042      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = uitoa(*((uint8_t *)(setting->value)));
 801cd2e:	6a03      	ldr	r3, [r0, #32]
 801cd30:	7818      	ldrb	r0, [r3, #0]
 801cd32:	f7f8 fac5 	bl	80152c0 <uitoa>
                    break;
 801cd36:	e03d      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = uitoa(*((uint16_t *)(setting->value)));
 801cd38:	6a03      	ldr	r3, [r0, #32]
 801cd3a:	8818      	ldrh	r0, [r3, #0]
 801cd3c:	f7f8 fac0 	bl	80152c0 <uitoa>
                    break;
 801cd40:	e038      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = uitoa(*((uint32_t *)(setting->value)));
 801cd42:	6a03      	ldr	r3, [r0, #32]
 801cd44:	6818      	ldr	r0, [r3, #0]
 801cd46:	f7f8 fabb 	bl	80152c0 <uitoa>
                    break;
 801cd4a:	e033      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 801cd4c:	4b1f      	ldr	r3, [pc, #124]	@ (801cdcc <setting_get_value+0xec>)
 801cd4e:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801cd52:	f013 0f02 	tst.w	r3, #2
 801cd56:	d134      	bne.n	801cdc2 <setting_get_value+0xe2>
 801cd58:	6a00      	ldr	r0, [r0, #32]
 801cd5a:	e02b      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = ((char *)(setting->value));
 801cd5c:	6a00      	ldr	r0, [r0, #32]
                    break;
 801cd5e:	e029      	b.n	801cdb4 <setting_get_value+0xd4>
            setting_id_t id = (setting_id_t)(setting->id + offset);
 801cd60:	8803      	ldrh	r3, [r0, #0]
 801cd62:	fa13 f181 	uxtah	r1, r3, r1
 801cd66:	b288      	uxth	r0, r1
            switch(setting->datatype) {
 801cd68:	7b23      	ldrb	r3, [r4, #12]
 801cd6a:	3b06      	subs	r3, #6
 801cd6c:	2b03      	cmp	r3, #3
 801cd6e:	d81b      	bhi.n	801cda8 <setting_get_value+0xc8>
 801cd70:	e8df f003 	tbb	[pc, r3]
 801cd74:	170e1702 	.word	0x170e1702
                    value = ftoa(((setting_get_float_ptr)(setting->get_value))(id), get_decimal_places(setting->format));
 801cd78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cd7a:	4798      	blx	r3
 801cd7c:	eeb0 8a40 	vmov.f32	s16, s0
 801cd80:	6920      	ldr	r0, [r4, #16]
 801cd82:	f7ff fce4 	bl	801c74e <get_decimal_places>
 801cd86:	eeb0 0a48 	vmov.f32	s0, s16
 801cd8a:	f7f8 fabb 	bl	8015304 <ftoa>
                    break;
 801cd8e:	e011      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 801cd90:	4b0e      	ldr	r3, [pc, #56]	@ (801cdcc <setting_get_value+0xec>)
 801cd92:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801cd96:	f013 0f02 	tst.w	r3, #2
 801cd9a:	d114      	bne.n	801cdc6 <setting_get_value+0xe6>
 801cd9c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cd9e:	4798      	blx	r3
 801cda0:	e008      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = ((setting_get_string_ptr)(setting->get_value))(id);
 801cda2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cda4:	4798      	blx	r3
                    break;
 801cda6:	e005      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = uitoa(((setting_get_int_ptr)(setting->get_value))(id));
 801cda8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801cdaa:	4798      	blx	r3
 801cdac:	f7f8 fa88 	bl	80152c0 <uitoa>
                    break;
 801cdb0:	e000      	b.n	801cdb4 <setting_get_value+0xd4>
    switch(setting->type) {
 801cdb2:	2000      	movs	r0, #0
}
 801cdb4:	ecbd 8b02 	vpop	{d8}
 801cdb8:	bd10      	pop	{r4, pc}
    switch(setting->type) {
 801cdba:	2000      	movs	r0, #0
 801cdbc:	e7fa      	b.n	801cdb4 <setting_get_value+0xd4>
 801cdbe:	2000      	movs	r0, #0
 801cdc0:	e7f8      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 801cdc2:	4803      	ldr	r0, [pc, #12]	@ (801cdd0 <setting_get_value+0xf0>)
 801cdc4:	e7f6      	b.n	801cdb4 <setting_get_value+0xd4>
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 801cdc6:	4802      	ldr	r0, [pc, #8]	@ (801cdd0 <setting_get_value+0xf0>)
 801cdc8:	e7f4      	b.n	801cdb4 <setting_get_value+0xd4>
 801cdca:	bf00      	nop
 801cdcc:	200011c0 	.word	0x200011c0
 801cdd0:	0802bdb0 	.word	0x0802bdb0

0801cdd4 <setting_get_int_value>:
    if(setting) switch(setting->type) {
 801cdd4:	b358      	cbz	r0, 801ce2e <setting_get_int_value+0x5a>
{
 801cdd6:	b508      	push	{r3, lr}
 801cdd8:	4603      	mov	r3, r0
    if(setting) switch(setting->type) {
 801cdda:	7f00      	ldrb	r0, [r0, #28]
 801cddc:	2807      	cmp	r0, #7
 801cdde:	d828      	bhi.n	801ce32 <setting_get_int_value+0x5e>
 801cde0:	2201      	movs	r2, #1
 801cde2:	4082      	lsls	r2, r0
 801cde4:	f012 0faa 	tst.w	r2, #170	@ 0xaa
 801cde8:	d116      	bne.n	801ce18 <setting_get_int_value+0x44>
 801cdea:	f012 0f55 	tst.w	r2, #85	@ 0x55
 801cdee:	d022      	beq.n	801ce36 <setting_get_int_value+0x62>
            switch(setting->datatype) {
 801cdf0:	7b1a      	ldrb	r2, [r3, #12]
 801cdf2:	2a0b      	cmp	r2, #11
 801cdf4:	d821      	bhi.n	801ce3a <setting_get_int_value+0x66>
 801cdf6:	e8df f002 	tbb	[pc, r2]
 801cdfa:	0606      	.short	0x0606
 801cdfc:	0c060606 	.word	0x0c060606
 801ce00:	20202020 	.word	0x20202020
 801ce04:	0906      	.short	0x0906
                    value = *((uint8_t *)(setting->value));
 801ce06:	6a1b      	ldr	r3, [r3, #32]
 801ce08:	7818      	ldrb	r0, [r3, #0]
                    break;
 801ce0a:	e013      	b.n	801ce34 <setting_get_int_value+0x60>
                    value = *((uint16_t *)(setting->value));
 801ce0c:	6a1b      	ldr	r3, [r3, #32]
 801ce0e:	8818      	ldrh	r0, [r3, #0]
                    break;
 801ce10:	e010      	b.n	801ce34 <setting_get_int_value+0x60>
                    value = *((uint32_t *)(setting->value));
 801ce12:	6a1b      	ldr	r3, [r3, #32]
 801ce14:	6818      	ldr	r0, [r3, #0]
                    break;
 801ce16:	e00d      	b.n	801ce34 <setting_get_int_value+0x60>
            switch(setting->datatype) {
 801ce18:	7b1a      	ldrb	r2, [r3, #12]
 801ce1a:	3a06      	subs	r2, #6
 801ce1c:	2a03      	cmp	r2, #3
 801ce1e:	d90e      	bls.n	801ce3e <setting_get_int_value+0x6a>
                    value = ((setting_get_int_ptr)(setting->get_value))((setting_id_t)(setting->id + offset));
 801ce20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ce22:	881b      	ldrh	r3, [r3, #0]
 801ce24:	fa13 f181 	uxtah	r1, r3, r1
 801ce28:	b288      	uxth	r0, r1
 801ce2a:	4790      	blx	r2
                    break;
 801ce2c:	e002      	b.n	801ce34 <setting_get_int_value+0x60>
    uint32_t value = 0;
 801ce2e:	2000      	movs	r0, #0
}
 801ce30:	4770      	bx	lr
    if(setting) switch(setting->type) {
 801ce32:	2000      	movs	r0, #0
}
 801ce34:	bd08      	pop	{r3, pc}
    if(setting) switch(setting->type) {
 801ce36:	2000      	movs	r0, #0
 801ce38:	e7fc      	b.n	801ce34 <setting_get_int_value+0x60>
 801ce3a:	2000      	movs	r0, #0
 801ce3c:	e7fa      	b.n	801ce34 <setting_get_int_value+0x60>
    uint32_t value = 0;
 801ce3e:	2000      	movs	r0, #0
    return value;
 801ce40:	e7f8      	b.n	801ce34 <setting_get_int_value+0x60>
	...

0801ce44 <settings_write_build_info>:
    if(hal.nvs.type != NVS_None)
 801ce44:	4b07      	ldr	r3, [pc, #28]	@ (801ce64 <settings_write_build_info+0x20>)
 801ce46:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801ce4a:	b153      	cbz	r3, 801ce62 <settings_write_build_info+0x1e>
{
 801ce4c:	b510      	push	{r4, lr}
 801ce4e:	4601      	mov	r1, r0
        hal.nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)line, sizeof(stored_line_t), true);
 801ce50:	4b04      	ldr	r3, [pc, #16]	@ (801ce64 <settings_write_build_info+0x20>)
 801ce52:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801ce56:	2301      	movs	r3, #1
 801ce58:	2246      	movs	r2, #70	@ 0x46
 801ce5a:	f240 30ae 	movw	r0, #942	@ 0x3ae
 801ce5e:	47a0      	blx	r4
}
 801ce60:	bd10      	pop	{r4, pc}
 801ce62:	4770      	bx	lr
 801ce64:	200011c0 	.word	0x200011c0

0801ce68 <settings_read_build_info>:
{
 801ce68:	b538      	push	{r3, r4, r5, lr}
 801ce6a:	4604      	mov	r4, r0
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_BUILD_INFO, sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801ce6c:	4b0b      	ldr	r3, [pc, #44]	@ (801ce9c <settings_read_build_info+0x34>)
 801ce6e:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801ce72:	b14b      	cbz	r3, 801ce88 <settings_read_build_info+0x20>
 801ce74:	4b09      	ldr	r3, [pc, #36]	@ (801ce9c <settings_read_build_info+0x34>)
 801ce76:	f8d3 5194 	ldr.w	r5, [r3, #404]	@ 0x194
 801ce7a:	2301      	movs	r3, #1
 801ce7c:	2246      	movs	r2, #70	@ 0x46
 801ce7e:	f240 31ae 	movw	r1, #942	@ 0x3ae
 801ce82:	47a8      	blx	r5
 801ce84:	2802      	cmp	r0, #2
 801ce86:	d006      	beq.n	801ce96 <settings_read_build_info+0x2e>
        line[0] = 0; // Empty line
 801ce88:	2500      	movs	r5, #0
 801ce8a:	7025      	strb	r5, [r4, #0]
        settings_write_build_info(line);
 801ce8c:	4620      	mov	r0, r4
 801ce8e:	f7ff ffd9 	bl	801ce44 <settings_write_build_info>
        return false;
 801ce92:	4628      	mov	r0, r5
}
 801ce94:	bd38      	pop	{r3, r4, r5, pc}
    return true;
 801ce96:	2001      	movs	r0, #1
 801ce98:	e7fc      	b.n	801ce94 <settings_read_build_info+0x2c>
 801ce9a:	bf00      	nop
 801ce9c:	200011c0 	.word	0x200011c0

0801cea0 <settings_write_startup_line>:
{
 801cea0:	b510      	push	{r4, lr}
    assert(idx < N_STARTUP_LINE);
 801cea2:	2801      	cmp	r0, #1
 801cea4:	d810      	bhi.n	801cec8 <settings_write_startup_line+0x28>
    if(hal.nvs.type != NVS_None)
 801cea6:	4b0c      	ldr	r3, [pc, #48]	@ (801ced8 <settings_write_startup_line+0x38>)
 801cea8:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801ceac:	b15b      	cbz	r3, 801cec6 <settings_write_startup_line+0x26>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), (uint8_t *)line, sizeof(stored_line_t), true);
 801ceae:	4b0a      	ldr	r3, [pc, #40]	@ (801ced8 <settings_write_startup_line+0x38>)
 801ceb0:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801ceb4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 801ceb8:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
 801cebc:	2301      	movs	r3, #1
 801cebe:	2246      	movs	r2, #70	@ 0x46
 801cec0:	f200 301f 	addw	r0, r0, #799	@ 0x31f
 801cec4:	47a0      	blx	r4
}
 801cec6:	bd10      	pop	{r4, pc}
    assert(idx < N_STARTUP_LINE);
 801cec8:	4b04      	ldr	r3, [pc, #16]	@ (801cedc <settings_write_startup_line+0x3c>)
 801ceca:	4a05      	ldr	r2, [pc, #20]	@ (801cee0 <settings_write_startup_line+0x40>)
 801cecc:	f640 0143 	movw	r1, #2115	@ 0x843
 801ced0:	4804      	ldr	r0, [pc, #16]	@ (801cee4 <settings_write_startup_line+0x44>)
 801ced2:	f005 faa9 	bl	8022428 <__assert_func>
 801ced6:	bf00      	nop
 801ced8:	200011c0 	.word	0x200011c0
 801cedc:	0802bdbc 	.word	0x0802bdbc
 801cee0:	0802be60 	.word	0x0802be60
 801cee4:	0802bdd4 	.word	0x0802bdd4

0801cee8 <settings_read_startup_line>:
{
 801cee8:	b570      	push	{r4, r5, r6, lr}
    assert(idx < N_STARTUP_LINE);
 801ceea:	2801      	cmp	r0, #1
 801ceec:	d81c      	bhi.n	801cf28 <settings_read_startup_line+0x40>
 801ceee:	4604      	mov	r4, r0
 801cef0:	460d      	mov	r5, r1
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801cef2:	4b12      	ldr	r3, [pc, #72]	@ (801cf3c <settings_read_startup_line+0x54>)
 801cef4:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801cef8:	b173      	cbz	r3, 801cf18 <settings_read_startup_line+0x30>
 801cefa:	4b10      	ldr	r3, [pc, #64]	@ (801cf3c <settings_read_startup_line+0x54>)
 801cefc:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
 801cf00:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 801cf04:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
 801cf08:	2301      	movs	r3, #1
 801cf0a:	2246      	movs	r2, #70	@ 0x46
 801cf0c:	f201 311f 	addw	r1, r1, #799	@ 0x31f
 801cf10:	4628      	mov	r0, r5
 801cf12:	47b0      	blx	r6
 801cf14:	2802      	cmp	r0, #2
 801cf16:	d00e      	beq.n	801cf36 <settings_read_startup_line+0x4e>
        *line = '\0'; // Empty line
 801cf18:	2600      	movs	r6, #0
 801cf1a:	702e      	strb	r6, [r5, #0]
        settings_write_startup_line(idx, line);
 801cf1c:	4629      	mov	r1, r5
 801cf1e:	4620      	mov	r0, r4
 801cf20:	f7ff ffbe 	bl	801cea0 <settings_write_startup_line>
        return false;
 801cf24:	4630      	mov	r0, r6
}
 801cf26:	bd70      	pop	{r4, r5, r6, pc}
    assert(idx < N_STARTUP_LINE);
 801cf28:	4b05      	ldr	r3, [pc, #20]	@ (801cf40 <settings_read_startup_line+0x58>)
 801cf2a:	4a06      	ldr	r2, [pc, #24]	@ (801cf44 <settings_read_startup_line+0x5c>)
 801cf2c:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 801cf30:	4805      	ldr	r0, [pc, #20]	@ (801cf48 <settings_read_startup_line+0x60>)
 801cf32:	f005 fa79 	bl	8022428 <__assert_func>
    return true;
 801cf36:	2001      	movs	r0, #1
 801cf38:	e7f5      	b.n	801cf26 <settings_read_startup_line+0x3e>
 801cf3a:	bf00      	nop
 801cf3c:	200011c0 	.word	0x200011c0
 801cf40:	0802bdbc 	.word	0x0802bdbc
 801cf44:	0802be44 	.word	0x0802be44
 801cf48:	0802bdd4 	.word	0x0802bdd4

0801cf4c <settings_write_coord_data>:
{
 801cf4c:	b510      	push	{r4, lr}
    assert(id <= N_CoordinateSystems);
 801cf4e:	280c      	cmp	r0, #12
 801cf50:	d810      	bhi.n	801cf74 <settings_write_coord_data+0x28>
    if(hal.nvs.type != NVS_None)
 801cf52:	4b0c      	ldr	r3, [pc, #48]	@ (801cf84 <settings_write_coord_data+0x38>)
 801cf54:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801cf58:	b15b      	cbz	r3, 801cf72 <settings_write_coord_data+0x26>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), (uint8_t *)coord_data, sizeof(coord_data_t), true);
 801cf5a:	4b0a      	ldr	r3, [pc, #40]	@ (801cf84 <settings_write_coord_data+0x38>)
 801cf5c:	f8d3 4190 	ldr.w	r4, [r3, #400]	@ 0x190
 801cf60:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801cf64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801cf68:	2301      	movs	r3, #1
 801cf6a:	220c      	movs	r2, #12
 801cf6c:	f500 7000 	add.w	r0, r0, #512	@ 0x200
 801cf70:	47a0      	blx	r4
}
 801cf72:	bd10      	pop	{r4, pc}
    assert(id <= N_CoordinateSystems);
 801cf74:	4b04      	ldr	r3, [pc, #16]	@ (801cf88 <settings_write_coord_data+0x3c>)
 801cf76:	4a05      	ldr	r2, [pc, #20]	@ (801cf8c <settings_write_coord_data+0x40>)
 801cf78:	f640 015e 	movw	r1, #2142	@ 0x85e
 801cf7c:	4804      	ldr	r0, [pc, #16]	@ (801cf90 <settings_write_coord_data+0x44>)
 801cf7e:	f005 fa53 	bl	8022428 <__assert_func>
 801cf82:	bf00      	nop
 801cf84:	200011c0 	.word	0x200011c0
 801cf88:	0802bde8 	.word	0x0802bde8
 801cf8c:	0802be28 	.word	0x0802be28
 801cf90:	0802bdd4 	.word	0x0802bdd4

0801cf94 <settings_read_coord_data>:
{
 801cf94:	b570      	push	{r4, r5, r6, lr}
    assert(id <= N_CoordinateSystems);
 801cf96:	280c      	cmp	r0, #12
 801cf98:	d81e      	bhi.n	801cfd8 <settings_read_coord_data+0x44>
 801cf9a:	4604      	mov	r4, r0
 801cf9c:	460d      	mov	r5, r1
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)coord_data, NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), sizeof(coord_data_t), true) == NVS_TransferResult_OK)) {
 801cf9e:	4b13      	ldr	r3, [pc, #76]	@ (801cfec <settings_read_coord_data+0x58>)
 801cfa0:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801cfa4:	b173      	cbz	r3, 801cfc4 <settings_read_coord_data+0x30>
 801cfa6:	4b11      	ldr	r3, [pc, #68]	@ (801cfec <settings_read_coord_data+0x58>)
 801cfa8:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
 801cfac:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801cfb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cfb4:	2301      	movs	r3, #1
 801cfb6:	220c      	movs	r2, #12
 801cfb8:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801cfbc:	4628      	mov	r0, r5
 801cfbe:	47b0      	blx	r6
 801cfc0:	2802      	cmp	r0, #2
 801cfc2:	d010      	beq.n	801cfe6 <settings_read_coord_data+0x52>
        memset(coord_data, 0, sizeof(coord_data_t));
 801cfc4:	2600      	movs	r6, #0
 801cfc6:	602e      	str	r6, [r5, #0]
 801cfc8:	606e      	str	r6, [r5, #4]
 801cfca:	60ae      	str	r6, [r5, #8]
        settings_write_coord_data(id, coord_data);
 801cfcc:	4629      	mov	r1, r5
 801cfce:	4620      	mov	r0, r4
 801cfd0:	f7ff ffbc 	bl	801cf4c <settings_write_coord_data>
        return false;
 801cfd4:	4630      	mov	r0, r6
}
 801cfd6:	bd70      	pop	{r4, r5, r6, pc}
    assert(id <= N_CoordinateSystems);
 801cfd8:	4b05      	ldr	r3, [pc, #20]	@ (801cff0 <settings_read_coord_data+0x5c>)
 801cfda:	4a06      	ldr	r2, [pc, #24]	@ (801cff4 <settings_read_coord_data+0x60>)
 801cfdc:	f640 016b 	movw	r1, #2155	@ 0x86b
 801cfe0:	4805      	ldr	r0, [pc, #20]	@ (801cff8 <settings_read_coord_data+0x64>)
 801cfe2:	f005 fa21 	bl	8022428 <__assert_func>
    return true;
 801cfe6:	2001      	movs	r0, #1
 801cfe8:	e7f5      	b.n	801cfd6 <settings_read_coord_data+0x42>
 801cfea:	bf00      	nop
 801cfec:	200011c0 	.word	0x200011c0
 801cff0:	0802bde8 	.word	0x0802bde8
 801cff4:	0802be0c 	.word	0x0802be0c
 801cff8:	0802bdd4 	.word	0x0802bdd4

0801cffc <read_global_settings>:
{
 801cffc:	b510      	push	{r4, lr}
    bool ok = hal.nvs.type != NVS_None && SETTINGS_VERSION == hal.nvs.get_byte(0) && hal.nvs.memcpy_from_nvs((uint8_t *)&settings, NVS_ADDR_GLOBAL, sizeof(settings_t), true) == NVS_TransferResult_OK;
 801cffe:	4b2b      	ldr	r3, [pc, #172]	@ (801d0ac <read_global_settings+0xb0>)
 801d000:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d004:	b1bb      	cbz	r3, 801d036 <read_global_settings+0x3a>
 801d006:	4b29      	ldr	r3, [pc, #164]	@ (801d0ac <read_global_settings+0xb0>)
 801d008:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801d00c:	2000      	movs	r0, #0
 801d00e:	4798      	blx	r3
 801d010:	2816      	cmp	r0, #22
 801d012:	d001      	beq.n	801d018 <read_global_settings+0x1c>
 801d014:	2400      	movs	r4, #0
 801d016:	e00f      	b.n	801d038 <read_global_settings+0x3c>
 801d018:	4b24      	ldr	r3, [pc, #144]	@ (801d0ac <read_global_settings+0xb0>)
 801d01a:	f8d3 4194 	ldr.w	r4, [r3, #404]	@ 0x194
 801d01e:	2301      	movs	r3, #1
 801d020:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801d024:	4619      	mov	r1, r3
 801d026:	4822      	ldr	r0, [pc, #136]	@ (801d0b0 <read_global_settings+0xb4>)
 801d028:	47a0      	blx	r4
 801d02a:	2802      	cmp	r0, #2
 801d02c:	d001      	beq.n	801d032 <read_global_settings+0x36>
 801d02e:	2400      	movs	r4, #0
 801d030:	e002      	b.n	801d038 <read_global_settings+0x3c>
 801d032:	2401      	movs	r4, #1
 801d034:	e000      	b.n	801d038 <read_global_settings+0x3c>
 801d036:	2400      	movs	r4, #0
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801d038:	4b1d      	ldr	r3, [pc, #116]	@ (801d0b0 <read_global_settings+0xb4>)
 801d03a:	7e1b      	ldrb	r3, [r3, #24]
 801d03c:	2b01      	cmp	r3, #1
 801d03e:	d026      	beq.n	801d08e <read_global_settings+0x92>
    if(settings.planner_buffer_blocks < 30 || settings.planner_buffer_blocks > 1000)
 801d040:	4b1b      	ldr	r3, [pc, #108]	@ (801d0b0 <read_global_settings+0xb4>)
 801d042:	8adb      	ldrh	r3, [r3, #22]
 801d044:	3b1e      	subs	r3, #30
 801d046:	b29b      	uxth	r3, r3
 801d048:	f240 32ca 	movw	r2, #970	@ 0x3ca
 801d04c:	4293      	cmp	r3, r2
 801d04e:	d902      	bls.n	801d056 <read_global_settings+0x5a>
        settings.planner_buffer_blocks = 35;
 801d050:	4b17      	ldr	r3, [pc, #92]	@ (801d0b0 <read_global_settings+0xb4>)
 801d052:	2223      	movs	r2, #35	@ 0x23
 801d054:	82da      	strh	r2, [r3, #22]
    if(!hal.driver_cap.spindle_encoder)
 801d056:	4b15      	ldr	r3, [pc, #84]	@ (801d0ac <read_global_settings+0xb0>)
 801d058:	f993 31d8 	ldrsb.w	r3, [r3, #472]	@ 0x1d8
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	db03      	blt.n	801d068 <read_global_settings+0x6c>
        settings.spindle.ppr = 0;
 801d060:	4b13      	ldr	r3, [pc, #76]	@ (801d0b0 <read_global_settings+0xb4>)
 801d062:	2200      	movs	r2, #0
 801d064:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
    settings.control_invert.mask |= limits_override.mask;
 801d068:	4b11      	ldr	r3, [pc, #68]	@ (801d0b0 <read_global_settings+0xb4>)
 801d06a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
 801d06e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801d072:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    settings.control_disable_pullup.mask &= ~limits_override.mask;
 801d076:	f8b3 206e 	ldrh.w	r2, [r3, #110]	@ 0x6e
 801d07a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d07e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    return ok && settings.version == SETTINGS_VERSION;
 801d082:	b174      	cbz	r4, 801d0a2 <read_global_settings+0xa6>
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	2b16      	cmp	r3, #22
 801d088:	d00d      	beq.n	801d0a6 <read_global_settings+0xaa>
 801d08a:	2000      	movs	r0, #0
 801d08c:	e00a      	b.n	801d0a4 <read_global_settings+0xa8>
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801d08e:	2000      	movs	r0, #0
 801d090:	f000 feb6 	bl	801de00 <spindle_get_caps>
 801d094:	f010 0f08 	tst.w	r0, #8
 801d098:	d1d2      	bne.n	801d040 <read_global_settings+0x44>
        settings.mode = Mode_Standard;
 801d09a:	4b05      	ldr	r3, [pc, #20]	@ (801d0b0 <read_global_settings+0xb4>)
 801d09c:	2200      	movs	r2, #0
 801d09e:	761a      	strb	r2, [r3, #24]
 801d0a0:	e7ce      	b.n	801d040 <read_global_settings+0x44>
    return ok && settings.version == SETTINGS_VERSION;
 801d0a2:	2000      	movs	r0, #0
}
 801d0a4:	bd10      	pop	{r4, pc}
    return ok && settings.version == SETTINGS_VERSION;
 801d0a6:	2001      	movs	r0, #1
 801d0a8:	e7fc      	b.n	801d0a4 <read_global_settings+0xa8>
 801d0aa:	bf00      	nop
 801d0ac:	200011c0 	.word	0x200011c0
 801d0b0:	20001bd8 	.word	0x20001bd8

0801d0b4 <settings_restore>:
{
 801d0b4:	b530      	push	{r4, r5, lr}
 801d0b6:	b097      	sub	sp, #92	@ 0x5c
 801d0b8:	4604      	mov	r4, r0
    memset(empty_line, 0xFF, sizeof(stored_line_t));
 801d0ba:	2246      	movs	r2, #70	@ 0x46
 801d0bc:	21ff      	movs	r1, #255	@ 0xff
 801d0be:	a804      	add	r0, sp, #16
 801d0c0:	f007 fab5 	bl	802462e <memset>
    *empty_line = '\0';
 801d0c4:	2000      	movs	r0, #0
 801d0c6:	f88d 0010 	strb.w	r0, [sp, #16]
    hal.nvs.put_byte(0, SETTINGS_VERSION); // Forces write to physical storage
 801d0ca:	4b35      	ldr	r3, [pc, #212]	@ (801d1a0 <settings_restore+0xec>)
 801d0cc:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801d0d0:	2116      	movs	r1, #22
 801d0d2:	4798      	blx	r3
    if (restore.defaults) {
 801d0d4:	b2e5      	uxtb	r5, r4
 801d0d6:	f014 0f01 	tst.w	r4, #1
 801d0da:	d110      	bne.n	801d0fe <settings_restore+0x4a>
    if (restore.parameters) {
 801d0dc:	f015 0f02 	tst.w	r5, #2
 801d0e0:	d135      	bne.n	801d14e <settings_restore+0x9a>
    if (restore.startup_lines) {
 801d0e2:	f015 0f04 	tst.w	r5, #4
 801d0e6:	d143      	bne.n	801d170 <settings_restore+0xbc>
    if (restore.build_info) {
 801d0e8:	f015 0f08 	tst.w	r5, #8
 801d0ec:	d149      	bne.n	801d182 <settings_restore+0xce>
    setting_details_t *details = setting_details.next;
 801d0ee:	4b2d      	ldr	r3, [pc, #180]	@ (801d1a4 <settings_restore+0xf0>)
 801d0f0:	699c      	ldr	r4, [r3, #24]
    if(details) do {
 801d0f2:	2c00      	cmp	r4, #0
 801d0f4:	d150      	bne.n	801d198 <settings_restore+0xe4>
    nvs_buffer_sync_physical();
 801d0f6:	f7f8 fd37 	bl	8015b68 <nvs_buffer_sync_physical>
}
 801d0fa:	b017      	add	sp, #92	@ 0x5c
 801d0fc:	bd30      	pop	{r4, r5, pc}
        memcpy(&settings, &defaults, sizeof(settings_t));
 801d0fe:	4c2a      	ldr	r4, [pc, #168]	@ (801d1a8 <settings_restore+0xf4>)
 801d100:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801d104:	4929      	ldr	r1, [pc, #164]	@ (801d1ac <settings_restore+0xf8>)
 801d106:	4620      	mov	r0, r4
 801d108:	f007 fbf1 	bl	80248ee <memcpy>
        settings.control_invert.mask = (settings.control_invert.mask & hal.signals_cap.mask) | limits_override.mask;
 801d10c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d110:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
        settings.spindle.invert.ccw &= spindle_get_caps(false).direction;
 801d114:	2000      	movs	r0, #0
 801d116:	f000 fe73 	bl	801de00 <spindle_get_caps>
 801d11a:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
 801d11e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 801d122:	ea02 0250 	and.w	r2, r2, r0, lsr #1
 801d126:	f362 0341 	bfi	r3, r2, #1, #1
 801d12a:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
        settings.spindle.invert.pwm &= spindle_get_caps(false).pwm_invert;
 801d12e:	2000      	movs	r0, #0
 801d130:	f000 fe66 	bl	801de00 <spindle_get_caps>
 801d134:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
 801d138:	f3c3 0280 	ubfx	r2, r3, #2, #1
 801d13c:	ea02 1210 	and.w	r2, r2, r0, lsr #4
 801d140:	f362 0382 	bfi	r3, r2, #2, #1
 801d144:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
        settings_write_global();
 801d148:	f7fe ffc4 	bl	801c0d4 <settings_write_global>
 801d14c:	e7c6      	b.n	801d0dc <settings_restore+0x28>
        memset(coord_data, 0, sizeof(coord_data));
 801d14e:	2400      	movs	r4, #0
 801d150:	9401      	str	r4, [sp, #4]
 801d152:	9402      	str	r4, [sp, #8]
 801d154:	9403      	str	r4, [sp, #12]
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801d156:	e004      	b.n	801d162 <settings_restore+0xae>
            settings_write_coord_data((coord_system_id_t)idx, &coord_data);
 801d158:	a901      	add	r1, sp, #4
 801d15a:	b2e0      	uxtb	r0, r4
 801d15c:	f7ff fef6 	bl	801cf4c <settings_write_coord_data>
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801d160:	3401      	adds	r4, #1
 801d162:	2c09      	cmp	r4, #9
 801d164:	d9f8      	bls.n	801d158 <settings_restore+0xa4>
        settings_write_coord_data(CoordinateSystem_G92, &coord_data); // Clear G92 offsets
 801d166:	a901      	add	r1, sp, #4
 801d168:	200b      	movs	r0, #11
 801d16a:	f7ff feef 	bl	801cf4c <settings_write_coord_data>
 801d16e:	e7b8      	b.n	801d0e2 <settings_restore+0x2e>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801d170:	2400      	movs	r4, #0
 801d172:	2c01      	cmp	r4, #1
 801d174:	d8b8      	bhi.n	801d0e8 <settings_restore+0x34>
            settings_write_startup_line(idx, empty_line);
 801d176:	a904      	add	r1, sp, #16
 801d178:	b2e0      	uxtb	r0, r4
 801d17a:	f7ff fe91 	bl	801cea0 <settings_write_startup_line>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801d17e:	3401      	adds	r4, #1
 801d180:	e7f7      	b.n	801d172 <settings_restore+0xbe>
        settings_write_build_info(empty_line);
 801d182:	a804      	add	r0, sp, #16
 801d184:	f7ff fe5e 	bl	801ce44 <settings_write_build_info>
        settings_write_build_info(BUILD_INFO);
 801d188:	4809      	ldr	r0, [pc, #36]	@ (801d1b0 <settings_restore+0xfc>)
 801d18a:	f7ff fe5b 	bl	801ce44 <settings_write_build_info>
 801d18e:	e7ae      	b.n	801d0ee <settings_restore+0x3a>
            details->restore();
 801d190:	4798      	blx	r3
    } while((details = details->next));
 801d192:	69a4      	ldr	r4, [r4, #24]
 801d194:	2c00      	cmp	r4, #0
 801d196:	d0ae      	beq.n	801d0f6 <settings_restore+0x42>
        if(details->restore)
 801d198:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d1f8      	bne.n	801d190 <settings_restore+0xdc>
 801d19e:	e7f8      	b.n	801d192 <settings_restore+0xde>
 801d1a0:	200011c0 	.word	0x200011c0
 801d1a4:	20000204 	.word	0x20000204
 801d1a8:	20001bd8 	.word	0x20001bd8
 801d1ac:	0802feec 	.word	0x0802feec
 801d1b0:	0802b6ec 	.word	0x0802b6ec

0801d1b4 <settings_normalize_group>:
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801d1b4:	f1a0 032c 	sub.w	r3, r0, #44	@ 0x2c
 801d1b8:	b2db      	uxtb	r3, r3
 801d1ba:	2b01      	cmp	r3, #1
 801d1bc:	d900      	bls.n	801d1c0 <settings_normalize_group+0xc>
}
 801d1be:	4770      	bx	lr
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801d1c0:	202b      	movs	r0, #43	@ 0x2b
 801d1c2:	e7fc      	b.n	801d1be <settings_normalize_group+0xa>

0801d1c4 <setting_get_details>:
{
 801d1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1c8:	4680      	mov	r8, r0
 801d1ca:	4689      	mov	r9, r1
    uint_fast16_t idx, offset = id - normalize_id(id);
 801d1cc:	f7fe fdd2 	bl	801bd74 <normalize_id>
 801d1d0:	4607      	mov	r7, r0
 801d1d2:	eba8 0800 	sub.w	r8, r8, r0
    setting_details_t *details = settings_get_details();
 801d1d6:	f7ff fba1 	bl	801c91c <settings_get_details>
 801d1da:	4605      	mov	r5, r0
    id -= offset;
 801d1dc:	e045      	b.n	801d26a <setting_get_details+0xa6>
                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801d1de:	4a24      	ldr	r2, [pc, #144]	@ (801d270 <setting_get_details+0xac>)
 801d1e0:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 801d1e4:	b372      	cbz	r2, 801d244 <setting_get_details+0x80>
                    set_axis_unit(&details->settings[idx], grbl.on_set_axis_setting_unit(details->settings[idx].id, offset));
 801d1e6:	4641      	mov	r1, r8
 801d1e8:	5b98      	ldrh	r0, [r3, r6]
 801d1ea:	4790      	blx	r2
    if(unit)
 801d1ec:	4601      	mov	r1, r0
 801d1ee:	b348      	cbz	r0, 801d244 <setting_get_details+0x80>
        strcpy((char *)setting->unit, unit);
 801d1f0:	68a0      	ldr	r0, [r4, #8]
 801d1f2:	f007 fb74 	bl	80248de <strcpy>
 801d1f6:	e025      	b.n	801d244 <setting_get_details+0x80>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d1f8:	68eb      	ldr	r3, [r5, #12]
 801d1fa:	4433      	add	r3, r6
 801d1fc:	789b      	ldrb	r3, [r3, #2]
 801d1fe:	2b1d      	cmp	r3, #29
 801d200:	d004      	beq.n	801d20c <setting_get_details+0x48>
 801d202:	2303      	movs	r3, #3
 801d204:	4543      	cmp	r3, r8
 801d206:	d823      	bhi.n	801d250 <setting_get_details+0x8c>
                    return NULL;
 801d208:	2500      	movs	r5, #0
 801d20a:	e028      	b.n	801d25e <setting_get_details+0x9a>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d20c:	4b19      	ldr	r3, [pc, #100]	@ (801d274 <setting_get_details+0xb0>)
 801d20e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d212:	4798      	blx	r3
 801d214:	4603      	mov	r3, r0
 801d216:	e7f5      	b.n	801d204 <setting_get_details+0x40>
        for(idx = 0; idx < details->n_settings; idx++) {
 801d218:	3401      	adds	r4, #1
 801d21a:	892b      	ldrh	r3, [r5, #8]
 801d21c:	42a3      	cmp	r3, r4
 801d21e:	d921      	bls.n	801d264 <setting_get_details+0xa0>
            if(details->settings[idx].id == id && is_available(&details->settings[idx])) {
 801d220:	68eb      	ldr	r3, [r5, #12]
 801d222:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801d226:	0106      	lsls	r6, r0, #4
 801d228:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801d22c:	5b9b      	ldrh	r3, [r3, r6]
 801d22e:	429f      	cmp	r7, r3
 801d230:	d1f2      	bne.n	801d218 <setting_get_details+0x54>
 801d232:	f7fe ff71 	bl	801c118 <is_available>
 801d236:	2800      	cmp	r0, #0
 801d238:	d0ee      	beq.n	801d218 <setting_get_details+0x54>
                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801d23a:	68eb      	ldr	r3, [r5, #12]
 801d23c:	199c      	adds	r4, r3, r6
 801d23e:	78a2      	ldrb	r2, [r4, #2]
 801d240:	2a2b      	cmp	r2, #43	@ 0x2b
 801d242:	d0cc      	beq.n	801d1de <setting_get_details+0x1a>
                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801d244:	f1b8 0f00 	cmp.w	r8, #0
 801d248:	d002      	beq.n	801d250 <setting_get_details+0x8c>
 801d24a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d0d3      	beq.n	801d1f8 <setting_get_details+0x34>
                if(set)
 801d250:	f1b9 0f00 	cmp.w	r9, #0
 801d254:	d001      	beq.n	801d25a <setting_get_details+0x96>
                    *set = details;
 801d256:	f8c9 5000 	str.w	r5, [r9]
                return &details->settings[idx];
 801d25a:	68ed      	ldr	r5, [r5, #12]
 801d25c:	4435      	add	r5, r6
}
 801d25e:	4628      	mov	r0, r5
 801d260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    } while((details = details->next));
 801d264:	69ad      	ldr	r5, [r5, #24]
 801d266:	2d00      	cmp	r5, #0
 801d268:	d0f9      	beq.n	801d25e <setting_get_details+0x9a>
        for(idx = 0; idx < details->n_settings; idx++) {
 801d26a:	2400      	movs	r4, #0
 801d26c:	e7d5      	b.n	801d21a <setting_get_details+0x56>
 801d26e:	bf00      	nop
 801d270:	200013a8 	.word	0x200013a8
 801d274:	200011c0 	.word	0x200011c0

0801d278 <settings_iterator>:
{
 801d278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d27a:	b083      	sub	sp, #12
 801d27c:	4604      	mov	r4, r0
 801d27e:	460e      	mov	r6, r1
 801d280:	4617      	mov	r7, r2
    if(setting->group == Group_Axis0) {
 801d282:	7883      	ldrb	r3, [r0, #2]
 801d284:	2b2b      	cmp	r3, #43	@ 0x2b
 801d286:	d020      	beq.n	801d2ca <settings_iterator+0x52>
    } else if(setting->flags.increment) {
 801d288:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801d28c:	f013 0f78 	tst.w	r3, #120	@ 0x78
 801d290:	d11e      	bne.n	801d2d0 <settings_iterator+0x58>
        ok = callback(setting, 0, data);
 801d292:	2100      	movs	r1, #0
 801d294:	47b0      	blx	r6
}
 801d296:	b003      	add	sp, #12
 801d298:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(!(ok = callback(setting, axis_idx, data)))
 801d29a:	463a      	mov	r2, r7
 801d29c:	4629      	mov	r1, r5
 801d29e:	4620      	mov	r0, r4
 801d2a0:	47b0      	blx	r6
 801d2a2:	2800      	cmp	r0, #0
 801d2a4:	d0f7      	beq.n	801d296 <settings_iterator+0x1e>
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801d2a6:	3501      	adds	r5, #1
 801d2a8:	2d02      	cmp	r5, #2
 801d2aa:	d8f4      	bhi.n	801d296 <settings_iterator+0x1e>
            if(grbl.on_set_axis_setting_unit)
 801d2ac:	4b0f      	ldr	r3, [pc, #60]	@ (801d2ec <settings_iterator+0x74>)
 801d2ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d0f1      	beq.n	801d29a <settings_iterator+0x22>
                set_axis_unit(setting, grbl.on_set_axis_setting_unit(setting->id, axis_idx));
 801d2b6:	4629      	mov	r1, r5
 801d2b8:	8820      	ldrh	r0, [r4, #0]
 801d2ba:	4798      	blx	r3
    if(unit)
 801d2bc:	4601      	mov	r1, r0
 801d2be:	2800      	cmp	r0, #0
 801d2c0:	d0eb      	beq.n	801d29a <settings_iterator+0x22>
        strcpy((char *)setting->unit, unit);
 801d2c2:	68a0      	ldr	r0, [r4, #8]
 801d2c4:	f007 fb0b 	bl	80248de <strcpy>
 801d2c8:	e7e7      	b.n	801d29a <settings_iterator+0x22>
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801d2ca:	2500      	movs	r5, #0
    bool ok = false;
 801d2cc:	4628      	mov	r0, r5
 801d2ce:	e7eb      	b.n	801d2a8 <settings_iterator+0x30>
        setting = setting_get_details(setting->id, &set);
 801d2d0:	a901      	add	r1, sp, #4
 801d2d2:	8800      	ldrh	r0, [r0, #0]
 801d2d4:	f7ff ff76 	bl	801d1c4 <setting_get_details>
        if(set->iterator)
 801d2d8:	9b01      	ldr	r3, [sp, #4]
 801d2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d2dc:	b11b      	cbz	r3, 801d2e6 <settings_iterator+0x6e>
            ok = set->iterator(setting, callback, data);
 801d2de:	463a      	mov	r2, r7
 801d2e0:	4631      	mov	r1, r6
 801d2e2:	4798      	blx	r3
 801d2e4:	e7d7      	b.n	801d296 <settings_iterator+0x1e>
    bool ok = false;
 801d2e6:	2000      	movs	r0, #0
 801d2e8:	e7d5      	b.n	801d296 <settings_iterator+0x1e>
 801d2ea:	bf00      	nop
 801d2ec:	200013a8 	.word	0x200013a8

0801d2f0 <setting_get_description>:
{
 801d2f0:	b570      	push	{r4, r5, r6, lr}
 801d2f2:	4606      	mov	r6, r0
    if(grbl.on_setting_get_description == NULL || (description = grbl.on_setting_get_description(id)) == NULL) {
 801d2f4:	4b14      	ldr	r3, [pc, #80]	@ (801d348 <setting_get_description+0x58>)
 801d2f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d2f8:	b123      	cbz	r3, 801d304 <setting_get_description+0x14>
 801d2fa:	4798      	blx	r3
 801d2fc:	4604      	mov	r4, r0
 801d2fe:	b110      	cbz	r0, 801d306 <setting_get_description+0x16>
}
 801d300:	4620      	mov	r0, r4
 801d302:	bd70      	pop	{r4, r5, r6, pc}
    const char *description = NULL;
 801d304:	2400      	movs	r4, #0
        setting_details_t *settings = settings_get_details();
 801d306:	f7ff fb09 	bl	801c91c <settings_get_details>
 801d30a:	4605      	mov	r5, r0
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801d30c:	2100      	movs	r1, #0
 801d30e:	4630      	mov	r0, r6
 801d310:	f7ff ff58 	bl	801d1c4 <setting_get_details>
        if(setting) do {
 801d314:	4606      	mov	r6, r0
 801d316:	b990      	cbnz	r0, 801d33e <setting_get_description+0x4e>
 801d318:	e7f2      	b.n	801d300 <setting_get_description+0x10>
                        description = settings->descriptions[idx].description;
 801d31a:	f8de 4004 	ldr.w	r4, [lr, #4]
                } while(idx && description == NULL);
 801d31e:	b14b      	cbz	r3, 801d334 <setting_get_description+0x44>
 801d320:	b944      	cbnz	r4, 801d334 <setting_get_description+0x44>
                    if(settings->descriptions[--idx].id == setting->id) {
 801d322:	3b01      	subs	r3, #1
 801d324:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801d328:	f832 c033 	ldrh.w	ip, [r2, r3, lsl #3]
 801d32c:	8831      	ldrh	r1, [r6, #0]
 801d32e:	458c      	cmp	ip, r1
 801d330:	d1f5      	bne.n	801d31e <setting_get_description+0x2e>
 801d332:	e7f2      	b.n	801d31a <setting_get_description+0x2a>
        } while(description == NULL && (settings = settings->next));
 801d334:	2c00      	cmp	r4, #0
 801d336:	d1e3      	bne.n	801d300 <setting_get_description+0x10>
 801d338:	69ad      	ldr	r5, [r5, #24]
 801d33a:	2d00      	cmp	r5, #0
 801d33c:	d0e0      	beq.n	801d300 <setting_get_description+0x10>
            if(settings->descriptions) {
 801d33e:	696a      	ldr	r2, [r5, #20]
 801d340:	2a00      	cmp	r2, #0
 801d342:	d0f7      	beq.n	801d334 <setting_get_description+0x44>
                idx = settings->n_descriptions;
 801d344:	8a2b      	ldrh	r3, [r5, #16]
 801d346:	e7ec      	b.n	801d322 <setting_get_description+0x32>
 801d348:	200013a8 	.word	0x200013a8

0801d34c <setting_get_group_details>:
{
 801d34c:	b510      	push	{r4, lr}
 801d34e:	4604      	mov	r4, r0
    setting_details_t *details = settings_get_details();
 801d350:	f7ff fae4 	bl	801c91c <settings_get_details>
 801d354:	4601      	mov	r1, r0
    const setting_group_detail_t *detail = NULL;
 801d356:	2000      	movs	r0, #0
 801d358:	e011      	b.n	801d37e <setting_get_group_details+0x32>
        for(idx = 0; idx < details->n_groups; idx++) {
 801d35a:	3301      	adds	r3, #1
 801d35c:	780a      	ldrb	r2, [r1, #0]
 801d35e:	429a      	cmp	r2, r3
 801d360:	d90a      	bls.n	801d378 <setting_get_group_details+0x2c>
            if(details->groups[idx].id == id)
 801d362:	684a      	ldr	r2, [r1, #4]
 801d364:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 801d368:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 801d36c:	f892 c001 	ldrb.w	ip, [r2, #1]
 801d370:	45a4      	cmp	ip, r4
 801d372:	d1f2      	bne.n	801d35a <setting_get_group_details+0xe>
                detail = &details->groups[idx];
 801d374:	4610      	mov	r0, r2
 801d376:	e7f0      	b.n	801d35a <setting_get_group_details+0xe>
    } while(detail == NULL && (details = details->next));
 801d378:	b918      	cbnz	r0, 801d382 <setting_get_group_details+0x36>
 801d37a:	6989      	ldr	r1, [r1, #24]
 801d37c:	b109      	cbz	r1, 801d382 <setting_get_group_details+0x36>
        for(idx = 0; idx < details->n_groups; idx++) {
 801d37e:	2300      	movs	r3, #0
 801d380:	e7ec      	b.n	801d35c <setting_get_group_details+0x10>
}
 801d382:	bd10      	pop	{r4, pc}

0801d384 <settings_is_group_available>:
{
 801d384:	b570      	push	{r4, r5, r6, lr}
 801d386:	4606      	mov	r6, r0
    const setting_group_detail_t *group = setting_get_group_details(id);
 801d388:	f7ff ffe0 	bl	801d34c <setting_get_group_details>
    if(!group)
 801d38c:	2800      	cmp	r0, #0
 801d38e:	d050      	beq.n	801d432 <settings_is_group_available+0xae>
 801d390:	4604      	mov	r4, r0
    bool available = group->is_available ? group->is_available(group) : false;
 801d392:	6883      	ldr	r3, [r0, #8]
 801d394:	b11b      	cbz	r3, 801d39e <settings_is_group_available+0x1a>
 801d396:	4798      	blx	r3
 801d398:	4601      	mov	r1, r0
 801d39a:	2800      	cmp	r0, #0
 801d39c:	d14c      	bne.n	801d438 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801d39e:	7863      	ldrb	r3, [r4, #1]
 801d3a0:	3b02      	subs	r3, #2
 801d3a2:	2b0c      	cmp	r3, #12
 801d3a4:	d829      	bhi.n	801d3fa <settings_is_group_available+0x76>
 801d3a6:	e8df f003 	tbb	[pc, r3]
 801d3aa:	4646      	.short	0x4646
 801d3ac:	0e46281a 	.word	0x0e46281a
 801d3b0:	46282814 	.word	0x46282814
 801d3b4:	2807      	.short	0x2807
 801d3b6:	46          	.byte	0x46
 801d3b7:	00          	.byte	0x00
            available = hal.probe.get_state != NULL;
 801d3b8:	4b20      	ldr	r3, [pc, #128]	@ (801d43c <settings_is_group_available+0xb8>)
 801d3ba:	f8d3 10fc 	ldr.w	r1, [r3, #252]	@ 0xfc
 801d3be:	3900      	subs	r1, #0
 801d3c0:	bf18      	it	ne
 801d3c2:	2101      	movne	r1, #1
            break;
 801d3c4:	e038      	b.n	801d438 <settings_is_group_available+0xb4>
            available = hal.driver_cap.spindle_sync;
 801d3c6:	4b1d      	ldr	r3, [pc, #116]	@ (801d43c <settings_is_group_available+0xb8>)
 801d3c8:	f893 11d9 	ldrb.w	r1, [r3, #473]	@ 0x1d9
 801d3cc:	f001 0101 	and.w	r1, r1, #1
            break;
 801d3d0:	e032      	b.n	801d438 <settings_is_group_available+0xb4>
            available = hal.driver_cap.spindle_pid;
 801d3d2:	4b1a      	ldr	r3, [pc, #104]	@ (801d43c <settings_is_group_available+0xb8>)
 801d3d4:	f893 11d9 	ldrb.w	r1, [r3, #473]	@ 0x1d9
 801d3d8:	f3c1 1180 	ubfx	r1, r1, #6, #1
            break;
 801d3dc:	e02c      	b.n	801d438 <settings_is_group_available+0xb4>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801d3de:	4b17      	ldr	r3, [pc, #92]	@ (801d43c <settings_is_group_available+0xb8>)
 801d3e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d3e4:	b12b      	cbz	r3, 801d3f2 <settings_is_group_available+0x6e>
 801d3e6:	2001      	movs	r0, #1
 801d3e8:	4798      	blx	r3
 801d3ea:	b2c0      	uxtb	r0, r0
 801d3ec:	b118      	cbz	r0, 801d3f6 <settings_is_group_available+0x72>
 801d3ee:	2101      	movs	r1, #1
 801d3f0:	e022      	b.n	801d438 <settings_is_group_available+0xb4>
 801d3f2:	2100      	movs	r1, #0
 801d3f4:	e020      	b.n	801d438 <settings_is_group_available+0xb4>
 801d3f6:	2100      	movs	r1, #0
            break;
 801d3f8:	e01e      	b.n	801d438 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801d3fa:	4d11      	ldr	r5, [pc, #68]	@ (801d440 <settings_is_group_available+0xbc>)
 801d3fc:	2100      	movs	r1, #0
 801d3fe:	e013      	b.n	801d428 <settings_is_group_available+0xa4>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801d400:	3401      	adds	r4, #1
 801d402:	892b      	ldrh	r3, [r5, #8]
 801d404:	42a3      	cmp	r3, r4
 801d406:	d90c      	bls.n	801d422 <settings_is_group_available+0x9e>
                            if(details->settings[idx].group == id && (available = is_available(&details->settings[idx])))
 801d408:	68eb      	ldr	r3, [r5, #12]
 801d40a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801d40e:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801d412:	7883      	ldrb	r3, [r0, #2]
 801d414:	42b3      	cmp	r3, r6
 801d416:	d1f3      	bne.n	801d400 <settings_is_group_available+0x7c>
 801d418:	f7fe fe7e 	bl	801c118 <is_available>
 801d41c:	4601      	mov	r1, r0
 801d41e:	2800      	cmp	r0, #0
 801d420:	d0ee      	beq.n	801d400 <settings_is_group_available+0x7c>
                } while(!available && (details = details->next));
 801d422:	b949      	cbnz	r1, 801d438 <settings_is_group_available+0xb4>
 801d424:	69ad      	ldr	r5, [r5, #24]
 801d426:	b13d      	cbz	r5, 801d438 <settings_is_group_available+0xb4>
                    if(details->settings) {
 801d428:	68eb      	ldr	r3, [r5, #12]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d0f9      	beq.n	801d422 <settings_is_group_available+0x9e>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801d42e:	2400      	movs	r4, #0
 801d430:	e7e7      	b.n	801d402 <settings_is_group_available+0x7e>
        return false;
 801d432:	2100      	movs	r1, #0
 801d434:	e000      	b.n	801d438 <settings_is_group_available+0xb4>
    if(!available) switch(group->id) {
 801d436:	2101      	movs	r1, #1
}
 801d438:	4608      	mov	r0, r1
 801d43a:	bd70      	pop	{r4, r5, r6, pc}
 801d43c:	200011c0 	.word	0x200011c0
 801d440:	20000204 	.word	0x20000204

0801d444 <is_group_available>:
{
 801d444:	b508      	push	{r3, lr}
    return settings_is_group_available(setting->group);
 801d446:	7880      	ldrb	r0, [r0, #2]
 801d448:	f7ff ff9c 	bl	801d384 <settings_is_group_available>
}
 801d44c:	bd08      	pop	{r3, pc}

0801d44e <setting_datatype_to_external>:
    switch(datatype) {
 801d44e:	f1a0 030a 	sub.w	r3, r0, #10
 801d452:	2b01      	cmp	r3, #1
 801d454:	d900      	bls.n	801d458 <setting_datatype_to_external+0xa>
}
 801d456:	4770      	bx	lr
            datatype = Format_Integer;
 801d458:	2005      	movs	r0, #5
 801d45a:	e7fc      	b.n	801d456 <setting_datatype_to_external+0x8>

0801d45c <setting_is_list>:
    return setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield || setting->datatype == Format_RadioButtons;
 801d45c:	7b00      	ldrb	r0, [r0, #12]
 801d45e:	3801      	subs	r0, #1
 801d460:	b2c0      	uxtb	r0, r0
}
 801d462:	2802      	cmp	r0, #2
 801d464:	bf8c      	ite	hi
 801d466:	2000      	movhi	r0, #0
 801d468:	2001      	movls	r0, #1
 801d46a:	4770      	bx	lr

0801d46c <setting_remove_element>:
{
 801d46c:	b538      	push	{r3, r4, r5, lr}
 801d46e:	460c      	mov	r4, r1
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801d470:	2100      	movs	r1, #0
 801d472:	f7ff fea7 	bl	801d1c4 <setting_get_details>
    if(setting && setting_is_list(setting))
 801d476:	b118      	cbz	r0, 801d480 <setting_remove_element+0x14>
 801d478:	4605      	mov	r5, r0
 801d47a:	f7ff ffef 	bl	801d45c <setting_is_list>
 801d47e:	b900      	cbnz	r0, 801d482 <setting_remove_element+0x16>
}
 801d480:	bd38      	pop	{r3, r4, r5, pc}
        remove_element((char *)setting->format, pos);
 801d482:	4621      	mov	r1, r4
 801d484:	6928      	ldr	r0, [r5, #16]
 801d486:	f7fe fe51 	bl	801c12c <remove_element>
}
 801d48a:	e7f9      	b.n	801d480 <setting_remove_element+0x14>

0801d48c <setting_remove_elements>:
{
 801d48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d490:	4680      	mov	r8, r0
 801d492:	460c      	mov	r4, r1
    if((setting = setting_get_details(id, NULL))) {
 801d494:	2100      	movs	r1, #0
 801d496:	f7ff fe95 	bl	801d1c4 <setting_get_details>
 801d49a:	b310      	cbz	r0, 801d4e2 <setting_remove_elements+0x56>
        char *format = (char *)setting->format, *s;
 801d49c:	6907      	ldr	r7, [r0, #16]
        uint_fast8_t idx, entries = strnumentries(format, ',');
 801d49e:	212c      	movs	r1, #44	@ 0x2c
 801d4a0:	4638      	mov	r0, r7
 801d4a2:	f7ff f93f 	bl	801c724 <strnumentries>
 801d4a6:	4606      	mov	r6, r0
        for(idx = 0; idx < entries; idx++ ) {
 801d4a8:	2500      	movs	r5, #0
 801d4aa:	e001      	b.n	801d4b0 <setting_remove_elements+0x24>
            mask >>= 1;
 801d4ac:	0864      	lsrs	r4, r4, #1
        for(idx = 0; idx < entries; idx++ ) {
 801d4ae:	3501      	adds	r5, #1
 801d4b0:	42b5      	cmp	r5, r6
 801d4b2:	d209      	bcs.n	801d4c8 <setting_remove_elements+0x3c>
            if(!(mask & 0x1))
 801d4b4:	f014 0f01 	tst.w	r4, #1
 801d4b8:	d1f8      	bne.n	801d4ac <setting_remove_elements+0x20>
                setting_remove_element(id, idx);
 801d4ba:	4629      	mov	r1, r5
 801d4bc:	4640      	mov	r0, r8
 801d4be:	f7ff ffd5 	bl	801d46c <setting_remove_element>
 801d4c2:	e7f3      	b.n	801d4ac <setting_remove_elements+0x20>
            *s = '\0';
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	7023      	strb	r3, [r4, #0]
        while((s = strrchr(format, ','))) {
 801d4c8:	212c      	movs	r1, #44	@ 0x2c
 801d4ca:	4638      	mov	r0, r7
 801d4cc:	f007 f8f8 	bl	80246c0 <strrchr>
 801d4d0:	4604      	mov	r4, r0
 801d4d2:	b130      	cbz	r0, 801d4e2 <setting_remove_elements+0x56>
            if(strncmp(s, ",N/A", 4))
 801d4d4:	2204      	movs	r2, #4
 801d4d6:	4904      	ldr	r1, [pc, #16]	@ (801d4e8 <setting_remove_elements+0x5c>)
 801d4d8:	4620      	mov	r0, r4
 801d4da:	f007 f8cc 	bl	8024676 <strncmp>
 801d4de:	2800      	cmp	r0, #0
 801d4e0:	d0f0      	beq.n	801d4c4 <setting_remove_elements+0x38>
}
 801d4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4e6:	bf00      	nop
 801d4e8:	0802be04 	.word	0x0802be04

0801d4ec <setting_validate_me>:
{
 801d4ec:	b570      	push	{r4, r5, r6, lr}
 801d4ee:	4604      	mov	r4, r0
 801d4f0:	460d      	mov	r5, r1
    switch(setting->datatype) {
 801d4f2:	7b03      	ldrb	r3, [r0, #12]
 801d4f4:	2b0b      	cmp	r3, #11
 801d4f6:	d834      	bhi.n	801d562 <setting_validate_me+0x76>
 801d4f8:	e8df f003 	tbb	[pc, r3]
 801d4fc:	06060606 	.word	0x06060606
 801d500:	28090606 	.word	0x28090606
 801d504:	0606330c 	.word	0x0606330c
            status = setting_validate_me_uint(setting, svalue);
 801d508:	f7ff f963 	bl	801c7d2 <setting_validate_me_uint>
}
 801d50c:	bd70      	pop	{r4, r5, r6, pc}
            status = validate_value(setting, value);
 801d50e:	f7ff f99d 	bl	801c84c <validate_value>
            break;
 801d512:	e7fb      	b.n	801d50c <setting_validate_me+0x20>
                uint_fast16_t len = strlen(svalue);
 801d514:	4608      	mov	r0, r1
 801d516:	f7ea fdf3 	bl	8008100 <strlen>
 801d51a:	4606      	mov	r6, r0
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801d51c:	4b12      	ldr	r3, [pc, #72]	@ (801d568 <setting_validate_me+0x7c>)
 801d51e:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 801d522:	f013 0f02 	tst.w	r3, #2
 801d526:	d001      	beq.n	801d52c <setting_validate_me+0x40>
 801d528:	2808      	cmp	r0, #8
 801d52a:	d007      	beq.n	801d53c <setting_validate_me+0x50>
                    status = validate_value(setting, (float)len);
 801d52c:	ee07 6a90 	vmov	s15, r6
 801d530:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801d534:	4620      	mov	r0, r4
 801d536:	f7ff f989 	bl	801c84c <validate_value>
 801d53a:	e7e7      	b.n	801d50c <setting_validate_me+0x20>
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801d53c:	4629      	mov	r1, r5
 801d53e:	480b      	ldr	r0, [pc, #44]	@ (801d56c <setting_validate_me+0x80>)
 801d540:	f7ea fd7e 	bl	8008040 <strcmp>
 801d544:	2800      	cmp	r0, #0
 801d546:	d1f1      	bne.n	801d52c <setting_validate_me+0x40>
                    status = Status_InvalidStatement;
 801d548:	2003      	movs	r0, #3
 801d54a:	e7df      	b.n	801d50c <setting_validate_me+0x20>
                uint_fast16_t len = strlen(svalue);
 801d54c:	4608      	mov	r0, r1
 801d54e:	f7ea fdd7 	bl	8008100 <strlen>
 801d552:	ee00 0a10 	vmov	s0, r0
                status = validate_value(setting, (float)len);
 801d556:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d55a:	4620      	mov	r0, r4
 801d55c:	f7ff f976 	bl	801c84c <validate_value>
            break;
 801d560:	e7d4      	b.n	801d50c <setting_validate_me+0x20>
    switch(setting->datatype) {
 801d562:	2000      	movs	r0, #0
 801d564:	e7d2      	b.n	801d50c <setting_validate_me+0x20>
 801d566:	bf00      	nop
 801d568:	200011c0 	.word	0x200011c0
 801d56c:	0802bdb0 	.word	0x0802bdb0

0801d570 <settings_store_setting>:

// A helper method to set settings from command line
status_code_t settings_store_setting (setting_id_t id, char *svalue)
{
 801d570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d572:	b085      	sub	sp, #20
 801d574:	4606      	mov	r6, r0
 801d576:	460c      	mov	r4, r1
    uint_fast8_t set_idx = 0;
 801d578:	2300      	movs	r3, #0
 801d57a:	9303      	str	r3, [sp, #12]
    uint32_t int_value = 0;
 801d57c:	9302      	str	r3, [sp, #8]
    float value = NAN;
 801d57e:	4b5c      	ldr	r3, [pc, #368]	@ (801d6f0 <settings_store_setting+0x180>)
 801d580:	9301      	str	r3, [sp, #4]
    status_code_t status = Status_OK;
    setting_details_t *set;
    const setting_detail_t *setting = setting_get_details(id, &set);
 801d582:	4669      	mov	r1, sp
 801d584:	f7ff fe1e 	bl	801d1c4 <setting_get_details>

    if(setting == NULL) {
 801d588:	4605      	mov	r5, r0
 801d58a:	b938      	cbnz	r0, 801d59c <settings_store_setting+0x2c>
        if(id == Setting_SpindlePWMBehaviour) {
 801d58c:	2e07      	cmp	r6, #7
 801d58e:	f040 80aa 	bne.w	801d6e6 <settings_store_setting+0x176>
            set = &setting_details;
 801d592:	4b58      	ldr	r3, [pc, #352]	@ (801d6f4 <settings_store_setting+0x184>)
 801d594:	9300      	str	r3, [sp, #0]
            setting = &setting_detail[Setting_SpindlePWMBehaviour];
 801d596:	4d58      	ldr	r5, [pc, #352]	@ (801d6f8 <settings_store_setting+0x188>)
 801d598:	e000      	b.n	801d59c <settings_store_setting+0x2c>
            return Status_SettingDisabled;
    }

    // Trim leading spaces
    while(*svalue == ' ')
        svalue++;
 801d59a:	3401      	adds	r4, #1
    while(*svalue == ' ')
 801d59c:	7823      	ldrb	r3, [r4, #0]
 801d59e:	2b20      	cmp	r3, #32
 801d5a0:	d0fb      	beq.n	801d59a <settings_store_setting+0x2a>

    if(setting->datatype == Format_Decimal)  {
 801d5a2:	7b2b      	ldrb	r3, [r5, #12]
 801d5a4:	2b06      	cmp	r3, #6
 801d5a6:	d022      	beq.n	801d5ee <settings_store_setting+0x7e>
    return datatype == Format_String || datatype == Format_Password || datatype == Format_IPv4;
 801d5a8:	3b07      	subs	r3, #7
 801d5aa:	b2db      	uxtb	r3, r3
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
            return Status_BadNumberFormat;
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801d5ac:	2b02      	cmp	r3, #2
 801d5ae:	d82a      	bhi.n	801d606 <settings_store_setting+0x96>
        return Status_BadNumberFormat;

    if((status = setting_validate_me(setting, value, svalue)) != Status_OK) {
 801d5b0:	4621      	mov	r1, r4
 801d5b2:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d5b6:	4628      	mov	r0, r5
 801d5b8:	f7ff ff98 	bl	801d4ec <setting_validate_me>
 801d5bc:	4607      	mov	r7, r0
 801d5be:	bb70      	cbnz	r0, 801d61e <settings_store_setting+0xae>
            status =  Status_SettingStepPulseMin;

        return status;
    }

    switch(setting->type) {
 801d5c0:	7f2a      	ldrb	r2, [r5, #28]
 801d5c2:	2a07      	cmp	r2, #7
 801d5c4:	d863      	bhi.n	801d68e <settings_store_setting+0x11e>
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	4093      	lsls	r3, r2
 801d5ca:	f013 0faa 	tst.w	r3, #170	@ 0xaa
 801d5ce:	d14a      	bne.n	801d666 <settings_store_setting+0xf6>
 801d5d0:	f013 0f55 	tst.w	r3, #85	@ 0x55
 801d5d4:	d05b      	beq.n	801d68e <settings_store_setting+0x11e>

        case Setting_NonCore:
        case Setting_IsExtended:
        case Setting_IsLegacy:
        case Setting_IsExpanded:
            switch(setting->datatype) {
 801d5d6:	7b2b      	ldrb	r3, [r5, #12]
 801d5d8:	2b0b      	cmp	r3, #11
 801d5da:	f200 8086 	bhi.w	801d6ea <settings_store_setting+0x17a>
 801d5de:	e8df f003 	tbb	[pc, r3]
 801d5e2:	3434      	.short	0x3434
 801d5e4:	3e2d3434 	.word	0x3e2d3434
 801d5e8:	84282824 	.word	0x84282824
 801d5ec:	3934      	.short	0x3934
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
 801d5ee:	aa01      	add	r2, sp, #4
 801d5f0:	a903      	add	r1, sp, #12
 801d5f2:	4620      	mov	r0, r4
 801d5f4:	f7f7 ff66 	bl	80154c4 <read_float>
 801d5f8:	2800      	cmp	r0, #0
 801d5fa:	d1d9      	bne.n	801d5b0 <settings_store_setting+0x40>
 801d5fc:	7f2b      	ldrb	r3, [r5, #28]
 801d5fe:	2b01      	cmp	r3, #1
 801d600:	d9d6      	bls.n	801d5b0 <settings_store_setting+0x40>
            return Status_BadNumberFormat;
 801d602:	2702      	movs	r7, #2
 801d604:	e044      	b.n	801d690 <settings_store_setting+0x120>
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801d606:	aa02      	add	r2, sp, #8
 801d608:	a903      	add	r1, sp, #12
 801d60a:	4620      	mov	r0, r4
 801d60c:	f7f7 ff10 	bl	8015430 <read_uint>
 801d610:	2800      	cmp	r0, #0
 801d612:	d0cd      	beq.n	801d5b0 <settings_store_setting+0x40>
 801d614:	7f2b      	ldrb	r3, [r5, #28]
 801d616:	2b01      	cmp	r3, #1
 801d618:	d9ca      	bls.n	801d5b0 <settings_store_setting+0x40>
        return Status_BadNumberFormat;
 801d61a:	2702      	movs	r7, #2
 801d61c:	e038      	b.n	801d690 <settings_store_setting+0x120>
        if(setting == Setting_PulseMicroseconds && status == Status_SettingValueOutOfRange)
 801d61e:	2d00      	cmp	r5, #0
 801d620:	d136      	bne.n	801d690 <settings_store_setting+0x120>
 801d622:	2834      	cmp	r0, #52	@ 0x34
 801d624:	d134      	bne.n	801d690 <settings_store_setting+0x120>
            status =  Status_SettingStepPulseMin;
 801d626:	2706      	movs	r7, #6
        return status;
 801d628:	e032      	b.n	801d690 <settings_store_setting+0x120>

                case Format_Decimal:
                    *((float *)(setting->value)) = value;
 801d62a:	6a2b      	ldr	r3, [r5, #32]
 801d62c:	9a01      	ldr	r2, [sp, #4]
 801d62e:	601a      	str	r2, [r3, #0]
                    break;
 801d630:	e02d      	b.n	801d68e <settings_store_setting+0x11e>

                case Format_String:
                case Format_Password:
                    strcpy(((char *)(setting->value)), svalue);
 801d632:	4621      	mov	r1, r4
 801d634:	6a28      	ldr	r0, [r5, #32]
 801d636:	f007 f952 	bl	80248de <strcpy>
                    break;
 801d63a:	e028      	b.n	801d68e <settings_store_setting+0x11e>

                case Format_AxisMask:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value & AXES_BITMASK;
 801d63c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801d640:	6a2a      	ldr	r2, [r5, #32]
 801d642:	f003 0307 	and.w	r3, r3, #7
 801d646:	7013      	strb	r3, [r2, #0]
                    break;
 801d648:	e021      	b.n	801d68e <settings_store_setting+0x11e>
                case Format_Bool:
                case Format_Bitfield:
                case Format_XBitfield:
                case Format_RadioButtons:
                case Format_Int8:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value;
 801d64a:	6a2b      	ldr	r3, [r5, #32]
 801d64c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801d650:	701a      	strb	r2, [r3, #0]
                    break;
 801d652:	e01c      	b.n	801d68e <settings_store_setting+0x11e>

                case Format_Int16:
                    *((uint16_t *)(setting->value)) = (uint16_t)int_value;
 801d654:	6a2b      	ldr	r3, [r5, #32]
 801d656:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d65a:	801a      	strh	r2, [r3, #0]
                    break;
 801d65c:	e017      	b.n	801d68e <settings_store_setting+0x11e>

                case Format_Integer:
                    *((uint32_t *)(setting->value)) = (uint32_t)int_value;
 801d65e:	6a2b      	ldr	r3, [r5, #32]
 801d660:	9a02      	ldr	r2, [sp, #8]
 801d662:	601a      	str	r2, [r3, #0]
                    break;
 801d664:	e013      	b.n	801d68e <settings_store_setting+0x11e>

        case Setting_NonCoreFn:
        case Setting_IsExtendedFn:
        case Setting_IsLegacyFn:
        case Setting_IsExpandedFn:
            switch(setting->datatype) {
 801d666:	7b2b      	ldrb	r3, [r5, #12]
 801d668:	2b06      	cmp	r3, #6
 801d66a:	d00a      	beq.n	801d682 <settings_store_setting+0x112>
 801d66c:	d313      	bcc.n	801d696 <settings_store_setting+0x126>
 801d66e:	3b07      	subs	r3, #7
 801d670:	b2db      	uxtb	r3, r3
 801d672:	2b02      	cmp	r3, #2
 801d674:	d80f      	bhi.n	801d696 <settings_store_setting+0x126>
                    break;

                case Format_String:
                case Format_Password:
                case Format_IPv4:
                    status = ((setting_set_string_ptr)(setting->value))(id, svalue);
 801d676:	6a2b      	ldr	r3, [r5, #32]
 801d678:	4621      	mov	r1, r4
 801d67a:	4630      	mov	r0, r6
 801d67c:	4798      	blx	r3
 801d67e:	4607      	mov	r7, r0
                    break;
 801d680:	e005      	b.n	801d68e <settings_store_setting+0x11e>
                    status = ((setting_set_float_ptr)(setting->value))(id, value);
 801d682:	6a2b      	ldr	r3, [r5, #32]
 801d684:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d688:	4630      	mov	r0, r6
 801d68a:	4798      	blx	r3
 801d68c:	4607      	mov	r7, r0
                    break;
            }
            break;
    }

    if(status == Status_OK) {
 801d68e:	b147      	cbz	r7, 801d6a2 <settings_store_setting+0x132>
            set->on_changed(&settings, changed);
        }
    }

    return status;
}
 801d690:	4638      	mov	r0, r7
 801d692:	b005      	add	sp, #20
 801d694:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    status = ((setting_set_int_ptr)(setting->value))(id, (uint_fast16_t)int_value);
 801d696:	6a2b      	ldr	r3, [r5, #32]
 801d698:	9902      	ldr	r1, [sp, #8]
 801d69a:	4630      	mov	r0, r6
 801d69c:	4798      	blx	r3
 801d69e:	4607      	mov	r7, r0
                    break;
 801d6a0:	e7f5      	b.n	801d68e <settings_store_setting+0x11e>
        xbar_set_homing_source();
 801d6a2:	f7ef f915 	bl	800c8d0 <xbar_set_homing_source>
        if(set->save)
 801d6a6:	9b00      	ldr	r3, [sp, #0]
 801d6a8:	6a1b      	ldr	r3, [r3, #32]
 801d6aa:	b103      	cbz	r3, 801d6ae <settings_store_setting+0x13e>
            set->save();
 801d6ac:	4798      	blx	r3
        if(set->on_changed) {
 801d6ae:	9b00      	ldr	r3, [sp, #0]
 801d6b0:	69db      	ldr	r3, [r3, #28]
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d0ec      	beq.n	801d690 <settings_store_setting+0x120>
            settings_changed_flags_t changed = {0};
 801d6b6:	f04f 0400 	mov.w	r4, #0
            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801d6ba:	f7ff f911 	bl	801c8e0 <settings_changed_spindle>
 801d6be:	b920      	cbnz	r0, 801d6ca <settings_store_setting+0x15a>
 801d6c0:	4b0e      	ldr	r3, [pc, #56]	@ (801d6fc <settings_store_setting+0x18c>)
 801d6c2:	781b      	ldrb	r3, [r3, #0]
 801d6c4:	b16b      	cbz	r3, 801d6e2 <settings_store_setting+0x172>
 801d6c6:	2301      	movs	r3, #1
 801d6c8:	e000      	b.n	801d6cc <settings_store_setting+0x15c>
 801d6ca:	2301      	movs	r3, #1
 801d6cc:	f363 0400 	bfi	r4, r3, #0, #1
            machine_mode_changed = false;
 801d6d0:	4b0a      	ldr	r3, [pc, #40]	@ (801d6fc <settings_store_setting+0x18c>)
 801d6d2:	2200      	movs	r2, #0
 801d6d4:	701a      	strb	r2, [r3, #0]
            set->on_changed(&settings, changed);
 801d6d6:	9b00      	ldr	r3, [sp, #0]
 801d6d8:	69db      	ldr	r3, [r3, #28]
 801d6da:	4621      	mov	r1, r4
 801d6dc:	4808      	ldr	r0, [pc, #32]	@ (801d700 <settings_store_setting+0x190>)
 801d6de:	4798      	blx	r3
 801d6e0:	e7d6      	b.n	801d690 <settings_store_setting+0x120>
            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	e7f2      	b.n	801d6cc <settings_store_setting+0x15c>
            return Status_SettingDisabled;
 801d6e6:	2735      	movs	r7, #53	@ 0x35
 801d6e8:	e7d2      	b.n	801d690 <settings_store_setting+0x120>
 801d6ea:	2702      	movs	r7, #2
 801d6ec:	e7d0      	b.n	801d690 <settings_store_setting+0x120>
 801d6ee:	bf00      	nop
 801d6f0:	7fc00000 	.word	0x7fc00000
 801d6f4:	20000204 	.word	0x20000204
 801d6f8:	0802edb8 	.word	0x0802edb8
 801d6fc:	20001bd4 	.word	0x20001bd4
 801d700:	20001bd8 	.word	0x20001bd8

0801d704 <settings_add_spindle_type>:

bool settings_add_spindle_type (const char *type)
{
 801d704:	b570      	push	{r4, r5, r6, lr}
 801d706:	4604      	mov	r4, r0
    bool ok;

    if((ok = strlen(spindle_types) + strlen(type) + 1 < sizeof(spindle_types))) {
 801d708:	480d      	ldr	r0, [pc, #52]	@ (801d740 <settings_add_spindle_type+0x3c>)
 801d70a:	f7ea fcf9 	bl	8008100 <strlen>
 801d70e:	4605      	mov	r5, r0
 801d710:	4620      	mov	r0, r4
 801d712:	f7ea fcf5 	bl	8008100 <strlen>
 801d716:	182b      	adds	r3, r5, r0
 801d718:	3301      	adds	r3, #1
 801d71a:	2b63      	cmp	r3, #99	@ 0x63
 801d71c:	bf94      	ite	ls
 801d71e:	2601      	movls	r6, #1
 801d720:	2600      	movhi	r6, #0
 801d722:	d806      	bhi.n	801d732 <settings_add_spindle_type+0x2e>
        if(*spindle_types != '\0')
 801d724:	4b06      	ldr	r3, [pc, #24]	@ (801d740 <settings_add_spindle_type+0x3c>)
 801d726:	781b      	ldrb	r3, [r3, #0]
 801d728:	b92b      	cbnz	r3, 801d736 <settings_add_spindle_type+0x32>
            strcat(spindle_types, ",");
        strcat(spindle_types, type);
 801d72a:	4621      	mov	r1, r4
 801d72c:	4804      	ldr	r0, [pc, #16]	@ (801d740 <settings_add_spindle_type+0x3c>)
 801d72e:	f006 ff86 	bl	802463e <strcat>
    }

    return ok;
}
 801d732:	4630      	mov	r0, r6
 801d734:	bd70      	pop	{r4, r5, r6, pc}
            strcat(spindle_types, ",");
 801d736:	4b03      	ldr	r3, [pc, #12]	@ (801d744 <settings_add_spindle_type+0x40>)
 801d738:	881a      	ldrh	r2, [r3, #0]
 801d73a:	4b01      	ldr	r3, [pc, #4]	@ (801d740 <settings_add_spindle_type+0x3c>)
 801d73c:	535a      	strh	r2, [r3, r5]
 801d73e:	e7f4      	b.n	801d72a <settings_add_spindle_type+0x26>
 801d740:	20001b70 	.word	0x20001b70
 801d744:	0802b9b0 	.word	0x0802b9b0

0801d748 <settings_clear>:

// Clear settings chain
void settings_clear (void)
{
    setting_details.next = NULL;
 801d748:	4b02      	ldr	r3, [pc, #8]	@ (801d754 <settings_clear+0xc>)
 801d74a:	2200      	movs	r2, #0
 801d74c:	619a      	str	r2, [r3, #24]
    settingsd = &setting_details;
 801d74e:	4a02      	ldr	r2, [pc, #8]	@ (801d758 <settings_clear+0x10>)
 801d750:	6013      	str	r3, [r2, #0]
}
 801d752:	4770      	bx	lr
 801d754:	20000204 	.word	0x20000204
 801d758:	20000200 	.word	0x20000200

0801d75c <settings_init>:

// Initialize the config subsystem
void settings_init (void)
{
 801d75c:	b538      	push	{r3, r4, r5, lr}
    settings_changed_flags_t changed = {0};
 801d75e:	f04f 0500 	mov.w	r5, #0
    grbl.tool_table.read = settings_read_tool_data;
    grbl.tool_table.write = settings_write_tool_data;
    grbl.tool_table.clear = settings_clear_tool_data;
#else
    static tool_data_t tools;
    if(grbl.tool_table.tool == NULL) {
 801d762:	4b71      	ldr	r3, [pc, #452]	@ (801d928 <settings_init+0x1cc>)
 801d764:	69db      	ldr	r3, [r3, #28]
 801d766:	2b00      	cmp	r3, #0
 801d768:	f000 8082 	beq.w	801d870 <settings_init+0x114>
        grbl.tool_table.n_tools = 0;
        grbl.tool_table.tool = &tools;
    }
#endif

    if(!read_global_settings()) {
 801d76c:	f7ff fc46 	bl	801cffc <read_global_settings>
 801d770:	2800      	cmp	r0, #0
 801d772:	f040 8083 	bne.w	801d87c <settings_init+0x120>

        settings_restore_t settings = settings_all;
        settings.defaults = 1; // Ensure global settings get restored

        if(hal.nvs.type != NVS_None)
 801d776:	4b6d      	ldr	r3, [pc, #436]	@ (801d92c <settings_init+0x1d0>)
 801d778:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 801d77c:	b11b      	cbz	r3, 801d786 <settings_init+0x2a>
            grbl.report.status_message(Status_SettingReadFail);
 801d77e:	4b6a      	ldr	r3, [pc, #424]	@ (801d928 <settings_init+0x1cc>)
 801d780:	689b      	ldr	r3, [r3, #8]
 801d782:	2007      	movs	r0, #7
 801d784:	4798      	blx	r3

        settings_restore(settings); // Force restore all non-volatile storage data.
 801d786:	f04f 001f 	mov.w	r0, #31
 801d78a:	f7ff fc93 	bl	801d0b4 <settings_restore>
        report_init();
 801d78e:	f7fb fc27 	bl	8018fe0 <report_init>
#if COMPATIBILITY_LEVEL <= 1
        report_grbl_settings(true, NULL);
 801d792:	2100      	movs	r1, #0
 801d794:	2001      	movs	r0, #1
 801d796:	f7fb fcc3 	bl	8019120 <report_grbl_settings>
#else
        report_grbl_settings(false, NULL);
#endif
        changed.spindle = settings_changed_spindle();
 801d79a:	f7ff f8a1 	bl	801c8e0 <settings_changed_spindle>
 801d79e:	f360 0500 	bfi	r5, r0, #0, #1

        if(hal.probe.configure) // Initialize probe invert mask.
            hal.probe.configure(false, false);
    }

    settings.offset_lock.mask &= ~0b111; // TODO: remove
 801d7a2:	4c63      	ldr	r4, [pc, #396]	@ (801d930 <settings_init+0x1d4>)
 801d7a4:	f894 3102 	ldrb.w	r3, [r4, #258]	@ 0x102
 801d7a8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801d7ac:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102
    settings.offset_lock.mask |= settings.parking.flags.offset_lock; // TODO: remove
 801d7b0:	f894 2128 	ldrb.w	r2, [r4, #296]	@ 0x128
 801d7b4:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 801d7b8:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102

    xbar_set_homing_source();
 801d7bc:	f7ef f888 	bl	800c8d0 <xbar_set_homing_source>

    tmp_set_soft_limits();
 801d7c0:	f7fe f93a 	bl	801ba38 <tmp_set_soft_limits>
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 801d7c4:	f894 3124 	ldrb.w	r3, [r4, #292]	@ 0x124
 801d7c8:	f013 0301 	ands.w	r3, r3, #1
 801d7cc:	d000      	beq.n	801d7d0 <settings_init+0x74>
 801d7ce:	2307      	movs	r3, #7
 801d7d0:	4a58      	ldr	r2, [pc, #352]	@ (801d934 <settings_init+0x1d8>)
 801d7d2:	f882 3094 	strb.w	r3, [r2, #148]	@ 0x94
    tmp_set_hard_limits();

    if(spindle_get_count() == 0)
 801d7d6:	f000 fc01 	bl	801dfdc <spindle_get_count>
 801d7da:	2800      	cmp	r0, #0
 801d7dc:	d07e      	beq.n	801d8dc <settings_init+0x180>
        spindle_add_null();

    spindle_cap_t spindle_cap = spindle_get_caps(false);
 801d7de:	2000      	movs	r0, #0
 801d7e0:	f000 fb0e 	bl	801de00 <spindle_get_caps>
    if(spindle_cap.gpio_controlled) {
 801d7e4:	f410 7f80 	tst.w	r0, #256	@ 0x100
 801d7e8:	d17b      	bne.n	801d8e2 <settings_init+0x186>
        spindle_state.pwm = spindle_cap.pwm_invert;

        setting_remove_elements(Setting_SpindleInvertMask, spindle_state.mask);
    }

    setting_remove_elements(Setting_ControlInvertMask, hal.signals_cap.mask & ~limits_override.mask);
 801d7ea:	4c50      	ldr	r4, [pc, #320]	@ (801d92c <settings_init+0x1d0>)
 801d7ec:	f8b4 11dc 	ldrh.w	r1, [r4, #476]	@ 0x1dc
 801d7f0:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 801d7f4:	200e      	movs	r0, #14
 801d7f6:	f7ff fe49 	bl	801d48c <setting_remove_elements>

    if(hal.stepper.get_ganged)
 801d7fa:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 801d7fe:	b12b      	cbz	r3, 801d80c <settings_init+0xb0>
        setting_remove_elements(Setting_GangedDirInvertMask, hal.stepper.get_ganged(false).mask);
 801d800:	2000      	movs	r0, #0
 801d802:	4798      	blx	r3
 801d804:	b2c1      	uxtb	r1, r0
 801d806:	2008      	movs	r0, #8
 801d808:	f7ff fe40 	bl	801d48c <setting_remove_elements>

    setting_remove_elements(Setting_CoolantInvertMask, hal.coolant_cap.mask);
 801d80c:	4c47      	ldr	r4, [pc, #284]	@ (801d92c <settings_init+0x1d0>)
 801d80e:	f894 11e4 	ldrb.w	r1, [r4, #484]	@ 0x1e4
 801d812:	200f      	movs	r0, #15
 801d814:	f7ff fe3a 	bl	801d48c <setting_remove_elements>

#if COMPATIBILITY_LEVEL <= 1
    if(hal.homing.get_state == NULL) {
 801d818:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d070      	beq.n	801d900 <settings_init+0x1a4>
        homing.use_limit_switches = Off;
        setting_remove_elements(Setting_HomingEnable, homing.value);
    }
#endif

    setting_details_t *details = setting_details.next;
 801d81e:	4b46      	ldr	r3, [pc, #280]	@ (801d938 <settings_init+0x1dc>)
 801d820:	699c      	ldr	r4, [r3, #24]

    if(details) do {
 801d822:	2c00      	cmp	r4, #0
 801d824:	d178      	bne.n	801d918 <settings_init+0x1bc>
            details->load();
        if(details->on_changed)
            details->on_changed(&settings, changed);
    } while((details = details->next));

    setting_details.on_changed = hal.settings_changed;
 801d826:	4b41      	ldr	r3, [pc, #260]	@ (801d92c <settings_init+0x1d0>)
 801d828:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 801d82c:	4b42      	ldr	r3, [pc, #264]	@ (801d938 <settings_init+0x1dc>)
 801d82e:	61da      	str	r2, [r3, #28]

    // Sanity checks for spindle configuration
    if(settings.spindle.flags.type >= spindle_get_count())
 801d830:	4b3f      	ldr	r3, [pc, #252]	@ (801d930 <settings_init+0x1d4>)
 801d832:	f893 40e7 	ldrb.w	r4, [r3, #231]	@ 0xe7
 801d836:	f3c4 0484 	ubfx	r4, r4, #2, #5
 801d83a:	f000 fbcf 	bl	801dfdc <spindle_get_count>
 801d83e:	4284      	cmp	r4, r0
 801d840:	db06      	blt.n	801d850 <settings_init+0xf4>
        settings.spindle.flags.type = 0;
 801d842:	4b3b      	ldr	r3, [pc, #236]	@ (801d930 <settings_init+0x1d4>)
 801d844:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 801d848:	f36f 0286 	bfc	r2, #2, #5
 801d84c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if(settings.offset_lock.encoder_spindle >= spindle_get_count())
 801d850:	4b37      	ldr	r3, [pc, #220]	@ (801d930 <settings_init+0x1d4>)
 801d852:	f893 4102 	ldrb.w	r4, [r3, #258]	@ 0x102
 801d856:	08e4      	lsrs	r4, r4, #3
 801d858:	f000 fbc0 	bl	801dfdc <spindle_get_count>
 801d85c:	4284      	cmp	r4, r0
 801d85e:	db06      	blt.n	801d86e <settings_init+0x112>
        settings.offset_lock.encoder_spindle = 0;
 801d860:	4b33      	ldr	r3, [pc, #204]	@ (801d930 <settings_init+0x1d4>)
 801d862:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 801d866:	f36f 02c7 	bfc	r2, #3, #5
 801d86a:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
}
 801d86e:	bd38      	pop	{r3, r4, r5, pc}
        grbl.tool_table.n_tools = 0;
 801d870:	4b2d      	ldr	r3, [pc, #180]	@ (801d928 <settings_init+0x1cc>)
 801d872:	2200      	movs	r2, #0
 801d874:	619a      	str	r2, [r3, #24]
        grbl.tool_table.tool = &tools;
 801d876:	4a31      	ldr	r2, [pc, #196]	@ (801d93c <settings_init+0x1e0>)
 801d878:	61da      	str	r2, [r3, #28]
 801d87a:	e777      	b.n	801d76c <settings_init+0x10>
        memset(grbl.tool_table.tool, 0, sizeof(tool_data_t)); // First entry is for tools not in tool table
 801d87c:	492a      	ldr	r1, [pc, #168]	@ (801d928 <settings_init+0x1cc>)
 801d87e:	69cb      	ldr	r3, [r1, #28]
 801d880:	2200      	movs	r2, #0
 801d882:	601a      	str	r2, [r3, #0]
 801d884:	605a      	str	r2, [r3, #4]
 801d886:	609a      	str	r2, [r3, #8]
 801d888:	60da      	str	r2, [r3, #12]
 801d88a:	611a      	str	r2, [r3, #16]
        if(grbl.tool_table.n_tools) {
 801d88c:	698b      	ldr	r3, [r1, #24]
 801d88e:	bb1b      	cbnz	r3, 801d8d8 <settings_init+0x17c>
        report_init();
 801d890:	f7fb fba6 	bl	8018fe0 <report_init>
        changed.spindle = settings_changed_spindle();
 801d894:	f7ff f824 	bl	801c8e0 <settings_changed_spindle>
 801d898:	f360 0500 	bfi	r5, r0, #0, #1
        hal.settings_changed(&settings, changed);
 801d89c:	4c23      	ldr	r4, [pc, #140]	@ (801d92c <settings_init+0x1d0>)
 801d89e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 801d8a2:	4629      	mov	r1, r5
 801d8a4:	4822      	ldr	r0, [pc, #136]	@ (801d930 <settings_init+0x1d4>)
 801d8a6:	4798      	blx	r3
        if(hal.probe.configure) // Initialize probe invert mask.
 801d8a8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	f43f af78 	beq.w	801d7a2 <settings_init+0x46>
            hal.probe.configure(false, false);
 801d8b2:	2100      	movs	r1, #0
 801d8b4:	4608      	mov	r0, r1
 801d8b6:	4798      	blx	r3
 801d8b8:	e773      	b.n	801d7a2 <settings_init+0x46>
                grbl.tool_table.read(idx, &grbl.tool_table.tool[idx]);
 801d8ba:	4b1b      	ldr	r3, [pc, #108]	@ (801d928 <settings_init+0x1cc>)
 801d8bc:	6a1a      	ldr	r2, [r3, #32]
 801d8be:	69db      	ldr	r3, [r3, #28]
 801d8c0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801d8c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	4790      	blx	r2
            for(idx = 1; idx <= grbl.tool_table.n_tools; idx++)
 801d8cc:	3401      	adds	r4, #1
 801d8ce:	4b16      	ldr	r3, [pc, #88]	@ (801d928 <settings_init+0x1cc>)
 801d8d0:	699b      	ldr	r3, [r3, #24]
 801d8d2:	42a3      	cmp	r3, r4
 801d8d4:	d2f1      	bcs.n	801d8ba <settings_init+0x15e>
 801d8d6:	e7db      	b.n	801d890 <settings_init+0x134>
 801d8d8:	2401      	movs	r4, #1
 801d8da:	e7f8      	b.n	801d8ce <settings_init+0x172>
        spindle_add_null();
 801d8dc:	f000 fb3a 	bl	801df54 <spindle_add_null>
 801d8e0:	e77d      	b.n	801d7de <settings_init+0x82>
        spindle_state_t spindle_state = { .on = On };
 801d8e2:	f04f 0101 	mov.w	r1, #1
        spindle_state.ccw = spindle_cap.direction;
 801d8e6:	f3c0 0340 	ubfx	r3, r0, #1, #1
 801d8ea:	f363 0141 	bfi	r1, r3, #1, #1
        spindle_state.pwm = spindle_cap.pwm_invert;
 801d8ee:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801d8f2:	f360 0182 	bfi	r1, r0, #2, #1
        setting_remove_elements(Setting_SpindleInvertMask, spindle_state.mask);
 801d8f6:	b2c9      	uxtb	r1, r1
 801d8f8:	2010      	movs	r0, #16
 801d8fa:	f7ff fdc7 	bl	801d48c <setting_remove_elements>
 801d8fe:	e774      	b.n	801d7ea <settings_init+0x8e>
        setting_remove_elements(Setting_HomingEnable, homing.value);
 801d900:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 801d904:	2016      	movs	r0, #22
 801d906:	f7ff fdc1 	bl	801d48c <setting_remove_elements>
 801d90a:	e788      	b.n	801d81e <settings_init+0xc2>
            details->on_changed(&settings, changed);
 801d90c:	4629      	mov	r1, r5
 801d90e:	4808      	ldr	r0, [pc, #32]	@ (801d930 <settings_init+0x1d4>)
 801d910:	4798      	blx	r3
    } while((details = details->next));
 801d912:	69a4      	ldr	r4, [r4, #24]
 801d914:	2c00      	cmp	r4, #0
 801d916:	d086      	beq.n	801d826 <settings_init+0xca>
        if(details->load)
 801d918:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801d91a:	b103      	cbz	r3, 801d91e <settings_init+0x1c2>
            details->load();
 801d91c:	4798      	blx	r3
        if(details->on_changed)
 801d91e:	69e3      	ldr	r3, [r4, #28]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d1f3      	bne.n	801d90c <settings_init+0x1b0>
 801d924:	e7f5      	b.n	801d912 <settings_init+0x1b6>
 801d926:	bf00      	nop
 801d928:	200013a8 	.word	0x200013a8
 801d92c:	200011c0 	.word	0x200011c0
 801d930:	20001bd8 	.word	0x20001bd8
 801d934:	200014a0 	.word	0x200014a0
 801d938:	20000204 	.word	0x20000204
 801d93c:	20001ad8 	.word	0x20001ad8

0801d940 <fall_asleep>:

static volatile bool slumber;

static void fall_asleep (void *data)
{
    slumber = false;
 801d940:	4b01      	ldr	r3, [pc, #4]	@ (801d948 <fall_asleep+0x8>)
 801d942:	2200      	movs	r2, #0
 801d944:	701a      	strb	r2, [r3, #0]
}
 801d946:	4770      	bx	lr
 801d948:	20001d48 	.word	0x20001d48

0801d94c <sleep_execute>:

// Starts sleep timer if running conditions are satisfied. When elapsed, sleep mode is executed.
static void sleep_execute (void)
{
 801d94c:	b538      	push	{r3, r4, r5, lr}
    // Enable sleep timeout
    if(!(slumber = task_add_delayed(fall_asleep, NULL, (uint32_t)(SLEEP_DURATION * 1000.0f * 60.0f))))
 801d94e:	4a18      	ldr	r2, [pc, #96]	@ (801d9b0 <sleep_execute+0x64>)
 801d950:	2100      	movs	r1, #0
 801d952:	4818      	ldr	r0, [pc, #96]	@ (801d9b4 <sleep_execute+0x68>)
 801d954:	f7f3 fc80 	bl	8011258 <task_add_delayed>
 801d958:	4b17      	ldr	r3, [pc, #92]	@ (801d9b8 <sleep_execute+0x6c>)
 801d95a:	7018      	strb	r0, [r3, #0]
 801d95c:	b330      	cbz	r0, 801d9ac <sleep_execute+0x60>
        return;

    // Fetch current number of buffered characters in input stream buffer.
    uint16_t rx_initial = hal.stream.get_rx_buffer_free();
 801d95e:	4b17      	ldr	r3, [pc, #92]	@ (801d9bc <sleep_execute+0x70>)
 801d960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d964:	4798      	blx	r3
 801d966:	4605      	mov	r5, r0

    do {
        grbl.on_execute_realtime(state_get());
 801d968:	4b15      	ldr	r3, [pc, #84]	@ (801d9c0 <sleep_execute+0x74>)
 801d96a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 801d96c:	f000 ff6c 	bl	801e848 <state_get>
 801d970:	47a0      	blx	r4
        // Monitor for any new input stream data or external events (queries, buttons, alarms) to exit.
        if((hal.stream.get_rx_buffer_free() != rx_initial) || sys.rt_exec_state || sys.rt_exec_alarm ) {
 801d972:	4b12      	ldr	r3, [pc, #72]	@ (801d9bc <sleep_execute+0x70>)
 801d974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d978:	4798      	blx	r3
 801d97a:	42a8      	cmp	r0, r5
 801d97c:	d110      	bne.n	801d9a0 <sleep_execute+0x54>
 801d97e:	4b11      	ldr	r3, [pc, #68]	@ (801d9c4 <sleep_execute+0x78>)
 801d980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d982:	b96b      	cbnz	r3, 801d9a0 <sleep_execute+0x54>
 801d984:	4b0f      	ldr	r3, [pc, #60]	@ (801d9c4 <sleep_execute+0x78>)
 801d986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d988:	b953      	cbnz	r3, 801d9a0 <sleep_execute+0x54>
            // Disable sleep timeout and return to normal operation.
            slumber = false;
            task_delete(fall_asleep, NULL);
            return;
        }
    } while(slumber);
 801d98a:	4b0b      	ldr	r3, [pc, #44]	@ (801d9b8 <sleep_execute+0x6c>)
 801d98c:	781b      	ldrb	r3, [r3, #0]
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d1ea      	bne.n	801d968 <sleep_execute+0x1c>

    // If reached, sleep counter has expired. Execute sleep procedures.
    // Notify user that Grbl has timed out and will be parking.
    // To exit sleep, resume or reset. Either way, the job will not be recoverable.
    system_set_exec_state_flag(EXEC_SLEEP);
 801d992:	4b0a      	ldr	r3, [pc, #40]	@ (801d9bc <sleep_execute+0x70>)
 801d994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d99a:	480b      	ldr	r0, [pc, #44]	@ (801d9c8 <sleep_execute+0x7c>)
 801d99c:	4798      	blx	r3
 801d99e:	e005      	b.n	801d9ac <sleep_execute+0x60>
            slumber = false;
 801d9a0:	2100      	movs	r1, #0
 801d9a2:	4b05      	ldr	r3, [pc, #20]	@ (801d9b8 <sleep_execute+0x6c>)
 801d9a4:	7019      	strb	r1, [r3, #0]
            task_delete(fall_asleep, NULL);
 801d9a6:	4803      	ldr	r0, [pc, #12]	@ (801d9b4 <sleep_execute+0x68>)
 801d9a8:	f7f3 fedc 	bl	8011764 <task_delete>
}
 801d9ac:	bd38      	pop	{r3, r4, r5, pc}
 801d9ae:	bf00      	nop
 801d9b0:	000493e0 	.word	0x000493e0
 801d9b4:	0801d941 	.word	0x0801d941
 801d9b8:	20001d48 	.word	0x20001d48
 801d9bc:	200011c0 	.word	0x200011c0
 801d9c0:	200013a8 	.word	0x200013a8
 801d9c4:	200014a0 	.word	0x200014a0
 801d9c8:	200014e8 	.word	0x200014e8

0801d9cc <sleep_check>:
// Checks running conditions for sleep. If satisfied, enables sleep timeout and executes
// sleep mode upon elapse.
// NOTE: Sleep procedures can be blocking, since grblHAL isn't receiving any commands, nor moving.
// Hence, make sure any valid running state that executes the sleep timer is not one that is moving.
void sleep_check (void)
{
 801d9cc:	b508      	push	{r3, lr}
    static uint32_t last_check = 0;

    if(hal.get_elapsed_ticks() - last_check < 50)
 801d9ce:	4b1e      	ldr	r3, [pc, #120]	@ (801da48 <sleep_check+0x7c>)
 801d9d0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801d9d4:	4798      	blx	r3
 801d9d6:	4b1d      	ldr	r3, [pc, #116]	@ (801da4c <sleep_check+0x80>)
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	1ac0      	subs	r0, r0, r3
 801d9dc:	2831      	cmp	r0, #49	@ 0x31
 801d9de:	d917      	bls.n	801da10 <sleep_check+0x44>
        return;

    last_check = hal.get_elapsed_ticks();
 801d9e0:	4b19      	ldr	r3, [pc, #100]	@ (801da48 <sleep_check+0x7c>)
 801d9e2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801d9e6:	4798      	blx	r3
 801d9e8:	4b18      	ldr	r3, [pc, #96]	@ (801da4c <sleep_check+0x80>)
 801d9ea:	6018      	str	r0, [r3, #0]

    // The sleep execution feature will continue only if the machine is in an IDLE or HOLD state and
    // has any powered components enabled.
    // NOTE: With overrides or in laser mode, modal spindle and coolant state are not guaranteed. Need
    // to directly monitor and record running state during parking to ensure proper function.
    if (!(slumber || sys.steppers_deenergize || sys.flags.auto_reporting) && (gc_state.modal.spindle.state.value || gc_state.modal.coolant.value)) {
 801d9ec:	4b18      	ldr	r3, [pc, #96]	@ (801da50 <sleep_check+0x84>)
 801d9ee:	781b      	ldrb	r3, [r3, #0]
 801d9f0:	b973      	cbnz	r3, 801da10 <sleep_check+0x44>
 801d9f2:	4b18      	ldr	r3, [pc, #96]	@ (801da54 <sleep_check+0x88>)
 801d9f4:	799b      	ldrb	r3, [r3, #6]
 801d9f6:	b95b      	cbnz	r3, 801da10 <sleep_check+0x44>
 801d9f8:	4b16      	ldr	r3, [pc, #88]	@ (801da54 <sleep_check+0x88>)
 801d9fa:	7ddb      	ldrb	r3, [r3, #23]
 801d9fc:	f013 0f02 	tst.w	r3, #2
 801da00:	d106      	bne.n	801da10 <sleep_check+0x44>
 801da02:	4b15      	ldr	r3, [pc, #84]	@ (801da58 <sleep_check+0x8c>)
 801da04:	699b      	ldr	r3, [r3, #24]
 801da06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801da0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801da0e:	b903      	cbnz	r3, 801da12 <sleep_check+0x46>
                if(sys.parking_state == Parking_DoorAjar)
                    sleep_execute();
                break;
        }
    }
}
 801da10:	bd08      	pop	{r3, pc}
        switch(state_get()) {
 801da12:	f000 ff19 	bl	801e848 <state_get>
 801da16:	2810      	cmp	r0, #16
 801da18:	d006      	beq.n	801da28 <sleep_check+0x5c>
 801da1a:	2840      	cmp	r0, #64	@ 0x40
 801da1c:	d00c      	beq.n	801da38 <sleep_check+0x6c>
 801da1e:	2800      	cmp	r0, #0
 801da20:	d1f6      	bne.n	801da10 <sleep_check+0x44>
                sleep_execute();
 801da22:	f7ff ff93 	bl	801d94c <sleep_execute>
                break;
 801da26:	e7f3      	b.n	801da10 <sleep_check+0x44>
                if(sys.holding_state == Hold_Complete)
 801da28:	4b0a      	ldr	r3, [pc, #40]	@ (801da54 <sleep_check+0x88>)
 801da2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801da2e:	2b01      	cmp	r3, #1
 801da30:	d1ee      	bne.n	801da10 <sleep_check+0x44>
                    sleep_execute();
 801da32:	f7ff ff8b 	bl	801d94c <sleep_execute>
 801da36:	e7eb      	b.n	801da10 <sleep_check+0x44>
                if(sys.parking_state == Parking_DoorAjar)
 801da38:	4b06      	ldr	r3, [pc, #24]	@ (801da54 <sleep_check+0x88>)
 801da3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801da3e:	2b01      	cmp	r3, #1
 801da40:	d1e6      	bne.n	801da10 <sleep_check+0x44>
                    sleep_execute();
 801da42:	f7ff ff83 	bl	801d94c <sleep_execute>
 801da46:	e7e3      	b.n	801da10 <sleep_check+0x44>
 801da48:	200011c0 	.word	0x200011c0
 801da4c:	20001d44 	.word	0x20001d44
 801da50:	20001d48 	.word	0x20001d48
 801da54:	200014a0 	.word	0x200014a0
 801da58:	20000ef8 	.word	0x20000ef8

0801da5c <null_set_state>:
static void null_set_state (spindle_ptrs_t *spindle, spindle_state_t state, float rpm)
{
    UNUSED(spindle);
    UNUSED(state);
    UNUSED(rpm);
}
 801da5c:	4770      	bx	lr

0801da5e <null_get_state>:
static spindle_state_t null_get_state (spindle_ptrs_t *spindle)
{
    UNUSED(spindle);

    return (spindle_state_t){0};
}
 801da5e:	f04f 0000 	mov.w	r0, #0
 801da62:	4770      	bx	lr

0801da64 <null_update_pwm>:
// Sets spindle speed
static void null_update_pwm (spindle_ptrs_t *spindle, uint_fast16_t pwm_value)
{
    UNUSED(spindle);
    UNUSED(pwm_value);
}
 801da64:	4770      	bx	lr

0801da66 <null_get_pwm>:
{
    UNUSED(spindle);
    UNUSED(rpm);

    return 0;
}
 801da66:	2000      	movs	r0, #0
 801da68:	4770      	bx	lr

0801da6a <null_update_rpm>:

static void null_update_rpm (spindle_ptrs_t *spindle, float rpm)
{
    UNUSED(spindle);
    UNUSED(rpm);
}
 801da6a:	4770      	bx	lr

0801da6c <spindle_activate>:
{
 801da6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da70:	b090      	sub	sp, #64	@ 0x40
 801da72:	4604      	mov	r4, r0
 801da74:	460e      	mov	r6, r1
    if(pwm_spindle && pwm_spindle->cfg->config && pwm_spindle != &spindles[spindle_id]) {
 801da76:	4b95      	ldr	r3, [pc, #596]	@ (801dccc <spindle_activate+0x260>)
 801da78:	6818      	ldr	r0, [r3, #0]
 801da7a:	b338      	cbz	r0, 801dacc <spindle_activate+0x60>
 801da7c:	6803      	ldr	r3, [r0, #0]
 801da7e:	69db      	ldr	r3, [r3, #28]
 801da80:	b323      	cbz	r3, 801dacc <spindle_activate+0x60>
 801da82:	224c      	movs	r2, #76	@ 0x4c
 801da84:	4b92      	ldr	r3, [pc, #584]	@ (801dcd0 <spindle_activate+0x264>)
 801da86:	fb02 3304 	mla	r3, r2, r4, r3
 801da8a:	4298      	cmp	r0, r3
 801da8c:	d01e      	beq.n	801dacc <spindle_activate+0x60>
        if(!pwm_spindle->hal.cap.rpm_range_locked) {
 801da8e:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801da92:	2b00      	cmp	r3, #0
 801da94:	db04      	blt.n	801daa0 <spindle_activate+0x34>
            pwm_spindle->hal.rpm_min = settings.spindle.rpm_min;
 801da96:	4b8f      	ldr	r3, [pc, #572]	@ (801dcd4 <spindle_activate+0x268>)
 801da98:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801da9a:	6182      	str	r2, [r0, #24]
            pwm_spindle->hal.rpm_max = settings.spindle.rpm_max;
 801da9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801da9e:	61c3      	str	r3, [r0, #28]
        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801daa0:	6a03      	ldr	r3, [r0, #32]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	f000 80da 	beq.w	801dc5c <spindle_activate+0x1f0>
 801daa8:	3004      	adds	r0, #4
 801daaa:	4798      	blx	r3
 801daac:	2800      	cmp	r0, #0
 801daae:	f040 80d7 	bne.w	801dc60 <spindle_activate+0x1f4>
 801dab2:	2300      	movs	r3, #0
 801dab4:	4a85      	ldr	r2, [pc, #532]	@ (801dccc <spindle_activate+0x260>)
 801dab6:	6810      	ldr	r0, [r2, #0]
 801dab8:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
 801dabc:	b133      	cbz	r3, 801dacc <spindle_activate+0x60>
            pwm_spindle->hal.set_state(&pwm_spindle->hal, (spindle_state_t){0}, 0.0f);
 801dabe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801dac0:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 801dcd8 <spindle_activate+0x26c>
 801dac4:	f04f 0100 	mov.w	r1, #0
 801dac8:	3004      	adds	r0, #4
 801daca:	4798      	blx	r3
    pwm_spindle = NULL;
 801dacc:	4b7f      	ldr	r3, [pc, #508]	@ (801dccc <spindle_activate+0x260>)
 801dace:	2200      	movs	r2, #0
 801dad0:	601a      	str	r2, [r3, #0]
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801dad2:	4294      	cmp	r4, r2
 801dad4:	f2c0 80f1 	blt.w	801dcba <spindle_activate+0x24e>
 801dad8:	4b80      	ldr	r3, [pc, #512]	@ (801dcdc <spindle_activate+0x270>)
 801dada:	781b      	ldrb	r3, [r3, #0]
 801dadc:	429c      	cmp	r4, r3
 801dade:	f280 80f1 	bge.w	801dcc4 <spindle_activate+0x258>
 801dae2:	234c      	movs	r3, #76	@ 0x4c
 801dae4:	fb04 f303 	mul.w	r3, r4, r3
 801dae8:	4a79      	ldr	r2, [pc, #484]	@ (801dcd0 <spindle_activate+0x264>)
 801daea:	58d3      	ldr	r3, [r2, r3]
 801daec:	2b00      	cmp	r3, #0
 801daee:	f000 80eb 	beq.w	801dcc8 <spindle_activate+0x25c>
        if(sys_spindle[spindle_num].enabled && sys_spindle[spindle_num].hal.id != spindle_id && sys_spindle[spindle_num].hal.set_state)
 801daf2:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 801daf6:	4b7a      	ldr	r3, [pc, #488]	@ (801dce0 <spindle_activate+0x274>)
 801daf8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801dafc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801db00:	b16b      	cbz	r3, 801db1e <spindle_activate+0xb2>
 801db02:	4b77      	ldr	r3, [pc, #476]	@ (801dce0 <spindle_activate+0x274>)
 801db04:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801db08:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801db0c:	42a3      	cmp	r3, r4
 801db0e:	d006      	beq.n	801db1e <spindle_activate+0xb2>
 801db10:	4b73      	ldr	r3, [pc, #460]	@ (801dce0 <spindle_activate+0x274>)
 801db12:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801db16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801db18:	b10b      	cbz	r3, 801db1e <spindle_activate+0xb2>
            gc_spindle_off(); // TODO: switch off only the default spindle?
 801db1a:	f7ef f9f5 	bl	800cf08 <gc_spindle_off>
        if(!spindle->hal.cap.rpm_range_locked) {
 801db1e:	4b6c      	ldr	r3, [pc, #432]	@ (801dcd0 <spindle_activate+0x264>)
 801db20:	224c      	movs	r2, #76	@ 0x4c
 801db22:	fb02 3304 	mla	r3, r2, r4, r3
 801db26:	f993 300e 	ldrsb.w	r3, [r3, #14]
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	db08      	blt.n	801db40 <spindle_activate+0xd4>
            spindle->hal.rpm_min = settings.spindle.rpm_min;
 801db2e:	4a69      	ldr	r2, [pc, #420]	@ (801dcd4 <spindle_activate+0x268>)
 801db30:	6f91      	ldr	r1, [r2, #120]	@ 0x78
 801db32:	4b67      	ldr	r3, [pc, #412]	@ (801dcd0 <spindle_activate+0x264>)
 801db34:	204c      	movs	r0, #76	@ 0x4c
 801db36:	fb00 3304 	mla	r3, r0, r4, r3
 801db3a:	6199      	str	r1, [r3, #24]
            spindle->hal.rpm_max = settings.spindle.rpm_max;
 801db3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801db3e:	61da      	str	r2, [r3, #28]
        if(!spindle->init_ok)
 801db40:	4b63      	ldr	r3, [pc, #396]	@ (801dcd0 <spindle_activate+0x264>)
 801db42:	224c      	movs	r2, #76	@ 0x4c
 801db44:	fb02 3304 	mla	r3, r2, r4, r3
 801db48:	f893 5048 	ldrb.w	r5, [r3, #72]	@ 0x48
 801db4c:	b99d      	cbnz	r5, 801db76 <spindle_activate+0x10a>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801db4e:	4b60      	ldr	r3, [pc, #384]	@ (801dcd0 <spindle_activate+0x264>)
 801db50:	fb02 3304 	mla	r3, r2, r4, r3
 801db54:	6a1b      	ldr	r3, [r3, #32]
 801db56:	2b00      	cmp	r3, #0
 801db58:	f000 8084 	beq.w	801dc64 <spindle_activate+0x1f8>
 801db5c:	485c      	ldr	r0, [pc, #368]	@ (801dcd0 <spindle_activate+0x264>)
 801db5e:	fb02 0004 	mla	r0, r2, r4, r0
 801db62:	3004      	adds	r0, #4
 801db64:	4798      	blx	r3
 801db66:	2800      	cmp	r0, #0
 801db68:	d17e      	bne.n	801dc68 <spindle_activate+0x1fc>
 801db6a:	4b59      	ldr	r3, [pc, #356]	@ (801dcd0 <spindle_activate+0x264>)
 801db6c:	224c      	movs	r2, #76	@ 0x4c
 801db6e:	fb02 3304 	mla	r3, r2, r4, r3
 801db72:	f883 5048 	strb.w	r5, [r3, #72]	@ 0x48
        if(ok) {
 801db76:	2d00      	cmp	r5, #0
 801db78:	f000 80a0 	beq.w	801dcbc <spindle_activate+0x250>
            memcpy(&spindle_hal, &spindle->hal, sizeof(spindle_ptrs_t));
 801db7c:	224c      	movs	r2, #76	@ 0x4c
 801db7e:	4b54      	ldr	r3, [pc, #336]	@ (801dcd0 <spindle_activate+0x264>)
 801db80:	fb02 3804 	mla	r8, r2, r4, r3
 801db84:	f108 0c04 	add.w	ip, r8, #4
 801db88:	466f      	mov	r7, sp
 801db8a:	f108 0844 	add.w	r8, r8, #68	@ 0x44
 801db8e:	46be      	mov	lr, r7
 801db90:	f8dc 0000 	ldr.w	r0, [ip]
 801db94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801db98:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801db9c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801dba0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801dba4:	f10c 0c10 	add.w	ip, ip, #16
 801dba8:	4677      	mov	r7, lr
 801dbaa:	45c4      	cmp	ip, r8
 801dbac:	d1ef      	bne.n	801db8e <spindle_activate+0x122>
            if(spindle->cfg->get_data == NULL) {
 801dbae:	234c      	movs	r3, #76	@ 0x4c
 801dbb0:	fb04 f303 	mul.w	r3, r4, r3
 801dbb4:	4a46      	ldr	r2, [pc, #280]	@ (801dcd0 <spindle_activate+0x264>)
 801dbb6:	58d3      	ldr	r3, [r2, r3]
 801dbb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dbba:	2a00      	cmp	r2, #0
 801dbbc:	d056      	beq.n	801dc6c <spindle_activate+0x200>
            spindle_hal.cap.laser &= settings.mode == Mode_Laser;
 801dbbe:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801dbc2:	4a44      	ldr	r2, [pc, #272]	@ (801dcd4 <spindle_activate+0x268>)
 801dbc4:	7e12      	ldrb	r2, [r2, #24]
 801dbc6:	2a01      	cmp	r2, #1
 801dbc8:	bf14      	ite	ne
 801dbca:	2200      	movne	r2, #0
 801dbcc:	2201      	moveq	r2, #1
 801dbce:	ea02 02d3 	and.w	r2, r2, r3, lsr #3
 801dbd2:	f362 03c3 	bfi	r3, r2, #3, #1
 801dbd6:	f88d 300a 	strb.w	r3, [sp, #10]
            if(grbl.on_spindle_select)
 801dbda:	4b42      	ldr	r3, [pc, #264]	@ (801dce4 <spindle_activate+0x278>)
 801dbdc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801dbe0:	b113      	cbz	r3, 801dbe8 <spindle_activate+0x17c>
                ok = grbl.on_spindle_select(&spindle_hal);
 801dbe2:	4668      	mov	r0, sp
 801dbe4:	4798      	blx	r3
 801dbe6:	4605      	mov	r5, r0
            if(ok) {
 801dbe8:	2d00      	cmp	r5, #0
 801dbea:	d067      	beq.n	801dcbc <spindle_activate+0x250>
                sys_spindle[spindle_num].enabled = true;
 801dbec:	4a3c      	ldr	r2, [pc, #240]	@ (801dce0 <spindle_activate+0x274>)
 801dbee:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 801dbf2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801dbf6:	2101      	movs	r1, #1
 801dbf8:	f883 106c 	strb.w	r1, [r3, #108]	@ 0x6c
                sys_spindle[spindle_num].param.hal = &sys_spindle[spindle_num].hal;
 801dbfc:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 801dc00:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801dc04:	f10c 0c28 	add.w	ip, ip, #40	@ 0x28
 801dc08:	4494      	add	ip, r2
 801dc0a:	f10c 0c04 	add.w	ip, ip, #4
 801dc0e:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
                if(sys_spindle[spindle_num].param.override_pct == 0)
 801dc12:	68db      	ldr	r3, [r3, #12]
 801dc14:	b933      	cbnz	r3, 801dc24 <spindle_activate+0x1b8>
                    sys_spindle[spindle_num].param.override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 801dc16:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 801dc1a:	4b31      	ldr	r3, [pc, #196]	@ (801dce0 <spindle_activate+0x274>)
 801dc1c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801dc20:	2264      	movs	r2, #100	@ 0x64
 801dc22:	60da      	str	r2, [r3, #12]
                spindle_hal.param = &sys_spindle[spindle_num].param;
 801dc24:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
 801dc28:	4b2d      	ldr	r3, [pc, #180]	@ (801dce0 <spindle_activate+0x274>)
 801dc2a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801dc2e:	9301      	str	r3, [sp, #4]
                memcpy(&sys_spindle[spindle_num].hal, &spindle_hal, sizeof(spindle_ptrs_t));
 801dc30:	466f      	mov	r7, sp
 801dc32:	4666      	mov	r6, ip
 801dc34:	f10d 0e40 	add.w	lr, sp, #64	@ 0x40
 801dc38:	463c      	mov	r4, r7
 801dc3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801dc3c:	6030      	str	r0, [r6, #0]
 801dc3e:	6071      	str	r1, [r6, #4]
 801dc40:	60b2      	str	r2, [r6, #8]
 801dc42:	60f3      	str	r3, [r6, #12]
 801dc44:	4627      	mov	r7, r4
 801dc46:	3610      	adds	r6, #16
 801dc48:	4574      	cmp	r4, lr
 801dc4a:	d1f5      	bne.n	801dc38 <spindle_activate+0x1cc>
                if(grbl.on_spindle_selected)
 801dc4c:	4b25      	ldr	r3, [pc, #148]	@ (801dce4 <spindle_activate+0x278>)
 801dc4e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801dc52:	2b00      	cmp	r3, #0
 801dc54:	d032      	beq.n	801dcbc <spindle_activate+0x250>
                    grbl.on_spindle_selected(&sys_spindle[spindle_num].hal);
 801dc56:	4660      	mov	r0, ip
 801dc58:	4798      	blx	r3
 801dc5a:	e02f      	b.n	801dcbc <spindle_activate+0x250>
        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801dc5c:	2301      	movs	r3, #1
 801dc5e:	e729      	b.n	801dab4 <spindle_activate+0x48>
 801dc60:	2301      	movs	r3, #1
 801dc62:	e727      	b.n	801dab4 <spindle_activate+0x48>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801dc64:	2501      	movs	r5, #1
 801dc66:	e780      	b.n	801db6a <spindle_activate+0xfe>
 801dc68:	2501      	movs	r5, #1
 801dc6a:	e77e      	b.n	801db6a <spindle_activate+0xfe>
                if(settings.offset_lock.encoder_spindle == spindle_id) {
 801dc6c:	4a19      	ldr	r2, [pc, #100]	@ (801dcd4 <spindle_activate+0x268>)
 801dc6e:	f892 2102 	ldrb.w	r2, [r2, #258]	@ 0x102
 801dc72:	ebb4 0fd2 	cmp.w	r4, r2, lsr #3
 801dc76:	d00d      	beq.n	801dc94 <spindle_activate+0x228>
                    spindle_hal.get_data = NULL;
 801dc78:	2200      	movs	r2, #0
 801dc7a:	920e      	str	r2, [sp, #56]	@ 0x38
                    spindle_hal.reset_data = NULL;
 801dc7c:	920f      	str	r2, [sp, #60]	@ 0x3c
                    if(!spindle->cfg->cap.at_speed)
 801dc7e:	7a9b      	ldrb	r3, [r3, #10]
 801dc80:	f013 0f04 	tst.w	r3, #4
 801dc84:	d19b      	bne.n	801dbbe <spindle_activate+0x152>
                        spindle_hal.cap.at_speed = Off;
 801dc86:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801dc8a:	f36f 0382 	bfc	r3, #2, #1
 801dc8e:	f88d 300a 	strb.w	r3, [sp, #10]
 801dc92:	e794      	b.n	801dbbe <spindle_activate+0x152>
                    spindle_hal.get_data = hal.spindle_data.get;
 801dc94:	4914      	ldr	r1, [pc, #80]	@ (801dce8 <spindle_activate+0x27c>)
 801dc96:	6f8a      	ldr	r2, [r1, #120]	@ 0x78
 801dc98:	920e      	str	r2, [sp, #56]	@ 0x38
                    spindle_hal.reset_data = hal.spindle_data.reset;
 801dc9a:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801dc9c:	910f      	str	r1, [sp, #60]	@ 0x3c
                    if(!spindle->cfg->cap.at_speed)
 801dc9e:	7a9b      	ldrb	r3, [r3, #10]
 801dca0:	f013 0f04 	tst.w	r3, #4
 801dca4:	d18b      	bne.n	801dbbe <spindle_activate+0x152>
                        spindle_hal.cap.at_speed = !!spindle_hal.get_data;
 801dca6:	3a00      	subs	r2, #0
 801dca8:	bf18      	it	ne
 801dcaa:	2201      	movne	r2, #1
 801dcac:	f89d 300a 	ldrb.w	r3, [sp, #10]
 801dcb0:	f362 0382 	bfi	r3, r2, #2, #1
 801dcb4:	f88d 300a 	strb.w	r3, [sp, #10]
 801dcb8:	e781      	b.n	801dbbe <spindle_activate+0x152>
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801dcba:	2500      	movs	r5, #0
}
 801dcbc:	4628      	mov	r0, r5
 801dcbe:	b010      	add	sp, #64	@ 0x40
 801dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801dcc4:	2500      	movs	r5, #0
 801dcc6:	e7f9      	b.n	801dcbc <spindle_activate+0x250>
 801dcc8:	2500      	movs	r5, #0
 801dcca:	e7f7      	b.n	801dcbc <spindle_activate+0x250>
 801dccc:	20001d4c 	.word	0x20001d4c
 801dcd0:	20001d50 	.word	0x20001d50
 801dcd4:	20001bd8 	.word	0x20001bd8
 801dcd8:	00000000 	.word	0x00000000
 801dcdc:	20001e0c 	.word	0x20001e0c
 801dce0:	20001d9c 	.word	0x20001d9c
 801dce4:	200013a8 	.word	0x200013a8
 801dce8:	200011c0 	.word	0x200011c0

0801dcec <spindle_get_num>:
{
 801dcec:	b510      	push	{r4, lr}
 801dcee:	4604      	mov	r4, r0
        if((setting = setting_get_details(idx == 0 ? Setting_SpindleType : (setting_id_t)(Setting_SpindleEnable0 + idx), NULL))) {
 801dcf0:	2100      	movs	r1, #0
 801dcf2:	f240 108b 	movw	r0, #395	@ 0x18b
 801dcf6:	f7ff fa65 	bl	801d1c4 <setting_get_details>
 801dcfa:	b148      	cbz	r0, 801dd10 <spindle_get_num+0x24>
            if(setting_get_int_value(setting, 0) == spindle_id)
 801dcfc:	2100      	movs	r1, #0
 801dcfe:	f7ff f869 	bl	801cdd4 <setting_get_int_value>
 801dd02:	42a0      	cmp	r0, r4
 801dd04:	d101      	bne.n	801dd0a <spindle_get_num+0x1e>
                spindle_num = idx;
 801dd06:	2000      	movs	r0, #0
}
 801dd08:	bd10      	pop	{r4, pc}
            if(setting_get_int_value(setting, 0) == spindle_id)
 801dd0a:	f04f 30ff 	mov.w	r0, #4294967295
 801dd0e:	e7fb      	b.n	801dd08 <spindle_get_num+0x1c>
 801dd10:	f04f 30ff 	mov.w	r0, #4294967295
 801dd14:	e7f8      	b.n	801dd08 <spindle_get_num+0x1c>
	...

0801dd18 <spindle_register>:
{
 801dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd1a:	4604      	mov	r4, r0
 801dd1c:	460e      	mov	r6, r1
    if(n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null)
 801dd1e:	4b33      	ldr	r3, [pc, #204]	@ (801ddec <spindle_register+0xd4>)
 801dd20:	781b      	ldrb	r3, [r3, #0]
 801dd22:	2b01      	cmp	r3, #1
 801dd24:	d032      	beq.n	801dd8c <spindle_register+0x74>
    if(n_spindle < N_SPINDLE && settings_add_spindle_type(name)) {
 801dd26:	4b31      	ldr	r3, [pc, #196]	@ (801ddec <spindle_register+0xd4>)
 801dd28:	781b      	ldrb	r3, [r3, #0]
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d158      	bne.n	801dde0 <spindle_register+0xc8>
 801dd2e:	4630      	mov	r0, r6
 801dd30:	f7ff fce8 	bl	801d704 <settings_add_spindle_type>
 801dd34:	2800      	cmp	r0, #0
 801dd36:	d056      	beq.n	801dde6 <spindle_register+0xce>
        spindles[n_spindle].cfg = spindle;
 801dd38:	4b2c      	ldr	r3, [pc, #176]	@ (801ddec <spindle_register+0xd4>)
 801dd3a:	781d      	ldrb	r5, [r3, #0]
 801dd3c:	492c      	ldr	r1, [pc, #176]	@ (801ddf0 <spindle_register+0xd8>)
 801dd3e:	224c      	movs	r2, #76	@ 0x4c
 801dd40:	fb05 f202 	mul.w	r2, r5, r2
 801dd44:	188b      	adds	r3, r1, r2
 801dd46:	508c      	str	r4, [r1, r2]
        spindles[n_spindle].name = name;
 801dd48:	645e      	str	r6, [r3, #68]	@ 0x44
        memcpy(&spindles[n_spindle].hal, spindles[n_spindle].cfg, sizeof(spindle_ptrs_t));
 801dd4a:	4622      	mov	r2, r4
 801dd4c:	3304      	adds	r3, #4
 801dd4e:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 801dd52:	6817      	ldr	r7, [r2, #0]
 801dd54:	6856      	ldr	r6, [r2, #4]
 801dd56:	6890      	ldr	r0, [r2, #8]
 801dd58:	68d1      	ldr	r1, [r2, #12]
 801dd5a:	601f      	str	r7, [r3, #0]
 801dd5c:	605e      	str	r6, [r3, #4]
 801dd5e:	6098      	str	r0, [r3, #8]
 801dd60:	60d9      	str	r1, [r3, #12]
 801dd62:	3210      	adds	r2, #16
 801dd64:	3310      	adds	r3, #16
 801dd66:	4562      	cmp	r2, ip
 801dd68:	d1f3      	bne.n	801dd52 <spindle_register+0x3a>
        spindles[n_spindle].hal.id = n_spindle;
 801dd6a:	b26f      	sxtb	r7, r5
 801dd6c:	4b20      	ldr	r3, [pc, #128]	@ (801ddf0 <spindle_register+0xd8>)
 801dd6e:	224c      	movs	r2, #76	@ 0x4c
 801dd70:	fb02 3305 	mla	r3, r2, r5, r3
 801dd74:	711f      	strb	r7, [r3, #4]
        if(spindle->type == SpindleType_PWM && pwm_spindle == NULL) {
 801dd76:	7a23      	ldrb	r3, [r4, #8]
 801dd78:	b913      	cbnz	r3, 801dd80 <spindle_register+0x68>
 801dd7a:	4b1e      	ldr	r3, [pc, #120]	@ (801ddf4 <spindle_register+0xdc>)
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	b173      	cbz	r3, 801dd9e <spindle_register+0x86>
        if(n_spindle == 0)
 801dd80:	b1d5      	cbz	r5, 801ddb8 <spindle_register+0xa0>
        return n_spindle++;
 801dd82:	3501      	adds	r5, #1
 801dd84:	4b19      	ldr	r3, [pc, #100]	@ (801ddec <spindle_register+0xd4>)
 801dd86:	701d      	strb	r5, [r3, #0]
}
 801dd88:	4638      	mov	r0, r7
 801dd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null)
 801dd8c:	4b18      	ldr	r3, [pc, #96]	@ (801ddf0 <spindle_register+0xd8>)
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	7a1b      	ldrb	r3, [r3, #8]
 801dd92:	2b05      	cmp	r3, #5
 801dd94:	d1c7      	bne.n	801dd26 <spindle_register+0xe>
        n_spindle = 0;
 801dd96:	4b15      	ldr	r3, [pc, #84]	@ (801ddec <spindle_register+0xd4>)
 801dd98:	2200      	movs	r2, #0
 801dd9a:	701a      	strb	r2, [r3, #0]
 801dd9c:	e7c3      	b.n	801dd26 <spindle_register+0xe>
            pwm_spindle = &spindles[n_spindle];
 801dd9e:	4b14      	ldr	r3, [pc, #80]	@ (801ddf0 <spindle_register+0xd8>)
 801dda0:	fb02 3305 	mla	r3, r2, r5, r3
 801dda4:	4a13      	ldr	r2, [pc, #76]	@ (801ddf4 <spindle_register+0xdc>)
 801dda6:	6013      	str	r3, [r2, #0]
            hal.driver_cap.pwm_spindle = On;
 801dda8:	4a13      	ldr	r2, [pc, #76]	@ (801ddf8 <spindle_register+0xe0>)
 801ddaa:	f892 31da 	ldrb.w	r3, [r2, #474]	@ 0x1da
 801ddae:	f043 0310 	orr.w	r3, r3, #16
 801ddb2:	f882 31da 	strb.w	r3, [r2, #474]	@ 0x1da
 801ddb6:	e7e3      	b.n	801dd80 <spindle_register+0x68>
            memcpy(&sys_spindle[0].hal, spindle, sizeof(spindle_ptrs_t));
 801ddb8:	46a4      	mov	ip, r4
 801ddba:	4e10      	ldr	r6, [pc, #64]	@ (801ddfc <spindle_register+0xe4>)
 801ddbc:	3440      	adds	r4, #64	@ 0x40
 801ddbe:	46b6      	mov	lr, r6
 801ddc0:	f8dc 0000 	ldr.w	r0, [ip]
 801ddc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801ddc8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ddcc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801ddd0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ddd4:	f10c 0c10 	add.w	ip, ip, #16
 801ddd8:	4676      	mov	r6, lr
 801ddda:	45a4      	cmp	ip, r4
 801dddc:	d1ef      	bne.n	801ddbe <spindle_register+0xa6>
 801ddde:	e7d0      	b.n	801dd82 <spindle_register+0x6a>
    return -1;
 801dde0:	f04f 37ff 	mov.w	r7, #4294967295
 801dde4:	e7d0      	b.n	801dd88 <spindle_register+0x70>
 801dde6:	f04f 37ff 	mov.w	r7, #4294967295
 801ddea:	e7cd      	b.n	801dd88 <spindle_register+0x70>
 801ddec:	20001e0c 	.word	0x20001e0c
 801ddf0:	20001d50 	.word	0x20001d50
 801ddf4:	20001d4c 	.word	0x20001d4c
 801ddf8:	200011c0 	.word	0x200011c0
 801ddfc:	20001dc8 	.word	0x20001dc8

0801de00 <spindle_get_caps>:
{
 801de00:	4601      	mov	r1, r0
    spindle_cap_t caps = {0};
 801de02:	f04f 0000 	mov.w	r0, #0
    uint_fast8_t idx = n_spindle;
 801de06:	4b0e      	ldr	r3, [pc, #56]	@ (801de40 <spindle_get_caps+0x40>)
 801de08:	781b      	ldrb	r3, [r3, #0]
    if(n_spindle) do {
 801de0a:	b1c3      	cbz	r3, 801de3e <spindle_get_caps+0x3e>
{
 801de0c:	b410      	push	{r4}
 801de0e:	e007      	b.n	801de20 <spindle_get_caps+0x20>
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801de10:	4a0c      	ldr	r2, [pc, #48]	@ (801de44 <spindle_get_caps+0x44>)
 801de12:	244c      	movs	r4, #76	@ 0x4c
 801de14:	fb04 2203 	mla	r2, r4, r3, r2
 801de18:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801de1c:	4310      	orrs	r0, r2
    } while(idx);
 801de1e:	b15b      	cbz	r3, 801de38 <spindle_get_caps+0x38>
        --idx;
 801de20:	3b01      	subs	r3, #1
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801de22:	b280      	uxth	r0, r0
 801de24:	2900      	cmp	r1, #0
 801de26:	d1f3      	bne.n	801de10 <spindle_get_caps+0x10>
 801de28:	224c      	movs	r2, #76	@ 0x4c
 801de2a:	fb03 f202 	mul.w	r2, r3, r2
 801de2e:	4c05      	ldr	r4, [pc, #20]	@ (801de44 <spindle_get_caps+0x44>)
 801de30:	58a2      	ldr	r2, [r4, r2]
 801de32:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801de36:	e7f1      	b.n	801de1c <spindle_get_caps+0x1c>
}
 801de38:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de3c:	4770      	bx	lr
 801de3e:	4770      	bx	lr
 801de40:	20001e0c 	.word	0x20001e0c
 801de44:	20001d50 	.word	0x20001d50

0801de48 <spindle_enumerate_spindles>:
    if(callback == NULL || n_spindle == 0)
 801de48:	2800      	cmp	r0, #0
 801de4a:	d04d      	beq.n	801dee8 <spindle_enumerate_spindles+0xa0>
{
 801de4c:	b570      	push	{r4, r5, r6, lr}
 801de4e:	b084      	sub	sp, #16
 801de50:	460d      	mov	r5, r1
 801de52:	4606      	mov	r6, r0
    if(callback == NULL || n_spindle == 0)
 801de54:	4b26      	ldr	r3, [pc, #152]	@ (801def0 <spindle_enumerate_spindles+0xa8>)
 801de56:	781b      	ldrb	r3, [r3, #0]
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d047      	beq.n	801deec <spindle_enumerate_spindles+0xa4>
    for(idx = 0; idx < n_spindle; idx++) {
 801de5c:	2400      	movs	r4, #0
 801de5e:	e03a      	b.n	801ded6 <spindle_enumerate_spindles+0x8e>
        spindle.id = idx;
 801de60:	b260      	sxtb	r0, r4
 801de62:	f88d 0000 	strb.w	r0, [sp]
        spindle.name = spindles[idx].name;
 801de66:	4b23      	ldr	r3, [pc, #140]	@ (801def4 <spindle_enumerate_spindles+0xac>)
 801de68:	224c      	movs	r2, #76	@ 0x4c
 801de6a:	fb02 3304 	mla	r3, r2, r4, r3
 801de6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801de70:	9301      	str	r3, [sp, #4]
        spindle.num = spindle_get_num(idx);
 801de72:	f7ff ff3b 	bl	801dcec <spindle_get_num>
 801de76:	f88d 0001 	strb.w	r0, [sp, #1]
        spindle.enabled = spindle.num != -1;
 801de7a:	1c42      	adds	r2, r0, #1
 801de7c:	bf18      	it	ne
 801de7e:	2201      	movne	r2, #1
 801de80:	f88d 2008 	strb.w	r2, [sp, #8]
        spindle.hal = spindle.enabled && sys_spindle[spindle.num].hal.id == spindle.id ? &sys_spindle[spindle.num].hal : &spindles[idx].hal;
 801de84:	b152      	cbz	r2, 801de9c <spindle_enumerate_spindles+0x54>
 801de86:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801de8a:	4b1b      	ldr	r3, [pc, #108]	@ (801def8 <spindle_enumerate_spindles+0xb0>)
 801de8c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801de90:	f993 102c 	ldrsb.w	r1, [r3, #44]	@ 0x2c
 801de94:	f99d 3000 	ldrsb.w	r3, [sp]
 801de98:	4299      	cmp	r1, r3
 801de9a:	d00d      	beq.n	801deb8 <spindle_enumerate_spindles+0x70>
 801de9c:	214c      	movs	r1, #76	@ 0x4c
 801de9e:	4b15      	ldr	r3, [pc, #84]	@ (801def4 <spindle_enumerate_spindles+0xac>)
 801dea0:	fb01 3304 	mla	r3, r1, r4, r3
 801dea4:	3304      	adds	r3, #4
 801dea6:	9303      	str	r3, [sp, #12]
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801dea8:	b172      	cbz	r2, 801dec8 <spindle_enumerate_spindles+0x80>
 801deaa:	4b13      	ldr	r3, [pc, #76]	@ (801def8 <spindle_enumerate_spindles+0xb0>)
 801deac:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801deb0:	42a3      	cmp	r3, r4
 801deb2:	d017      	beq.n	801dee4 <spindle_enumerate_spindles+0x9c>
 801deb4:	2300      	movs	r3, #0
 801deb6:	e008      	b.n	801deca <spindle_enumerate_spindles+0x82>
        spindle.hal = spindle.enabled && sys_spindle[spindle.num].hal.id == spindle.id ? &sys_spindle[spindle.num].hal : &spindles[idx].hal;
 801deb8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801debc:	011b      	lsls	r3, r3, #4
 801debe:	3328      	adds	r3, #40	@ 0x28
 801dec0:	490d      	ldr	r1, [pc, #52]	@ (801def8 <spindle_enumerate_spindles+0xb0>)
 801dec2:	440b      	add	r3, r1
 801dec4:	3304      	adds	r3, #4
 801dec6:	e7ee      	b.n	801dea6 <spindle_enumerate_spindles+0x5e>
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801dec8:	2300      	movs	r3, #0
 801deca:	f88d 3009 	strb.w	r3, [sp, #9]
        callback(&spindle, data);
 801dece:	4629      	mov	r1, r5
 801ded0:	4668      	mov	r0, sp
 801ded2:	47b0      	blx	r6
    for(idx = 0; idx < n_spindle; idx++) {
 801ded4:	3401      	adds	r4, #1
 801ded6:	4b06      	ldr	r3, [pc, #24]	@ (801def0 <spindle_enumerate_spindles+0xa8>)
 801ded8:	781b      	ldrb	r3, [r3, #0]
 801deda:	42a3      	cmp	r3, r4
 801dedc:	d8c0      	bhi.n	801de60 <spindle_enumerate_spindles+0x18>
    return true;
 801dede:	2001      	movs	r0, #1
}
 801dee0:	b004      	add	sp, #16
 801dee2:	bd70      	pop	{r4, r5, r6, pc}
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801dee4:	2301      	movs	r3, #1
 801dee6:	e7f0      	b.n	801deca <spindle_enumerate_spindles+0x82>
        return false;
 801dee8:	2000      	movs	r0, #0
}
 801deea:	4770      	bx	lr
        return false;
 801deec:	2000      	movs	r0, #0
 801deee:	e7f7      	b.n	801dee0 <spindle_enumerate_spindles+0x98>
 801def0:	20001e0c 	.word	0x20001e0c
 801def4:	20001d50 	.word	0x20001d50
 801def8:	20001d9c 	.word	0x20001d9c

0801defc <spindle_is_enabled>:
    if(spindle_num == -1)
 801defc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801df00:	d002      	beq.n	801df08 <spindle_is_enabled+0xc>
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801df02:	b110      	cbz	r0, 801df0a <spindle_is_enabled+0xe>
 801df04:	2000      	movs	r0, #0
 801df06:	4770      	bx	lr
        spindle_num = 0;
 801df08:	2000      	movs	r0, #0
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801df0a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801df0e:	4b05      	ldr	r3, [pc, #20]	@ (801df24 <spindle_is_enabled+0x28>)
 801df10:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801df14:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801df18:	b90b      	cbnz	r3, 801df1e <spindle_is_enabled+0x22>
 801df1a:	2000      	movs	r0, #0
 801df1c:	4770      	bx	lr
 801df1e:	2001      	movs	r0, #1
}
 801df20:	4770      	bx	lr
 801df22:	bf00      	nop
 801df24:	20001d9c 	.word	0x20001d9c

0801df28 <spindle_get>:
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled ? &sys_spindle[spindle_num].hal : NULL;
 801df28:	b968      	cbnz	r0, 801df46 <spindle_get+0x1e>
 801df2a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801df2e:	4a08      	ldr	r2, [pc, #32]	@ (801df50 <spindle_get+0x28>)
 801df30:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801df34:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 801df38:	b13a      	cbz	r2, 801df4a <spindle_get+0x22>
 801df3a:	0108      	lsls	r0, r1, #4
 801df3c:	3028      	adds	r0, #40	@ 0x28
 801df3e:	4b04      	ldr	r3, [pc, #16]	@ (801df50 <spindle_get+0x28>)
 801df40:	4418      	add	r0, r3
 801df42:	3004      	adds	r0, #4
 801df44:	4770      	bx	lr
 801df46:	2000      	movs	r0, #0
 801df48:	4770      	bx	lr
 801df4a:	2000      	movs	r0, #0
}
 801df4c:	4770      	bx	lr
 801df4e:	bf00      	nop
 801df50:	20001d9c 	.word	0x20001d9c

0801df54 <spindle_add_null>:
/*! \brief Register a null spindle that has no connection to the outside world.
This is done automatically on startup if no spindle can be succesfully enabled.
\returns assigned spindle id as a \ref spindle_id_t if successful, \a -1 if not.
*/
spindle_id_t spindle_add_null (void)
{
 801df54:	b508      	push	{r3, lr}
        .update_pwm = null_update_pwm,
        .update_rpm = null_update_rpm
    };

    bool registered = false;
    uint_fast8_t idx = n_spindle;
 801df56:	4b0d      	ldr	r3, [pc, #52]	@ (801df8c <spindle_add_null+0x38>)
 801df58:	7818      	ldrb	r0, [r3, #0]

    if(idx) do {
 801df5a:	b168      	cbz	r0, 801df78 <spindle_add_null+0x24>
        if((registered = spindles[--idx].hal.type == SpindleType_Null))
 801df5c:	3801      	subs	r0, #1
 801df5e:	4b0c      	ldr	r3, [pc, #48]	@ (801df90 <spindle_add_null+0x3c>)
 801df60:	224c      	movs	r2, #76	@ 0x4c
 801df62:	fb02 3300 	mla	r3, r2, r0, r3
 801df66:	7b1b      	ldrb	r3, [r3, #12]
 801df68:	2b05      	cmp	r3, #5
 801df6a:	bf0c      	ite	eq
 801df6c:	2301      	moveq	r3, #1
 801df6e:	2300      	movne	r3, #0
 801df70:	d003      	beq.n	801df7a <spindle_add_null+0x26>
            break;
    } while(idx);
 801df72:	2800      	cmp	r0, #0
 801df74:	d1f2      	bne.n	801df5c <spindle_add_null+0x8>
 801df76:	e000      	b.n	801df7a <spindle_add_null+0x26>
    bool registered = false;
 801df78:	2300      	movs	r3, #0

    if(!registered)
 801df7a:	b10b      	cbz	r3, 801df80 <spindle_add_null+0x2c>
        return spindle_register(&spindle, "NULL");

    return idx;
 801df7c:	b240      	sxtb	r0, r0
}
 801df7e:	bd08      	pop	{r3, pc}
        return spindle_register(&spindle, "NULL");
 801df80:	4904      	ldr	r1, [pc, #16]	@ (801df94 <spindle_add_null+0x40>)
 801df82:	4805      	ldr	r0, [pc, #20]	@ (801df98 <spindle_add_null+0x44>)
 801df84:	f7ff fec8 	bl	801dd18 <spindle_register>
 801df88:	e7f9      	b.n	801df7e <spindle_add_null+0x2a>
 801df8a:	bf00      	nop
 801df8c:	20001e0c 	.word	0x20001e0c
 801df90:	20001d50 	.word	0x20001d50
 801df94:	0803005c 	.word	0x0803005c
 801df98:	08030064 	.word	0x08030064

0801df9c <spindle_select>:
{
 801df9c:	b508      	push	{r3, lr}
    if(n_spindle == 0 && spindle_id >= 0) {
 801df9e:	4b0d      	ldr	r3, [pc, #52]	@ (801dfd4 <spindle_select+0x38>)
 801dfa0:	781b      	ldrb	r3, [r3, #0]
 801dfa2:	b90b      	cbnz	r3, 801dfa8 <spindle_select+0xc>
 801dfa4:	2800      	cmp	r0, #0
 801dfa6:	da0d      	bge.n	801dfc4 <spindle_select+0x28>
    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801dfa8:	4b0b      	ldr	r3, [pc, #44]	@ (801dfd8 <spindle_select+0x3c>)
 801dfaa:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801dfae:	b123      	cbz	r3, 801dfba <spindle_select+0x1e>
 801dfb0:	4b09      	ldr	r3, [pc, #36]	@ (801dfd8 <spindle_select+0x3c>)
 801dfb2:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 801dfb6:	4283      	cmp	r3, r0
 801dfb8:	d008      	beq.n	801dfcc <spindle_select+0x30>
 801dfba:	2100      	movs	r1, #0
 801dfbc:	f7ff fd56 	bl	801da6c <spindle_activate>
 801dfc0:	b930      	cbnz	r0, 801dfd0 <spindle_select+0x34>
}
 801dfc2:	bd08      	pop	{r3, pc}
        spindle_add_null();
 801dfc4:	f7ff ffc6 	bl	801df54 <spindle_add_null>
        spindle_id = 0;
 801dfc8:	2000      	movs	r0, #0
 801dfca:	e7ed      	b.n	801dfa8 <spindle_select+0xc>
    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801dfcc:	2001      	movs	r0, #1
 801dfce:	e7f8      	b.n	801dfc2 <spindle_select+0x26>
 801dfd0:	2001      	movs	r0, #1
 801dfd2:	e7f6      	b.n	801dfc2 <spindle_select+0x26>
 801dfd4:	20001e0c 	.word	0x20001e0c
 801dfd8:	20001d9c 	.word	0x20001d9c

0801dfdc <spindle_get_count>:
{
 801dfdc:	b508      	push	{r3, lr}
    if(n_spindle == 0)
 801dfde:	4b09      	ldr	r3, [pc, #36]	@ (801e004 <spindle_get_count+0x28>)
 801dfe0:	781b      	ldrb	r3, [r3, #0]
 801dfe2:	b123      	cbz	r3, 801dfee <spindle_get_count+0x12>
    return n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null ? 0 : n_spindle;
 801dfe4:	4b07      	ldr	r3, [pc, #28]	@ (801e004 <spindle_get_count+0x28>)
 801dfe6:	7818      	ldrb	r0, [r3, #0]
 801dfe8:	2801      	cmp	r0, #1
 801dfea:	d004      	beq.n	801dff6 <spindle_get_count+0x1a>
}
 801dfec:	bd08      	pop	{r3, pc}
        spindle_select(0);
 801dfee:	2000      	movs	r0, #0
 801dff0:	f7ff ffd4 	bl	801df9c <spindle_select>
 801dff4:	e7f6      	b.n	801dfe4 <spindle_get_count+0x8>
    return n_spindle == 1 && spindles[0].cfg->type == SpindleType_Null ? 0 : n_spindle;
 801dff6:	4b04      	ldr	r3, [pc, #16]	@ (801e008 <spindle_get_count+0x2c>)
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	7a1b      	ldrb	r3, [r3, #8]
 801dffc:	2b05      	cmp	r3, #5
 801dffe:	d1f5      	bne.n	801dfec <spindle_get_count+0x10>
 801e000:	2000      	movs	r0, #0
 801e002:	e7f3      	b.n	801dfec <spindle_get_count+0x10>
 801e004:	20001e0c 	.word	0x20001e0c
 801e008:	20001d50 	.word	0x20001d50

0801e00c <spindle_set_rpm>:
\param rpm the programmed RPM.
\param override_pct override value in percent.
\returns the calulated RPM.
*/
float spindle_set_rpm (spindle_ptrs_t *spindle, float rpm, override_t override_pct)
{
 801e00c:	eef0 7a40 	vmov.f32	s15, s0
    if(override_pct != 100)
 801e010:	2964      	cmp	r1, #100	@ 0x64
 801e012:	d009      	beq.n	801e028 <spindle_set_rpm+0x1c>
        rpm *= 0.01f * (float)override_pct; // Scale RPM by override value.
 801e014:	ee07 1a10 	vmov	s14, r1
 801e018:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801e01c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 801e064 <spindle_set_rpm+0x58>
 801e020:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e024:	ee60 7a07 	vmul.f32	s15, s0, s14

    // Apply RPM limits
    if (rpm <= 0.0f) // TODO: remove this test?
 801e028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e030:	d910      	bls.n	801e054 <spindle_set_rpm+0x48>
        rpm = 0.0f;
    else if (rpm > spindle->rpm_max)
 801e032:	ed90 0a06 	vldr	s0, [r0, #24]
 801e036:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801e03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e03e:	d40b      	bmi.n	801e058 <spindle_set_rpm+0x4c>
        rpm = spindle->rpm_max;
    else if (rpm < spindle->rpm_min)
 801e040:	ed90 0a05 	vldr	s0, [r0, #20]
 801e044:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801e048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e04c:	dc04      	bgt.n	801e058 <spindle_set_rpm+0x4c>
 801e04e:	eeb0 0a67 	vmov.f32	s0, s15
 801e052:	e001      	b.n	801e058 <spindle_set_rpm+0x4c>
        rpm = 0.0f;
 801e054:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 801e068 <spindle_set_rpm+0x5c>
        rpm = spindle->rpm_min;

    spindle->param->rpm_overridden = rpm;
 801e058:	6843      	ldr	r3, [r0, #4]
 801e05a:	ed83 0a01 	vstr	s0, [r3, #4]
    spindle->param->override_pct = override_pct;
 801e05e:	6843      	ldr	r3, [r0, #4]
 801e060:	60d9      	str	r1, [r3, #12]

    return rpm;
}
 801e062:	4770      	bx	lr
 801e064:	3c23d70a 	.word	0x3c23d70a
 801e068:	00000000 	.word	0x00000000

0801e06c <set_state>:
    if (!ABORTED) { // Block during abort.
 801e06c:	4b29      	ldr	r3, [pc, #164]	@ (801e114 <set_state+0xa8>)
 801e06e:	781b      	ldrb	r3, [r3, #0]
 801e070:	2b00      	cmp	r3, #0
 801e072:	d142      	bne.n	801e0fa <set_state+0x8e>
{
 801e074:	b570      	push	{r4, r5, r6, lr}
 801e076:	ed2d 8b02 	vpush	{d8}
 801e07a:	4604      	mov	r4, r0
 801e07c:	460d      	mov	r5, r1
 801e07e:	eeb0 8a40 	vmov.f32	s16, s0
    if (!ABORTED) { // Block during abort.
 801e082:	4b24      	ldr	r3, [pc, #144]	@ (801e114 <set_state+0xa8>)
 801e084:	785b      	ldrb	r3, [r3, #1]
 801e086:	b9ab      	cbnz	r3, 801e0b4 <set_state+0x48>
        if (!state.on) { // Halt or set spindle direction and rpm.
 801e088:	b2cb      	uxtb	r3, r1
 801e08a:	f015 0f01 	tst.w	r5, #1
 801e08e:	d119      	bne.n	801e0c4 <set_state+0x58>
            spindle->param->rpm = rpm = 0.0f;
 801e090:	6843      	ldr	r3, [r0, #4]
 801e092:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 801e118 <set_state+0xac>
 801e096:	ed83 8a00 	vstr	s16, [r3]
            spindle->set_state(spindle, (spindle_state_t){0}, 0.0f);
 801e09a:	6a03      	ldr	r3, [r0, #32]
 801e09c:	eeb0 0a48 	vmov.f32	s0, s16
 801e0a0:	f04f 0100 	mov.w	r1, #0
 801e0a4:	4798      	blx	r3
        system_add_rt_report(Report_Spindle); // Set to report change immediately
 801e0a6:	2010      	movs	r0, #16
 801e0a8:	f003 fb8c 	bl	80217c4 <system_add_rt_report>
        st_rpm_changed(rpm);
 801e0ac:	eeb0 0a48 	vmov.f32	s0, s16
 801e0b0:	f001 fb36 	bl	801f720 <st_rpm_changed>
    return !ABORTED;
 801e0b4:	4b17      	ldr	r3, [pc, #92]	@ (801e114 <set_state+0xa8>)
 801e0b6:	781b      	ldrb	r3, [r3, #0]
 801e0b8:	b9cb      	cbnz	r3, 801e0ee <set_state+0x82>
 801e0ba:	4b16      	ldr	r3, [pc, #88]	@ (801e114 <set_state+0xa8>)
 801e0bc:	785b      	ldrb	r3, [r3, #1]
 801e0be:	b1d3      	cbz	r3, 801e0f6 <set_state+0x8a>
 801e0c0:	2000      	movs	r0, #0
 801e0c2:	e015      	b.n	801e0f0 <set_state+0x84>
            if (spindle->cap.laser && state.ccw)
 801e0c4:	7a82      	ldrb	r2, [r0, #10]
 801e0c6:	f012 0f08 	tst.w	r2, #8
 801e0ca:	d004      	beq.n	801e0d6 <set_state+0x6a>
 801e0cc:	f013 0f02 	tst.w	r3, #2
 801e0d0:	d001      	beq.n	801e0d6 <set_state+0x6a>
                rpm = 0.0f; // TODO: May need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE);
 801e0d2:	ed9f 8a11 	vldr	s16, [pc, #68]	@ 801e118 <set_state+0xac>
            spindle->set_state(spindle, state, spindle_set_rpm(spindle, rpm, spindle->param->override_pct));
 801e0d6:	6a26      	ldr	r6, [r4, #32]
 801e0d8:	6863      	ldr	r3, [r4, #4]
 801e0da:	68d9      	ldr	r1, [r3, #12]
 801e0dc:	eeb0 0a48 	vmov.f32	s0, s16
 801e0e0:	4620      	mov	r0, r4
 801e0e2:	f7ff ff93 	bl	801e00c <spindle_set_rpm>
 801e0e6:	4629      	mov	r1, r5
 801e0e8:	4620      	mov	r0, r4
 801e0ea:	47b0      	blx	r6
 801e0ec:	e7db      	b.n	801e0a6 <set_state+0x3a>
    return !ABORTED;
 801e0ee:	2000      	movs	r0, #0
}
 801e0f0:	ecbd 8b02 	vpop	{d8}
 801e0f4:	bd70      	pop	{r4, r5, r6, pc}
    return !ABORTED;
 801e0f6:	2001      	movs	r0, #1
 801e0f8:	e7fa      	b.n	801e0f0 <set_state+0x84>
 801e0fa:	4b06      	ldr	r3, [pc, #24]	@ (801e114 <set_state+0xa8>)
 801e0fc:	781b      	ldrb	r3, [r3, #0]
 801e0fe:	b923      	cbnz	r3, 801e10a <set_state+0x9e>
 801e100:	4b04      	ldr	r3, [pc, #16]	@ (801e114 <set_state+0xa8>)
 801e102:	785b      	ldrb	r3, [r3, #1]
 801e104:	b11b      	cbz	r3, 801e10e <set_state+0xa2>
 801e106:	2000      	movs	r0, #0
 801e108:	4770      	bx	lr
 801e10a:	2000      	movs	r0, #0
 801e10c:	4770      	bx	lr
 801e10e:	2001      	movs	r0, #1
}
 801e110:	4770      	bx	lr
 801e112:	bf00      	nop
 801e114:	200014a0 	.word	0x200014a0
 801e118:	00000000 	.word	0x00000000

0801e11c <spindle_set_state>:
{
 801e11c:	b508      	push	{r3, lr}
    return set_state(spindle, state, rpm);
 801e11e:	f7ff ffa5 	bl	801e06c <set_state>
}
 801e122:	bd08      	pop	{r3, pc}

0801e124 <spindle_restore>:
{
 801e124:	b538      	push	{r3, r4, r5, lr}
 801e126:	ed2d 8b02 	vpush	{d8}
    if(spindle->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801e12a:	7a83      	ldrb	r3, [r0, #10]
 801e12c:	f013 0f08 	tst.w	r3, #8
 801e130:	d009      	beq.n	801e146 <spindle_restore+0x22>
        sys.step_control.update_spindle_rpm = On;
 801e132:	4a2a      	ldr	r2, [pc, #168]	@ (801e1dc <spindle_restore+0xb8>)
 801e134:	7e13      	ldrb	r3, [r2, #24]
 801e136:	f043 0308 	orr.w	r3, r3, #8
 801e13a:	7613      	strb	r3, [r2, #24]
    bool ok = true;
 801e13c:	2501      	movs	r5, #1
}
 801e13e:	4628      	mov	r0, r5
 801e140:	ecbd 8b02 	vpop	{d8}
 801e144:	bd38      	pop	{r3, r4, r5, pc}
 801e146:	4604      	mov	r4, r0
 801e148:	460d      	mov	r5, r1
        spindle_set_state(spindle, state, rpm);
 801e14a:	f7ff ffe7 	bl	801e11c <spindle_set_state>
        if(state.on) {
 801e14e:	f015 0f01 	tst.w	r5, #1
 801e152:	d040      	beq.n	801e1d6 <spindle_restore+0xb2>
            if((ok = !spindle->cap.at_speed))
 801e154:	7aa3      	ldrb	r3, [r4, #10]
 801e156:	f003 0304 	and.w	r3, r3, #4
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	bf0c      	ite	eq
 801e15e:	2501      	moveq	r5, #1
 801e160:	2500      	movne	r5, #0
 801e162:	d030      	beq.n	801e1c6 <spindle_restore+0xa2>
            else if((ok == (settings.spindle.at_speed_tolerance <= 0.0f))) {
 801e164:	4b1e      	ldr	r3, [pc, #120]	@ (801e1e0 <spindle_restore+0xbc>)
 801e166:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 801e16a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e172:	bf94      	ite	ls
 801e174:	2301      	movls	r3, #1
 801e176:	2300      	movhi	r3, #0
 801e178:	42ab      	cmp	r3, r5
 801e17a:	d1e0      	bne.n	801e13e <spindle_restore+0x1a>
                float delay = 0.0f;
 801e17c:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 801e1e4 <spindle_restore+0xc0>
                while(!(ok = spindle->get_state(spindle).at_speed)) {
 801e180:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801e182:	4620      	mov	r0, r4
 801e184:	4798      	blx	r3
 801e186:	f3c0 1580 	ubfx	r5, r0, #6, #1
 801e18a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e18e:	d1d6      	bne.n	801e13e <spindle_restore+0x1a>
                    if(!(ok = delay_sec(0.1f, DelayMode_SysSuspend)))
 801e190:	2001      	movs	r0, #1
 801e192:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801e1e8 <spindle_restore+0xc4>
 801e196:	f7f7 fa25 	bl	80155e4 <delay_sec>
 801e19a:	4605      	mov	r5, r0
 801e19c:	2800      	cmp	r0, #0
 801e19e:	d0ce      	beq.n	801e13e <spindle_restore+0x1a>
                    delay += 0.1f;
 801e1a0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801e1e8 <spindle_restore+0xc4>
 801e1a4:	ee38 8a27 	vadd.f32	s16, s16, s15
                    if(!(ok = delay < settings.safety_door.spindle_on_delay)) {
 801e1a8:	4b0d      	ldr	r3, [pc, #52]	@ (801e1e0 <spindle_restore+0xbc>)
 801e1aa:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801e1ae:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1b6:	bfcc      	ite	gt
 801e1b8:	2501      	movgt	r5, #1
 801e1ba:	2500      	movle	r5, #0
 801e1bc:	dce0      	bgt.n	801e180 <spindle_restore+0x5c>
                        system_raise_alarm(Alarm_Spindle);
 801e1be:	200e      	movs	r0, #14
 801e1c0:	f003 fab2 	bl	8021728 <system_raise_alarm>
                        break;
 801e1c4:	e7bb      	b.n	801e13e <spindle_restore+0x1a>
                ok = delay_sec(settings.safety_door.spindle_on_delay, DelayMode_SysSuspend);
 801e1c6:	2001      	movs	r0, #1
 801e1c8:	4b05      	ldr	r3, [pc, #20]	@ (801e1e0 <spindle_restore+0xbc>)
 801e1ca:	ed93 0a50 	vldr	s0, [r3, #320]	@ 0x140
 801e1ce:	f7f7 fa09 	bl	80155e4 <delay_sec>
 801e1d2:	4605      	mov	r5, r0
 801e1d4:	e7b3      	b.n	801e13e <spindle_restore+0x1a>
    bool ok = true;
 801e1d6:	2501      	movs	r5, #1
 801e1d8:	e7b1      	b.n	801e13e <spindle_restore+0x1a>
 801e1da:	bf00      	nop
 801e1dc:	200014a0 	.word	0x200014a0
 801e1e0:	20001bd8 	.word	0x20001bd8
 801e1e4:	00000000 	.word	0x00000000
 801e1e8:	3dcccccd 	.word	0x3dcccccd

0801e1ec <spindle_sync>:
{
 801e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1ee:	ed2d 8b02 	vpush	{d8}
 801e1f2:	4605      	mov	r5, r0
 801e1f4:	460f      	mov	r7, r1
 801e1f6:	eeb0 8a40 	vmov.f32	s16, s0
    if (!(ok = state_get() == STATE_CHECK_MODE)) {
 801e1fa:	f000 fb25 	bl	801e848 <state_get>
 801e1fe:	2802      	cmp	r0, #2
 801e200:	bf0c      	ite	eq
 801e202:	2001      	moveq	r0, #1
 801e204:	2000      	movne	r0, #0
 801e206:	d019      	beq.n	801e23c <spindle_sync+0x50>
        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801e208:	f017 0f01 	tst.w	r7, #1
 801e20c:	d00f      	beq.n	801e22e <spindle_sync+0x42>
 801e20e:	7aab      	ldrb	r3, [r5, #10]
 801e210:	f013 0f04 	tst.w	r3, #4
 801e214:	d015      	beq.n	801e242 <spindle_sync+0x56>
 801e216:	4b24      	ldr	r3, [pc, #144]	@ (801e2a8 <spindle_sync+0xbc>)
 801e218:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 801e21c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e224:	d901      	bls.n	801e22a <spindle_sync+0x3e>
 801e226:	2600      	movs	r6, #0
 801e228:	e002      	b.n	801e230 <spindle_sync+0x44>
 801e22a:	2601      	movs	r6, #1
 801e22c:	e000      	b.n	801e230 <spindle_sync+0x44>
 801e22e:	2601      	movs	r6, #1
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801e230:	f7f9 fa70 	bl	8017714 <protocol_buffer_synchronize>
 801e234:	4604      	mov	r4, r0
 801e236:	b930      	cbnz	r0, 801e246 <spindle_sync+0x5a>
        ok &= at_speed;
 801e238:	ea04 0006 	and.w	r0, r4, r6
}
 801e23c:	ecbd 8b02 	vpop	{d8}
 801e240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801e242:	2601      	movs	r6, #1
 801e244:	e7f4      	b.n	801e230 <spindle_sync+0x44>
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801e246:	eeb0 0a48 	vmov.f32	s0, s16
 801e24a:	4639      	mov	r1, r7
 801e24c:	4628      	mov	r0, r5
 801e24e:	f7ff ff0d 	bl	801e06c <set_state>
 801e252:	2800      	cmp	r0, #0
 801e254:	d0f0      	beq.n	801e238 <spindle_sync+0x4c>
 801e256:	2e00      	cmp	r6, #0
 801e258:	d1ee      	bne.n	801e238 <spindle_sync+0x4c>
            float on_delay = 0.0f;
 801e25a:	ed9f 8a14 	vldr	s16, [pc, #80]	@ 801e2ac <spindle_sync+0xc0>
            while(!(at_speed = spindle->get_state(spindle).at_speed)) {
 801e25e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801e260:	4628      	mov	r0, r5
 801e262:	4798      	blx	r3
 801e264:	f3c0 1680 	ubfx	r6, r0, #6, #1
 801e268:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e26c:	d1e4      	bne.n	801e238 <spindle_sync+0x4c>
                if(!(ok = delay_sec(0.2f, DelayMode_Dwell)))
 801e26e:	2000      	movs	r0, #0
 801e270:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 801e2b0 <spindle_sync+0xc4>
 801e274:	f7f7 f9b6 	bl	80155e4 <delay_sec>
 801e278:	4604      	mov	r4, r0
 801e27a:	2800      	cmp	r0, #0
 801e27c:	d0dc      	beq.n	801e238 <spindle_sync+0x4c>
                on_delay += 0.2f;
 801e27e:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801e2b0 <spindle_sync+0xc4>
 801e282:	ee38 8a27 	vadd.f32	s16, s16, s15
                if(!(ok = on_delay < settings.safety_door.spindle_on_delay)) {
 801e286:	4b08      	ldr	r3, [pc, #32]	@ (801e2a8 <spindle_sync+0xbc>)
 801e288:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
 801e28c:	eef4 7ac8 	vcmpe.f32	s15, s16
 801e290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e294:	bfcc      	ite	gt
 801e296:	2401      	movgt	r4, #1
 801e298:	2400      	movle	r4, #0
 801e29a:	dce0      	bgt.n	801e25e <spindle_sync+0x72>
                    gc_spindle_off();
 801e29c:	f7ee fe34 	bl	800cf08 <gc_spindle_off>
                    system_raise_alarm(Alarm_Spindle);
 801e2a0:	200e      	movs	r0, #14
 801e2a2:	f003 fa41 	bl	8021728 <system_raise_alarm>
                    break;
 801e2a6:	e7c7      	b.n	801e238 <spindle_sync+0x4c>
 801e2a8:	20001bd8 	.word	0x20001bd8
 801e2ac:	00000000 	.word	0x00000000
 801e2b0:	3e4ccccd 	.word	0x3e4ccccd

0801e2b4 <spindle_set_override>:
{
 801e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2b6:	4605      	mov	r5, r0
    if(speed_override != 100 && spindle->param->state.override_disable)
 801e2b8:	2964      	cmp	r1, #100	@ 0x64
 801e2ba:	d006      	beq.n	801e2ca <spindle_set_override+0x16>
 801e2bc:	6843      	ldr	r3, [r0, #4]
 801e2be:	7a1b      	ldrb	r3, [r3, #8]
 801e2c0:	f013 0f10 	tst.w	r3, #16
 801e2c4:	d10a      	bne.n	801e2dc <spindle_set_override+0x28>
    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801e2c6:	2909      	cmp	r1, #9
 801e2c8:	d909      	bls.n	801e2de <spindle_set_override+0x2a>
 801e2ca:	29c8      	cmp	r1, #200	@ 0xc8
 801e2cc:	bf28      	it	cs
 801e2ce:	21c8      	movcs	r1, #200	@ 0xc8
 801e2d0:	460c      	mov	r4, r1
    if ((uint8_t)speed_override != spindle->param->override_pct) {
 801e2d2:	686b      	ldr	r3, [r5, #4]
 801e2d4:	68d9      	ldr	r1, [r3, #12]
 801e2d6:	b2e2      	uxtb	r2, r4
 801e2d8:	4291      	cmp	r1, r2
 801e2da:	d102      	bne.n	801e2e2 <spindle_set_override+0x2e>
}
 801e2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801e2de:	240a      	movs	r4, #10
 801e2e0:	e7f7      	b.n	801e2d2 <spindle_set_override+0x1e>
        spindle->param->override_pct = speed_override;
 801e2e2:	60dc      	str	r4, [r3, #12]
        if(state_get() == STATE_IDLE)
 801e2e4:	f000 fab0 	bl	801e848 <state_get>
 801e2e8:	b1e0      	cbz	r0, 801e324 <spindle_set_override+0x70>
            sys.step_control.update_spindle_rpm = On;
 801e2ea:	4a12      	ldr	r2, [pc, #72]	@ (801e334 <spindle_set_override+0x80>)
 801e2ec:	7e13      	ldrb	r3, [r2, #24]
 801e2ee:	f043 0308 	orr.w	r3, r3, #8
 801e2f2:	7613      	strb	r3, [r2, #24]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 801e2f4:	2040      	movs	r0, #64	@ 0x40
 801e2f6:	f003 fa65 	bl	80217c4 <system_add_rt_report>
       if(grbl.on_spindle_programmed)
 801e2fa:	4b0f      	ldr	r3, [pc, #60]	@ (801e338 <spindle_set_override+0x84>)
 801e2fc:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801e2fe:	b156      	cbz	r6, 801e316 <spindle_set_override+0x62>
           grbl.on_spindle_programmed(spindle, gc_state.modal.spindle.state, spindle_set_rpm(spindle, gc_state.spindle.rpm, speed_override), gc_state.modal.spindle.rpm_mode);
 801e300:	4f0e      	ldr	r7, [pc, #56]	@ (801e33c <spindle_set_override+0x88>)
 801e302:	4621      	mov	r1, r4
 801e304:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 801e308:	4628      	mov	r0, r5
 801e30a:	f7ff fe7f 	bl	801e00c <spindle_set_rpm>
 801e30e:	7efa      	ldrb	r2, [r7, #27]
 801e310:	7eb9      	ldrb	r1, [r7, #26]
 801e312:	4628      	mov	r0, r5
 801e314:	47b0      	blx	r6
       if(grbl.on_override_changed)
 801e316:	4b08      	ldr	r3, [pc, #32]	@ (801e338 <spindle_set_override+0x84>)
 801e318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d0de      	beq.n	801e2dc <spindle_set_override+0x28>
           grbl.on_override_changed(OverrideChanged_SpindleRPM);
 801e31e:	2000      	movs	r0, #0
 801e320:	4798      	blx	r3
 801e322:	e7db      	b.n	801e2dc <spindle_set_override+0x28>
            spindle_set_state(spindle, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 801e324:	4b05      	ldr	r3, [pc, #20]	@ (801e33c <spindle_set_override+0x88>)
 801e326:	ed93 0a14 	vldr	s0, [r3, #80]	@ 0x50
 801e32a:	7e99      	ldrb	r1, [r3, #26]
 801e32c:	4628      	mov	r0, r5
 801e32e:	f7ff fef5 	bl	801e11c <spindle_set_state>
 801e332:	e7df      	b.n	801e2f4 <spindle_set_override+0x40>
 801e334:	200014a0 	.word	0x200014a0
 801e338:	200013a8 	.word	0x200013a8
 801e33c:	20000ef8 	.word	0x20000ef8

0801e340 <spindle_all_off>:

/*! \brief Turn off all enabled spindles.
*/
void spindle_all_off (void)
{
 801e340:	b508      	push	{r3, lr}
    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;

    do {
        if((spindle = spindle_get(--spindle_num))) {
 801e342:	2000      	movs	r0, #0
 801e344:	f7ff fdf0 	bl	801df28 <spindle_get>
 801e348:	b160      	cbz	r0, 801e364 <spindle_all_off+0x24>
            spindle->param->rpm = spindle->param->rpm_overridden = 0.0f;
 801e34a:	6842      	ldr	r2, [r0, #4]
 801e34c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801e36c <spindle_all_off+0x2c>
 801e350:	ed82 0a01 	vstr	s0, [r2, #4]
 801e354:	6842      	ldr	r2, [r0, #4]
 801e356:	ed82 0a00 	vstr	s0, [r2]
            spindle->param->state.value = 0;
 801e35a:	6842      	ldr	r2, [r0, #4]
 801e35c:	2100      	movs	r1, #0
 801e35e:	7211      	strb	r1, [r2, #8]
#ifdef GRBL_ESP32
            spindle->esp32_off(spindle);
#else
            spindle->set_state(spindle, (spindle_state_t){0}, 0.0f);
 801e360:	6a02      	ldr	r2, [r0, #32]
 801e362:	4790      	blx	r2
#endif
        }
    } while(spindle_num);

    system_add_rt_report(Report_Spindle);
 801e364:	2010      	movs	r0, #16
 801e366:	f003 fa2d 	bl	80217c4 <system_add_rt_report>
}
 801e36a:	bd08      	pop	{r3, pc}
 801e36c:	00000000 	.word	0x00000000

0801e370 <spindle_is_on>:

/*! \brief Check if any of the enabled spindles is running.
\returns \a true if a spindle is running, \a false otherwise.
*/
bool spindle_is_on (void)
{
 801e370:	b508      	push	{r3, lr}
    bool on = false;

    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;
    do {
        if((spindle = spindle_get(--spindle_num)))
 801e372:	2000      	movs	r0, #0
 801e374:	f7ff fdd8 	bl	801df28 <spindle_get>
 801e378:	b120      	cbz	r0, 801e384 <spindle_is_on+0x14>
            on = spindle->get_state(spindle).on;
 801e37a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 801e37c:	4790      	blx	r2
 801e37e:	f000 0001 	and.w	r0, r0, #1
    } while(spindle_num && !on);

    return on;
}
 801e382:	bd08      	pop	{r3, pc}
 801e384:	2000      	movs	r0, #0
 801e386:	e7fc      	b.n	801e382 <spindle_is_on+0x12>

0801e388 <state_noop>:
/*! /brief No operation handler.
 */
static void state_noop (uint_fast16_t rt_exec)
{
    // Do nothing - state change requests are handled elsewhere or ignored.
}
 801e388:	4770      	bx	lr
	...

0801e38c <state_await_restart_retract>:
/*! /brief Waits until plunge motion abort is completed then calls state_await_hold() to restart retraction.
state_await_hold() is set to handle the cycle complete event.
 */
static void state_await_restart_retract (uint_fast16_t rt_exec)
{
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801e38c:	f010 0f04 	tst.w	r0, #4
 801e390:	d014      	beq.n	801e3bc <state_await_restart_retract+0x30>
{
 801e392:	b508      	push	{r3, lr}

        if (sys.step_control.execute_sys_motion) {
 801e394:	4b0a      	ldr	r3, [pc, #40]	@ (801e3c0 <state_await_restart_retract+0x34>)
 801e396:	7e1b      	ldrb	r3, [r3, #24]
 801e398:	f013 0f04 	tst.w	r3, #4
 801e39c:	d106      	bne.n	801e3ac <state_await_restart_retract+0x20>
            sys.step_control.execute_sys_motion = Off;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }

        stateHandler = state_await_hold;
 801e39e:	4b09      	ldr	r3, [pc, #36]	@ (801e3c4 <state_await_restart_retract+0x38>)
 801e3a0:	4a09      	ldr	r2, [pc, #36]	@ (801e3c8 <state_await_restart_retract+0x3c>)
 801e3a2:	601a      	str	r2, [r3, #0]
        stateHandler(EXEC_CYCLE_COMPLETE);
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	2004      	movs	r0, #4
 801e3a8:	4798      	blx	r3
    }
}
 801e3aa:	bd08      	pop	{r3, pc}
            sys.step_control.execute_sys_motion = Off;
 801e3ac:	4b04      	ldr	r3, [pc, #16]	@ (801e3c0 <state_await_restart_retract+0x34>)
 801e3ae:	7e1a      	ldrb	r2, [r3, #24]
 801e3b0:	f36f 0282 	bfc	r2, #2, #1
 801e3b4:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801e3b6:	f001 fa0f 	bl	801f7d8 <st_parking_restore_buffer>
 801e3ba:	e7f0      	b.n	801e39e <state_await_restart_retract+0x12>
 801e3bc:	4770      	bx	lr
 801e3be:	bf00      	nop
 801e3c0:	200014a0 	.word	0x200014a0
 801e3c4:	20000424 	.word	0x20000424
 801e3c8:	0801ef05 	.word	0x0801ef05

0801e3cc <state_await_waypoint_retract>:
/*! /brief Waits until slow plunge motion is completed then deenergize spindle and coolant and execute fast retract motion.
state_await_resume() is set to handle the cycle complete event.
 */
static void state_await_waypoint_retract (uint_fast16_t rt_exec)
{
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801e3cc:	f010 0f04 	tst.w	r0, #4
 801e3d0:	d05c      	beq.n	801e48c <state_await_waypoint_retract+0xc0>
{
 801e3d2:	b500      	push	{lr}
 801e3d4:	b085      	sub	sp, #20

        bool await_motion = false;

        if (sys.step_control.execute_sys_motion) {
 801e3d6:	4b2e      	ldr	r3, [pc, #184]	@ (801e490 <state_await_waypoint_retract+0xc4>)
 801e3d8:	7e1b      	ldrb	r3, [r3, #24]
 801e3da:	f013 0f04 	tst.w	r3, #4
 801e3de:	d135      	bne.n	801e44c <state_await_waypoint_retract+0x80>
            sys.step_control.execute_sys_motion = Off;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }

        // NOTE: Clear accessory state after retract and after an aborted restore motion.
        park.plan_data.spindle.state.value = 0;
 801e3e0:	4b2c      	ldr	r3, [pc, #176]	@ (801e494 <state_await_waypoint_retract+0xc8>)
 801e3e2:	2100      	movs	r1, #0
 801e3e4:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
        park.plan_data.spindle.rpm = 0.0f;
 801e3e8:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801e498 <state_await_waypoint_retract+0xcc>
 801e3ec:	ed83 0a09 	vstr	s0, [r3, #36]	@ 0x24
        park.plan_data.spindle.hal->set_state(park.plan_data.spindle.hal, park.plan_data.spindle.state, 0.0f); // De-energize
 801e3f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801e3f2:	6a03      	ldr	r3, [r0, #32]
 801e3f4:	4798      	blx	r3

        if (!settings.safety_door.flags.keep_coolant_on) {
 801e3f6:	4b29      	ldr	r3, [pc, #164]	@ (801e49c <state_await_waypoint_retract+0xd0>)
 801e3f8:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801e3fc:	f013 0f02 	tst.w	r3, #2
 801e400:	d106      	bne.n	801e410 <state_await_waypoint_retract+0x44>
            park.plan_data.condition.coolant.value = 0;
 801e402:	2000      	movs	r0, #0
 801e404:	4b23      	ldr	r3, [pc, #140]	@ (801e494 <state_await_waypoint_retract+0xc8>)
 801e406:	f883 0036 	strb.w	r0, [r3, #54]	@ 0x36
            hal.coolant.set_state(park.plan_data.condition.coolant); // De-energize
 801e40a:	4b25      	ldr	r3, [pc, #148]	@ (801e4a0 <state_await_waypoint_retract+0xd4>)
 801e40c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e40e:	4798      	blx	r3
        }

        stateHandler = state_await_resume;
 801e410:	4b24      	ldr	r3, [pc, #144]	@ (801e4a4 <state_await_waypoint_retract+0xd8>)
 801e412:	4a25      	ldr	r2, [pc, #148]	@ (801e4a8 <state_await_waypoint_retract+0xdc>)
 801e414:	601a      	str	r2, [r3, #0]

        // Execute fast parking retract motion to parking target location.
        if (park.flags.motion && park.target[settings.parking.axis] < settings.parking.target) {
 801e416:	4b1f      	ldr	r3, [pc, #124]	@ (801e494 <state_await_waypoint_retract+0xc8>)
 801e418:	7f1b      	ldrb	r3, [r3, #28]
 801e41a:	f013 0f02 	tst.w	r3, #2
 801e41e:	d00e      	beq.n	801e43e <state_await_waypoint_retract+0x72>
 801e420:	4a1e      	ldr	r2, [pc, #120]	@ (801e49c <state_await_waypoint_retract+0xd0>)
 801e422:	f892 c129 	ldrb.w	ip, [r2, #297]	@ 0x129
 801e426:	4b1b      	ldr	r3, [pc, #108]	@ (801e494 <state_await_waypoint_retract+0xc8>)
 801e428:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801e42c:	ed93 7a00 	vldr	s14, [r3]
 801e430:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 801e434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e43c:	d40e      	bmi.n	801e45c <state_await_waypoint_retract+0x90>
            park.plan_data.feed_rate = settings.parking.rate;
            await_motion = mc_parking_motion(target, &park.plan_data);
        }

        if (!await_motion)
            stateHandler(EXEC_CYCLE_COMPLETE);
 801e43e:	4b19      	ldr	r3, [pc, #100]	@ (801e4a4 <state_await_waypoint_retract+0xd8>)
 801e440:	681b      	ldr	r3, [r3, #0]
 801e442:	2004      	movs	r0, #4
 801e444:	4798      	blx	r3
    }
}
 801e446:	b005      	add	sp, #20
 801e448:	f85d fb04 	ldr.w	pc, [sp], #4
            sys.step_control.execute_sys_motion = Off;
 801e44c:	4b10      	ldr	r3, [pc, #64]	@ (801e490 <state_await_waypoint_retract+0xc4>)
 801e44e:	7e1a      	ldrb	r2, [r3, #24]
 801e450:	f36f 0282 	bfc	r2, #2, #1
 801e454:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801e456:	f001 f9bf 	bl	801f7d8 <st_parking_restore_buffer>
 801e45a:	e7c1      	b.n	801e3e0 <state_await_waypoint_retract+0x14>
            memcpy(target, park.target, sizeof(target));
 801e45c:	4b0d      	ldr	r3, [pc, #52]	@ (801e494 <state_await_waypoint_retract+0xc8>)
 801e45e:	f10d 0e04 	add.w	lr, sp, #4
 801e462:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e466:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
            target[settings.parking.axis] = settings.parking.target;
 801e46a:	aa04      	add	r2, sp, #16
 801e46c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801e470:	ed4c 7a03 	vstr	s15, [ip, #-12]
            park.plan_data.feed_rate = settings.parking.rate;
 801e474:	4a09      	ldr	r2, [pc, #36]	@ (801e49c <state_await_waypoint_retract+0xd0>)
 801e476:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 801e47a:	4619      	mov	r1, r3
 801e47c:	f841 2f20 	str.w	r2, [r1, #32]!
            await_motion = mc_parking_motion(target, &park.plan_data);
 801e480:	4670      	mov	r0, lr
 801e482:	f7f6 f881 	bl	8014588 <mc_parking_motion>
        if (!await_motion)
 801e486:	2800      	cmp	r0, #0
 801e488:	d1dd      	bne.n	801e446 <state_await_waypoint_retract+0x7a>
 801e48a:	e7d8      	b.n	801e43e <state_await_waypoint_retract+0x72>
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop
 801e490:	200014a0 	.word	0x200014a0
 801e494:	20001e10 	.word	0x20001e10
 801e498:	00000000 	.word	0x00000000
 801e49c:	20001bd8 	.word	0x20001bd8
 801e4a0:	200011c0 	.word	0x200011c0
 801e4a4:	20000424 	.word	0x20000424
 801e4a8:	0801eb31 	.word	0x0801eb31

0801e4ac <restart_retract>:
{
 801e4ac:	b508      	push	{r3, lr}
    grbl.report.feedback_message(Message_SafetyDoorAjar);
 801e4ae:	4b12      	ldr	r3, [pc, #72]	@ (801e4f8 <restart_retract+0x4c>)
 801e4b0:	68db      	ldr	r3, [r3, #12]
 801e4b2:	2006      	movs	r0, #6
 801e4b4:	4798      	blx	r3
    stateHandler = state_await_restart_retract;
 801e4b6:	4b11      	ldr	r3, [pc, #68]	@ (801e4fc <restart_retract+0x50>)
 801e4b8:	4a11      	ldr	r2, [pc, #68]	@ (801e500 <restart_retract+0x54>)
 801e4ba:	601a      	str	r2, [r3, #0]
    park.flags.restart = On;
 801e4bc:	4a11      	ldr	r2, [pc, #68]	@ (801e504 <restart_retract+0x58>)
 801e4be:	7f13      	ldrb	r3, [r2, #28]
 801e4c0:	f043 0304 	orr.w	r3, r3, #4
 801e4c4:	7713      	strb	r3, [r2, #28]
    sys.parking_state = Parking_Retracting;
 801e4c6:	4b10      	ldr	r3, [pc, #64]	@ (801e508 <restart_retract+0x5c>)
 801e4c8:	2202      	movs	r2, #2
 801e4ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (sys.step_control.execute_sys_motion) {
 801e4ce:	7e1b      	ldrb	r3, [r3, #24]
 801e4d0:	f013 0f04 	tst.w	r3, #4
 801e4d4:	d104      	bne.n	801e4e0 <restart_retract+0x34>
        stateHandler(EXEC_CYCLE_COMPLETE);
 801e4d6:	4b09      	ldr	r3, [pc, #36]	@ (801e4fc <restart_retract+0x50>)
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	2004      	movs	r0, #4
 801e4dc:	4798      	blx	r3
}
 801e4de:	bd08      	pop	{r3, pc}
        st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 801e4e0:	f001 f924 	bl	801f72c <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On;
 801e4e4:	4b08      	ldr	r3, [pc, #32]	@ (801e508 <restart_retract+0x5c>)
 801e4e6:	7e1a      	ldrb	r2, [r3, #24]
 801e4e8:	f042 0202 	orr.w	r2, r2, #2
 801e4ec:	761a      	strb	r2, [r3, #24]
        sys.step_control.execute_sys_motion = On;
 801e4ee:	b2d2      	uxtb	r2, r2
 801e4f0:	f042 0204 	orr.w	r2, r2, #4
 801e4f4:	761a      	strb	r2, [r3, #24]
 801e4f6:	e7f2      	b.n	801e4de <restart_retract+0x32>
 801e4f8:	200013a8 	.word	0x200013a8
 801e4fc:	20000424 	.word	0x20000424
 801e500:	0801e38d 	.word	0x0801e38d
 801e504:	20001e10 	.word	0x20001e10
 801e508:	200014a0 	.word	0x200014a0

0801e50c <state_spindle_restore>:
{
 801e50c:	b508      	push	{r3, lr}
 801e50e:	4603      	mov	r3, r0
    if(spindle->hal)
 801e510:	68c0      	ldr	r0, [r0, #12]
 801e512:	b120      	cbz	r0, 801e51e <state_spindle_restore+0x12>
        spindle_restore(spindle->hal, spindle->state, spindle->rpm);
 801e514:	ed93 0a00 	vldr	s0, [r3]
 801e518:	7919      	ldrb	r1, [r3, #4]
 801e51a:	f7ff fe03 	bl	801e124 <spindle_restore>
}
 801e51e:	bd08      	pop	{r3, pc}

0801e520 <state_restore_conditions>:
{
 801e520:	b538      	push	{r3, r4, r5, lr}
 801e522:	4604      	mov	r4, r0
    if (!settings.parking.flags.enabled || !park.flags.restart) {
 801e524:	4b17      	ldr	r3, [pc, #92]	@ (801e584 <state_restore_conditions+0x64>)
 801e526:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801e52a:	f013 0f01 	tst.w	r3, #1
 801e52e:	d004      	beq.n	801e53a <state_restore_conditions+0x1a>
 801e530:	4b15      	ldr	r3, [pc, #84]	@ (801e588 <state_restore_conditions+0x68>)
 801e532:	7f1b      	ldrb	r3, [r3, #28]
 801e534:	f013 0f04 	tst.w	r3, #4
 801e538:	d118      	bne.n	801e56c <state_restore_conditions+0x4c>
        park.flags.restoring = On; //
 801e53a:	4a13      	ldr	r2, [pc, #76]	@ (801e588 <state_restore_conditions+0x68>)
 801e53c:	7f13      	ldrb	r3, [r2, #28]
 801e53e:	f043 0308 	orr.w	r3, r3, #8
 801e542:	7713      	strb	r3, [r2, #28]
            state_spindle_restore(&condition->spindle[--spindle_num]);
 801e544:	1d20      	adds	r0, r4, #4
 801e546:	f7ff ffe1 	bl	801e50c <state_spindle_restore>
        if (gc_state.modal.coolant.value != hal.coolant.get_state().value) {
 801e54a:	4b10      	ldr	r3, [pc, #64]	@ (801e58c <state_restore_conditions+0x6c>)
 801e54c:	7e5d      	ldrb	r5, [r3, #25]
 801e54e:	4b10      	ldr	r3, [pc, #64]	@ (801e590 <state_restore_conditions+0x70>)
 801e550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e552:	4798      	blx	r3
 801e554:	b2c3      	uxtb	r3, r0
 801e556:	429d      	cmp	r5, r3
 801e558:	d109      	bne.n	801e56e <state_restore_conditions+0x4e>
        park.flags.restoring = Off;
 801e55a:	4a0b      	ldr	r2, [pc, #44]	@ (801e588 <state_restore_conditions+0x68>)
 801e55c:	7f13      	ldrb	r3, [r2, #28]
 801e55e:	f36f 03c3 	bfc	r3, #3, #1
 801e562:	7713      	strb	r3, [r2, #28]
        sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801e564:	4b0b      	ldr	r3, [pc, #44]	@ (801e594 <state_restore_conditions+0x74>)
 801e566:	2200      	movs	r2, #0
 801e568:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 801e56c:	bd38      	pop	{r3, r4, r5, pc}
            gc_coolant(condition->coolant);;
 801e56e:	7820      	ldrb	r0, [r4, #0]
 801e570:	f7ee fcd8 	bl	800cf24 <gc_coolant>
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801e574:	2001      	movs	r0, #1
 801e576:	4b03      	ldr	r3, [pc, #12]	@ (801e584 <state_restore_conditions+0x64>)
 801e578:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 801e57c:	f7f7 f832 	bl	80155e4 <delay_sec>
 801e580:	e7eb      	b.n	801e55a <state_restore_conditions+0x3a>
 801e582:	bf00      	nop
 801e584:	20001bd8 	.word	0x20001bd8
 801e588:	20001e10 	.word	0x20001e10
 801e58c:	20000ef8 	.word	0x20000ef8
 801e590:	200011c0 	.word	0x200011c0
 801e594:	200014a0 	.word	0x200014a0

0801e598 <state_restore>:
/*! /brief Waits until fast plunge motion is completed then restore spindle and coolant and execute slow plunge motion.
state_await_resumed() is set to handle the cycle complete event.
Note: A safety door event during restoration or motion will halt it and restart the retract sequence.
 */
static void state_restore (uint_fast16_t rt_exec)
{
 801e598:	b510      	push	{r4, lr}
    if (rt_exec & EXEC_SAFETY_DOOR) {
 801e59a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e59e:	d00d      	beq.n	801e5bc <state_restore+0x24>
        if(park.flags.restoring)
 801e5a0:	4b2b      	ldr	r3, [pc, #172]	@ (801e650 <state_restore+0xb8>)
 801e5a2:	7f1b      	ldrb	r3, [r3, #28]
 801e5a4:	f013 0f08 	tst.w	r3, #8
 801e5a8:	d005      	beq.n	801e5b6 <state_restore+0x1e>
            park.flags.restart = On;
 801e5aa:	4a29      	ldr	r2, [pc, #164]	@ (801e650 <state_restore+0xb8>)
 801e5ac:	7f13      	ldrb	r3, [r2, #28]
 801e5ae:	f043 0304 	orr.w	r3, r3, #4
 801e5b2:	7713      	strb	r3, [r2, #28]
        }

        if (!await_motion)
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
    }
}
 801e5b4:	bd10      	pop	{r4, pc}
            restart_retract();
 801e5b6:	f7ff ff79 	bl	801e4ac <restart_retract>
 801e5ba:	e7fb      	b.n	801e5b4 <state_restore+0x1c>
    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801e5bc:	f010 0f04 	tst.w	r0, #4
 801e5c0:	d0f8      	beq.n	801e5b4 <state_restore+0x1c>
        if (sys.step_control.execute_sys_motion) {
 801e5c2:	4b24      	ldr	r3, [pc, #144]	@ (801e654 <state_restore+0xbc>)
 801e5c4:	7e1b      	ldrb	r3, [r3, #24]
 801e5c6:	f013 0f04 	tst.w	r3, #4
 801e5ca:	d118      	bne.n	801e5fe <state_restore+0x66>
        park.flags.restart = Off;
 801e5cc:	4c20      	ldr	r4, [pc, #128]	@ (801e650 <state_restore+0xb8>)
 801e5ce:	7f23      	ldrb	r3, [r4, #28]
 801e5d0:	f36f 0382 	bfc	r3, #2, #1
 801e5d4:	7723      	strb	r3, [r4, #28]
        stateHandler = state_await_resumed;
 801e5d6:	4b20      	ldr	r3, [pc, #128]	@ (801e658 <state_restore+0xc0>)
 801e5d8:	4a20      	ldr	r2, [pc, #128]	@ (801e65c <state_restore+0xc4>)
 801e5da:	601a      	str	r2, [r3, #0]
        state_restore_conditions(&restore_condition);
 801e5dc:	4820      	ldr	r0, [pc, #128]	@ (801e660 <state_restore+0xc8>)
 801e5de:	f7ff ff9f 	bl	801e520 <state_restore_conditions>
        if(park.flags.restart) {
 801e5e2:	7f23      	ldrb	r3, [r4, #28]
 801e5e4:	f013 0f04 	tst.w	r3, #4
 801e5e8:	d111      	bne.n	801e60e <state_restore+0x76>
        if (park.flags.motion) {
 801e5ea:	4b19      	ldr	r3, [pc, #100]	@ (801e650 <state_restore+0xb8>)
 801e5ec:	7f1b      	ldrb	r3, [r3, #28]
 801e5ee:	f013 0f02 	tst.w	r3, #2
 801e5f2:	d10f      	bne.n	801e614 <state_restore+0x7c>
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801e5f4:	4b18      	ldr	r3, [pc, #96]	@ (801e658 <state_restore+0xc0>)
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	2004      	movs	r0, #4
 801e5fa:	4798      	blx	r3
 801e5fc:	e7da      	b.n	801e5b4 <state_restore+0x1c>
            sys.step_control.execute_sys_motion = Off;
 801e5fe:	4b15      	ldr	r3, [pc, #84]	@ (801e654 <state_restore+0xbc>)
 801e600:	7e1a      	ldrb	r2, [r3, #24]
 801e602:	f36f 0282 	bfc	r2, #2, #1
 801e606:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801e608:	f001 f8e6 	bl	801f7d8 <st_parking_restore_buffer>
 801e60c:	e7de      	b.n	801e5cc <state_restore+0x34>
            restart_retract();
 801e60e:	f7ff ff4d 	bl	801e4ac <restart_retract>
            return;
 801e612:	e7cf      	b.n	801e5b4 <state_restore+0x1c>
            sys.parking_state = Parking_Resuming;
 801e614:	4b0f      	ldr	r3, [pc, #60]	@ (801e654 <state_restore+0xbc>)
 801e616:	2204      	movs	r2, #4
 801e618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801e61c:	4b11      	ldr	r3, [pc, #68]	@ (801e664 <state_restore+0xcc>)
 801e61e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801e622:	480b      	ldr	r0, [pc, #44]	@ (801e650 <state_restore+0xb8>)
 801e624:	6203      	str	r3, [r0, #32]
            park.plan_data.condition.coolant = restore_condition.coolant;
 801e626:	4b0e      	ldr	r3, [pc, #56]	@ (801e660 <state_restore+0xc8>)
 801e628:	781a      	ldrb	r2, [r3, #0]
 801e62a:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state;
 801e62e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801e632:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e636:	7a1a      	ldrb	r2, [r3, #8]
 801e638:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801e63c:	685b      	ldr	r3, [r3, #4]
 801e63e:	6243      	str	r3, [r0, #36]	@ 0x24
            await_motion = mc_parking_motion(park.restore_target, &park.plan_data);
 801e640:	f100 0120 	add.w	r1, r0, #32
 801e644:	300c      	adds	r0, #12
 801e646:	f7f5 ff9f 	bl	8014588 <mc_parking_motion>
        if (!await_motion)
 801e64a:	2800      	cmp	r0, #0
 801e64c:	d1b2      	bne.n	801e5b4 <state_restore+0x1c>
 801e64e:	e7d1      	b.n	801e5f4 <state_restore+0x5c>
 801e650:	20001e10 	.word	0x20001e10
 801e654:	200014a0 	.word	0x200014a0
 801e658:	20000424 	.word	0x20000424
 801e65c:	0801ed6d 	.word	0x0801ed6d
 801e660:	20001e60 	.word	0x20001e60
 801e664:	20001bd8 	.word	0x20001bd8

0801e668 <initiate_hold>:
{
 801e668:	b538      	push	{r3, r4, r5, lr}
 801e66a:	4605      	mov	r5, r0
    if (settings.parking.flags.enabled) {
 801e66c:	4b4e      	ldr	r3, [pc, #312]	@ (801e7a8 <initiate_hold+0x140>)
 801e66e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801e672:	f013 0f01 	tst.w	r3, #1
 801e676:	d151      	bne.n	801e71c <initiate_hold+0xb4>
    plan_block_t *block = plan_get_current_block();
 801e678:	f7f7 fdb2 	bl	80161e0 <plan_get_current_block>
 801e67c:	4604      	mov	r4, r0
    restore_condition.spindle_num = 0;
 801e67e:	2000      	movs	r0, #0
 801e680:	4b4a      	ldr	r3, [pc, #296]	@ (801e7ac <initiate_hold+0x144>)
 801e682:	7058      	strb	r0, [r3, #1]
        if((spindle = spindle_get(--spindle_num))) {
 801e684:	f7ff fc50 	bl	801df28 <spindle_get>
 801e688:	4603      	mov	r3, r0
 801e68a:	2800      	cmp	r0, #0
 801e68c:	d069      	beq.n	801e762 <initiate_hold+0xfa>
            if(block && block->spindle.hal == spindle) {
 801e68e:	b114      	cbz	r4, 801e696 <initiate_hold+0x2e>
 801e690:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801e692:	4282      	cmp	r2, r0
 801e694:	d051      	beq.n	801e73a <initiate_hold+0xd2>
            } else if(gc_state.spindle.hal == spindle) {
 801e696:	4a46      	ldr	r2, [pc, #280]	@ (801e7b0 <initiate_hold+0x148>)
 801e698:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801e69a:	429a      	cmp	r2, r3
 801e69c:	d057      	beq.n	801e74e <initiate_hold+0xe6>
                restore_condition.spindle[spindle_num].hal = spindle;
 801e69e:	4a43      	ldr	r2, [pc, #268]	@ (801e7ac <initiate_hold+0x144>)
 801e6a0:	6113      	str	r3, [r2, #16]
                restore_condition.spindle[spindle_num].rpm = spindle->param->rpm;
 801e6a2:	6859      	ldr	r1, [r3, #4]
 801e6a4:	6809      	ldr	r1, [r1, #0]
 801e6a6:	6051      	str	r1, [r2, #4]
                restore_condition.spindle[spindle_num].state = spindle->param->state;
 801e6a8:	685b      	ldr	r3, [r3, #4]
 801e6aa:	7a1b      	ldrb	r3, [r3, #8]
 801e6ac:	7213      	strb	r3, [r2, #8]
    if (block)
 801e6ae:	2c00      	cmp	r4, #0
 801e6b0:	d05b      	beq.n	801e76a <initiate_hold+0x102>
        restore_condition.coolant.mask = block->condition.coolant.mask;
 801e6b2:	7da2      	ldrb	r2, [r4, #22]
 801e6b4:	4b3d      	ldr	r3, [pc, #244]	@ (801e7ac <initiate_hold+0x144>)
 801e6b6:	701a      	strb	r2, [r3, #0]
    if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser && settings.flags.disable_laser_during_hold)
 801e6b8:	4b3c      	ldr	r3, [pc, #240]	@ (801e7ac <initiate_hold+0x144>)
 801e6ba:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801e6be:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801e6c2:	691b      	ldr	r3, [r3, #16]
 801e6c4:	7a9b      	ldrb	r3, [r3, #10]
 801e6c6:	f013 0f08 	tst.w	r3, #8
 801e6ca:	d005      	beq.n	801e6d8 <initiate_hold+0x70>
 801e6cc:	4b36      	ldr	r3, [pc, #216]	@ (801e7a8 <initiate_hold+0x140>)
 801e6ce:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 801e6d2:	f013 0f10 	tst.w	r3, #16
 801e6d6:	d152      	bne.n	801e77e <initiate_hold+0x116>
    if (sys_state & (STATE_CYCLE|STATE_JOG)) {
 801e6d8:	4b36      	ldr	r3, [pc, #216]	@ (801e7b4 <initiate_hold+0x14c>)
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	f013 0f28 	tst.w	r3, #40	@ 0x28
 801e6e0:	d151      	bne.n	801e786 <initiate_hold+0x11e>
    if (new_state == STATE_HOLD)
 801e6e2:	2d10      	cmp	r5, #16
 801e6e4:	d05a      	beq.n	801e79c <initiate_hold+0x134>
        sys.parking_state = Parking_Retracting;
 801e6e6:	4b34      	ldr	r3, [pc, #208]	@ (801e7b8 <initiate_hold+0x150>)
 801e6e8:	2202      	movs	r2, #2
 801e6ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        park.flags.value = 0;
 801e6ee:	4b33      	ldr	r3, [pc, #204]	@ (801e7bc <initiate_hold+0x154>)
 801e6f0:	2200      	movs	r2, #0
 801e6f2:	771a      	strb	r2, [r3, #28]
    sys.suspend = !sys.flags.soft_limit;
 801e6f4:	4a30      	ldr	r2, [pc, #192]	@ (801e7b8 <initiate_hold+0x150>)
 801e6f6:	7d93      	ldrb	r3, [r2, #22]
 801e6f8:	089b      	lsrs	r3, r3, #2
 801e6fa:	f083 0301 	eor.w	r3, r3, #1
 801e6fe:	f003 0301 	and.w	r3, r3, #1
 801e702:	7093      	strb	r3, [r2, #2]
    pending_state = sys_state == STATE_JOG ? new_state : STATE_IDLE;
 801e704:	4b2b      	ldr	r3, [pc, #172]	@ (801e7b4 <initiate_hold+0x14c>)
 801e706:	6818      	ldr	r0, [r3, #0]
 801e708:	2820      	cmp	r0, #32
 801e70a:	d000      	beq.n	801e70e <initiate_hold+0xa6>
 801e70c:	2500      	movs	r5, #0
 801e70e:	4b2c      	ldr	r3, [pc, #176]	@ (801e7c0 <initiate_hold+0x158>)
 801e710:	601d      	str	r5, [r3, #0]
}
 801e712:	2808      	cmp	r0, #8
 801e714:	bf14      	ite	ne
 801e716:	2000      	movne	r0, #0
 801e718:	2001      	moveq	r0, #1
 801e71a:	bd38      	pop	{r3, r4, r5, pc}
        plan_data_init(&park.plan_data);
 801e71c:	4c29      	ldr	r4, [pc, #164]	@ (801e7c4 <initiate_hold+0x15c>)
 801e71e:	4620      	mov	r0, r4
 801e720:	f7f8 f85e 	bl	80167e0 <plan_data_init>
        park.plan_data.condition.system_motion = On;
 801e724:	7d22      	ldrb	r2, [r4, #20]
 801e726:	f042 0202 	orr.w	r2, r2, #2
 801e72a:	7522      	strb	r2, [r4, #20]
        park.plan_data.condition.no_feed_override = On;
 801e72c:	b2d2      	uxtb	r2, r2
 801e72e:	f042 0210 	orr.w	r2, r2, #16
 801e732:	7522      	strb	r2, [r4, #20]
        park.plan_data.line_number = PARKING_MOTION_LINE_NUMBER;
 801e734:	2200      	movs	r2, #0
 801e736:	61e2      	str	r2, [r4, #28]
 801e738:	e79e      	b.n	801e678 <initiate_hold+0x10>
                restore_condition.spindle_num = spindle_num;
 801e73a:	4b1c      	ldr	r3, [pc, #112]	@ (801e7ac <initiate_hold+0x144>)
 801e73c:	2100      	movs	r1, #0
 801e73e:	7059      	strb	r1, [r3, #1]
                restore_condition.spindle[spindle_num].hal = block->spindle.hal;
 801e740:	611a      	str	r2, [r3, #16]
                restore_condition.spindle[spindle_num].rpm = block->spindle.rpm;
 801e742:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801e744:	605a      	str	r2, [r3, #4]
                restore_condition.spindle[spindle_num].state = block->spindle.state;
 801e746:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 801e74a:	721a      	strb	r2, [r3, #8]
    if (block)
 801e74c:	e7b1      	b.n	801e6b2 <initiate_hold+0x4a>
                restore_condition.spindle_num = spindle_num;
 801e74e:	4b17      	ldr	r3, [pc, #92]	@ (801e7ac <initiate_hold+0x144>)
 801e750:	2100      	movs	r1, #0
 801e752:	7059      	strb	r1, [r3, #1]
                restore_condition.spindle[spindle_num].hal = gc_state.spindle.hal;
 801e754:	611a      	str	r2, [r3, #16]
                restore_condition.spindle[spindle_num].rpm = gc_state.spindle.rpm;
 801e756:	4a16      	ldr	r2, [pc, #88]	@ (801e7b0 <initiate_hold+0x148>)
 801e758:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 801e75a:	6059      	str	r1, [r3, #4]
                restore_condition.spindle[spindle_num].state = gc_state.modal.spindle.state;
 801e75c:	7e92      	ldrb	r2, [r2, #26]
 801e75e:	721a      	strb	r2, [r3, #8]
 801e760:	e7a5      	b.n	801e6ae <initiate_hold+0x46>
            restore_condition.spindle[spindle_num].hal = NULL;
 801e762:	4b12      	ldr	r3, [pc, #72]	@ (801e7ac <initiate_hold+0x144>)
 801e764:	2200      	movs	r2, #0
 801e766:	611a      	str	r2, [r3, #16]
 801e768:	e7a1      	b.n	801e6ae <initiate_hold+0x46>
        restore_condition.coolant.mask = gc_state.modal.coolant.mask | hal.coolant.get_state().mask;
 801e76a:	4b11      	ldr	r3, [pc, #68]	@ (801e7b0 <initiate_hold+0x148>)
 801e76c:	7e5c      	ldrb	r4, [r3, #25]
 801e76e:	4b16      	ldr	r3, [pc, #88]	@ (801e7c8 <initiate_hold+0x160>)
 801e770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e772:	4798      	blx	r3
 801e774:	b2c0      	uxtb	r0, r0
 801e776:	4304      	orrs	r4, r0
 801e778:	4b0c      	ldr	r3, [pc, #48]	@ (801e7ac <initiate_hold+0x144>)
 801e77a:	701c      	strb	r4, [r3, #0]
 801e77c:	e79c      	b.n	801e6b8 <initiate_hold+0x50>
        enqueue_spindle_override(CMD_OVERRIDE_SPINDLE_STOP);
 801e77e:	209e      	movs	r0, #158	@ 0x9e
 801e780:	f7f7 fb18 	bl	8015db4 <enqueue_spindle_override>
 801e784:	e7a8      	b.n	801e6d8 <initiate_hold+0x70>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801e786:	f000 ffd1 	bl	801f72c <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801e78a:	4a0b      	ldr	r2, [pc, #44]	@ (801e7b8 <initiate_hold+0x150>)
 801e78c:	7e13      	ldrb	r3, [r2, #24]
 801e78e:	f043 0302 	orr.w	r3, r3, #2
 801e792:	7613      	strb	r3, [r2, #24]
        stateHandler = state_await_hold;
 801e794:	4b0d      	ldr	r3, [pc, #52]	@ (801e7cc <initiate_hold+0x164>)
 801e796:	4a0e      	ldr	r2, [pc, #56]	@ (801e7d0 <initiate_hold+0x168>)
 801e798:	601a      	str	r2, [r3, #0]
 801e79a:	e7a2      	b.n	801e6e2 <initiate_hold+0x7a>
        sys.holding_state = Hold_Pending;
 801e79c:	4b06      	ldr	r3, [pc, #24]	@ (801e7b8 <initiate_hold+0x150>)
 801e79e:	2202      	movs	r2, #2
 801e7a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801e7a4:	e7a6      	b.n	801e6f4 <initiate_hold+0x8c>
 801e7a6:	bf00      	nop
 801e7a8:	20001bd8 	.word	0x20001bd8
 801e7ac:	20001e60 	.word	0x20001e60
 801e7b0:	20000ef8 	.word	0x20000ef8
 801e7b4:	20001e58 	.word	0x20001e58
 801e7b8:	200014a0 	.word	0x200014a0
 801e7bc:	20001e10 	.word	0x20001e10
 801e7c0:	20001e5c 	.word	0x20001e5c
 801e7c4:	20001e30 	.word	0x20001e30
 801e7c8:	200011c0 	.word	0x200011c0
 801e7cc:	20000424 	.word	0x20000424
 801e7d0:	0801ef05 	.word	0x0801ef05

0801e7d4 <enter_sleep>:
{
 801e7d4:	b508      	push	{r3, lr}
    st_go_idle();
 801e7d6:	f000 fd61 	bl	801f29c <st_go_idle>
    spindle_all_off();
 801e7da:	f7ff fdb1 	bl	801e340 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 801e7de:	4b06      	ldr	r3, [pc, #24]	@ (801e7f8 <enter_sleep+0x24>)
 801e7e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7e2:	f04f 0000 	mov.w	r0, #0
 801e7e6:	4798      	blx	r3
    grbl.report.feedback_message(Message_SleepMode);
 801e7e8:	4b04      	ldr	r3, [pc, #16]	@ (801e7fc <enter_sleep+0x28>)
 801e7ea:	68db      	ldr	r3, [r3, #12]
 801e7ec:	200b      	movs	r0, #11
 801e7ee:	4798      	blx	r3
    stateHandler = state_noop;
 801e7f0:	4b03      	ldr	r3, [pc, #12]	@ (801e800 <enter_sleep+0x2c>)
 801e7f2:	4a04      	ldr	r2, [pc, #16]	@ (801e804 <enter_sleep+0x30>)
 801e7f4:	601a      	str	r2, [r3, #0]
}
 801e7f6:	bd08      	pop	{r3, pc}
 801e7f8:	200011c0 	.word	0x200011c0
 801e7fc:	200013a8 	.word	0x200013a8
 801e800:	20000424 	.word	0x20000424
 801e804:	0801e389 	.word	0x0801e389

0801e808 <state_spindle_set_state>:
{
 801e808:	b508      	push	{r3, lr}
 801e80a:	4603      	mov	r3, r0
    if(spindle->hal)
 801e80c:	68c0      	ldr	r0, [r0, #12]
 801e80e:	b120      	cbz	r0, 801e81a <state_spindle_set_state+0x12>
        spindle_set_state(spindle->hal, spindle->state, spindle->rpm);
 801e810:	ed93 0a00 	vldr	s0, [r3]
 801e814:	7919      	ldrb	r1, [r3, #4]
 801e816:	f7ff fc81 	bl	801e11c <spindle_set_state>
}
 801e81a:	bd08      	pop	{r3, pc}

0801e81c <state_door_reopened>:
    return settings.parking.flags.enabled && park.flags.restart;
 801e81c:	4b08      	ldr	r3, [pc, #32]	@ (801e840 <state_door_reopened+0x24>)
 801e81e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801e822:	f013 0f01 	tst.w	r3, #1
 801e826:	d006      	beq.n	801e836 <state_door_reopened+0x1a>
 801e828:	4b06      	ldr	r3, [pc, #24]	@ (801e844 <state_door_reopened+0x28>)
 801e82a:	7f1b      	ldrb	r3, [r3, #28]
 801e82c:	f013 0f04 	tst.w	r3, #4
 801e830:	d103      	bne.n	801e83a <state_door_reopened+0x1e>
 801e832:	2000      	movs	r0, #0
 801e834:	4770      	bx	lr
 801e836:	2000      	movs	r0, #0
 801e838:	4770      	bx	lr
 801e83a:	2001      	movs	r0, #1
}
 801e83c:	4770      	bx	lr
 801e83e:	bf00      	nop
 801e840:	20001bd8 	.word	0x20001bd8
 801e844:	20001e10 	.word	0x20001e10

0801e848 <state_get>:
}
 801e848:	4b01      	ldr	r3, [pc, #4]	@ (801e850 <state_get+0x8>)
 801e84a:	6818      	ldr	r0, [r3, #0]
 801e84c:	4770      	bx	lr
 801e84e:	bf00      	nop
 801e850:	20001e58 	.word	0x20001e58

0801e854 <state_set>:
{
 801e854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(new_state != sys_state) {
 801e856:	4b8a      	ldr	r3, [pc, #552]	@ (801ea80 <state_set+0x22c>)
 801e858:	681d      	ldr	r5, [r3, #0]
 801e85a:	4285      	cmp	r5, r0
 801e85c:	f000 80fd 	beq.w	801ea5a <state_set+0x206>
 801e860:	4604      	mov	r4, r0
        switch(new_state) {    // Set up new state and handler
 801e862:	2820      	cmp	r0, #32
 801e864:	d825      	bhi.n	801e8b2 <state_set+0x5e>
 801e866:	2820      	cmp	r0, #32
 801e868:	f200 80e7 	bhi.w	801ea3a <state_set+0x1e6>
 801e86c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801e870:	00fe0053 	.word	0x00fe0053
 801e874:	00e500fe 	.word	0x00e500fe
 801e878:	00e500fe 	.word	0x00e500fe
 801e87c:	00e500e5 	.word	0x00e500e5
 801e880:	00e50065 	.word	0x00e50065
 801e884:	00e500e5 	.word	0x00e500e5
 801e888:	00e500e5 	.word	0x00e500e5
 801e88c:	00e500e5 	.word	0x00e500e5
 801e890:	00e500b9 	.word	0x00e500b9
 801e894:	00e500e5 	.word	0x00e500e5
 801e898:	00e500e5 	.word	0x00e500e5
 801e89c:	00e500e5 	.word	0x00e500e5
 801e8a0:	00e500e5 	.word	0x00e500e5
 801e8a4:	00e500e5 	.word	0x00e500e5
 801e8a8:	00e500e5 	.word	0x00e500e5
 801e8ac:	00e500e5 	.word	0x00e500e5
 801e8b0:	00ab      	.short	0x00ab
 801e8b2:	2880      	cmp	r0, #128	@ 0x80
 801e8b4:	d01a      	beq.n	801e8ec <state_set+0x98>
 801e8b6:	d90d      	bls.n	801e8d4 <state_set+0x80>
 801e8b8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801e8bc:	f000 80d6 	beq.w	801ea6c <state_set+0x218>
 801e8c0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801e8c4:	f040 80b9 	bne.w	801ea3a <state_set+0x1e6>
                sys_state = new_state;
 801e8c8:	4b6d      	ldr	r3, [pc, #436]	@ (801ea80 <state_set+0x22c>)
 801e8ca:	6018      	str	r0, [r3, #0]
                stateHandler = state_await_toolchanged;
 801e8cc:	4b6d      	ldr	r3, [pc, #436]	@ (801ea84 <state_set+0x230>)
 801e8ce:	4a6e      	ldr	r2, [pc, #440]	@ (801ea88 <state_set+0x234>)
 801e8d0:	601a      	str	r2, [r3, #0]
                break;
 801e8d2:	e0b2      	b.n	801ea3a <state_set+0x1e6>
        switch(new_state) {    // Set up new state and handler
 801e8d4:	2840      	cmp	r0, #64	@ 0x40
 801e8d6:	f040 80b0 	bne.w	801ea3a <state_set+0x1e6>
                if ((sys_state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE)))
 801e8da:	f240 1383 	movw	r3, #387	@ 0x183
 801e8de:	421d      	tst	r5, r3
 801e8e0:	f040 80bb 	bne.w	801ea5a <state_set+0x206>
                grbl.report.feedback_message(Message_SafetyDoorAjar);
 801e8e4:	4b69      	ldr	r3, [pc, #420]	@ (801ea8c <state_set+0x238>)
 801e8e6:	68db      	ldr	r3, [r3, #12]
 801e8e8:	2006      	movs	r0, #6
 801e8ea:	4798      	blx	r3
                sys.parking_state = Parking_Retracting;
 801e8ec:	4b68      	ldr	r3, [pc, #416]	@ (801ea90 <state_set+0x23c>)
 801e8ee:	2202      	movs	r2, #2
 801e8f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                if (!initiate_hold(new_state)) {
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	f7ff feb7 	bl	801e668 <initiate_hold>
 801e8fa:	2800      	cmp	r0, #0
 801e8fc:	f040 8097 	bne.w	801ea2e <state_set+0x1da>
                    if (pending_state != new_state) {
 801e900:	4b64      	ldr	r3, [pc, #400]	@ (801ea94 <state_set+0x240>)
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	42a3      	cmp	r3, r4
 801e906:	f000 8094 	beq.w	801ea32 <state_set+0x1de>
                        sys_state = new_state;
 801e90a:	4b5d      	ldr	r3, [pc, #372]	@ (801ea80 <state_set+0x22c>)
 801e90c:	601c      	str	r4, [r3, #0]
                        state_await_hold(EXEC_CYCLE_COMPLETE); // "Simulate" a cycle stop
 801e90e:	2004      	movs	r0, #4
 801e910:	f000 faf8 	bl	801ef04 <state_await_hold>
 801e914:	e08d      	b.n	801ea32 <state_set+0x1de>
                sys.suspend = false;        // Break suspend state.
 801e916:	4a5e      	ldr	r2, [pc, #376]	@ (801ea90 <state_set+0x23c>)
 801e918:	2300      	movs	r3, #0
 801e91a:	7093      	strb	r3, [r2, #2]
                sys.step_control.flags = 0; // Restore step control to normal operation.
 801e91c:	7613      	strb	r3, [r2, #24]
                sys.parking_state = Parking_DoorClosed;
 801e91e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                sys.holding_state = Hold_NotHolding;
 801e922:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
                sys_state = pending_state = new_state;
 801e926:	4a5b      	ldr	r2, [pc, #364]	@ (801ea94 <state_set+0x240>)
 801e928:	6010      	str	r0, [r2, #0]
 801e92a:	4a55      	ldr	r2, [pc, #340]	@ (801ea80 <state_set+0x22c>)
 801e92c:	6010      	str	r0, [r2, #0]
                park.flags.value = 0;
 801e92e:	4a5a      	ldr	r2, [pc, #360]	@ (801ea98 <state_set+0x244>)
 801e930:	7713      	strb	r3, [r2, #28]
                stateHandler = state_idle;
 801e932:	4b54      	ldr	r3, [pc, #336]	@ (801ea84 <state_set+0x230>)
 801e934:	4a59      	ldr	r2, [pc, #356]	@ (801ea9c <state_set+0x248>)
 801e936:	601a      	str	r2, [r3, #0]
                break;
 801e938:	e07f      	b.n	801ea3a <state_set+0x1e6>
                if (sys_state == STATE_IDLE) {
 801e93a:	2d00      	cmp	r5, #0
 801e93c:	d17d      	bne.n	801ea3a <state_set+0x1e6>
                    if ((block = plan_get_current_block())) {
 801e93e:	f7f7 fc4f 	bl	80161e0 <plan_get_current_block>
 801e942:	4606      	mov	r6, r0
 801e944:	2800      	cmp	r0, #0
 801e946:	d078      	beq.n	801ea3a <state_set+0x1e6>
                        sys_state = new_state;
 801e948:	4b4d      	ldr	r3, [pc, #308]	@ (801ea80 <state_set+0x22c>)
 801e94a:	601c      	str	r4, [r3, #0]
                        sys.steppers_deenergize = false;    // Cancel stepper deenergize if pending.
 801e94c:	4b50      	ldr	r3, [pc, #320]	@ (801ea90 <state_set+0x23c>)
 801e94e:	2200      	movs	r2, #0
 801e950:	719a      	strb	r2, [r3, #6]
                        st_prep_buffer();                   // Initialize step segment buffer before beginning cycle.
 801e952:	f000 ff87 	bl	801f864 <st_prep_buffer>
                        if (block->spindle.state.synchronized) {
 801e956:	f996 303c 	ldrsb.w	r3, [r6, #60]	@ 0x3c
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	da2d      	bge.n	801e9ba <state_set+0x166>
                            uint32_t ms = hal.get_elapsed_ticks();
 801e95e:	4b50      	ldr	r3, [pc, #320]	@ (801eaa0 <state_set+0x24c>)
 801e960:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e964:	4798      	blx	r3
 801e966:	4607      	mov	r7, r0
                            if (block->spindle.hal->reset_data)
 801e968:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801e96a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e96c:	b103      	cbz	r3, 801e970 <state_set+0x11c>
                                block->spindle.hal->reset_data();
 801e96e:	4798      	blx	r3
                            uint32_t index = block->spindle.hal->get_data(SpindleData_Counters)->index_count + 2;
 801e970:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801e972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e974:	2000      	movs	r0, #0
 801e976:	4798      	blx	r3
 801e978:	6944      	ldr	r4, [r0, #20]
 801e97a:	3402      	adds	r4, #2
                            while(index != block->spindle.hal->get_data(SpindleData_Counters)->index_count) {
 801e97c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 801e97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e980:	2000      	movs	r0, #0
 801e982:	4798      	blx	r3
 801e984:	6943      	ldr	r3, [r0, #20]
 801e986:	42a3      	cmp	r3, r4
 801e988:	d017      	beq.n	801e9ba <state_set+0x166>
                                if(hal.get_elapsed_ticks() - ms > 5000) {
 801e98a:	4b45      	ldr	r3, [pc, #276]	@ (801eaa0 <state_set+0x24c>)
 801e98c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e990:	4798      	blx	r3
 801e992:	1bc0      	subs	r0, r0, r7
 801e994:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e998:	4298      	cmp	r0, r3
 801e99a:	d80a      	bhi.n	801e9b2 <state_set+0x15e>
                                if(sys.rt_exec_state & (EXEC_RESET|EXEC_STOP)) {
 801e99c:	4b3c      	ldr	r3, [pc, #240]	@ (801ea90 <state_set+0x23c>)
 801e99e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e9a0:	f013 0f30 	tst.w	r3, #48	@ 0x30
 801e9a4:	d0ea      	beq.n	801e97c <state_set+0x128>
                                    system_set_exec_state_flag(EXEC_RESET);
 801e9a6:	4b3e      	ldr	r3, [pc, #248]	@ (801eaa0 <state_set+0x24c>)
 801e9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e9aa:	2120      	movs	r1, #32
 801e9ac:	483d      	ldr	r0, [pc, #244]	@ (801eaa4 <state_set+0x250>)
 801e9ae:	4798      	blx	r3
                                    return;
 801e9b0:	e053      	b.n	801ea5a <state_set+0x206>
                                    system_raise_alarm(Alarm_Spindle);
 801e9b2:	200e      	movs	r0, #14
 801e9b4:	f002 feb8 	bl	8021728 <system_raise_alarm>
                                    return;
 801e9b8:	e04f      	b.n	801ea5a <state_set+0x206>
                        st_wake_up();
 801e9ba:	f000 fc61 	bl	801f280 <st_wake_up>
                        stateHandler = state_cycle;
 801e9be:	4b31      	ldr	r3, [pc, #196]	@ (801ea84 <state_set+0x230>)
 801e9c0:	4a39      	ldr	r2, [pc, #228]	@ (801eaa8 <state_set+0x254>)
 801e9c2:	601a      	str	r2, [r3, #0]
 801e9c4:	e039      	b.n	801ea3a <state_set+0x1e6>
                if (sys_state == STATE_TOOL_CHANGE)
 801e9c6:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 801e9ca:	d005      	beq.n	801e9d8 <state_set+0x184>
                sys_state = new_state;
 801e9cc:	4b2c      	ldr	r3, [pc, #176]	@ (801ea80 <state_set+0x22c>)
 801e9ce:	601c      	str	r4, [r3, #0]
                stateHandler = state_cycle;
 801e9d0:	4b2c      	ldr	r3, [pc, #176]	@ (801ea84 <state_set+0x230>)
 801e9d2:	4a35      	ldr	r2, [pc, #212]	@ (801eaa8 <state_set+0x254>)
 801e9d4:	601a      	str	r2, [r3, #0]
                break;
 801e9d6:	e030      	b.n	801ea3a <state_set+0x1e6>
                    pending_state = STATE_TOOL_CHANGE;
 801e9d8:	4b2e      	ldr	r3, [pc, #184]	@ (801ea94 <state_set+0x240>)
 801e9da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e9de:	601a      	str	r2, [r3, #0]
 801e9e0:	e7f4      	b.n	801e9cc <state_set+0x178>
                if (sys.override.control.sync && sys.override.control.feed_hold_disable)
 801e9e2:	4b2b      	ldr	r3, [pc, #172]	@ (801ea90 <state_set+0x23c>)
 801e9e4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801e9e8:	f003 0282 	and.w	r2, r3, #130	@ 0x82
 801e9ec:	2a82      	cmp	r2, #130	@ 0x82
 801e9ee:	d018      	beq.n	801ea22 <state_set+0x1ce>
                if (!((sys_state & STATE_JOG) || sys.override.control.feed_hold_disable)) {
 801e9f0:	f015 0f20 	tst.w	r5, #32
 801e9f4:	d121      	bne.n	801ea3a <state_set+0x1e6>
 801e9f6:	f013 0f02 	tst.w	r3, #2
 801e9fa:	d11e      	bne.n	801ea3a <state_set+0x1e6>
                    if (!initiate_hold(new_state)) {
 801e9fc:	4620      	mov	r0, r4
 801e9fe:	f7ff fe33 	bl	801e668 <initiate_hold>
 801ea02:	b930      	cbnz	r0, 801ea12 <state_set+0x1be>
                        sys.holding_state = Hold_Complete;
 801ea04:	4b22      	ldr	r3, [pc, #136]	@ (801ea90 <state_set+0x23c>)
 801ea06:	2201      	movs	r2, #1
 801ea08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                        stateHandler = state_await_resume;
 801ea0c:	4b1d      	ldr	r3, [pc, #116]	@ (801ea84 <state_set+0x230>)
 801ea0e:	4a27      	ldr	r2, [pc, #156]	@ (801eaac <state_set+0x258>)
 801ea10:	601a      	str	r2, [r3, #0]
                    sys_state = new_state;
 801ea12:	4b1b      	ldr	r3, [pc, #108]	@ (801ea80 <state_set+0x22c>)
 801ea14:	601c      	str	r4, [r3, #0]
                    sys.flags.feed_hold_pending = Off;
 801ea16:	4b1e      	ldr	r3, [pc, #120]	@ (801ea90 <state_set+0x23c>)
 801ea18:	7d9a      	ldrb	r2, [r3, #22]
 801ea1a:	f36f 1245 	bfc	r2, #5, #1
 801ea1e:	759a      	strb	r2, [r3, #22]
 801ea20:	e00b      	b.n	801ea3a <state_set+0x1e6>
                    sys.flags.feed_hold_pending = On;
 801ea22:	491b      	ldr	r1, [pc, #108]	@ (801ea90 <state_set+0x23c>)
 801ea24:	7d8a      	ldrb	r2, [r1, #22]
 801ea26:	f042 0220 	orr.w	r2, r2, #32
 801ea2a:	758a      	strb	r2, [r1, #22]
 801ea2c:	e7e0      	b.n	801e9f0 <state_set+0x19c>
                    sys_state = new_state;
 801ea2e:	4b14      	ldr	r3, [pc, #80]	@ (801ea80 <state_set+0x22c>)
 801ea30:	601c      	str	r4, [r3, #0]
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801ea32:	4b13      	ldr	r3, [pc, #76]	@ (801ea80 <state_set+0x22c>)
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	2b80      	cmp	r3, #128	@ 0x80
 801ea38:	d010      	beq.n	801ea5c <state_set+0x208>
        if(!(sys_state & (STATE_ALARM|STATE_ESTOP)))
 801ea3a:	4b11      	ldr	r3, [pc, #68]	@ (801ea80 <state_set+0x22c>)
 801ea3c:	6818      	ldr	r0, [r3, #0]
 801ea3e:	f240 1301 	movw	r3, #257	@ 0x101
 801ea42:	4218      	tst	r0, r3
 801ea44:	d103      	bne.n	801ea4e <state_set+0x1fa>
            sys.alarm = Alarm_None;
 801ea46:	4b12      	ldr	r3, [pc, #72]	@ (801ea90 <state_set+0x23c>)
 801ea48:	2200      	movs	r2, #0
 801ea4a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
        if(sys_state != org_state && grbl.on_state_change)
 801ea4e:	4285      	cmp	r5, r0
 801ea50:	d003      	beq.n	801ea5a <state_set+0x206>
 801ea52:	4b0e      	ldr	r3, [pc, #56]	@ (801ea8c <state_set+0x238>)
 801ea54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea56:	b103      	cbz	r3, 801ea5a <state_set+0x206>
            grbl.on_state_change(sys_state);
 801ea58:	4798      	blx	r3
}
 801ea5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801ea5c:	4b09      	ldr	r3, [pc, #36]	@ (801ea84 <state_set+0x230>)
 801ea5e:	681a      	ldr	r2, [r3, #0]
 801ea60:	4b13      	ldr	r3, [pc, #76]	@ (801eab0 <state_set+0x25c>)
 801ea62:	429a      	cmp	r2, r3
 801ea64:	d0e9      	beq.n	801ea3a <state_set+0x1e6>
                    enter_sleep();
 801ea66:	f7ff feb5 	bl	801e7d4 <enter_sleep>
 801ea6a:	e7e6      	b.n	801ea3a <state_set+0x1e6>
                sys_state = new_state;
 801ea6c:	4b04      	ldr	r3, [pc, #16]	@ (801ea80 <state_set+0x22c>)
 801ea6e:	601c      	str	r4, [r3, #0]
                sys.suspend = false;
 801ea70:	4b07      	ldr	r3, [pc, #28]	@ (801ea90 <state_set+0x23c>)
 801ea72:	2200      	movs	r2, #0
 801ea74:	709a      	strb	r2, [r3, #2]
                stateHandler = state_noop;
 801ea76:	4b03      	ldr	r3, [pc, #12]	@ (801ea84 <state_set+0x230>)
 801ea78:	4a0e      	ldr	r2, [pc, #56]	@ (801eab4 <state_set+0x260>)
 801ea7a:	601a      	str	r2, [r3, #0]
                break;
 801ea7c:	e7dd      	b.n	801ea3a <state_set+0x1e6>
 801ea7e:	bf00      	nop
 801ea80:	20001e58 	.word	0x20001e58
 801ea84:	20000424 	.word	0x20000424
 801ea88:	0801edb5 	.word	0x0801edb5
 801ea8c:	200013a8 	.word	0x200013a8
 801ea90:	200014a0 	.word	0x200014a0
 801ea94:	20001e5c 	.word	0x20001e5c
 801ea98:	20001e10 	.word	0x20001e10
 801ea9c:	0801eab9 	.word	0x0801eab9
 801eaa0:	200011c0 	.word	0x200011c0
 801eaa4:	200014e8 	.word	0x200014e8
 801eaa8:	0801ee29 	.word	0x0801ee29
 801eaac:	0801eb31 	.word	0x0801eb31
 801eab0:	0801e3cd 	.word	0x0801e3cd
 801eab4:	0801e389 	.word	0x0801e389

0801eab8 <state_idle>:
{
 801eab8:	b510      	push	{r4, lr}
 801eaba:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_CYCLE_START))
 801eabc:	f010 0f02 	tst.w	r0, #2
 801eac0:	d112      	bne.n	801eae8 <state_idle+0x30>
    if (rt_exec & EXEC_FEED_HOLD)
 801eac2:	f014 0f08 	tst.w	r4, #8
 801eac6:	d113      	bne.n	801eaf0 <state_idle+0x38>
    if ((rt_exec & EXEC_TOOL_CHANGE)) {
 801eac8:	f414 7f00 	tst.w	r4, #512	@ 0x200
 801eacc:	d008      	beq.n	801eae0 <state_idle+0x28>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801eace:	4b0c      	ldr	r3, [pc, #48]	@ (801eb00 <state_idle+0x48>)
 801ead0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801ead4:	2001      	movs	r0, #1
 801ead6:	4798      	blx	r3
        state_set(STATE_TOOL_CHANGE);
 801ead8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801eadc:	f7ff feba 	bl	801e854 <state_set>
    if (rt_exec & EXEC_SLEEP)
 801eae0:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801eae4:	d108      	bne.n	801eaf8 <state_idle+0x40>
}
 801eae6:	bd10      	pop	{r4, pc}
        state_set(STATE_CYCLE);
 801eae8:	2008      	movs	r0, #8
 801eaea:	f7ff feb3 	bl	801e854 <state_set>
 801eaee:	e7e8      	b.n	801eac2 <state_idle+0xa>
        state_set(STATE_HOLD);
 801eaf0:	2010      	movs	r0, #16
 801eaf2:	f7ff feaf 	bl	801e854 <state_set>
 801eaf6:	e7e7      	b.n	801eac8 <state_idle+0x10>
        state_set(STATE_SLEEP);
 801eaf8:	2080      	movs	r0, #128	@ 0x80
 801eafa:	f7ff feab 	bl	801e854 <state_set>
}
 801eafe:	e7f2      	b.n	801eae6 <state_idle+0x2e>
 801eb00:	200011c0 	.word	0x200011c0

0801eb04 <state_update>:
{
 801eb04:	b510      	push	{r4, lr}
 801eb06:	4604      	mov	r4, r0
    if((rt_exec & EXEC_SAFETY_DOOR) && sys_state != STATE_SAFETY_DOOR)
 801eb08:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801eb0c:	d003      	beq.n	801eb16 <state_update+0x12>
 801eb0e:	4b06      	ldr	r3, [pc, #24]	@ (801eb28 <state_update+0x24>)
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	2b40      	cmp	r3, #64	@ 0x40
 801eb14:	d104      	bne.n	801eb20 <state_update+0x1c>
    stateHandler(rt_exec);
 801eb16:	4b05      	ldr	r3, [pc, #20]	@ (801eb2c <state_update+0x28>)
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	4620      	mov	r0, r4
 801eb1c:	4798      	blx	r3
}
 801eb1e:	bd10      	pop	{r4, pc}
        state_set(STATE_SAFETY_DOOR);
 801eb20:	2040      	movs	r0, #64	@ 0x40
 801eb22:	f7ff fe97 	bl	801e854 <state_set>
 801eb26:	e7f6      	b.n	801eb16 <state_update+0x12>
 801eb28:	20001e58 	.word	0x20001e58
 801eb2c:	20000424 	.word	0x20000424

0801eb30 <state_await_resume>:
{
 801eb30:	b530      	push	{r4, r5, lr}
 801eb32:	b085      	sub	sp, #20
 801eb34:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_CYCLE_COMPLETE) && settings.parking.flags.enabled) {
 801eb36:	f010 0f04 	tst.w	r0, #4
 801eb3a:	d016      	beq.n	801eb6a <state_await_resume+0x3a>
 801eb3c:	4b82      	ldr	r3, [pc, #520]	@ (801ed48 <state_await_resume+0x218>)
 801eb3e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801eb42:	f013 0f01 	tst.w	r3, #1
 801eb46:	d010      	beq.n	801eb6a <state_await_resume+0x3a>
        if (sys.step_control.execute_sys_motion) {
 801eb48:	4b80      	ldr	r3, [pc, #512]	@ (801ed4c <state_await_resume+0x21c>)
 801eb4a:	7e1b      	ldrb	r3, [r3, #24]
 801eb4c:	f013 0f04 	tst.w	r3, #4
 801eb50:	d11b      	bne.n	801eb8a <state_await_resume+0x5a>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801eb52:	4b7f      	ldr	r3, [pc, #508]	@ (801ed50 <state_await_resume+0x220>)
 801eb54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801eb56:	4798      	blx	r3
 801eb58:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801eb5c:	4b7b      	ldr	r3, [pc, #492]	@ (801ed4c <state_await_resume+0x21c>)
 801eb5e:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if(sys_state == STATE_SLEEP) {
 801eb62:	4b7c      	ldr	r3, [pc, #496]	@ (801ed54 <state_await_resume+0x224>)
 801eb64:	681b      	ldr	r3, [r3, #0]
 801eb66:	2b80      	cmp	r3, #128	@ 0x80
 801eb68:	d017      	beq.n	801eb9a <state_await_resume+0x6a>
    if (rt_exec & EXEC_SLEEP)
 801eb6a:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801eb6e:	d117      	bne.n	801eba0 <state_await_resume+0x70>
    if (rt_exec & EXEC_SAFETY_DOOR)
 801eb70:	f014 0f40 	tst.w	r4, #64	@ 0x40
 801eb74:	d018      	beq.n	801eba8 <state_await_resume+0x78>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801eb76:	4b76      	ldr	r3, [pc, #472]	@ (801ed50 <state_await_resume+0x220>)
 801eb78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801eb7a:	4798      	blx	r3
 801eb7c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801eb80:	4b72      	ldr	r3, [pc, #456]	@ (801ed4c <state_await_resume+0x21c>)
 801eb82:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
}
 801eb86:	b005      	add	sp, #20
 801eb88:	bd30      	pop	{r4, r5, pc}
            sys.step_control.execute_sys_motion = Off;
 801eb8a:	4b70      	ldr	r3, [pc, #448]	@ (801ed4c <state_await_resume+0x21c>)
 801eb8c:	7e1a      	ldrb	r2, [r3, #24]
 801eb8e:	f36f 0282 	bfc	r2, #2, #1
 801eb92:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801eb94:	f000 fe20 	bl	801f7d8 <st_parking_restore_buffer>
 801eb98:	e7db      	b.n	801eb52 <state_await_resume+0x22>
            enter_sleep();
 801eb9a:	f7ff fe1b 	bl	801e7d4 <enter_sleep>
            return;
 801eb9e:	e7f2      	b.n	801eb86 <state_await_resume+0x56>
        state_set(STATE_SLEEP);
 801eba0:	2080      	movs	r0, #128	@ 0x80
 801eba2:	f7ff fe57 	bl	801e854 <state_set>
 801eba6:	e7e3      	b.n	801eb70 <state_await_resume+0x40>
    else if (rt_exec & EXEC_CYCLE_START) {
 801eba8:	f014 0f02 	tst.w	r4, #2
 801ebac:	f000 80bb 	beq.w	801ed26 <state_await_resume+0x1f6>
        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801ebb0:	4b68      	ldr	r3, [pc, #416]	@ (801ed54 <state_await_resume+0x224>)
 801ebb2:	681b      	ldr	r3, [r3, #0]
 801ebb4:	2b10      	cmp	r3, #16
 801ebb6:	d01b      	beq.n	801ebf0 <state_await_resume+0xc0>
        switch (sys_state) {
 801ebb8:	2b80      	cmp	r3, #128	@ 0x80
 801ebba:	d053      	beq.n	801ec64 <state_await_resume+0x134>
 801ebbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ebc0:	d050      	beq.n	801ec64 <state_await_resume+0x134>
 801ebc2:	2b40      	cmp	r3, #64	@ 0x40
 801ebc4:	d01f      	beq.n	801ec06 <state_await_resume+0xd6>
                if (!settings.flags.restore_after_feed_hold) {
 801ebc6:	4b60      	ldr	r3, [pc, #384]	@ (801ed48 <state_await_resume+0x218>)
 801ebc8:	f993 30fe 	ldrsb.w	r3, [r3, #254]	@ 0xfe
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	db74      	blt.n	801ecba <state_await_resume+0x18a>
                    if (!restore_condition.spindle[restore_condition.spindle_num].hal->get_state(restore_condition.spindle[restore_condition.spindle_num].hal).on)
 801ebd0:	4b61      	ldr	r3, [pc, #388]	@ (801ed58 <state_await_resume+0x228>)
 801ebd2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ebd6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801ebda:	6918      	ldr	r0, [r3, #16]
 801ebdc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ebde:	4798      	blx	r3
 801ebe0:	f010 0f01 	tst.w	r0, #1
 801ebe4:	d066      	beq.n	801ecb4 <state_await_resume+0x184>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801ebe6:	4b59      	ldr	r3, [pc, #356]	@ (801ed4c <state_await_resume+0x21c>)
 801ebe8:	2200      	movs	r2, #0
 801ebea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801ebee:	e039      	b.n	801ec64 <state_await_resume+0x134>
        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801ebf0:	4a56      	ldr	r2, [pc, #344]	@ (801ed4c <state_await_resume+0x21c>)
 801ebf2:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 801ebf6:	2a00      	cmp	r2, #0
 801ebf8:	d1de      	bne.n	801ebb8 <state_await_resume+0x88>
            sys.override.spindle_stop.restore_cycle = On;
 801ebfa:	4954      	ldr	r1, [pc, #336]	@ (801ed4c <state_await_resume+0x21c>)
 801ebfc:	f042 0208 	orr.w	r2, r2, #8
 801ec00:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
 801ec04:	e7d8      	b.n	801ebb8 <state_await_resume+0x88>
                if (park.flags.restart || !hal.control.get_state().safety_door_ajar) {
 801ec06:	4b55      	ldr	r3, [pc, #340]	@ (801ed5c <state_await_resume+0x22c>)
 801ec08:	7f1b      	ldrb	r3, [r3, #28]
 801ec0a:	f013 0f04 	tst.w	r3, #4
 801ec0e:	d105      	bne.n	801ec1c <state_await_resume+0xec>
 801ec10:	4b4f      	ldr	r3, [pc, #316]	@ (801ed50 <state_await_resume+0x220>)
 801ec12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ec14:	4798      	blx	r3
 801ec16:	f010 0f08 	tst.w	r0, #8
 801ec1a:	d123      	bne.n	801ec64 <state_await_resume+0x134>
                    stateHandler = state_restore;
 801ec1c:	4b50      	ldr	r3, [pc, #320]	@ (801ed60 <state_await_resume+0x230>)
 801ec1e:	4a51      	ldr	r2, [pc, #324]	@ (801ed64 <state_await_resume+0x234>)
 801ec20:	601a      	str	r2, [r3, #0]
                    sys.parking_state = Parking_Resuming;
 801ec22:	4b4a      	ldr	r3, [pc, #296]	@ (801ed4c <state_await_resume+0x21c>)
 801ec24:	2204      	movs	r2, #4
 801ec26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    if (park.flags.motion) {
 801ec2a:	4b4c      	ldr	r3, [pc, #304]	@ (801ed5c <state_await_resume+0x22c>)
 801ec2c:	7f1b      	ldrb	r3, [r3, #28]
 801ec2e:	f013 0f02 	tst.w	r3, #2
 801ec32:	d013      	beq.n	801ec5c <state_await_resume+0x12c>
                        park.flags.restart = Off;
 801ec34:	4b49      	ldr	r3, [pc, #292]	@ (801ed5c <state_await_resume+0x22c>)
 801ec36:	7f1a      	ldrb	r2, [r3, #28]
 801ec38:	f36f 0282 	bfc	r2, #2, #1
 801ec3c:	771a      	strb	r2, [r3, #28]
                        if (park.restore_target[settings.parking.axis] <= settings.parking.target) {
 801ec3e:	4a42      	ldr	r2, [pc, #264]	@ (801ed48 <state_await_resume+0x218>)
 801ec40:	f892 4129 	ldrb.w	r4, [r2, #297]	@ 0x129
 801ec44:	1ca1      	adds	r1, r4, #2
 801ec46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801ec4a:	ed93 7a01 	vldr	s14, [r3, #4]
 801ec4e:	edd2 7a4b 	vldr	s15, [r2, #300]	@ 0x12c
 801ec52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ec56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec5a:	d912      	bls.n	801ec82 <state_await_resume+0x152>
                        stateHandler(EXEC_CYCLE_COMPLETE);
 801ec5c:	4b40      	ldr	r3, [pc, #256]	@ (801ed60 <state_await_resume+0x230>)
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	2004      	movs	r0, #4
 801ec62:	4798      	blx	r3
        if (!(sys_state & (STATE_SLEEP|STATE_SAFETY_DOOR))) {
 801ec64:	4b3b      	ldr	r3, [pc, #236]	@ (801ed54 <state_await_resume+0x224>)
 801ec66:	681b      	ldr	r3, [r3, #0]
 801ec68:	f013 0fc0 	tst.w	r3, #192	@ 0xc0
 801ec6c:	d18b      	bne.n	801eb86 <state_await_resume+0x56>
            step_control_t step_control = sys.step_control;
 801ec6e:	4c37      	ldr	r4, [pc, #220]	@ (801ed4c <state_await_resume+0x21c>)
 801ec70:	7e25      	ldrb	r5, [r4, #24]
            state_set(STATE_IDLE);
 801ec72:	2000      	movs	r0, #0
 801ec74:	f7ff fdee 	bl	801e854 <state_set>
            sys.step_control = step_control;
 801ec78:	7625      	strb	r5, [r4, #24]
            state_set(STATE_CYCLE);
 801ec7a:	2008      	movs	r0, #8
 801ec7c:	f7ff fdea 	bl	801e854 <state_set>
 801ec80:	e781      	b.n	801eb86 <state_await_resume+0x56>
                            memcpy(target, park.restore_target, sizeof(target));
 801ec82:	4b36      	ldr	r3, [pc, #216]	@ (801ed5c <state_await_resume+0x22c>)
 801ec84:	ad01      	add	r5, sp, #4
 801ec86:	f103 020c 	add.w	r2, r3, #12
 801ec8a:	ca07      	ldmia	r2, {r0, r1, r2}
 801ec8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                            target[settings.parking.axis] = park.retract_waypoint;
 801ec90:	699a      	ldr	r2, [r3, #24]
 801ec92:	a904      	add	r1, sp, #16
 801ec94:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ec98:	f844 2c0c 	str.w	r2, [r4, #-12]
                            park.plan_data.feed_rate = settings.parking.rate;
 801ec9c:	4a2a      	ldr	r2, [pc, #168]	@ (801ed48 <state_await_resume+0x218>)
 801ec9e:	f8d2 2130 	ldr.w	r2, [r2, #304]	@ 0x130
 801eca2:	4619      	mov	r1, r3
 801eca4:	f841 2f20 	str.w	r2, [r1, #32]!
                            await_motion = mc_parking_motion(target, &park.plan_data);
 801eca8:	4628      	mov	r0, r5
 801ecaa:	f7f5 fc6d 	bl	8014588 <mc_parking_motion>
                    if (!await_motion) // No motion, proceed to next step immediately.
 801ecae:	2800      	cmp	r0, #0
 801ecb0:	d1d8      	bne.n	801ec64 <state_await_resume+0x134>
 801ecb2:	e7d3      	b.n	801ec5c <state_await_resume+0x12c>
                        gc_spindle_off();
 801ecb4:	f7ee f928 	bl	800cf08 <gc_spindle_off>
 801ecb8:	e795      	b.n	801ebe6 <state_await_resume+0xb6>
                    if (restore_condition.spindle[restore_condition.spindle_num].state.on != restore_condition.spindle[restore_condition.spindle_num].hal->get_state(restore_condition.spindle[restore_condition.spindle_num].hal).on) {
 801ecba:	4b27      	ldr	r3, [pc, #156]	@ (801ed58 <state_await_resume+0x228>)
 801ecbc:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ecc0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801ecc4:	7a1c      	ldrb	r4, [r3, #8]
 801ecc6:	f004 0401 	and.w	r4, r4, #1
 801ecca:	6918      	ldr	r0, [r3, #16]
 801eccc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ecce:	4798      	blx	r3
 801ecd0:	f000 0001 	and.w	r0, r0, #1
 801ecd4:	4284      	cmp	r4, r0
 801ecd6:	d00b      	beq.n	801ecf0 <state_await_resume+0x1c0>
                        grbl.report.feedback_message(Message_SpindleRestore);
 801ecd8:	4b23      	ldr	r3, [pc, #140]	@ (801ed68 <state_await_resume+0x238>)
 801ecda:	68db      	ldr	r3, [r3, #12]
 801ecdc:	200a      	movs	r0, #10
 801ecde:	4798      	blx	r3
                        state_spindle_restore(&restore_condition.spindle[restore_condition.spindle_num]);
 801ece0:	481d      	ldr	r0, [pc, #116]	@ (801ed58 <state_await_resume+0x228>)
 801ece2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801ece6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801ecea:	3004      	adds	r0, #4
 801ecec:	f7ff fc0e 	bl	801e50c <state_spindle_restore>
                    if (restore_condition.coolant.value != hal.coolant.get_state().value) {
 801ecf0:	4b19      	ldr	r3, [pc, #100]	@ (801ed58 <state_await_resume+0x228>)
 801ecf2:	781c      	ldrb	r4, [r3, #0]
 801ecf4:	4b16      	ldr	r3, [pc, #88]	@ (801ed50 <state_await_resume+0x220>)
 801ecf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ecf8:	4798      	blx	r3
 801ecfa:	b2c0      	uxtb	r0, r0
 801ecfc:	4284      	cmp	r4, r0
 801ecfe:	d107      	bne.n	801ed10 <state_await_resume+0x1e0>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801ed00:	2000      	movs	r0, #0
 801ed02:	4b12      	ldr	r3, [pc, #72]	@ (801ed4c <state_await_resume+0x21c>)
 801ed04:	f883 0028 	strb.w	r0, [r3, #40]	@ 0x28
                    grbl.report.feedback_message(Message_None);
 801ed08:	4b17      	ldr	r3, [pc, #92]	@ (801ed68 <state_await_resume+0x238>)
 801ed0a:	68db      	ldr	r3, [r3, #12]
 801ed0c:	4798      	blx	r3
 801ed0e:	e7a9      	b.n	801ec64 <state_await_resume+0x134>
                        gc_coolant(restore_condition.coolant);
 801ed10:	4b11      	ldr	r3, [pc, #68]	@ (801ed58 <state_await_resume+0x228>)
 801ed12:	7818      	ldrb	r0, [r3, #0]
 801ed14:	f7ee f906 	bl	800cf24 <gc_coolant>
                        delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801ed18:	2001      	movs	r0, #1
 801ed1a:	4b0b      	ldr	r3, [pc, #44]	@ (801ed48 <state_await_resume+0x218>)
 801ed1c:	ed93 0a51 	vldr	s0, [r3, #324]	@ 0x144
 801ed20:	f7f6 fc60 	bl	80155e4 <delay_sec>
 801ed24:	e7ec      	b.n	801ed00 <state_await_resume+0x1d0>
    } else if ((rt_exec & EXEC_DOOR_CLOSED) && !hal.control.get_state().safety_door_ajar)
 801ed26:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 801ed2a:	f43f af2c 	beq.w	801eb86 <state_await_resume+0x56>
 801ed2e:	4b08      	ldr	r3, [pc, #32]	@ (801ed50 <state_await_resume+0x220>)
 801ed30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ed32:	4798      	blx	r3
 801ed34:	f010 0f08 	tst.w	r0, #8
 801ed38:	f47f af25 	bne.w	801eb86 <state_await_resume+0x56>
        sys.parking_state = Parking_DoorClosed;
 801ed3c:	4b03      	ldr	r3, [pc, #12]	@ (801ed4c <state_await_resume+0x21c>)
 801ed3e:	2200      	movs	r2, #0
 801ed40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801ed44:	e71f      	b.n	801eb86 <state_await_resume+0x56>
 801ed46:	bf00      	nop
 801ed48:	20001bd8 	.word	0x20001bd8
 801ed4c:	200014a0 	.word	0x200014a0
 801ed50:	200011c0 	.word	0x200011c0
 801ed54:	20001e58 	.word	0x20001e58
 801ed58:	20001e60 	.word	0x20001e60
 801ed5c:	20001e10 	.word	0x20001e10
 801ed60:	20000424 	.word	0x20000424
 801ed64:	0801e599 	.word	0x0801e599
 801ed68:	200013a8 	.word	0x200013a8

0801ed6c <state_await_resumed>:

/*! /brief Waits until slow plunge motion is complete then restart the cycle.
Note: A safety door event during the motion will halt it and restart the retract sequence.
 */
static void state_await_resumed (uint_fast16_t rt_exec)
{
 801ed6c:	b508      	push	{r3, lr}
    if (rt_exec & EXEC_SAFETY_DOOR)
 801ed6e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801ed72:	d113      	bne.n	801ed9c <state_await_resumed+0x30>
        restart_retract();

    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ed74:	f010 0f04 	tst.w	r0, #4
 801ed78:	d00f      	beq.n	801ed9a <state_await_resumed+0x2e>
        sys.parking_state = Parking_DoorClosed;
 801ed7a:	4b0c      	ldr	r3, [pc, #48]	@ (801edac <state_await_resumed+0x40>)
 801ed7c:	2200      	movs	r2, #0
 801ed7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        park.flags.value = 0;
 801ed82:	490b      	ldr	r1, [pc, #44]	@ (801edb0 <state_await_resumed+0x44>)
 801ed84:	770a      	strb	r2, [r1, #28]
        if (sys.step_control.execute_sys_motion) {
 801ed86:	7e1b      	ldrb	r3, [r3, #24]
 801ed88:	f013 0f04 	tst.w	r3, #4
 801ed8c:	d109      	bne.n	801eda2 <state_await_resumed+0x36>
            sys.step_control.flags = 0;
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }
        state_set(STATE_IDLE);
 801ed8e:	2000      	movs	r0, #0
 801ed90:	f7ff fd60 	bl	801e854 <state_set>
        state_set(STATE_CYCLE);
 801ed94:	2008      	movs	r0, #8
 801ed96:	f7ff fd5d 	bl	801e854 <state_set>
    }
}
 801ed9a:	bd08      	pop	{r3, pc}
        restart_retract();
 801ed9c:	f7ff fb86 	bl	801e4ac <restart_retract>
 801eda0:	e7fb      	b.n	801ed9a <state_await_resumed+0x2e>
            sys.step_control.flags = 0;
 801eda2:	4b02      	ldr	r3, [pc, #8]	@ (801edac <state_await_resumed+0x40>)
 801eda4:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801eda6:	f000 fd17 	bl	801f7d8 <st_parking_restore_buffer>
 801edaa:	e7f0      	b.n	801ed8e <state_await_resumed+0x22>
 801edac:	200014a0 	.word	0x200014a0
 801edb0:	20001e10 	.word	0x20001e10

0801edb4 <state_await_toolchanged>:
    if (rt_exec & EXEC_CYCLE_START) {
 801edb4:	f010 0f02 	tst.w	r0, #2
 801edb8:	d02b      	beq.n	801ee12 <state_await_toolchanged+0x5e>
{
 801edba:	b508      	push	{r3, lr}
        if (!gc_state.tool_change) {
 801edbc:	4b15      	ldr	r3, [pc, #84]	@ (801ee14 <state_await_toolchanged+0x60>)
 801edbe:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801edc2:	b983      	cbnz	r3, 801ede6 <state_await_toolchanged+0x32>
            if (hal.stream.suspend_read)
 801edc4:	4b14      	ldr	r3, [pc, #80]	@ (801ee18 <state_await_toolchanged+0x64>)
 801edc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801edca:	b10b      	cbz	r3, 801edd0 <state_await_toolchanged+0x1c>
                hal.stream.suspend_read(false); // Tool change complete, restore "normal" stream input.
 801edcc:	2000      	movs	r0, #0
 801edce:	4798      	blx	r3
            if(grbl.on_tool_changed)
 801edd0:	4b12      	ldr	r3, [pc, #72]	@ (801ee1c <state_await_toolchanged+0x68>)
 801edd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801edd6:	b11b      	cbz	r3, 801ede0 <state_await_toolchanged+0x2c>
                grbl.on_tool_changed(gc_state.tool);
 801edd8:	4a0e      	ldr	r2, [pc, #56]	@ (801ee14 <state_await_toolchanged+0x60>)
 801edda:	f8d2 00d0 	ldr.w	r0, [r2, #208]	@ 0xd0
 801edde:	4798      	blx	r3
            system_add_rt_report(Report_Tool);
 801ede0:	2080      	movs	r0, #128	@ 0x80
 801ede2:	f002 fcef 	bl	80217c4 <system_add_rt_report>
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801ede6:	4b0b      	ldr	r3, [pc, #44]	@ (801ee14 <state_await_toolchanged+0x60>)
 801ede8:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801edec:	b17b      	cbz	r3, 801ee0e <state_await_toolchanged+0x5a>
 801edee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801edf2:	4b0b      	ldr	r3, [pc, #44]	@ (801ee20 <state_await_toolchanged+0x6c>)
 801edf4:	601a      	str	r2, [r3, #0]
        state_set(STATE_IDLE);
 801edf6:	2000      	movs	r0, #0
 801edf8:	f7ff fd2c 	bl	801e854 <state_set>
        state_set(STATE_CYCLE);
 801edfc:	2008      	movs	r0, #8
 801edfe:	f7ff fd29 	bl	801e854 <state_set>
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801ee02:	4b05      	ldr	r3, [pc, #20]	@ (801ee18 <state_await_toolchanged+0x64>)
 801ee04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ee06:	2101      	movs	r1, #1
 801ee08:	4806      	ldr	r0, [pc, #24]	@ (801ee24 <state_await_toolchanged+0x70>)
 801ee0a:	4798      	blx	r3
}
 801ee0c:	bd08      	pop	{r3, pc}
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801ee0e:	2200      	movs	r2, #0
 801ee10:	e7ef      	b.n	801edf2 <state_await_toolchanged+0x3e>
 801ee12:	4770      	bx	lr
 801ee14:	20000ef8 	.word	0x20000ef8
 801ee18:	200011c0 	.word	0x200011c0
 801ee1c:	200013a8 	.word	0x200013a8
 801ee20:	20001e5c 	.word	0x20001e5c
 801ee24:	200014e8 	.word	0x200014e8

0801ee28 <state_cycle>:
    if (rt_exec == EXEC_CYCLE_START)
 801ee28:	2802      	cmp	r0, #2
 801ee2a:	d02e      	beq.n	801ee8a <state_cycle+0x62>
{
 801ee2c:	b510      	push	{r4, lr}
 801ee2e:	4604      	mov	r4, r0
    if ((rt_exec & EXEC_TOOL_CHANGE))
 801ee30:	f410 7f00 	tst.w	r0, #512	@ 0x200
 801ee34:	d004      	beq.n	801ee40 <state_cycle+0x18>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801ee36:	4b15      	ldr	r3, [pc, #84]	@ (801ee8c <state_cycle+0x64>)
 801ee38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801ee3c:	2001      	movs	r0, #1
 801ee3e:	4798      	blx	r3
    if (rt_exec & EXEC_CYCLE_COMPLETE)
 801ee40:	f014 0f04 	tst.w	r4, #4
 801ee44:	d007      	beq.n	801ee56 <state_cycle+0x2e>
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801ee46:	4b12      	ldr	r3, [pc, #72]	@ (801ee90 <state_cycle+0x68>)
 801ee48:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801ee4c:	b153      	cbz	r3, 801ee64 <state_cycle+0x3c>
 801ee4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801ee52:	f7ff fcff 	bl	801e854 <state_set>
    if (rt_exec & EXEC_MOTION_CANCEL) {
 801ee56:	f014 0f80 	tst.w	r4, #128	@ 0x80
 801ee5a:	d105      	bne.n	801ee68 <state_cycle+0x40>
    if ((rt_exec & EXEC_FEED_HOLD))
 801ee5c:	f014 0f08 	tst.w	r4, #8
 801ee60:	d10f      	bne.n	801ee82 <state_cycle+0x5a>
}
 801ee62:	bd10      	pop	{r4, pc}
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801ee64:	2000      	movs	r0, #0
 801ee66:	e7f4      	b.n	801ee52 <state_cycle+0x2a>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801ee68:	f000 fc60 	bl	801f72c <st_update_plan_block_parameters>
        sys.suspend = true;
 801ee6c:	4b09      	ldr	r3, [pc, #36]	@ (801ee94 <state_cycle+0x6c>)
 801ee6e:	2201      	movs	r2, #1
 801ee70:	709a      	strb	r2, [r3, #2]
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801ee72:	7e1a      	ldrb	r2, [r3, #24]
 801ee74:	f042 0202 	orr.w	r2, r2, #2
 801ee78:	761a      	strb	r2, [r3, #24]
        stateHandler = state_await_motion_cancel;
 801ee7a:	4b07      	ldr	r3, [pc, #28]	@ (801ee98 <state_cycle+0x70>)
 801ee7c:	4a07      	ldr	r2, [pc, #28]	@ (801ee9c <state_cycle+0x74>)
 801ee7e:	601a      	str	r2, [r3, #0]
 801ee80:	e7ec      	b.n	801ee5c <state_cycle+0x34>
        state_set(STATE_HOLD);
 801ee82:	2010      	movs	r0, #16
 801ee84:	f7ff fce6 	bl	801e854 <state_set>
 801ee88:	e7eb      	b.n	801ee62 <state_cycle+0x3a>
 801ee8a:	4770      	bx	lr
 801ee8c:	200011c0 	.word	0x200011c0
 801ee90:	20000ef8 	.word	0x20000ef8
 801ee94:	200014a0 	.word	0x200014a0
 801ee98:	20000424 	.word	0x20000424
 801ee9c:	0801eea1 	.word	0x0801eea1

0801eea0 <state_await_motion_cancel>:
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801eea0:	f010 0f04 	tst.w	r0, #4
 801eea4:	d022      	beq.n	801eeec <state_await_motion_cancel+0x4c>
{
 801eea6:	b538      	push	{r3, r4, r5, lr}
        if (sys_state == STATE_JOG) {
 801eea8:	4b11      	ldr	r3, [pc, #68]	@ (801eef0 <state_await_motion_cancel+0x50>)
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	2b20      	cmp	r3, #32
 801eeae:	d008      	beq.n	801eec2 <state_await_motion_cancel+0x22>
        state_set(pending_state);
 801eeb0:	4b10      	ldr	r3, [pc, #64]	@ (801eef4 <state_await_motion_cancel+0x54>)
 801eeb2:	6818      	ldr	r0, [r3, #0]
 801eeb4:	f7ff fcce 	bl	801e854 <state_set>
        if (gc_state.tool_change)
 801eeb8:	4b0f      	ldr	r3, [pc, #60]	@ (801eef8 <state_await_motion_cancel+0x58>)
 801eeba:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 801eebe:	b983      	cbnz	r3, 801eee2 <state_await_motion_cancel+0x42>
}
 801eec0:	bd38      	pop	{r3, r4, r5, pc}
            sys.step_control.flags = 0;
 801eec2:	4c0e      	ldr	r4, [pc, #56]	@ (801eefc <state_await_motion_cancel+0x5c>)
 801eec4:	2500      	movs	r5, #0
 801eec6:	7625      	strb	r5, [r4, #24]
            plan_reset();
 801eec8:	f7f7 f8e6 	bl	8016098 <plan_reset>
            st_reset();
 801eecc:	f000 fba0 	bl	801f610 <st_reset>
            sync_position();
 801eed0:	f7f7 fc10 	bl	80166f4 <plan_sync_position>
 801eed4:	f104 0188 	add.w	r1, r4, #136	@ 0x88
 801eed8:	4809      	ldr	r0, [pc, #36]	@ (801ef00 <state_await_motion_cancel+0x60>)
 801eeda:	f002 fbcf 	bl	802167c <system_convert_array_steps_to_mpos>
            sys.suspend = false;
 801eede:	70a5      	strb	r5, [r4, #2]
 801eee0:	e7e6      	b.n	801eeb0 <state_await_motion_cancel+0x10>
            state_set(STATE_TOOL_CHANGE);
 801eee2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801eee6:	f7ff fcb5 	bl	801e854 <state_set>
}
 801eeea:	e7e9      	b.n	801eec0 <state_await_motion_cancel+0x20>
 801eeec:	4770      	bx	lr
 801eeee:	bf00      	nop
 801eef0:	20001e58 	.word	0x20001e58
 801eef4:	20001e5c 	.word	0x20001e5c
 801eef8:	20000ef8 	.word	0x20000ef8
 801eefc:	200014a0 	.word	0x200014a0
 801ef00:	20000f60 	.word	0x20000f60

0801ef04 <state_await_hold>:
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801ef04:	f010 0f04 	tst.w	r0, #4
 801ef08:	d100      	bne.n	801ef0c <state_await_hold+0x8>
 801ef0a:	4770      	bx	lr
{
 801ef0c:	b510      	push	{r4, lr}
        plan_cycle_reinitialize();
 801ef0e:	f7f7 fc19 	bl	8016744 <plan_cycle_reinitialize>
        sys.step_control.flags = 0;
 801ef12:	4b84      	ldr	r3, [pc, #528]	@ (801f124 <state_await_hold+0x220>)
 801ef14:	2200      	movs	r2, #0
 801ef16:	761a      	strb	r2, [r3, #24]
        if (sys.alarm_pending) {
 801ef18:	7d19      	ldrb	r1, [r3, #20]
 801ef1a:	b139      	cbz	r1, 801ef2c <state_await_hold+0x28>
            system_set_exec_alarm(sys.alarm_pending);
 801ef1c:	4b82      	ldr	r3, [pc, #520]	@ (801f128 <state_await_hold+0x224>)
 801ef1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ef20:	4c82      	ldr	r4, [pc, #520]	@ (801f12c <state_await_hold+0x228>)
 801ef22:	4620      	mov	r0, r4
 801ef24:	4798      	blx	r3
            sys.alarm_pending = Alarm_None;
 801ef26:	2300      	movs	r3, #0
 801ef28:	f804 3c38 	strb.w	r3, [r4, #-56]
        switch (sys_state) {
 801ef2c:	4b80      	ldr	r3, [pc, #512]	@ (801f130 <state_await_hold+0x22c>)
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	2b80      	cmp	r3, #128	@ 0x80
 801ef32:	d01a      	beq.n	801ef6a <state_await_hold+0x66>
 801ef34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ef38:	d00f      	beq.n	801ef5a <state_await_hold+0x56>
 801ef3a:	2b40      	cmp	r3, #64	@ 0x40
 801ef3c:	d015      	beq.n	801ef6a <state_await_hold+0x66>
            if(sys.flags.soft_limit)
 801ef3e:	4b79      	ldr	r3, [pc, #484]	@ (801f124 <state_await_hold+0x220>)
 801ef40:	7d9b      	ldrb	r3, [r3, #22]
 801ef42:	f013 0f04 	tst.w	r3, #4
 801ef46:	f040 80e8 	bne.w	801f11a <state_await_hold+0x216>
                sys.holding_state = Hold_Complete;
 801ef4a:	4b76      	ldr	r3, [pc, #472]	@ (801f124 <state_await_hold+0x220>)
 801ef4c:	2201      	movs	r2, #1
 801ef4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                stateHandler = state_await_resume;
 801ef52:	4b78      	ldr	r3, [pc, #480]	@ (801f134 <state_await_hold+0x230>)
 801ef54:	4a78      	ldr	r2, [pc, #480]	@ (801f138 <state_await_hold+0x234>)
 801ef56:	601a      	str	r2, [r3, #0]
}
 801ef58:	bd10      	pop	{r4, pc}
                spindle_all_off(); // De-energize
 801ef5a:	f7ff f9f1 	bl	801e340 <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801ef5e:	4b72      	ldr	r3, [pc, #456]	@ (801f128 <state_await_hold+0x224>)
 801ef60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef62:	f04f 0000 	mov.w	r0, #0
 801ef66:	4798      	blx	r3
        if (!handler_changed) {
 801ef68:	e7e9      	b.n	801ef3e <state_await_hold+0x3a>
                sys.override.spindle_stop.value = 0;
 801ef6a:	4b6e      	ldr	r3, [pc, #440]	@ (801f124 <state_await_hold+0x220>)
 801ef6c:	2200      	movs	r2, #0
 801ef6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                if (settings.parking.flags.enabled && !sys.override.control.parking_disable && settings.mode != Mode_Laser) {
 801ef72:	4b72      	ldr	r3, [pc, #456]	@ (801f13c <state_await_hold+0x238>)
 801ef74:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801ef78:	f013 0f01 	tst.w	r3, #1
 801ef7c:	f000 80b3 	beq.w	801f0e6 <state_await_hold+0x1e2>
 801ef80:	4b68      	ldr	r3, [pc, #416]	@ (801f124 <state_await_hold+0x220>)
 801ef82:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801ef86:	f013 0f08 	tst.w	r3, #8
 801ef8a:	f040 80ac 	bne.w	801f0e6 <state_await_hold+0x1e2>
 801ef8e:	4b6b      	ldr	r3, [pc, #428]	@ (801f13c <state_await_hold+0x238>)
 801ef90:	7e1b      	ldrb	r3, [r3, #24]
 801ef92:	2b01      	cmp	r3, #1
 801ef94:	f000 80a7 	beq.w	801f0e6 <state_await_hold+0x1e2>
                    if (!park.flags.active) {
 801ef98:	4b69      	ldr	r3, [pc, #420]	@ (801f140 <state_await_hold+0x23c>)
 801ef9a:	7f1b      	ldrb	r3, [r3, #28]
 801ef9c:	f013 0f01 	tst.w	r3, #1
 801efa0:	d05d      	beq.n	801f05e <state_await_hold+0x15a>
                    if (bit_istrue(sys.homed.mask, bit(settings.parking.axis)) && (park.restore_target[settings.parking.axis] < settings.parking.target)) {
 801efa2:	4b60      	ldr	r3, [pc, #384]	@ (801f124 <state_await_hold+0x220>)
 801efa4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801efa8:	4a64      	ldr	r2, [pc, #400]	@ (801f13c <state_await_hold+0x238>)
 801efaa:	f892 4129 	ldrb.w	r4, [r2, #297]	@ 0x129
 801efae:	40e3      	lsrs	r3, r4
 801efb0:	f013 0f01 	tst.w	r3, #1
 801efb4:	d07d      	beq.n	801f0b2 <state_await_hold+0x1ae>
 801efb6:	1ca2      	adds	r2, r4, #2
 801efb8:	4b61      	ldr	r3, [pc, #388]	@ (801f140 <state_await_hold+0x23c>)
 801efba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801efbe:	ed93 7a01 	vldr	s14, [r3, #4]
 801efc2:	4b5e      	ldr	r3, [pc, #376]	@ (801f13c <state_await_hold+0x238>)
 801efc4:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 801efc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801efcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efd0:	d56f      	bpl.n	801f0b2 <state_await_hold+0x1ae>
                        stateHandler = state_await_waypoint_retract;
 801efd2:	4b58      	ldr	r3, [pc, #352]	@ (801f134 <state_await_hold+0x230>)
 801efd4:	4a5b      	ldr	r2, [pc, #364]	@ (801f144 <state_await_hold+0x240>)
 801efd6:	601a      	str	r2, [r3, #0]
                        if(park.flags.restart)
 801efd8:	4b59      	ldr	r3, [pc, #356]	@ (801f140 <state_await_hold+0x23c>)
 801efda:	7f1b      	ldrb	r3, [r3, #28]
 801efdc:	f013 0f04 	tst.w	r3, #4
 801efe0:	d147      	bne.n	801f072 <state_await_hold+0x16e>
                            memcpy(park.target, park.restore_target, sizeof(park.target));
 801efe2:	4b57      	ldr	r3, [pc, #348]	@ (801f140 <state_await_hold+0x23c>)
 801efe4:	f103 020c 	add.w	r2, r3, #12
 801efe8:	ca07      	ldmia	r2, {r0, r1, r2}
 801efea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                            park.retract_waypoint = settings.parking.pullout_increment + park.target[settings.parking.axis];
 801efee:	4a53      	ldr	r2, [pc, #332]	@ (801f13c <state_await_hold+0x238>)
 801eff0:	ed92 7a4e 	vldr	s14, [r2, #312]	@ 0x138
 801eff4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801eff8:	edd4 6a00 	vldr	s13, [r4]
 801effc:	ee37 7a26 	vadd.f32	s14, s14, s13
 801f000:	ed83 7a06 	vstr	s14, [r3, #24]
                            park.retract_waypoint = min(park.retract_waypoint, settings.parking.target);
 801f004:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f00c:	dd01      	ble.n	801f012 <state_await_hold+0x10e>
 801f00e:	eef0 7a47 	vmov.f32	s15, s14
 801f012:	4b4b      	ldr	r3, [pc, #300]	@ (801f140 <state_await_hold+0x23c>)
 801f014:	edc3 7a06 	vstr	s15, [r3, #24]
                        if ((await_motion = park.target[settings.parking.axis] < park.retract_waypoint)) {
 801f018:	4b48      	ldr	r3, [pc, #288]	@ (801f13c <state_await_hold+0x238>)
 801f01a:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 801f01e:	4b48      	ldr	r3, [pc, #288]	@ (801f140 <state_await_hold+0x23c>)
 801f020:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801f024:	ed91 7a00 	vldr	s14, [r1]
 801f028:	edd3 7a06 	vldr	s15, [r3, #24]
 801f02c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f034:	bf4c      	ite	mi
 801f036:	2001      	movmi	r0, #1
 801f038:	2000      	movpl	r0, #0
 801f03a:	d41f      	bmi.n	801f07c <state_await_hold+0x178>
                        if(!park.flags.restart)
 801f03c:	4b40      	ldr	r3, [pc, #256]	@ (801f140 <state_await_hold+0x23c>)
 801f03e:	7f1b      	ldrb	r3, [r3, #28]
 801f040:	f013 0f04 	tst.w	r3, #4
 801f044:	d104      	bne.n	801f050 <state_await_hold+0x14c>
                            park.flags.motion = await_motion;
 801f046:	4a3e      	ldr	r2, [pc, #248]	@ (801f140 <state_await_hold+0x23c>)
 801f048:	7f13      	ldrb	r3, [r2, #28]
 801f04a:	f360 0341 	bfi	r3, r0, #1, #1
 801f04e:	7713      	strb	r3, [r2, #28]
                        if (!await_motion)
 801f050:	2800      	cmp	r0, #0
 801f052:	d181      	bne.n	801ef58 <state_await_hold+0x54>
                            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801f054:	4b37      	ldr	r3, [pc, #220]	@ (801f134 <state_await_hold+0x230>)
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	2004      	movs	r0, #4
 801f05a:	4798      	blx	r3
        if (!handler_changed) {
 801f05c:	e77c      	b.n	801ef58 <state_await_hold+0x54>
                        park.flags.active = On;
 801f05e:	4838      	ldr	r0, [pc, #224]	@ (801f140 <state_await_hold+0x23c>)
 801f060:	7f03      	ldrb	r3, [r0, #28]
 801f062:	f043 0301 	orr.w	r3, r3, #1
 801f066:	7703      	strb	r3, [r0, #28]
                        system_convert_array_steps_to_mpos(park.restore_target, sys.position);
 801f068:	4937      	ldr	r1, [pc, #220]	@ (801f148 <state_await_hold+0x244>)
 801f06a:	300c      	adds	r0, #12
 801f06c:	f002 fb06 	bl	802167c <system_convert_array_steps_to_mpos>
 801f070:	e797      	b.n	801efa2 <state_await_hold+0x9e>
                            system_convert_array_steps_to_mpos(park.target, sys.position);
 801f072:	4935      	ldr	r1, [pc, #212]	@ (801f148 <state_await_hold+0x244>)
 801f074:	4832      	ldr	r0, [pc, #200]	@ (801f140 <state_await_hold+0x23c>)
 801f076:	f002 fb01 	bl	802167c <system_convert_array_steps_to_mpos>
 801f07a:	e7cd      	b.n	801f018 <state_await_hold+0x114>
                            park.target[settings.parking.axis] = park.retract_waypoint;
 801f07c:	4618      	mov	r0, r3
 801f07e:	edc1 7a00 	vstr	s15, [r1]
                            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801f082:	4b2e      	ldr	r3, [pc, #184]	@ (801f13c <state_await_hold+0x238>)
 801f084:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801f088:	6203      	str	r3, [r0, #32]
                            park.plan_data.condition.coolant = restore_condition.coolant; // Retain coolant state
 801f08a:	4b30      	ldr	r3, [pc, #192]	@ (801f14c <state_await_hold+0x248>)
 801f08c:	781a      	ldrb	r2, [r3, #0]
 801f08e:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
                            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state; // Retain spindle state
 801f092:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f096:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f09a:	7a1a      	ldrb	r2, [r3, #8]
 801f09c:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
                            park.plan_data.spindle.hal = restore_condition.spindle[restore_condition.spindle_num].hal;
 801f0a0:	691a      	ldr	r2, [r3, #16]
 801f0a2:	6302      	str	r2, [r0, #48]	@ 0x30
                            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801f0a4:	685b      	ldr	r3, [r3, #4]
 801f0a6:	6243      	str	r3, [r0, #36]	@ 0x24
                            await_motion = mc_parking_motion(park.target, &park.plan_data);
 801f0a8:	f100 0120 	add.w	r1, r0, #32
 801f0ac:	f7f5 fa6c 	bl	8014588 <mc_parking_motion>
 801f0b0:	e7c4      	b.n	801f03c <state_await_hold+0x138>
                        spindle_all_off(); // De-energize
 801f0b2:	f7ff f945 	bl	801e340 <spindle_all_off>
                        if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801f0b6:	4b21      	ldr	r3, [pc, #132]	@ (801f13c <state_await_hold+0x238>)
 801f0b8:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801f0bc:	f013 0f02 	tst.w	r3, #2
 801f0c0:	d003      	beq.n	801f0ca <state_await_hold+0x1c6>
 801f0c2:	4b1b      	ldr	r3, [pc, #108]	@ (801f130 <state_await_hold+0x22c>)
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	2b80      	cmp	r3, #128	@ 0x80
 801f0c8:	d104      	bne.n	801f0d4 <state_await_hold+0x1d0>
                            hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801f0ca:	4b17      	ldr	r3, [pc, #92]	@ (801f128 <state_await_hold+0x224>)
 801f0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0ce:	f04f 0000 	mov.w	r0, #0
 801f0d2:	4798      	blx	r3
                        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f0d4:	4b14      	ldr	r3, [pc, #80]	@ (801f128 <state_await_hold+0x224>)
 801f0d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f0d8:	4798      	blx	r3
 801f0da:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f0de:	4b11      	ldr	r3, [pc, #68]	@ (801f124 <state_await_hold+0x220>)
 801f0e0:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if (!handler_changed) {
 801f0e4:	e72b      	b.n	801ef3e <state_await_hold+0x3a>
                    spindle_all_off(); // De-energize
 801f0e6:	f7ff f92b 	bl	801e340 <spindle_all_off>
                    if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801f0ea:	4b14      	ldr	r3, [pc, #80]	@ (801f13c <state_await_hold+0x238>)
 801f0ec:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801f0f0:	f013 0f02 	tst.w	r3, #2
 801f0f4:	d003      	beq.n	801f0fe <state_await_hold+0x1fa>
 801f0f6:	4b0e      	ldr	r3, [pc, #56]	@ (801f130 <state_await_hold+0x22c>)
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	2b80      	cmp	r3, #128	@ 0x80
 801f0fc:	d104      	bne.n	801f108 <state_await_hold+0x204>
                        hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801f0fe:	4b0a      	ldr	r3, [pc, #40]	@ (801f128 <state_await_hold+0x224>)
 801f100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f102:	f04f 0000 	mov.w	r0, #0
 801f106:	4798      	blx	r3
                    sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801f108:	4b07      	ldr	r3, [pc, #28]	@ (801f128 <state_await_hold+0x224>)
 801f10a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f10c:	4798      	blx	r3
 801f10e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f112:	4b04      	ldr	r3, [pc, #16]	@ (801f124 <state_await_hold+0x220>)
 801f114:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
        if (!handler_changed) {
 801f118:	e711      	b.n	801ef3e <state_await_hold+0x3a>
                state_set(STATE_IDLE);
 801f11a:	2000      	movs	r0, #0
 801f11c:	f7ff fb9a 	bl	801e854 <state_set>
 801f120:	e71a      	b.n	801ef58 <state_await_hold+0x54>
 801f122:	bf00      	nop
 801f124:	200014a0 	.word	0x200014a0
 801f128:	200011c0 	.word	0x200011c0
 801f12c:	200014ec 	.word	0x200014ec
 801f130:	20001e58 	.word	0x20001e58
 801f134:	20000424 	.word	0x20000424
 801f138:	0801eb31 	.word	0x0801eb31
 801f13c:	20001bd8 	.word	0x20001bd8
 801f140:	20001e10 	.word	0x20001e10
 801f144:	0801e3cd 	.word	0x0801e3cd
 801f148:	20001528 	.word	0x20001528
 801f14c:	20001e60 	.word	0x20001e60

0801f150 <state_suspend_manager>:
    if (stateHandler != state_await_resume || !gc_state.modal.spindle.state.on)
 801f150:	4b39      	ldr	r3, [pc, #228]	@ (801f238 <state_suspend_manager+0xe8>)
 801f152:	681a      	ldr	r2, [r3, #0]
 801f154:	4b39      	ldr	r3, [pc, #228]	@ (801f23c <state_suspend_manager+0xec>)
 801f156:	429a      	cmp	r2, r3
 801f158:	d000      	beq.n	801f15c <state_suspend_manager+0xc>
 801f15a:	4770      	bx	lr
 801f15c:	4b38      	ldr	r3, [pc, #224]	@ (801f240 <state_suspend_manager+0xf0>)
 801f15e:	7e9b      	ldrb	r3, [r3, #26]
 801f160:	f013 0f01 	tst.w	r3, #1
 801f164:	d0f9      	beq.n	801f15a <state_suspend_manager+0xa>
{
 801f166:	b510      	push	{r4, lr}
    if (sys.override.spindle_stop.value) {
 801f168:	4b36      	ldr	r3, [pc, #216]	@ (801f244 <state_suspend_manager+0xf4>)
 801f16a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d047      	beq.n	801f202 <state_suspend_manager+0xb2>
        if (sys.override.spindle_stop.initiate) {
 801f172:	f013 0f02 	tst.w	r3, #2
 801f176:	d122      	bne.n	801f1be <state_suspend_manager+0x6e>
        if (sys.override.spindle_stop.restore) {
 801f178:	4b32      	ldr	r3, [pc, #200]	@ (801f244 <state_suspend_manager+0xf4>)
 801f17a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801f17e:	f013 0f04 	tst.w	r3, #4
 801f182:	d01b      	beq.n	801f1bc <state_suspend_manager+0x6c>
            grbl.report.feedback_message(Message_SpindleRestore);
 801f184:	4b30      	ldr	r3, [pc, #192]	@ (801f248 <state_suspend_manager+0xf8>)
 801f186:	68db      	ldr	r3, [r3, #12]
 801f188:	200a      	movs	r0, #10
 801f18a:	4798      	blx	r3
            if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801f18c:	4b2f      	ldr	r3, [pc, #188]	@ (801f24c <state_suspend_manager+0xfc>)
 801f18e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f192:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f196:	691b      	ldr	r3, [r3, #16]
 801f198:	7a9b      	ldrb	r3, [r3, #10]
 801f19a:	f013 0f08 	tst.w	r3, #8
 801f19e:	d029      	beq.n	801f1f4 <state_suspend_manager+0xa4>
                sys.step_control.update_spindle_rpm = On;
 801f1a0:	4a28      	ldr	r2, [pc, #160]	@ (801f244 <state_suspend_manager+0xf4>)
 801f1a2:	7e13      	ldrb	r3, [r2, #24]
 801f1a4:	f043 0308 	orr.w	r3, r3, #8
 801f1a8:	7613      	strb	r3, [r2, #24]
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801f1aa:	4b26      	ldr	r3, [pc, #152]	@ (801f244 <state_suspend_manager+0xf4>)
 801f1ac:	2200      	movs	r2, #0
 801f1ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            if(grbl.on_override_changed)
 801f1b2:	4b25      	ldr	r3, [pc, #148]	@ (801f248 <state_suspend_manager+0xf8>)
 801f1b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f1b6:	b10b      	cbz	r3, 801f1bc <state_suspend_manager+0x6c>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801f1b8:	4610      	mov	r0, r2
 801f1ba:	4798      	blx	r3
}
 801f1bc:	bd10      	pop	{r4, pc}
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801f1be:	4c21      	ldr	r4, [pc, #132]	@ (801f244 <state_suspend_manager+0xf4>)
 801f1c0:	2100      	movs	r1, #0
 801f1c2:	f884 1028 	strb.w	r1, [r4, #40]	@ 0x28
            spindle_set_state(restore_condition.spindle[restore_condition.spindle_num].hal, (spindle_state_t){0}, 0.0f); // De-energize
 801f1c6:	4b21      	ldr	r3, [pc, #132]	@ (801f24c <state_suspend_manager+0xfc>)
 801f1c8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801f1cc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f1d0:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801f250 <state_suspend_manager+0x100>
 801f1d4:	6918      	ldr	r0, [r3, #16]
 801f1d6:	f7fe ffa1 	bl	801e11c <spindle_set_state>
            sys.override.spindle_stop.enabled = On; // Set stop override state to enabled, if de-energized.
 801f1da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801f1de:	f043 0301 	orr.w	r3, r3, #1
 801f1e2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
            if(grbl.on_override_changed)
 801f1e6:	4b18      	ldr	r3, [pc, #96]	@ (801f248 <state_suspend_manager+0xf8>)
 801f1e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d0c4      	beq.n	801f178 <state_suspend_manager+0x28>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801f1ee:	2000      	movs	r0, #0
 801f1f0:	4798      	blx	r3
 801f1f2:	e7c1      	b.n	801f178 <state_suspend_manager+0x28>
                state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801f1f4:	4815      	ldr	r0, [pc, #84]	@ (801f24c <state_suspend_manager+0xfc>)
 801f1f6:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801f1fa:	3004      	adds	r0, #4
 801f1fc:	f7ff fb04 	bl	801e808 <state_spindle_set_state>
 801f200:	e7d3      	b.n	801f1aa <state_suspend_manager+0x5a>
    } else if (sys.step_control.update_spindle_rpm && restore_condition.spindle[0].hal->get_state(restore_condition.spindle[0].hal).on) {
 801f202:	4b10      	ldr	r3, [pc, #64]	@ (801f244 <state_suspend_manager+0xf4>)
 801f204:	7e1b      	ldrb	r3, [r3, #24]
 801f206:	f013 0f08 	tst.w	r3, #8
 801f20a:	d0d7      	beq.n	801f1bc <state_suspend_manager+0x6c>
 801f20c:	4b0f      	ldr	r3, [pc, #60]	@ (801f24c <state_suspend_manager+0xfc>)
 801f20e:	6918      	ldr	r0, [r3, #16]
 801f210:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f212:	4798      	blx	r3
 801f214:	f010 0f01 	tst.w	r0, #1
 801f218:	d0d0      	beq.n	801f1bc <state_suspend_manager+0x6c>
        state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801f21a:	480c      	ldr	r0, [pc, #48]	@ (801f24c <state_suspend_manager+0xfc>)
 801f21c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801f220:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801f224:	3004      	adds	r0, #4
 801f226:	f7ff faef 	bl	801e808 <state_spindle_set_state>
        sys.step_control.update_spindle_rpm = Off;
 801f22a:	4b06      	ldr	r3, [pc, #24]	@ (801f244 <state_suspend_manager+0xf4>)
 801f22c:	7e1a      	ldrb	r2, [r3, #24]
 801f22e:	f36f 02c3 	bfc	r2, #3, #1
 801f232:	761a      	strb	r2, [r3, #24]
 801f234:	e7c2      	b.n	801f1bc <state_suspend_manager+0x6c>
 801f236:	bf00      	nop
 801f238:	20000424 	.word	0x20000424
 801f23c:	0801eb31 	.word	0x0801eb31
 801f240:	20000ef8 	.word	0x20000ef8
 801f244:	200014a0 	.word	0x200014a0
 801f248:	200013a8 	.word	0x200013a8
 801f24c:	20001e60 	.word	0x20001e60
 801f250:	00000000 	.word	0x00000000

0801f254 <st_deenergize>:

//

// Callback from delay to deenergize steppers after movement, might been cancelled
void st_deenergize (void *data)
{
 801f254:	b508      	push	{r3, lr}
    if(sys.steppers_deenergize) {
 801f256:	4b07      	ldr	r3, [pc, #28]	@ (801f274 <st_deenergize+0x20>)
 801f258:	799b      	ldrb	r3, [r3, #6]
 801f25a:	b14b      	cbz	r3, 801f270 <st_deenergize+0x1c>
        hal.stepper.enable(settings.steppers.deenergize);
 801f25c:	4b06      	ldr	r3, [pc, #24]	@ (801f278 <st_deenergize+0x24>)
 801f25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f262:	4a06      	ldr	r2, [pc, #24]	@ (801f27c <st_deenergize+0x28>)
 801f264:	f892 00ec 	ldrb.w	r0, [r2, #236]	@ 0xec
 801f268:	4798      	blx	r3
        sys.steppers_deenergize = false;
 801f26a:	4b02      	ldr	r3, [pc, #8]	@ (801f274 <st_deenergize+0x20>)
 801f26c:	2200      	movs	r2, #0
 801f26e:	719a      	strb	r2, [r3, #6]
    }
}
 801f270:	bd08      	pop	{r3, pc}
 801f272:	bf00      	nop
 801f274:	200014a0 	.word	0x200014a0
 801f278:	200011c0 	.word	0x200011c0
 801f27c:	20001bd8 	.word	0x20001bd8

0801f280 <st_wake_up>:

// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up (void)
{
 801f280:	b508      	push	{r3, lr}
    // Initialize stepper data to ensure first ISR call does not step and
    // cancel any pending steppers deenergize
    //st.exec_block = NULL;
    sys.steppers_deenergize = false;
 801f282:	4b04      	ldr	r3, [pc, #16]	@ (801f294 <st_wake_up+0x14>)
 801f284:	2200      	movs	r2, #0
 801f286:	719a      	strb	r2, [r3, #6]
    hal.stepper.wake_up();
 801f288:	4b03      	ldr	r3, [pc, #12]	@ (801f298 <st_wake_up+0x18>)
 801f28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f28e:	4798      	blx	r3
}
 801f290:	bd08      	pop	{r3, pc}
 801f292:	bf00      	nop
 801f294:	200014a0 	.word	0x200014a0
 801f298:	200011c0 	.word	0x200011c0

0801f29c <st_go_idle>:

// Stepper shutdown
ISR_CODE void ISR_FUNC(st_go_idle)(void)
{
 801f29c:	b510      	push	{r4, lr}
    // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.

    sys_state_t state = state_get();
 801f29e:	f7ff fad3 	bl	801e848 <state_get>
 801f2a2:	4604      	mov	r4, r0

    hal.stepper.go_idle(false);
 801f2a4:	4b1b      	ldr	r3, [pc, #108]	@ (801f314 <st_go_idle+0x78>)
 801f2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f2aa:	2000      	movs	r0, #0
 801f2ac:	4798      	blx	r3

    // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
    if(((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801f2ae:	4b1a      	ldr	r3, [pc, #104]	@ (801f318 <st_go_idle+0x7c>)
 801f2b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f2b4:	2bff      	cmp	r3, #255	@ 0xff
 801f2b6:	d00b      	beq.n	801f2d0 <st_go_idle+0x34>
 801f2b8:	2c04      	cmp	r4, #4
 801f2ba:	d00f      	beq.n	801f2dc <st_go_idle+0x40>
        if(settings.steppers.idle_lock_time == 0 || state == STATE_SLEEP)
 801f2bc:	b10b      	cbz	r3, 801f2c2 <st_go_idle+0x26>
 801f2be:	2c80      	cmp	r4, #128	@ 0x80
 801f2c0:	d116      	bne.n	801f2f0 <st_go_idle+0x54>
            hal.stepper.enable((axes_signals_t){0});
 801f2c2:	4b14      	ldr	r3, [pc, #80]	@ (801f314 <st_go_idle+0x78>)
 801f2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f2c8:	f04f 0000 	mov.w	r0, #0
 801f2cc:	4798      	blx	r3
            task_delete(st_deenergize, NULL); // Cancel any pending steppers deenergize task
            sys.steppers_deenergize = task_add_delayed(st_deenergize, NULL, settings.steppers.idle_lock_time);
        }
    } else
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
}
 801f2ce:	bd10      	pop	{r4, pc}
    if(((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801f2d0:	4a12      	ldr	r2, [pc, #72]	@ (801f31c <st_go_idle+0x80>)
 801f2d2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801f2d4:	2a00      	cmp	r2, #0
 801f2d6:	d1ef      	bne.n	801f2b8 <st_go_idle+0x1c>
 801f2d8:	2c80      	cmp	r4, #128	@ 0x80
 801f2da:	d0ef      	beq.n	801f2bc <st_go_idle+0x20>
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801f2dc:	4a0d      	ldr	r2, [pc, #52]	@ (801f314 <st_go_idle+0x78>)
 801f2de:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801f2e2:	2bff      	cmp	r3, #255	@ 0xff
 801f2e4:	d013      	beq.n	801f30e <st_go_idle+0x72>
 801f2e6:	4b0c      	ldr	r3, [pc, #48]	@ (801f318 <st_go_idle+0x7c>)
 801f2e8:	f893 00ec 	ldrb.w	r0, [r3, #236]	@ 0xec
 801f2ec:	4790      	blx	r2
}
 801f2ee:	e7ee      	b.n	801f2ce <st_go_idle+0x32>
            task_delete(st_deenergize, NULL); // Cancel any pending steppers deenergize task
 801f2f0:	4c0b      	ldr	r4, [pc, #44]	@ (801f320 <st_go_idle+0x84>)
 801f2f2:	2100      	movs	r1, #0
 801f2f4:	4620      	mov	r0, r4
 801f2f6:	f7f2 fa35 	bl	8011764 <task_delete>
            sys.steppers_deenergize = task_add_delayed(st_deenergize, NULL, settings.steppers.idle_lock_time);
 801f2fa:	4b07      	ldr	r3, [pc, #28]	@ (801f318 <st_go_idle+0x7c>)
 801f2fc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801f300:	2100      	movs	r1, #0
 801f302:	4620      	mov	r0, r4
 801f304:	f7f1 ffa8 	bl	8011258 <task_add_delayed>
 801f308:	4b04      	ldr	r3, [pc, #16]	@ (801f31c <st_go_idle+0x80>)
 801f30a:	7198      	strb	r0, [r3, #6]
 801f30c:	e7df      	b.n	801f2ce <st_go_idle+0x32>
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801f30e:	f04f 0007 	mov.w	r0, #7
 801f312:	e7eb      	b.n	801f2ec <st_go_idle+0x50>
 801f314:	200011c0 	.word	0x200011c0
 801f318:	20001bd8 	.word	0x20001bd8
 801f31c:	200014a0 	.word	0x200014a0
 801f320:	0801f255 	.word	0x0801f255

0801f324 <stepper_driver_interrupt_handler>:
*/

//! \cond

ISR_CODE void ISR_FUNC(stepper_driver_interrupt_handler)(void)
{
 801f324:	b510      	push	{r4, lr}
#if ENABLE_BACKLASH_COMPENSATION
    static bool backlash_motion;
#endif

    // Start a step pulse when there is a block to execute.
    if(st.exec_block) {
 801f326:	4b91      	ldr	r3, [pc, #580]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f32a:	b163      	cbz	r3, 801f346 <stepper_driver_interrupt_handler+0x22>

        hal.stepper.pulse_start(&st);
 801f32c:	4b90      	ldr	r3, [pc, #576]	@ (801f570 <stepper_driver_interrupt_handler+0x24c>)
 801f32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801f332:	4c8e      	ldr	r4, [pc, #568]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f334:	4620      	mov	r0, r4
 801f336:	4798      	blx	r3

        st.new_block = st.dir_change = false;
 801f338:	2300      	movs	r3, #0
 801f33a:	7363      	strb	r3, [r4, #13]
 801f33c:	7323      	strb	r3, [r4, #12]

        if (st.step_count == 0) // Segment is complete. Discard current segment.
 801f33e:	6a23      	ldr	r3, [r4, #32]
 801f340:	b90b      	cbnz	r3, 801f346 <stepper_driver_interrupt_handler+0x22>
            st.exec_segment = NULL;
 801f342:	2200      	movs	r2, #0
 801f344:	62e2      	str	r2, [r4, #44]	@ 0x2c
    }

    // If there is no step segment, attempt to pop one from the stepper buffer
    if (st.exec_segment == NULL) {
 801f346:	4b89      	ldr	r3, [pc, #548]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d068      	beq.n	801f420 <stepper_driver_interrupt_handler+0xfc>
    }

    // Check probing state.
    // Monitors probe pin state and records the system position when detected.
    // NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801f34e:	4b89      	ldr	r3, [pc, #548]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801f354:	b2db      	uxtb	r3, r3
 801f356:	2b01      	cmp	r3, #1
 801f358:	f000 812c 	beq.w	801f5b4 <stepper_driver_interrupt_handler+0x290>
            segment_next_head = segment_next_head->next;
        }
#endif
    }

    register axes_signals_t step_outbits = (axes_signals_t){0};
 801f35c:	f04f 0100 	mov.w	r1, #0

    // Execute step displacement profile by Bresenham line algorithm

    st.counter_x += st.steps[X_AXIS];
 801f360:	4a82      	ldr	r2, [pc, #520]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f362:	6813      	ldr	r3, [r2, #0]
 801f364:	6910      	ldr	r0, [r2, #16]
 801f366:	4403      	add	r3, r0
 801f368:	6013      	str	r3, [r2, #0]
    if (st.counter_x > st.step_event_count) {
 801f36a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801f36c:	4293      	cmp	r3, r2
 801f36e:	d912      	bls.n	801f396 <stepper_driver_interrupt_handler+0x72>
        step_outbits.x = On;
 801f370:	f04f 0101 	mov.w	r1, #1
        st.counter_x -= st.step_event_count;
 801f374:	487d      	ldr	r0, [pc, #500]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f376:	1a9b      	subs	r3, r3, r2
 801f378:	6003      	str	r3, [r0, #0]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801f37a:	4b7e      	ldr	r3, [pc, #504]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f380:	7bc0      	ldrb	r0, [r0, #15]
 801f382:	f010 0f01 	tst.w	r0, #1
 801f386:	f000 812d 	beq.w	801f5e4 <stepper_driver_interrupt_handler+0x2c0>
 801f38a:	f04f 30ff 	mov.w	r0, #4294967295
 801f38e:	4403      	add	r3, r0
 801f390:	4878      	ldr	r0, [pc, #480]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f392:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    }

    st.counter_y += st.steps[Y_AXIS];
 801f396:	4875      	ldr	r0, [pc, #468]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f398:	6843      	ldr	r3, [r0, #4]
 801f39a:	6944      	ldr	r4, [r0, #20]
 801f39c:	4423      	add	r3, r4
 801f39e:	6043      	str	r3, [r0, #4]
    if (st.counter_y > st.step_event_count) {
 801f3a0:	429a      	cmp	r2, r3
 801f3a2:	d211      	bcs.n	801f3c8 <stepper_driver_interrupt_handler+0xa4>
        step_outbits.y = On;
 801f3a4:	f041 0102 	orr.w	r1, r1, #2
        st.counter_y -= st.step_event_count;
 801f3a8:	1a9b      	subs	r3, r3, r2
 801f3aa:	6043      	str	r3, [r0, #4]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801f3ac:	4b71      	ldr	r3, [pc, #452]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f3ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f3b2:	7bc0      	ldrb	r0, [r0, #15]
 801f3b4:	f010 0f02 	tst.w	r0, #2
 801f3b8:	f000 8116 	beq.w	801f5e8 <stepper_driver_interrupt_handler+0x2c4>
 801f3bc:	f04f 30ff 	mov.w	r0, #4294967295
 801f3c0:	4403      	add	r3, r0
 801f3c2:	486c      	ldr	r0, [pc, #432]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f3c4:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    }

    st.counter_z += st.steps[Z_AXIS];
 801f3c8:	4868      	ldr	r0, [pc, #416]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f3ca:	6883      	ldr	r3, [r0, #8]
 801f3cc:	6984      	ldr	r4, [r0, #24]
 801f3ce:	4423      	add	r3, r4
 801f3d0:	6083      	str	r3, [r0, #8]
    if (st.counter_z > st.step_event_count) {
 801f3d2:	429a      	cmp	r2, r3
 801f3d4:	d211      	bcs.n	801f3fa <stepper_driver_interrupt_handler+0xd6>
        step_outbits.z = On;
 801f3d6:	f041 0104 	orr.w	r1, r1, #4
        st.counter_z -= st.step_event_count;
 801f3da:	1a9b      	subs	r3, r3, r2
 801f3dc:	6083      	str	r3, [r0, #8]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801f3de:	4b65      	ldr	r3, [pc, #404]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801f3e4:	7bc2      	ldrb	r2, [r0, #15]
 801f3e6:	f012 0f04 	tst.w	r2, #4
 801f3ea:	f000 80ff 	beq.w	801f5ec <stepper_driver_interrupt_handler+0x2c8>
 801f3ee:	f04f 32ff 	mov.w	r2, #4294967295
 801f3f2:	4413      	add	r3, r2
 801f3f4:	4a5f      	ldr	r2, [pc, #380]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f3f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif
            sys.position[V_AXIS] = sys.position[V_AXIS] + (st.dir_outbits.v ? -1 : 1);
    }
  #endif

    st.step_outbits.value = step_outbits.value;
 801f3fa:	4b5c      	ldr	r3, [pc, #368]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f3fc:	7399      	strb	r1, [r3, #14]

    // During a homing cycle, lock out and prevent desired axes from moving.
    if (state_get() == STATE_HOMING)
 801f3fe:	f7ff fa23 	bl	801e848 <state_get>
 801f402:	2804      	cmp	r0, #4
 801f404:	f000 80f4 	beq.w	801f5f0 <stepper_driver_interrupt_handler+0x2cc>
        st.step_outbits.value &= sys.homing_axis_lock.mask;

    if (st.step_count == 0 || --st.step_count == 0) {
 801f408:	4b58      	ldr	r3, [pc, #352]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f40a:	6a1b      	ldr	r3, [r3, #32]
 801f40c:	b11b      	cbz	r3, 801f416 <stepper_driver_interrupt_handler+0xf2>
 801f40e:	3b01      	subs	r3, #1
 801f410:	4a56      	ldr	r2, [pc, #344]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f412:	6213      	str	r3, [r2, #32]
 801f414:	b91b      	cbnz	r3, 801f41e <stepper_driver_interrupt_handler+0xfa>
        // Segment is complete. Advance segment tail pointer.
        segment_buffer_tail = segment_buffer_tail->next;
 801f416:	4b58      	ldr	r3, [pc, #352]	@ (801f578 <stepper_driver_interrupt_handler+0x254>)
 801f418:	681a      	ldr	r2, [r3, #0]
 801f41a:	6852      	ldr	r2, [r2, #4]
 801f41c:	601a      	str	r2, [r3, #0]
    }
}
 801f41e:	bd10      	pop	{r4, pc}
        if (segment_buffer_tail != segment_buffer_head) {
 801f420:	4b55      	ldr	r3, [pc, #340]	@ (801f578 <stepper_driver_interrupt_handler+0x254>)
 801f422:	681b      	ldr	r3, [r3, #0]
 801f424:	4a55      	ldr	r2, [pc, #340]	@ (801f57c <stepper_driver_interrupt_handler+0x258>)
 801f426:	6812      	ldr	r2, [r2, #0]
 801f428:	4293      	cmp	r3, r2
 801f42a:	f000 80ab 	beq.w	801f584 <stepper_driver_interrupt_handler+0x260>
            st.exec_segment = (segment_t *)segment_buffer_tail;
 801f42e:	4c4f      	ldr	r4, [pc, #316]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f430:	62e3      	str	r3, [r4, #44]	@ 0x2c
            hal.stepper.cycles_per_tick(st.exec_segment->cycles_per_tick);
 801f432:	4a4f      	ldr	r2, [pc, #316]	@ (801f570 <stepper_driver_interrupt_handler+0x24c>)
 801f434:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 801f438:	68d8      	ldr	r0, [r3, #12]
 801f43a:	4790      	blx	r2
            st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 801f43c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801f43e:	699a      	ldr	r2, [r3, #24]
 801f440:	6222      	str	r2, [r4, #32]
            if (st.exec_block != st.exec_segment->exec_block) {
 801f442:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801f444:	6899      	ldr	r1, [r3, #8]
 801f446:	428a      	cmp	r2, r1
 801f448:	d06c      	beq.n	801f524 <stepper_driver_interrupt_handler+0x200>
                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801f44a:	b382      	cbz	r2, 801f4ae <stepper_driver_interrupt_handler+0x18a>
 801f44c:	7be0      	ldrb	r0, [r4, #15]
 801f44e:	7e09      	ldrb	r1, [r1, #24]
 801f450:	4288      	cmp	r0, r1
 801f452:	d02e      	beq.n	801f4b2 <stepper_driver_interrupt_handler+0x18e>
 801f454:	2101      	movs	r1, #1
 801f456:	4845      	ldr	r0, [pc, #276]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f458:	7341      	strb	r1, [r0, #13]
 801f45a:	b119      	cbz	r1, 801f464 <stepper_driver_interrupt_handler+0x140>
                    st.dir_outbits = st.exec_segment->exec_block->direction_bits;
 801f45c:	6899      	ldr	r1, [r3, #8]
 801f45e:	7e08      	ldrb	r0, [r1, #24]
 801f460:	4942      	ldr	r1, [pc, #264]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f462:	73c8      	strb	r0, [r1, #15]
                if(st.exec_block != NULL && st.exec_block->offset_id != st.exec_segment->exec_block->offset_id)
 801f464:	b19a      	cbz	r2, 801f48e <stepper_driver_interrupt_handler+0x16a>
 801f466:	f992 1032 	ldrsb.w	r1, [r2, #50]	@ 0x32
 801f46a:	689a      	ldr	r2, [r3, #8]
 801f46c:	f992 2032 	ldrsb.w	r2, [r2, #50]	@ 0x32
 801f470:	4291      	cmp	r1, r2
 801f472:	d00c      	beq.n	801f48e <stepper_driver_interrupt_handler+0x16a>
                    sys.report.wco = sys.report.force_wco = On; // Do not generate grbl.on_rt_reports_added event!
 801f474:	4a3f      	ldr	r2, [pc, #252]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f476:	f892 1033 	ldrb.w	r1, [r2, #51]	@ 0x33
 801f47a:	f041 0120 	orr.w	r1, r1, #32
 801f47e:	f882 1033 	strb.w	r1, [r2, #51]	@ 0x33
 801f482:	f892 1031 	ldrb.w	r1, [r2, #49]	@ 0x31
 801f486:	f041 0101 	orr.w	r1, r1, #1
 801f48a:	f882 1031 	strb.w	r1, [r2, #49]	@ 0x31
                st.exec_block = st.exec_segment->exec_block;
 801f48e:	689b      	ldr	r3, [r3, #8]
 801f490:	4a36      	ldr	r2, [pc, #216]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f492:	6293      	str	r3, [r2, #40]	@ 0x28
                st.step_event_count = st.exec_block->step_event_count;
 801f494:	6959      	ldr	r1, [r3, #20]
 801f496:	6251      	str	r1, [r2, #36]	@ 0x24
                st.new_block = true;
 801f498:	2101      	movs	r1, #1
 801f49a:	7311      	strb	r1, [r2, #12]
                if(st.exec_block->overrides.sync)
 801f49c:	f993 2019 	ldrsb.w	r2, [r3, #25]
 801f4a0:	2a00      	cmp	r2, #0
 801f4a2:	da15      	bge.n	801f4d0 <stepper_driver_interrupt_handler+0x1ac>
                    sys.override.control = st.exec_block->overrides;
 801f4a4:	7e5a      	ldrb	r2, [r3, #25]
 801f4a6:	4b33      	ldr	r3, [pc, #204]	@ (801f574 <stepper_driver_interrupt_handler+0x250>)
 801f4a8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 801f4ac:	e010      	b.n	801f4d0 <stepper_driver_interrupt_handler+0x1ac>
                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801f4ae:	2101      	movs	r1, #1
 801f4b0:	e7d1      	b.n	801f456 <stepper_driver_interrupt_handler+0x132>
 801f4b2:	2100      	movs	r1, #0
 801f4b4:	e7cf      	b.n	801f456 <stepper_driver_interrupt_handler+0x132>
                        hal.port.analog_out(cmd->port, cmd->value);
 801f4b6:	4b2e      	ldr	r3, [pc, #184]	@ (801f570 <stepper_driver_interrupt_handler+0x24c>)
 801f4b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801f4bc:	edd4 7a01 	vldr	s15, [r4, #4]
 801f4c0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f4c4:	78a0      	ldrb	r0, [r4, #2]
 801f4c6:	4798      	blx	r3
                    st.exec_block->output_commands = cmd->next;
 801f4c8:	4b28      	ldr	r3, [pc, #160]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4cc:	68a2      	ldr	r2, [r4, #8]
 801f4ce:	62da      	str	r2, [r3, #44]	@ 0x2c
                while(st.exec_block->output_commands) {
 801f4d0:	4b26      	ldr	r3, [pc, #152]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f4d4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801f4d6:	b1ac      	cbz	r4, 801f504 <stepper_driver_interrupt_handler+0x1e0>
                    cmd->is_executed = true;
 801f4d8:	2301      	movs	r3, #1
 801f4da:	7063      	strb	r3, [r4, #1]
                    if(cmd->is_digital)
 801f4dc:	7823      	ldrb	r3, [r4, #0]
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d0e9      	beq.n	801f4b6 <stepper_driver_interrupt_handler+0x192>
                        hal.port.digital_out(cmd->port, cmd->value != 0.0f);
 801f4e2:	4b23      	ldr	r3, [pc, #140]	@ (801f570 <stepper_driver_interrupt_handler+0x24c>)
 801f4e4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801f4e8:	edd4 7a01 	vldr	s15, [r4, #4]
 801f4ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f4f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4f8:	bf14      	ite	ne
 801f4fa:	2101      	movne	r1, #1
 801f4fc:	2100      	moveq	r1, #0
 801f4fe:	78a0      	ldrb	r0, [r4, #2]
 801f500:	4798      	blx	r3
 801f502:	e7e1      	b.n	801f4c8 <stepper_driver_interrupt_handler+0x1a4>
                if(st.exec_block->message) {
 801f504:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801f506:	b139      	cbz	r1, 801f518 <stepper_driver_interrupt_handler+0x1f4>
                    if(!protocol_enqueue_foreground_task((foreground_task_ptr)gc_output_message, st.exec_block->message))
 801f508:	481d      	ldr	r0, [pc, #116]	@ (801f580 <stepper_driver_interrupt_handler+0x25c>)
 801f50a:	f7f8 f921 	bl	8017750 <protocol_enqueue_foreground_task>
 801f50e:	b1e8      	cbz	r0, 801f54c <stepper_driver_interrupt_handler+0x228>
                    st.exec_block->message = NULL;
 801f510:	4b16      	ldr	r3, [pc, #88]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f514:	2200      	movs	r2, #0
 801f516:	629a      	str	r2, [r3, #40]	@ 0x28
                  = st.step_event_count >> 1;
 801f518:	4a14      	ldr	r2, [pc, #80]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f51a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801f51c:	085b      	lsrs	r3, r3, #1
 801f51e:	6093      	str	r3, [r2, #8]
                st.counter_x = st.counter_y = st.counter_z
 801f520:	6053      	str	r3, [r2, #4]
 801f522:	6013      	str	r3, [r2, #0]
            st.amass_level = st.exec_segment->amass_level;
 801f524:	4b11      	ldr	r3, [pc, #68]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f526:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801f528:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 801f52a:	61da      	str	r2, [r3, #28]
            st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.amass_level;
 801f52c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801f52e:	6884      	ldr	r4, [r0, #8]
 801f530:	40d4      	lsrs	r4, r2
 801f532:	611c      	str	r4, [r3, #16]
            st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.amass_level;
 801f534:	68c4      	ldr	r4, [r0, #12]
 801f536:	40d4      	lsrs	r4, r2
 801f538:	615c      	str	r4, [r3, #20]
            st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.amass_level;
 801f53a:	6904      	ldr	r4, [r0, #16]
 801f53c:	40d4      	lsrs	r4, r2
 801f53e:	619c      	str	r4, [r3, #24]
            if(st.exec_segment->update_pwm)
 801f540:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801f542:	b14b      	cbz	r3, 801f558 <stepper_driver_interrupt_handler+0x234>
                st.exec_segment->update_pwm(st.exec_block->spindle, st.exec_segment->spindle_pwm);
 801f544:	69c9      	ldr	r1, [r1, #28]
 801f546:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801f548:	4798      	blx	r3
 801f54a:	e700      	b.n	801f34e <stepper_driver_interrupt_handler+0x2a>
                        free(st.exec_block->message);
 801f54c:	4b07      	ldr	r3, [pc, #28]	@ (801f56c <stepper_driver_interrupt_handler+0x248>)
 801f54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f550:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801f552:	f002 ffab 	bl	80224ac <free>
 801f556:	e7db      	b.n	801f510 <stepper_driver_interrupt_handler+0x1ec>
            else if(st.exec_segment->update_rpm)
 801f558:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	f43f aef7 	beq.w	801f34e <stepper_driver_interrupt_handler+0x2a>
                st.exec_segment->update_rpm(st.exec_block->spindle, st.exec_segment->spindle_rpm);
 801f560:	ed91 0a08 	vldr	s0, [r1, #32]
 801f564:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801f566:	4798      	blx	r3
 801f568:	e6f1      	b.n	801f34e <stepper_driver_interrupt_handler+0x2a>
 801f56a:	bf00      	nop
 801f56c:	20001f24 	.word	0x20001f24
 801f570:	200011c0 	.word	0x200011c0
 801f574:	200014a0 	.word	0x200014a0
 801f578:	20001f0c 	.word	0x20001f0c
 801f57c:	20001f08 	.word	0x20001f08
 801f580:	0800cf51 	.word	0x0800cf51
            st_go_idle();
 801f584:	f7ff fe8a 	bl	801f29c <st_go_idle>
            if (st.exec_block->dynamic_rpm && st.exec_block->spindle->cap.laser)
 801f588:	4b1d      	ldr	r3, [pc, #116]	@ (801f600 <stepper_driver_interrupt_handler+0x2dc>)
 801f58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f58c:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 801f590:	b13a      	cbz	r2, 801f5a2 <stepper_driver_interrupt_handler+0x27e>
 801f592:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801f594:	7a83      	ldrb	r3, [r0, #10]
 801f596:	f013 0f08 	tst.w	r3, #8
 801f59a:	d002      	beq.n	801f5a2 <stepper_driver_interrupt_handler+0x27e>
                st.exec_block->spindle->update_pwm(st.exec_block->spindle, st.exec_block->spindle->pwm_off_value);
 801f59c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801f59e:	6901      	ldr	r1, [r0, #16]
 801f5a0:	4798      	blx	r3
            st.exec_block = NULL;
 801f5a2:	4b17      	ldr	r3, [pc, #92]	@ (801f600 <stepper_driver_interrupt_handler+0x2dc>)
 801f5a4:	2200      	movs	r2, #0
 801f5a6:	629a      	str	r2, [r3, #40]	@ 0x28
            system_set_exec_state_flag(EXEC_CYCLE_COMPLETE); // Flag main program for cycle complete
 801f5a8:	4b16      	ldr	r3, [pc, #88]	@ (801f604 <stepper_driver_interrupt_handler+0x2e0>)
 801f5aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f5ac:	2104      	movs	r1, #4
 801f5ae:	4816      	ldr	r0, [pc, #88]	@ (801f608 <stepper_driver_interrupt_handler+0x2e4>)
 801f5b0:	4798      	blx	r3
            return; // Nothing to do but exit.
 801f5b2:	e734      	b.n	801f41e <stepper_driver_interrupt_handler+0xfa>
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801f5b4:	4b13      	ldr	r3, [pc, #76]	@ (801f604 <stepper_driver_interrupt_handler+0x2e0>)
 801f5b6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801f5ba:	4798      	blx	r3
 801f5bc:	f010 0f01 	tst.w	r0, #1
 801f5c0:	f43f aecc 	beq.w	801f35c <stepper_driver_interrupt_handler+0x38>
        sys.probing_state = Probing_Off;
 801f5c4:	4b11      	ldr	r3, [pc, #68]	@ (801f60c <stepper_driver_interrupt_handler+0x2e8>)
 801f5c6:	2200      	movs	r2, #0
 801f5c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 801f5cc:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 801f5d0:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801f5d4:	ca07      	ldmia	r2, {r0, r1, r2}
 801f5d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        bit_true(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 801f5da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801f5dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801f5e0:	649a      	str	r2, [r3, #72]	@ 0x48
 801f5e2:	e6bb      	b.n	801f35c <stepper_driver_interrupt_handler+0x38>
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801f5e4:	2001      	movs	r0, #1
 801f5e6:	e6d2      	b.n	801f38e <stepper_driver_interrupt_handler+0x6a>
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801f5e8:	2001      	movs	r0, #1
 801f5ea:	e6e9      	b.n	801f3c0 <stepper_driver_interrupt_handler+0x9c>
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801f5ec:	2201      	movs	r2, #1
 801f5ee:	e700      	b.n	801f3f2 <stepper_driver_interrupt_handler+0xce>
        st.step_outbits.value &= sys.homing_axis_lock.mask;
 801f5f0:	4a03      	ldr	r2, [pc, #12]	@ (801f600 <stepper_driver_interrupt_handler+0x2dc>)
 801f5f2:	7b93      	ldrb	r3, [r2, #14]
 801f5f4:	4905      	ldr	r1, [pc, #20]	@ (801f60c <stepper_driver_interrupt_handler+0x2e8>)
 801f5f6:	7e49      	ldrb	r1, [r1, #25]
 801f5f8:	400b      	ands	r3, r1
 801f5fa:	7393      	strb	r3, [r2, #14]
 801f5fc:	e704      	b.n	801f408 <stepper_driver_interrupt_handler+0xe4>
 801f5fe:	bf00      	nop
 801f600:	20001f24 	.word	0x20001f24
 801f604:	200011c0 	.word	0x200011c0
 801f608:	200014e8 	.word	0x200014e8
 801f60c:	200014a0 	.word	0x200014a0

0801f610 <st_reset>:

//! \endcond

// Reset and clear stepper subsystem variables
void st_reset (void)
{
 801f610:	b510      	push	{r4, lr}
    if(hal.probe.configure)
 801f612:	4b35      	ldr	r3, [pc, #212]	@ (801f6e8 <st_reset+0xd8>)
 801f614:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801f618:	b113      	cbz	r3, 801f620 <st_reset+0x10>
        hal.probe.configure(false, false);
 801f61a:	2100      	movs	r1, #0
 801f61c:	4608      	mov	r0, r1
 801f61e:	4798      	blx	r3

    // Initialize stepper driver idle state, clear step and direction port pins.
    st_go_idle();
 801f620:	f7ff fe3c 	bl	801f29c <st_go_idle>

    // NOTE: buffer indices starts from 1 for simpler driver coding!

    // Set up stepper block ringbuffer as circular linked list and add id
    uint_fast8_t idx, idx_max = (sizeof(st_block_buffer) / sizeof(st_block_t)) - 1;
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801f624:	2300      	movs	r3, #0
 801f626:	e010      	b.n	801f64a <st_reset+0x3a>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801f628:	2200      	movs	r2, #0
 801f62a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f62e:	00d1      	lsls	r1, r2, #3
 801f630:	482e      	ldr	r0, [pc, #184]	@ (801f6ec <st_reset+0xdc>)
 801f632:	4401      	add	r1, r0
 801f634:	ebc3 0cc3 	rsb	ip, r3, r3, lsl #3
 801f638:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801f63c:	4402      	add	r2, r0
 801f63e:	6051      	str	r1, [r2, #4]
        st_block_buffer[idx].id = idx + 1;
 801f640:	1c5a      	adds	r2, r3, #1
 801f642:	4663      	mov	r3, ip
 801f644:	00d9      	lsls	r1, r3, #3
 801f646:	5042      	str	r2, [r0, r1]
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801f648:	4613      	mov	r3, r2
 801f64a:	2b08      	cmp	r3, #8
 801f64c:	d803      	bhi.n	801f656 <st_reset+0x46>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801f64e:	2b08      	cmp	r3, #8
 801f650:	d0ea      	beq.n	801f628 <st_reset+0x18>
 801f652:	1c5a      	adds	r2, r3, #1
 801f654:	e7e9      	b.n	801f62a <st_reset+0x1a>
    }

    // Set up segments ringbuffer as circular linked list, add id and clear AMASS level
    idx_max = (sizeof(segment_buffer) / sizeof(segment_t)) - 1;
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801f656:	2300      	movs	r3, #0
 801f658:	e00f      	b.n	801f67a <st_reset+0x6a>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801f65a:	2000      	movs	r0, #0
 801f65c:	2234      	movs	r2, #52	@ 0x34
 801f65e:	4924      	ldr	r1, [pc, #144]	@ (801f6f0 <st_reset+0xe0>)
 801f660:	fb02 1000 	mla	r0, r2, r0, r1
 801f664:	fb03 f202 	mul.w	r2, r3, r2
 801f668:	eb01 0c02 	add.w	ip, r1, r2
 801f66c:	f8cc 0004 	str.w	r0, [ip, #4]
        segment_buffer[idx].id = idx + 1;
 801f670:	3301      	adds	r3, #1
 801f672:	508b      	str	r3, [r1, r2]
        segment_buffer[idx].amass_level = 0;
 801f674:	2200      	movs	r2, #0
 801f676:	f8cc 2028 	str.w	r2, [ip, #40]	@ 0x28
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801f67a:	2b09      	cmp	r3, #9
 801f67c:	d803      	bhi.n	801f686 <st_reset+0x76>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801f67e:	2b09      	cmp	r3, #9
 801f680:	d0eb      	beq.n	801f65a <st_reset+0x4a>
 801f682:	1c58      	adds	r0, r3, #1
 801f684:	e7ea      	b.n	801f65c <st_reset+0x4c>
    }

    st_prep_block = &st_block_buffer[0];
 801f686:	4b1b      	ldr	r3, [pc, #108]	@ (801f6f4 <st_reset+0xe4>)
 801f688:	4a18      	ldr	r2, [pc, #96]	@ (801f6ec <st_reset+0xdc>)
 801f68a:	601a      	str	r2, [r3, #0]

    // Initialize stepper algorithm variables.
    pl_block = NULL;  // Planner block pointer used by segment buffer
 801f68c:	2400      	movs	r4, #0
 801f68e:	4b1a      	ldr	r3, [pc, #104]	@ (801f6f8 <st_reset+0xe8>)
 801f690:	601c      	str	r4, [r3, #0]
    segment_buffer_tail = segment_buffer_head = &segment_buffer[0]; // empty = tail
 801f692:	4b17      	ldr	r3, [pc, #92]	@ (801f6f0 <st_reset+0xe0>)
 801f694:	4a19      	ldr	r2, [pc, #100]	@ (801f6fc <st_reset+0xec>)
 801f696:	6013      	str	r3, [r2, #0]
 801f698:	4a19      	ldr	r2, [pc, #100]	@ (801f700 <st_reset+0xf0>)
 801f69a:	6013      	str	r3, [r2, #0]
    segment_next_head = segment_buffer_head->next;
 801f69c:	685a      	ldr	r2, [r3, #4]
 801f69e:	4b19      	ldr	r3, [pc, #100]	@ (801f704 <st_reset+0xf4>)
 801f6a0:	601a      	str	r2, [r3, #0]

    memset(&prep, 0, sizeof(st_prep_t));
 801f6a2:	2250      	movs	r2, #80	@ 0x50
 801f6a4:	4621      	mov	r1, r4
 801f6a6:	4818      	ldr	r0, [pc, #96]	@ (801f708 <st_reset+0xf8>)
 801f6a8:	f004 ffc1 	bl	802462e <memset>
    memset(&st, 0, sizeof(stepper_t));
 801f6ac:	2230      	movs	r2, #48	@ 0x30
 801f6ae:	4621      	mov	r1, r4
 801f6b0:	4816      	ldr	r0, [pc, #88]	@ (801f70c <st_reset+0xfc>)
 801f6b2:	f004 ffbc 	bl	802462e <memset>

#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    // TODO: move to driver?
    // AMASS_LEVEL0: Normal operation. No AMASS. No upper cutoff frequency. Starts at LEVEL1 cutoff frequency.
    // Defined as step timer frequency / Cutoff frequency in Hz
    amass.level_1 = hal.f_step_timer / 8000;
 801f6b6:	4b0c      	ldr	r3, [pc, #48]	@ (801f6e8 <st_reset+0xd8>)
 801f6b8:	69da      	ldr	r2, [r3, #28]
 801f6ba:	4b15      	ldr	r3, [pc, #84]	@ (801f710 <st_reset+0x100>)
 801f6bc:	fba3 1302 	umull	r1, r3, r3, r2
 801f6c0:	0a58      	lsrs	r0, r3, #9
 801f6c2:	4914      	ldr	r1, [pc, #80]	@ (801f714 <st_reset+0x104>)
 801f6c4:	6008      	str	r0, [r1, #0]
    amass.level_2 = hal.f_step_timer / 4000;
 801f6c6:	0a18      	lsrs	r0, r3, #8
 801f6c8:	6048      	str	r0, [r1, #4]
    amass.level_3 = hal.f_step_timer / 2000;
 801f6ca:	09db      	lsrs	r3, r3, #7
 801f6cc:	608b      	str	r3, [r1, #8]
#endif

    cycles_per_min = (float)hal.f_step_timer * 60.0f;
 801f6ce:	ee07 2a90 	vmov	s15, r2
 801f6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6d6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801f718 <st_reset+0x108>
 801f6da:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f6de:	4b0f      	ldr	r3, [pc, #60]	@ (801f71c <st_reset+0x10c>)
 801f6e0:	edc3 7a00 	vstr	s15, [r3]
}
 801f6e4:	bd10      	pop	{r4, pc}
 801f6e6:	bf00      	nop
 801f6e8:	200011c0 	.word	0x200011c0
 801f6ec:	2000215c 	.word	0x2000215c
 801f6f0:	20001f54 	.word	0x20001f54
 801f6f4:	20001efc 	.word	0x20001efc
 801f6f8:	20001f00 	.word	0x20001f00
 801f6fc:	20001f08 	.word	0x20001f08
 801f700:	20001f0c 	.word	0x20001f0c
 801f704:	20001f04 	.word	0x20001f04
 801f708:	20001e74 	.word	0x20001e74
 801f70c:	20001f24 	.word	0x20001f24
 801f710:	10624dd3 	.word	0x10624dd3
 801f714:	20001f18 	.word	0x20001f18
 801f718:	42700000 	.word	0x42700000
 801f71c:	20001f10 	.word	0x20001f10

0801f720 <st_rpm_changed>:

// Called by spindle_set_state() to inform about RPM changes.
// Used by st_prep_buffer() to determine if spindle needs update when dynamic RPM is called for.
void st_rpm_changed (float rpm)
{
    prep.current_spindle_rpm = rpm;
 801f720:	4b01      	ldr	r3, [pc, #4]	@ (801f728 <st_rpm_changed+0x8>)
 801f722:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c
}
 801f726:	4770      	bx	lr
 801f728:	20001e74 	.word	0x20001e74

0801f72c <st_update_plan_block_parameters>:

// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters (void)
{
    if (pl_block != NULL) { // Ignore if at start of a new block.
 801f72c:	4b08      	ldr	r3, [pc, #32]	@ (801f750 <st_update_plan_block_parameters+0x24>)
 801f72e:	6819      	ldr	r1, [r3, #0]
 801f730:	b169      	cbz	r1, 801f74e <st_update_plan_block_parameters+0x22>
        prep.recalculate.velocity_profile = On;
 801f732:	4b08      	ldr	r3, [pc, #32]	@ (801f754 <st_update_plan_block_parameters+0x28>)
 801f734:	781a      	ldrb	r2, [r3, #0]
 801f736:	f042 0201 	orr.w	r2, r2, #1
 801f73a:	701a      	strb	r2, [r3, #0]
        pl_block->entry_speed_sqr = prep.current_speed * prep.current_speed; // Update entry speed.
 801f73c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801f740:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f744:	edc1 7a07 	vstr	s15, [r1, #28]
        pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 801f748:	4b01      	ldr	r3, [pc, #4]	@ (801f750 <st_update_plan_block_parameters+0x24>)
 801f74a:	2200      	movs	r2, #0
 801f74c:	601a      	str	r2, [r3, #0]
    }
}
 801f74e:	4770      	bx	lr
 801f750:	20001f00 	.word	0x20001f00
 801f754:	20001e74 	.word	0x20001e74

0801f758 <st_parking_setup_buffer>:

// Changes the run state of the step segment buffer to execute the special parking motion.
void st_parking_setup_buffer (void)
{
 801f758:	b530      	push	{r4, r5, lr}
    // Store step execution data of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block && !prep.recalculate.parking) {
 801f75a:	4b1b      	ldr	r3, [pc, #108]	@ (801f7c8 <st_parking_setup_buffer+0x70>)
 801f75c:	781b      	ldrb	r3, [r3, #0]
 801f75e:	f003 0306 	and.w	r3, r3, #6
 801f762:	2b02      	cmp	r3, #2
 801f764:	d00c      	beq.n	801f780 <st_parking_setup_buffer+0x28>
        prep.last_steps_remaining = prep.steps_remaining;
        prep.last_dt_remainder = prep.dt_remainder;
        prep.last_steps_per_mm = prep.steps_per_mm;
    }
    // Set flags to execute a parking motion
    prep.recalculate.parking = On;
 801f766:	4b18      	ldr	r3, [pc, #96]	@ (801f7c8 <st_parking_setup_buffer+0x70>)
 801f768:	781a      	ldrb	r2, [r3, #0]
 801f76a:	f042 0204 	orr.w	r2, r2, #4
 801f76e:	701a      	strb	r2, [r3, #0]
    prep.recalculate.velocity_profile = Off;
 801f770:	b2d2      	uxtb	r2, r2
 801f772:	f36f 0200 	bfc	r2, #0, #1
 801f776:	701a      	strb	r2, [r3, #0]
    pl_block = NULL; // Always reset parking motion to reload new block.
 801f778:	4b14      	ldr	r3, [pc, #80]	@ (801f7cc <st_parking_setup_buffer+0x74>)
 801f77a:	2200      	movs	r2, #0
 801f77c:	601a      	str	r2, [r3, #0]
}
 801f77e:	bd30      	pop	{r4, r5, pc}
        prep.last_st_block = st_prep_block;
 801f780:	4b13      	ldr	r3, [pc, #76]	@ (801f7d0 <st_parking_setup_buffer+0x78>)
 801f782:	681d      	ldr	r5, [r3, #0]
 801f784:	4b10      	ldr	r3, [pc, #64]	@ (801f7c8 <st_parking_setup_buffer+0x70>)
 801f786:	615d      	str	r5, [r3, #20]
        memcpy(&st_hold_block, st_prep_block, sizeof(st_block_t));
 801f788:	46ac      	mov	ip, r5
 801f78a:	4c12      	ldr	r4, [pc, #72]	@ (801f7d4 <st_parking_setup_buffer+0x7c>)
 801f78c:	3530      	adds	r5, #48	@ 0x30
 801f78e:	46a6      	mov	lr, r4
 801f790:	f8dc 0000 	ldr.w	r0, [ip]
 801f794:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f798:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801f79c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801f7a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801f7a4:	f10c 0c10 	add.w	ip, ip, #16
 801f7a8:	4674      	mov	r4, lr
 801f7aa:	45ac      	cmp	ip, r5
 801f7ac:	d1ef      	bne.n	801f78e <st_parking_setup_buffer+0x36>
 801f7ae:	f8dc 0000 	ldr.w	r0, [ip]
 801f7b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f7b6:	c403      	stmia	r4!, {r0, r1}
        prep.last_steps_remaining = prep.steps_remaining;
 801f7b8:	4b03      	ldr	r3, [pc, #12]	@ (801f7c8 <st_parking_setup_buffer+0x70>)
 801f7ba:	689a      	ldr	r2, [r3, #8]
 801f7bc:	619a      	str	r2, [r3, #24]
        prep.last_dt_remainder = prep.dt_remainder;
 801f7be:	685a      	ldr	r2, [r3, #4]
 801f7c0:	621a      	str	r2, [r3, #32]
        prep.last_steps_per_mm = prep.steps_per_mm;
 801f7c2:	68da      	ldr	r2, [r3, #12]
 801f7c4:	61da      	str	r2, [r3, #28]
 801f7c6:	e7ce      	b.n	801f766 <st_parking_setup_buffer+0xe>
 801f7c8:	20001e74 	.word	0x20001e74
 801f7cc:	20001f00 	.word	0x20001f00
 801f7d0:	20001efc 	.word	0x20001efc
 801f7d4:	20001ec4 	.word	0x20001ec4

0801f7d8 <st_parking_restore_buffer>:

// Restores the step segment buffer to the normal run state after a parking motion.
void st_parking_restore_buffer (void)
{
    // Restore step execution data and flags of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block) {
 801f7d8:	4b1e      	ldr	r3, [pc, #120]	@ (801f854 <st_parking_restore_buffer+0x7c>)
 801f7da:	781b      	ldrb	r3, [r3, #0]
 801f7dc:	f013 0f02 	tst.w	r3, #2
 801f7e0:	d106      	bne.n	801f7f0 <st_parking_restore_buffer+0x18>
        prep.steps_per_mm = prep.last_steps_per_mm;
        prep.recalculate.flags = 0;
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
    } else
        prep.recalculate.flags = 0;
 801f7e2:	4b1c      	ldr	r3, [pc, #112]	@ (801f854 <st_parking_restore_buffer+0x7c>)
 801f7e4:	2200      	movs	r2, #0
 801f7e6:	701a      	strb	r2, [r3, #0]

    pl_block = NULL; // Set to reload next block.
 801f7e8:	4b1b      	ldr	r3, [pc, #108]	@ (801f858 <st_parking_restore_buffer+0x80>)
 801f7ea:	2200      	movs	r2, #0
 801f7ec:	601a      	str	r2, [r3, #0]
 801f7ee:	4770      	bx	lr
{
 801f7f0:	b530      	push	{r4, r5, lr}
        memcpy(prep.last_st_block, &st_hold_block, sizeof(st_block_t));
 801f7f2:	4d1a      	ldr	r5, [pc, #104]	@ (801f85c <st_parking_restore_buffer+0x84>)
 801f7f4:	4b17      	ldr	r3, [pc, #92]	@ (801f854 <st_parking_restore_buffer+0x7c>)
 801f7f6:	695c      	ldr	r4, [r3, #20]
 801f7f8:	f105 0e30 	add.w	lr, r5, #48	@ 0x30
 801f7fc:	46ac      	mov	ip, r5
 801f7fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801f802:	6020      	str	r0, [r4, #0]
 801f804:	6061      	str	r1, [r4, #4]
 801f806:	60a2      	str	r2, [r4, #8]
 801f808:	60e3      	str	r3, [r4, #12]
 801f80a:	4665      	mov	r5, ip
 801f80c:	3410      	adds	r4, #16
 801f80e:	45f4      	cmp	ip, lr
 801f810:	d1f4      	bne.n	801f7fc <st_parking_restore_buffer+0x24>
 801f812:	cd03      	ldmia	r5!, {r0, r1}
 801f814:	6020      	str	r0, [r4, #0]
 801f816:	6061      	str	r1, [r4, #4]
        st_prep_block = prep.last_st_block;
 801f818:	4b0e      	ldr	r3, [pc, #56]	@ (801f854 <st_parking_restore_buffer+0x7c>)
 801f81a:	6959      	ldr	r1, [r3, #20]
 801f81c:	4a10      	ldr	r2, [pc, #64]	@ (801f860 <st_parking_restore_buffer+0x88>)
 801f81e:	6011      	str	r1, [r2, #0]
        prep.steps_remaining = prep.last_steps_remaining;
 801f820:	699a      	ldr	r2, [r3, #24]
 801f822:	609a      	str	r2, [r3, #8]
        prep.dt_remainder = prep.last_dt_remainder;
 801f824:	6a1a      	ldr	r2, [r3, #32]
 801f826:	605a      	str	r2, [r3, #4]
        prep.steps_per_mm = prep.last_steps_per_mm;
 801f828:	edd3 7a07 	vldr	s15, [r3, #28]
 801f82c:	edc3 7a03 	vstr	s15, [r3, #12]
        prep.recalculate.flags = 0;
 801f830:	2200      	movs	r2, #0
 801f832:	701a      	strb	r2, [r3, #0]
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
 801f834:	2201      	movs	r2, #1
 801f836:	701a      	strb	r2, [r3, #0]
 801f838:	b2d2      	uxtb	r2, r2
 801f83a:	f042 0202 	orr.w	r2, r2, #2
 801f83e:	701a      	strb	r2, [r3, #0]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
 801f840:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801f844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f848:	ed83 7a04 	vstr	s14, [r3, #16]
    pl_block = NULL; // Set to reload next block.
 801f84c:	4b02      	ldr	r3, [pc, #8]	@ (801f858 <st_parking_restore_buffer+0x80>)
 801f84e:	2200      	movs	r2, #0
 801f850:	601a      	str	r2, [r3, #0]
}
 801f852:	bd30      	pop	{r4, r5, pc}
 801f854:	20001e74 	.word	0x20001e74
 801f858:	20001f00 	.word	0x20001f00
 801f85c:	20001ec4 	.word	0x20001ec4
 801f860:	20001efc 	.word	0x20001efc

0801f864 <st_prep_buffer>:
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer (void)
{
    // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
    if (sys.step_control.end_motion)
 801f864:	4bba      	ldr	r3, [pc, #744]	@ (801fb50 <st_prep_buffer+0x2ec>)
 801f866:	7e1b      	ldrb	r3, [r3, #24]
 801f868:	f013 0f01 	tst.w	r3, #1
 801f86c:	d103      	bne.n	801f876 <st_prep_buffer+0x12>
{
 801f86e:	b570      	push	{r4, r5, r6, lr}
 801f870:	ed2d 8b04 	vpush	{d8-d9}
 801f874:	e39a      	b.n	801ffac <st_prep_buffer+0x748>
 801f876:	4770      	bx	lr
        // Determine if we need to load a new planner block or if the block needs to be recomputed.
        if (pl_block == NULL) {

            // Query planner for a queued block

            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 801f878:	4bb5      	ldr	r3, [pc, #724]	@ (801fb50 <st_prep_buffer+0x2ec>)
 801f87a:	7e1b      	ldrb	r3, [r3, #24]
 801f87c:	f013 0f04 	tst.w	r3, #4
 801f880:	d01b      	beq.n	801f8ba <st_prep_buffer+0x56>
 801f882:	f7f6 fca7 	bl	80161d4 <plan_get_system_motion_block>
 801f886:	4604      	mov	r4, r0
 801f888:	4bb2      	ldr	r3, [pc, #712]	@ (801fb54 <st_prep_buffer+0x2f0>)
 801f88a:	601c      	str	r4, [r3, #0]

            if (pl_block == NULL)
 801f88c:	2c00      	cmp	r4, #0
 801f88e:	f000 83d4 	beq.w	802003a <st_prep_buffer+0x7d6>
                return; // No planner blocks. Exit.

            // Check if we need to only recompute the velocity profile or load a new block.
            if (prep.recalculate.velocity_profile) {
 801f892:	4bb1      	ldr	r3, [pc, #708]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f894:	7819      	ldrb	r1, [r3, #0]
 801f896:	f011 0f01 	tst.w	r1, #1
 801f89a:	d060      	beq.n	801f95e <st_prep_buffer+0xfa>
                if(settings.parking.flags.enabled) {
 801f89c:	4baf      	ldr	r3, [pc, #700]	@ (801fb5c <st_prep_buffer+0x2f8>)
 801f89e:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 801f8a2:	f013 0f01 	tst.w	r3, #1
 801f8a6:	d010      	beq.n	801f8ca <st_prep_buffer+0x66>
                    if (prep.recalculate.parking)
 801f8a8:	f011 0f04 	tst.w	r1, #4
 801f8ac:	d009      	beq.n	801f8c2 <st_prep_buffer+0x5e>
                        prep.recalculate.velocity_profile = Off;
 801f8ae:	4baa      	ldr	r3, [pc, #680]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f8b0:	781a      	ldrb	r2, [r3, #0]
 801f8b2:	f36f 0200 	bfc	r2, #0, #1
 801f8b6:	701a      	strb	r2, [r3, #0]
 801f8b8:	e00a      	b.n	801f8d0 <st_prep_buffer+0x6c>
            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 801f8ba:	f7f6 fc91 	bl	80161e0 <plan_get_current_block>
 801f8be:	4604      	mov	r4, r0
 801f8c0:	e7e2      	b.n	801f888 <st_prep_buffer+0x24>
                    else
                        prep.recalculate.flags = 0;
 801f8c2:	4ba5      	ldr	r3, [pc, #660]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f8c4:	2200      	movs	r2, #0
 801f8c6:	701a      	strb	r2, [r3, #0]
 801f8c8:	e002      	b.n	801f8d0 <st_prep_buffer+0x6c>
                } else
                    prep.recalculate.flags = 0;
 801f8ca:	4ba3      	ldr	r3, [pc, #652]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f8cc:	2200      	movs	r2, #0
 801f8ce:	701a      	strb	r2, [r3, #0]
             Compute the velocity profile of a new planner block based on its entry and exit
             speeds, or recompute the profile of a partially-completed planner block if the
             planner has updated it. For a commanded forced-deceleration, such as from a feed
             hold, override the planner velocities and decelerate to the target exit speed.
            */
            prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 801f8d0:	4ba1      	ldr	r3, [pc, #644]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f8d2:	2200      	movs	r2, #0
 801f8d4:	629a      	str	r2, [r3, #40]	@ 0x28
            float inv_2_accel = 0.5f / pl_block->acceleration;
 801f8d6:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801f8da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801f8de:	ee87 8a27 	vdiv.f32	s16, s14, s15

            if (sys.step_control.execute_hold) { // [Forced Deceleration to Zero Velocity]
 801f8e2:	4b9b      	ldr	r3, [pc, #620]	@ (801fb50 <st_prep_buffer+0x2ec>)
 801f8e4:	7e1b      	ldrb	r3, [r3, #24]
 801f8e6:	f013 0f02 	tst.w	r3, #2
 801f8ea:	f000 80c6 	beq.w	801fa7a <st_prep_buffer+0x216>
                // Compute velocity profile parameters for a feed hold in-progress. This profile overrides
                // the planner block profile, enforcing a deceleration to zero speed.
                prep.ramp_type = Ramp_Decel;
 801f8ee:	4b9a      	ldr	r3, [pc, #616]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f8f0:	2202      	movs	r2, #2
 801f8f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                // Compute decelerate distance relative to end of block.
                float decel_dist = pl_block->millimeters - inv_2_accel * pl_block->entry_speed_sqr;
 801f8f6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801f8fa:	ed94 0a07 	vldr	s0, [r4, #28]
 801f8fe:	ee60 7a08 	vmul.f32	s15, s0, s16
 801f902:	ee77 7a67 	vsub.f32	s15, s14, s15
                if(decel_dist < -0.0001f) {
 801f906:	eddf 6a96 	vldr	s13, [pc, #600]	@ 801fb60 <st_prep_buffer+0x2fc>
 801f90a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f912:	f100 80a4 	bmi.w	801fa5e <st_prep_buffer+0x1fa>
                    // Deceleration through entire planner block. End of feed hold is not in this block.
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
                } else {
                    prep.mm_complete = decel_dist < 0.0001f ? 0.0f : decel_dist; // End of feed hold.
 801f916:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 801fb64 <st_prep_buffer+0x300>
 801f91a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f922:	d501      	bpl.n	801f928 <st_prep_buffer+0xc4>
 801f924:	eddf 7a90 	vldr	s15, [pc, #576]	@ 801fb68 <st_prep_buffer+0x304>
 801f928:	4b8b      	ldr	r3, [pc, #556]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f92a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
                    prep.exit_speed = 0.0f;
 801f92e:	2200      	movs	r2, #0
 801f930:	635a      	str	r2, [r3, #52]	@ 0x34
                    // prep.decelerate_after = 0.0f;
                    prep.maximum_speed = prep.exit_speed;
                }
            }

            if(state_get() != STATE_HOMING)
 801f932:	f7fe ff89 	bl	801e848 <state_get>
 801f936:	2804      	cmp	r0, #4
 801f938:	d00d      	beq.n	801f956 <st_prep_buffer+0xf2>
                sys.step_control.update_spindle_rpm |= pl_block->spindle.hal->cap.laser; // Force update whenever updating block in laser mode.
 801f93a:	4885      	ldr	r0, [pc, #532]	@ (801fb50 <st_prep_buffer+0x2ec>)
 801f93c:	7e03      	ldrb	r3, [r0, #24]
 801f93e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 801f942:	4984      	ldr	r1, [pc, #528]	@ (801fb54 <st_prep_buffer+0x2f0>)
 801f944:	6809      	ldr	r1, [r1, #0]
 801f946:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 801f948:	7a89      	ldrb	r1, [r1, #10]
 801f94a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 801f94e:	430a      	orrs	r2, r1
 801f950:	f362 03c3 	bfi	r3, r2, #3, #1
 801f954:	7603      	strb	r3, [r0, #24]

            probe_asserted = false;
 801f956:	4b85      	ldr	r3, [pc, #532]	@ (801fb6c <st_prep_buffer+0x308>)
 801f958:	2200      	movs	r2, #0
 801f95a:	701a      	strb	r2, [r3, #0]
 801f95c:	e331      	b.n	801ffc2 <st_prep_buffer+0x75e>
                st_prep_block = st_prep_block->next;
 801f95e:	4b84      	ldr	r3, [pc, #528]	@ (801fb70 <st_prep_buffer+0x30c>)
 801f960:	681a      	ldr	r2, [r3, #0]
 801f962:	6855      	ldr	r5, [r2, #4]
 801f964:	601d      	str	r5, [r3, #0]
                uint_fast8_t idx = N_AXIS;
 801f966:	2303      	movs	r3, #3
                    idx--;
 801f968:	3b01      	subs	r3, #1
                    st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 801f96a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 801f96e:	00d2      	lsls	r2, r2, #3
 801f970:	1c98      	adds	r0, r3, #2
 801f972:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
                } while(idx);
 801f976:	2b00      	cmp	r3, #0
 801f978:	d1f6      	bne.n	801f968 <st_prep_buffer+0x104>
                st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 801f97a:	68e3      	ldr	r3, [r4, #12]
 801f97c:	00db      	lsls	r3, r3, #3
 801f97e:	616b      	str	r3, [r5, #20]
                st_prep_block->direction_bits = pl_block->direction_bits;
 801f980:	7c23      	ldrb	r3, [r4, #16]
 801f982:	762b      	strb	r3, [r5, #24]
                st_prep_block->programmed_rate = pl_block->programmed_rate;
 801f984:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f986:	626b      	str	r3, [r5, #36]	@ 0x24
                st_prep_block->millimeters = pl_block->millimeters;
 801f988:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801f98c:	ed85 7a08 	vstr	s14, [r5, #32]
                st_prep_block->steps_per_mm = (float)pl_block->step_event_count / pl_block->millimeters;
 801f990:	edd4 7a03 	vldr	s15, [r4, #12]
 801f994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f998:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801f99c:	edc5 6a07 	vstr	s13, [r5, #28]
                st_prep_block->spindle = pl_block->spindle.hal;
 801f9a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801f9a2:	636b      	str	r3, [r5, #52]	@ 0x34
                st_prep_block->output_commands = pl_block->output_commands;
 801f9a4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801f9a6:	62eb      	str	r3, [r5, #44]	@ 0x2c
                st_prep_block->overrides = pl_block->overrides;
 801f9a8:	7ca3      	ldrb	r3, [r4, #18]
 801f9aa:	766b      	strb	r3, [r5, #25]
                st_prep_block->offset_id = pl_block->offset_id;
 801f9ac:	f994 3011 	ldrsb.w	r3, [r4, #17]
 801f9b0:	f885 3032 	strb.w	r3, [r5, #50]	@ 0x32
                st_prep_block->backlash_motion = pl_block->condition.backlash_motion;
 801f9b4:	7d23      	ldrb	r3, [r4, #20]
 801f9b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f9ba:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
                st_prep_block->message = pl_block->message;
 801f9be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801f9c0:	62ab      	str	r3, [r5, #40]	@ 0x28
                pl_block->message = NULL;
 801f9c2:	2300      	movs	r3, #0
 801f9c4:	64a3      	str	r3, [r4, #72]	@ 0x48
                prep.steps_per_mm = st_prep_block->steps_per_mm;
 801f9c6:	edd5 7a07 	vldr	s15, [r5, #28]
 801f9ca:	4b63      	ldr	r3, [pc, #396]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f9cc:	edc3 7a03 	vstr	s15, [r3, #12]
                prep.steps_remaining = pl_block->step_event_count;
 801f9d0:	68e2      	ldr	r2, [r4, #12]
 801f9d2:	609a      	str	r2, [r3, #8]
                prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm;
 801f9d4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801f9d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f9dc:	ed83 7a04 	vstr	s14, [r3, #16]
                prep.dt_remainder = prep.target_position = 0.0f; // Reset for new segment block
 801f9e0:	2200      	movs	r2, #0
 801f9e2:	641a      	str	r2, [r3, #64]	@ 0x40
 801f9e4:	605a      	str	r2, [r3, #4]
                if (sys.step_control.execute_hold || prep.recalculate.decel_override) {
 801f9e6:	4b5a      	ldr	r3, [pc, #360]	@ (801fb50 <st_prep_buffer+0x2ec>)
 801f9e8:	7e1b      	ldrb	r3, [r3, #24]
 801f9ea:	f013 0f02 	tst.w	r3, #2
 801f9ee:	d102      	bne.n	801f9f6 <st_prep_buffer+0x192>
 801f9f0:	f011 0f08 	tst.w	r1, #8
 801f9f4:	d021      	beq.n	801fa3a <st_prep_buffer+0x1d6>
                    prep.current_speed = prep.exit_speed;
 801f9f6:	4b58      	ldr	r3, [pc, #352]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801f9f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801f9fc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
                    pl_block->entry_speed_sqr = prep.exit_speed * prep.exit_speed;
 801fa00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801fa04:	edc4 7a07 	vstr	s15, [r4, #28]
                    prep.recalculate.decel_override = Off;
 801fa08:	781a      	ldrb	r2, [r3, #0]
 801fa0a:	f36f 02c3 	bfc	r2, #3, #1
 801fa0e:	701a      	strb	r2, [r3, #0]
                if ((st_prep_block->dynamic_rpm = pl_block->condition.is_rpm_rate_adjusted)) {
 801fa10:	7d23      	ldrb	r3, [r4, #20]
 801fa12:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 801fa16:	f885 2031 	strb.w	r2, [r5, #49]	@ 0x31
 801fa1a:	09db      	lsrs	r3, r3, #7
 801fa1c:	d018      	beq.n	801fa50 <st_prep_buffer+0x1ec>
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 801fa1e:	7d63      	ldrb	r3, [r4, #21]
 801fa20:	f013 0f01 	tst.w	r3, #1
 801fa24:	d111      	bne.n	801fa4a <st_prep_buffer+0x1e6>
 801fa26:	ed94 7a0d 	vldr	s14, [r4, #52]	@ 0x34
 801fa2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fa2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fa32:	4b49      	ldr	r3, [pc, #292]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801fa34:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 801fa38:	e74a      	b.n	801f8d0 <st_prep_buffer+0x6c>
                    prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 801fa3a:	ed94 0a07 	vldr	s0, [r4, #28]
 801fa3e:	f007 fb57 	bl	80270f0 <sqrtf>
 801fa42:	4b45      	ldr	r3, [pc, #276]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801fa44:	ed83 0a0b 	vstr	s0, [r3, #44]	@ 0x2c
 801fa48:	e7e2      	b.n	801fa10 <st_prep_buffer+0x1ac>
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 801fa4a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801fa4e:	e7f0      	b.n	801fa32 <st_prep_buffer+0x1ce>
                    st_prep_block->dynamic_rpm = !!pl_block->spindle.css;
 801fa50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801fa52:	3b00      	subs	r3, #0
 801fa54:	bf18      	it	ne
 801fa56:	2301      	movne	r3, #1
 801fa58:	f885 3031 	strb.w	r3, [r5, #49]	@ 0x31
 801fa5c:	e738      	b.n	801f8d0 <st_prep_buffer+0x6c>
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 801fa5e:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801fa62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801fa66:	ee27 7a27 	vmul.f32	s14, s14, s15
 801fa6a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801fa6e:	f007 fb3f 	bl	80270f0 <sqrtf>
 801fa72:	4b39      	ldr	r3, [pc, #228]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801fa74:	ed83 0a0d 	vstr	s0, [r3, #52]	@ 0x34
 801fa78:	e75b      	b.n	801f932 <st_prep_buffer+0xce>
                prep.ramp_type = Ramp_Accel; // Initialize as acceleration ramp.
 801fa7a:	4a37      	ldr	r2, [pc, #220]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801fa7c:	2100      	movs	r1, #0
 801fa7e:	f882 1024 	strb.w	r1, [r2, #36]	@ 0x24
                prep.accelerate_until = pl_block->millimeters;
 801fa82:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801fa84:	6391      	str	r1, [r2, #56]	@ 0x38
                if (sys.step_control.execute_sys_motion)
 801fa86:	f013 0f04 	tst.w	r3, #4
 801fa8a:	d03e      	beq.n	801fb0a <st_prep_buffer+0x2a6>
                    prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 801fa8c:	eddf 8a36 	vldr	s17, [pc, #216]	@ 801fb68 <st_prep_buffer+0x304>
 801fa90:	edc2 8a0d 	vstr	s17, [r2, #52]	@ 0x34
                float nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 801fa94:	4c2f      	ldr	r4, [pc, #188]	@ (801fb54 <st_prep_buffer+0x2f0>)
 801fa96:	6820      	ldr	r0, [r4, #0]
 801fa98:	f7f6 fbd2 	bl	8016240 <plan_compute_profile_nominal_speed>
                float nominal_speed_sqr = nominal_speed * nominal_speed;
 801fa9c:	ee60 6a00 	vmul.f32	s13, s0, s0
                float intersect_distance = 0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 801faa0:	6823      	ldr	r3, [r4, #0]
 801faa2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801faa6:	ed93 7a07 	vldr	s14, [r3, #28]
 801faaa:	ee37 7a68 	vsub.f32	s14, s14, s17
 801faae:	ee27 7a08 	vmul.f32	s14, s14, s16
 801fab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fab6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801faba:	ee67 7a87 	vmul.f32	s15, s15, s14
                prep.target_feed = nominal_speed;
 801fabe:	4a26      	ldr	r2, [pc, #152]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801fac0:	ed82 0a11 	vstr	s0, [r2, #68]	@ 0x44
                if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 801fac4:	ed93 7a07 	vldr	s14, [r3, #28]
 801fac8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801facc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fad0:	dd50      	ble.n	801fb74 <st_prep_buffer+0x310>
                    prep.accelerate_until = pl_block->millimeters - inv_2_accel * (pl_block->entry_speed_sqr - nominal_speed_sqr);
 801fad2:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 801fad6:	ee77 7a66 	vsub.f32	s15, s14, s13
 801fada:	ee67 7a88 	vmul.f32	s15, s15, s16
 801fade:	ee76 7a67 	vsub.f32	s15, s12, s15
 801fae2:	edc2 7a0e 	vstr	s15, [r2, #56]	@ 0x38
                    if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 801fae6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801faea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801faee:	d916      	bls.n	801fb1e <st_prep_buffer+0x2ba>
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 801faf0:	ee76 7ae8 	vsub.f32	s15, s13, s17
 801faf4:	ee67 7a88 	vmul.f32	s15, s15, s16
 801faf8:	4b17      	ldr	r3, [pc, #92]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801fafa:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                        prep.maximum_speed = nominal_speed;
 801fafe:	ed83 0a0c 	vstr	s0, [r3, #48]	@ 0x30
                        prep.ramp_type = Ramp_DecelOverride;
 801fb02:	2203      	movs	r2, #3
 801fb04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801fb08:	e713      	b.n	801f932 <st_prep_buffer+0xce>
                    exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 801fb0a:	f7f6 fb77 	bl	80161fc <plan_get_exec_block_exit_speed_sqr>
 801fb0e:	eef0 8a40 	vmov.f32	s17, s0
                    prep.exit_speed = sqrtf(exit_speed_sqr);
 801fb12:	f007 faed 	bl	80270f0 <sqrtf>
 801fb16:	4b10      	ldr	r3, [pc, #64]	@ (801fb58 <st_prep_buffer+0x2f4>)
 801fb18:	ed83 0a0d 	vstr	s0, [r3, #52]	@ 0x34
 801fb1c:	e7ba      	b.n	801fa94 <st_prep_buffer+0x230>
                        prep.ramp_type = Ramp_Decel;
 801fb1e:	4614      	mov	r4, r2
 801fb20:	2202      	movs	r2, #2
 801fb22:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
                        prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 801fb26:	ed93 0a07 	vldr	s0, [r3, #28]
 801fb2a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801fb2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801fb32:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801fb36:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fb3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801fb3e:	f007 fad7 	bl	80270f0 <sqrtf>
 801fb42:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
                        prep.recalculate.decel_override = On; // Flag to load next block as deceleration override.
 801fb46:	7823      	ldrb	r3, [r4, #0]
 801fb48:	f043 0308 	orr.w	r3, r3, #8
 801fb4c:	7023      	strb	r3, [r4, #0]
 801fb4e:	e6f0      	b.n	801f932 <st_prep_buffer+0xce>
 801fb50:	200014a0 	.word	0x200014a0
 801fb54:	20001f00 	.word	0x20001f00
 801fb58:	20001e74 	.word	0x20001e74
 801fb5c:	20001bd8 	.word	0x20001bd8
 801fb60:	b8d1b717 	.word	0xb8d1b717
 801fb64:	38d1b717 	.word	0x38d1b717
 801fb68:	00000000 	.word	0x00000000
 801fb6c:	20001f14 	.word	0x20001f14
 801fb70:	20001efc 	.word	0x20001efc
                } else if (intersect_distance > 0.0f) {
 801fb74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb7c:	dd43      	ble.n	801fc06 <st_prep_buffer+0x3a2>
                    if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 801fb7e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801fb82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb8a:	dd37      	ble.n	801fbfc <st_prep_buffer+0x398>
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr);
 801fb8c:	ee36 7ae8 	vsub.f32	s14, s13, s17
 801fb90:	ee27 7a08 	vmul.f32	s14, s14, s16
 801fb94:	4ab6      	ldr	r2, [pc, #728]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fb96:	ed82 7a0f 	vstr	s14, [r2, #60]	@ 0x3c
                        if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 801fb9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fba2:	d519      	bpl.n	801fbd8 <st_prep_buffer+0x374>
                            prep.maximum_speed = nominal_speed;
 801fba4:	ed82 0a0c 	vstr	s0, [r2, #48]	@ 0x30
                            if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 801fba8:	edd3 7a07 	vldr	s15, [r3, #28]
 801fbac:	eef4 7a66 	vcmp.f32	s15, s13
 801fbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbb4:	d104      	bne.n	801fbc0 <st_prep_buffer+0x35c>
                                prep.ramp_type = Ramp_Cruise;
 801fbb6:	4613      	mov	r3, r2
 801fbb8:	2201      	movs	r2, #1
 801fbba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801fbbe:	e6b8      	b.n	801f932 <st_prep_buffer+0xce>
                                prep.accelerate_until -= inv_2_accel * (nominal_speed_sqr - pl_block->entry_speed_sqr);
 801fbc0:	4bab      	ldr	r3, [pc, #684]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fbc2:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801fbc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801fbca:	ee67 7a88 	vmul.f32	s15, s15, s16
 801fbce:	ee77 7a67 	vsub.f32	s15, s14, s15
 801fbd2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 801fbd6:	e6ac      	b.n	801f932 <st_prep_buffer+0xce>
                            prep.accelerate_until = prep.decelerate_after = intersect_distance;
 801fbd8:	4ca5      	ldr	r4, [pc, #660]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fbda:	edc4 7a0f 	vstr	s15, [r4, #60]	@ 0x3c
 801fbde:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
                            prep.maximum_speed = sqrtf(2.0f * pl_block->acceleration * intersect_distance + exit_speed_sqr);
 801fbe2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801fbe6:	ee37 7a07 	vadd.f32	s14, s14, s14
 801fbea:	ee27 0a27 	vmul.f32	s0, s14, s15
 801fbee:	ee30 0a28 	vadd.f32	s0, s0, s17
 801fbf2:	f007 fa7d 	bl	80270f0 <sqrtf>
 801fbf6:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
 801fbfa:	e69a      	b.n	801f932 <st_prep_buffer+0xce>
                        prep.ramp_type = Ramp_Decel;
 801fbfc:	4b9c      	ldr	r3, [pc, #624]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fbfe:	2202      	movs	r2, #2
 801fc00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801fc04:	e695      	b.n	801f932 <st_prep_buffer+0xce>
                    prep.accelerate_until = 0.0f;
 801fc06:	4b9a      	ldr	r3, [pc, #616]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fc08:	2200      	movs	r2, #0
 801fc0a:	639a      	str	r2, [r3, #56]	@ 0x38
                    prep.maximum_speed = prep.exit_speed;
 801fc0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fc0e:	631a      	str	r2, [r3, #48]	@ 0x30
 801fc10:	e68f      	b.n	801f932 <st_prep_buffer+0xce>
        float speed_var; // Speed worker variable
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.

        if (minimum_mm < 0.0f)
            minimum_mm = 0.0f;
 801fc12:	ed9f 5a9a 	vldr	s10, [pc, #616]	@ 801fe7c <st_prep_buffer+0x618>
 801fc16:	e1ef      	b.n	801fff8 <st_prep_buffer+0x794>
        do {

            switch (prep.ramp_type) {

                case Ramp_DecelOverride:
                    speed_var = pl_block->acceleration * time_var;
 801fc18:	ed92 6a09 	vldr	s12, [r2, #36]	@ 0x24
 801fc1c:	ee26 6a27 	vmul.f32	s12, s12, s15
                    if ((prep.current_speed - prep.maximum_speed) <= speed_var) {
 801fc20:	4b93      	ldr	r3, [pc, #588]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fc22:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801fc26:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 801fc2a:	ee76 4ae5 	vsub.f32	s9, s13, s11
 801fc2e:	eef4 4ac6 	vcmpe.f32	s9, s12
 801fc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc36:	d811      	bhi.n	801fc5c <st_prep_buffer+0x3f8>
                        // Cruise or cruise-deceleration types only for deceleration override.
                        mm_remaining = prep.accelerate_until;
 801fc38:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 801fc3c:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 801fc40:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801fc44:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801fc48:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801fc4c:	eec6 7a26 	vdiv.f32	s15, s12, s13
                        prep.ramp_type = Ramp_Cruise;
 801fc50:	2001      	movs	r0, #1
 801fc52:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        prep.current_speed = prep.maximum_speed;
 801fc56:	edc3 5a0b 	vstr	s11, [r3, #44]	@ 0x2c
 801fc5a:	e074      	b.n	801fd46 <st_prep_buffer+0x4e2>
                    } else {// Mid-deceleration override ramp.
                        mm_remaining -= time_var * (prep.current_speed - 0.5f * speed_var);
 801fc5c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801fc60:	ee66 5a25 	vmul.f32	s11, s12, s11
 801fc64:	ee76 5ae5 	vsub.f32	s11, s13, s11
 801fc68:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801fc6c:	ee38 8a65 	vsub.f32	s16, s16, s11
                        prep.current_speed -= speed_var;
 801fc70:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801fc74:	4b7e      	ldr	r3, [pc, #504]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fc76:	edc3 6a0b 	vstr	s13, [r3, #44]	@ 0x2c
 801fc7a:	e064      	b.n	801fd46 <st_prep_buffer+0x4e2>
                    }
                    break;

                case Ramp_Accel:
                    // NOTE: Acceleration ramp only computes during first do-while loop.
                    speed_var = pl_block->acceleration * time_var;
 801fc7c:	edd2 5a09 	vldr	s11, [r2, #36]	@ 0x24
 801fc80:	ee65 5aa7 	vmul.f32	s11, s11, s15
                    mm_remaining -= time_var * (prep.current_speed + 0.5f * speed_var);
 801fc84:	4b7a      	ldr	r3, [pc, #488]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fc86:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 801fc8a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801fc8e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801fc92:	ee76 6a26 	vadd.f32	s13, s12, s13
 801fc96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801fc9a:	ee38 8a66 	vsub.f32	s16, s16, s13
                    if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 801fc9e:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801fca2:	eef4 6ac8 	vcmpe.f32	s13, s16
 801fca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcaa:	dd1d      	ble.n	801fce8 <st_prep_buffer+0x484>
                        // Acceleration-cruise, acceleration-deceleration ramp junction, or end of block.
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 801fcac:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 801fcb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fcb4:	ee77 5aa7 	vadd.f32	s11, s15, s15
 801fcb8:	edd3 4a0c 	vldr	s9, [r3, #48]	@ 0x30
 801fcbc:	ee36 6a24 	vadd.f32	s12, s12, s9
 801fcc0:	eec5 7a86 	vdiv.f32	s15, s11, s12
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 801fcc4:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 801fcc8:	eef4 6a46 	vcmp.f32	s13, s12
 801fccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcd0:	d108      	bne.n	801fce4 <st_prep_buffer+0x480>
 801fcd2:	2002      	movs	r0, #2
 801fcd4:	4b66      	ldr	r3, [pc, #408]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fcd6:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        prep.current_speed = prep.maximum_speed;
 801fcda:	edc3 4a0b 	vstr	s9, [r3, #44]	@ 0x2c
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 801fcde:	eeb0 8a66 	vmov.f32	s16, s13
 801fce2:	e030      	b.n	801fd46 <st_prep_buffer+0x4e2>
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 801fce4:	2001      	movs	r0, #1
 801fce6:	e7f5      	b.n	801fcd4 <st_prep_buffer+0x470>
                    } else // Acceleration only.
                        prep.current_speed += speed_var;
 801fce8:	ee36 6a25 	vadd.f32	s12, s12, s11
 801fcec:	4b60      	ldr	r3, [pc, #384]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fcee:	ed83 6a0b 	vstr	s12, [r3, #44]	@ 0x2c
 801fcf2:	e028      	b.n	801fd46 <st_prep_buffer+0x4e2>

                case Ramp_Cruise:
                    // NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
                    // NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
                    //   prevent this, simply enforce a minimum speed threshold in the planner.
                    mm_var = mm_remaining - prep.maximum_speed * time_var;
 801fcf4:	4b5e      	ldr	r3, [pc, #376]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fcf6:	edd3 5a0c 	vldr	s11, [r3, #48]	@ 0x30
 801fcfa:	ee65 6aa7 	vmul.f32	s13, s11, s15
 801fcfe:	ee78 6a66 	vsub.f32	s13, s16, s13
                    if (mm_var < prep.decelerate_after) { // End of cruise.
 801fd02:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 801fd06:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801fd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd0e:	dd5a      	ble.n	801fdc6 <st_prep_buffer+0x562>
                        // Cruise-deceleration junction or end of block.
                        time_var = (mm_remaining - prep.decelerate_after) / prep.maximum_speed;
 801fd10:	ee38 8a46 	vsub.f32	s16, s16, s12
 801fd14:	eec8 7a25 	vdiv.f32	s15, s16, s11
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
                        prep.ramp_type = Ramp_Decel;
 801fd18:	2002      	movs	r0, #2
 801fd1a:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 801fd1e:	eeb0 8a46 	vmov.f32	s16, s12
 801fd22:	e010      	b.n	801fd46 <st_prep_buffer+0x4e2>
                            prep.current_speed -= speed_var;
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
                        }
                    }
                    // Otherwise, at end of block or end of forced-deceleration.
                    time_var = 2.0f * (mm_remaining - prep.mm_complete) / (prep.current_speed + prep.exit_speed);
 801fd24:	4b52      	ldr	r3, [pc, #328]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fd26:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 801fd2a:	ee38 8a46 	vsub.f32	s16, s16, s12
 801fd2e:	ee38 8a08 	vadd.f32	s16, s16, s16
 801fd32:	edd3 5a0d 	vldr	s11, [r3, #52]	@ 0x34
 801fd36:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801fd3a:	eec8 7a26 	vdiv.f32	s15, s16, s13
                    mm_remaining = prep.mm_complete;
                    prep.current_speed = prep.exit_speed;
 801fd3e:	edc3 5a0b 	vstr	s11, [r3, #44]	@ 0x2c
                    mm_remaining = prep.mm_complete;
 801fd42:	eeb0 8a46 	vmov.f32	s16, s12
            }

            dt += time_var; // Add computed ramp time to total segment time.
 801fd46:	ee78 8aa7 	vadd.f32	s17, s17, s15

            if (dt < dt_max)
 801fd4a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801fd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd52:	dd3b      	ble.n	801fdcc <st_prep_buffer+0x568>
                time_var = dt_max - dt;// **Incomplete** At ramp junction.
 801fd54:	ee77 7a68 	vsub.f32	s15, s14, s17
                    time_var = dt_max - dt;
                } else
                    break; // **Complete** Exit loop. Segment execution time maxed.
            }

        } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 801fd58:	4b45      	ldr	r3, [pc, #276]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fd5a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801fd5e:	eef4 6ac8 	vcmpe.f32	s13, s16
 801fd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd66:	d53d      	bpl.n	801fde4 <st_prep_buffer+0x580>
            switch (prep.ramp_type) {
 801fd68:	4b41      	ldr	r3, [pc, #260]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fd6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801fd6e:	2b01      	cmp	r3, #1
 801fd70:	d0c0      	beq.n	801fcf4 <st_prep_buffer+0x490>
 801fd72:	2b03      	cmp	r3, #3
 801fd74:	f43f af50 	beq.w	801fc18 <st_prep_buffer+0x3b4>
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	f43f af7f 	beq.w	801fc7c <st_prep_buffer+0x418>
                    speed_var = pl_block->acceleration * time_var; // Used as delta speed (mm/min)
 801fd7e:	edd2 5a09 	vldr	s11, [r2, #36]	@ 0x24
 801fd82:	ee65 5aa7 	vmul.f32	s11, s11, s15
                    if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 801fd86:	4b3a      	ldr	r3, [pc, #232]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fd88:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801fd8c:	eef4 6ae5 	vcmpe.f32	s13, s11
 801fd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd94:	ddc6      	ble.n	801fd24 <st_prep_buffer+0x4c0>
                        mm_var = mm_remaining - time_var * (prep.current_speed - 0.5f * speed_var); // (mm)
 801fd96:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801fd9a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801fd9e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801fda2:	ee26 6a27 	vmul.f32	s12, s12, s15
 801fda6:	ee38 6a46 	vsub.f32	s12, s16, s12
                        if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 801fdaa:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 801fdae:	eef4 4ac6 	vcmpe.f32	s9, s12
 801fdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdb6:	d5b5      	bpl.n	801fd24 <st_prep_buffer+0x4c0>
                            prep.current_speed -= speed_var;
 801fdb8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801fdbc:	edc3 6a0b 	vstr	s13, [r3, #44]	@ 0x2c
                            mm_remaining = mm_var;
 801fdc0:	eeb0 8a46 	vmov.f32	s16, s12
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 801fdc4:	e7bf      	b.n	801fd46 <st_prep_buffer+0x4e2>
                        mm_remaining = mm_var;
 801fdc6:	eeb0 8a66 	vmov.f32	s16, s13
 801fdca:	e7bc      	b.n	801fd46 <st_prep_buffer+0x4e2>
                if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 801fdcc:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801fdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdd4:	dd06      	ble.n	801fde4 <st_prep_buffer+0x580>
                    dt_max += DT_SEGMENT;
 801fdd6:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801fe74 <st_prep_buffer+0x610>
 801fdda:	ee37 7a27 	vadd.f32	s14, s14, s15
                    time_var = dt_max - dt;
 801fdde:	ee77 7a68 	vsub.f32	s15, s14, s17
 801fde2:	e7b9      	b.n	801fd58 <st_prep_buffer+0x4f4>

        /* -----------------------------------------------------------------------------------
           Compute spindle spindle speed for step segment
        */

        if (sys.step_control.update_spindle_rpm || st_prep_block->dynamic_rpm) {
 801fde4:	4b24      	ldr	r3, [pc, #144]	@ (801fe78 <st_prep_buffer+0x614>)
 801fde6:	7e1b      	ldrb	r3, [r3, #24]
 801fde8:	f013 0f08 	tst.w	r3, #8
 801fdec:	d103      	bne.n	801fdf6 <st_prep_buffer+0x592>
 801fdee:	f891 3031 	ldrb.w	r3, [r1, #49]	@ 0x31
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d068      	beq.n	801fec8 <st_prep_buffer+0x664>

            float rpm;

            if (pl_block->spindle.state.on) {
 801fdf6:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 801fdfa:	f013 0f01 	tst.w	r3, #1
 801fdfe:	d03f      	beq.n	801fe80 <st_prep_buffer+0x61c>
                if(pl_block->spindle.css) {
 801fe00:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801fe02:	b1d9      	cbz	r1, 801fe3c <st_prep_buffer+0x5d8>
                    float npos = (float)(pl_block->step_event_count - prep.steps_remaining) / (float)pl_block->step_event_count;
 801fe04:	4b1a      	ldr	r3, [pc, #104]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fe06:	689b      	ldr	r3, [r3, #8]
 801fe08:	68d0      	ldr	r0, [r2, #12]
 801fe0a:	1ac3      	subs	r3, r0, r3
 801fe0c:	ee07 3a90 	vmov	s15, r3
 801fe10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fe14:	ee07 0a10 	vmov	s14, r0
 801fe18:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801fe1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fe20:	6c50      	ldr	r0, [r2, #68]	@ 0x44
                                           pl_block->spindle.rpm + pl_block->spindle.css->delta_rpm * npos,
 801fe22:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 801fe26:	edd1 7a02 	vldr	s15, [r1, #8]
 801fe2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                            pl_block->spindle.hal->param->override_pct);
 801fe2e:	6843      	ldr	r3, [r0, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fe30:	68d9      	ldr	r1, [r3, #12]
 801fe32:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fe36:	f7fe f8e9 	bl	801e00c <spindle_set_rpm>
 801fe3a:	e027      	b.n	801fe8c <st_prep_buffer+0x628>
                } else {
                    // NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.
                    // If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE)
                    // but this would be instantaneous only and during a motion. May not matter at all.
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fe3c:	6c50      	ldr	r0, [r2, #68]	@ 0x44
                                           pl_block->condition.is_rpm_rate_adjusted && !pl_block->condition.is_laser_ppi_mode
 801fe3e:	8a93      	ldrh	r3, [r2, #20]
 801fe40:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fe44:	2b80      	cmp	r3, #128	@ 0x80
 801fe46:	d006      	beq.n	801fe56 <st_prep_buffer+0x5f2>
 801fe48:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
                                            : pl_block->spindle.rpm, pl_block->spindle.hal->param->override_pct);
 801fe4c:	6843      	ldr	r3, [r0, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fe4e:	68d9      	ldr	r1, [r3, #12]
 801fe50:	f7fe f8dc 	bl	801e00c <spindle_set_rpm>
 801fe54:	e01a      	b.n	801fe8c <st_prep_buffer+0x628>
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
 801fe56:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 801fe5a:	4b05      	ldr	r3, [pc, #20]	@ (801fe70 <st_prep_buffer+0x60c>)
 801fe5c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801fe60:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fe64:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801fe68:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fe6c:	e7ee      	b.n	801fe4c <st_prep_buffer+0x5e8>
 801fe6e:	bf00      	nop
 801fe70:	20001e74 	.word	0x20001e74
 801fe74:	392ec33e 	.word	0x392ec33e
 801fe78:	200014a0 	.word	0x200014a0
 801fe7c:	00000000 	.word	0x00000000
                }
            } else
                pl_block->spindle.hal->param->rpm = rpm = 0.0f;
 801fe80:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 801fe82:	685b      	ldr	r3, [r3, #4]
 801fe84:	ed1f 0a03 	vldr	s0, [pc, #-12]	@ 801fe7c <st_prep_buffer+0x618>
 801fe88:	ed83 0a00 	vstr	s0, [r3]

            if(rpm != prep.current_spindle_rpm) {
 801fe8c:	4b8b      	ldr	r3, [pc, #556]	@ (80200bc <st_prep_buffer+0x858>)
 801fe8e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801fe92:	eef4 7a40 	vcmp.f32	s15, s0
 801fe96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe9a:	d015      	beq.n	801fec8 <st_prep_buffer+0x664>
                if(pl_block->spindle.hal->get_pwm != NULL) {
 801fe9c:	4b88      	ldr	r3, [pc, #544]	@ (80200c0 <st_prep_buffer+0x85c>)
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fea2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801fea4:	2900      	cmp	r1, #0
 801fea6:	f000 80ae 	beq.w	8020006 <st_prep_buffer+0x7a2>
                    prep.current_spindle_rpm = rpm;
 801feaa:	4a84      	ldr	r2, [pc, #528]	@ (80200bc <st_prep_buffer+0x858>)
 801feac:	ed82 0a13 	vstr	s0, [r2, #76]	@ 0x4c
                    prep_segment->update_pwm = pl_block->spindle.hal->update_pwm;
 801feb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801feb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801feb4:	62ea      	str	r2, [r5, #44]	@ 0x2c
                    prep_segment->spindle_pwm = pl_block->spindle.hal->get_pwm(pl_block->spindle.hal, rpm);
 801feb6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801feb8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801feba:	4798      	blx	r3
 801febc:	61e8      	str	r0, [r5, #28]
                } else {
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
                }
                sys.step_control.update_spindle_rpm = Off;
 801febe:	4b81      	ldr	r3, [pc, #516]	@ (80200c4 <st_prep_buffer+0x860>)
 801fec0:	7e1a      	ldrb	r2, [r3, #24]
 801fec2:	f36f 02c3 	bfc	r2, #3, #1
 801fec6:	761a      	strb	r2, [r3, #24]
           However, since floats have only 7.2 significant digits, long moves with extremely
           high step counts can exceed the precision of floats, which can lead to lost steps.
           Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
           supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
        */
        float step_dist_remaining = prep.steps_per_mm * mm_remaining; // Convert mm_remaining to steps
 801fec8:	4e7c      	ldr	r6, [pc, #496]	@ (80200bc <st_prep_buffer+0x858>)
 801feca:	edd6 9a03 	vldr	s19, [r6, #12]
 801fece:	ee69 9a88 	vmul.f32	s19, s19, s16
        uint32_t n_steps_remaining = (uint32_t)ceilf(step_dist_remaining); // Round-up current steps remaining
 801fed2:	eeb0 0a69 	vmov.f32	s0, s19
 801fed6:	f007 fa19 	bl	802730c <ceilf>
 801feda:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801fede:	ee17 4a90 	vmov	r4, s15

        prep_segment->n_step = (uint_fast16_t)(prep.steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 801fee2:	68b3      	ldr	r3, [r6, #8]
 801fee4:	1b1a      	subs	r2, r3, r4
 801fee6:	61aa      	str	r2, [r5, #24]

        // Bail if we are at the end of a feed hold and don't have a step to execute.
        if (prep_segment->n_step == 0 && sys.step_control.execute_hold) {
 801fee8:	b92a      	cbnz	r2, 801fef6 <st_prep_buffer+0x692>
 801feea:	4a76      	ldr	r2, [pc, #472]	@ (80200c4 <st_prep_buffer+0x860>)
 801feec:	7e12      	ldrb	r2, [r2, #24]
 801feee:	f012 0f02 	tst.w	r2, #2
 801fef2:	f040 8090 	bne.w	8020016 <st_prep_buffer+0x7b2>
        // compensate, we track the time to execute the previous segment's partial step and simply
        // apply it with the partial step distance to the current segment, so that it minutely
        // adjusts the whole segment rate to keep step output exact. These rate adjustments are
        // typically very small and do not adversely effect performance, but ensures that Grbl
        // outputs the exact acceleration and velocity profiles as computed by the planner.
        dt += prep.dt_remainder; // Apply previous segment partial step execute time
 801fef6:	4a71      	ldr	r2, [pc, #452]	@ (80200bc <st_prep_buffer+0x858>)
 801fef8:	edd2 7a01 	vldr	s15, [r2, #4]
 801fefc:	ee77 8aa8 	vadd.f32	s17, s15, s17
        float inv_rate = dt / ((float)prep.steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 801ff00:	ee07 3a90 	vmov	s15, r3
 801ff04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ff08:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801ff0c:	ee88 9aa7 	vdiv.f32	s18, s17, s15

        // Compute timer ticks per step for the prepped segment.
        uint32_t cycles = (uint32_t)ceilf(cycles_per_min * inv_rate); // (cycles/step)
 801ff10:	4b6d      	ldr	r3, [pc, #436]	@ (80200c8 <st_prep_buffer+0x864>)
 801ff12:	ed93 0a00 	vldr	s0, [r3]
 801ff16:	ee29 0a00 	vmul.f32	s0, s18, s0
 801ff1a:	f007 f9f7 	bl	802730c <ceilf>
 801ff1e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ff22:	ee17 2a90 	vmov	r2, s15

        // Record end position of segment relative to block if spindle synchronized motion
        if((prep_segment->spindle_sync = pl_block->spindle.state.synchronized)) {
 801ff26:	4b66      	ldr	r3, [pc, #408]	@ (80200c0 <st_prep_buffer+0x85c>)
 801ff28:	6818      	ldr	r0, [r3, #0]
 801ff2a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 801ff2e:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 801ff32:	f885 1024 	strb.w	r1, [r5, #36]	@ 0x24
 801ff36:	09db      	lsrs	r3, r3, #7
 801ff38:	d014      	beq.n	801ff64 <st_prep_buffer+0x700>
            prep.target_position += dt * prep.target_feed;
 801ff3a:	4b60      	ldr	r3, [pc, #384]	@ (80200bc <st_prep_buffer+0x858>)
 801ff3c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801ff40:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 801ff44:	ee27 7a28 	vmul.f32	s14, s14, s17
 801ff48:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ff4c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
            prep_segment->cruising = prep.ramp_type == Ramp_Cruise;
 801ff50:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 801ff54:	2901      	cmp	r1, #1
 801ff56:	bf14      	ite	ne
 801ff58:	2100      	movne	r1, #0
 801ff5a:	2101      	moveq	r1, #1
 801ff5c:	f885 1025 	strb.w	r1, [r5, #37]	@ 0x25
            prep_segment->target_position = prep.target_position; //st_prep_block->millimeters - pl_block->millimeters;
 801ff60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ff62:	616b      	str	r3, [r5, #20]
        }

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // Compute step timing and multi-axis smoothing level.
        // NOTE: AMASS overdrives the timer with each level, so only one prescalar is required.
        if (cycles < amass.level_1)
 801ff64:	4b59      	ldr	r3, [pc, #356]	@ (80200cc <st_prep_buffer+0x868>)
 801ff66:	681b      	ldr	r3, [r3, #0]
 801ff68:	4293      	cmp	r3, r2
 801ff6a:	d969      	bls.n	8020040 <st_prep_buffer+0x7dc>
            prep_segment->amass_level = 0;
 801ff6c:	2300      	movs	r3, #0
 801ff6e:	62ab      	str	r3, [r5, #40]	@ 0x28
            cycles >>= prep_segment->amass_level;
            prep_segment->n_step <<= prep_segment->amass_level;
        }
      #endif

        prep_segment->cycles_per_tick = cycles;
 801ff70:	60ea      	str	r2, [r5, #12]
        prep_segment->current_rate = prep.current_speed;
 801ff72:	4b52      	ldr	r3, [pc, #328]	@ (80200bc <st_prep_buffer+0x858>)
 801ff74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ff76:	612a      	str	r2, [r5, #16]

        // Segment complete! Increment segment pointers, so stepper ISR can immediately execute it.
        segment_buffer_head = segment_next_head;
 801ff78:	4a55      	ldr	r2, [pc, #340]	@ (80200d0 <st_prep_buffer+0x86c>)
 801ff7a:	6811      	ldr	r1, [r2, #0]
 801ff7c:	4d55      	ldr	r5, [pc, #340]	@ (80200d4 <st_prep_buffer+0x870>)
 801ff7e:	6029      	str	r1, [r5, #0]
        segment_next_head = segment_next_head->next;
 801ff80:	6849      	ldr	r1, [r1, #4]
 801ff82:	6011      	str	r1, [r2, #0]

        // Update the appropriate planner and segment data.
        pl_block->millimeters = mm_remaining;
 801ff84:	ed80 8a0a 	vstr	s16, [r0, #40]	@ 0x28
        prep.steps_remaining = n_steps_remaining;
 801ff88:	609c      	str	r4, [r3, #8]
        prep.dt_remainder = ((float)n_steps_remaining - step_dist_remaining) * inv_rate;
 801ff8a:	ee07 4a90 	vmov	s15, r4
 801ff8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ff92:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801ff96:	ee67 7a89 	vmul.f32	s15, s15, s18
 801ff9a:	edc3 7a01 	vstr	s15, [r3, #4]

        // Check for exit conditions and flag to load next planner block.
        if (mm_remaining <= prep.mm_complete) {
 801ff9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801ffa2:	eef4 7ac8 	vcmpe.f32	s15, s16
 801ffa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffaa:	da5c      	bge.n	8020066 <st_prep_buffer+0x802>
    while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 801ffac:	4b4a      	ldr	r3, [pc, #296]	@ (80200d8 <st_prep_buffer+0x874>)
 801ffae:	681a      	ldr	r2, [r3, #0]
 801ffb0:	4b47      	ldr	r3, [pc, #284]	@ (80200d0 <st_prep_buffer+0x86c>)
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	429a      	cmp	r2, r3
 801ffb6:	d040      	beq.n	802003a <st_prep_buffer+0x7d6>
        if (pl_block == NULL) {
 801ffb8:	4b41      	ldr	r3, [pc, #260]	@ (80200c0 <st_prep_buffer+0x85c>)
 801ffba:	681b      	ldr	r3, [r3, #0]
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	f43f ac5b 	beq.w	801f878 <st_prep_buffer+0x14>
        if(probe_asserted)
 801ffc2:	4b46      	ldr	r3, [pc, #280]	@ (80200dc <st_prep_buffer+0x878>)
 801ffc4:	781b      	ldrb	r3, [r3, #0]
 801ffc6:	2b00      	cmp	r3, #0
 801ffc8:	d137      	bne.n	802003a <st_prep_buffer+0x7d6>
        segment_t *prep_segment = segment_buffer_head;
 801ffca:	4b42      	ldr	r3, [pc, #264]	@ (80200d4 <st_prep_buffer+0x870>)
 801ffcc:	681d      	ldr	r5, [r3, #0]
        prep_segment->exec_block = st_prep_block;
 801ffce:	4b44      	ldr	r3, [pc, #272]	@ (80200e0 <st_prep_buffer+0x87c>)
 801ffd0:	6819      	ldr	r1, [r3, #0]
 801ffd2:	60a9      	str	r1, [r5, #8]
        prep_segment->update_rpm = NULL;
 801ffd4:	2300      	movs	r3, #0
 801ffd6:	632b      	str	r3, [r5, #48]	@ 0x30
        prep_segment->update_pwm = NULL;
 801ffd8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 801ffda:	4b39      	ldr	r3, [pc, #228]	@ (80200c0 <st_prep_buffer+0x85c>)
 801ffdc:	681a      	ldr	r2, [r3, #0]
 801ffde:	ed92 8a0a 	vldr	s16, [r2, #40]	@ 0x28
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.
 801ffe2:	4b36      	ldr	r3, [pc, #216]	@ (80200bc <st_prep_buffer+0x858>)
 801ffe4:	ed93 5a04 	vldr	s10, [r3, #16]
 801ffe8:	ee38 5a45 	vsub.f32	s10, s16, s10
        if (minimum_mm < 0.0f)
 801ffec:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801fff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fff4:	f53f ae0d 	bmi.w	801fc12 <st_prep_buffer+0x3ae>
            minimum_mm = 0.0f;
 801fff8:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80200e4 <st_prep_buffer+0x880>
 801fffc:	eddf 8a3a 	vldr	s17, [pc, #232]	@ 80200e8 <st_prep_buffer+0x884>
 8020000:	eeb0 7a67 	vmov.f32	s14, s15
 8020004:	e6b0      	b.n	801fd68 <st_prep_buffer+0x504>
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
 8020006:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8020008:	632b      	str	r3, [r5, #48]	@ 0x30
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
 802000a:	ed85 0a08 	vstr	s0, [r5, #32]
 802000e:	4b2b      	ldr	r3, [pc, #172]	@ (80200bc <st_prep_buffer+0x858>)
 8020010:	ed83 0a13 	vstr	s0, [r3, #76]	@ 0x4c
 8020014:	e753      	b.n	801febe <st_prep_buffer+0x65a>
            sys.step_control.end_motion = On;
 8020016:	4a2b      	ldr	r2, [pc, #172]	@ (80200c4 <st_prep_buffer+0x860>)
 8020018:	7e13      	ldrb	r3, [r2, #24]
 802001a:	f043 0301 	orr.w	r3, r3, #1
 802001e:	7613      	strb	r3, [r2, #24]
            if (settings.parking.flags.enabled && !prep.recalculate.parking)
 8020020:	4b32      	ldr	r3, [pc, #200]	@ (80200ec <st_prep_buffer+0x888>)
 8020022:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8020026:	f013 0f01 	tst.w	r3, #1
 802002a:	d006      	beq.n	802003a <st_prep_buffer+0x7d6>
 802002c:	7833      	ldrb	r3, [r6, #0]
 802002e:	f013 0f04 	tst.w	r3, #4
 8020032:	d102      	bne.n	802003a <st_prep_buffer+0x7d6>
                prep.recalculate.hold_partial_block = On;
 8020034:	f043 0302 	orr.w	r3, r3, #2
 8020038:	7033      	strb	r3, [r6, #0]
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
                plan_discard_current_block();
            }
        }
    }
}
 802003a:	ecbd 8b04 	vpop	{d8-d9}
 802003e:	bd70      	pop	{r4, r5, r6, pc}
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 8020040:	4b22      	ldr	r3, [pc, #136]	@ (80200cc <st_prep_buffer+0x868>)
 8020042:	685b      	ldr	r3, [r3, #4]
 8020044:	4293      	cmp	r3, r2
 8020046:	d805      	bhi.n	8020054 <st_prep_buffer+0x7f0>
 8020048:	4b20      	ldr	r3, [pc, #128]	@ (80200cc <st_prep_buffer+0x868>)
 802004a:	689b      	ldr	r3, [r3, #8]
 802004c:	4293      	cmp	r3, r2
 802004e:	d908      	bls.n	8020062 <st_prep_buffer+0x7fe>
 8020050:	2102      	movs	r1, #2
 8020052:	e000      	b.n	8020056 <st_prep_buffer+0x7f2>
 8020054:	2101      	movs	r1, #1
 8020056:	62a9      	str	r1, [r5, #40]	@ 0x28
            cycles >>= prep_segment->amass_level;
 8020058:	40ca      	lsrs	r2, r1
            prep_segment->n_step <<= prep_segment->amass_level;
 802005a:	69ab      	ldr	r3, [r5, #24]
 802005c:	408b      	lsls	r3, r1
 802005e:	61ab      	str	r3, [r5, #24]
 8020060:	e786      	b.n	801ff70 <st_prep_buffer+0x70c>
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 8020062:	2103      	movs	r1, #3
 8020064:	e7f7      	b.n	8020056 <st_prep_buffer+0x7f2>
            if (mm_remaining > 0.0f) { // At end of forced-termination.
 8020066:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802006a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802006e:	dc0a      	bgt.n	8020086 <st_prep_buffer+0x822>
                if (sys.step_control.execute_sys_motion) {
 8020070:	4b14      	ldr	r3, [pc, #80]	@ (80200c4 <st_prep_buffer+0x860>)
 8020072:	7e1b      	ldrb	r3, [r3, #24]
 8020074:	f013 0f04 	tst.w	r3, #4
 8020078:	d11a      	bne.n	80200b0 <st_prep_buffer+0x84c>
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
 802007a:	4b11      	ldr	r3, [pc, #68]	@ (80200c0 <st_prep_buffer+0x85c>)
 802007c:	2200      	movs	r2, #0
 802007e:	601a      	str	r2, [r3, #0]
                plan_discard_current_block();
 8020080:	f7f6 f88a 	bl	8016198 <plan_discard_current_block>
 8020084:	e792      	b.n	801ffac <st_prep_buffer+0x748>
                sys.step_control.end_motion = On;
 8020086:	4a0f      	ldr	r2, [pc, #60]	@ (80200c4 <st_prep_buffer+0x860>)
 8020088:	7e13      	ldrb	r3, [r2, #24]
 802008a:	f043 0301 	orr.w	r3, r3, #1
 802008e:	7613      	strb	r3, [r2, #24]
                if (settings.parking.flags.enabled && !prep.recalculate.parking)
 8020090:	4b16      	ldr	r3, [pc, #88]	@ (80200ec <st_prep_buffer+0x888>)
 8020092:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8020096:	f013 0f01 	tst.w	r3, #1
 802009a:	d0ce      	beq.n	802003a <st_prep_buffer+0x7d6>
 802009c:	4b07      	ldr	r3, [pc, #28]	@ (80200bc <st_prep_buffer+0x858>)
 802009e:	781b      	ldrb	r3, [r3, #0]
 80200a0:	f013 0f04 	tst.w	r3, #4
 80200a4:	d1c9      	bne.n	802003a <st_prep_buffer+0x7d6>
                    prep.recalculate.hold_partial_block = On;
 80200a6:	4a05      	ldr	r2, [pc, #20]	@ (80200bc <st_prep_buffer+0x858>)
 80200a8:	f043 0302 	orr.w	r3, r3, #2
 80200ac:	7013      	strb	r3, [r2, #0]
                return; // Bail!
 80200ae:	e7c4      	b.n	802003a <st_prep_buffer+0x7d6>
                    sys.step_control.end_motion = On;
 80200b0:	4a04      	ldr	r2, [pc, #16]	@ (80200c4 <st_prep_buffer+0x860>)
 80200b2:	f043 0301 	orr.w	r3, r3, #1
 80200b6:	7613      	strb	r3, [r2, #24]
                    return;
 80200b8:	e7bf      	b.n	802003a <st_prep_buffer+0x7d6>
 80200ba:	bf00      	nop
 80200bc:	20001e74 	.word	0x20001e74
 80200c0:	20001f00 	.word	0x20001f00
 80200c4:	200014a0 	.word	0x200014a0
 80200c8:	20001f10 	.word	0x20001f10
 80200cc:	20001f18 	.word	0x20001f18
 80200d0:	20001f04 	.word	0x20001f04
 80200d4:	20001f08 	.word	0x20001f08
 80200d8:	20001f0c 	.word	0x20001f0c
 80200dc:	20001f14 	.word	0x20001f14
 80200e0:	20001efc 	.word	0x20001efc
 80200e4:	392ec33e 	.word	0x392ec33e
 80200e8:	00000000 	.word	0x00000000
 80200ec:	20001bd8 	.word	0x20001bd8

080200f0 <st_get_realtime_rate>:
// Called by realtime status reporting to fetch the current speed being executed. This value
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate (void)
{
 80200f0:	b508      	push	{r3, lr}
    return state_get() & (STATE_CYCLE|STATE_HOMING|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 80200f2:	f7fe fba9 	bl	801e848 <state_get>
#ifdef KINEMATICS_API
            ? prep.current_speed * prep.rate_multiplier
#else
            ? prep.current_speed
#endif
            : 0.0f;
 80200f6:	f010 0f7c 	tst.w	r0, #124	@ 0x7c
 80200fa:	d003      	beq.n	8020104 <st_get_realtime_rate+0x14>
 80200fc:	4b03      	ldr	r3, [pc, #12]	@ (802010c <st_get_realtime_rate+0x1c>)
 80200fe:	ed93 0a0b 	vldr	s0, [r3, #44]	@ 0x2c
}
 8020102:	bd08      	pop	{r3, pc}
            : 0.0f;
 8020104:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8020110 <st_get_realtime_rate+0x20>
 8020108:	e7fb      	b.n	8020102 <st_get_realtime_rate+0x12>
 802010a:	bf00      	nop
 802010c:	20001e74 	.word	0x20001e74
 8020110:	00000000 	.word	0x00000000

08020114 <st_get_offset_id>:

offset_id_t st_get_offset_id (void)
{
 8020114:	b508      	push	{r3, lr}
    plan_block_t *pl_block;

    return st.exec_block
 8020116:	4b0b      	ldr	r3, [pc, #44]	@ (8020144 <st_get_offset_id+0x30>)
 8020118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            ? st.exec_block->offset_id
            : (sys.holding_state == Hold_Complete && (pl_block = plan_get_current_block())
 802011a:	b113      	cbz	r3, 8020122 <st_get_offset_id+0xe>
 802011c:	f993 0032 	ldrsb.w	r0, [r3, #50]	@ 0x32
                ? pl_block->offset_id
                : -1);
}
 8020120:	bd08      	pop	{r3, pc}
            : (sys.holding_state == Hold_Complete && (pl_block = plan_get_current_block())
 8020122:	4b09      	ldr	r3, [pc, #36]	@ (8020148 <st_get_offset_id+0x34>)
 8020124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8020128:	2b01      	cmp	r3, #1
 802012a:	d105      	bne.n	8020138 <st_get_offset_id+0x24>
 802012c:	f7f6 f858 	bl	80161e0 <plan_get_current_block>
 8020130:	b128      	cbz	r0, 802013e <st_get_offset_id+0x2a>
 8020132:	f990 0011 	ldrsb.w	r0, [r0, #17]
 8020136:	e7f3      	b.n	8020120 <st_get_offset_id+0xc>
 8020138:	f04f 30ff 	mov.w	r0, #4294967295
 802013c:	e7f0      	b.n	8020120 <st_get_offset_id+0xc>
 802013e:	f04f 30ff 	mov.w	r0, #4294967295
 8020142:	e7ed      	b.n	8020120 <st_get_offset_id+0xc>
 8020144:	20001f24 	.word	0x20001f24
 8020148:	200014a0 	.word	0x200014a0

0802014c <stream_get_null>:

// "dummy" version of serialGetC
int16_t stream_get_null (void)
{
    return SERIAL_NO_DATA;
}
 802014c:	f04f 30ff 	mov.w	r0, #4294967295
 8020150:	4770      	bx	lr

08020152 <stream_connected>:
// helper function for (UART) stream implementations.

bool stream_connected (void)
{
    return true;
}
 8020152:	2001      	movs	r0, #1
 8020154:	4770      	bx	lr

08020156 <is_not_connected>:

static bool is_not_connected (void)
{
    return false;
}
 8020156:	2000      	movs	r0, #0
 8020158:	4770      	bx	lr
	...

0802015c <connection_is_up>:

static bool connection_is_up (io_stream_t *stream)
{
 802015c:	b508      	push	{r3, lr}
    if(stream->is_connected)
 802015e:	6843      	ldr	r3, [r0, #4]
 8020160:	b1bb      	cbz	r3, 8020192 <connection_is_up+0x36>
        return stream->is_connected();
 8020162:	4798      	blx	r3
        }
        connection = connection->next;
    }

    return false;
}
 8020164:	bd08      	pop	{r3, pc}
        connection = connection->next;
 8020166:	68db      	ldr	r3, [r3, #12]
    while(connection) {
 8020168:	b1ab      	cbz	r3, 8020196 <connection_is_up+0x3a>
        if(connection->stream->type == stream->type &&
 802016a:	681a      	ldr	r2, [r3, #0]
 802016c:	f8b2 c000 	ldrh.w	ip, [r2]
 8020170:	8801      	ldrh	r1, [r0, #0]
 8020172:	458c      	cmp	ip, r1
 8020174:	d1f7      	bne.n	8020166 <connection_is_up+0xa>
             connection->stream->state.is_usb == stream->state.is_usb) {
 8020176:	7891      	ldrb	r1, [r2, #2]
 8020178:	7882      	ldrb	r2, [r0, #2]
 802017a:	404a      	eors	r2, r1
            connection->stream->instance == stream->instance &&
 802017c:	f012 0f04 	tst.w	r2, #4
 8020180:	d1f1      	bne.n	8020166 <connection_is_up+0xa>
            if(connection->stream->state.is_usb)
 8020182:	f011 0f04 	tst.w	r1, #4
 8020186:	d001      	beq.n	802018c <connection_is_up+0x30>
                connection->is_up = is_not_connected;
 8020188:	4a04      	ldr	r2, [pc, #16]	@ (802019c <connection_is_up+0x40>)
 802018a:	605a      	str	r2, [r3, #4]
            return connection->is_up();
 802018c:	685b      	ldr	r3, [r3, #4]
 802018e:	4798      	blx	r3
 8020190:	e7e8      	b.n	8020164 <connection_is_up+0x8>
    stream_connection_t *connection = connections;
 8020192:	4b03      	ldr	r3, [pc, #12]	@ (80201a0 <connection_is_up+0x44>)
 8020194:	e7e8      	b.n	8020168 <connection_is_up+0xc>
    return false;
 8020196:	2000      	movs	r0, #0
 8020198:	e7e4      	b.n	8020164 <connection_is_up+0x8>
 802019a:	bf00      	nop
 802019c:	08020157 	.word	0x08020157
 80201a0:	2000237c 	.word	0x2000237c

080201a4 <stream_write_all>:

static void stream_write_all (const char *s)
{
 80201a4:	b538      	push	{r3, r4, r5, lr}
 80201a6:	4605      	mov	r5, r0
    stream_connection_t *connection = connections;
 80201a8:	4c06      	ldr	r4, [pc, #24]	@ (80201c4 <stream_write_all+0x20>)

    while(connection) {
 80201aa:	e000      	b.n	80201ae <stream_write_all+0xa>
        if(connection->is_up())
            connection->stream->write(s);
        connection = connection->next;
 80201ac:	68e4      	ldr	r4, [r4, #12]
    while(connection) {
 80201ae:	b144      	cbz	r4, 80201c2 <stream_write_all+0x1e>
        if(connection->is_up())
 80201b0:	6863      	ldr	r3, [r4, #4]
 80201b2:	4798      	blx	r3
 80201b4:	2800      	cmp	r0, #0
 80201b6:	d0f9      	beq.n	80201ac <stream_write_all+0x8>
            connection->stream->write(s);
 80201b8:	6823      	ldr	r3, [r4, #0]
 80201ba:	68db      	ldr	r3, [r3, #12]
 80201bc:	4628      	mov	r0, r5
 80201be:	4798      	blx	r3
 80201c0:	e7f4      	b.n	80201ac <stream_write_all+0x8>
    }
}
 80201c2:	bd38      	pop	{r3, r4, r5, pc}
 80201c4:	2000237c 	.word	0x2000237c

080201c8 <_open_instance>:
    uint32_t baud_rate;
    io_stream_t const *stream;
} connection;

static bool _open_instance (io_stream_properties_t const *stream)
{
 80201c8:	b510      	push	{r4, lr}
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 80201ca:	7803      	ldrb	r3, [r0, #0]
 80201cc:	b933      	cbnz	r3, 80201dc <_open_instance+0x14>
 80201ce:	4b0c      	ldr	r3, [pc, #48]	@ (8020200 <_open_instance+0x38>)
 80201d0:	781b      	ldrb	r3, [r3, #0]
 80201d2:	2bff      	cmp	r3, #255	@ 0xff
 80201d4:	d008      	beq.n	80201e8 <_open_instance+0x20>
 80201d6:	7842      	ldrb	r2, [r0, #1]
 80201d8:	4293      	cmp	r3, r2
 80201da:	d005      	beq.n	80201e8 <_open_instance+0x20>
        connection.stream = stream->claim(connection.baud_rate);

    return connection.stream != NULL;
 80201dc:	4b08      	ldr	r3, [pc, #32]	@ (8020200 <_open_instance+0x38>)
 80201de:	6898      	ldr	r0, [r3, #8]
}
 80201e0:	3800      	subs	r0, #0
 80201e2:	bf18      	it	ne
 80201e4:	2001      	movne	r0, #1
 80201e6:	bd10      	pop	{r4, pc}
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 80201e8:	7883      	ldrb	r3, [r0, #2]
 80201ea:	f003 0306 	and.w	r3, r3, #6
 80201ee:	2b02      	cmp	r3, #2
 80201f0:	d1f4      	bne.n	80201dc <_open_instance+0x14>
        connection.stream = stream->claim(connection.baud_rate);
 80201f2:	6843      	ldr	r3, [r0, #4]
 80201f4:	4c02      	ldr	r4, [pc, #8]	@ (8020200 <_open_instance+0x38>)
 80201f6:	6860      	ldr	r0, [r4, #4]
 80201f8:	4798      	blx	r3
 80201fa:	60a0      	str	r0, [r4, #8]
 80201fc:	e7ee      	b.n	80201dc <_open_instance+0x14>
 80201fe:	bf00      	nop
 8020200:	20002358 	.word	0x20002358

08020204 <null_rx_free>:
static enqueue_realtime_command_ptr enqueue_realtime_command = protocol_enqueue_realtime_command;

static uint16_t null_rx_free (void)
{
    return RX_BUFFER_SIZE;
}
 8020204:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8020208:	4770      	bx	lr

0802020a <null_count>:

static uint16_t null_count (void)
{
    return 0;
}
 802020a:	2000      	movs	r0, #0
 802020c:	4770      	bx	lr

0802020e <null_put_c>:

static bool null_put_c (const char c)
{
    return true;
}
 802020e:	2001      	movs	r0, #1
 8020210:	4770      	bx	lr

08020212 <null_write_string>:

static void null_write_string (const char *s)
{
}
 8020212:	4770      	bx	lr

08020214 <null_write>:

static void null_write(const char *s, uint16_t length)
{
}
 8020214:	4770      	bx	lr

08020216 <null_suspend_disable>:

static bool null_suspend_disable (bool suspend)
{
    return true;
}
 8020216:	2001      	movs	r0, #1
 8020218:	4770      	bx	lr

0802021a <null_set_baudrate>:

static bool null_set_baudrate (uint32_t baud_rate)
{
    return true;
}
 802021a:	2001      	movs	r0, #1
 802021c:	4770      	bx	lr
	...

08020220 <null_enqueue_rt_command>:

static bool null_enqueue_rt_command (char c)
{
 8020220:	b508      	push	{r3, lr}
    return enqueue_realtime_command(c);
 8020222:	4b02      	ldr	r3, [pc, #8]	@ (802022c <null_enqueue_rt_command+0xc>)
 8020224:	681b      	ldr	r3, [r3, #0]
 8020226:	4798      	blx	r3
}
 8020228:	bd08      	pop	{r3, pc}
 802022a:	bf00      	nop
 802022c:	20000474 	.word	0x20000474

08020230 <null_set_rt_handler>:

static enqueue_realtime_command_ptr null_set_rt_handler (enqueue_realtime_command_ptr handler)
{
 8020230:	4603      	mov	r3, r0
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 8020232:	4a03      	ldr	r2, [pc, #12]	@ (8020240 <null_set_rt_handler+0x10>)
 8020234:	6810      	ldr	r0, [r2, #0]

    if(handler)
 8020236:	461a      	mov	r2, r3
 8020238:	b10b      	cbz	r3, 802023e <null_set_rt_handler+0xe>
        enqueue_realtime_command = handler;
 802023a:	4b01      	ldr	r3, [pc, #4]	@ (8020240 <null_set_rt_handler+0x10>)
 802023c:	601a      	str	r2, [r3, #0]

    return prev;
}
 802023e:	4770      	bx	lr
 8020240:	20000474 	.word	0x20000474

08020244 <stream_null_init>:
        .set_baud_rate = null_set_baudrate,
        .set_enqueue_rt_handler = null_set_rt_handler
    };

    return &stream;
}
 8020244:	4800      	ldr	r0, [pc, #0]	@ (8020248 <stream_null_init+0x4>)
 8020246:	4770      	bx	lr
 8020248:	08030114 	.word	0x08030114

0802024c <await_toolchange_ack>:
{
 802024c:	b510      	push	{r4, lr}
    if(c == CMD_TOOL_ACK && !stream.rxbuffer->backup) {
 802024e:	28a3      	cmp	r0, #163	@ 0xa3
 8020250:	d103      	bne.n	802025a <await_toolchange_ack+0xe>
 8020252:	4b13      	ldr	r3, [pc, #76]	@ (80202a0 <await_toolchange_ack+0x54>)
 8020254:	689c      	ldr	r4, [r3, #8]
 8020256:	7aa3      	ldrb	r3, [r4, #10]
 8020258:	b11b      	cbz	r3, 8020262 <await_toolchange_ack+0x16>
        return stream.enqueue_realtime_command(c);
 802025a:	4b11      	ldr	r3, [pc, #68]	@ (80202a0 <await_toolchange_ack+0x54>)
 802025c:	681b      	ldr	r3, [r3, #0]
 802025e:	4798      	blx	r3
}
 8020260:	bd10      	pop	{r4, pc}
        memcpy(&rxbackup, stream.rxbuffer, sizeof(stream_rx_buffer_t));
 8020262:	f240 420c 	movw	r2, #1036	@ 0x40c
 8020266:	4621      	mov	r1, r4
 8020268:	480e      	ldr	r0, [pc, #56]	@ (80202a4 <await_toolchange_ack+0x58>)
 802026a:	f004 fb40 	bl	80248ee <memcpy>
        stream.rxbuffer->backup = true;
 802026e:	2301      	movs	r3, #1
 8020270:	72a3      	strb	r3, [r4, #10]
        stream.rxbuffer->tail = stream.rxbuffer->head;
 8020272:	6823      	ldr	r3, [r4, #0]
 8020274:	6063      	str	r3, [r4, #4]
        hal.stream.read = stream.read; // restore normal input
 8020276:	4c0a      	ldr	r4, [pc, #40]	@ (80202a0 <await_toolchange_ack+0x54>)
 8020278:	6862      	ldr	r2, [r4, #4]
 802027a:	4b0b      	ldr	r3, [pc, #44]	@ (80202a8 <await_toolchange_ack+0x5c>)
 802027c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 8020280:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8020284:	6820      	ldr	r0, [r4, #0]
 8020286:	4798      	blx	r3
        stream.enqueue_realtime_command = NULL;
 8020288:	2300      	movs	r3, #0
 802028a:	6023      	str	r3, [r4, #0]
        if(grbl.on_toolchange_ack)
 802028c:	4b07      	ldr	r3, [pc, #28]	@ (80202ac <await_toolchange_ack+0x60>)
 802028e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8020292:	b113      	cbz	r3, 802029a <await_toolchange_ack+0x4e>
            grbl.on_toolchange_ack();
 8020294:	4798      	blx	r3
    return true;
 8020296:	2001      	movs	r0, #1
 8020298:	e7e2      	b.n	8020260 <await_toolchange_ack+0x14>
 802029a:	2001      	movs	r0, #1
 802029c:	e7e0      	b.n	8020260 <await_toolchange_ack+0x14>
 802029e:	bf00      	nop
 80202a0:	20002390 	.word	0x20002390
 80202a4:	2000239c 	.word	0x2000239c
 80202a8:	200011c0 	.word	0x200011c0
 80202ac:	200013a8 	.word	0x200013a8

080202b0 <add_connection>:
{
 80202b0:	b510      	push	{r4, lr}
 80202b2:	4604      	mov	r4, r0
    if(base.stream == NULL) {
 80202b4:	4b15      	ldr	r3, [pc, #84]	@ (802030c <add_connection+0x5c>)
 80202b6:	681b      	ldr	r3, [r3, #0]
 80202b8:	b18b      	cbz	r3, 80202de <add_connection+0x2e>
    } else if((connection = malloc(sizeof(stream_connection_t)))) {
 80202ba:	2014      	movs	r0, #20
 80202bc:	f002 f8ee 	bl	802249c <malloc>
 80202c0:	b178      	cbz	r0, 80202e2 <add_connection+0x32>
        connection->stream = stream;
 80202c2:	6004      	str	r4, [r0, #0]
        connection->next = NULL;
 80202c4:	2300      	movs	r3, #0
 80202c6:	60c3      	str	r3, [r0, #12]
    stream_connection_t *connection, *last = connections;
 80202c8:	4b10      	ldr	r3, [pc, #64]	@ (802030c <add_connection+0x5c>)
        while(last->next) {
 80202ca:	461a      	mov	r2, r3
 80202cc:	68db      	ldr	r3, [r3, #12]
 80202ce:	b163      	cbz	r3, 80202ea <add_connection+0x3a>
            if(last->stream == stream) {
 80202d0:	681a      	ldr	r2, [r3, #0]
 80202d2:	42a2      	cmp	r2, r4
 80202d4:	d1f9      	bne.n	80202ca <add_connection+0x1a>
                free(connection);
 80202d6:	f002 f8e9 	bl	80224ac <free>
                return NULL;
 80202da:	2000      	movs	r0, #0
 80202dc:	e004      	b.n	80202e8 <add_connection+0x38>
        base.stream = stream;
 80202de:	480b      	ldr	r0, [pc, #44]	@ (802030c <add_connection+0x5c>)
 80202e0:	6004      	str	r4, [r0, #0]
    connection->is_up = stream->is_connected ?
 80202e2:	6863      	ldr	r3, [r4, #4]
                         stream->is_connected :
 80202e4:	b123      	cbz	r3, 80202f0 <add_connection+0x40>
    connection->is_up = stream->is_connected ?
 80202e6:	6043      	str	r3, [r0, #4]
}
 80202e8:	bd10      	pop	{r4, pc}
        connection->prev = last;
 80202ea:	6102      	str	r2, [r0, #16]
        last->next = connection;
 80202ec:	60d0      	str	r0, [r2, #12]
 80202ee:	e7f8      	b.n	80202e2 <add_connection+0x32>
                          (stream->state.is_usb && base.stream != stream ? is_not_connected : stream_connected);
 80202f0:	78a3      	ldrb	r3, [r4, #2]
 80202f2:	f013 0f04 	tst.w	r3, #4
 80202f6:	d007      	beq.n	8020308 <add_connection+0x58>
 80202f8:	4b04      	ldr	r3, [pc, #16]	@ (802030c <add_connection+0x5c>)
 80202fa:	681b      	ldr	r3, [r3, #0]
 80202fc:	42a3      	cmp	r3, r4
 80202fe:	d001      	beq.n	8020304 <add_connection+0x54>
 8020300:	4b03      	ldr	r3, [pc, #12]	@ (8020310 <add_connection+0x60>)
 8020302:	e7f0      	b.n	80202e6 <add_connection+0x36>
 8020304:	4b03      	ldr	r3, [pc, #12]	@ (8020314 <add_connection+0x64>)
 8020306:	e7ee      	b.n	80202e6 <add_connection+0x36>
 8020308:	4b02      	ldr	r3, [pc, #8]	@ (8020314 <add_connection+0x64>)
 802030a:	e7ec      	b.n	80202e6 <add_connection+0x36>
 802030c:	2000237c 	.word	0x2000237c
 8020310:	08020157 	.word	0x08020157
 8020314:	08020153 	.word	0x08020153

08020318 <stream_register_streams>:
    if(details->n_streams) {
 8020318:	7803      	ldrb	r3, [r0, #0]
 802031a:	b11b      	cbz	r3, 8020324 <stream_register_streams+0xc>
        details->next = streams;
 802031c:	4b02      	ldr	r3, [pc, #8]	@ (8020328 <stream_register_streams+0x10>)
 802031e:	681a      	ldr	r2, [r3, #0]
 8020320:	6082      	str	r2, [r0, #8]
        streams = details;
 8020322:	6018      	str	r0, [r3, #0]
}
 8020324:	4770      	bx	lr
 8020326:	bf00      	nop
 8020328:	20000478 	.word	0x20000478

0802032c <stream_enumerate_streams>:
    if(callback == NULL)
 802032c:	b1a8      	cbz	r0, 802035a <stream_enumerate_streams+0x2e>
{
 802032e:	b570      	push	{r4, r5, r6, lr}
 8020330:	4606      	mov	r6, r0
    io_stream_details_t *details = streams;
 8020332:	4b0c      	ldr	r3, [pc, #48]	@ (8020364 <stream_enumerate_streams+0x38>)
 8020334:	681d      	ldr	r5, [r3, #0]
    bool claimed = false;
 8020336:	2200      	movs	r2, #0
    while(details && !claimed) {
 8020338:	e000      	b.n	802033c <stream_enumerate_streams+0x10>
        details = details->next;
 802033a:	68ad      	ldr	r5, [r5, #8]
    while(details && !claimed) {
 802033c:	b185      	cbz	r5, 8020360 <stream_enumerate_streams+0x34>
 802033e:	b97a      	cbnz	r2, 8020360 <stream_enumerate_streams+0x34>
        for(idx = 0; idx < details->n_streams; idx++) {
 8020340:	2400      	movs	r4, #0
 8020342:	782b      	ldrb	r3, [r5, #0]
 8020344:	42a3      	cmp	r3, r4
 8020346:	d9f8      	bls.n	802033a <stream_enumerate_streams+0xe>
            if((claimed = callback(&details->streams[idx])))
 8020348:	6868      	ldr	r0, [r5, #4]
 802034a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 802034e:	47b0      	blx	r6
 8020350:	4602      	mov	r2, r0
 8020352:	2800      	cmp	r0, #0
 8020354:	d1f1      	bne.n	802033a <stream_enumerate_streams+0xe>
        for(idx = 0; idx < details->n_streams; idx++) {
 8020356:	3401      	adds	r4, #1
 8020358:	e7f3      	b.n	8020342 <stream_enumerate_streams+0x16>
        return false;
 802035a:	2200      	movs	r2, #0
}
 802035c:	4610      	mov	r0, r2
 802035e:	4770      	bx	lr
 8020360:	4610      	mov	r0, r2
 8020362:	bd70      	pop	{r4, r5, r6, pc}
 8020364:	20000478 	.word	0x20000478

08020368 <stream_tx_blocking>:
{
 8020368:	b510      	push	{r4, lr}
    grbl.on_execute_realtime(state_get());
 802036a:	4b06      	ldr	r3, [pc, #24]	@ (8020384 <stream_tx_blocking+0x1c>)
 802036c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 802036e:	f7fe fa6b 	bl	801e848 <state_get>
 8020372:	47a0      	blx	r4
    return !(sys.rt_exec_state & EXEC_RESET);
 8020374:	4b04      	ldr	r3, [pc, #16]	@ (8020388 <stream_tx_blocking+0x20>)
 8020376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020378:	f013 0f20 	tst.w	r3, #32
}
 802037c:	bf0c      	ite	eq
 802037e:	2001      	moveq	r0, #1
 8020380:	2000      	movne	r0, #0
 8020382:	bd10      	pop	{r4, pc}
 8020384:	200013a8 	.word	0x200013a8
 8020388:	200014a0 	.word	0x200014a0

0802038c <stream_rx_suspend>:
{
 802038c:	b570      	push	{r4, r5, r6, lr}
 802038e:	4604      	mov	r4, r0
    if(suspend) {
 8020390:	b1b9      	cbz	r1, 80203c2 <stream_rx_suspend+0x36>
        if(stream.rxbuffer == NULL) {
 8020392:	4b1a      	ldr	r3, [pc, #104]	@ (80203fc <stream_rx_suspend+0x70>)
 8020394:	689b      	ldr	r3, [r3, #8]
 8020396:	b12b      	cbz	r3, 80203a4 <stream_rx_suspend+0x18>
    return rxbuffer->tail != rxbuffer->head;
 8020398:	6860      	ldr	r0, [r4, #4]
 802039a:	6823      	ldr	r3, [r4, #0]
}
 802039c:	1ac0      	subs	r0, r0, r3
 802039e:	bf18      	it	ne
 80203a0:	2001      	movne	r0, #1
 80203a2:	bd70      	pop	{r4, r5, r6, pc}
            stream.rxbuffer = rxbuffer;
 80203a4:	4e15      	ldr	r6, [pc, #84]	@ (80203fc <stream_rx_suspend+0x70>)
 80203a6:	60b0      	str	r0, [r6, #8]
            stream.read = hal.stream.read;
 80203a8:	4d15      	ldr	r5, [pc, #84]	@ (8020400 <stream_rx_suspend+0x74>)
 80203aa:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 80203ae:	6073      	str	r3, [r6, #4]
            stream.enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(await_toolchange_ack);
 80203b0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 80203b4:	4813      	ldr	r0, [pc, #76]	@ (8020404 <stream_rx_suspend+0x78>)
 80203b6:	4798      	blx	r3
 80203b8:	6030      	str	r0, [r6, #0]
            hal.stream.read = stream_get_null;
 80203ba:	4b13      	ldr	r3, [pc, #76]	@ (8020408 <stream_rx_suspend+0x7c>)
 80203bc:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
 80203c0:	e7ea      	b.n	8020398 <stream_rx_suspend+0xc>
    } else if(stream.rxbuffer) {
 80203c2:	4b0e      	ldr	r3, [pc, #56]	@ (80203fc <stream_rx_suspend+0x70>)
 80203c4:	689b      	ldr	r3, [r3, #8]
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	d0e6      	beq.n	8020398 <stream_rx_suspend+0xc>
        if(rxbuffer->backup)
 80203ca:	7a83      	ldrb	r3, [r0, #10]
 80203cc:	b983      	cbnz	r3, 80203f0 <stream_rx_suspend+0x64>
        if(stream.enqueue_realtime_command) {
 80203ce:	4b0b      	ldr	r3, [pc, #44]	@ (80203fc <stream_rx_suspend+0x70>)
 80203d0:	6818      	ldr	r0, [r3, #0]
 80203d2:	b148      	cbz	r0, 80203e8 <stream_rx_suspend+0x5c>
            hal.stream.read = stream.read; // restore normal input
 80203d4:	461d      	mov	r5, r3
 80203d6:	685a      	ldr	r2, [r3, #4]
 80203d8:	4b09      	ldr	r3, [pc, #36]	@ (8020400 <stream_rx_suspend+0x74>)
 80203da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
            hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 80203de:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80203e2:	4798      	blx	r3
            stream.enqueue_realtime_command = NULL;
 80203e4:	2300      	movs	r3, #0
 80203e6:	602b      	str	r3, [r5, #0]
        stream.rxbuffer = NULL;
 80203e8:	4b04      	ldr	r3, [pc, #16]	@ (80203fc <stream_rx_suspend+0x70>)
 80203ea:	2200      	movs	r2, #0
 80203ec:	609a      	str	r2, [r3, #8]
 80203ee:	e7d3      	b.n	8020398 <stream_rx_suspend+0xc>
            memcpy(rxbuffer, &rxbackup, sizeof(stream_rx_buffer_t));
 80203f0:	f240 420c 	movw	r2, #1036	@ 0x40c
 80203f4:	4905      	ldr	r1, [pc, #20]	@ (802040c <stream_rx_suspend+0x80>)
 80203f6:	f004 fa7a 	bl	80248ee <memcpy>
 80203fa:	e7e8      	b.n	80203ce <stream_rx_suspend+0x42>
 80203fc:	20002390 	.word	0x20002390
 8020400:	200011c0 	.word	0x200011c0
 8020404:	0802024d 	.word	0x0802024d
 8020408:	0802014d 	.word	0x0802014d
 802040c:	2000239c 	.word	0x2000239c

08020410 <stream_enqueue_realtime_command>:
{
 8020410:	b510      	push	{r4, lr}
 8020412:	4604      	mov	r4, r0
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 8020414:	4b0c      	ldr	r3, [pc, #48]	@ (8020448 <stream_enqueue_realtime_command+0x38>)
 8020416:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 802041a:	b193      	cbz	r3, 8020442 <stream_enqueue_realtime_command+0x32>
 802041c:	4798      	blx	r3
    if(drop && (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))
 802041e:	b178      	cbz	r0, 8020440 <stream_enqueue_realtime_command+0x30>
 8020420:	2c81      	cmp	r4, #129	@ 0x81
 8020422:	d001      	beq.n	8020428 <stream_enqueue_realtime_command+0x18>
 8020424:	2c7e      	cmp	r4, #126	@ 0x7e
 8020426:	d10b      	bne.n	8020440 <stream_enqueue_realtime_command+0x30>
        sys.report.cycle_start = settings.status_report.pin_state;
 8020428:	4b08      	ldr	r3, [pc, #32]	@ (802044c <stream_enqueue_realtime_command+0x3c>)
 802042a:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 802042e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8020432:	4a07      	ldr	r2, [pc, #28]	@ (8020450 <stream_enqueue_realtime_command+0x40>)
 8020434:	f892 1033 	ldrb.w	r1, [r2, #51]	@ 0x33
 8020438:	f363 1186 	bfi	r1, r3, #6, #1
 802043c:	f882 1033 	strb.w	r1, [r2, #51]	@ 0x33
}
 8020440:	bd10      	pop	{r4, pc}
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 8020442:	f7f7 f9ab 	bl	801779c <protocol_enqueue_realtime_command>
 8020446:	e7ea      	b.n	802041e <stream_enqueue_realtime_command+0xe>
 8020448:	200011c0 	.word	0x200011c0
 802044c:	20001bd8 	.word	0x20001bd8
 8020450:	200014a0 	.word	0x200014a0

08020454 <stream_set_description>:
{
 8020454:	b538      	push	{r3, r4, r5, lr}
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020456:	6803      	ldr	r3, [r0, #0]
 8020458:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802045c:	f423 037b 	bic.w	r3, r3, #16449536	@ 0xfb0000
 8020460:	b9a3      	cbnz	r3, 802048c <stream_set_description+0x38>
 8020462:	4604      	mov	r4, r0
 8020464:	460d      	mov	r5, r1
 8020466:	4b0b      	ldr	r3, [pc, #44]	@ (8020494 <stream_set_description+0x40>)
 8020468:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 802046c:	b183      	cbz	r3, 8020490 <stream_set_description+0x3c>
        hal.periph_port.set_pin_description(Output_TX, (pin_group_t)(PinGroup_UART + stream->instance), description);
 802046e:	7841      	ldrb	r1, [r0, #1]
 8020470:	462a      	mov	r2, r5
 8020472:	3111      	adds	r1, #17
 8020474:	209f      	movs	r0, #159	@ 0x9f
 8020476:	4798      	blx	r3
        hal.periph_port.set_pin_description(Input_RX, (pin_group_t)(PinGroup_UART + stream->instance), description);
 8020478:	4b06      	ldr	r3, [pc, #24]	@ (8020494 <stream_set_description+0x40>)
 802047a:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 802047e:	7861      	ldrb	r1, [r4, #1]
 8020480:	462a      	mov	r2, r5
 8020482:	3111      	adds	r1, #17
 8020484:	209e      	movs	r0, #158	@ 0x9e
 8020486:	4798      	blx	r3
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020488:	2001      	movs	r0, #1
 802048a:	e000      	b.n	802048e <stream_set_description+0x3a>
 802048c:	2000      	movs	r0, #0
}
 802048e:	bd38      	pop	{r3, r4, r5, pc}
    if((ok = stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description)) {
 8020490:	2000      	movs	r0, #0
 8020492:	e7fc      	b.n	802048e <stream_set_description+0x3a>
 8020494:	200011c0 	.word	0x200011c0

08020498 <stream_mpg_enable>:
    if(mpg.stream == NULL)
 8020498:	4b47      	ldr	r3, [pc, #284]	@ (80205b8 <stream_mpg_enable+0x120>)
 802049a:	681b      	ldr	r3, [r3, #0]
 802049c:	2b00      	cmp	r3, #0
 802049e:	f000 8088 	beq.w	80205b2 <stream_mpg_enable+0x11a>
{
 80204a2:	b570      	push	{r4, r5, r6, lr}
 80204a4:	4604      	mov	r4, r0
    sys_state_t state = state_get();
 80204a6:	f7fe f9cf 	bl	801e848 <state_get>
    if(on == sys.mpg_mode || (on && (gc_state.file_run || !(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP)))))) {
 80204aa:	4b44      	ldr	r3, [pc, #272]	@ (80205bc <stream_mpg_enable+0x124>)
 80204ac:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80204b0:	42a3      	cmp	r3, r4
 80204b2:	d042      	beq.n	802053a <stream_mpg_enable+0xa2>
 80204b4:	2c00      	cmp	r4, #0
 80204b6:	d045      	beq.n	8020544 <stream_mpg_enable+0xac>
 80204b8:	4b41      	ldr	r3, [pc, #260]	@ (80205c0 <stream_mpg_enable+0x128>)
 80204ba:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80204be:	2b00      	cmp	r3, #0
 80204c0:	d13b      	bne.n	802053a <stream_mpg_enable+0xa2>
 80204c2:	b118      	cbz	r0, 80204cc <stream_mpg_enable+0x34>
 80204c4:	f240 1301 	movw	r3, #257	@ 0x101
 80204c8:	4218      	tst	r0, r3
 80204ca:	d036      	beq.n	802053a <stream_mpg_enable+0xa2>
        if(org_stream.type == StreamType_Redirected) {
 80204cc:	4b3d      	ldr	r3, [pc, #244]	@ (80205c4 <stream_mpg_enable+0x12c>)
 80204ce:	781b      	ldrb	r3, [r3, #0]
 80204d0:	2b06      	cmp	r3, #6
 80204d2:	d151      	bne.n	8020578 <stream_mpg_enable+0xe0>
            memcpy(&org_stream, &hal.stream, sizeof(io_stream_t));
 80204d4:	4d3c      	ldr	r5, [pc, #240]	@ (80205c8 <stream_mpg_enable+0x130>)
 80204d6:	224c      	movs	r2, #76	@ 0x4c
 80204d8:	f105 01a8 	add.w	r1, r5, #168	@ 0xa8
 80204dc:	4839      	ldr	r0, [pc, #228]	@ (80205c4 <stream_mpg_enable+0x12c>)
 80204de:	f004 fa06 	bl	80248ee <memcpy>
            if(hal.stream.disable_rx)
 80204e2:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 80204e6:	b10b      	cbz	r3, 80204ec <stream_mpg_enable+0x54>
                hal.stream.disable_rx(true);
 80204e8:	2001      	movs	r0, #1
 80204ea:	4798      	blx	r3
            mpg.stream->disable_rx(false);
 80204ec:	4d32      	ldr	r5, [pc, #200]	@ (80205b8 <stream_mpg_enable+0x120>)
 80204ee:	682b      	ldr	r3, [r5, #0]
 80204f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80204f2:	2000      	movs	r0, #0
 80204f4:	4798      	blx	r3
            mpg.stream->set_enqueue_rt_handler(org_stream.set_enqueue_rt_handler(NULL));
 80204f6:	682b      	ldr	r3, [r5, #0]
 80204f8:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 80204fa:	4b32      	ldr	r3, [pc, #200]	@ (80205c4 <stream_mpg_enable+0x12c>)
 80204fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80204fe:	2000      	movs	r0, #0
 8020500:	4798      	blx	r3
 8020502:	47b0      	blx	r6
            hal.stream.type = StreamType_MPG;
 8020504:	4a30      	ldr	r2, [pc, #192]	@ (80205c8 <stream_mpg_enable+0x130>)
 8020506:	2301      	movs	r3, #1
 8020508:	f882 30a8 	strb.w	r3, [r2, #168]	@ 0xa8
            hal.stream.read = mpg.stream->read;
 802050c:	682b      	ldr	r3, [r5, #0]
 802050e:	69d9      	ldr	r1, [r3, #28]
 8020510:	f8c2 10c4 	str.w	r1, [r2, #196]	@ 0xc4
            if(mpg.flags.is_mpg_tx)
 8020514:	7a2a      	ldrb	r2, [r5, #8]
 8020516:	f012 0f02 	tst.w	r2, #2
 802051a:	d003      	beq.n	8020524 <stream_mpg_enable+0x8c>
                hal.stream.write = mpg.stream->write;
 802051c:	68d9      	ldr	r1, [r3, #12]
 802051e:	4a2a      	ldr	r2, [pc, #168]	@ (80205c8 <stream_mpg_enable+0x130>)
 8020520:	f8c2 10b4 	str.w	r1, [r2, #180]	@ 0xb4
            hal.stream.get_rx_buffer_free = mpg.stream->get_rx_buffer_free;
 8020524:	6899      	ldr	r1, [r3, #8]
 8020526:	4a28      	ldr	r2, [pc, #160]	@ (80205c8 <stream_mpg_enable+0x130>)
 8020528:	f8c2 10b0 	str.w	r1, [r2, #176]	@ 0xb0
            hal.stream.cancel_read_buffer = mpg.stream->cancel_read_buffer;
 802052c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 802052e:	f8c2 10cc 	str.w	r1, [r2, #204]	@ 0xcc
            hal.stream.reset_read_buffer = mpg.stream->reset_read_buffer;
 8020532:	6a1b      	ldr	r3, [r3, #32]
 8020534:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
 8020538:	e01e      	b.n	8020578 <stream_mpg_enable+0xe0>
        protocol_enqueue_realtime_command(CMD_STATUS_REPORT_ALL);
 802053a:	2087      	movs	r0, #135	@ 0x87
 802053c:	f7f7 f92e 	bl	801779c <protocol_enqueue_realtime_command>
        return false;
 8020540:	2000      	movs	r0, #0
 8020542:	e02d      	b.n	80205a0 <stream_mpg_enable+0x108>
    } else if(org_stream.type != StreamType_Redirected) {
 8020544:	4b1f      	ldr	r3, [pc, #124]	@ (80205c4 <stream_mpg_enable+0x12c>)
 8020546:	781b      	ldrb	r3, [r3, #0]
 8020548:	2b06      	cmp	r3, #6
 802054a:	d015      	beq.n	8020578 <stream_mpg_enable+0xe0>
        if(mpg_write_char)
 802054c:	4b1f      	ldr	r3, [pc, #124]	@ (80205cc <stream_mpg_enable+0x134>)
 802054e:	6818      	ldr	r0, [r3, #0]
 8020550:	b338      	cbz	r0, 80205a2 <stream_mpg_enable+0x10a>
            mpg.stream->set_enqueue_rt_handler(mpg_write_char);
 8020552:	4b19      	ldr	r3, [pc, #100]	@ (80205b8 <stream_mpg_enable+0x120>)
 8020554:	681b      	ldr	r3, [r3, #0]
 8020556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020558:	4798      	blx	r3
        memcpy(&hal.stream, &org_stream, sizeof(io_stream_t));
 802055a:	4d1b      	ldr	r5, [pc, #108]	@ (80205c8 <stream_mpg_enable+0x130>)
 802055c:	4e19      	ldr	r6, [pc, #100]	@ (80205c4 <stream_mpg_enable+0x12c>)
 802055e:	224c      	movs	r2, #76	@ 0x4c
 8020560:	4631      	mov	r1, r6
 8020562:	f105 00a8 	add.w	r0, r5, #168	@ 0xa8
 8020566:	f004 f9c2 	bl	80248ee <memcpy>
        org_stream.type = StreamType_Redirected;
 802056a:	2306      	movs	r3, #6
 802056c:	7033      	strb	r3, [r6, #0]
        if(hal.stream.disable_rx)
 802056e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8020572:	b10b      	cbz	r3, 8020578 <stream_mpg_enable+0xe0>
            hal.stream.disable_rx(false);
 8020574:	2000      	movs	r0, #0
 8020576:	4798      	blx	r3
    hal.stream.reset_read_buffer();
 8020578:	4b13      	ldr	r3, [pc, #76]	@ (80205c8 <stream_mpg_enable+0x130>)
 802057a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 802057e:	4798      	blx	r3
    sys.mpg_mode = on;
 8020580:	4b0e      	ldr	r3, [pc, #56]	@ (80205bc <stream_mpg_enable+0x124>)
 8020582:	f883 407f 	strb.w	r4, [r3, #127]	@ 0x7f
    mpg.flags.mpg_control = Off;
 8020586:	4b0c      	ldr	r3, [pc, #48]	@ (80205b8 <stream_mpg_enable+0x120>)
 8020588:	7a1a      	ldrb	r2, [r3, #8]
 802058a:	f36f 0200 	bfc	r2, #0, #1
 802058e:	721a      	strb	r2, [r3, #8]
    system_add_rt_report(Report_MPGMode);
 8020590:	2001      	movs	r0, #1
 8020592:	f001 f917 	bl	80217c4 <system_add_rt_report>
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8020596:	b154      	cbz	r4, 80205ae <stream_mpg_enable+0x116>
 8020598:	2087      	movs	r0, #135	@ 0x87
 802059a:	f7f7 f8ff 	bl	801779c <protocol_enqueue_realtime_command>
    return true;
 802059e:	2001      	movs	r0, #1
}
 80205a0:	bd70      	pop	{r4, r5, r6, pc}
            mpg.stream->disable_rx(true);
 80205a2:	4b05      	ldr	r3, [pc, #20]	@ (80205b8 <stream_mpg_enable+0x120>)
 80205a4:	681b      	ldr	r3, [r3, #0]
 80205a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80205a8:	2001      	movs	r0, #1
 80205aa:	4798      	blx	r3
 80205ac:	e7d5      	b.n	802055a <stream_mpg_enable+0xc2>
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 80205ae:	2080      	movs	r0, #128	@ 0x80
 80205b0:	e7f3      	b.n	802059a <stream_mpg_enable+0x102>
        return false;
 80205b2:	2000      	movs	r0, #0
}
 80205b4:	4770      	bx	lr
 80205b6:	bf00      	nop
 80205b8:	20002368 	.word	0x20002368
 80205bc:	200014a0 	.word	0x200014a0
 80205c0:	20000ef8 	.word	0x20000ef8
 80205c4:	20000428 	.word	0x20000428
 80205c8:	200011c0 	.word	0x200011c0
 80205cc:	20002364 	.word	0x20002364

080205d0 <stream_select>:
{
 80205d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205d2:	4604      	mov	r4, r0
 80205d4:	460d      	mov	r5, r1
    if(stream == base.stream) {
 80205d6:	4b8e      	ldr	r3, [pc, #568]	@ (8020810 <stream_select+0x240>)
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	4283      	cmp	r3, r0
 80205dc:	d00b      	beq.n	80205f6 <stream_select+0x26>
    if(!add) { // disconnect
 80205de:	2900      	cmp	r1, #0
 80205e0:	d144      	bne.n	802066c <stream_select+0x9c>
        if(stream == base.stream || stream == mpg.stream)
 80205e2:	4b8c      	ldr	r3, [pc, #560]	@ (8020814 <stream_select+0x244>)
 80205e4:	681b      	ldr	r3, [r3, #0]
 80205e6:	4283      	cmp	r3, r0
 80205e8:	f000 813a 	beq.w	8020860 <stream_select+0x290>
        stream_connection_t *connection = connections->next;
 80205ec:	4b88      	ldr	r3, [pc, #544]	@ (8020810 <stream_select+0x240>)
 80205ee:	68db      	ldr	r3, [r3, #12]
        bool disconnected = false;
 80205f0:	4608      	mov	r0, r1
    bool send_init_message = false, mpg_enable = false;
 80205f2:	460e      	mov	r6, r1
        while(connection) {
 80205f4:	e014      	b.n	8020620 <stream_select+0x50>
        base.is_up = add ? (stream->is_connected ? stream->is_connected : stream_connected) : is_not_connected;
 80205f6:	b119      	cbz	r1, 8020600 <stream_select+0x30>
 80205f8:	6843      	ldr	r3, [r0, #4]
 80205fa:	b913      	cbnz	r3, 8020602 <stream_select+0x32>
 80205fc:	4b86      	ldr	r3, [pc, #536]	@ (8020818 <stream_select+0x248>)
 80205fe:	e000      	b.n	8020602 <stream_select+0x32>
 8020600:	4b86      	ldr	r3, [pc, #536]	@ (802081c <stream_select+0x24c>)
 8020602:	4a83      	ldr	r2, [pc, #524]	@ (8020810 <stream_select+0x240>)
 8020604:	6053      	str	r3, [r2, #4]
        return true;
 8020606:	2001      	movs	r0, #1
 8020608:	e0de      	b.n	80207c8 <stream_select+0x1f8>
                	mpg_enable = mpg.flags.mpg_control;
 802060a:	4982      	ldr	r1, [pc, #520]	@ (8020814 <stream_select+0x244>)
 802060c:	7a0e      	ldrb	r6, [r1, #8]
 802060e:	f006 0601 	and.w	r6, r6, #1
                	if((stream = connection->prev->prev->stream) == NULL)
 8020612:	6912      	ldr	r2, [r2, #16]
 8020614:	6814      	ldr	r4, [r2, #0]
 8020616:	b99c      	cbnz	r4, 8020640 <stream_select+0x70>
                		stream = base.stream;
 8020618:	4a7d      	ldr	r2, [pc, #500]	@ (8020810 <stream_select+0x240>)
 802061a:	6814      	ldr	r4, [r2, #0]
 802061c:	e010      	b.n	8020640 <stream_select+0x70>
        		connection = connection->next;
 802061e:	68db      	ldr	r3, [r3, #12]
        while(connection) {
 8020620:	b1a3      	cbz	r3, 802064c <stream_select+0x7c>
        	if(stream == connection->stream) {
 8020622:	681a      	ldr	r2, [r3, #0]
 8020624:	42a2      	cmp	r2, r4
 8020626:	d1fa      	bne.n	802061e <stream_select+0x4e>
        		if((connection->prev->next = connection->next))
 8020628:	6919      	ldr	r1, [r3, #16]
 802062a:	68da      	ldr	r2, [r3, #12]
 802062c:	60ca      	str	r2, [r1, #12]
 802062e:	b10a      	cbz	r2, 8020634 <stream_select+0x64>
        			connection->next->prev = connection->prev;
 8020630:	6919      	ldr	r1, [r3, #16]
 8020632:	6111      	str	r1, [r2, #16]
                if((stream = connection->prev->stream) == mpg.stream) {
 8020634:	691a      	ldr	r2, [r3, #16]
 8020636:	6814      	ldr	r4, [r2, #0]
 8020638:	4976      	ldr	r1, [pc, #472]	@ (8020814 <stream_select+0x244>)
 802063a:	6809      	ldr	r1, [r1, #0]
 802063c:	42a1      	cmp	r1, r4
 802063e:	d0e4      	beq.n	802060a <stream_select+0x3a>
                free(connection);
 8020640:	4618      	mov	r0, r3
 8020642:	f001 ff33 	bl	80224ac <free>
        		connection = NULL;
 8020646:	2300      	movs	r3, #0
        		disconnected = true;
 8020648:	2001      	movs	r0, #1
 802064a:	e7e9      	b.n	8020620 <stream_select+0x50>
        if(!disconnected)
 802064c:	2800      	cmp	r0, #0
 802064e:	f000 80bb 	beq.w	80207c8 <stream_select+0x1f8>
    bool webui_connected = hal.stream.state.webui_connected;
 8020652:	4b73      	ldr	r3, [pc, #460]	@ (8020820 <stream_select+0x250>)
 8020654:	f893 70aa 	ldrb.w	r7, [r3, #170]	@ 0xaa
 8020658:	f3c7 0740 	ubfx	r7, r7, #1, #1
    switch(stream->type) {
 802065c:	7823      	ldrb	r3, [r4, #0]
 802065e:	2b04      	cmp	r3, #4
 8020660:	d875      	bhi.n	802074e <stream_select+0x17e>
 8020662:	e8df f003 	tbb	[pc, r3]
 8020666:	740a      	.short	0x740a
 8020668:	3060      	.short	0x3060
 802066a:	44          	.byte	0x44
 802066b:	00          	.byte	0x00
	} else if(add_connection(stream) == NULL)
 802066c:	f7ff fe20 	bl	80202b0 <add_connection>
 8020670:	2800      	cmp	r0, #0
 8020672:	f000 80f7 	beq.w	8020864 <stream_select+0x294>
    bool send_init_message = false, mpg_enable = false;
 8020676:	2600      	movs	r6, #0
 8020678:	e7eb      	b.n	8020652 <stream_select+0x82>
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 802067a:	4b6a      	ldr	r3, [pc, #424]	@ (8020824 <stream_select+0x254>)
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	2b00      	cmp	r3, #0
 8020680:	f000 80a3 	beq.w	80207ca <stream_select+0x1fa>
 8020684:	781b      	ldrb	r3, [r3, #0]
 8020686:	b90b      	cbnz	r3, 802068c <stream_select+0xbc>
    bool send_init_message = false, mpg_enable = false;
 8020688:	2500      	movs	r5, #0
 802068a:	e061      	b.n	8020750 <stream_select+0x180>
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 802068c:	4620      	mov	r0, r4
 802068e:	f7ff fd65 	bl	802015c <connection_is_up>
 8020692:	4605      	mov	r5, r0
 8020694:	2800      	cmp	r0, #0
 8020696:	d05b      	beq.n	8020750 <stream_select+0x180>
                hal.stream.write = stream->write;
 8020698:	68e2      	ldr	r2, [r4, #12]
 802069a:	4b61      	ldr	r3, [pc, #388]	@ (8020820 <stream_select+0x250>)
 802069c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                report_message("SERIAL STREAM ACTIVE", Message_Plain);
 80206a0:	2100      	movs	r1, #0
 80206a2:	4861      	ldr	r0, [pc, #388]	@ (8020828 <stream_select+0x258>)
 80206a4:	f7f8 fcc8 	bl	8019038 <report_message>
                if(stream->get_tx_buffer_count)
 80206a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80206aa:	b12b      	cbz	r3, 80206b8 <stream_select+0xe8>
                    while(stream->get_tx_buffer_count());
 80206ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80206ae:	4798      	blx	r3
 80206b0:	2800      	cmp	r0, #0
 80206b2:	d1fb      	bne.n	80206ac <stream_select+0xdc>
    bool send_init_message = false, mpg_enable = false;
 80206b4:	2500      	movs	r5, #0
 80206b6:	e04b      	b.n	8020750 <stream_select+0x180>
                    hal.delay_ms(100, NULL);
 80206b8:	4b59      	ldr	r3, [pc, #356]	@ (8020820 <stream_select+0x250>)
 80206ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80206bc:	2100      	movs	r1, #0
 80206be:	2064      	movs	r0, #100	@ 0x64
 80206c0:	4798      	blx	r3
    bool send_init_message = false, mpg_enable = false;
 80206c2:	2500      	movs	r5, #0
 80206c4:	e044      	b.n	8020750 <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 80206c6:	4859      	ldr	r0, [pc, #356]	@ (802082c <stream_select+0x25c>)
 80206c8:	f7ff fd48 	bl	802015c <connection_is_up>
 80206cc:	b930      	cbnz	r0, 80206dc <stream_select+0x10c>
            send_init_message = add && sys.driver_started;
 80206ce:	b155      	cbz	r5, 80206e6 <stream_select+0x116>
 80206d0:	4b57      	ldr	r3, [pc, #348]	@ (8020830 <stream_select+0x260>)
 80206d2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80206d6:	b943      	cbnz	r3, 80206ea <stream_select+0x11a>
 80206d8:	2500      	movs	r5, #0
 80206da:	e039      	b.n	8020750 <stream_select+0x180>
                report_message("TELNET STREAM ACTIVE", Message_Plain);
 80206dc:	2100      	movs	r1, #0
 80206de:	4855      	ldr	r0, [pc, #340]	@ (8020834 <stream_select+0x264>)
 80206e0:	f7f8 fcaa 	bl	8019038 <report_message>
 80206e4:	e7f3      	b.n	80206ce <stream_select+0xfe>
            send_init_message = add && sys.driver_started;
 80206e6:	2500      	movs	r5, #0
 80206e8:	e032      	b.n	8020750 <stream_select+0x180>
 80206ea:	2501      	movs	r5, #1
            break;
 80206ec:	e030      	b.n	8020750 <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 80206ee:	484f      	ldr	r0, [pc, #316]	@ (802082c <stream_select+0x25c>)
 80206f0:	f7ff fd34 	bl	802015c <connection_is_up>
 80206f4:	b960      	cbnz	r0, 8020710 <stream_select+0x140>
            send_init_message = add && sys.driver_started && !hal.stream.state.webui_connected;
 80206f6:	b185      	cbz	r5, 802071a <stream_select+0x14a>
 80206f8:	4b4d      	ldr	r3, [pc, #308]	@ (8020830 <stream_select+0x260>)
 80206fa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80206fe:	b173      	cbz	r3, 802071e <stream_select+0x14e>
 8020700:	4b47      	ldr	r3, [pc, #284]	@ (8020820 <stream_select+0x250>)
 8020702:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8020706:	f013 0f02 	tst.w	r3, #2
 802070a:	d00a      	beq.n	8020722 <stream_select+0x152>
 802070c:	2500      	movs	r5, #0
 802070e:	e01f      	b.n	8020750 <stream_select+0x180>
                report_message("WEBSOCKET STREAM ACTIVE", Message_Plain);
 8020710:	2100      	movs	r1, #0
 8020712:	4849      	ldr	r0, [pc, #292]	@ (8020838 <stream_select+0x268>)
 8020714:	f7f8 fc90 	bl	8019038 <report_message>
 8020718:	e7ed      	b.n	80206f6 <stream_select+0x126>
            send_init_message = add && sys.driver_started && !hal.stream.state.webui_connected;
 802071a:	2500      	movs	r5, #0
 802071c:	e018      	b.n	8020750 <stream_select+0x180>
 802071e:	2500      	movs	r5, #0
 8020720:	e016      	b.n	8020750 <stream_select+0x180>
 8020722:	2501      	movs	r5, #1
            break;
 8020724:	e014      	b.n	8020750 <stream_select+0x180>
            if(connection_is_up(&hal.stream))
 8020726:	4841      	ldr	r0, [pc, #260]	@ (802082c <stream_select+0x25c>)
 8020728:	f7ff fd18 	bl	802015c <connection_is_up>
 802072c:	b930      	cbnz	r0, 802073c <stream_select+0x16c>
            send_init_message = add && sys.driver_started;
 802072e:	b155      	cbz	r5, 8020746 <stream_select+0x176>
 8020730:	4b3f      	ldr	r3, [pc, #252]	@ (8020830 <stream_select+0x260>)
 8020732:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8020736:	b943      	cbnz	r3, 802074a <stream_select+0x17a>
 8020738:	2500      	movs	r5, #0
 802073a:	e009      	b.n	8020750 <stream_select+0x180>
                report_message("BLUETOOTH STREAM ACTIVE", Message_Plain);
 802073c:	2100      	movs	r1, #0
 802073e:	483f      	ldr	r0, [pc, #252]	@ (802083c <stream_select+0x26c>)
 8020740:	f7f8 fc7a 	bl	8019038 <report_message>
 8020744:	e7f3      	b.n	802072e <stream_select+0x15e>
            send_init_message = add && sys.driver_started;
 8020746:	2500      	movs	r5, #0
 8020748:	e002      	b.n	8020750 <stream_select+0x180>
 802074a:	2501      	movs	r5, #1
            break;
 802074c:	e000      	b.n	8020750 <stream_select+0x180>
    switch(stream->type) {
 802074e:	2500      	movs	r5, #0
    if(hal.stream.type == StreamType_MPG) {
 8020750:	4b33      	ldr	r3, [pc, #204]	@ (8020820 <stream_select+0x250>)
 8020752:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8020756:	2b01      	cmp	r3, #1
 8020758:	d039      	beq.n	80207ce <stream_select+0x1fe>
    } else if(mpg_enable)
 802075a:	2e00      	cmp	r6, #0
 802075c:	d140      	bne.n	80207e0 <stream_select+0x210>
    memcpy(&hal.stream, stream, sizeof(io_stream_t));
 802075e:	224c      	movs	r2, #76	@ 0x4c
 8020760:	4621      	mov	r1, r4
 8020762:	4832      	ldr	r0, [pc, #200]	@ (802082c <stream_select+0x25c>)
 8020764:	f004 f8c3 	bl	80248ee <memcpy>
    if(stream == base.stream && base.is_up == is_not_connected)
 8020768:	4b29      	ldr	r3, [pc, #164]	@ (8020810 <stream_select+0x240>)
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	42a3      	cmp	r3, r4
 802076e:	d03c      	beq.n	80207ea <stream_select+0x21a>
    if(hal.stream.is_connected == NULL)
 8020770:	4a2b      	ldr	r2, [pc, #172]	@ (8020820 <stream_select+0x250>)
 8020772:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 8020776:	2a00      	cmp	r2, #0
 8020778:	d040      	beq.n	80207fc <stream_select+0x22c>
    if(stream->type == StreamType_WebSocket && !stream->state.webui_connected)
 802077a:	6823      	ldr	r3, [r4, #0]
 802077c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020780:	f423 037d 	bic.w	r3, r3, #16580608	@ 0xfd0000
 8020784:	2b04      	cmp	r3, #4
 8020786:	d063      	beq.n	8020850 <stream_select+0x280>
    if(send_init_message) {
 8020788:	b135      	cbz	r5, 8020798 <stream_select+0x1c8>
        hal.stream.write_all = stream->write;
 802078a:	68e2      	ldr	r2, [r4, #12]
 802078c:	4b24      	ldr	r3, [pc, #144]	@ (8020820 <stream_select+0x250>)
 802078e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        grbl.report.init_message();
 8020792:	4b2b      	ldr	r3, [pc, #172]	@ (8020840 <stream_select+0x270>)
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	4798      	blx	r3
    hal.stream.write_all = stream_write_all;
 8020798:	4d21      	ldr	r5, [pc, #132]	@ (8020820 <stream_select+0x250>)
 802079a:	4b2a      	ldr	r3, [pc, #168]	@ (8020844 <stream_select+0x274>)
 802079c:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
    hal.stream.set_enqueue_rt_handler(protocol_enqueue_realtime_command);
 80207a0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 80207a4:	4828      	ldr	r0, [pc, #160]	@ (8020848 <stream_select+0x278>)
 80207a6:	4798      	blx	r3
    if(hal.stream.disable_rx)
 80207a8:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 80207ac:	b10b      	cbz	r3, 80207b2 <stream_select+0x1e2>
        hal.stream.disable_rx(false);
 80207ae:	2000      	movs	r0, #0
 80207b0:	4798      	blx	r3
    if(grbl.on_stream_changed)
 80207b2:	4b23      	ldr	r3, [pc, #140]	@ (8020840 <stream_select+0x270>)
 80207b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80207b8:	b11b      	cbz	r3, 80207c2 <stream_select+0x1f2>
        grbl.on_stream_changed(hal.stream.type);
 80207ba:	4a19      	ldr	r2, [pc, #100]	@ (8020820 <stream_select+0x250>)
 80207bc:	f892 00a8 	ldrb.w	r0, [r2, #168]	@ 0xa8
 80207c0:	4798      	blx	r3
    active_stream = stream;
 80207c2:	4b18      	ldr	r3, [pc, #96]	@ (8020824 <stream_select+0x254>)
 80207c4:	601c      	str	r4, [r3, #0]
    return true;
 80207c6:	2001      	movs	r0, #1
}
 80207c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool send_init_message = false, mpg_enable = false;
 80207ca:	2500      	movs	r5, #0
 80207cc:	e7c0      	b.n	8020750 <stream_select+0x180>
        stream_mpg_enable(false);
 80207ce:	2000      	movs	r0, #0
 80207d0:	f7ff fe62 	bl	8020498 <stream_mpg_enable>
        mpg.flags.mpg_control = On;
 80207d4:	4a0f      	ldr	r2, [pc, #60]	@ (8020814 <stream_select+0x244>)
 80207d6:	7a13      	ldrb	r3, [r2, #8]
 80207d8:	f043 0301 	orr.w	r3, r3, #1
 80207dc:	7213      	strb	r3, [r2, #8]
 80207de:	e7be      	b.n	802075e <stream_select+0x18e>
		protocol_enqueue_foreground_task(stream_mpg_set_mode, (void *)1);
 80207e0:	2101      	movs	r1, #1
 80207e2:	481a      	ldr	r0, [pc, #104]	@ (802084c <stream_select+0x27c>)
 80207e4:	f7f6 ffb4 	bl	8017750 <protocol_enqueue_foreground_task>
 80207e8:	e7b9      	b.n	802075e <stream_select+0x18e>
    if(stream == base.stream && base.is_up == is_not_connected)
 80207ea:	4a09      	ldr	r2, [pc, #36]	@ (8020810 <stream_select+0x240>)
 80207ec:	6851      	ldr	r1, [r2, #4]
 80207ee:	4a0b      	ldr	r2, [pc, #44]	@ (802081c <stream_select+0x24c>)
 80207f0:	4291      	cmp	r1, r2
 80207f2:	d1bd      	bne.n	8020770 <stream_select+0x1a0>
        base.is_up = stream_connected;
 80207f4:	4a06      	ldr	r2, [pc, #24]	@ (8020810 <stream_select+0x240>)
 80207f6:	4908      	ldr	r1, [pc, #32]	@ (8020818 <stream_select+0x248>)
 80207f8:	6051      	str	r1, [r2, #4]
 80207fa:	e7b9      	b.n	8020770 <stream_select+0x1a0>
        hal.stream.is_connected = stream == base.stream ? base.is_up : stream_connected;
 80207fc:	42a3      	cmp	r3, r4
 80207fe:	d004      	beq.n	802080a <stream_select+0x23a>
 8020800:	4a05      	ldr	r2, [pc, #20]	@ (8020818 <stream_select+0x248>)
 8020802:	4b07      	ldr	r3, [pc, #28]	@ (8020820 <stream_select+0x250>)
 8020804:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8020808:	e7b7      	b.n	802077a <stream_select+0x1aa>
 802080a:	4b01      	ldr	r3, [pc, #4]	@ (8020810 <stream_select+0x240>)
 802080c:	685a      	ldr	r2, [r3, #4]
 802080e:	e7f8      	b.n	8020802 <stream_select+0x232>
 8020810:	2000237c 	.word	0x2000237c
 8020814:	20002368 	.word	0x20002368
 8020818:	08020153 	.word	0x08020153
 802081c:	08020157 	.word	0x08020157
 8020820:	200011c0 	.word	0x200011c0
 8020824:	20002354 	.word	0x20002354
 8020828:	080300a4 	.word	0x080300a4
 802082c:	20001268 	.word	0x20001268
 8020830:	200014a0 	.word	0x200014a0
 8020834:	080300bc 	.word	0x080300bc
 8020838:	080300d4 	.word	0x080300d4
 802083c:	080300ec 	.word	0x080300ec
 8020840:	200013a8 	.word	0x200013a8
 8020844:	080201a5 	.word	0x080201a5
 8020848:	0801779d 	.word	0x0801779d
 802084c:	080208c1 	.word	0x080208c1
        hal.stream.state.webui_connected = webui_connected;
 8020850:	4b05      	ldr	r3, [pc, #20]	@ (8020868 <stream_select+0x298>)
 8020852:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8020856:	f367 0241 	bfi	r2, r7, #1, #1
 802085a:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 802085e:	e793      	b.n	8020788 <stream_select+0x1b8>
        	return false;
 8020860:	4608      	mov	r0, r1
 8020862:	e7b1      	b.n	80207c8 <stream_select+0x1f8>
        return false;
 8020864:	2000      	movs	r0, #0
 8020866:	e7af      	b.n	80207c8 <stream_select+0x1f8>
 8020868:	200011c0 	.word	0x200011c0

0802086c <stream_connect>:
{
 802086c:	b538      	push	{r3, r4, r5, lr}
 802086e:	4604      	mov	r4, r0
    if((ok = stream_select(stream, true)))
 8020870:	2101      	movs	r1, #1
 8020872:	f7ff fead 	bl	80205d0 <stream_select>
 8020876:	4605      	mov	r5, r0
 8020878:	b908      	cbnz	r0, 802087e <stream_connect+0x12>
}
 802087a:	4628      	mov	r0, r5
 802087c:	bd38      	pop	{r3, r4, r5, pc}
        stream_set_description(stream, "Primary UART");
 802087e:	4902      	ldr	r1, [pc, #8]	@ (8020888 <stream_connect+0x1c>)
 8020880:	4620      	mov	r0, r4
 8020882:	f7ff fde7 	bl	8020454 <stream_set_description>
 8020886:	e7f8      	b.n	802087a <stream_connect+0xe>
 8020888:	08030104 	.word	0x08030104

0802088c <stream_connect_instance>:
{
 802088c:	b508      	push	{r3, lr}
    connection.instance = instance;
 802088e:	4b0a      	ldr	r3, [pc, #40]	@ (80208b8 <stream_connect_instance+0x2c>)
 8020890:	7018      	strb	r0, [r3, #0]
    connection.baud_rate = baud_rate;
 8020892:	6059      	str	r1, [r3, #4]
    connection.stream = NULL;
 8020894:	2200      	movs	r2, #0
 8020896:	609a      	str	r2, [r3, #8]
    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 8020898:	4808      	ldr	r0, [pc, #32]	@ (80208bc <stream_connect_instance+0x30>)
 802089a:	f7ff fd47 	bl	802032c <stream_enumerate_streams>
 802089e:	b908      	cbnz	r0, 80208a4 <stream_connect_instance+0x18>
 80208a0:	2000      	movs	r0, #0
}
 80208a2:	bd08      	pop	{r3, pc}
    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 80208a4:	4b04      	ldr	r3, [pc, #16]	@ (80208b8 <stream_connect_instance+0x2c>)
 80208a6:	6898      	ldr	r0, [r3, #8]
 80208a8:	f7ff ffe0 	bl	802086c <stream_connect>
 80208ac:	b108      	cbz	r0, 80208b2 <stream_connect_instance+0x26>
 80208ae:	2001      	movs	r0, #1
 80208b0:	e7f7      	b.n	80208a2 <stream_connect_instance+0x16>
 80208b2:	2000      	movs	r0, #0
 80208b4:	e7f5      	b.n	80208a2 <stream_connect_instance+0x16>
 80208b6:	bf00      	nop
 80208b8:	20002358 	.word	0x20002358
 80208bc:	080201c9 	.word	0x080201c9

080208c0 <stream_mpg_set_mode>:
{
 80208c0:	b508      	push	{r3, lr}
    stream_mpg_enable(data != NULL);
 80208c2:	3800      	subs	r0, #0
 80208c4:	bf18      	it	ne
 80208c6:	2001      	movne	r0, #1
 80208c8:	f7ff fde6 	bl	8020498 <stream_mpg_enable>
}
 80208cc:	bd08      	pop	{r3, pc}
	...

080208d0 <toggle_single_block>:

    return Status_OK;
}

static status_code_t toggle_single_block (sys_state_t state, char *args)
{
 80208d0:	b508      	push	{r3, lr}
    if(!hal.signals_cap.single_block) {
 80208d2:	4b10      	ldr	r3, [pc, #64]	@ (8020914 <toggle_single_block+0x44>)
 80208d4:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 80208d8:	f013 0f08 	tst.w	r3, #8
 80208dc:	d10f      	bne.n	80208fe <toggle_single_block+0x2e>
        sys.flags.single_block = !sys.flags.single_block;
 80208de:	4a0e      	ldr	r2, [pc, #56]	@ (8020918 <toggle_single_block+0x48>)
 80208e0:	7d93      	ldrb	r3, [r2, #22]
 80208e2:	43d9      	mvns	r1, r3
 80208e4:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80208e8:	f361 13c7 	bfi	r3, r1, #7, #1
 80208ec:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 80208ee:	4b0b      	ldr	r3, [pc, #44]	@ (802091c <toggle_single_block+0x4c>)
 80208f0:	68db      	ldr	r3, [r3, #12]
 80208f2:	f992 2016 	ldrsb.w	r2, [r2, #22]
 80208f6:	2a00      	cmp	r2, #0
 80208f8:	db08      	blt.n	802090c <toggle_single_block+0x3c>
 80208fa:	2005      	movs	r0, #5
 80208fc:	4798      	blx	r3
    }

    return hal.signals_cap.single_block ? Status_InvalidStatement : Status_OK;
 80208fe:	4b05      	ldr	r3, [pc, #20]	@ (8020914 <toggle_single_block+0x44>)
 8020900:	f893 01dd 	ldrb.w	r0, [r3, #477]	@ 0x1dd
 8020904:	f010 0008 	ands.w	r0, r0, #8
 8020908:	d102      	bne.n	8020910 <toggle_single_block+0x40>
}
 802090a:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 802090c:	2004      	movs	r0, #4
 802090e:	e7f5      	b.n	80208fc <toggle_single_block+0x2c>
    return hal.signals_cap.single_block ? Status_InvalidStatement : Status_OK;
 8020910:	2003      	movs	r0, #3
 8020912:	e7fa      	b.n	802090a <toggle_single_block+0x3a>
 8020914:	200011c0 	.word	0x200011c0
 8020918:	200014a0 	.word	0x200014a0
 802091c:	200013a8 	.word	0x200013a8

08020920 <toggle_block_delete>:

static status_code_t toggle_block_delete (sys_state_t state, char *args)
{
 8020920:	b508      	push	{r3, lr}
    if(!hal.signals_cap.block_delete) {
 8020922:	4b10      	ldr	r3, [pc, #64]	@ (8020964 <toggle_block_delete+0x44>)
 8020924:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8020928:	f013 0f10 	tst.w	r3, #16
 802092c:	d10f      	bne.n	802094e <toggle_block_delete+0x2e>
        sys.flags.block_delete_enabled = !sys.flags.block_delete_enabled;
 802092e:	4a0e      	ldr	r2, [pc, #56]	@ (8020968 <toggle_block_delete+0x48>)
 8020930:	7d93      	ldrb	r3, [r2, #22]
 8020932:	0919      	lsrs	r1, r3, #4
 8020934:	f081 0101 	eor.w	r1, r1, #1
 8020938:	f361 1304 	bfi	r3, r1, #4, #1
 802093c:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802093e:	4b0b      	ldr	r3, [pc, #44]	@ (802096c <toggle_block_delete+0x4c>)
 8020940:	68db      	ldr	r3, [r3, #12]
 8020942:	7d92      	ldrb	r2, [r2, #22]
 8020944:	f012 0f10 	tst.w	r2, #16
 8020948:	d008      	beq.n	802095c <toggle_block_delete+0x3c>
 802094a:	2004      	movs	r0, #4
 802094c:	4798      	blx	r3
    }

    return hal.signals_cap.block_delete ? Status_InvalidStatement : Status_OK;
 802094e:	4b05      	ldr	r3, [pc, #20]	@ (8020964 <toggle_block_delete+0x44>)
 8020950:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 8020954:	f010 0010 	ands.w	r0, r0, #16
 8020958:	d102      	bne.n	8020960 <toggle_block_delete+0x40>
}
 802095a:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802095c:	2005      	movs	r0, #5
 802095e:	e7f5      	b.n	802094c <toggle_block_delete+0x2c>
    return hal.signals_cap.block_delete ? Status_InvalidStatement : Status_OK;
 8020960:	2003      	movs	r0, #3
 8020962:	e7fa      	b.n	802095a <toggle_block_delete+0x3a>
 8020964:	200011c0 	.word	0x200011c0
 8020968:	200014a0 	.word	0x200014a0
 802096c:	200013a8 	.word	0x200013a8

08020970 <toggle_optional_stop>:

static status_code_t toggle_optional_stop (sys_state_t state, char *args)
{
 8020970:	b508      	push	{r3, lr}
    if(!hal.signals_cap.stop_disable) {
 8020972:	4b10      	ldr	r3, [pc, #64]	@ (80209b4 <toggle_optional_stop+0x44>)
 8020974:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8020978:	f013 0f20 	tst.w	r3, #32
 802097c:	d10f      	bne.n	802099e <toggle_optional_stop+0x2e>
        sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 802097e:	4a0e      	ldr	r2, [pc, #56]	@ (80209b8 <toggle_optional_stop+0x48>)
 8020980:	7d93      	ldrb	r3, [r2, #22]
 8020982:	0999      	lsrs	r1, r3, #6
 8020984:	f081 0101 	eor.w	r1, r1, #1
 8020988:	f361 1386 	bfi	r3, r1, #6, #1
 802098c:	7593      	strb	r3, [r2, #22]
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 802098e:	4b0b      	ldr	r3, [pc, #44]	@ (80209bc <toggle_optional_stop+0x4c>)
 8020990:	68db      	ldr	r3, [r3, #12]
 8020992:	7d92      	ldrb	r2, [r2, #22]
 8020994:	f012 0f10 	tst.w	r2, #16
 8020998:	d008      	beq.n	80209ac <toggle_optional_stop+0x3c>
 802099a:	2004      	movs	r0, #4
 802099c:	4798      	blx	r3
    }

    return hal.signals_cap.stop_disable ? Status_InvalidStatement : Status_OK;
 802099e:	4b05      	ldr	r3, [pc, #20]	@ (80209b4 <toggle_optional_stop+0x44>)
 80209a0:	f893 01dc 	ldrb.w	r0, [r3, #476]	@ 0x1dc
 80209a4:	f010 0020 	ands.w	r0, r0, #32
 80209a8:	d102      	bne.n	80209b0 <toggle_optional_stop+0x40>
}
 80209aa:	bd08      	pop	{r3, pc}
        grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 80209ac:	2005      	movs	r0, #5
 80209ae:	e7f5      	b.n	802099c <toggle_optional_stop+0x2c>
    return hal.signals_cap.stop_disable ? Status_InvalidStatement : Status_OK;
 80209b0:	2003      	movs	r0, #3
 80209b2:	e7fa      	b.n	80209aa <toggle_optional_stop+0x3a>
 80209b4:	200011c0 	.word	0x200011c0
 80209b8:	200014a0 	.word	0x200014a0
 80209bc:	200013a8 	.word	0x200013a8

080209c0 <enter_sleep>:
    return go_home(state, (axes_signals_t){V_AXIS_BIT});
}
#endif

static status_code_t enter_sleep (sys_state_t state, char *args)
{
 80209c0:	b508      	push	{r3, lr}
    if(!settings.flags.sleep_enable)
 80209c2:	4b0a      	ldr	r3, [pc, #40]	@ (80209ec <enter_sleep+0x2c>)
 80209c4:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80209c8:	f013 0f08 	tst.w	r3, #8
 80209cc:	d009      	beq.n	80209e2 <enter_sleep+0x22>
        return Status_InvalidStatement;
    else if(!(state == STATE_IDLE || state == STATE_ALARM))
 80209ce:	2801      	cmp	r0, #1
 80209d0:	d809      	bhi.n	80209e6 <enter_sleep+0x26>
        return Status_IdleError;
    else
        system_set_exec_state_flag(EXEC_SLEEP); // Set to execute enter_sleep mode immediately
 80209d2:	4b07      	ldr	r3, [pc, #28]	@ (80209f0 <enter_sleep+0x30>)
 80209d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80209d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80209da:	4806      	ldr	r0, [pc, #24]	@ (80209f4 <enter_sleep+0x34>)
 80209dc:	4798      	blx	r3

    return Status_OK;
 80209de:	2000      	movs	r0, #0
}
 80209e0:	bd08      	pop	{r3, pc}
        return Status_InvalidStatement;
 80209e2:	2003      	movs	r0, #3
 80209e4:	e7fc      	b.n	80209e0 <enter_sleep+0x20>
        return Status_IdleError;
 80209e6:	2008      	movs	r0, #8
 80209e8:	e7fa      	b.n	80209e0 <enter_sleep+0x20>
 80209ea:	bf00      	nop
 80209ec:	20001bd8 	.word	0x20001bd8
 80209f0:	200011c0 	.word	0x200011c0
 80209f4:	200014e8 	.word	0x200014e8

080209f8 <help_rtc>:
    return NULL;
}

const char *help_rtc (const char *cmd)
{
    if(hal.rtc.get_datetime) {
 80209f8:	4b08      	ldr	r3, [pc, #32]	@ (8020a1c <help_rtc+0x24>)
 80209fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80209fe:	b15b      	cbz	r3, 8020a18 <help_rtc+0x20>
{
 8020a00:	b510      	push	{r4, lr}
        hal.stream.write("$RTC - output current time." ASCII_EOL);
 8020a02:	4c06      	ldr	r4, [pc, #24]	@ (8020a1c <help_rtc+0x24>)
 8020a04:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8020a08:	4805      	ldr	r0, [pc, #20]	@ (8020a20 <help_rtc+0x28>)
 8020a0a:	4798      	blx	r3
        hal.stream.write("$RTC=<ISO8601 datetime> - set current time." ASCII_EOL);
 8020a0c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8020a10:	4804      	ldr	r0, [pc, #16]	@ (8020a24 <help_rtc+0x2c>)
 8020a12:	4798      	blx	r3
    }

    return NULL;
}
 8020a14:	2000      	movs	r0, #0
 8020a16:	bd10      	pop	{r4, pc}
 8020a18:	2000      	movs	r0, #0
 8020a1a:	4770      	bx	lr
 8020a1c:	200011c0 	.word	0x200011c0
 8020a20:	08030168 	.word	0x08030168
 8020a24:	08030188 	.word	0x08030188

08020a28 <help_pins>:
    return NULL;
}

const char *help_pins (const char *cmd)
{
    return hal.enumerate_pins ? "enumerate pin bindings" : NULL;
 8020a28:	4b03      	ldr	r3, [pc, #12]	@ (8020a38 <help_pins+0x10>)
 8020a2a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8020a2e:	b10b      	cbz	r3, 8020a34 <help_pins+0xc>
 8020a30:	4802      	ldr	r0, [pc, #8]	@ (8020a3c <help_pins+0x14>)
 8020a32:	4770      	bx	lr
 8020a34:	2000      	movs	r0, #0
}
 8020a36:	4770      	bx	lr
 8020a38:	200011c0 	.word	0x200011c0
 8020a3c:	080301b8 	.word	0x080301b8

08020a40 <help_pin_state>:

#ifndef NO_SETTINGS_DESCRIPTIONS

const char *help_pin_state (const char *cmd)
{
    return hal.port.get_pin_info ? "output auxillary pin states" : NULL;
 8020a40:	4b03      	ldr	r3, [pc, #12]	@ (8020a50 <help_pin_state+0x10>)
 8020a42:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8020a46:	b10b      	cbz	r3, 8020a4c <help_pin_state+0xc>
 8020a48:	4802      	ldr	r0, [pc, #8]	@ (8020a54 <help_pin_state+0x14>)
 8020a4a:	4770      	bx	lr
 8020a4c:	2000      	movs	r0, #0
}
 8020a4e:	4770      	bx	lr
 8020a50:	200011c0 	.word	0x200011c0
 8020a54:	080301d0 	.word	0x080301d0

08020a58 <help_switches>:

const char *help_switches (const char *cmd)
{
    const char *help = NULL;

    switch(*cmd) {
 8020a58:	7803      	ldrb	r3, [r0, #0]
 8020a5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8020a5c:	d00f      	beq.n	8020a7e <help_switches+0x26>
 8020a5e:	2b53      	cmp	r3, #83	@ 0x53
 8020a60:	d017      	beq.n	8020a92 <help_switches+0x3a>
 8020a62:	2b42      	cmp	r3, #66	@ 0x42
 8020a64:	d001      	beq.n	8020a6a <help_switches+0x12>
 8020a66:	2000      	movs	r0, #0
 8020a68:	4770      	bx	lr

        case 'B':
            if(!hal.signals_cap.block_delete)
 8020a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8020aa8 <help_switches+0x50>)
 8020a6c:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8020a70:	f013 0f10 	tst.w	r3, #16
 8020a74:	d101      	bne.n	8020a7a <help_switches+0x22>
                help = "toggle block delete switch";
 8020a76:	480d      	ldr	r0, [pc, #52]	@ (8020aac <help_switches+0x54>)
 8020a78:	4770      	bx	lr
    const char *help = NULL;
 8020a7a:	2000      	movs	r0, #0
 8020a7c:	4770      	bx	lr
            break;

        case 'O':
            if(!hal.signals_cap.stop_disable)
 8020a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8020aa8 <help_switches+0x50>)
 8020a80:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8020a84:	f013 0f20 	tst.w	r3, #32
 8020a88:	d101      	bne.n	8020a8e <help_switches+0x36>
                help = "toggle optional stop switch (M1)";
 8020a8a:	4809      	ldr	r0, [pc, #36]	@ (8020ab0 <help_switches+0x58>)
 8020a8c:	4770      	bx	lr
    const char *help = NULL;
 8020a8e:	2000      	movs	r0, #0
 8020a90:	4770      	bx	lr
            break;

        case 'S':
            if(!hal.signals_cap.single_block)
 8020a92:	4b05      	ldr	r3, [pc, #20]	@ (8020aa8 <help_switches+0x50>)
 8020a94:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
 8020a98:	f013 0f08 	tst.w	r3, #8
 8020a9c:	d101      	bne.n	8020aa2 <help_switches+0x4a>
                help = "toggle single stepping switch";
 8020a9e:	4805      	ldr	r0, [pc, #20]	@ (8020ab4 <help_switches+0x5c>)
            break;
    }

    return help;
}
 8020aa0:	4770      	bx	lr
    const char *help = NULL;
 8020aa2:	2000      	movs	r0, #0
 8020aa4:	4770      	bx	lr
 8020aa6:	bf00      	nop
 8020aa8:	200011c0 	.word	0x200011c0
 8020aac:	080301ec 	.word	0x080301ec
 8020ab0:	08030208 	.word	0x08030208
 8020ab4:	0803022c 	.word	0x0803022c

08020ab8 <help_homing>:

const char *help_homing (const char *cmd)
{
 8020ab8:	b508      	push	{r3, lr}
    if(settings.homing.flags.enabled)
 8020aba:	4b0c      	ldr	r3, [pc, #48]	@ (8020aec <help_homing+0x34>)
 8020abc:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8020ac0:	f013 0f01 	tst.w	r3, #1
 8020ac4:	d004      	beq.n	8020ad0 <help_homing+0x18>
        hal.stream.write("$H - home configured axes." ASCII_EOL);
 8020ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8020af0 <help_homing+0x38>)
 8020ac8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020acc:	4809      	ldr	r0, [pc, #36]	@ (8020af4 <help_homing+0x3c>)
 8020ace:	4798      	blx	r3

    if(settings.homing.flags.single_axis_commands)
 8020ad0:	4b06      	ldr	r3, [pc, #24]	@ (8020aec <help_homing+0x34>)
 8020ad2:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8020ad6:	f013 0f02 	tst.w	r3, #2
 8020ada:	d004      	beq.n	8020ae6 <help_homing+0x2e>
        hal.stream.write("$H<axisletter> - home single axis." ASCII_EOL);
 8020adc:	4b04      	ldr	r3, [pc, #16]	@ (8020af0 <help_homing+0x38>)
 8020ade:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020ae2:	4805      	ldr	r0, [pc, #20]	@ (8020af8 <help_homing+0x40>)
 8020ae4:	4798      	blx	r3

    return NULL;
}
 8020ae6:	2000      	movs	r0, #0
 8020ae8:	bd08      	pop	{r3, pc}
 8020aea:	bf00      	nop
 8020aec:	20001bd8 	.word	0x20001bd8
 8020af0:	200011c0 	.word	0x200011c0
 8020af4:	0803024c 	.word	0x0803024c
 8020af8:	0803026c 	.word	0x0803026c

08020afc <jog>:
{
 8020afc:	b508      	push	{r3, lr}
    if(!(state == STATE_IDLE || (state & (STATE_JOG|STATE_TOOL_CHANGE))))
 8020afe:	b110      	cbz	r0, 8020b06 <jog+0xa>
 8020b00:	f410 7f08 	tst.w	r0, #544	@ 0x220
 8020b04:	d007      	beq.n	8020b16 <jog+0x1a>
    if(args != NULL) {
 8020b06:	b141      	cbz	r1, 8020b1a <jog+0x1e>
        *(--args) = '=';
 8020b08:	233d      	movs	r3, #61	@ 0x3d
 8020b0a:	f801 3c01 	strb.w	r3, [r1, #-1]
    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8020b0e:	1ec8      	subs	r0, r1, #3
 8020b10:	f7ec fb34 	bl	800d17c <gc_execute_block>
}
 8020b14:	bd08      	pop	{r3, pc}
         return Status_IdleError;
 8020b16:	2008      	movs	r0, #8
 8020b18:	e7fc      	b.n	8020b14 <jog+0x18>
    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8020b1a:	2003      	movs	r0, #3
 8020b1c:	e7fa      	b.n	8020b14 <jog+0x18>
	...

08020b20 <help_rst>:
{
 8020b20:	b510      	push	{r4, lr}
    hal.stream.write("$RST=* - restore/reset all settings." ASCII_EOL);
 8020b22:	4c10      	ldr	r4, [pc, #64]	@ (8020b64 <help_rst+0x44>)
 8020b24:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8020b28:	480f      	ldr	r0, [pc, #60]	@ (8020b68 <help_rst+0x48>)
 8020b2a:	4798      	blx	r3
    hal.stream.write("$RST=$ - restore default settings." ASCII_EOL);
 8020b2c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8020b30:	480e      	ldr	r0, [pc, #56]	@ (8020b6c <help_rst+0x4c>)
 8020b32:	4798      	blx	r3
    if(settings_get_details()->next)
 8020b34:	f7fb fef2 	bl	801c91c <settings_get_details>
 8020b38:	6983      	ldr	r3, [r0, #24]
 8020b3a:	b11b      	cbz	r3, 8020b44 <help_rst+0x24>
        hal.stream.write("$RST=& - restore driver and plugin default settings." ASCII_EOL);
 8020b3c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8020b40:	480b      	ldr	r0, [pc, #44]	@ (8020b70 <help_rst+0x50>)
 8020b42:	4798      	blx	r3
    if(grbl.tool_table.n_tools)
 8020b44:	4b0b      	ldr	r3, [pc, #44]	@ (8020b74 <help_rst+0x54>)
 8020b46:	699b      	ldr	r3, [r3, #24]
 8020b48:	b133      	cbz	r3, 8020b58 <help_rst+0x38>
        hal.stream.write("$RST=# - reset offsets and tool data." ASCII_EOL);
 8020b4a:	4b06      	ldr	r3, [pc, #24]	@ (8020b64 <help_rst+0x44>)
 8020b4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020b50:	4809      	ldr	r0, [pc, #36]	@ (8020b78 <help_rst+0x58>)
 8020b52:	4798      	blx	r3
}
 8020b54:	2000      	movs	r0, #0
 8020b56:	bd10      	pop	{r4, pc}
        hal.stream.write("$RST=# - reset offsets." ASCII_EOL);
 8020b58:	4b02      	ldr	r3, [pc, #8]	@ (8020b64 <help_rst+0x44>)
 8020b5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020b5e:	4807      	ldr	r0, [pc, #28]	@ (8020b7c <help_rst+0x5c>)
 8020b60:	4798      	blx	r3
 8020b62:	e7f7      	b.n	8020b54 <help_rst+0x34>
 8020b64:	200011c0 	.word	0x200011c0
 8020b68:	08030294 	.word	0x08030294
 8020b6c:	080302bc 	.word	0x080302bc
 8020b70:	080302e4 	.word	0x080302e4
 8020b74:	200013a8 	.word	0x200013a8
 8020b78:	0803031c 	.word	0x0803031c
 8020b7c:	08030344 	.word	0x08030344

08020b80 <help_spindle>:
{
 8020b80:	b538      	push	{r3, r4, r5, lr}
 8020b82:	4604      	mov	r4, r0
    spindle_ptrs_t *spindle = gc_spindle_get();
 8020b84:	f7ec f9de 	bl	800cf44 <gc_spindle_get>
 8020b88:	4605      	mov	r5, r0
    if(cmd[1] == 'R' && spindle->reset_data)
 8020b8a:	7863      	ldrb	r3, [r4, #1]
 8020b8c:	2b52      	cmp	r3, #82	@ 0x52
 8020b8e:	d004      	beq.n	8020b9a <help_spindle+0x1a>
    if(cmd[1] == 'D' && spindle->get_data)
 8020b90:	7863      	ldrb	r3, [r4, #1]
 8020b92:	2b44      	cmp	r3, #68	@ 0x44
 8020b94:	d00a      	beq.n	8020bac <help_spindle+0x2c>
}
 8020b96:	2000      	movs	r0, #0
 8020b98:	bd38      	pop	{r3, r4, r5, pc}
    if(cmd[1] == 'R' && spindle->reset_data)
 8020b9a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d0f7      	beq.n	8020b90 <help_spindle+0x10>
        hal.stream.write("$SR - reset spindle encoder data." ASCII_EOL);
 8020ba0:	4b07      	ldr	r3, [pc, #28]	@ (8020bc0 <help_spindle+0x40>)
 8020ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020ba6:	4807      	ldr	r0, [pc, #28]	@ (8020bc4 <help_spindle+0x44>)
 8020ba8:	4798      	blx	r3
 8020baa:	e7f1      	b.n	8020b90 <help_spindle+0x10>
    if(cmd[1] == 'D' && spindle->get_data)
 8020bac:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8020bae:	2b00      	cmp	r3, #0
 8020bb0:	d0f1      	beq.n	8020b96 <help_spindle+0x16>
        hal.stream.write("$SD - output spindle encoder data." ASCII_EOL);
 8020bb2:	4b03      	ldr	r3, [pc, #12]	@ (8020bc0 <help_spindle+0x40>)
 8020bb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020bb8:	4803      	ldr	r0, [pc, #12]	@ (8020bc8 <help_spindle+0x48>)
 8020bba:	4798      	blx	r3
 8020bbc:	e7eb      	b.n	8020b96 <help_spindle+0x16>
 8020bbe:	bf00      	nop
 8020bc0:	200011c0 	.word	0x200011c0
 8020bc4:	08030360 	.word	0x08030360
 8020bc8:	08030384 	.word	0x08030384

08020bcc <spindle_reset_data>:
{
 8020bcc:	b510      	push	{r4, lr}
    spindle_ptrs_t *spindle = gc_spindle_get();
 8020bce:	f7ec f9b9 	bl	800cf44 <gc_spindle_get>
 8020bd2:	4604      	mov	r4, r0
    if(spindle->reset_data)
 8020bd4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8020bd6:	b103      	cbz	r3, 8020bda <spindle_reset_data+0xe>
        spindle->reset_data();
 8020bd8:	4798      	blx	r3
    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 8020bda:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8020bdc:	b10b      	cbz	r3, 8020be2 <spindle_reset_data+0x16>
 8020bde:	2000      	movs	r0, #0
}
 8020be0:	bd10      	pop	{r4, pc}
    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 8020be2:	2003      	movs	r0, #3
 8020be4:	e7fc      	b.n	8020be0 <spindle_reset_data+0x14>
	...

08020be8 <rtc_action>:
{
 8020be8:	b508      	push	{r3, lr}
    if(args) {
 8020bea:	b149      	cbz	r1, 8020c00 <rtc_action+0x18>
 8020bec:	4608      	mov	r0, r1
        struct tm *time = get_datetime(args);
 8020bee:	f7f4 fd51 	bl	8015694 <get_datetime>
        if(time)
 8020bf2:	b140      	cbz	r0, 8020c06 <rtc_action+0x1e>
            hal.rtc.set_datetime(time);
 8020bf4:	4a05      	ldr	r2, [pc, #20]	@ (8020c0c <rtc_action+0x24>)
 8020bf6:	f8d2 2110 	ldr.w	r2, [r2, #272]	@ 0x110
 8020bfa:	4790      	blx	r2
    status_code_t retval = Status_OK;
 8020bfc:	2000      	movs	r0, #0
}
 8020bfe:	bd08      	pop	{r3, pc}
        retval = report_time();
 8020c00:	f7fa fe0a 	bl	801b818 <report_time>
 8020c04:	e7fb      	b.n	8020bfe <rtc_action+0x16>
            retval = Status_BadNumberFormat;
 8020c06:	2002      	movs	r0, #2
 8020c08:	e7f9      	b.n	8020bfe <rtc_action+0x16>
 8020c0a:	bf00      	nop
 8020c0c:	200011c0 	.word	0x200011c0

08020c10 <pin_state>:
{
 8020c10:	b508      	push	{r3, lr}
    return report_pin_states(state, args);
 8020c12:	f7fa fc0b 	bl	801b42c <report_pin_states>
}
 8020c16:	bd08      	pop	{r3, pc}

08020c18 <enumerate_pins>:
{
 8020c18:	b508      	push	{r3, lr}
    return report_pins(state, args);
 8020c1a:	f7fa fbb9 	bl	801b390 <report_pins>
}
 8020c1e:	bd08      	pop	{r3, pc}

08020c20 <enumerate_alarms_grblformatted>:
{
 8020c20:	b508      	push	{r3, lr}
    return report_alarm_details(true);
 8020c22:	2001      	movs	r0, #1
 8020c24:	f7fa f94c 	bl	801aec0 <report_alarm_details>
}
 8020c28:	bd08      	pop	{r3, pc}

08020c2a <enumerate_alarms>:
{
 8020c2a:	b508      	push	{r3, lr}
    return report_alarm_details(false);
 8020c2c:	2000      	movs	r0, #0
 8020c2e:	f7fa f947 	bl	801aec0 <report_alarm_details>
}
 8020c32:	bd08      	pop	{r3, pc}

08020c34 <enumerate_errors_grblformatted>:
{
 8020c34:	b508      	push	{r3, lr}
    return report_error_details(true);
 8020c36:	2001      	movs	r0, #1
 8020c38:	f7fa f998 	bl	801af6c <report_error_details>
}
 8020c3c:	bd08      	pop	{r3, pc}

08020c3e <enumerate_errors>:
{
 8020c3e:	b508      	push	{r3, lr}
    return report_error_details(false);
 8020c40:	2000      	movs	r0, #0
 8020c42:	f7fa f993 	bl	801af6c <report_error_details>
}
 8020c46:	bd08      	pop	{r3, pc}

08020c48 <enumerate_groups>:
{
 8020c48:	b508      	push	{r3, lr}
    return report_setting_group_details(true, NULL);
 8020c4a:	2100      	movs	r1, #0
 8020c4c:	2001      	movs	r0, #1
 8020c4e:	f7fa f9e3 	bl	801b018 <report_setting_group_details>
}
 8020c52:	bd08      	pop	{r3, pc}

08020c54 <enumerate_all>:
{
 8020c54:	b508      	push	{r3, lr}
    report_alarm_details(false);
 8020c56:	2000      	movs	r0, #0
 8020c58:	f7fa f932 	bl	801aec0 <report_alarm_details>
    report_error_details(false);
 8020c5c:	2000      	movs	r0, #0
 8020c5e:	f7fa f985 	bl	801af6c <report_error_details>
    report_setting_group_details(true, NULL);
 8020c62:	2100      	movs	r1, #0
 8020c64:	2001      	movs	r0, #1
 8020c66:	f7fa f9d7 	bl	801b018 <report_setting_group_details>
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 8020c6a:	2200      	movs	r2, #0
 8020c6c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8020c70:	4610      	mov	r0, r2
 8020c72:	f7fa f867 	bl	801ad44 <report_settings_details>
}
 8020c76:	bd08      	pop	{r3, pc}

08020c78 <enumerate_settings_halformatted>:
{
 8020c78:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_grblHAL, Setting_SettingsAll, Group_All);
 8020c7a:	2200      	movs	r2, #0
 8020c7c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8020c80:	2003      	movs	r0, #3
 8020c82:	f7fa f85f 	bl	801ad44 <report_settings_details>
}
 8020c86:	bd08      	pop	{r3, pc}

08020c88 <enumerate_settings_grblformatted>:
{
 8020c88:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_Grbl, Setting_SettingsAll, Group_All);
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8020c90:	2002      	movs	r0, #2
 8020c92:	f7fa f857 	bl	801ad44 <report_settings_details>
}
 8020c96:	bd08      	pop	{r3, pc}

08020c98 <enumerate_settings>:
{
 8020c98:	b508      	push	{r3, lr}
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 8020c9a:	2200      	movs	r2, #0
 8020c9c:	f240 21e5 	movw	r1, #741	@ 0x2e5
 8020ca0:	4610      	mov	r0, r2
 8020ca2:	f7fa f84f 	bl	801ad44 <report_settings_details>
}
 8020ca6:	bd08      	pop	{r3, pc}

08020ca8 <set_startup_line>:
{
 8020ca8:	b570      	push	{r4, r5, r6, lr}
 8020caa:	460b      	mov	r3, r1
 8020cac:	4615      	mov	r5, r2
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 8020cae:	b118      	cbz	r0, 8020cb8 <set_startup_line+0x10>
 8020cb0:	f240 1103 	movw	r1, #259	@ 0x103
 8020cb4:	4208      	tst	r0, r1
 8020cb6:	d017      	beq.n	8020ce8 <set_startup_line+0x40>
    if(args == NULL)
 8020cb8:	b1c3      	cbz	r3, 8020cec <set_startup_line+0x44>
    args = gc_normalize_block(args, NULL);
 8020cba:	2100      	movs	r1, #0
 8020cbc:	4618      	mov	r0, r3
 8020cbe:	f7ec f9bb 	bl	800d038 <gc_normalize_block>
 8020cc2:	4604      	mov	r4, r0
    if(strlen(args) >= (sizeof(stored_line_t) - 1))
 8020cc4:	f7e7 fa1c 	bl	8008100 <strlen>
 8020cc8:	2844      	cmp	r0, #68	@ 0x44
 8020cca:	d902      	bls.n	8020cd2 <set_startup_line+0x2a>
        retval = Status_Overflow;
 8020ccc:	260b      	movs	r6, #11
}
 8020cce:	4630      	mov	r0, r6
 8020cd0:	bd70      	pop	{r4, r5, r6, pc}
    else if ((retval = gc_execute_block(args)) == Status_OK) // Execute gcode block to ensure block is valid.
 8020cd2:	4620      	mov	r0, r4
 8020cd4:	f7ec fa52 	bl	800d17c <gc_execute_block>
 8020cd8:	4606      	mov	r6, r0
 8020cda:	2800      	cmp	r0, #0
 8020cdc:	d1f7      	bne.n	8020cce <set_startup_line+0x26>
        settings_write_startup_line(lnr, args);
 8020cde:	4621      	mov	r1, r4
 8020ce0:	b2e8      	uxtb	r0, r5
 8020ce2:	f7fc f8dd 	bl	801cea0 <settings_write_startup_line>
 8020ce6:	e7f2      	b.n	8020cce <set_startup_line+0x26>
        return Status_IdleError;
 8020ce8:	2608      	movs	r6, #8
 8020cea:	e7f0      	b.n	8020cce <set_startup_line+0x26>
        return Status_InvalidStatement;
 8020cec:	2603      	movs	r6, #3
 8020cee:	e7ee      	b.n	8020cce <set_startup_line+0x26>

08020cf0 <set_startup_line1>:
{
 8020cf0:	b508      	push	{r3, lr}
    return set_startup_line(state, args, 1);
 8020cf2:	2201      	movs	r2, #1
 8020cf4:	f7ff ffd8 	bl	8020ca8 <set_startup_line>
}
 8020cf8:	bd08      	pop	{r3, pc}

08020cfa <set_startup_line0>:
{
 8020cfa:	b508      	push	{r3, lr}
    return set_startup_line(state, args, 0);
 8020cfc:	2200      	movs	r2, #0
 8020cfe:	f7ff ffd3 	bl	8020ca8 <set_startup_line>
}
 8020d02:	bd08      	pop	{r3, pc}

08020d04 <output_startup_lines>:
{
 8020d04:	b530      	push	{r4, r5, lr}
 8020d06:	b093      	sub	sp, #76	@ 0x4c
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 8020d08:	4604      	mov	r4, r0
 8020d0a:	b150      	cbz	r0, 8020d22 <output_startup_lines+0x1e>
 8020d0c:	f240 1303 	movw	r3, #259	@ 0x103
 8020d10:	4218      	tst	r0, r3
 8020d12:	d017      	beq.n	8020d44 <output_startup_lines+0x40>
 8020d14:	2400      	movs	r4, #0
 8020d16:	e004      	b.n	8020d22 <output_startup_lines+0x1e>
            report_startup_line(counter, line);
 8020d18:	4669      	mov	r1, sp
 8020d1a:	4628      	mov	r0, r5
 8020d1c:	f7f8 fe9a 	bl	8019a54 <report_startup_line>
    for (counter = 0; counter < N_STARTUP_LINE; counter++) {
 8020d20:	3401      	adds	r4, #1
 8020d22:	2c01      	cmp	r4, #1
 8020d24:	d80b      	bhi.n	8020d3e <output_startup_lines+0x3a>
        if (!(settings_read_startup_line(counter, line)))
 8020d26:	b2e5      	uxtb	r5, r4
 8020d28:	4669      	mov	r1, sp
 8020d2a:	4628      	mov	r0, r5
 8020d2c:	f7fc f8dc 	bl	801cee8 <settings_read_startup_line>
 8020d30:	2800      	cmp	r0, #0
 8020d32:	d1f1      	bne.n	8020d18 <output_startup_lines+0x14>
            grbl.report.status_message(Status_SettingReadFail);
 8020d34:	4b04      	ldr	r3, [pc, #16]	@ (8020d48 <output_startup_lines+0x44>)
 8020d36:	689b      	ldr	r3, [r3, #8]
 8020d38:	2007      	movs	r0, #7
 8020d3a:	4798      	blx	r3
 8020d3c:	e7f0      	b.n	8020d20 <output_startup_lines+0x1c>
    return Status_OK;
 8020d3e:	2000      	movs	r0, #0
}
 8020d40:	b013      	add	sp, #76	@ 0x4c
 8020d42:	bd30      	pop	{r4, r5, pc}
        return Status_IdleError;
 8020d44:	2008      	movs	r0, #8
 8020d46:	e7fb      	b.n	8020d40 <output_startup_lines+0x3c>
 8020d48:	200013a8 	.word	0x200013a8

08020d4c <settings_reset>:
{
 8020d4c:	b508      	push	{r3, lr}
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))))
 8020d4e:	b118      	cbz	r0, 8020d58 <settings_reset+0xc>
 8020d50:	f240 1201 	movw	r2, #257	@ 0x101
 8020d54:	4210      	tst	r0, r2
 8020d56:	d022      	beq.n	8020d9e <settings_reset+0x52>
    else switch (*args) {
 8020d58:	780b      	ldrb	r3, [r1, #0]
 8020d5a:	3b23      	subs	r3, #35	@ 0x23
 8020d5c:	2b07      	cmp	r3, #7
 8020d5e:	d820      	bhi.n	8020da2 <settings_reset+0x56>
 8020d60:	e8df f003 	tbb	[pc, r3]
 8020d64:	0f1f0409 	.word	0x0f1f0409
 8020d68:	0c1f1f1f 	.word	0x0c1f1f1f
            restore.defaults = On;
 8020d6c:	f04f 0301 	mov.w	r3, #1
    if(retval == Status_OK && restore.mask) {
 8020d70:	b2d8      	uxtb	r0, r3
 8020d72:	b948      	cbnz	r0, 8020d88 <settings_reset+0x3c>
}
 8020d74:	bd08      	pop	{r3, pc}
            restore.parameters = On;
 8020d76:	f04f 0302 	mov.w	r3, #2
    if(retval == Status_OK && restore.mask) {
 8020d7a:	e7f9      	b.n	8020d70 <settings_reset+0x24>
            restore.mask = settings_all.mask;
 8020d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8020da8 <settings_reset+0x5c>)
 8020d7e:	781b      	ldrb	r3, [r3, #0]
    if(retval == Status_OK && restore.mask) {
 8020d80:	e7f6      	b.n	8020d70 <settings_reset+0x24>
            restore.driver_parameters = On;
 8020d82:	f04f 0310 	mov.w	r3, #16
    if(retval == Status_OK && restore.mask) {
 8020d86:	e7f3      	b.n	8020d70 <settings_reset+0x24>
        settings_restore(restore);
 8020d88:	4618      	mov	r0, r3
 8020d8a:	f7fc f993 	bl	801d0b4 <settings_restore>
        grbl.report.feedback_message(Message_RestoreDefaults);
 8020d8e:	4b07      	ldr	r3, [pc, #28]	@ (8020dac <settings_reset+0x60>)
 8020d90:	68db      	ldr	r3, [r3, #12]
 8020d92:	2009      	movs	r0, #9
 8020d94:	4798      	blx	r3
        mc_reset(); // Force reset to ensure settings are initialized correctly.
 8020d96:	f7f3 fc23 	bl	80145e0 <mc_reset>
 8020d9a:	2000      	movs	r0, #0
 8020d9c:	e7ea      	b.n	8020d74 <settings_reset+0x28>
        retval = Status_IdleError;
 8020d9e:	2008      	movs	r0, #8
 8020da0:	e7e8      	b.n	8020d74 <settings_reset+0x28>
    else switch (*args) {
 8020da2:	2003      	movs	r0, #3
 8020da4:	e7e6      	b.n	8020d74 <settings_reset+0x28>
 8020da6:	bf00      	nop
 8020da8:	08030058 	.word	0x08030058
 8020dac:	200013a8 	.word	0x200013a8

08020db0 <output_all_build_info>:
{
 8020db0:	b500      	push	{lr}
 8020db2:	b093      	sub	sp, #76	@ 0x4c
    settings_read_build_info(info);
 8020db4:	4668      	mov	r0, sp
 8020db6:	f7fc f857 	bl	801ce68 <settings_read_build_info>
    report_build_info(info, true);
 8020dba:	2101      	movs	r1, #1
 8020dbc:	4668      	mov	r0, sp
 8020dbe:	f7f8 fe87 	bl	8019ad0 <report_build_info>
}
 8020dc2:	2000      	movs	r0, #0
 8020dc4:	b013      	add	sp, #76	@ 0x4c
 8020dc6:	f85d fb04 	ldr.w	pc, [sp], #4

08020dca <build_info>:
{
 8020dca:	b510      	push	{r4, lr}
 8020dcc:	b092      	sub	sp, #72	@ 0x48
 8020dce:	460c      	mov	r4, r1
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE))))
 8020dd0:	b118      	cbz	r0, 8020dda <build_info+0x10>
 8020dd2:	f240 1283 	movw	r2, #387	@ 0x183
 8020dd6:	4210      	tst	r0, r2
 8020dd8:	d014      	beq.n	8020e04 <build_info+0x3a>
    if (args == NULL) {
 8020dda:	b154      	cbz	r4, 8020df2 <build_info+0x28>
    else if (strlen(args) < (sizeof(stored_line_t) - 1))
 8020ddc:	4620      	mov	r0, r4
 8020dde:	f7e7 f98f 	bl	8008100 <strlen>
 8020de2:	2844      	cmp	r0, #68	@ 0x44
 8020de4:	d810      	bhi.n	8020e08 <build_info+0x3e>
        settings_write_build_info(args);
 8020de6:	4620      	mov	r0, r4
 8020de8:	f7fc f82c 	bl	801ce44 <settings_write_build_info>
    return Status_OK;
 8020dec:	2000      	movs	r0, #0
}
 8020dee:	b012      	add	sp, #72	@ 0x48
 8020df0:	bd10      	pop	{r4, pc}
        settings_read_build_info(info);
 8020df2:	4668      	mov	r0, sp
 8020df4:	f7fc f838 	bl	801ce68 <settings_read_build_info>
        report_build_info(info, false);
 8020df8:	2100      	movs	r1, #0
 8020dfa:	4668      	mov	r0, sp
 8020dfc:	f7f8 fe68 	bl	8019ad0 <report_build_info>
    return Status_OK;
 8020e00:	2000      	movs	r0, #0
 8020e02:	e7f4      	b.n	8020dee <build_info+0x24>
        return Status_IdleError;
 8020e04:	2008      	movs	r0, #8
 8020e06:	e7f2      	b.n	8020dee <build_info+0x24>
        return Status_InvalidStatement;
 8020e08:	2003      	movs	r0, #3
 8020e0a:	e7f0      	b.n	8020dee <build_info+0x24>

08020e0c <tool_probe_workpiece>:
{
 8020e0c:	b508      	push	{r3, lr}
    return tc_probe_workpiece();
 8020e0e:	f001 fa37 	bl	8022280 <tc_probe_workpiece>
}
 8020e12:	bd08      	pop	{r3, pc}

08020e14 <enumerate_spindles_mr>:
{
 8020e14:	b508      	push	{r3, lr}
    return report_spindles(true);
 8020e16:	2001      	movs	r0, #1
 8020e18:	f7fa fd44 	bl	801b8a4 <report_spindles>
}
 8020e1c:	bd08      	pop	{r3, pc}

08020e1e <enumerate_spindles>:
{
 8020e1e:	b508      	push	{r3, lr}
    return report_spindles(false);
 8020e20:	2000      	movs	r0, #0
 8020e22:	f7fa fd3f 	bl	801b8a4 <report_spindles>
}
 8020e26:	bd08      	pop	{r3, pc}

08020e28 <output_help>:
{
 8020e28:	b508      	push	{r3, lr}
    return report_help(args);
 8020e2a:	4608      	mov	r0, r1
 8020e2c:	f7fa f956 	bl	801b0dc <report_help>
}
 8020e30:	bd08      	pop	{r3, pc}
	...

08020e34 <check_mode>:
{
 8020e34:	b508      	push	{r3, lr}
    if (state == STATE_CHECK_MODE) {
 8020e36:	2802      	cmp	r0, #2
 8020e38:	d009      	beq.n	8020e4e <check_mode+0x1a>
    } else if (state == STATE_IDLE) { // Requires idle mode.
 8020e3a:	b980      	cbnz	r0, 8020e5e <check_mode+0x2a>
        state_set(STATE_CHECK_MODE);
 8020e3c:	2002      	movs	r0, #2
 8020e3e:	f7fd fd09 	bl	801e854 <state_set>
        grbl.report.feedback_message(Message_Enabled);
 8020e42:	4b08      	ldr	r3, [pc, #32]	@ (8020e64 <check_mode+0x30>)
 8020e44:	68db      	ldr	r3, [r3, #12]
 8020e46:	2004      	movs	r0, #4
 8020e48:	4798      	blx	r3
    return Status_OK;
 8020e4a:	2000      	movs	r0, #0
}
 8020e4c:	bd08      	pop	{r3, pc}
        mc_reset();
 8020e4e:	f7f3 fbc7 	bl	80145e0 <mc_reset>
        grbl.report.feedback_message(Message_Disabled);
 8020e52:	4b04      	ldr	r3, [pc, #16]	@ (8020e64 <check_mode+0x30>)
 8020e54:	68db      	ldr	r3, [r3, #12]
 8020e56:	2005      	movs	r0, #5
 8020e58:	4798      	blx	r3
    return Status_OK;
 8020e5a:	2000      	movs	r0, #0
 8020e5c:	e7f6      	b.n	8020e4c <check_mode+0x18>
        return Status_IdleError;
 8020e5e:	2008      	movs	r0, #8
 8020e60:	e7f4      	b.n	8020e4c <check_mode+0x18>
 8020e62:	bf00      	nop
 8020e64:	200013a8 	.word	0x200013a8

08020e68 <disable_lock>:
{
 8020e68:	b510      	push	{r4, lr}
 8020e6a:	b082      	sub	sp, #8
    if(state & (STATE_ALARM|STATE_ESTOP)) {
 8020e6c:	f240 1301 	movw	r3, #257	@ 0x101
 8020e70:	4218      	tst	r0, r3
 8020e72:	d037      	beq.n	8020ee4 <disable_lock+0x7c>
        control_signals_t control_signals = hal.control.get_state();
 8020e74:	4b1d      	ldr	r3, [pc, #116]	@ (8020eec <disable_lock+0x84>)
 8020e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020e78:	4798      	blx	r3
        if(sys.alarm == Alarm_SelftestFailed)
 8020e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8020ef0 <disable_lock+0x88>)
 8020e7c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020e80:	2b10      	cmp	r3, #16
 8020e82:	d023      	beq.n	8020ecc <disable_lock+0x64>
        else if (control_signals.e_stop)
 8020e84:	b2c4      	uxtb	r4, r0
 8020e86:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8020e8a:	d121      	bne.n	8020ed0 <disable_lock+0x68>
        else if (control_signals.safety_door_ajar)
 8020e8c:	f014 0f08 	tst.w	r4, #8
 8020e90:	d120      	bne.n	8020ed4 <disable_lock+0x6c>
        else if(control_signals.reset)
 8020e92:	f014 0401 	ands.w	r4, r4, #1
 8020e96:	d11f      	bne.n	8020ed8 <disable_lock+0x70>
        else if(settings.limits.flags.hard_enabled && settings.limits.flags.check_at_init && limit_signals_merge(hal.limits.get_state()).value)
 8020e98:	4b16      	ldr	r3, [pc, #88]	@ (8020ef4 <disable_lock+0x8c>)
 8020e9a:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 8020e9e:	f003 0305 	and.w	r3, r3, #5
 8020ea2:	2b05      	cmp	r3, #5
 8020ea4:	d107      	bne.n	8020eb6 <disable_lock+0x4e>
 8020ea6:	4b11      	ldr	r3, [pc, #68]	@ (8020eec <disable_lock+0x84>)
 8020ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020eaa:	4798      	blx	r3
 8020eac:	9001      	str	r0, [sp, #4]
 8020eae:	f7f1 fe69 	bl	8012b84 <limit_signals_merge>
 8020eb2:	b2c0      	uxtb	r0, r0
 8020eb4:	b990      	cbnz	r0, 8020edc <disable_lock+0x74>
        else if(limits_homing_required())
 8020eb6:	f7f2 fab1 	bl	801341c <limits_homing_required>
 8020eba:	b988      	cbnz	r0, 8020ee0 <disable_lock+0x78>
            grbl.report.feedback_message(Message_AlarmUnlock);
 8020ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8020ef8 <disable_lock+0x90>)
 8020ebe:	68db      	ldr	r3, [r3, #12]
 8020ec0:	2003      	movs	r0, #3
 8020ec2:	4798      	blx	r3
            state_set(STATE_IDLE);
 8020ec4:	2000      	movs	r0, #0
 8020ec6:	f7fd fcc5 	bl	801e854 <state_set>
 8020eca:	e00c      	b.n	8020ee6 <disable_lock+0x7e>
            retval = Status_SelfTestFailed;
 8020ecc:	2431      	movs	r4, #49	@ 0x31
 8020ece:	e00a      	b.n	8020ee6 <disable_lock+0x7e>
            retval = Status_EStop;
 8020ed0:	2432      	movs	r4, #50	@ 0x32
 8020ed2:	e008      	b.n	8020ee6 <disable_lock+0x7e>
            retval = Status_CheckDoor;
 8020ed4:	240d      	movs	r4, #13
 8020ed6:	e006      	b.n	8020ee6 <disable_lock+0x7e>
            retval = Status_Reset;
 8020ed8:	2412      	movs	r4, #18
 8020eda:	e004      	b.n	8020ee6 <disable_lock+0x7e>
            retval = Status_LimitsEngaged;
 8020edc:	242d      	movs	r4, #45	@ 0x2d
 8020ede:	e002      	b.n	8020ee6 <disable_lock+0x7e>
            retval = Status_HomingRequired;
 8020ee0:	242e      	movs	r4, #46	@ 0x2e
 8020ee2:	e000      	b.n	8020ee6 <disable_lock+0x7e>
    status_code_t retval = Status_OK;
 8020ee4:	2400      	movs	r4, #0
}
 8020ee6:	4620      	mov	r0, r4
 8020ee8:	b002      	add	sp, #8
 8020eea:	bd10      	pop	{r4, pc}
 8020eec:	200011c0 	.word	0x200011c0
 8020ef0:	200014a0 	.word	0x200014a0
 8020ef4:	20001bd8 	.word	0x20001bd8
 8020ef8:	200013a8 	.word	0x200013a8

08020efc <read_int>:
{
 8020efc:	b510      	push	{r4, lr}
 8020efe:	ed2d 8b02 	vpush	{d8}
 8020f02:	b082      	sub	sp, #8
 8020f04:	460c      	mov	r4, r1
    uint_fast8_t counter = 0;
 8020f06:	2300      	movs	r3, #0
 8020f08:	9301      	str	r3, [sp, #4]
    if(!read_float(s, &counter, &parameter))
 8020f0a:	466a      	mov	r2, sp
 8020f0c:	a901      	add	r1, sp, #4
 8020f0e:	f7f4 fad9 	bl	80154c4 <read_float>
 8020f12:	b1a8      	cbz	r0, 8020f40 <read_int+0x44>
    if(parameter - truncf(parameter) != 0.0f)
 8020f14:	ed9d 8a00 	vldr	s16, [sp]
 8020f18:	eeb0 0a48 	vmov.f32	s0, s16
 8020f1c:	f006 faa0 	bl	8027460 <truncf>
 8020f20:	ee38 0a40 	vsub.f32	s0, s16, s0
 8020f24:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8020f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f2c:	d10a      	bne.n	8020f44 <read_int+0x48>
    *value = (int32_t)parameter;
 8020f2e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8020f32:	ed84 8a00 	vstr	s16, [r4]
    return Status_OK;
 8020f36:	2000      	movs	r0, #0
}
 8020f38:	b002      	add	sp, #8
 8020f3a:	ecbd 8b02 	vpop	{d8}
 8020f3e:	bd10      	pop	{r4, pc}
        return Status_BadNumberFormat;
 8020f40:	2002      	movs	r0, #2
 8020f42:	e7f9      	b.n	8020f38 <read_int+0x3c>
        return Status_InvalidStatement;
 8020f44:	2003      	movs	r0, #3
 8020f46:	e7f7      	b.n	8020f38 <read_int+0x3c>

08020f48 <output_setting_description>:
    if(args) {
 8020f48:	b189      	cbz	r1, 8020f6e <output_setting_description+0x26>
{
 8020f4a:	b500      	push	{lr}
 8020f4c:	b083      	sub	sp, #12
 8020f4e:	4608      	mov	r0, r1
        retval = read_int(args, &id);
 8020f50:	a901      	add	r1, sp, #4
 8020f52:	f7ff ffd3 	bl	8020efc <read_int>
        if(retval == Status_OK && id >= 0)
 8020f56:	b910      	cbnz	r0, 8020f5e <output_setting_description+0x16>
 8020f58:	9901      	ldr	r1, [sp, #4]
 8020f5a:	2900      	cmp	r1, #0
 8020f5c:	da02      	bge.n	8020f64 <output_setting_description+0x1c>
}
 8020f5e:	b003      	add	sp, #12
 8020f60:	f85d fb04 	ldr.w	pc, [sp], #4
            retval = report_setting_description(SettingsFormat_MachineReadable, (setting_id_t)id);
 8020f64:	b289      	uxth	r1, r1
 8020f66:	2000      	movs	r0, #0
 8020f68:	f7f9 ff52 	bl	801ae10 <report_setting_description>
 8020f6c:	e7f7      	b.n	8020f5e <output_setting_description+0x16>
    status_code_t retval = Status_BadNumberFormat;
 8020f6e:	2002      	movs	r0, #2
}
 8020f70:	4770      	bx	lr

08020f72 <output_all_settings>:
{
 8020f72:	b500      	push	{lr}
 8020f74:	b083      	sub	sp, #12
    if(args) {
 8020f76:	b171      	cbz	r1, 8020f96 <output_all_settings+0x24>
 8020f78:	460b      	mov	r3, r1
        retval = read_int(args, &id);
 8020f7a:	a901      	add	r1, sp, #4
 8020f7c:	4618      	mov	r0, r3
 8020f7e:	f7ff ffbd 	bl	8020efc <read_int>
        if(retval == Status_OK && id >= 0)
 8020f82:	b960      	cbnz	r0, 8020f9e <output_all_settings+0x2c>
 8020f84:	9901      	ldr	r1, [sp, #4]
 8020f86:	2900      	cmp	r1, #0
 8020f88:	db09      	blt.n	8020f9e <output_all_settings+0x2c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 8020f8a:	2200      	movs	r2, #0
 8020f8c:	b289      	uxth	r1, r1
 8020f8e:	2001      	movs	r0, #1
 8020f90:	f7f9 fed8 	bl	801ad44 <report_settings_details>
 8020f94:	e003      	b.n	8020f9e <output_all_settings+0x2c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 8020f96:	f010 0f18 	tst.w	r0, #24
 8020f9a:	d003      	beq.n	8020fa4 <output_all_settings+0x32>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 8020f9c:	2008      	movs	r0, #8
}
 8020f9e:	b003      	add	sp, #12
 8020fa0:	f85d fb04 	ldr.w	pc, [sp], #4
        report_grbl_settings(true, NULL);
 8020fa4:	2100      	movs	r1, #0
 8020fa6:	2001      	movs	r0, #1
 8020fa8:	f7f8 f8ba 	bl	8019120 <report_grbl_settings>
    status_code_t retval = Status_OK;
 8020fac:	2000      	movs	r0, #0
 8020fae:	e7f6      	b.n	8020f9e <output_all_settings+0x2c>

08020fb0 <output_settings>:
{
 8020fb0:	b500      	push	{lr}
 8020fb2:	b083      	sub	sp, #12
    if(args) {
 8020fb4:	b171      	cbz	r1, 8020fd4 <output_settings+0x24>
 8020fb6:	460b      	mov	r3, r1
        retval = read_int(args, &id);
 8020fb8:	a901      	add	r1, sp, #4
 8020fba:	4618      	mov	r0, r3
 8020fbc:	f7ff ff9e 	bl	8020efc <read_int>
        if(retval == Status_OK && id >= 0)
 8020fc0:	b960      	cbnz	r0, 8020fdc <output_settings+0x2c>
 8020fc2:	9901      	ldr	r1, [sp, #4]
 8020fc4:	2900      	cmp	r1, #0
 8020fc6:	db09      	blt.n	8020fdc <output_settings+0x2c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 8020fc8:	2200      	movs	r2, #0
 8020fca:	b289      	uxth	r1, r1
 8020fcc:	2001      	movs	r0, #1
 8020fce:	f7f9 feb9 	bl	801ad44 <report_settings_details>
 8020fd2:	e003      	b.n	8020fdc <output_settings+0x2c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 8020fd4:	f010 0f18 	tst.w	r0, #24
 8020fd8:	d003      	beq.n	8020fe2 <output_settings+0x32>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 8020fda:	2008      	movs	r0, #8
}
 8020fdc:	b003      	add	sp, #12
 8020fde:	f85d fb04 	ldr.w	pc, [sp], #4
    report_grbl_settings(true, NULL);
 8020fe2:	2100      	movs	r1, #0
 8020fe4:	2001      	movs	r0, #1
 8020fe6:	f7f8 f89b 	bl	8019120 <report_grbl_settings>
    status_code_t retval = Status_OK;
 8020fea:	2000      	movs	r0, #0
 8020fec:	e7f6      	b.n	8020fdc <output_settings+0x2c>

08020fee <output_ngc_parameters>:
{
 8020fee:	b510      	push	{r4, lr}
 8020ff0:	b082      	sub	sp, #8
    if(args) {
 8020ff2:	b189      	cbz	r1, 8021018 <output_ngc_parameters+0x2a>
 8020ff4:	460c      	mov	r4, r1
        retval = read_int(args, &id);
 8020ff6:	a901      	add	r1, sp, #4
 8020ff8:	4620      	mov	r0, r4
 8020ffa:	f7ff ff7f 	bl	8020efc <read_int>
        if(retval == Status_OK && id >= 0)
 8020ffe:	b910      	cbnz	r0, 8021006 <output_ngc_parameters+0x18>
 8021000:	9801      	ldr	r0, [sp, #4]
 8021002:	2800      	cmp	r0, #0
 8021004:	da04      	bge.n	8021010 <output_ngc_parameters+0x22>
            retval = report_named_ngc_parameter(args);
 8021006:	4620      	mov	r0, r4
 8021008:	f7f8 f9ca 	bl	80193a0 <report_named_ngc_parameter>
}
 802100c:	b002      	add	sp, #8
 802100e:	bd10      	pop	{r4, pc}
            retval = report_ngc_parameter((ngc_param_id_t)id);
 8021010:	b280      	uxth	r0, r0
 8021012:	f7f8 f983 	bl	801931c <report_ngc_parameter>
 8021016:	e7f9      	b.n	802100c <output_ngc_parameters+0x1e>
        report_ngc_parameters();
 8021018:	f7f8 fa00 	bl	801941c <report_ngc_parameters>
    status_code_t retval = Status_OK;
 802101c:	2000      	movs	r0, #0
 802101e:	e7f5      	b.n	802100c <output_ngc_parameters+0x1e>

08021020 <system_init_switches>:
{
 8021020:	b508      	push	{r3, lr}
    control_signals_t signals = hal.control.get_state();
 8021022:	4b0b      	ldr	r3, [pc, #44]	@ (8021050 <system_init_switches+0x30>)
 8021024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021026:	4798      	blx	r3
    sys.flags.block_delete_enabled = signals.block_delete;
 8021028:	f3c0 1100 	ubfx	r1, r0, #4, #1
 802102c:	4b09      	ldr	r3, [pc, #36]	@ (8021054 <system_init_switches+0x34>)
 802102e:	7d9a      	ldrb	r2, [r3, #22]
 8021030:	f361 1204 	bfi	r2, r1, #4, #1
 8021034:	759a      	strb	r2, [r3, #22]
    sys.flags.single_block = signals.single_block;
 8021036:	f3c0 21c0 	ubfx	r1, r0, #11, #1
 802103a:	b2d2      	uxtb	r2, r2
 802103c:	f361 12c7 	bfi	r2, r1, #7, #1
 8021040:	759a      	strb	r2, [r3, #22]
    sys.flags.optional_stop_disable = signals.stop_disable;
 8021042:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8021046:	b2d2      	uxtb	r2, r2
 8021048:	f360 1286 	bfi	r2, r0, #6, #1
 802104c:	759a      	strb	r2, [r3, #22]
}
 802104e:	bd08      	pop	{r3, pc}
 8021050:	200011c0 	.word	0x200011c0
 8021054:	200014a0 	.word	0x200014a0

08021058 <control_interrupt_handler>:
{
 8021058:	b5f0      	push	{r4, r5, r6, r7, lr}
 802105a:	b083      	sub	sp, #12
 802105c:	4604      	mov	r4, r0
    if(signals.deasserted)
 802105e:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8021062:	d153      	bne.n	802110c <control_interrupt_handler+0xb4>
    if(signals.value) {
 8021064:	b2a3      	uxth	r3, r4
 8021066:	2b00      	cmp	r3, #0
 8021068:	d04e      	beq.n	8021108 <control_interrupt_handler+0xb0>
        sys.last_event.control.value = signals.value;
 802106a:	4a66      	ldr	r2, [pc, #408]	@ (8021204 <control_interrupt_handler+0x1ac>)
 802106c:	f8a2 4080 	strh.w	r4, [r2, #128]	@ 0x80
        if((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 8021070:	f240 1241 	movw	r2, #321	@ 0x141
 8021074:	4213      	tst	r3, r2
 8021076:	d151      	bne.n	802111c <control_interrupt_handler+0xc4>
            if(signals.safety_door_ajar && hal.signals_cap.safety_door_ajar) {
 8021078:	b2e6      	uxtb	r6, r4
 802107a:	f014 0f08 	tst.w	r4, #8
 802107e:	d010      	beq.n	80210a2 <control_interrupt_handler+0x4a>
 8021080:	4b61      	ldr	r3, [pc, #388]	@ (8021208 <control_interrupt_handler+0x1b0>)
 8021082:	f893 31dc 	ldrb.w	r3, [r3, #476]	@ 0x1dc
 8021086:	f013 0f08 	tst.w	r3, #8
 802108a:	d00a      	beq.n	80210a2 <control_interrupt_handler+0x4a>
                if(settings.safety_door.flags.ignore_when_idle) {
 802108c:	4b5f      	ldr	r3, [pc, #380]	@ (802120c <control_interrupt_handler+0x1b4>)
 802108e:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8021092:	f013 0f01 	tst.w	r3, #1
 8021096:	d149      	bne.n	802112c <control_interrupt_handler+0xd4>
                    system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8021098:	4b5b      	ldr	r3, [pc, #364]	@ (8021208 <control_interrupt_handler+0x1b0>)
 802109a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802109c:	2140      	movs	r1, #64	@ 0x40
 802109e:	485c      	ldr	r0, [pc, #368]	@ (8021210 <control_interrupt_handler+0x1b8>)
 80210a0:	4798      	blx	r3
            if(signals.probe_overtravel) {
 80210a2:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80210a6:	462f      	mov	r7, r5
 80210a8:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 80210ac:	d052      	beq.n	8021154 <control_interrupt_handler+0xfc>
                limit_signals_t overtravel = { .min.z = On};
 80210ae:	2300      	movs	r3, #0
 80210b0:	9301      	str	r3, [sp, #4]
 80210b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80210b6:	f043 0304 	orr.w	r3, r3, #4
 80210ba:	f88d 3004 	strb.w	r3, [sp, #4]
                hal.limits.interrupt_callback(overtravel);
 80210be:	4b52      	ldr	r3, [pc, #328]	@ (8021208 <control_interrupt_handler+0x1b0>)
 80210c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80210c2:	9801      	ldr	r0, [sp, #4]
 80210c4:	4798      	blx	r3
            if(signals.block_delete)
 80210c6:	f016 0f10 	tst.w	r6, #16
 80210ca:	d007      	beq.n	80210dc <control_interrupt_handler+0x84>
                sys.flags.block_delete_enabled = !signals.deasserted;
 80210cc:	43eb      	mvns	r3, r5
 80210ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80210d2:	4a4c      	ldr	r2, [pc, #304]	@ (8021204 <control_interrupt_handler+0x1ac>)
 80210d4:	7d91      	ldrb	r1, [r2, #22]
 80210d6:	f363 1104 	bfi	r1, r3, #4, #1
 80210da:	7591      	strb	r1, [r2, #22]
            if(signals.single_block)
 80210dc:	f017 0f08 	tst.w	r7, #8
 80210e0:	d007      	beq.n	80210f2 <control_interrupt_handler+0x9a>
                sys.flags.single_block = !signals.deasserted;
 80210e2:	43eb      	mvns	r3, r5
 80210e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80210e8:	4a46      	ldr	r2, [pc, #280]	@ (8021204 <control_interrupt_handler+0x1ac>)
 80210ea:	7d91      	ldrb	r1, [r2, #22]
 80210ec:	f363 11c7 	bfi	r1, r3, #7, #1
 80210f0:	7591      	strb	r1, [r2, #22]
            if(signals.stop_disable)
 80210f2:	f016 0f20 	tst.w	r6, #32
 80210f6:	d007      	beq.n	8021108 <control_interrupt_handler+0xb0>
                sys.flags.optional_stop_disable = !signals.deasserted;
 80210f8:	43eb      	mvns	r3, r5
 80210fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80210fe:	4a41      	ldr	r2, [pc, #260]	@ (8021204 <control_interrupt_handler+0x1ac>)
 8021100:	7d91      	ldrb	r1, [r2, #22]
 8021102:	f363 1186 	bfi	r1, r3, #6, #1
 8021106:	7591      	strb	r1, [r2, #22]
}
 8021108:	b003      	add	sp, #12
 802110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        signals.value &= onoff_signals.mask;
 802110c:	b284      	uxth	r4, r0
 802110e:	f424 44ef 	bic.w	r4, r4, #30592	@ 0x7780
 8021112:	f424 44ef 	bic.w	r4, r4, #30592	@ 0x7780
 8021116:	f024 044f 	bic.w	r4, r4, #79	@ 0x4f
 802111a:	e7a3      	b.n	8021064 <control_interrupt_handler+0xc>
        if((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 802111c:	f7fd fb94 	bl	801e848 <state_get>
 8021120:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8021124:	d0a8      	beq.n	8021078 <control_interrupt_handler+0x20>
            mc_reset();
 8021126:	f7f3 fa5b 	bl	80145e0 <mc_reset>
 802112a:	e7ed      	b.n	8021108 <control_interrupt_handler+0xb0>
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 802112c:	f7fd fb8c 	bl	801e848 <state_get>
 8021130:	b930      	cbnz	r0, 8021140 <control_interrupt_handler+0xe8>
                    if(settings.mode == Mode_Laser) // Turn off spindle immediately (laser) when in laser mode
 8021132:	4b36      	ldr	r3, [pc, #216]	@ (802120c <control_interrupt_handler+0x1b4>)
 8021134:	7e1b      	ldrb	r3, [r3, #24]
 8021136:	2b01      	cmp	r3, #1
 8021138:	d1b3      	bne.n	80210a2 <control_interrupt_handler+0x4a>
                        spindle_all_off();
 802113a:	f7fd f901 	bl	801e340 <spindle_all_off>
 802113e:	e7b0      	b.n	80210a2 <control_interrupt_handler+0x4a>
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 8021140:	f7fd fb82 	bl	801e848 <state_get>
 8021144:	2820      	cmp	r0, #32
 8021146:	d0f4      	beq.n	8021132 <control_interrupt_handler+0xda>
                        system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8021148:	4b2f      	ldr	r3, [pc, #188]	@ (8021208 <control_interrupt_handler+0x1b0>)
 802114a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802114c:	2140      	movs	r1, #64	@ 0x40
 802114e:	4830      	ldr	r0, [pc, #192]	@ (8021210 <control_interrupt_handler+0x1b8>)
 8021150:	4798      	blx	r3
 8021152:	e7ee      	b.n	8021132 <control_interrupt_handler+0xda>
            } else if(signals.probe_triggered) {
 8021154:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8021158:	d019      	beq.n	802118e <control_interrupt_handler+0x136>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 802115a:	4b2a      	ldr	r3, [pc, #168]	@ (8021204 <control_interrupt_handler+0x1ac>)
 802115c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021160:	b133      	cbz	r3, 8021170 <control_interrupt_handler+0x118>
                    hal.probe.configure(false, false);
 8021162:	4b29      	ldr	r3, [pc, #164]	@ (8021208 <control_interrupt_handler+0x1b0>)
 8021164:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8021168:	2100      	movs	r1, #0
 802116a:	4608      	mov	r0, r1
 802116c:	4798      	blx	r3
 802116e:	e7aa      	b.n	80210c6 <control_interrupt_handler+0x6e>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 8021170:	f7fd fb6a 	bl	801e848 <state_get>
 8021174:	f010 0f28 	tst.w	r0, #40	@ 0x28
 8021178:	d0f3      	beq.n	8021162 <control_interrupt_handler+0x10a>
                    system_set_exec_state_flag(EXEC_STOP);
 802117a:	4b23      	ldr	r3, [pc, #140]	@ (8021208 <control_interrupt_handler+0x1b0>)
 802117c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802117e:	4c24      	ldr	r4, [pc, #144]	@ (8021210 <control_interrupt_handler+0x1b8>)
 8021180:	2110      	movs	r1, #16
 8021182:	4620      	mov	r0, r4
 8021184:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 8021186:	230d      	movs	r3, #13
 8021188:	f804 3c34 	strb.w	r3, [r4, #-52]
 802118c:	e79b      	b.n	80210c6 <control_interrupt_handler+0x6e>
            } else if(signals.probe_disconnected) {
 802118e:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8021192:	d108      	bne.n	80211a6 <control_interrupt_handler+0x14e>
            } else if(signals.feed_hold)
 8021194:	f016 0f02 	tst.w	r6, #2
 8021198:	d019      	beq.n	80211ce <control_interrupt_handler+0x176>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 802119a:	4b1b      	ldr	r3, [pc, #108]	@ (8021208 <control_interrupt_handler+0x1b0>)
 802119c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802119e:	2108      	movs	r1, #8
 80211a0:	481b      	ldr	r0, [pc, #108]	@ (8021210 <control_interrupt_handler+0x1b8>)
 80211a2:	4798      	blx	r3
 80211a4:	e78f      	b.n	80210c6 <control_interrupt_handler+0x6e>
                if(sys.probing_state == Probing_Active && state_get() == STATE_CYCLE) {
 80211a6:	4b17      	ldr	r3, [pc, #92]	@ (8021204 <control_interrupt_handler+0x1ac>)
 80211a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80211ac:	b2db      	uxtb	r3, r3
 80211ae:	2b01      	cmp	r3, #1
 80211b0:	d189      	bne.n	80210c6 <control_interrupt_handler+0x6e>
 80211b2:	f7fd fb49 	bl	801e848 <state_get>
 80211b6:	2808      	cmp	r0, #8
 80211b8:	d185      	bne.n	80210c6 <control_interrupt_handler+0x6e>
                    system_set_exec_state_flag(EXEC_FEED_HOLD);
 80211ba:	4b13      	ldr	r3, [pc, #76]	@ (8021208 <control_interrupt_handler+0x1b0>)
 80211bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80211be:	4c14      	ldr	r4, [pc, #80]	@ (8021210 <control_interrupt_handler+0x1b8>)
 80211c0:	2108      	movs	r1, #8
 80211c2:	4620      	mov	r0, r4
 80211c4:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 80211c6:	230d      	movs	r3, #13
 80211c8:	f804 3c34 	strb.w	r3, [r4, #-52]
 80211cc:	e77b      	b.n	80210c6 <control_interrupt_handler+0x6e>
            else if(signals.cycle_start) {
 80211ce:	f016 0f04 	tst.w	r6, #4
 80211d2:	f43f af78 	beq.w	80210c6 <control_interrupt_handler+0x6e>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 80211d6:	4b0c      	ldr	r3, [pc, #48]	@ (8021208 <control_interrupt_handler+0x1b0>)
 80211d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80211da:	4c0d      	ldr	r4, [pc, #52]	@ (8021210 <control_interrupt_handler+0x1b8>)
 80211dc:	2102      	movs	r1, #2
 80211de:	4620      	mov	r0, r4
 80211e0:	4798      	blx	r3
                sys.report.cycle_start = settings.status_report.pin_state;
 80211e2:	4b0a      	ldr	r3, [pc, #40]	@ (802120c <control_interrupt_handler+0x1b4>)
 80211e4:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80211e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80211ec:	f814 2c15 	ldrb.w	r2, [r4, #-21]
 80211f0:	f363 1286 	bfi	r2, r3, #6, #1
 80211f4:	f804 2c15 	strb.w	r2, [r4, #-21]
                gc_state.tool_change = false;
 80211f8:	4b06      	ldr	r3, [pc, #24]	@ (8021214 <control_interrupt_handler+0x1bc>)
 80211fa:	2200      	movs	r2, #0
 80211fc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8021200:	e761      	b.n	80210c6 <control_interrupt_handler+0x6e>
 8021202:	bf00      	nop
 8021204:	200014a0 	.word	0x200014a0
 8021208:	200011c0 	.word	0x200011c0
 802120c:	20001bd8 	.word	0x20001bd8
 8021210:	200014e8 	.word	0x200014e8
 8021214:	20000ef8 	.word	0x20000ef8

08021218 <system_execute_startup>:
    if(hal.nvs.type != NVS_None) {
 8021218:	4b11      	ldr	r3, [pc, #68]	@ (8021260 <system_execute_startup+0x48>)
 802121a:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 802121e:	b9cb      	cbnz	r3, 8021254 <system_execute_startup+0x3c>
 8021220:	4770      	bx	lr
                report_execute_startup_message(line, Status_SettingReadFail);
 8021222:	2107      	movs	r1, #7
 8021224:	4668      	mov	r0, sp
 8021226:	f7f8 fc35 	bl	8019a94 <report_execute_startup_message>
        for (n = 0; n < N_STARTUP_LINE; n++) {
 802122a:	3401      	adds	r4, #1
 802122c:	2c01      	cmp	r4, #1
 802122e:	d815      	bhi.n	802125c <system_execute_startup+0x44>
            if (!settings_read_startup_line(n, line))
 8021230:	4669      	mov	r1, sp
 8021232:	b2e0      	uxtb	r0, r4
 8021234:	f7fb fe58 	bl	801cee8 <settings_read_startup_line>
 8021238:	2800      	cmp	r0, #0
 802123a:	d0f2      	beq.n	8021222 <system_execute_startup+0xa>
            else if (*line != '\0')
 802123c:	f89d 3000 	ldrb.w	r3, [sp]
 8021240:	2b00      	cmp	r3, #0
 8021242:	d0f2      	beq.n	802122a <system_execute_startup+0x12>
                report_execute_startup_message(line, gc_execute_block(line));
 8021244:	4668      	mov	r0, sp
 8021246:	f7eb ff99 	bl	800d17c <gc_execute_block>
 802124a:	4601      	mov	r1, r0
 802124c:	4668      	mov	r0, sp
 802124e:	f7f8 fc21 	bl	8019a94 <report_execute_startup_message>
 8021252:	e7ea      	b.n	802122a <system_execute_startup+0x12>
{
 8021254:	b510      	push	{r4, lr}
 8021256:	b092      	sub	sp, #72	@ 0x48
        for (n = 0; n < N_STARTUP_LINE; n++) {
 8021258:	2400      	movs	r4, #0
 802125a:	e7e7      	b.n	802122c <system_execute_startup+0x14>
}
 802125c:	b012      	add	sp, #72	@ 0x48
 802125e:	bd10      	pop	{r4, pc}
 8021260:	200011c0 	.word	0x200011c0

08021264 <go_home>:
{
 8021264:	b510      	push	{r4, lr}
 8021266:	460c      	mov	r4, r1
    if(axes.mask && !settings.homing.flags.single_axis_commands)
 8021268:	b2cb      	uxtb	r3, r1
 802126a:	b12b      	cbz	r3, 8021278 <go_home+0x14>
 802126c:	4b39      	ldr	r3, [pc, #228]	@ (8021354 <go_home+0xf0>)
 802126e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8021272:	f013 0f02 	tst.w	r3, #2
 8021276:	d069      	beq.n	802134c <go_home+0xe8>
    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 8021278:	f7fd fae6 	bl	801e848 <state_get>
 802127c:	bb40      	cbnz	r0, 80212d0 <go_home+0x6c>
    control_signals_t control_signals = hal.control.get_state();
 802127e:	4b36      	ldr	r3, [pc, #216]	@ (8021358 <go_home+0xf4>)
 8021280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021282:	4798      	blx	r3
    if(sys.alarm == Alarm_SelftestFailed)
 8021284:	4b35      	ldr	r3, [pc, #212]	@ (802135c <go_home+0xf8>)
 8021286:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802128a:	2b10      	cmp	r3, #16
 802128c:	d02d      	beq.n	80212ea <go_home+0x86>
    else if (control_signals.e_stop)
 802128e:	b2c3      	uxtb	r3, r0
 8021290:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8021294:	d14d      	bne.n	8021332 <go_home+0xce>
    else if(control_signals.motor_fault)
 8021296:	f410 7f80 	tst.w	r0, #256	@ 0x100
 802129a:	d14f      	bne.n	802133c <go_home+0xd8>
    else if (!(settings.homing.flags.enabled && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)))
 802129c:	4a2d      	ldr	r2, [pc, #180]	@ (8021354 <go_home+0xf0>)
 802129e:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 80212a2:	f012 0f01 	tst.w	r2, #1
 80212a6:	d04b      	beq.n	8021340 <go_home+0xdc>
 80212a8:	492c      	ldr	r1, [pc, #176]	@ (802135c <go_home+0xf8>)
 80212aa:	7e89      	ldrb	r1, [r1, #26]
 80212ac:	b911      	cbnz	r1, 80212b4 <go_home+0x50>
 80212ae:	f012 0f12 	tst.w	r2, #18
 80212b2:	d047      	beq.n	8021344 <go_home+0xe0>
    else if (control_signals.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle)
 80212b4:	f013 0f08 	tst.w	r3, #8
 80212b8:	d005      	beq.n	80212c6 <go_home+0x62>
 80212ba:	4a26      	ldr	r2, [pc, #152]	@ (8021354 <go_home+0xf0>)
 80212bc:	f892 213c 	ldrb.w	r2, [r2, #316]	@ 0x13c
 80212c0:	f012 0f01 	tst.w	r2, #1
 80212c4:	d040      	beq.n	8021348 <go_home+0xe4>
    else if(control_signals.reset)
 80212c6:	f013 0f01 	tst.w	r3, #1
 80212ca:	d009      	beq.n	80212e0 <go_home+0x7c>
        retval = Status_Reset;
 80212cc:	2412      	movs	r4, #18
 80212ce:	e031      	b.n	8021334 <go_home+0xd0>
    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 80212d0:	f7fd faba 	bl	801e848 <state_get>
 80212d4:	f240 1301 	movw	r3, #257	@ 0x101
 80212d8:	4218      	tst	r0, r3
 80212da:	d1d0      	bne.n	802127e <go_home+0x1a>
        return Status_IdleError;
 80212dc:	2408      	movs	r4, #8
 80212de:	e02b      	b.n	8021338 <go_home+0xd4>
        retval = mc_homing_cycle(axes); // Home axes according to configuration
 80212e0:	4620      	mov	r0, r4
 80212e2:	f7f3 f9d5 	bl	8014690 <mc_homing_cycle>
 80212e6:	4604      	mov	r4, r0
 80212e8:	e000      	b.n	80212ec <go_home+0x88>
        retval = Status_SelfTestFailed;
 80212ea:	2431      	movs	r4, #49	@ 0x31
    if (retval == Status_OK && !sys.abort) {
 80212ec:	bb14      	cbnz	r4, 8021334 <go_home+0xd0>
 80212ee:	4b1b      	ldr	r3, [pc, #108]	@ (802135c <go_home+0xf8>)
 80212f0:	781b      	ldrb	r3, [r3, #0]
 80212f2:	b9fb      	cbnz	r3, 8021334 <go_home+0xd0>
        state_set(STATE_IDLE);  // Set to IDLE when complete.
 80212f4:	2000      	movs	r0, #0
 80212f6:	f7fd faad 	bl	801e854 <state_set>
        st_go_idle();           // Set steppers to the settings idle state before returning.
 80212fa:	f7fd ffcf 	bl	801f29c <st_go_idle>
        grbl.report.feedback_message(Message_None);
 80212fe:	4b18      	ldr	r3, [pc, #96]	@ (8021360 <go_home+0xfc>)
 8021300:	68db      	ldr	r3, [r3, #12]
 8021302:	2000      	movs	r0, #0
 8021304:	4798      	blx	r3
        if (sys.homing.mask && (sys.homing.mask & sys.homed.mask) == sys.homing.mask)
 8021306:	4b15      	ldr	r3, [pc, #84]	@ (802135c <go_home+0xf8>)
 8021308:	7e9b      	ldrb	r3, [r3, #26]
 802130a:	b123      	cbz	r3, 8021316 <go_home+0xb2>
 802130c:	4a13      	ldr	r2, [pc, #76]	@ (802135c <go_home+0xf8>)
 802130e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8021312:	4393      	bics	r3, r2
 8021314:	d00a      	beq.n	802132c <go_home+0xc8>
        else if(limits_homing_required()) { // Keep alarm state active if homing is required and not all axes homed.
 8021316:	f7f2 f881 	bl	801341c <limits_homing_required>
 802131a:	b158      	cbz	r0, 8021334 <go_home+0xd0>
            sys.alarm = Alarm_HomingRequired;
 802131c:	4b0f      	ldr	r3, [pc, #60]	@ (802135c <go_home+0xf8>)
 802131e:	220b      	movs	r2, #11
 8021320:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            state_set(STATE_ALARM);
 8021324:	2001      	movs	r0, #1
 8021326:	f7fd fa95 	bl	801e854 <state_set>
 802132a:	e003      	b.n	8021334 <go_home+0xd0>
            system_execute_startup();
 802132c:	f7ff ff74 	bl	8021218 <system_execute_startup>
 8021330:	e000      	b.n	8021334 <go_home+0xd0>
        retval = Status_EStop;
 8021332:	2432      	movs	r4, #50	@ 0x32
    return retval == Status_Unhandled ? Status_OK : retval;
 8021334:	2c54      	cmp	r4, #84	@ 0x54
 8021336:	d00b      	beq.n	8021350 <go_home+0xec>
}
 8021338:	4620      	mov	r0, r4
 802133a:	bd10      	pop	{r4, pc}
        retval = Status_MotorFault;
 802133c:	2433      	movs	r4, #51	@ 0x33
 802133e:	e7f9      	b.n	8021334 <go_home+0xd0>
        retval = Status_HomingDisabled;
 8021340:	2405      	movs	r4, #5
 8021342:	e7f7      	b.n	8021334 <go_home+0xd0>
 8021344:	2405      	movs	r4, #5
 8021346:	e7f5      	b.n	8021334 <go_home+0xd0>
        retval = Status_CheckDoor;
 8021348:	240d      	movs	r4, #13
 802134a:	e7f3      	b.n	8021334 <go_home+0xd0>
        return Status_HomingDisabled;
 802134c:	2405      	movs	r4, #5
 802134e:	e7f3      	b.n	8021338 <go_home+0xd4>
    return retval == Status_Unhandled ? Status_OK : retval;
 8021350:	2400      	movs	r4, #0
 8021352:	e7f1      	b.n	8021338 <go_home+0xd4>
 8021354:	20001bd8 	.word	0x20001bd8
 8021358:	200011c0 	.word	0x200011c0
 802135c:	200014a0 	.word	0x200014a0
 8021360:	200013a8 	.word	0x200013a8

08021364 <home_z>:
{
 8021364:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){Z_AXIS_BIT});
 8021366:	f04f 0104 	mov.w	r1, #4
 802136a:	f7ff ff7b 	bl	8021264 <go_home>
}
 802136e:	bd08      	pop	{r3, pc}

08021370 <home_y>:
{
 8021370:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){Y_AXIS_BIT});
 8021372:	f04f 0102 	mov.w	r1, #2
 8021376:	f7ff ff75 	bl	8021264 <go_home>
}
 802137a:	bd08      	pop	{r3, pc}

0802137c <home_x>:
{
 802137c:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){X_AXIS_BIT});
 802137e:	f04f 0101 	mov.w	r1, #1
 8021382:	f7ff ff6f 	bl	8021264 <go_home>
}
 8021386:	bd08      	pop	{r3, pc}

08021388 <home>:
{
 8021388:	b508      	push	{r3, lr}
    return go_home(state, (axes_signals_t){0});
 802138a:	f04f 0100 	mov.w	r1, #0
 802138e:	f7ff ff69 	bl	8021264 <go_home>
}
 8021392:	bd08      	pop	{r3, pc}

08021394 <_system_output_help>:
    commands->next = commands_root;
    commands_root = commands;
}

void _system_output_help (sys_commands_t *commands, bool traverse)
{
 8021394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021398:	4606      	mov	r6, r0
 802139a:	4688      	mov	r8, r1
    const char *help;
    uint_fast8_t idx;

    while(commands) {
 802139c:	e039      	b.n	8021412 <_system_output_help+0x7e>
                    if(*help != '$') {
                        hal.stream.write_char('$');
                        hal.stream.write(commands->commands[idx].command);
                        hal.stream.write(" - ");
                    }
                    hal.stream.write(help);
 802139e:	4f1f      	ldr	r7, [pc, #124]	@ (802141c <_system_output_help+0x88>)
 80213a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80213a4:	4628      	mov	r0, r5
 80213a6:	4798      	blx	r3
                    hal.stream.write("." ASCII_EOL);
 80213a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80213ac:	481c      	ldr	r0, [pc, #112]	@ (8021420 <_system_output_help+0x8c>)
 80213ae:	4798      	blx	r3
        for(idx = 0; idx < commands->n_commands; idx++) {
 80213b0:	3401      	adds	r4, #1
 80213b2:	7833      	ldrb	r3, [r6, #0]
 80213b4:	42a3      	cmp	r3, r4
 80213b6:	d922      	bls.n	80213fe <_system_output_help+0x6a>
            if(commands->commands[idx].help.str) {
 80213b8:	6872      	ldr	r2, [r6, #4]
 80213ba:	0127      	lsls	r7, r4, #4
 80213bc:	eb02 1304 	add.w	r3, r2, r4, lsl #4
 80213c0:	68dd      	ldr	r5, [r3, #12]
 80213c2:	2d00      	cmp	r5, #0
 80213c4:	d0f4      	beq.n	80213b0 <_system_output_help+0x1c>
                if(commands->commands[idx].flags.help_fn)
 80213c6:	7a1b      	ldrb	r3, [r3, #8]
 80213c8:	f013 0f04 	tst.w	r3, #4
 80213cc:	d002      	beq.n	80213d4 <_system_output_help+0x40>
                    help = commands->commands[idx].help.fn(commands->commands[idx].command);
 80213ce:	59d0      	ldr	r0, [r2, r7]
 80213d0:	47a8      	blx	r5
 80213d2:	4605      	mov	r5, r0
                if(help) {
 80213d4:	2d00      	cmp	r5, #0
 80213d6:	d0eb      	beq.n	80213b0 <_system_output_help+0x1c>
                    if(*help != '$') {
 80213d8:	782b      	ldrb	r3, [r5, #0]
 80213da:	2b24      	cmp	r3, #36	@ 0x24
 80213dc:	d0df      	beq.n	802139e <_system_output_help+0xa>
                        hal.stream.write_char('$');
 80213de:	f8df 903c 	ldr.w	r9, [pc, #60]	@ 802141c <_system_output_help+0x88>
 80213e2:	f8d9 30bc 	ldr.w	r3, [r9, #188]	@ 0xbc
 80213e6:	2024      	movs	r0, #36	@ 0x24
 80213e8:	4798      	blx	r3
                        hal.stream.write(commands->commands[idx].command);
 80213ea:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
 80213ee:	6872      	ldr	r2, [r6, #4]
 80213f0:	59d0      	ldr	r0, [r2, r7]
 80213f2:	4798      	blx	r3
                        hal.stream.write(" - ");
 80213f4:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
 80213f8:	480a      	ldr	r0, [pc, #40]	@ (8021424 <_system_output_help+0x90>)
 80213fa:	4798      	blx	r3
 80213fc:	e7cf      	b.n	802139e <_system_output_help+0xa>
                }
            }
        }
        commands = traverse && commands->next != &core_commands ? commands->next : NULL;
 80213fe:	f1b8 0f00 	cmp.w	r8, #0
 8021402:	d005      	beq.n	8021410 <_system_output_help+0x7c>
 8021404:	68b6      	ldr	r6, [r6, #8]
 8021406:	4b08      	ldr	r3, [pc, #32]	@ (8021428 <_system_output_help+0x94>)
 8021408:	429e      	cmp	r6, r3
 802140a:	d102      	bne.n	8021412 <_system_output_help+0x7e>
 802140c:	2600      	movs	r6, #0
 802140e:	e000      	b.n	8021412 <_system_output_help+0x7e>
 8021410:	2600      	movs	r6, #0
    while(commands) {
 8021412:	b10e      	cbz	r6, 8021418 <_system_output_help+0x84>
        for(idx = 0; idx < commands->n_commands; idx++) {
 8021414:	2400      	movs	r4, #0
 8021416:	e7cc      	b.n	80213b2 <_system_output_help+0x1e>
    }
}
 8021418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802141c:	200011c0 	.word	0x200011c0
 8021420:	08030340 	.word	0x08030340
 8021424:	0802b5a4 	.word	0x0802b5a4
 8021428:	2000048c 	.word	0x2000048c

0802142c <system_command_help>:

    _system_output_help(&cmd, false);
}

void system_command_help (void)
{
 802142c:	b510      	push	{r4, lr}
    _system_output_help(&core_commands, false);
 802142e:	4c06      	ldr	r4, [pc, #24]	@ (8021448 <system_command_help+0x1c>)
 8021430:	2100      	movs	r1, #0
 8021432:	4620      	mov	r0, r4
 8021434:	f7ff ffae 	bl	8021394 <_system_output_help>
    if(commands_root != &core_commands)
 8021438:	4b04      	ldr	r3, [pc, #16]	@ (802144c <system_command_help+0x20>)
 802143a:	6818      	ldr	r0, [r3, #0]
 802143c:	42a0      	cmp	r0, r4
 802143e:	d002      	beq.n	8021446 <system_command_help+0x1a>
        _system_output_help(commands_root, true);
 8021440:	2101      	movs	r1, #1
 8021442:	f7ff ffa7 	bl	8021394 <_system_output_help>
}
 8021446:	bd10      	pop	{r4, pc}
 8021448:	2000048c 	.word	0x2000048c
 802144c:	20000488 	.word	0x20000488

08021450 <system_execute_line>:

\param line pointer to the command string.
\returns \a status_code_t enum value; #Status_OK if successfully handled, another relevant status code if not.
*/
status_code_t system_execute_line (char *line)
{
 8021450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021454:	b082      	sub	sp, #8
    if(line[1] == '\0') {
 8021456:	7847      	ldrb	r7, [r0, #1]
 8021458:	b12f      	cbz	r7, 8021466 <system_execute_line+0x16>
 802145a:	4604      	mov	r4, r0

    status_code_t retval = Status_Unhandled;

    char c, *s1, *s2;

    s1 = s2 = ++line;
 802145c:	f100 0801 	add.w	r8, r0, #1
 8021460:	4643      	mov	r3, r8
 8021462:	4642      	mov	r2, r8

    c = *s1;
    while(c && c != '=') {
 8021464:	e007      	b.n	8021476 <system_execute_line+0x26>
        grbl.report.help_message();
 8021466:	4b81      	ldr	r3, [pc, #516]	@ (802166c <system_execute_line+0x21c>)
 8021468:	685b      	ldr	r3, [r3, #4]
 802146a:	4798      	blx	r3
        return Status_OK;
 802146c:	e060      	b.n	8021530 <system_execute_line+0xe0>
        if(c != ' ')
            *s2++ = CAPS(c);
 802146e:	f803 7b01 	strb.w	r7, [r3], #1
        c = *++s1;
 8021472:	f812 7f01 	ldrb.w	r7, [r2, #1]!
    while(c && c != '=') {
 8021476:	b16f      	cbz	r7, 8021494 <system_execute_line+0x44>
 8021478:	2f3d      	cmp	r7, #61	@ 0x3d
 802147a:	d00b      	beq.n	8021494 <system_execute_line+0x44>
        if(c != ' ')
 802147c:	2f20      	cmp	r7, #32
 802147e:	d0f8      	beq.n	8021472 <system_execute_line+0x22>
            *s2++ = CAPS(c);
 8021480:	f1a7 0161 	sub.w	r1, r7, #97	@ 0x61
 8021484:	b2c9      	uxtb	r1, r1
 8021486:	2919      	cmp	r1, #25
 8021488:	d8f1      	bhi.n	802146e <system_execute_line+0x1e>
 802148a:	f007 075f 	and.w	r7, r7, #95	@ 0x5f
 802148e:	e7ee      	b.n	802146e <system_execute_line+0x1e>
    }

    while((c = *s1++))
        *s2++ = c;
 8021490:	f803 1b01 	strb.w	r1, [r3], #1
    while((c = *s1++))
 8021494:	f812 1b01 	ldrb.w	r1, [r2], #1
 8021498:	2900      	cmp	r1, #0
 802149a:	d1f9      	bne.n	8021490 <system_execute_line+0x40>

    *s2 = '\0';
 802149c:	2200      	movs	r2, #0
 802149e:	701a      	strb	r2, [r3, #0]

    if(!strncmp(line, "HELP", 4))
 80214a0:	2204      	movs	r2, #4
 80214a2:	4973      	ldr	r1, [pc, #460]	@ (8021670 <system_execute_line+0x220>)
 80214a4:	4640      	mov	r0, r8
 80214a6:	f003 f8e6 	bl	8024676 <strncmp>
 80214aa:	b160      	cbz	r0, 80214c6 <system_execute_line+0x76>
        return report_help(&line[4]);

    char *args = strchr(line, '=');
 80214ac:	213d      	movs	r1, #61	@ 0x3d
 80214ae:	4640      	mov	r0, r8
 80214b0:	f003 f8d4 	bl	802465c <strchr>

    if(args)
 80214b4:	4681      	mov	r9, r0
 80214b6:	b110      	cbz	r0, 80214be <system_execute_line+0x6e>
        *args++ = '\0';
 80214b8:	2300      	movs	r3, #0
 80214ba:	f809 3b01 	strb.w	r3, [r9], #1

    uint_fast8_t idx;
    sys_commands_t *cmd = commands_root;
 80214be:	4b6d      	ldr	r3, [pc, #436]	@ (8021674 <system_execute_line+0x224>)
 80214c0:	681d      	ldr	r5, [r3, #0]
    status_code_t retval = Status_Unhandled;
 80214c2:	2754      	movs	r7, #84	@ 0x54
 80214c4:	e02e      	b.n	8021524 <system_execute_line+0xd4>
        return report_help(&line[4]);
 80214c6:	1d60      	adds	r0, r4, #5
 80214c8:	f7f9 fe08 	bl	801b0dc <report_help>
 80214cc:	4607      	mov	r7, r0
 80214ce:	e02f      	b.n	8021530 <system_execute_line+0xe0>
            if(!strcmp(line, cmd->commands[idx].command)) {
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
                    retval = Status_NotAllowedCriticalEvent;
                    break;
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
                    if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 80214d0:	6876      	ldr	r6, [r6, #4]
 80214d2:	f7fd f9b9 	bl	801e848 <state_get>
 80214d6:	4649      	mov	r1, r9
 80214d8:	47b0      	blx	r6
 80214da:	4607      	mov	r7, r0
 80214dc:	2854      	cmp	r0, #84	@ 0x54
 80214de:	d11d      	bne.n	802151c <system_execute_line+0xcc>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 80214e0:	3401      	adds	r4, #1
 80214e2:	782b      	ldrb	r3, [r5, #0]
 80214e4:	42a3      	cmp	r3, r4
 80214e6:	d919      	bls.n	802151c <system_execute_line+0xcc>
            if(!strcmp(line, cmd->commands[idx].command)) {
 80214e8:	686a      	ldr	r2, [r5, #4]
 80214ea:	0123      	lsls	r3, r4, #4
 80214ec:	eb02 1604 	add.w	r6, r2, r4, lsl #4
 80214f0:	58d1      	ldr	r1, [r2, r3]
 80214f2:	4640      	mov	r0, r8
 80214f4:	f7e6 fda4 	bl	8008040 <strcmp>
 80214f8:	2800      	cmp	r0, #0
 80214fa:	d1f1      	bne.n	80214e0 <system_execute_line+0x90>
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 80214fc:	4b5e      	ldr	r3, [pc, #376]	@ (8021678 <system_execute_line+0x228>)
 80214fe:	795b      	ldrb	r3, [r3, #5]
 8021500:	b11b      	cbz	r3, 802150a <system_execute_line+0xba>
 8021502:	7a33      	ldrb	r3, [r6, #8]
 8021504:	f013 0f02 	tst.w	r3, #2
 8021508:	d007      	beq.n	802151a <system_execute_line+0xca>
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 802150a:	7a33      	ldrb	r3, [r6, #8]
 802150c:	f013 0f01 	tst.w	r3, #1
 8021510:	d0de      	beq.n	80214d0 <system_execute_line+0x80>
 8021512:	f1b9 0f00 	cmp.w	r9, #0
 8021516:	d1e3      	bne.n	80214e0 <system_execute_line+0x90>
 8021518:	e7da      	b.n	80214d0 <system_execute_line+0x80>
                    retval = Status_NotAllowedCriticalEvent;
 802151a:	274f      	movs	r7, #79	@ 0x4f
                        break;
                }
            }
        }
        cmd = retval == Status_Unhandled ? cmd->next : NULL;
 802151c:	2f54      	cmp	r7, #84	@ 0x54
 802151e:	d103      	bne.n	8021528 <system_execute_line+0xd8>
 8021520:	68ad      	ldr	r5, [r5, #8]
    } while(cmd);
 8021522:	b11d      	cbz	r5, 802152c <system_execute_line+0xdc>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 8021524:	2400      	movs	r4, #0
 8021526:	e7dc      	b.n	80214e2 <system_execute_line+0x92>
        cmd = retval == Status_Unhandled ? cmd->next : NULL;
 8021528:	2500      	movs	r5, #0
 802152a:	e7fa      	b.n	8021522 <system_execute_line+0xd2>

    // deprecated, to be removed
    if(retval == Status_Unhandled && (cmd = grbl.on_get_commands ? grbl.on_get_commands() : NULL)) {
 802152c:	2f54      	cmp	r7, #84	@ 0x54
 802152e:	d003      	beq.n	8021538 <system_execute_line+0xe8>
        } else
            retval = Status_IdleError;
    }

    return retval;
}
 8021530:	4638      	mov	r0, r7
 8021532:	b002      	add	sp, #8
 8021534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(retval == Status_Unhandled && (cmd = grbl.on_get_commands ? grbl.on_get_commands() : NULL)) {
 8021538:	4b4c      	ldr	r3, [pc, #304]	@ (802166c <system_execute_line+0x21c>)
 802153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802153e:	b11b      	cbz	r3, 8021548 <system_execute_line+0xf8>
 8021540:	4798      	blx	r3
 8021542:	4606      	mov	r6, r0
 8021544:	2800      	cmp	r0, #0
 8021546:	d162      	bne.n	802160e <system_execute_line+0x1be>
    if(retval == Status_Unhandled && grbl.on_unknown_sys_command) {
 8021548:	2f54      	cmp	r7, #84	@ 0x54
 802154a:	d1f1      	bne.n	8021530 <system_execute_line+0xe0>
 802154c:	4b47      	ldr	r3, [pc, #284]	@ (802166c <system_execute_line+0x21c>)
 802154e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021552:	b1ab      	cbz	r3, 8021580 <system_execute_line+0x130>
        if(args)
 8021554:	f1b9 0f00 	cmp.w	r9, #0
 8021558:	d05f      	beq.n	802161a <system_execute_line+0x1ca>
            *(--args) = '=';
 802155a:	f109 34ff 	add.w	r4, r9, #4294967295
 802155e:	233d      	movs	r3, #61	@ 0x3d
 8021560:	f809 3c01 	strb.w	r3, [r9, #-1]
        retval = grbl.on_unknown_sys_command(state_get(), line);
 8021564:	4b41      	ldr	r3, [pc, #260]	@ (802166c <system_execute_line+0x21c>)
 8021566:	f8d3 5084 	ldr.w	r5, [r3, #132]	@ 0x84
 802156a:	f7fd f96d 	bl	801e848 <state_get>
 802156e:	4641      	mov	r1, r8
 8021570:	47a8      	blx	r5
 8021572:	4607      	mov	r7, r0
        if(args)
 8021574:	2c00      	cmp	r4, #0
 8021576:	d052      	beq.n	802161e <system_execute_line+0x1ce>
            *args++ = '\0';
 8021578:	46a1      	mov	r9, r4
 802157a:	2300      	movs	r3, #0
 802157c:	f809 3b01 	strb.w	r3, [r9], #1
    if (retval == Status_Unhandled) {
 8021580:	2f54      	cmp	r7, #84	@ 0x54
 8021582:	d1d5      	bne.n	8021530 <system_execute_line+0xe0>
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8021584:	f7fd f960 	bl	801e848 <state_get>
 8021588:	b128      	cbz	r0, 8021596 <system_execute_line+0x146>
 802158a:	f7fd f95d 	bl	801e848 <state_get>
 802158e:	f240 1303 	movw	r3, #259	@ 0x103
 8021592:	4218      	tst	r0, r3
 8021594:	d067      	beq.n	8021666 <system_execute_line+0x216>
            uint_fast8_t counter = 0;
 8021596:	2300      	movs	r3, #0
 8021598:	9300      	str	r3, [sp, #0]
            if(!read_float(line, &counter, &parameter))
 802159a:	aa01      	add	r2, sp, #4
 802159c:	4669      	mov	r1, sp
 802159e:	4640      	mov	r0, r8
 80215a0:	f7f3 ff90 	bl	80154c4 <read_float>
 80215a4:	2800      	cmp	r0, #0
 80215a6:	d13c      	bne.n	8021622 <system_execute_line+0x1d2>
                retval = Status_BadNumberFormat;
 80215a8:	2702      	movs	r7, #2
 80215aa:	e7c1      	b.n	8021530 <system_execute_line+0xe0>
                        if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 80215ac:	f8da 7004 	ldr.w	r7, [sl, #4]
 80215b0:	f7fd f94a 	bl	801e848 <state_get>
 80215b4:	4649      	mov	r1, r9
 80215b6:	47b8      	blx	r7
 80215b8:	4607      	mov	r7, r0
 80215ba:	2854      	cmp	r0, #84	@ 0x54
 80215bc:	d11f      	bne.n	80215fe <system_execute_line+0x1ae>
            for(idx = 0; idx < cmd->n_commands; idx++) {
 80215be:	3401      	adds	r4, #1
 80215c0:	7833      	ldrb	r3, [r6, #0]
 80215c2:	42a3      	cmp	r3, r4
 80215c4:	d91b      	bls.n	80215fe <system_execute_line+0x1ae>
                if(!strcmp(line, cmd->commands[idx].command)) {
 80215c6:	6872      	ldr	r2, [r6, #4]
 80215c8:	0123      	lsls	r3, r4, #4
 80215ca:	eb02 1a04 	add.w	sl, r2, r4, lsl #4
 80215ce:	58d1      	ldr	r1, [r2, r3]
 80215d0:	4640      	mov	r0, r8
 80215d2:	f7e6 fd35 	bl	8008040 <strcmp>
 80215d6:	2800      	cmp	r0, #0
 80215d8:	d1f1      	bne.n	80215be <system_execute_line+0x16e>
                    if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 80215da:	4b27      	ldr	r3, [pc, #156]	@ (8021678 <system_execute_line+0x228>)
 80215dc:	795b      	ldrb	r3, [r3, #5]
 80215de:	b123      	cbz	r3, 80215ea <system_execute_line+0x19a>
 80215e0:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80215e4:	f013 0f02 	tst.w	r3, #2
 80215e8:	d008      	beq.n	80215fc <system_execute_line+0x1ac>
                    } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 80215ea:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80215ee:	f013 0f01 	tst.w	r3, #1
 80215f2:	d0db      	beq.n	80215ac <system_execute_line+0x15c>
 80215f4:	f1b9 0f00 	cmp.w	r9, #0
 80215f8:	d1e1      	bne.n	80215be <system_execute_line+0x16e>
 80215fa:	e7d7      	b.n	80215ac <system_execute_line+0x15c>
                        retval = Status_NotAllowedCriticalEvent;
 80215fc:	274f      	movs	r7, #79	@ 0x4f
            cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 80215fe:	2f54      	cmp	r7, #84	@ 0x54
 8021600:	d107      	bne.n	8021612 <system_execute_line+0x1c2>
 8021602:	68f3      	ldr	r3, [r6, #12]
 8021604:	b13b      	cbz	r3, 8021616 <system_execute_line+0x1c6>
 8021606:	4798      	blx	r3
 8021608:	4606      	mov	r6, r0
        } while(cmd);
 802160a:	2e00      	cmp	r6, #0
 802160c:	d09c      	beq.n	8021548 <system_execute_line+0xf8>
            for(idx = 0; idx < cmd->n_commands; idx++) {
 802160e:	2400      	movs	r4, #0
 8021610:	e7d6      	b.n	80215c0 <system_execute_line+0x170>
            cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 8021612:	462e      	mov	r6, r5
 8021614:	e7f9      	b.n	802160a <system_execute_line+0x1ba>
 8021616:	462e      	mov	r6, r5
 8021618:	e7f7      	b.n	802160a <system_execute_line+0x1ba>
 802161a:	464c      	mov	r4, r9
 802161c:	e7a2      	b.n	8021564 <system_execute_line+0x114>
 802161e:	46a1      	mov	r9, r4
 8021620:	e7ae      	b.n	8021580 <system_execute_line+0x130>
            else if(!isintf(parameter))
 8021622:	ed9d 0a01 	vldr	s0, [sp, #4]
 8021626:	f7f3 ffc3 	bl	80155b0 <isintf>
 802162a:	b1d0      	cbz	r0, 8021662 <system_execute_line+0x212>
            else if(args)
 802162c:	f1b9 0f00 	cmp.w	r9, #0
 8021630:	d00b      	beq.n	802164a <system_execute_line+0x1fa>
                retval = settings_store_setting((setting_id_t)parameter, args);
 8021632:	eddd 7a01 	vldr	s15, [sp, #4]
 8021636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802163a:	4649      	mov	r1, r9
 802163c:	ee17 3a90 	vmov	r3, s15
 8021640:	b298      	uxth	r0, r3
 8021642:	f7fb ff95 	bl	801d570 <settings_store_setting>
 8021646:	4607      	mov	r7, r0
 8021648:	e772      	b.n	8021530 <system_execute_line+0xe0>
                retval = report_grbl_setting((setting_id_t)parameter, NULL);
 802164a:	eddd 7a01 	vldr	s15, [sp, #4]
 802164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021652:	2100      	movs	r1, #0
 8021654:	ee17 3a90 	vmov	r3, s15
 8021658:	b298      	uxth	r0, r3
 802165a:	f7f7 fd4d 	bl	80190f8 <report_grbl_setting>
 802165e:	4607      	mov	r7, r0
 8021660:	e766      	b.n	8021530 <system_execute_line+0xe0>
                retval = Status_InvalidStatement;
 8021662:	2703      	movs	r7, #3
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8021664:	e764      	b.n	8021530 <system_execute_line+0xe0>
            retval = Status_IdleError;
 8021666:	2708      	movs	r7, #8
 8021668:	e762      	b.n	8021530 <system_execute_line+0xe0>
 802166a:	bf00      	nop
 802166c:	200013a8 	.word	0x200013a8
 8021670:	080303ac 	.word	0x080303ac
 8021674:	20000488 	.word	0x20000488
 8021678:	200014a0 	.word	0x200014a0

0802167c <system_convert_array_steps_to_mpos>:
          this function serves as a central place to compute the transformation.
\param position pointer to the target float array for the machine position.
\param steps pointer to the source step count array to transform.
 */
void system_convert_array_steps_to_mpos (float *position, int32_t *steps)
{
 802167c:	b410      	push	{r4}
#ifdef KINEMATICS_API
    kinematics.transform_steps_to_cartesian(position, steps);
#else
    uint_fast8_t idx = N_AXIS;
 802167e:	2303      	movs	r3, #3
    do {
        idx--;
 8021680:	3b01      	subs	r3, #1
        position[idx] = steps[idx] / settings.axis[idx].steps_per_mm;
 8021682:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8021686:	4a0b      	ldr	r2, [pc, #44]	@ (80216b4 <system_convert_array_steps_to_mpos+0x38>)
 8021688:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 802168c:	edd2 6a0c 	vldr	s13, [r2, #48]	@ 0x30
 8021690:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8021694:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8021698:	ee07 4a90 	vmov	s15, r4
 802169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80216a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80216a4:	ed82 7a00 	vstr	s14, [r2]
    } while(idx);
 80216a8:	2b00      	cmp	r3, #0
 80216aa:	d1e9      	bne.n	8021680 <system_convert_array_steps_to_mpos+0x4>
#endif
}
 80216ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80216b0:	4770      	bx	lr
 80216b2:	bf00      	nop
 80216b4:	20001bd8 	.word	0x20001bd8

080216b8 <system_xy_at_fixture>:
{
    bool ok = false;

    coord_data_t target, position;

    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 80216b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80216bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216c0:	dc01      	bgt.n	80216c6 <system_xy_at_fixture+0xe>
    bool ok = false;
 80216c2:	2000      	movs	r0, #0
        system_convert_array_steps_to_mpos(position.values, sys.position);
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
    }

    return ok;
}
 80216c4:	4770      	bx	lr
{
 80216c6:	b500      	push	{lr}
 80216c8:	ed2d 8b02 	vpush	{d8}
 80216cc:	b087      	sub	sp, #28
 80216ce:	eeb0 8a40 	vmov.f32	s16, s0
    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 80216d2:	a903      	add	r1, sp, #12
 80216d4:	f7fb fc5e 	bl	801cf94 <settings_read_coord_data>
 80216d8:	b920      	cbnz	r0, 80216e4 <system_xy_at_fixture+0x2c>
}
 80216da:	b007      	add	sp, #28
 80216dc:	ecbd 8b02 	vpop	{d8}
 80216e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_convert_array_steps_to_mpos(position.values, sys.position);
 80216e4:	490f      	ldr	r1, [pc, #60]	@ (8021724 <system_xy_at_fixture+0x6c>)
 80216e6:	4668      	mov	r0, sp
 80216e8:	f7ff ffc8 	bl	802167c <system_convert_array_steps_to_mpos>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 80216ec:	ed9d 0a00 	vldr	s0, [sp]
 80216f0:	eddd 7a03 	vldr	s15, [sp, #12]
 80216f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80216f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80216fc:	ed9d 7a04 	vldr	s14, [sp, #16]
 8021700:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return sqrtf(x * x + y * y);
 8021704:	ee20 0a00 	vmul.f32	s0, s0, s0
 8021708:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802170c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021710:	f005 fcee 	bl	80270f0 <sqrtf>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 8021714:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8021718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802171c:	bfac      	ite	ge
 802171e:	2001      	movge	r0, #1
 8021720:	2000      	movlt	r0, #0
 8021722:	e7da      	b.n	80216da <system_xy_at_fixture+0x22>
 8021724:	20001528 	.word	0x20001528

08021728 <system_raise_alarm>:

/*! \brief Raise and report a system alarm.
\param a #alarm_code_t enum representing the alarm code.
 */
void system_raise_alarm (alarm_code_t alarm)
{
 8021728:	b510      	push	{r4, lr}
 802172a:	4604      	mov	r4, r0
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 802172c:	f7fd f88c 	bl	801e848 <state_get>
 8021730:	2804      	cmp	r0, #4
 8021732:	d011      	beq.n	8021758 <system_raise_alarm+0x30>
        system_set_exec_alarm(alarm);
    else if(sys.alarm != alarm) {
 8021734:	4b1c      	ldr	r3, [pc, #112]	@ (80217a8 <system_raise_alarm+0x80>)
 8021736:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802173a:	42a3      	cmp	r3, r4
 802173c:	d02e      	beq.n	802179c <system_raise_alarm+0x74>
        sys.alarm = alarm;
 802173e:	4b1a      	ldr	r3, [pc, #104]	@ (80217a8 <system_raise_alarm+0x80>)
 8021740:	f883 407c 	strb.w	r4, [r3, #124]	@ 0x7c
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8021744:	1e63      	subs	r3, r4, #1
 8021746:	b2db      	uxtb	r3, r3
                              sys.alarm == Alarm_SoftLimit ||
                               sys.alarm == Alarm_EStop ||
 8021748:	2b01      	cmp	r3, #1
 802174a:	d912      	bls.n	8021772 <system_raise_alarm+0x4a>
                              sys.alarm == Alarm_SoftLimit ||
 802174c:	2c0a      	cmp	r4, #10
 802174e:	d026      	beq.n	802179e <system_raise_alarm+0x76>
                               sys.alarm == Alarm_EStop ||
 8021750:	2c11      	cmp	r4, #17
 8021752:	d00c      	beq.n	802176e <system_raise_alarm+0x46>
 8021754:	2200      	movs	r2, #0
 8021756:	e00d      	b.n	8021774 <system_raise_alarm+0x4c>
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 8021758:	4b13      	ldr	r3, [pc, #76]	@ (80217a8 <system_raise_alarm+0x80>)
 802175a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802175c:	f013 0f20 	tst.w	r3, #32
 8021760:	d1e8      	bne.n	8021734 <system_raise_alarm+0xc>
        system_set_exec_alarm(alarm);
 8021762:	4b12      	ldr	r3, [pc, #72]	@ (80217ac <system_raise_alarm+0x84>)
 8021764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021766:	4621      	mov	r1, r4
 8021768:	4811      	ldr	r0, [pc, #68]	@ (80217b0 <system_raise_alarm+0x88>)
 802176a:	4798      	blx	r3
 802176c:	e016      	b.n	802179c <system_raise_alarm+0x74>
                               sys.alarm == Alarm_EStop ||
 802176e:	2201      	movs	r2, #1
 8021770:	e000      	b.n	8021774 <system_raise_alarm+0x4c>
 8021772:	2201      	movs	r2, #1
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8021774:	4b0c      	ldr	r3, [pc, #48]	@ (80217a8 <system_raise_alarm+0x80>)
 8021776:	715a      	strb	r2, [r3, #5]
                                sys.alarm == Alarm_MotorFault;
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 8021778:	2c0a      	cmp	r4, #10
 802177a:	d012      	beq.n	80217a2 <system_raise_alarm+0x7a>
 802177c:	2001      	movs	r0, #1
 802177e:	f7fd f869 	bl	801e854 <state_set>
        if(sys.driver_started || sys.alarm == Alarm_SelftestFailed)
 8021782:	4b09      	ldr	r3, [pc, #36]	@ (80217a8 <system_raise_alarm+0x80>)
 8021784:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8021788:	b923      	cbnz	r3, 8021794 <system_raise_alarm+0x6c>
 802178a:	4b07      	ldr	r3, [pc, #28]	@ (80217a8 <system_raise_alarm+0x80>)
 802178c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8021790:	2b10      	cmp	r3, #16
 8021792:	d103      	bne.n	802179c <system_raise_alarm+0x74>
            grbl.report.alarm_message(alarm);
 8021794:	4b07      	ldr	r3, [pc, #28]	@ (80217b4 <system_raise_alarm+0x8c>)
 8021796:	691b      	ldr	r3, [r3, #16]
 8021798:	4620      	mov	r0, r4
 802179a:	4798      	blx	r3
    }
}
 802179c:	bd10      	pop	{r4, pc}
                               sys.alarm == Alarm_EStop ||
 802179e:	2201      	movs	r2, #1
 80217a0:	e7e8      	b.n	8021774 <system_raise_alarm+0x4c>
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 80217a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80217a6:	e7ea      	b.n	802177e <system_raise_alarm+0x56>
 80217a8:	200014a0 	.word	0x200014a0
 80217ac:	200011c0 	.word	0x200011c0
 80217b0:	200014ec 	.word	0x200014ec
 80217b4:	200013a8 	.word	0x200013a8

080217b8 <system_get_rt_report_flags>:
\return a #report_tracking_flags_t union containing the flags.
 */
report_tracking_flags_t system_get_rt_report_flags (void)
{
    return sys.report;
}
 80217b8:	4b01      	ldr	r3, [pc, #4]	@ (80217c0 <system_get_rt_report_flags+0x8>)
 80217ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80217bc:	4770      	bx	lr
 80217be:	bf00      	nop
 80217c0:	200014a0 	.word	0x200014a0

080217c4 <system_add_rt_report>:

Fires the \ref grbl.on_rt_reports_added event.
\param report a #report_tracking_t enum containing the flag(s) to set or clear.
 */
void system_add_rt_report (report_tracking_t report)
{
 80217c4:	b508      	push	{r3, lr}
    switch(report) {
 80217c6:	2801      	cmp	r0, #1
 80217c8:	d010      	beq.n	80217ec <system_add_rt_report+0x28>
 80217ca:	2808      	cmp	r0, #8
 80217cc:	d014      	beq.n	80217f8 <system_add_rt_report+0x34>
 80217ce:	b148      	cbz	r0, 80217e4 <system_add_rt_report+0x20>

        default:
            break;
    }

    sys.report.value |= (uint32_t)report;
 80217d0:	4a10      	ldr	r2, [pc, #64]	@ (8021814 <system_add_rt_report+0x50>)
 80217d2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80217d4:	4303      	orrs	r3, r0
 80217d6:	6313      	str	r3, [r2, #48]	@ 0x30

    if(sys.report.value && grbl.on_rt_reports_added)
 80217d8:	b13b      	cbz	r3, 80217ea <system_add_rt_report+0x26>
 80217da:	4b0f      	ldr	r3, [pc, #60]	@ (8021818 <system_add_rt_report+0x54>)
 80217dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80217de:	b123      	cbz	r3, 80217ea <system_add_rt_report+0x26>
        grbl.on_rt_reports_added((report_tracking_flags_t)((uint32_t)report));
 80217e0:	4798      	blx	r3
 80217e2:	e002      	b.n	80217ea <system_add_rt_report+0x26>
            sys.report.value = 0;
 80217e4:	4b0b      	ldr	r3, [pc, #44]	@ (8021814 <system_add_rt_report+0x50>)
 80217e6:	2200      	movs	r2, #0
 80217e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80217ea:	bd08      	pop	{r3, pc}
            if(!hal.driver_cap.mpg_mode)
 80217ec:	4b0b      	ldr	r3, [pc, #44]	@ (802181c <system_add_rt_report+0x58>)
 80217ee:	f993 31d9 	ldrsb.w	r3, [r3, #473]	@ 0x1d9
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	dbec      	blt.n	80217d0 <system_add_rt_report+0xc>
 80217f6:	e7f8      	b.n	80217ea <system_add_rt_report+0x26>
            sys.report.wco = settings.status_report.work_coord_offset;
 80217f8:	4b09      	ldr	r3, [pc, #36]	@ (8021820 <system_add_rt_report+0x5c>)
 80217fa:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80217fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8021802:	4a04      	ldr	r2, [pc, #16]	@ (8021814 <system_add_rt_report+0x50>)
 8021804:	f892 1031 	ldrb.w	r1, [r2, #49]	@ 0x31
 8021808:	f363 0100 	bfi	r1, r3, #0, #1
 802180c:	f882 1031 	strb.w	r1, [r2, #49]	@ 0x31
            break;
 8021810:	e7de      	b.n	80217d0 <system_add_rt_report+0xc>
 8021812:	bf00      	nop
 8021814:	200014a0 	.word	0x200014a0
 8021818:	200013a8 	.word	0x200013a8
 802181c:	200011c0 	.word	0x200011c0
 8021820:	20001bd8 	.word	0x20001bd8

08021824 <set_tool_reference>:
{
 8021824:	b500      	push	{lr}
 8021826:	b083      	sub	sp, #12
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8021828:	4b12      	ldr	r3, [pc, #72]	@ (8021874 <set_tool_reference+0x50>)
 802182a:	7999      	ldrb	r1, [r3, #6]
 802182c:	a801      	add	r0, sp, #4
 802182e:	f7eb fab3 	bl	800cd98 <gc_get_plane_data>
    if(sys.flags.probe_succeeded) {
 8021832:	4b11      	ldr	r3, [pc, #68]	@ (8021878 <set_tool_reference+0x54>)
 8021834:	7d9b      	ldrb	r3, [r3, #22]
 8021836:	f013 0f02 	tst.w	r3, #2
 802183a:	d016      	beq.n	802186a <set_tool_reference+0x46>
        sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 802183c:	4a0e      	ldr	r2, [pc, #56]	@ (8021878 <set_tool_reference+0x54>)
 802183e:	79d1      	ldrb	r1, [r2, #7]
 8021840:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8021844:	2001      	movs	r0, #1
 8021846:	4098      	lsls	r0, r3
 8021848:	4301      	orrs	r1, r0
 802184a:	71d1      	strb	r1, [r2, #7]
        sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 802184c:	f103 010e 	add.w	r1, r3, #14
 8021850:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8021854:	3302      	adds	r3, #2
 8021856:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    system_add_rt_report(Report_TLOReference);
 802185a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 802185e:	f7ff ffb1 	bl	80217c4 <system_add_rt_report>
}
 8021862:	2000      	movs	r0, #0
 8021864:	b003      	add	sp, #12
 8021866:	f85d fb04 	ldr.w	pc, [sp], #4
        sys.tlo_reference_set.mask = 0;
 802186a:	4b03      	ldr	r3, [pc, #12]	@ (8021878 <set_tool_reference+0x54>)
 802186c:	2200      	movs	r2, #0
 802186e:	71da      	strb	r2, [r3, #7]
 8021870:	e7f3      	b.n	802185a <set_tool_reference+0x36>
 8021872:	bf00      	nop
 8021874:	20000ef8 	.word	0x20000ef8
 8021878:	200014a0 	.word	0x200014a0

0802187c <output_parser_state>:
{
 802187c:	b508      	push	{r3, lr}
    report_gcode_modes();
 802187e:	f7f7 fecf 	bl	8019620 <report_gcode_modes>
    system_add_rt_report(Report_Homed); // Report homed state on next realtime report
 8021882:	2004      	movs	r0, #4
 8021884:	f7ff ff9e 	bl	80217c4 <system_add_rt_report>
}
 8021888:	2000      	movs	r0, #0
 802188a:	bd08      	pop	{r3, pc}

0802188c <system_clear_tlo_reference>:
{
 802188c:	b510      	push	{r4, lr}
 802188e:	b082      	sub	sp, #8
 8021890:	4604      	mov	r4, r0
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8021892:	4b0f      	ldr	r3, [pc, #60]	@ (80218d0 <system_clear_tlo_reference+0x44>)
 8021894:	7999      	ldrb	r1, [r3, #6]
 8021896:	a801      	add	r0, sp, #4
 8021898:	f7eb fa7e 	bl	800cd98 <gc_get_plane_data>
    if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 802189c:	b2e4      	uxtb	r4, r4
 802189e:	4b0d      	ldr	r3, [pc, #52]	@ (80218d4 <system_clear_tlo_reference+0x48>)
 80218a0:	7e1b      	ldrb	r3, [r3, #24]
 80218a2:	2b02      	cmp	r3, #2
 80218a4:	d00a      	beq.n	80218bc <system_clear_tlo_reference+0x30>
 80218a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80218aa:	2301      	movs	r3, #1
 80218ac:	4093      	lsls	r3, r2
 80218ae:	421c      	tst	r4, r3
 80218b0:	d002      	beq.n	80218b8 <system_clear_tlo_reference+0x2c>
        if(sys.tlo_reference_set.mask != 0) {
 80218b2:	4b09      	ldr	r3, [pc, #36]	@ (80218d8 <system_clear_tlo_reference+0x4c>)
 80218b4:	79db      	ldrb	r3, [r3, #7]
 80218b6:	b91b      	cbnz	r3, 80218c0 <system_clear_tlo_reference+0x34>
}
 80218b8:	b002      	add	sp, #8
 80218ba:	bd10      	pop	{r4, pc}
    if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 80218bc:	2305      	movs	r3, #5
 80218be:	e7f6      	b.n	80218ae <system_clear_tlo_reference+0x22>
            sys.tlo_reference_set.mask = 0;  // Invalidate tool length offset reference
 80218c0:	4b05      	ldr	r3, [pc, #20]	@ (80218d8 <system_clear_tlo_reference+0x4c>)
 80218c2:	2200      	movs	r2, #0
 80218c4:	71da      	strb	r2, [r3, #7]
            system_add_rt_report(Report_TLOReference);
 80218c6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80218ca:	f7ff ff7b 	bl	80217c4 <system_add_rt_report>
}
 80218ce:	e7f3      	b.n	80218b8 <system_clear_tlo_reference+0x2c>
 80218d0:	20000ef8 	.word	0x20000ef8
 80218d4:	20001bd8 	.word	0x20001bd8
 80218d8:	200014a0 	.word	0x200014a0

080218dc <system_flag_wco_change>:
{
 80218dc:	b508      	push	{r3, lr}
    if(settings.status_report.sync_on_wco_change)
 80218de:	4b09      	ldr	r3, [pc, #36]	@ (8021904 <system_flag_wco_change+0x28>)
 80218e0:	f893 30fd 	ldrb.w	r3, [r3, #253]	@ 0xfd
 80218e4:	f013 0f01 	tst.w	r3, #1
 80218e8:	d108      	bne.n	80218fc <system_flag_wco_change+0x20>
    if(grbl.on_wco_changed)
 80218ea:	4b07      	ldr	r3, [pc, #28]	@ (8021908 <system_flag_wco_change+0x2c>)
 80218ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80218ee:	b103      	cbz	r3, 80218f2 <system_flag_wco_change+0x16>
        grbl.on_wco_changed();
 80218f0:	4798      	blx	r3
    system_add_rt_report(Report_WCO);
 80218f2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80218f6:	f7ff ff65 	bl	80217c4 <system_add_rt_report>
}
 80218fa:	bd08      	pop	{r3, pc}
        protocol_buffer_synchronize();
 80218fc:	f7f5 ff0a 	bl	8017714 <protocol_buffer_synchronize>
 8021900:	e7f3      	b.n	80218ea <system_flag_wco_change+0xe>
 8021902:	bf00      	nop
 8021904:	20001bd8 	.word	0x20001bd8
 8021908:	200013a8 	.word	0x200013a8

0802190c <change_completed>:
//    else error?
}

// Restore HAL pointers on completion or reset.
static void change_completed (void)
{
 802190c:	b538      	push	{r3, r4, r5, lr}
    if(enqueue_realtime_command) {
 802190e:	4b1c      	ldr	r3, [pc, #112]	@ (8021980 <change_completed+0x74>)
 8021910:	681b      	ldr	r3, [r3, #0]
 8021912:	b17b      	cbz	r3, 8021934 <change_completed+0x28>
        while(spin_lock);
 8021914:	4b1b      	ldr	r3, [pc, #108]	@ (8021984 <change_completed+0x78>)
 8021916:	681b      	ldr	r3, [r3, #0]
 8021918:	2b00      	cmp	r3, #0
 802191a:	d1fb      	bne.n	8021914 <change_completed+0x8>
        hal.irq_disable();
 802191c:	4c1a      	ldr	r4, [pc, #104]	@ (8021988 <change_completed+0x7c>)
 802191e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8021920:	4798      	blx	r3
        hal.stream.set_enqueue_rt_handler(enqueue_realtime_command);
 8021922:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
 8021926:	4d16      	ldr	r5, [pc, #88]	@ (8021980 <change_completed+0x74>)
 8021928:	6828      	ldr	r0, [r5, #0]
 802192a:	4798      	blx	r3
        enqueue_realtime_command = NULL;
 802192c:	2300      	movs	r3, #0
 802192e:	602b      	str	r3, [r5, #0]
        hal.irq_enable();
 8021930:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8021932:	4798      	blx	r3
    }

    if(control_interrupt_callback) {
 8021934:	4b15      	ldr	r3, [pc, #84]	@ (802198c <change_completed+0x80>)
 8021936:	681b      	ldr	r3, [r3, #0]
 8021938:	b16b      	cbz	r3, 8021956 <change_completed+0x4a>
        while(spin_lock);
 802193a:	4b12      	ldr	r3, [pc, #72]	@ (8021984 <change_completed+0x78>)
 802193c:	681b      	ldr	r3, [r3, #0]
 802193e:	2b00      	cmp	r3, #0
 8021940:	d1fb      	bne.n	802193a <change_completed+0x2e>
        hal.irq_disable();
 8021942:	4c11      	ldr	r4, [pc, #68]	@ (8021988 <change_completed+0x7c>)
 8021944:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8021946:	4798      	blx	r3
        hal.control.interrupt_callback = control_interrupt_callback;
 8021948:	4b10      	ldr	r3, [pc, #64]	@ (802198c <change_completed+0x80>)
 802194a:	681a      	ldr	r2, [r3, #0]
 802194c:	66e2      	str	r2, [r4, #108]	@ 0x6c
        control_interrupt_callback = NULL;
 802194e:	2200      	movs	r2, #0
 8021950:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 8021952:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8021954:	4798      	blx	r3
    }

    if(probe_toolsetter)
 8021956:	4b0e      	ldr	r3, [pc, #56]	@ (8021990 <change_completed+0x84>)
 8021958:	781b      	ldrb	r3, [r3, #0]
 802195a:	b13b      	cbz	r3, 802196c <change_completed+0x60>
        grbl.on_probe_toolsetter(&current_tool, NULL, true, false);
 802195c:	4b0d      	ldr	r3, [pc, #52]	@ (8021994 <change_completed+0x88>)
 802195e:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8021962:	2300      	movs	r3, #0
 8021964:	2201      	movs	r2, #1
 8021966:	4619      	mov	r1, r3
 8021968:	480b      	ldr	r0, [pc, #44]	@ (8021998 <change_completed+0x8c>)
 802196a:	47a0      	blx	r4

    grbl.on_probe_completed = NULL;
 802196c:	2300      	movs	r3, #0
 802196e:	4a09      	ldr	r2, [pc, #36]	@ (8021994 <change_completed+0x88>)
 8021970:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    gc_state.tool_change = probe_toolsetter = false;
 8021974:	4a06      	ldr	r2, [pc, #24]	@ (8021990 <change_completed+0x84>)
 8021976:	7013      	strb	r3, [r2, #0]
 8021978:	4a08      	ldr	r2, [pc, #32]	@ (802199c <change_completed+0x90>)
 802197a:	f882 307f 	strb.w	r3, [r2, #127]	@ 0x7f
}
 802197e:	bd38      	pop	{r3, r4, r5, pc}
 8021980:	200027b4 	.word	0x200027b4
 8021984:	200027f4 	.word	0x200027f4
 8021988:	200011c0 	.word	0x200011c0
 802198c:	200027b0 	.word	0x200027b0
 8021990:	200027f9 	.word	0x200027f9
 8021994:	200013a8 	.word	0x200013a8
 8021998:	200027dc 	.word	0x200027dc
 802199c:	20000ef8 	.word	0x20000ef8

080219a0 <execute_warning>:
}

// Issue warning on cycle start event if touch off by $TPW is pending.
// Used in Manual and Manual_G59_3 modes ($341=1 or $341=2). Called from the foreground process.
static void execute_warning (void *data)
{
 80219a0:	b508      	push	{r3, lr}
    grbl.report.feedback_message(Message_ExecuteTPW);
 80219a2:	4b02      	ldr	r3, [pc, #8]	@ (80219ac <execute_warning+0xc>)
 80219a4:	68db      	ldr	r3, [r3, #12]
 80219a6:	2014      	movs	r0, #20
 80219a8:	4798      	blx	r3
}
 80219aa:	bd08      	pop	{r3, pc}
 80219ac:	200013a8 	.word	0x200013a8

080219b0 <set_probe_target>:
}

// Set and limit probe travel to be within machine limits.
static void set_probe_target (coord_data_t *target, uint8_t axis)
{
    target->values[axis] -= settings.tool_change.probing_distance;
 80219b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80219b4:	edd3 7a00 	vldr	s15, [r3]
 80219b8:	4a1d      	ldr	r2, [pc, #116]	@ (8021a30 <set_probe_target+0x80>)
 80219ba:	ed92 7a0a 	vldr	s14, [r2, #40]	@ 0x28
 80219be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80219c2:	edc3 7a00 	vstr	s15, [r3]

    if(bit_istrue(sys.homed.mask, bit(axis)) && settings.axis[axis].max_travel < -0.0f)
 80219c6:	4b1b      	ldr	r3, [pc, #108]	@ (8021a34 <set_probe_target+0x84>)
 80219c8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80219cc:	40cb      	lsrs	r3, r1
 80219ce:	f013 0f01 	tst.w	r3, #1
 80219d2:	d00b      	beq.n	80219ec <set_probe_target+0x3c>
 80219d4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80219d8:	4b15      	ldr	r3, [pc, #84]	@ (8021a30 <set_probe_target+0x80>)
 80219da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80219de:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80219e2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80219e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219ea:	d400      	bmi.n	80219ee <set_probe_target+0x3e>
        target->values[axis] = max(min(target->values[axis], sys.work_envelope.max.values[axis]), sys.work_envelope.min.values[axis]);
}
 80219ec:	4770      	bx	lr
        target->values[axis] = max(min(target->values[axis], sys.work_envelope.max.values[axis]), sys.work_envelope.min.values[axis]);
 80219ee:	f101 021a 	add.w	r2, r1, #26
 80219f2:	4b10      	ldr	r3, [pc, #64]	@ (8021a34 <set_probe_target+0x84>)
 80219f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80219f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80219fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a04:	d501      	bpl.n	8021a0a <set_probe_target+0x5a>
 8021a06:	eeb0 7a67 	vmov.f32	s14, s15
 8021a0a:	f101 0218 	add.w	r2, r1, #24
 8021a0e:	4b09      	ldr	r3, [pc, #36]	@ (8021a34 <set_probe_target+0x84>)
 8021a10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8021a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a20:	d401      	bmi.n	8021a26 <set_probe_target+0x76>
 8021a22:	eeb0 7a67 	vmov.f32	s14, s15
 8021a26:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8021a2a:	ed80 7a00 	vstr	s14, [r0]
}
 8021a2e:	e7dd      	b.n	80219ec <set_probe_target+0x3c>
 8021a30:	20001bd8 	.word	0x20001bd8
 8021a34:	200014a0 	.word	0x200014a0

08021a38 <on_toolchange_ack>:
    return drop;
}

// Trap cycle start command and control signal when tool change is acknowledged by sender.
ISR_CODE static void ISR_FUNC(on_toolchange_ack)(void)
{
 8021a38:	b508      	push	{r3, lr}
    control_interrupt_callback = hal.control.interrupt_callback;
 8021a3a:	4b06      	ldr	r3, [pc, #24]	@ (8021a54 <on_toolchange_ack+0x1c>)
 8021a3c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8021a3e:	4a06      	ldr	r2, [pc, #24]	@ (8021a58 <on_toolchange_ack+0x20>)
 8021a40:	6011      	str	r1, [r2, #0]
    hal.control.interrupt_callback = trap_control_cycle_start;
 8021a42:	4a06      	ldr	r2, [pc, #24]	@ (8021a5c <on_toolchange_ack+0x24>)
 8021a44:	66da      	str	r2, [r3, #108]	@ 0x6c
    enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(trap_stream_cycle_start);
 8021a46:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8021a4a:	4805      	ldr	r0, [pc, #20]	@ (8021a60 <on_toolchange_ack+0x28>)
 8021a4c:	4798      	blx	r3
 8021a4e:	4b05      	ldr	r3, [pc, #20]	@ (8021a64 <on_toolchange_ack+0x2c>)
 8021a50:	6018      	str	r0, [r3, #0]

}
 8021a52:	bd08      	pop	{r3, pc}
 8021a54:	200011c0 	.word	0x200011c0
 8021a58:	200027b0 	.word	0x200027b0
 8021a5c:	08021bfd 	.word	0x08021bfd
 8021a60:	08021b7d 	.word	0x08021b7d
 8021a64:	200027b4 	.word	0x200027b4

08021a68 <on_probe_completed>:
{
 8021a68:	b508      	push	{r3, lr}
    if(!sys.flags.probe_succeeded)
 8021a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8021aa8 <on_probe_completed+0x40>)
 8021a6c:	7d9b      	ldrb	r3, [r3, #22]
 8021a6e:	f013 0f02 	tst.w	r3, #2
 8021a72:	d104      	bne.n	8021a7e <on_probe_completed+0x16>
        grbl.report.feedback_message(Message_ProbeFailedRetry);
 8021a74:	4b0d      	ldr	r3, [pc, #52]	@ (8021aac <on_probe_completed+0x44>)
 8021a76:	68db      	ldr	r3, [r3, #12]
 8021a78:	2013      	movs	r0, #19
 8021a7a:	4798      	blx	r3
}
 8021a7c:	bd08      	pop	{r3, pc}
    else if(sys.tlo_reference_set.mask & bit(plane.axis_linear))
 8021a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8021aa8 <on_probe_completed+0x40>)
 8021a80:	79db      	ldrb	r3, [r3, #7]
 8021a82:	4a0b      	ldr	r2, [pc, #44]	@ (8021ab0 <on_probe_completed+0x48>)
 8021a84:	7891      	ldrb	r1, [r2, #2]
 8021a86:	40cb      	lsrs	r3, r1
 8021a88:	f013 0f01 	tst.w	r3, #1
 8021a8c:	d0f6      	beq.n	8021a7c <on_probe_completed+0x14>
        gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear, sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 8021a8e:	4b06      	ldr	r3, [pc, #24]	@ (8021aa8 <on_probe_completed+0x40>)
 8021a90:	f101 020e 	add.w	r2, r1, #14
 8021a94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021a98:	1c88      	adds	r0, r1, #2
 8021a9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021a9e:	1ad2      	subs	r2, r2, r3
 8021aa0:	2002      	movs	r0, #2
 8021aa2:	f7eb f913 	bl	800cccc <gc_set_tool_offset>
}
 8021aa6:	e7e9      	b.n	8021a7c <on_probe_completed+0x14>
 8021aa8:	200014a0 	.word	0x200014a0
 8021aac:	200013a8 	.word	0x200013a8
 8021ab0:	200027d4 	.word	0x200027d4

08021ab4 <reset>:
{
 8021ab4:	b538      	push	{r3, r4, r5, lr}
    if(next_tool) { //TODO: move to gc_xxx() function?
 8021ab6:	4b18      	ldr	r3, [pc, #96]	@ (8021b18 <reset+0x64>)
 8021ab8:	681c      	ldr	r4, [r3, #0]
 8021aba:	b1ec      	cbz	r4, 8021af8 <reset+0x44>
        if(current_tool.tool_id != next_tool->tool_id) {
 8021abc:	4b17      	ldr	r3, [pc, #92]	@ (8021b1c <reset+0x68>)
 8021abe:	691a      	ldr	r2, [r3, #16]
 8021ac0:	6923      	ldr	r3, [r4, #16]
 8021ac2:	429a      	cmp	r2, r3
 8021ac4:	d010      	beq.n	8021ae8 <reset+0x34>
            if(grbl.tool_table.n_tools)
 8021ac6:	4b16      	ldr	r3, [pc, #88]	@ (8021b20 <reset+0x6c>)
 8021ac8:	699b      	ldr	r3, [r3, #24]
 8021aca:	b1db      	cbz	r3, 8021b04 <reset+0x50>
                memcpy(gc_state.tool, &current_tool, sizeof(tool_data_t));
 8021acc:	4b15      	ldr	r3, [pc, #84]	@ (8021b24 <reset+0x70>)
 8021ace:	f8d3 50d0 	ldr.w	r5, [r3, #208]	@ 0xd0
 8021ad2:	4c12      	ldr	r4, [pc, #72]	@ (8021b1c <reset+0x68>)
 8021ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021ad6:	6028      	str	r0, [r5, #0]
 8021ad8:	6069      	str	r1, [r5, #4]
 8021ada:	60aa      	str	r2, [r5, #8]
 8021adc:	60eb      	str	r3, [r5, #12]
 8021ade:	6820      	ldr	r0, [r4, #0]
 8021ae0:	6128      	str	r0, [r5, #16]
            system_add_rt_report(Report_Tool);
 8021ae2:	2080      	movs	r0, #128	@ 0x80
 8021ae4:	f7ff fe6e 	bl	80217c4 <system_add_rt_report>
        gc_state.tool_pending = gc_state.tool->tool_id;
 8021ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8021b24 <reset+0x70>)
 8021aea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8021aee:	6912      	ldr	r2, [r2, #16]
 8021af0:	679a      	str	r2, [r3, #120]	@ 0x78
        next_tool = NULL;
 8021af2:	4b09      	ldr	r3, [pc, #36]	@ (8021b18 <reset+0x64>)
 8021af4:	2200      	movs	r2, #0
 8021af6:	601a      	str	r2, [r3, #0]
    change_completed();
 8021af8:	f7ff ff08 	bl	802190c <change_completed>
    driver_reset();
 8021afc:	4b0a      	ldr	r3, [pc, #40]	@ (8021b28 <reset+0x74>)
 8021afe:	681b      	ldr	r3, [r3, #0]
 8021b00:	4798      	blx	r3
}
 8021b02:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(next_tool, &current_tool, sizeof(tool_data_t));
 8021b04:	4d05      	ldr	r5, [pc, #20]	@ (8021b1c <reset+0x68>)
 8021b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021b08:	6020      	str	r0, [r4, #0]
 8021b0a:	6061      	str	r1, [r4, #4]
 8021b0c:	60a2      	str	r2, [r4, #8]
 8021b0e:	60e3      	str	r3, [r4, #12]
 8021b10:	6828      	ldr	r0, [r5, #0]
 8021b12:	6120      	str	r0, [r4, #16]
 8021b14:	e7e5      	b.n	8021ae2 <reset+0x2e>
 8021b16:	bf00      	nop
 8021b18:	200027d8 	.word	0x200027d8
 8021b1c:	200027dc 	.word	0x200027dc
 8021b20:	200013a8 	.word	0x200013a8
 8021b24:	20000ef8 	.word	0x20000ef8
 8021b28:	200027b8 	.word	0x200027b8

08021b2c <tool_select>:

// Set next and/or current tool. Called by gcode.c on on a Tn or M61 command (via HAL).
static void tool_select (tool_data_t *tool, bool next)
{
    next_tool = tool;
 8021b2c:	4b07      	ldr	r3, [pc, #28]	@ (8021b4c <tool_select+0x20>)
 8021b2e:	6018      	str	r0, [r3, #0]
    if(!next)
 8021b30:	b101      	cbz	r1, 8021b34 <tool_select+0x8>
 8021b32:	4770      	bx	lr
{
 8021b34:	b430      	push	{r4, r5}
 8021b36:	4604      	mov	r4, r0
        memcpy(&current_tool, tool, sizeof(tool_data_t));
 8021b38:	4d05      	ldr	r5, [pc, #20]	@ (8021b50 <tool_select+0x24>)
 8021b3a:	6800      	ldr	r0, [r0, #0]
 8021b3c:	6861      	ldr	r1, [r4, #4]
 8021b3e:	68a2      	ldr	r2, [r4, #8]
 8021b40:	68e3      	ldr	r3, [r4, #12]
 8021b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021b44:	6920      	ldr	r0, [r4, #16]
 8021b46:	6028      	str	r0, [r5, #0]
}
 8021b48:	bc30      	pop	{r4, r5}
 8021b4a:	4770      	bx	lr
 8021b4c:	200027d8 	.word	0x200027d8
 8021b50:	200027dc 	.word	0x200027dc

08021b54 <tc_on_homing_complete>:
{
 8021b54:	b510      	push	{r4, lr}
 8021b56:	4604      	mov	r4, r0
    if(on_homing_completed)
 8021b58:	4b06      	ldr	r3, [pc, #24]	@ (8021b74 <tc_on_homing_complete+0x20>)
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	b103      	cbz	r3, 8021b60 <tc_on_homing_complete+0xc>
        on_homing_completed(homing_cycle, success);
 8021b5e:	4798      	blx	r3
    if(settings.tool_change.mode != ToolChange_Disabled)
 8021b60:	4b05      	ldr	r3, [pc, #20]	@ (8021b78 <tc_on_homing_complete+0x24>)
 8021b62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021b66:	b903      	cbnz	r3, 8021b6a <tc_on_homing_complete+0x16>
}
 8021b68:	bd10      	pop	{r4, pc}
        system_clear_tlo_reference(homing_cycle);
 8021b6a:	4620      	mov	r0, r4
 8021b6c:	f7ff fe8e 	bl	802188c <system_clear_tlo_reference>
}
 8021b70:	e7fa      	b.n	8021b68 <tc_on_homing_complete+0x14>
 8021b72:	bf00      	nop
 8021b74:	200027ac 	.word	0x200027ac
 8021b78:	20001bd8 	.word	0x20001bd8

08021b7c <trap_stream_cycle_start>:
{
 8021b7c:	b510      	push	{r4, lr}
    spin_lock++;
 8021b7e:	4a17      	ldr	r2, [pc, #92]	@ (8021bdc <trap_stream_cycle_start+0x60>)
 8021b80:	6813      	ldr	r3, [r2, #0]
 8021b82:	3301      	adds	r3, #1
 8021b84:	6013      	str	r3, [r2, #0]
    if((drop = (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))) {
 8021b86:	2881      	cmp	r0, #129	@ 0x81
 8021b88:	d00b      	beq.n	8021ba2 <trap_stream_cycle_start+0x26>
 8021b8a:	287e      	cmp	r0, #126	@ 0x7e
 8021b8c:	d009      	beq.n	8021ba2 <trap_stream_cycle_start+0x26>
        drop = enqueue_realtime_command(c);
 8021b8e:	4b14      	ldr	r3, [pc, #80]	@ (8021be0 <trap_stream_cycle_start+0x64>)
 8021b90:	681b      	ldr	r3, [r3, #0]
 8021b92:	4798      	blx	r3
 8021b94:	4604      	mov	r4, r0
    spin_lock--;
 8021b96:	4a11      	ldr	r2, [pc, #68]	@ (8021bdc <trap_stream_cycle_start+0x60>)
 8021b98:	6813      	ldr	r3, [r2, #0]
 8021b9a:	3b01      	subs	r3, #1
 8021b9c:	6013      	str	r3, [r2, #0]
}
 8021b9e:	4620      	mov	r0, r4
 8021ba0:	bd10      	pop	{r4, pc}
        if(!execute_posted) {
 8021ba2:	4b10      	ldr	r3, [pc, #64]	@ (8021be4 <trap_stream_cycle_start+0x68>)
 8021ba4:	781b      	ldrb	r3, [r3, #0]
 8021ba6:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 8021baa:	2b00      	cmp	r3, #0
 8021bac:	d1f3      	bne.n	8021b96 <trap_stream_cycle_start+0x1a>
            if(!block_cycle_start)
 8021bae:	4b0e      	ldr	r3, [pc, #56]	@ (8021be8 <trap_stream_cycle_start+0x6c>)
 8021bb0:	781c      	ldrb	r4, [r3, #0]
 8021bb2:	b974      	cbnz	r4, 8021bd2 <trap_stream_cycle_start+0x56>
                execute_posted = protocol_enqueue_foreground_task(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore, NULL);
 8021bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8021bec <trap_stream_cycle_start+0x70>)
 8021bb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021bba:	2b03      	cmp	r3, #3
 8021bbc:	d007      	beq.n	8021bce <trap_stream_cycle_start+0x52>
 8021bbe:	480c      	ldr	r0, [pc, #48]	@ (8021bf0 <trap_stream_cycle_start+0x74>)
 8021bc0:	2100      	movs	r1, #0
 8021bc2:	f7f5 fdc5 	bl	8017750 <protocol_enqueue_foreground_task>
 8021bc6:	4b07      	ldr	r3, [pc, #28]	@ (8021be4 <trap_stream_cycle_start+0x68>)
 8021bc8:	7018      	strb	r0, [r3, #0]
 8021bca:	2401      	movs	r4, #1
 8021bcc:	e7e3      	b.n	8021b96 <trap_stream_cycle_start+0x1a>
 8021bce:	4809      	ldr	r0, [pc, #36]	@ (8021bf4 <trap_stream_cycle_start+0x78>)
 8021bd0:	e7f6      	b.n	8021bc0 <trap_stream_cycle_start+0x44>
                protocol_enqueue_foreground_task(execute_warning, NULL);
 8021bd2:	2100      	movs	r1, #0
 8021bd4:	4808      	ldr	r0, [pc, #32]	@ (8021bf8 <trap_stream_cycle_start+0x7c>)
 8021bd6:	f7f5 fdbb 	bl	8017750 <protocol_enqueue_foreground_task>
 8021bda:	e7dc      	b.n	8021b96 <trap_stream_cycle_start+0x1a>
 8021bdc:	200027f4 	.word	0x200027f4
 8021be0:	200027b4 	.word	0x200027b4
 8021be4:	200027f8 	.word	0x200027f8
 8021be8:	200027fa 	.word	0x200027fa
 8021bec:	20001bd8 	.word	0x20001bd8
 8021bf0:	08021d99 	.word	0x08021d99
 8021bf4:	08021dd9 	.word	0x08021dd9
 8021bf8:	080219a1 	.word	0x080219a1

08021bfc <trap_control_cycle_start>:
{
 8021bfc:	b508      	push	{r3, lr}
    spin_lock++;
 8021bfe:	4a14      	ldr	r2, [pc, #80]	@ (8021c50 <trap_control_cycle_start+0x54>)
 8021c00:	6813      	ldr	r3, [r2, #0]
 8021c02:	3301      	adds	r3, #1
 8021c04:	6013      	str	r3, [r2, #0]
    if(signals.cycle_start) {
 8021c06:	f010 0f04 	tst.w	r0, #4
 8021c0a:	d018      	beq.n	8021c3e <trap_control_cycle_start+0x42>
        if(!execute_posted) {
 8021c0c:	4b11      	ldr	r3, [pc, #68]	@ (8021c54 <trap_control_cycle_start+0x58>)
 8021c0e:	781b      	ldrb	r3, [r3, #0]
 8021c10:	b9c3      	cbnz	r3, 8021c44 <trap_control_cycle_start+0x48>
            if(!block_cycle_start)
 8021c12:	4b11      	ldr	r3, [pc, #68]	@ (8021c58 <trap_control_cycle_start+0x5c>)
 8021c14:	781b      	ldrb	r3, [r3, #0]
 8021c16:	b96b      	cbnz	r3, 8021c34 <trap_control_cycle_start+0x38>
                execute_posted = protocol_enqueue_foreground_task(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore, NULL);
 8021c18:	4b10      	ldr	r3, [pc, #64]	@ (8021c5c <trap_control_cycle_start+0x60>)
 8021c1a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021c1e:	2b03      	cmp	r3, #3
 8021c20:	d006      	beq.n	8021c30 <trap_control_cycle_start+0x34>
 8021c22:	480f      	ldr	r0, [pc, #60]	@ (8021c60 <trap_control_cycle_start+0x64>)
 8021c24:	2100      	movs	r1, #0
 8021c26:	f7f5 fd93 	bl	8017750 <protocol_enqueue_foreground_task>
 8021c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8021c54 <trap_control_cycle_start+0x58>)
 8021c2c:	7018      	strb	r0, [r3, #0]
 8021c2e:	e009      	b.n	8021c44 <trap_control_cycle_start+0x48>
 8021c30:	480c      	ldr	r0, [pc, #48]	@ (8021c64 <trap_control_cycle_start+0x68>)
 8021c32:	e7f7      	b.n	8021c24 <trap_control_cycle_start+0x28>
                protocol_enqueue_foreground_task(execute_warning, NULL);
 8021c34:	2100      	movs	r1, #0
 8021c36:	480c      	ldr	r0, [pc, #48]	@ (8021c68 <trap_control_cycle_start+0x6c>)
 8021c38:	f7f5 fd8a 	bl	8017750 <protocol_enqueue_foreground_task>
        signals.cycle_start = Off;
 8021c3c:	e002      	b.n	8021c44 <trap_control_cycle_start+0x48>
        control_interrupt_callback(signals);
 8021c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8021c6c <trap_control_cycle_start+0x70>)
 8021c40:	681b      	ldr	r3, [r3, #0]
 8021c42:	4798      	blx	r3
    spin_lock--;
 8021c44:	4a02      	ldr	r2, [pc, #8]	@ (8021c50 <trap_control_cycle_start+0x54>)
 8021c46:	6813      	ldr	r3, [r2, #0]
 8021c48:	3b01      	subs	r3, #1
 8021c4a:	6013      	str	r3, [r2, #0]
}
 8021c4c:	bd08      	pop	{r3, pc}
 8021c4e:	bf00      	nop
 8021c50:	200027f4 	.word	0x200027f4
 8021c54:	200027f8 	.word	0x200027f8
 8021c58:	200027fa 	.word	0x200027fa
 8021c5c:	20001bd8 	.word	0x20001bd8
 8021c60:	08021d99 	.word	0x08021d99
 8021c64:	08021dd9 	.word	0x08021dd9
 8021c68:	080219a1 	.word	0x080219a1
 8021c6c:	200027b0 	.word	0x200027b0

08021c70 <restore>:
{
 8021c70:	b530      	push	{r4, r5, lr}
 8021c72:	b08b      	sub	sp, #44	@ 0x2c
    plan_data_init(&plan_data);
 8021c74:	4668      	mov	r0, sp
 8021c76:	f7f4 fdb3 	bl	80167e0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8021c7a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021c7e:	f043 0301 	orr.w	r3, r3, #1
 8021c82:	f88d 3014 	strb.w	r3, [sp, #20]
    target.values[plane.axis_linear] = tool_change_position;
 8021c86:	4b3a      	ldr	r3, [pc, #232]	@ (8021d70 <restore+0x100>)
 8021c88:	789b      	ldrb	r3, [r3, #2]
 8021c8a:	483a      	ldr	r0, [pc, #232]	@ (8021d74 <restore+0x104>)
 8021c8c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021c90:	4a39      	ldr	r2, [pc, #228]	@ (8021d78 <restore+0x108>)
 8021c92:	6812      	ldr	r2, [r2, #0]
 8021c94:	601a      	str	r2, [r3, #0]
    mc_line(target.values, &plan_data);
 8021c96:	4669      	mov	r1, sp
 8021c98:	f7f1 fc40 	bl	801351c <mc_line>
    if(!settings.flags.no_restore_position_after_M6) {
 8021c9c:	4b37      	ldr	r3, [pc, #220]	@ (8021d7c <restore+0x10c>)
 8021c9e:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8021ca2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8021ca6:	d010      	beq.n	8021cca <restore+0x5a>
    if(protocol_buffer_synchronize()) {
 8021ca8:	f7f5 fd34 	bl	8017714 <protocol_buffer_synchronize>
 8021cac:	b9f0      	cbnz	r0, 8021cec <restore+0x7c>
    if(protocol_buffer_synchronize()) {
 8021cae:	f7f5 fd31 	bl	8017714 <protocol_buffer_synchronize>
 8021cb2:	2800      	cmp	r0, #0
 8021cb4:	d145      	bne.n	8021d42 <restore+0xd2>
    return !ABORTED;
 8021cb6:	4b32      	ldr	r3, [pc, #200]	@ (8021d80 <restore+0x110>)
 8021cb8:	781b      	ldrb	r3, [r3, #0]
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d152      	bne.n	8021d64 <restore+0xf4>
 8021cbe:	4b30      	ldr	r3, [pc, #192]	@ (8021d80 <restore+0x110>)
 8021cc0:	785b      	ldrb	r3, [r3, #1]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d051      	beq.n	8021d6a <restore+0xfa>
 8021cc6:	2000      	movs	r0, #0
 8021cc8:	e04d      	b.n	8021d66 <restore+0xf6>
        memcpy(&target, &previous, sizeof(coord_data_t));
 8021cca:	4b2a      	ldr	r3, [pc, #168]	@ (8021d74 <restore+0x104>)
 8021ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8021d84 <restore+0x114>)
 8021cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8021cd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        target.values[plane.axis_linear] = tool_change_position;
 8021cd4:	4a26      	ldr	r2, [pc, #152]	@ (8021d70 <restore+0x100>)
 8021cd6:	7892      	ldrb	r2, [r2, #2]
 8021cd8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8021cdc:	4926      	ldr	r1, [pc, #152]	@ (8021d78 <restore+0x108>)
 8021cde:	6809      	ldr	r1, [r1, #0]
 8021ce0:	6011      	str	r1, [r2, #0]
        mc_line(target.values, &plan_data);
 8021ce2:	4669      	mov	r1, sp
 8021ce4:	4618      	mov	r0, r3
 8021ce6:	f7f1 fc19 	bl	801351c <mc_line>
 8021cea:	e7dd      	b.n	8021ca8 <restore+0x38>
        sync_position();
 8021cec:	f7f4 fd02 	bl	80166f4 <plan_sync_position>
 8021cf0:	4c25      	ldr	r4, [pc, #148]	@ (8021d88 <restore+0x118>)
 8021cf2:	4926      	ldr	r1, [pc, #152]	@ (8021d8c <restore+0x11c>)
 8021cf4:	4620      	mov	r0, r4
 8021cf6:	f7ff fcc1 	bl	802167c <system_convert_array_steps_to_mpos>
        coolant_sync(gc_state.modal.coolant);
 8021cfa:	f814 0c4f 	ldrb.w	r0, [r4, #-79]
 8021cfe:	f7ea fdbb 	bl	800c878 <coolant_sync>
        spindle_restore(plan_data.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 8021d02:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8021d06:	f814 1c4e 	ldrb.w	r1, [r4, #-78]
 8021d0a:	9804      	ldr	r0, [sp, #16]
 8021d0c:	f7fc fa0a 	bl	801e124 <spindle_restore>
        if(!settings.flags.no_restore_position_after_M6) {
 8021d10:	4b1a      	ldr	r3, [pc, #104]	@ (8021d7c <restore+0x10c>)
 8021d12:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8021d16:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8021d1a:	d1c8      	bne.n	8021cae <restore+0x3e>
            previous.values[plane.axis_linear] += gc_get_offset(plane.axis_linear, false);
 8021d1c:	4c14      	ldr	r4, [pc, #80]	@ (8021d70 <restore+0x100>)
 8021d1e:	2100      	movs	r1, #0
 8021d20:	78a0      	ldrb	r0, [r4, #2]
 8021d22:	f7ea ff93 	bl	800cc4c <gc_get_offset>
 8021d26:	78a3      	ldrb	r3, [r4, #2]
 8021d28:	4816      	ldr	r0, [pc, #88]	@ (8021d84 <restore+0x114>)
 8021d2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021d2e:	edd3 7a00 	vldr	s15, [r3]
 8021d32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8021d36:	edc3 7a00 	vstr	s15, [r3]
            mc_line(previous.values, &plan_data);
 8021d3a:	4669      	mov	r1, sp
 8021d3c:	f7f1 fbee 	bl	801351c <mc_line>
 8021d40:	e7b5      	b.n	8021cae <restore+0x3e>
        sync_position();
 8021d42:	f7f4 fcd7 	bl	80166f4 <plan_sync_position>
 8021d46:	4911      	ldr	r1, [pc, #68]	@ (8021d8c <restore+0x11c>)
 8021d48:	480f      	ldr	r0, [pc, #60]	@ (8021d88 <restore+0x118>)
 8021d4a:	f7ff fc97 	bl	802167c <system_convert_array_steps_to_mpos>
        memcpy(&current_tool, next_tool, sizeof(tool_data_t));
 8021d4e:	4b10      	ldr	r3, [pc, #64]	@ (8021d90 <restore+0x120>)
 8021d50:	681d      	ldr	r5, [r3, #0]
 8021d52:	4c10      	ldr	r4, [pc, #64]	@ (8021d94 <restore+0x124>)
 8021d54:	6828      	ldr	r0, [r5, #0]
 8021d56:	6869      	ldr	r1, [r5, #4]
 8021d58:	68aa      	ldr	r2, [r5, #8]
 8021d5a:	68eb      	ldr	r3, [r5, #12]
 8021d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021d5e:	6928      	ldr	r0, [r5, #16]
 8021d60:	6020      	str	r0, [r4, #0]
 8021d62:	e7a8      	b.n	8021cb6 <restore+0x46>
    return !ABORTED;
 8021d64:	2000      	movs	r0, #0
}
 8021d66:	b00b      	add	sp, #44	@ 0x2c
 8021d68:	bd30      	pop	{r4, r5, pc}
    return !ABORTED;
 8021d6a:	2001      	movs	r0, #1
 8021d6c:	e7fb      	b.n	8021d66 <restore+0xf6>
 8021d6e:	bf00      	nop
 8021d70:	200027d4 	.word	0x200027d4
 8021d74:	200027c8 	.word	0x200027c8
 8021d78:	200027f0 	.word	0x200027f0
 8021d7c:	20001bd8 	.word	0x20001bd8
 8021d80:	200014a0 	.word	0x200014a0
 8021d84:	200027bc 	.word	0x200027bc
 8021d88:	20000f60 	.word	0x20000f60
 8021d8c:	20001528 	.word	0x20001528
 8021d90:	200027d8 	.word	0x200027d8
 8021d94:	200027dc 	.word	0x200027dc

08021d98 <execute_restore>:
{
 8021d98:	b510      	push	{r4, lr}
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8021d9a:	490a      	ldr	r1, [pc, #40]	@ (8021dc4 <execute_restore+0x2c>)
 8021d9c:	480a      	ldr	r0, [pc, #40]	@ (8021dc8 <execute_restore+0x30>)
 8021d9e:	f7ff fc6d 	bl	802167c <system_convert_array_steps_to_mpos>
    bool ok = restore();
 8021da2:	f7ff ff65 	bl	8021c70 <restore>
 8021da6:	4604      	mov	r4, r0
    change_completed();
 8021da8:	f7ff fdb0 	bl	802190c <change_completed>
    grbl.report.feedback_message(Message_None);
 8021dac:	4b07      	ldr	r3, [pc, #28]	@ (8021dcc <execute_restore+0x34>)
 8021dae:	68db      	ldr	r3, [r3, #12]
 8021db0:	2000      	movs	r0, #0
 8021db2:	4798      	blx	r3
    if(ok)
 8021db4:	b124      	cbz	r4, 8021dc0 <execute_restore+0x28>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 8021db6:	4b06      	ldr	r3, [pc, #24]	@ (8021dd0 <execute_restore+0x38>)
 8021db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021dba:	2102      	movs	r1, #2
 8021dbc:	4805      	ldr	r0, [pc, #20]	@ (8021dd4 <execute_restore+0x3c>)
 8021dbe:	4798      	blx	r3
}
 8021dc0:	bd10      	pop	{r4, pc}
 8021dc2:	bf00      	nop
 8021dc4:	20001528 	.word	0x20001528
 8021dc8:	200027c8 	.word	0x200027c8
 8021dcc:	200013a8 	.word	0x200013a8
 8021dd0:	200011c0 	.word	0x200011c0
 8021dd4:	200014e8 	.word	0x200014e8

08021dd8 <execute_probe>:
{
 8021dd8:	b570      	push	{r4, r5, r6, lr}
 8021dda:	b08e      	sub	sp, #56	@ 0x38
    gc_parser_flags_t flags = {0};
 8021ddc:	2400      	movs	r4, #0
    settings_read_coord_data(CoordinateSystem_G59_3, &offset.values);
 8021dde:	a90b      	add	r1, sp, #44	@ 0x2c
 8021de0:	2008      	movs	r0, #8
 8021de2:	f7fb f8d7 	bl	801cf94 <settings_read_coord_data>
    plan_data_init(&plan_data);
 8021de6:	a801      	add	r0, sp, #4
 8021de8:	f7f4 fcfa 	bl	80167e0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8021dec:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8021df0:	f043 0301 	orr.w	r3, r3, #1
 8021df4:	f88d 3018 	strb.w	r3, [sp, #24]
    target.values[plane.axis_0] = offset.values[plane.axis_0];
 8021df8:	4961      	ldr	r1, [pc, #388]	@ (8021f80 <execute_probe+0x1a8>)
 8021dfa:	780a      	ldrb	r2, [r1, #0]
 8021dfc:	ab0e      	add	r3, sp, #56	@ 0x38
 8021dfe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021e02:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8021e06:	4b5f      	ldr	r3, [pc, #380]	@ (8021f84 <execute_probe+0x1ac>)
 8021e08:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8021e0c:	6010      	str	r0, [r2, #0]
    target.values[plane.axis_1] = offset.values[plane.axis_1];
 8021e0e:	784a      	ldrb	r2, [r1, #1]
 8021e10:	a90e      	add	r1, sp, #56	@ 0x38
 8021e12:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8021e16:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 8021e1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021e1e:	6019      	str	r1, [r3, #0]
    if(probe_toolsetter)
 8021e20:	4b59      	ldr	r3, [pc, #356]	@ (8021f88 <execute_probe+0x1b0>)
 8021e22:	781b      	ldrb	r3, [r3, #0]
 8021e24:	b143      	cbz	r3, 8021e38 <execute_probe+0x60>
        grbl.on_probe_toolsetter(next_tool, &target, false, true);
 8021e26:	4b59      	ldr	r3, [pc, #356]	@ (8021f8c <execute_probe+0x1b4>)
 8021e28:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8021e2c:	2301      	movs	r3, #1
 8021e2e:	4622      	mov	r2, r4
 8021e30:	4954      	ldr	r1, [pc, #336]	@ (8021f84 <execute_probe+0x1ac>)
 8021e32:	4857      	ldr	r0, [pc, #348]	@ (8021f90 <execute_probe+0x1b8>)
 8021e34:	6800      	ldr	r0, [r0, #0]
 8021e36:	47a8      	blx	r5
    if((ok = mc_line(target.values, &plan_data))) {
 8021e38:	a901      	add	r1, sp, #4
 8021e3a:	4852      	ldr	r0, [pc, #328]	@ (8021f84 <execute_probe+0x1ac>)
 8021e3c:	f7f1 fb6e 	bl	801351c <mc_line>
 8021e40:	b918      	cbnz	r0, 8021e4a <execute_probe+0x72>
    change_completed();
 8021e42:	f7ff fd63 	bl	802190c <change_completed>
}
 8021e46:	b00e      	add	sp, #56	@ 0x38
 8021e48:	bd70      	pop	{r4, r5, r6, pc}
        target.values[plane.axis_linear] = offset.values[plane.axis_linear];
 8021e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8021f80 <execute_probe+0x1a8>)
 8021e4c:	789b      	ldrb	r3, [r3, #2]
 8021e4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8021e50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021e54:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 8021e58:	484a      	ldr	r0, [pc, #296]	@ (8021f84 <execute_probe+0x1ac>)
 8021e5a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021e5e:	601a      	str	r2, [r3, #0]
        ok = mc_line(target.values, &plan_data);
 8021e60:	a901      	add	r1, sp, #4
 8021e62:	f7f1 fb5b 	bl	801351c <mc_line>
        if(ok && probe_toolsetter)
 8021e66:	4605      	mov	r5, r0
 8021e68:	b158      	cbz	r0, 8021e82 <execute_probe+0xaa>
 8021e6a:	4b47      	ldr	r3, [pc, #284]	@ (8021f88 <execute_probe+0x1b0>)
 8021e6c:	781b      	ldrb	r3, [r3, #0]
 8021e6e:	b143      	cbz	r3, 8021e82 <execute_probe+0xaa>
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
 8021e70:	4b46      	ldr	r3, [pc, #280]	@ (8021f8c <execute_probe+0x1b4>)
 8021e72:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 8021e76:	2301      	movs	r3, #1
 8021e78:	461a      	mov	r2, r3
 8021e7a:	2100      	movs	r1, #0
 8021e7c:	4844      	ldr	r0, [pc, #272]	@ (8021f90 <execute_probe+0x1b8>)
 8021e7e:	6800      	ldr	r0, [r0, #0]
 8021e80:	47b0      	blx	r6
        plan_data.feed_rate = settings.tool_change.seek_rate;
 8021e82:	4b44      	ldr	r3, [pc, #272]	@ (8021f94 <execute_probe+0x1bc>)
 8021e84:	6a1b      	ldr	r3, [r3, #32]
 8021e86:	9301      	str	r3, [sp, #4]
        plan_data.condition.value = 0;
 8021e88:	2300      	movs	r3, #0
 8021e8a:	9306      	str	r3, [sp, #24]
        plan_data.spindle.state.value = 0;
 8021e8c:	f88d 300c 	strb.w	r3, [sp, #12]
        set_probe_target(&target, plane.axis_linear);
 8021e90:	4b3b      	ldr	r3, [pc, #236]	@ (8021f80 <execute_probe+0x1a8>)
 8021e92:	7899      	ldrb	r1, [r3, #2]
 8021e94:	483b      	ldr	r0, [pc, #236]	@ (8021f84 <execute_probe+0x1ac>)
 8021e96:	f7ff fd8b 	bl	80219b0 <set_probe_target>
        if((ok = ok && mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 8021e9a:	b135      	cbz	r5, 8021eaa <execute_probe+0xd2>
 8021e9c:	4622      	mov	r2, r4
 8021e9e:	a901      	add	r1, sp, #4
 8021ea0:	4838      	ldr	r0, [pc, #224]	@ (8021f84 <execute_probe+0x1ac>)
 8021ea2:	f7f2 fa49 	bl	8014338 <mc_probe_cycle>
 8021ea6:	2801      	cmp	r0, #1
 8021ea8:	d002      	beq.n	8021eb0 <execute_probe+0xd8>
    change_completed();
 8021eaa:	f7ff fd2f 	bl	802190c <change_completed>
    if(ok)
 8021eae:	e7ca      	b.n	8021e46 <execute_probe+0x6e>
            system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8021eb0:	4d34      	ldr	r5, [pc, #208]	@ (8021f84 <execute_probe+0x1ac>)
 8021eb2:	4939      	ldr	r1, [pc, #228]	@ (8021f98 <execute_probe+0x1c0>)
 8021eb4:	4628      	mov	r0, r5
 8021eb6:	f7ff fbe1 	bl	802167c <system_convert_array_steps_to_mpos>
            plan_data.feed_rate = settings.tool_change.pulloff_rate;
 8021eba:	4b36      	ldr	r3, [pc, #216]	@ (8021f94 <execute_probe+0x1bc>)
 8021ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021ebe:	9301      	str	r3, [sp, #4]
            target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 8021ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8021f80 <execute_probe+0x1a8>)
 8021ec2:	789b      	ldrb	r3, [r3, #2]
 8021ec4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8021ec8:	edd3 7a00 	vldr	s15, [r3]
 8021ecc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8021ed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021ed4:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_line(target.values, &plan_data))) {
 8021ed8:	a901      	add	r1, sp, #4
 8021eda:	4628      	mov	r0, r5
 8021edc:	f7f1 fb1e 	bl	801351c <mc_line>
 8021ee0:	2800      	cmp	r0, #0
 8021ee2:	d0e2      	beq.n	8021eaa <execute_probe+0xd2>
                plan_data.feed_rate = settings.tool_change.feed_rate;
 8021ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8021f94 <execute_probe+0x1bc>)
 8021ee6:	69db      	ldr	r3, [r3, #28]
 8021ee8:	9301      	str	r3, [sp, #4]
                target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 8021eea:	4b25      	ldr	r3, [pc, #148]	@ (8021f80 <execute_probe+0x1a8>)
 8021eec:	789b      	ldrb	r3, [r3, #2]
 8021eee:	4628      	mov	r0, r5
 8021ef0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8021ef4:	edd3 7a00 	vldr	s15, [r3]
 8021ef8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8021efc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021f00:	edc3 7a00 	vstr	s15, [r3]
                ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found;
 8021f04:	4622      	mov	r2, r4
 8021f06:	a901      	add	r1, sp, #4
 8021f08:	f7f2 fa16 	bl	8014338 <mc_probe_cycle>
        if(ok) {
 8021f0c:	2801      	cmp	r0, #1
 8021f0e:	d1cc      	bne.n	8021eaa <execute_probe+0xd2>
            if(!(sys.tlo_reference_set.mask & bit(plane.axis_linear))) {
 8021f10:	4b22      	ldr	r3, [pc, #136]	@ (8021f9c <execute_probe+0x1c4>)
 8021f12:	79db      	ldrb	r3, [r3, #7]
 8021f14:	4a1a      	ldr	r2, [pc, #104]	@ (8021f80 <execute_probe+0x1a8>)
 8021f16:	7891      	ldrb	r1, [r2, #2]
 8021f18:	fa23 f201 	lsr.w	r2, r3, r1
 8021f1c:	f012 0f01 	tst.w	r2, #1
 8021f20:	d121      	bne.n	8021f66 <execute_probe+0x18e>
                sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 8021f22:	4a1e      	ldr	r2, [pc, #120]	@ (8021f9c <execute_probe+0x1c4>)
 8021f24:	f101 000e 	add.w	r0, r1, #14
 8021f28:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8021f2c:	1c88      	adds	r0, r1, #2
 8021f2e:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
                sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 8021f32:	2001      	movs	r0, #1
 8021f34:	4088      	lsls	r0, r1
 8021f36:	4303      	orrs	r3, r0
 8021f38:	71d3      	strb	r3, [r2, #7]
                system_add_rt_report(Report_TLOReference);
 8021f3a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8021f3e:	f7ff fc41 	bl	80217c4 <system_add_rt_report>
                grbl.report.feedback_message(Message_ReferenceTLOEstablished);
 8021f42:	4b12      	ldr	r3, [pc, #72]	@ (8021f8c <execute_probe+0x1b4>)
 8021f44:	68db      	ldr	r3, [r3, #12]
 8021f46:	200f      	movs	r0, #15
 8021f48:	4798      	blx	r3
            ok = restore();
 8021f4a:	f7ff fe91 	bl	8021c70 <restore>
 8021f4e:	4604      	mov	r4, r0
    change_completed();
 8021f50:	f7ff fcdc 	bl	802190c <change_completed>
    if(ok)
 8021f54:	2c00      	cmp	r4, #0
 8021f56:	f43f af76 	beq.w	8021e46 <execute_probe+0x6e>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 8021f5a:	4b11      	ldr	r3, [pc, #68]	@ (8021fa0 <execute_probe+0x1c8>)
 8021f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021f5e:	2102      	movs	r1, #2
 8021f60:	4810      	ldr	r0, [pc, #64]	@ (8021fa4 <execute_probe+0x1cc>)
 8021f62:	4798      	blx	r3
}
 8021f64:	e76f      	b.n	8021e46 <execute_probe+0x6e>
                                    sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 8021f66:	4b0d      	ldr	r3, [pc, #52]	@ (8021f9c <execute_probe+0x1c4>)
 8021f68:	f101 020e 	add.w	r2, r1, #14
 8021f6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021f70:	1c88      	adds	r0, r1, #2
 8021f72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear,
 8021f76:	1ad2      	subs	r2, r2, r3
 8021f78:	2002      	movs	r0, #2
 8021f7a:	f7ea fea7 	bl	800cccc <gc_set_tool_offset>
 8021f7e:	e7e4      	b.n	8021f4a <execute_probe+0x172>
 8021f80:	200027d4 	.word	0x200027d4
 8021f84:	200027c8 	.word	0x200027c8
 8021f88:	200027f9 	.word	0x200027f9
 8021f8c:	200013a8 	.word	0x200013a8
 8021f90:	200027d8 	.word	0x200027d8
 8021f94:	20001bd8 	.word	0x20001bd8
 8021f98:	200014d8 	.word	0x200014d8
 8021f9c:	200014a0 	.word	0x200014a0
 8021fa0:	200011c0 	.word	0x200011c0
 8021fa4:	200014e8 	.word	0x200014e8

08021fa8 <tool_change>:

// Start a tool change sequence. Called by gcode.c on a M6 command (via HAL).
static status_code_t tool_change (parser_state_t *parser_state)
{
    if(next_tool == NULL)
 8021fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8022168 <tool_change+0x1c0>)
 8021faa:	681b      	ldr	r3, [r3, #0]
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	f000 80cd 	beq.w	802214c <tool_change+0x1a4>
{
 8021fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021fb4:	b08b      	sub	sp, #44	@ 0x2c
 8021fb6:	4604      	mov	r4, r0
        return Status_GCodeToolError;

    if(current_tool.tool_id == next_tool->tool_id)
 8021fb8:	4a6c      	ldr	r2, [pc, #432]	@ (802216c <tool_change+0x1c4>)
 8021fba:	6912      	ldr	r2, [r2, #16]
 8021fbc:	691b      	ldr	r3, [r3, #16]
 8021fbe:	429a      	cmp	r2, r3
 8021fc0:	f000 80c6 	beq.w	8022150 <tool_change+0x1a8>
  #else
    plane.axis_0 = X_AXIS;
    plane.axis_1 = Y_AXIS;
  #endif
#else
    gc_get_plane_data(&plane, parser_state->modal.plane_select);
 8021fc4:	7981      	ldrb	r1, [r0, #6]
 8021fc6:	486a      	ldr	r0, [pc, #424]	@ (8022170 <tool_change+0x1c8>)
 8021fc8:	f7ea fee6 	bl	800cd98 <gc_get_plane_data>
#endif

    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 8021fcc:	4b69      	ldr	r3, [pc, #420]	@ (8022174 <tool_change+0x1cc>)
 8021fce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021fd2:	2b01      	cmp	r3, #1
 8021fd4:	d07b      	beq.n	80220ce <tool_change+0x126>
 8021fd6:	2207      	movs	r2, #7

    if((sys.homed.mask & homed_req) != homed_req)
 8021fd8:	4967      	ldr	r1, [pc, #412]	@ (8022178 <tool_change+0x1d0>)
 8021fda:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 8021fde:	438a      	bics	r2, r1
 8021fe0:	f040 80b9 	bne.w	8022156 <tool_change+0x1ae>
        return Status_HomingRequired;

    if(settings.tool_change.mode != ToolChange_SemiAutomatic)
 8021fe4:	2b03      	cmp	r3, #3
 8021fe6:	d003      	beq.n	8021ff0 <tool_change+0x48>
        grbl.on_probe_completed = on_probe_completed;
 8021fe8:	4a64      	ldr	r2, [pc, #400]	@ (802217c <tool_change+0x1d4>)
 8021fea:	4965      	ldr	r1, [pc, #404]	@ (8022180 <tool_change+0x1d8>)
 8021fec:	f8c2 10a4 	str.w	r1, [r2, #164]	@ 0xa4

    block_cycle_start = settings.tool_change.mode != ToolChange_SemiAutomatic;
 8021ff0:	3b03      	subs	r3, #3
 8021ff2:	bf18      	it	ne
 8021ff4:	2301      	movne	r3, #1
 8021ff6:	4a63      	ldr	r2, [pc, #396]	@ (8022184 <tool_change+0x1dc>)
 8021ff8:	7013      	strb	r3, [r2, #0]

    // Stop spindle and coolant.
    spindle_all_off();
 8021ffa:	f7fc f9a1 	bl	801e340 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 8021ffe:	4b62      	ldr	r3, [pc, #392]	@ (8022188 <tool_change+0x1e0>)
 8022000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022002:	2500      	movs	r5, #0
 8022004:	4628      	mov	r0, r5
 8022006:	4798      	blx	r3

    execute_posted = false;
 8022008:	4b60      	ldr	r3, [pc, #384]	@ (802218c <tool_change+0x1e4>)
 802200a:	701d      	strb	r5, [r3, #0]
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 802200c:	4b5b      	ldr	r3, [pc, #364]	@ (802217c <tool_change+0x1d4>)
 802200e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8022012:	2b00      	cmp	r3, #0
 8022014:	d061      	beq.n	80220da <tool_change+0x132>
                       (settings.tool_change.mode == ToolChange_Manual ||
 8022016:	4b57      	ldr	r3, [pc, #348]	@ (8022174 <tool_change+0x1cc>)
 8022018:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
                         settings.tool_change.mode == ToolChange_Manual_G59_3 ||
 802201c:	3b01      	subs	r3, #1
 802201e:	b2db      	uxtb	r3, r3
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 8022020:	2b02      	cmp	r3, #2
 8022022:	d95c      	bls.n	80220de <tool_change+0x136>
 8022024:	462a      	mov	r2, r5
 8022026:	4b5a      	ldr	r3, [pc, #360]	@ (8022190 <tool_change+0x1e8>)
 8022028:	701a      	strb	r2, [r3, #0]
                          settings.tool_change.mode == ToolChange_SemiAutomatic);

    // Save current position.
    system_convert_array_steps_to_mpos(previous.values, sys.position);
 802202a:	4d5a      	ldr	r5, [pc, #360]	@ (8022194 <tool_change+0x1ec>)
 802202c:	4e5a      	ldr	r6, [pc, #360]	@ (8022198 <tool_change+0x1f0>)
 802202e:	4629      	mov	r1, r5
 8022030:	4630      	mov	r0, r6
 8022032:	f7ff fb23 	bl	802167c <system_convert_array_steps_to_mpos>

    // Establish axis assignments.

    previous.values[plane.axis_linear] -= gc_get_offset(plane.axis_linear, false);
 8022036:	4f4e      	ldr	r7, [pc, #312]	@ (8022170 <tool_change+0x1c8>)
 8022038:	2100      	movs	r1, #0
 802203a:	78b8      	ldrb	r0, [r7, #2]
 802203c:	f7ea fe06 	bl	800cc4c <gc_get_offset>
 8022040:	78bb      	ldrb	r3, [r7, #2]
 8022042:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8022046:	edd3 7a00 	vldr	s15, [r3]
 802204a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802204e:	edc3 7a00 	vstr	s15, [r3]

    plan_line_data_t plan_data;

    plan_data_init(&plan_data);
 8022052:	4668      	mov	r0, sp
 8022054:	f7f4 fbc4 	bl	80167e0 <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8022058:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802205c:	f043 0301 	orr.w	r3, r3, #1
 8022060:	f88d 3014 	strb.w	r3, [sp, #20]
    // TODO: add?
    //if(!settings.homing.flags.force_set_origin && bit_istrue(settings.homing.dir_mask.value, bit(plane.axis_linear)))
    //    tool_change_position = ?
    //else

    tool_change_position = sys.home_position[plane.axis_linear]; // - settings.homing.flags.force_set_origin ? LINEAR_AXIS_HOME_OFFSET : 0.0f;
 8022064:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022068:	3d88      	subs	r5, #136	@ 0x88
 802206a:	f10c 0316 	add.w	r3, ip, #22
 802206e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8022072:	682d      	ldr	r5, [r5, #0]
 8022074:	4b49      	ldr	r3, [pc, #292]	@ (802219c <tool_change+0x1f4>)
 8022076:	601d      	str	r5, [r3, #0]

    // Rapid to home position of linear axis.
    memcpy(&target, &previous, sizeof(coord_data_t));
 8022078:	4b49      	ldr	r3, [pc, #292]	@ (80221a0 <tool_change+0x1f8>)
 802207a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802207e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    target.values[plane.axis_linear] = tool_change_position;
 8022082:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8022086:	f8cc 5000 	str.w	r5, [ip]
    if(!mc_line(target.values, &plan_data))
 802208a:	4669      	mov	r1, sp
 802208c:	4618      	mov	r0, r3
 802208e:	f7f1 fa45 	bl	801351c <mc_line>
 8022092:	2800      	cmp	r0, #0
 8022094:	d061      	beq.n	802215a <tool_change+0x1b2>
        return Status_Reset;

#if COMPATIBILITY_LEVEL <= 1
    if(settings.tool_change.mode == ToolChange_Manual_G59_3) {
 8022096:	4b37      	ldr	r3, [pc, #220]	@ (8022174 <tool_change+0x1cc>)
 8022098:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802209c:	2b02      	cmp	r3, #2
 802209e:	d020      	beq.n	80220e2 <tool_change+0x13a>
        if(probe_toolsetter)
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
    }
#endif

    protocol_buffer_synchronize();
 80220a0:	f7f5 fb38 	bl	8017714 <protocol_buffer_synchronize>
    sync_position();
 80220a4:	f7f4 fb26 	bl	80166f4 <plan_sync_position>
 80220a8:	4d3a      	ldr	r5, [pc, #232]	@ (8022194 <tool_change+0x1ec>)
 80220aa:	4629      	mov	r1, r5
 80220ac:	483d      	ldr	r0, [pc, #244]	@ (80221a4 <tool_change+0x1fc>)
 80220ae:	f7ff fae5 	bl	802167c <system_convert_array_steps_to_mpos>

    // Enter tool change mode, waits for cycle start to continue.
    parser_state->tool_change = true;
 80220b2:	2301      	movs	r3, #1
 80220b4:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 80220b8:	4b33      	ldr	r3, [pc, #204]	@ (8022188 <tool_change+0x1e0>)
 80220ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80220bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80220c0:	f1a5 0040 	sub.w	r0, r5, #64	@ 0x40
 80220c4:	4798      	blx	r3
    protocol_execute_realtime();                    // Execute...
 80220c6:	f7f5 f857 	bl	8017178 <protocol_execute_realtime>

    return Status_OK;
 80220ca:	2000      	movs	r0, #0
 80220cc:	e041      	b.n	8022152 <tool_change+0x1aa>
    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 80220ce:	4a28      	ldr	r2, [pc, #160]	@ (8022170 <tool_change+0x1c8>)
 80220d0:	7891      	ldrb	r1, [r2, #2]
 80220d2:	2201      	movs	r2, #1
 80220d4:	408a      	lsls	r2, r1
 80220d6:	b2d2      	uxtb	r2, r2
 80220d8:	e77e      	b.n	8021fd8 <tool_change+0x30>
    probe_toolsetter = grbl.on_probe_toolsetter != NULL &&
 80220da:	2200      	movs	r2, #0
 80220dc:	e7a3      	b.n	8022026 <tool_change+0x7e>
 80220de:	2201      	movs	r2, #1
 80220e0:	e7a1      	b.n	8022026 <tool_change+0x7e>
        settings_read_coord_data(CoordinateSystem_G59_3, &target.values);
 80220e2:	4d2f      	ldr	r5, [pc, #188]	@ (80221a0 <tool_change+0x1f8>)
 80220e4:	4629      	mov	r1, r5
 80220e6:	2008      	movs	r0, #8
 80220e8:	f7fa ff54 	bl	801cf94 <settings_read_coord_data>
        float tmp_pos = target.values[plane.axis_linear];
 80220ec:	78bb      	ldrb	r3, [r7, #2]
 80220ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80220f2:	682e      	ldr	r6, [r5, #0]
        target.values[plane.axis_linear] = tool_change_position;
 80220f4:	4b29      	ldr	r3, [pc, #164]	@ (802219c <tool_change+0x1f4>)
 80220f6:	681b      	ldr	r3, [r3, #0]
 80220f8:	602b      	str	r3, [r5, #0]
        if(probe_toolsetter)
 80220fa:	4b25      	ldr	r3, [pc, #148]	@ (8022190 <tool_change+0x1e8>)
 80220fc:	781b      	ldrb	r3, [r3, #0]
 80220fe:	b143      	cbz	r3, 8022112 <tool_change+0x16a>
            grbl.on_probe_toolsetter(next_tool, &target, false, true);
 8022100:	4b1e      	ldr	r3, [pc, #120]	@ (802217c <tool_change+0x1d4>)
 8022102:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8022106:	2301      	movs	r3, #1
 8022108:	2200      	movs	r2, #0
 802210a:	4925      	ldr	r1, [pc, #148]	@ (80221a0 <tool_change+0x1f8>)
 802210c:	4816      	ldr	r0, [pc, #88]	@ (8022168 <tool_change+0x1c0>)
 802210e:	6800      	ldr	r0, [r0, #0]
 8022110:	47a8      	blx	r5
        if(!mc_line(target.values, &plan_data))
 8022112:	4669      	mov	r1, sp
 8022114:	4822      	ldr	r0, [pc, #136]	@ (80221a0 <tool_change+0x1f8>)
 8022116:	f7f1 fa01 	bl	801351c <mc_line>
 802211a:	b300      	cbz	r0, 802215e <tool_change+0x1b6>
        target.values[plane.axis_linear] = tmp_pos;
 802211c:	4b14      	ldr	r3, [pc, #80]	@ (8022170 <tool_change+0x1c8>)
 802211e:	789b      	ldrb	r3, [r3, #2]
 8022120:	481f      	ldr	r0, [pc, #124]	@ (80221a0 <tool_change+0x1f8>)
 8022122:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022126:	601e      	str	r6, [r3, #0]
        if(!mc_line(target.values, &plan_data))
 8022128:	4669      	mov	r1, sp
 802212a:	f7f1 f9f7 	bl	801351c <mc_line>
 802212e:	b1c0      	cbz	r0, 8022162 <tool_change+0x1ba>
        if(probe_toolsetter)
 8022130:	4b17      	ldr	r3, [pc, #92]	@ (8022190 <tool_change+0x1e8>)
 8022132:	781b      	ldrb	r3, [r3, #0]
 8022134:	2b00      	cmp	r3, #0
 8022136:	d0b3      	beq.n	80220a0 <tool_change+0xf8>
            grbl.on_probe_toolsetter(next_tool, NULL, true, true);
 8022138:	4b10      	ldr	r3, [pc, #64]	@ (802217c <tool_change+0x1d4>)
 802213a:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 802213e:	2301      	movs	r3, #1
 8022140:	461a      	mov	r2, r3
 8022142:	2100      	movs	r1, #0
 8022144:	4808      	ldr	r0, [pc, #32]	@ (8022168 <tool_change+0x1c0>)
 8022146:	6800      	ldr	r0, [r0, #0]
 8022148:	47a8      	blx	r5
 802214a:	e7a9      	b.n	80220a0 <tool_change+0xf8>
        return Status_GCodeToolError;
 802214c:	202f      	movs	r0, #47	@ 0x2f
}
 802214e:	4770      	bx	lr
        return Status_OK;
 8022150:	2000      	movs	r0, #0
}
 8022152:	b00b      	add	sp, #44	@ 0x2c
 8022154:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return Status_HomingRequired;
 8022156:	202e      	movs	r0, #46	@ 0x2e
 8022158:	e7fb      	b.n	8022152 <tool_change+0x1aa>
        return Status_Reset;
 802215a:	2012      	movs	r0, #18
 802215c:	e7f9      	b.n	8022152 <tool_change+0x1aa>
            return Status_Reset;
 802215e:	2012      	movs	r0, #18
 8022160:	e7f7      	b.n	8022152 <tool_change+0x1aa>
            return Status_Reset;
 8022162:	2012      	movs	r0, #18
 8022164:	e7f5      	b.n	8022152 <tool_change+0x1aa>
 8022166:	bf00      	nop
 8022168:	200027d8 	.word	0x200027d8
 802216c:	200027dc 	.word	0x200027dc
 8022170:	200027d4 	.word	0x200027d4
 8022174:	20001bd8 	.word	0x20001bd8
 8022178:	200014a0 	.word	0x200014a0
 802217c:	200013a8 	.word	0x200013a8
 8022180:	08021a69 	.word	0x08021a69
 8022184:	200027fa 	.word	0x200027fa
 8022188:	200011c0 	.word	0x200011c0
 802218c:	200027f8 	.word	0x200027f8
 8022190:	200027f9 	.word	0x200027f9
 8022194:	20001528 	.word	0x20001528
 8022198:	200027bc 	.word	0x200027bc
 802219c:	200027f0 	.word	0x200027f0
 80221a0:	200027c8 	.word	0x200027c8
 80221a4:	20000f60 	.word	0x20000f60

080221a8 <tc_init>:

// Claim HAL tool change entry points and clear current tool offsets.
// TODO: change to survive a warm reset?
void tc_init (void)
{
 80221a8:	b508      	push	{r3, lr}
    static bool on_homing_subscribed = false;

    if(hal.driver_cap.atc) // Do not override driver tool change implementation!
 80221aa:	4b29      	ldr	r3, [pc, #164]	@ (8022250 <tc_init+0xa8>)
 80221ac:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 80221b0:	f013 0f02 	tst.w	r3, #2
 80221b4:	d14a      	bne.n	802224c <tc_init+0xa4>
        return;

    if(!hal.stream.suspend_read) // Tool change requires support for suspending input stream.
 80221b6:	4b26      	ldr	r3, [pc, #152]	@ (8022250 <tc_init+0xa8>)
 80221b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d045      	beq.n	802224c <tc_init+0xa4>
        return;

    if(sys.tlo_reference_set.mask != 0) {
 80221c0:	4b24      	ldr	r3, [pc, #144]	@ (8022254 <tc_init+0xac>)
 80221c2:	79db      	ldrb	r3, [r3, #7]
 80221c4:	2b00      	cmp	r3, #0
 80221c6:	d130      	bne.n	802222a <tc_init+0x82>
        sys.tlo_reference_set.mask = 0;
        system_add_rt_report(Report_TLOReference);
    }

    gc_set_tool_offset(ToolLengthOffset_Cancel, 0, 0.0f);
 80221c8:	2200      	movs	r2, #0
 80221ca:	4611      	mov	r1, r2
 80221cc:	4610      	mov	r0, r2
 80221ce:	f7ea fd7d 	bl	800cccc <gc_set_tool_offset>

    if(settings.tool_change.mode == ToolChange_Disabled || settings.tool_change.mode == ToolChange_Ignore) {
 80221d2:	4b21      	ldr	r3, [pc, #132]	@ (8022258 <tc_init+0xb0>)
 80221d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80221d8:	2b00      	cmp	r3, #0
 80221da:	d02e      	beq.n	802223a <tc_init+0x92>
 80221dc:	2b04      	cmp	r3, #4
 80221de:	d02c      	beq.n	802223a <tc_init+0x92>
        hal.tool.select = NULL;
        hal.tool.change = NULL;
        grbl.on_toolchange_ack = NULL;
    } else {
        hal.tool.select = tool_select;
 80221e0:	4b1b      	ldr	r3, [pc, #108]	@ (8022250 <tc_init+0xa8>)
 80221e2:	4a1e      	ldr	r2, [pc, #120]	@ (802225c <tc_init+0xb4>)
 80221e4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        hal.tool.change = tool_change;
 80221e8:	4a1d      	ldr	r2, [pc, #116]	@ (8022260 <tc_init+0xb8>)
 80221ea:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        grbl.on_toolchange_ack = on_toolchange_ack;
 80221ee:	4b1d      	ldr	r3, [pc, #116]	@ (8022264 <tc_init+0xbc>)
 80221f0:	4a1d      	ldr	r2, [pc, #116]	@ (8022268 <tc_init+0xc0>)
 80221f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        if(!on_homing_subscribed) {
 80221f6:	4b1d      	ldr	r3, [pc, #116]	@ (802226c <tc_init+0xc4>)
 80221f8:	781b      	ldrb	r3, [r3, #0]
 80221fa:	b953      	cbnz	r3, 8022212 <tc_init+0x6a>
            on_homing_subscribed = true;
 80221fc:	4b1b      	ldr	r3, [pc, #108]	@ (802226c <tc_init+0xc4>)
 80221fe:	2201      	movs	r2, #1
 8022200:	701a      	strb	r2, [r3, #0]
            on_homing_completed = grbl.on_homing_completed;
 8022202:	4b18      	ldr	r3, [pc, #96]	@ (8022264 <tc_init+0xbc>)
 8022204:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8022208:	4a19      	ldr	r2, [pc, #100]	@ (8022270 <tc_init+0xc8>)
 802220a:	6011      	str	r1, [r2, #0]
            grbl.on_homing_completed = tc_on_homing_complete;
 802220c:	4a19      	ldr	r2, [pc, #100]	@ (8022274 <tc_init+0xcc>)
 802220e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        }
        if(driver_reset == NULL) {
 8022212:	4b19      	ldr	r3, [pc, #100]	@ (8022278 <tc_init+0xd0>)
 8022214:	681b      	ldr	r3, [r3, #0]
 8022216:	b9cb      	cbnz	r3, 802224c <tc_init+0xa4>
            driver_reset = hal.driver_reset;
 8022218:	4b0d      	ldr	r3, [pc, #52]	@ (8022250 <tc_init+0xa8>)
 802221a:	f8d3 1170 	ldr.w	r1, [r3, #368]	@ 0x170
 802221e:	4a16      	ldr	r2, [pc, #88]	@ (8022278 <tc_init+0xd0>)
 8022220:	6011      	str	r1, [r2, #0]
            hal.driver_reset = reset;
 8022222:	4a16      	ldr	r2, [pc, #88]	@ (802227c <tc_init+0xd4>)
 8022224:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8022228:	e010      	b.n	802224c <tc_init+0xa4>
        sys.tlo_reference_set.mask = 0;
 802222a:	4b0a      	ldr	r3, [pc, #40]	@ (8022254 <tc_init+0xac>)
 802222c:	2200      	movs	r2, #0
 802222e:	71da      	strb	r2, [r3, #7]
        system_add_rt_report(Report_TLOReference);
 8022230:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8022234:	f7ff fac6 	bl	80217c4 <system_add_rt_report>
 8022238:	e7c6      	b.n	80221c8 <tc_init+0x20>
        hal.tool.select = NULL;
 802223a:	4a05      	ldr	r2, [pc, #20]	@ (8022250 <tc_init+0xa8>)
 802223c:	2300      	movs	r3, #0
 802223e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
        hal.tool.change = NULL;
 8022242:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        grbl.on_toolchange_ack = NULL;
 8022246:	4a07      	ldr	r2, [pc, #28]	@ (8022264 <tc_init+0xbc>)
 8022248:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
        }
    }
}
 802224c:	bd08      	pop	{r3, pc}
 802224e:	bf00      	nop
 8022250:	200011c0 	.word	0x200011c0
 8022254:	200014a0 	.word	0x200014a0
 8022258:	20001bd8 	.word	0x20001bd8
 802225c:	08021b2d 	.word	0x08021b2d
 8022260:	08021fa9 	.word	0x08021fa9
 8022264:	200013a8 	.word	0x200013a8
 8022268:	08021a39 	.word	0x08021a39
 802226c:	200027a8 	.word	0x200027a8
 8022270:	200027ac 	.word	0x200027ac
 8022274:	08021b55 	.word	0x08021b55
 8022278:	200027b8 	.word	0x200027b8
 802227c:	08021ab5 	.word	0x08021ab5

08022280 <tc_probe_workpiece>:
// Perform a probe cycle: set tool length offset and restart job if successful.
// Note: tool length offset is set by the on_probe_completed event handler.
// Called by the $TPW system command.
status_code_t tc_probe_workpiece (void)
{
    if(!(settings.tool_change.mode == ToolChange_Manual || settings.tool_change.mode == ToolChange_Manual_G59_3) || enqueue_realtime_command == NULL)
 8022280:	4b5d      	ldr	r3, [pc, #372]	@ (80223f8 <tc_probe_workpiece+0x178>)
 8022282:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8022286:	3b01      	subs	r3, #1
 8022288:	b2db      	uxtb	r3, r3
 802228a:	2b01      	cmp	r3, #1
 802228c:	f200 80ad 	bhi.w	80223ea <tc_probe_workpiece+0x16a>
 8022290:	4b5a      	ldr	r3, [pc, #360]	@ (80223fc <tc_probe_workpiece+0x17c>)
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	2b00      	cmp	r3, #0
 8022296:	f000 80aa 	beq.w	80223ee <tc_probe_workpiece+0x16e>
{
 802229a:	b530      	push	{r4, r5, lr}
 802229c:	b08b      	sub	sp, #44	@ 0x2c
    bool ok;
    gc_parser_flags_t flags = {0};
    plan_line_data_t plan_data;

#if COMPATIBILITY_LEVEL <= 1
    if(probe_toolsetter)
 802229e:	4b58      	ldr	r3, [pc, #352]	@ (8022400 <tc_probe_workpiece+0x180>)
 80222a0:	781b      	ldrb	r3, [r3, #0]
 80222a2:	b9fb      	cbnz	r3, 80222e4 <tc_probe_workpiece+0x64>
        grbl.on_probe_toolsetter(next_tool, NULL, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
#endif

    // Get current position.
    system_convert_array_steps_to_mpos(target.values, sys.position);
 80222a4:	4c57      	ldr	r4, [pc, #348]	@ (8022404 <tc_probe_workpiece+0x184>)
 80222a6:	4958      	ldr	r1, [pc, #352]	@ (8022408 <tc_probe_workpiece+0x188>)
 80222a8:	4620      	mov	r0, r4
 80222aa:	f7ff f9e7 	bl	802167c <system_convert_array_steps_to_mpos>

    flags.probe_is_no_error = On;
 80222ae:	2510      	movs	r5, #16

    plan_data_init(&plan_data);
 80222b0:	4668      	mov	r0, sp
 80222b2:	f7f4 fa95 	bl	80167e0 <plan_data_init>
    plan_data.feed_rate = settings.tool_change.seek_rate;
 80222b6:	4b50      	ldr	r3, [pc, #320]	@ (80223f8 <tc_probe_workpiece+0x178>)
 80222b8:	6a1b      	ldr	r3, [r3, #32]
 80222ba:	9300      	str	r3, [sp, #0]

    set_probe_target(&target, plane.axis_linear);
 80222bc:	4b53      	ldr	r3, [pc, #332]	@ (802240c <tc_probe_workpiece+0x18c>)
 80222be:	7899      	ldrb	r1, [r3, #2]
 80222c0:	4620      	mov	r0, r4
 80222c2:	f7ff fb75 	bl	80219b0 <set_probe_target>

    if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 80222c6:	462a      	mov	r2, r5
 80222c8:	4669      	mov	r1, sp
 80222ca:	4620      	mov	r0, r4
 80222cc:	f7f2 f834 	bl	8014338 <mc_probe_cycle>
 80222d0:	2801      	cmp	r0, #1
 80222d2:	bf0c      	ite	eq
 80222d4:	2401      	moveq	r4, #1
 80222d6:	2400      	movne	r4, #0
 80222d8:	d014      	beq.n	8022304 <tc_probe_workpiece+0x84>
                ok = mc_line(target.values, &plan_data);
            }
        }
    }

    if(ok && protocol_buffer_synchronize()) {
 80222da:	2c00      	cmp	r4, #0
 80222dc:	d16a      	bne.n	80223b4 <tc_probe_workpiece+0x134>
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
                                      ? Message_CycleStart2Continue
                                      : Message_TPCycleStart2Continue);
    }

    return ok ? Status_OK : Status_GCodeToolError;
 80222de:	202f      	movs	r0, #47	@ 0x2f
}
 80222e0:	b00b      	add	sp, #44	@ 0x2c
 80222e2:	bd30      	pop	{r4, r5, pc}
        grbl.on_probe_toolsetter(next_tool, NULL, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 80222e4:	4b4a      	ldr	r3, [pc, #296]	@ (8022410 <tc_probe_workpiece+0x190>)
 80222e6:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80222ea:	4b4a      	ldr	r3, [pc, #296]	@ (8022414 <tc_probe_workpiece+0x194>)
 80222ec:	681d      	ldr	r5, [r3, #0]
 80222ee:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80222f2:	2008      	movs	r0, #8
 80222f4:	f7ff f9e0 	bl	80216b8 <system_xy_at_fixture>
 80222f8:	4602      	mov	r2, r0
 80222fa:	2301      	movs	r3, #1
 80222fc:	2100      	movs	r1, #0
 80222fe:	4628      	mov	r0, r5
 8022300:	47a0      	blx	r4
 8022302:	e7cf      	b.n	80222a4 <tc_probe_workpiece+0x24>
        system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8022304:	4c3f      	ldr	r4, [pc, #252]	@ (8022404 <tc_probe_workpiece+0x184>)
 8022306:	4944      	ldr	r1, [pc, #272]	@ (8022418 <tc_probe_workpiece+0x198>)
 8022308:	4620      	mov	r0, r4
 802230a:	f7ff f9b7 	bl	802167c <system_convert_array_steps_to_mpos>
        plan_data.feed_rate = settings.tool_change.pulloff_rate;
 802230e:	4b3a      	ldr	r3, [pc, #232]	@ (80223f8 <tc_probe_workpiece+0x178>)
 8022310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022312:	9300      	str	r3, [sp, #0]
        target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 8022314:	4b3d      	ldr	r3, [pc, #244]	@ (802240c <tc_probe_workpiece+0x18c>)
 8022316:	789b      	ldrb	r3, [r3, #2]
 8022318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802231c:	edd3 7a00 	vldr	s15, [r3]
 8022320:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8022324:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022328:	edc3 7a00 	vstr	s15, [r3]
        if((ok = mc_line(target.values, &plan_data))) {
 802232c:	4669      	mov	r1, sp
 802232e:	4620      	mov	r0, r4
 8022330:	f7f1 f8f4 	bl	801351c <mc_line>
 8022334:	4604      	mov	r4, r0
 8022336:	2800      	cmp	r0, #0
 8022338:	d03f      	beq.n	80223ba <tc_probe_workpiece+0x13a>
            plan_data.feed_rate = settings.tool_change.feed_rate;
 802233a:	4b2f      	ldr	r3, [pc, #188]	@ (80223f8 <tc_probe_workpiece+0x178>)
 802233c:	69db      	ldr	r3, [r3, #28]
 802233e:	9300      	str	r3, [sp, #0]
            target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 8022340:	4b32      	ldr	r3, [pc, #200]	@ (802240c <tc_probe_workpiece+0x18c>)
 8022342:	789b      	ldrb	r3, [r3, #2]
 8022344:	482f      	ldr	r0, [pc, #188]	@ (8022404 <tc_probe_workpiece+0x184>)
 8022346:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802234a:	edd3 7a00 	vldr	s15, [r3]
 802234e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8022352:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022356:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found)) {
 802235a:	462a      	mov	r2, r5
 802235c:	4669      	mov	r1, sp
 802235e:	f7f1 ffeb 	bl	8014338 <mc_probe_cycle>
 8022362:	2801      	cmp	r0, #1
 8022364:	bf0c      	ite	eq
 8022366:	2401      	moveq	r4, #1
 8022368:	2400      	movne	r4, #0
 802236a:	d1b6      	bne.n	80222da <tc_probe_workpiece+0x5a>
                system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 802236c:	4c25      	ldr	r4, [pc, #148]	@ (8022404 <tc_probe_workpiece+0x184>)
 802236e:	492a      	ldr	r1, [pc, #168]	@ (8022418 <tc_probe_workpiece+0x198>)
 8022370:	4620      	mov	r0, r4
 8022372:	f7ff f983 	bl	802167c <system_convert_array_steps_to_mpos>
                plan_data.feed_rate = settings.tool_change.seek_rate;
 8022376:	4b20      	ldr	r3, [pc, #128]	@ (80223f8 <tc_probe_workpiece+0x178>)
 8022378:	6a1b      	ldr	r3, [r3, #32]
 802237a:	9300      	str	r3, [sp, #0]
                target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE * 2.0f;
 802237c:	4b23      	ldr	r3, [pc, #140]	@ (802240c <tc_probe_workpiece+0x18c>)
 802237e:	789b      	ldrb	r3, [r3, #2]
 8022380:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8022384:	edd4 7a00 	vldr	s15, [r4]
 8022388:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 802238c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022390:	edc4 7a00 	vstr	s15, [r4]
                if(target.values[plane.axis_linear] > tool_change_position)
 8022394:	4a21      	ldr	r2, [pc, #132]	@ (802241c <tc_probe_workpiece+0x19c>)
 8022396:	ed92 7a00 	vldr	s14, [r2]
 802239a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223a2:	dd01      	ble.n	80223a8 <tc_probe_workpiece+0x128>
                    target.values[plane.axis_linear] = tool_change_position;
 80223a4:	ed84 7a00 	vstr	s14, [r4]
                ok = mc_line(target.values, &plan_data);
 80223a8:	4669      	mov	r1, sp
 80223aa:	4816      	ldr	r0, [pc, #88]	@ (8022404 <tc_probe_workpiece+0x184>)
 80223ac:	f7f1 f8b6 	bl	801351c <mc_line>
 80223b0:	4604      	mov	r4, r0
 80223b2:	e792      	b.n	80222da <tc_probe_workpiece+0x5a>
    if(ok && protocol_buffer_synchronize()) {
 80223b4:	f7f5 f9ae 	bl	8017714 <protocol_buffer_synchronize>
 80223b8:	b910      	cbnz	r0, 80223c0 <tc_probe_workpiece+0x140>
    return ok ? Status_OK : Status_GCodeToolError;
 80223ba:	b1d4      	cbz	r4, 80223f2 <tc_probe_workpiece+0x172>
 80223bc:	2000      	movs	r0, #0
 80223be:	e78f      	b.n	80222e0 <tc_probe_workpiece+0x60>
        sync_position();
 80223c0:	f7f4 f998 	bl	80166f4 <plan_sync_position>
 80223c4:	4910      	ldr	r1, [pc, #64]	@ (8022408 <tc_probe_workpiece+0x188>)
 80223c6:	4816      	ldr	r0, [pc, #88]	@ (8022420 <tc_probe_workpiece+0x1a0>)
 80223c8:	f7ff f958 	bl	802167c <system_convert_array_steps_to_mpos>
        block_cycle_start = false;
 80223cc:	4b15      	ldr	r3, [pc, #84]	@ (8022424 <tc_probe_workpiece+0x1a4>)
 80223ce:	2200      	movs	r2, #0
 80223d0:	701a      	strb	r2, [r3, #0]
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
 80223d2:	4b0f      	ldr	r3, [pc, #60]	@ (8022410 <tc_probe_workpiece+0x190>)
 80223d4:	68db      	ldr	r3, [r3, #12]
 80223d6:	4a08      	ldr	r2, [pc, #32]	@ (80223f8 <tc_probe_workpiece+0x178>)
 80223d8:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80223dc:	2a02      	cmp	r2, #2
 80223de:	d002      	beq.n	80223e6 <tc_probe_workpiece+0x166>
 80223e0:	2012      	movs	r0, #18
 80223e2:	4798      	blx	r3
 80223e4:	e7e9      	b.n	80223ba <tc_probe_workpiece+0x13a>
 80223e6:	2011      	movs	r0, #17
 80223e8:	e7fb      	b.n	80223e2 <tc_probe_workpiece+0x162>
        return Status_InvalidStatement;
 80223ea:	2003      	movs	r0, #3
 80223ec:	4770      	bx	lr
 80223ee:	2003      	movs	r0, #3
}
 80223f0:	4770      	bx	lr
    return ok ? Status_OK : Status_GCodeToolError;
 80223f2:	202f      	movs	r0, #47	@ 0x2f
 80223f4:	e774      	b.n	80222e0 <tc_probe_workpiece+0x60>
 80223f6:	bf00      	nop
 80223f8:	20001bd8 	.word	0x20001bd8
 80223fc:	200027b4 	.word	0x200027b4
 8022400:	200027f9 	.word	0x200027f9
 8022404:	200027c8 	.word	0x200027c8
 8022408:	20001528 	.word	0x20001528
 802240c:	200027d4 	.word	0x200027d4
 8022410:	200013a8 	.word	0x200013a8
 8022414:	200027d8 	.word	0x200027d8
 8022418:	200014d8 	.word	0x200014d8
 802241c:	200027f0 	.word	0x200027f0
 8022420:	20000f60 	.word	0x20000f60
 8022424:	200027fa 	.word	0x200027fa

08022428 <__assert_func>:
 8022428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802242a:	4614      	mov	r4, r2
 802242c:	461a      	mov	r2, r3
 802242e:	4b09      	ldr	r3, [pc, #36]	@ (8022454 <__assert_func+0x2c>)
 8022430:	681b      	ldr	r3, [r3, #0]
 8022432:	4605      	mov	r5, r0
 8022434:	68d8      	ldr	r0, [r3, #12]
 8022436:	b954      	cbnz	r4, 802244e <__assert_func+0x26>
 8022438:	4b07      	ldr	r3, [pc, #28]	@ (8022458 <__assert_func+0x30>)
 802243a:	461c      	mov	r4, r3
 802243c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022440:	9100      	str	r1, [sp, #0]
 8022442:	462b      	mov	r3, r5
 8022444:	4905      	ldr	r1, [pc, #20]	@ (802245c <__assert_func+0x34>)
 8022446:	f002 f835 	bl	80244b4 <fiprintf>
 802244a:	f002 fa6f 	bl	802492c <abort>
 802244e:	4b04      	ldr	r3, [pc, #16]	@ (8022460 <__assert_func+0x38>)
 8022450:	e7f4      	b.n	802243c <__assert_func+0x14>
 8022452:	bf00      	nop
 8022454:	20000614 	.word	0x20000614
 8022458:	08030c1b 	.word	0x08030c1b
 802245c:	08030bed 	.word	0x08030bed
 8022460:	08030be0 	.word	0x08030be0

08022464 <calloc>:
 8022464:	4b02      	ldr	r3, [pc, #8]	@ (8022470 <calloc+0xc>)
 8022466:	460a      	mov	r2, r1
 8022468:	4601      	mov	r1, r0
 802246a:	6818      	ldr	r0, [r3, #0]
 802246c:	f000 b802 	b.w	8022474 <_calloc_r>
 8022470:	20000614 	.word	0x20000614

08022474 <_calloc_r>:
 8022474:	b570      	push	{r4, r5, r6, lr}
 8022476:	fba1 5402 	umull	r5, r4, r1, r2
 802247a:	b93c      	cbnz	r4, 802248c <_calloc_r+0x18>
 802247c:	4629      	mov	r1, r5
 802247e:	f000 f83f 	bl	8022500 <_malloc_r>
 8022482:	4606      	mov	r6, r0
 8022484:	b928      	cbnz	r0, 8022492 <_calloc_r+0x1e>
 8022486:	2600      	movs	r6, #0
 8022488:	4630      	mov	r0, r6
 802248a:	bd70      	pop	{r4, r5, r6, pc}
 802248c:	220c      	movs	r2, #12
 802248e:	6002      	str	r2, [r0, #0]
 8022490:	e7f9      	b.n	8022486 <_calloc_r+0x12>
 8022492:	462a      	mov	r2, r5
 8022494:	4621      	mov	r1, r4
 8022496:	f002 f8ca 	bl	802462e <memset>
 802249a:	e7f5      	b.n	8022488 <_calloc_r+0x14>

0802249c <malloc>:
 802249c:	4b02      	ldr	r3, [pc, #8]	@ (80224a8 <malloc+0xc>)
 802249e:	4601      	mov	r1, r0
 80224a0:	6818      	ldr	r0, [r3, #0]
 80224a2:	f000 b82d 	b.w	8022500 <_malloc_r>
 80224a6:	bf00      	nop
 80224a8:	20000614 	.word	0x20000614

080224ac <free>:
 80224ac:	4b02      	ldr	r3, [pc, #8]	@ (80224b8 <free+0xc>)
 80224ae:	4601      	mov	r1, r0
 80224b0:	6818      	ldr	r0, [r3, #0]
 80224b2:	f003 b891 	b.w	80255d8 <_free_r>
 80224b6:	bf00      	nop
 80224b8:	20000614 	.word	0x20000614

080224bc <sbrk_aligned>:
 80224bc:	b570      	push	{r4, r5, r6, lr}
 80224be:	4e0f      	ldr	r6, [pc, #60]	@ (80224fc <sbrk_aligned+0x40>)
 80224c0:	460c      	mov	r4, r1
 80224c2:	6831      	ldr	r1, [r6, #0]
 80224c4:	4605      	mov	r5, r0
 80224c6:	b911      	cbnz	r1, 80224ce <sbrk_aligned+0x12>
 80224c8:	f002 f9ba 	bl	8024840 <_sbrk_r>
 80224cc:	6030      	str	r0, [r6, #0]
 80224ce:	4621      	mov	r1, r4
 80224d0:	4628      	mov	r0, r5
 80224d2:	f002 f9b5 	bl	8024840 <_sbrk_r>
 80224d6:	1c43      	adds	r3, r0, #1
 80224d8:	d103      	bne.n	80224e2 <sbrk_aligned+0x26>
 80224da:	f04f 34ff 	mov.w	r4, #4294967295
 80224de:	4620      	mov	r0, r4
 80224e0:	bd70      	pop	{r4, r5, r6, pc}
 80224e2:	1cc4      	adds	r4, r0, #3
 80224e4:	f024 0403 	bic.w	r4, r4, #3
 80224e8:	42a0      	cmp	r0, r4
 80224ea:	d0f8      	beq.n	80224de <sbrk_aligned+0x22>
 80224ec:	1a21      	subs	r1, r4, r0
 80224ee:	4628      	mov	r0, r5
 80224f0:	f002 f9a6 	bl	8024840 <_sbrk_r>
 80224f4:	3001      	adds	r0, #1
 80224f6:	d1f2      	bne.n	80224de <sbrk_aligned+0x22>
 80224f8:	e7ef      	b.n	80224da <sbrk_aligned+0x1e>
 80224fa:	bf00      	nop
 80224fc:	200027fc 	.word	0x200027fc

08022500 <_malloc_r>:
 8022500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022504:	1ccd      	adds	r5, r1, #3
 8022506:	f025 0503 	bic.w	r5, r5, #3
 802250a:	3508      	adds	r5, #8
 802250c:	2d0c      	cmp	r5, #12
 802250e:	bf38      	it	cc
 8022510:	250c      	movcc	r5, #12
 8022512:	2d00      	cmp	r5, #0
 8022514:	4606      	mov	r6, r0
 8022516:	db01      	blt.n	802251c <_malloc_r+0x1c>
 8022518:	42a9      	cmp	r1, r5
 802251a:	d904      	bls.n	8022526 <_malloc_r+0x26>
 802251c:	230c      	movs	r3, #12
 802251e:	6033      	str	r3, [r6, #0]
 8022520:	2000      	movs	r0, #0
 8022522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022526:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80225fc <_malloc_r+0xfc>
 802252a:	f000 f869 	bl	8022600 <__malloc_lock>
 802252e:	f8d8 3000 	ldr.w	r3, [r8]
 8022532:	461c      	mov	r4, r3
 8022534:	bb44      	cbnz	r4, 8022588 <_malloc_r+0x88>
 8022536:	4629      	mov	r1, r5
 8022538:	4630      	mov	r0, r6
 802253a:	f7ff ffbf 	bl	80224bc <sbrk_aligned>
 802253e:	1c43      	adds	r3, r0, #1
 8022540:	4604      	mov	r4, r0
 8022542:	d158      	bne.n	80225f6 <_malloc_r+0xf6>
 8022544:	f8d8 4000 	ldr.w	r4, [r8]
 8022548:	4627      	mov	r7, r4
 802254a:	2f00      	cmp	r7, #0
 802254c:	d143      	bne.n	80225d6 <_malloc_r+0xd6>
 802254e:	2c00      	cmp	r4, #0
 8022550:	d04b      	beq.n	80225ea <_malloc_r+0xea>
 8022552:	6823      	ldr	r3, [r4, #0]
 8022554:	4639      	mov	r1, r7
 8022556:	4630      	mov	r0, r6
 8022558:	eb04 0903 	add.w	r9, r4, r3
 802255c:	f002 f970 	bl	8024840 <_sbrk_r>
 8022560:	4581      	cmp	r9, r0
 8022562:	d142      	bne.n	80225ea <_malloc_r+0xea>
 8022564:	6821      	ldr	r1, [r4, #0]
 8022566:	1a6d      	subs	r5, r5, r1
 8022568:	4629      	mov	r1, r5
 802256a:	4630      	mov	r0, r6
 802256c:	f7ff ffa6 	bl	80224bc <sbrk_aligned>
 8022570:	3001      	adds	r0, #1
 8022572:	d03a      	beq.n	80225ea <_malloc_r+0xea>
 8022574:	6823      	ldr	r3, [r4, #0]
 8022576:	442b      	add	r3, r5
 8022578:	6023      	str	r3, [r4, #0]
 802257a:	f8d8 3000 	ldr.w	r3, [r8]
 802257e:	685a      	ldr	r2, [r3, #4]
 8022580:	bb62      	cbnz	r2, 80225dc <_malloc_r+0xdc>
 8022582:	f8c8 7000 	str.w	r7, [r8]
 8022586:	e00f      	b.n	80225a8 <_malloc_r+0xa8>
 8022588:	6822      	ldr	r2, [r4, #0]
 802258a:	1b52      	subs	r2, r2, r5
 802258c:	d420      	bmi.n	80225d0 <_malloc_r+0xd0>
 802258e:	2a0b      	cmp	r2, #11
 8022590:	d917      	bls.n	80225c2 <_malloc_r+0xc2>
 8022592:	1961      	adds	r1, r4, r5
 8022594:	42a3      	cmp	r3, r4
 8022596:	6025      	str	r5, [r4, #0]
 8022598:	bf18      	it	ne
 802259a:	6059      	strne	r1, [r3, #4]
 802259c:	6863      	ldr	r3, [r4, #4]
 802259e:	bf08      	it	eq
 80225a0:	f8c8 1000 	streq.w	r1, [r8]
 80225a4:	5162      	str	r2, [r4, r5]
 80225a6:	604b      	str	r3, [r1, #4]
 80225a8:	4630      	mov	r0, r6
 80225aa:	f000 f82f 	bl	802260c <__malloc_unlock>
 80225ae:	f104 000b 	add.w	r0, r4, #11
 80225b2:	1d23      	adds	r3, r4, #4
 80225b4:	f020 0007 	bic.w	r0, r0, #7
 80225b8:	1ac2      	subs	r2, r0, r3
 80225ba:	bf1c      	itt	ne
 80225bc:	1a1b      	subne	r3, r3, r0
 80225be:	50a3      	strne	r3, [r4, r2]
 80225c0:	e7af      	b.n	8022522 <_malloc_r+0x22>
 80225c2:	6862      	ldr	r2, [r4, #4]
 80225c4:	42a3      	cmp	r3, r4
 80225c6:	bf0c      	ite	eq
 80225c8:	f8c8 2000 	streq.w	r2, [r8]
 80225cc:	605a      	strne	r2, [r3, #4]
 80225ce:	e7eb      	b.n	80225a8 <_malloc_r+0xa8>
 80225d0:	4623      	mov	r3, r4
 80225d2:	6864      	ldr	r4, [r4, #4]
 80225d4:	e7ae      	b.n	8022534 <_malloc_r+0x34>
 80225d6:	463c      	mov	r4, r7
 80225d8:	687f      	ldr	r7, [r7, #4]
 80225da:	e7b6      	b.n	802254a <_malloc_r+0x4a>
 80225dc:	461a      	mov	r2, r3
 80225de:	685b      	ldr	r3, [r3, #4]
 80225e0:	42a3      	cmp	r3, r4
 80225e2:	d1fb      	bne.n	80225dc <_malloc_r+0xdc>
 80225e4:	2300      	movs	r3, #0
 80225e6:	6053      	str	r3, [r2, #4]
 80225e8:	e7de      	b.n	80225a8 <_malloc_r+0xa8>
 80225ea:	230c      	movs	r3, #12
 80225ec:	6033      	str	r3, [r6, #0]
 80225ee:	4630      	mov	r0, r6
 80225f0:	f000 f80c 	bl	802260c <__malloc_unlock>
 80225f4:	e794      	b.n	8022520 <_malloc_r+0x20>
 80225f6:	6005      	str	r5, [r0, #0]
 80225f8:	e7d6      	b.n	80225a8 <_malloc_r+0xa8>
 80225fa:	bf00      	nop
 80225fc:	20002800 	.word	0x20002800

08022600 <__malloc_lock>:
 8022600:	4801      	ldr	r0, [pc, #4]	@ (8022608 <__malloc_lock+0x8>)
 8022602:	f002 b96a 	b.w	80248da <__retarget_lock_acquire_recursive>
 8022606:	bf00      	nop
 8022608:	20002944 	.word	0x20002944

0802260c <__malloc_unlock>:
 802260c:	4801      	ldr	r0, [pc, #4]	@ (8022614 <__malloc_unlock+0x8>)
 802260e:	f002 b965 	b.w	80248dc <__retarget_lock_release_recursive>
 8022612:	bf00      	nop
 8022614:	20002944 	.word	0x20002944

08022618 <mallinfo>:
 8022618:	b510      	push	{r4, lr}
 802261a:	4b03      	ldr	r3, [pc, #12]	@ (8022628 <mallinfo+0x10>)
 802261c:	4604      	mov	r4, r0
 802261e:	6819      	ldr	r1, [r3, #0]
 8022620:	f003 fb5e 	bl	8025ce0 <_mallinfo_r>
 8022624:	4620      	mov	r0, r4
 8022626:	bd10      	pop	{r4, pc}
 8022628:	20000614 	.word	0x20000614

0802262c <_realloc_r>:
 802262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022630:	4680      	mov	r8, r0
 8022632:	4615      	mov	r5, r2
 8022634:	460c      	mov	r4, r1
 8022636:	b921      	cbnz	r1, 8022642 <_realloc_r+0x16>
 8022638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802263c:	4611      	mov	r1, r2
 802263e:	f7ff bf5f 	b.w	8022500 <_malloc_r>
 8022642:	b92a      	cbnz	r2, 8022650 <_realloc_r+0x24>
 8022644:	f002 ffc8 	bl	80255d8 <_free_r>
 8022648:	2400      	movs	r4, #0
 802264a:	4620      	mov	r0, r4
 802264c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022650:	f004 f83e 	bl	80266d0 <_malloc_usable_size_r>
 8022654:	4285      	cmp	r5, r0
 8022656:	4606      	mov	r6, r0
 8022658:	d802      	bhi.n	8022660 <_realloc_r+0x34>
 802265a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802265e:	d8f4      	bhi.n	802264a <_realloc_r+0x1e>
 8022660:	4629      	mov	r1, r5
 8022662:	4640      	mov	r0, r8
 8022664:	f7ff ff4c 	bl	8022500 <_malloc_r>
 8022668:	4607      	mov	r7, r0
 802266a:	2800      	cmp	r0, #0
 802266c:	d0ec      	beq.n	8022648 <_realloc_r+0x1c>
 802266e:	42b5      	cmp	r5, r6
 8022670:	462a      	mov	r2, r5
 8022672:	4621      	mov	r1, r4
 8022674:	bf28      	it	cs
 8022676:	4632      	movcs	r2, r6
 8022678:	f002 f939 	bl	80248ee <memcpy>
 802267c:	4621      	mov	r1, r4
 802267e:	4640      	mov	r0, r8
 8022680:	f002 ffaa 	bl	80255d8 <_free_r>
 8022684:	463c      	mov	r4, r7
 8022686:	e7e0      	b.n	802264a <_realloc_r+0x1e>

08022688 <sulp>:
 8022688:	b570      	push	{r4, r5, r6, lr}
 802268a:	4604      	mov	r4, r0
 802268c:	460d      	mov	r5, r1
 802268e:	ec45 4b10 	vmov	d0, r4, r5
 8022692:	4616      	mov	r6, r2
 8022694:	f003 fede 	bl	8026454 <__ulp>
 8022698:	ec51 0b10 	vmov	r0, r1, d0
 802269c:	b17e      	cbz	r6, 80226be <sulp+0x36>
 802269e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80226a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	dd09      	ble.n	80226be <sulp+0x36>
 80226aa:	051b      	lsls	r3, r3, #20
 80226ac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80226b0:	2400      	movs	r4, #0
 80226b2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80226b6:	4622      	mov	r2, r4
 80226b8:	462b      	mov	r3, r5
 80226ba:	f7e5 fee5 	bl	8008488 <__aeabi_dmul>
 80226be:	ec41 0b10 	vmov	d0, r0, r1
 80226c2:	bd70      	pop	{r4, r5, r6, pc}
 80226c4:	0000      	movs	r0, r0
	...

080226c8 <_strtod_l>:
 80226c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226cc:	b09f      	sub	sp, #124	@ 0x7c
 80226ce:	460c      	mov	r4, r1
 80226d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80226d2:	2200      	movs	r2, #0
 80226d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80226d6:	9005      	str	r0, [sp, #20]
 80226d8:	f04f 0a00 	mov.w	sl, #0
 80226dc:	f04f 0b00 	mov.w	fp, #0
 80226e0:	460a      	mov	r2, r1
 80226e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80226e4:	7811      	ldrb	r1, [r2, #0]
 80226e6:	292b      	cmp	r1, #43	@ 0x2b
 80226e8:	d04a      	beq.n	8022780 <_strtod_l+0xb8>
 80226ea:	d838      	bhi.n	802275e <_strtod_l+0x96>
 80226ec:	290d      	cmp	r1, #13
 80226ee:	d832      	bhi.n	8022756 <_strtod_l+0x8e>
 80226f0:	2908      	cmp	r1, #8
 80226f2:	d832      	bhi.n	802275a <_strtod_l+0x92>
 80226f4:	2900      	cmp	r1, #0
 80226f6:	d03b      	beq.n	8022770 <_strtod_l+0xa8>
 80226f8:	2200      	movs	r2, #0
 80226fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80226fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80226fe:	782a      	ldrb	r2, [r5, #0]
 8022700:	2a30      	cmp	r2, #48	@ 0x30
 8022702:	f040 80b3 	bne.w	802286c <_strtod_l+0x1a4>
 8022706:	786a      	ldrb	r2, [r5, #1]
 8022708:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802270c:	2a58      	cmp	r2, #88	@ 0x58
 802270e:	d16e      	bne.n	80227ee <_strtod_l+0x126>
 8022710:	9302      	str	r3, [sp, #8]
 8022712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022714:	9301      	str	r3, [sp, #4]
 8022716:	ab1a      	add	r3, sp, #104	@ 0x68
 8022718:	9300      	str	r3, [sp, #0]
 802271a:	4a8e      	ldr	r2, [pc, #568]	@ (8022954 <_strtod_l+0x28c>)
 802271c:	9805      	ldr	r0, [sp, #20]
 802271e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8022720:	a919      	add	r1, sp, #100	@ 0x64
 8022722:	f003 f80b 	bl	802573c <__gethex>
 8022726:	f010 060f 	ands.w	r6, r0, #15
 802272a:	4604      	mov	r4, r0
 802272c:	d005      	beq.n	802273a <_strtod_l+0x72>
 802272e:	2e06      	cmp	r6, #6
 8022730:	d128      	bne.n	8022784 <_strtod_l+0xbc>
 8022732:	3501      	adds	r5, #1
 8022734:	2300      	movs	r3, #0
 8022736:	9519      	str	r5, [sp, #100]	@ 0x64
 8022738:	930b      	str	r3, [sp, #44]	@ 0x2c
 802273a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802273c:	2b00      	cmp	r3, #0
 802273e:	f040 858e 	bne.w	802325e <_strtod_l+0xb96>
 8022742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022744:	b1cb      	cbz	r3, 802277a <_strtod_l+0xb2>
 8022746:	4652      	mov	r2, sl
 8022748:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802274c:	ec43 2b10 	vmov	d0, r2, r3
 8022750:	b01f      	add	sp, #124	@ 0x7c
 8022752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022756:	2920      	cmp	r1, #32
 8022758:	d1ce      	bne.n	80226f8 <_strtod_l+0x30>
 802275a:	3201      	adds	r2, #1
 802275c:	e7c1      	b.n	80226e2 <_strtod_l+0x1a>
 802275e:	292d      	cmp	r1, #45	@ 0x2d
 8022760:	d1ca      	bne.n	80226f8 <_strtod_l+0x30>
 8022762:	2101      	movs	r1, #1
 8022764:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022766:	1c51      	adds	r1, r2, #1
 8022768:	9119      	str	r1, [sp, #100]	@ 0x64
 802276a:	7852      	ldrb	r2, [r2, #1]
 802276c:	2a00      	cmp	r2, #0
 802276e:	d1c5      	bne.n	80226fc <_strtod_l+0x34>
 8022770:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022772:	9419      	str	r4, [sp, #100]	@ 0x64
 8022774:	2b00      	cmp	r3, #0
 8022776:	f040 8570 	bne.w	802325a <_strtod_l+0xb92>
 802277a:	4652      	mov	r2, sl
 802277c:	465b      	mov	r3, fp
 802277e:	e7e5      	b.n	802274c <_strtod_l+0x84>
 8022780:	2100      	movs	r1, #0
 8022782:	e7ef      	b.n	8022764 <_strtod_l+0x9c>
 8022784:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022786:	b13a      	cbz	r2, 8022798 <_strtod_l+0xd0>
 8022788:	2135      	movs	r1, #53	@ 0x35
 802278a:	a81c      	add	r0, sp, #112	@ 0x70
 802278c:	f003 ff5c 	bl	8026648 <__copybits>
 8022790:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022792:	9805      	ldr	r0, [sp, #20]
 8022794:	f003 fb2a 	bl	8025dec <_Bfree>
 8022798:	3e01      	subs	r6, #1
 802279a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802279c:	2e04      	cmp	r6, #4
 802279e:	d806      	bhi.n	80227ae <_strtod_l+0xe6>
 80227a0:	e8df f006 	tbb	[pc, r6]
 80227a4:	201d0314 	.word	0x201d0314
 80227a8:	14          	.byte	0x14
 80227a9:	00          	.byte	0x00
 80227aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80227ae:	05e1      	lsls	r1, r4, #23
 80227b0:	bf48      	it	mi
 80227b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80227b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80227ba:	0d1b      	lsrs	r3, r3, #20
 80227bc:	051b      	lsls	r3, r3, #20
 80227be:	2b00      	cmp	r3, #0
 80227c0:	d1bb      	bne.n	802273a <_strtod_l+0x72>
 80227c2:	f002 f85f 	bl	8024884 <__errno>
 80227c6:	2322      	movs	r3, #34	@ 0x22
 80227c8:	6003      	str	r3, [r0, #0]
 80227ca:	e7b6      	b.n	802273a <_strtod_l+0x72>
 80227cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80227d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80227d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80227d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80227dc:	e7e7      	b.n	80227ae <_strtod_l+0xe6>
 80227de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802295c <_strtod_l+0x294>
 80227e2:	e7e4      	b.n	80227ae <_strtod_l+0xe6>
 80227e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80227e8:	f04f 3aff 	mov.w	sl, #4294967295
 80227ec:	e7df      	b.n	80227ae <_strtod_l+0xe6>
 80227ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80227f0:	1c5a      	adds	r2, r3, #1
 80227f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80227f4:	785b      	ldrb	r3, [r3, #1]
 80227f6:	2b30      	cmp	r3, #48	@ 0x30
 80227f8:	d0f9      	beq.n	80227ee <_strtod_l+0x126>
 80227fa:	2b00      	cmp	r3, #0
 80227fc:	d09d      	beq.n	802273a <_strtod_l+0x72>
 80227fe:	2301      	movs	r3, #1
 8022800:	9309      	str	r3, [sp, #36]	@ 0x24
 8022802:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022804:	930c      	str	r3, [sp, #48]	@ 0x30
 8022806:	2300      	movs	r3, #0
 8022808:	9308      	str	r3, [sp, #32]
 802280a:	930a      	str	r3, [sp, #40]	@ 0x28
 802280c:	461f      	mov	r7, r3
 802280e:	220a      	movs	r2, #10
 8022810:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8022812:	7805      	ldrb	r5, [r0, #0]
 8022814:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022818:	b2d9      	uxtb	r1, r3
 802281a:	2909      	cmp	r1, #9
 802281c:	d928      	bls.n	8022870 <_strtod_l+0x1a8>
 802281e:	494e      	ldr	r1, [pc, #312]	@ (8022958 <_strtod_l+0x290>)
 8022820:	2201      	movs	r2, #1
 8022822:	f001 ff28 	bl	8024676 <strncmp>
 8022826:	2800      	cmp	r0, #0
 8022828:	d032      	beq.n	8022890 <_strtod_l+0x1c8>
 802282a:	2000      	movs	r0, #0
 802282c:	462a      	mov	r2, r5
 802282e:	4681      	mov	r9, r0
 8022830:	463d      	mov	r5, r7
 8022832:	4603      	mov	r3, r0
 8022834:	2a65      	cmp	r2, #101	@ 0x65
 8022836:	d001      	beq.n	802283c <_strtod_l+0x174>
 8022838:	2a45      	cmp	r2, #69	@ 0x45
 802283a:	d114      	bne.n	8022866 <_strtod_l+0x19e>
 802283c:	b91d      	cbnz	r5, 8022846 <_strtod_l+0x17e>
 802283e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022840:	4302      	orrs	r2, r0
 8022842:	d095      	beq.n	8022770 <_strtod_l+0xa8>
 8022844:	2500      	movs	r5, #0
 8022846:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8022848:	1c62      	adds	r2, r4, #1
 802284a:	9219      	str	r2, [sp, #100]	@ 0x64
 802284c:	7862      	ldrb	r2, [r4, #1]
 802284e:	2a2b      	cmp	r2, #43	@ 0x2b
 8022850:	d077      	beq.n	8022942 <_strtod_l+0x27a>
 8022852:	2a2d      	cmp	r2, #45	@ 0x2d
 8022854:	d07b      	beq.n	802294e <_strtod_l+0x286>
 8022856:	f04f 0c00 	mov.w	ip, #0
 802285a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802285e:	2909      	cmp	r1, #9
 8022860:	f240 8082 	bls.w	8022968 <_strtod_l+0x2a0>
 8022864:	9419      	str	r4, [sp, #100]	@ 0x64
 8022866:	f04f 0800 	mov.w	r8, #0
 802286a:	e0a2      	b.n	80229b2 <_strtod_l+0x2ea>
 802286c:	2300      	movs	r3, #0
 802286e:	e7c7      	b.n	8022800 <_strtod_l+0x138>
 8022870:	2f08      	cmp	r7, #8
 8022872:	bfd5      	itete	le
 8022874:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8022876:	9908      	ldrgt	r1, [sp, #32]
 8022878:	fb02 3301 	mlale	r3, r2, r1, r3
 802287c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8022880:	f100 0001 	add.w	r0, r0, #1
 8022884:	bfd4      	ite	le
 8022886:	930a      	strle	r3, [sp, #40]	@ 0x28
 8022888:	9308      	strgt	r3, [sp, #32]
 802288a:	3701      	adds	r7, #1
 802288c:	9019      	str	r0, [sp, #100]	@ 0x64
 802288e:	e7bf      	b.n	8022810 <_strtod_l+0x148>
 8022890:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022892:	1c5a      	adds	r2, r3, #1
 8022894:	9219      	str	r2, [sp, #100]	@ 0x64
 8022896:	785a      	ldrb	r2, [r3, #1]
 8022898:	b37f      	cbz	r7, 80228fa <_strtod_l+0x232>
 802289a:	4681      	mov	r9, r0
 802289c:	463d      	mov	r5, r7
 802289e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80228a2:	2b09      	cmp	r3, #9
 80228a4:	d912      	bls.n	80228cc <_strtod_l+0x204>
 80228a6:	2301      	movs	r3, #1
 80228a8:	e7c4      	b.n	8022834 <_strtod_l+0x16c>
 80228aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80228ac:	1c5a      	adds	r2, r3, #1
 80228ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80228b0:	785a      	ldrb	r2, [r3, #1]
 80228b2:	3001      	adds	r0, #1
 80228b4:	2a30      	cmp	r2, #48	@ 0x30
 80228b6:	d0f8      	beq.n	80228aa <_strtod_l+0x1e2>
 80228b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80228bc:	2b08      	cmp	r3, #8
 80228be:	f200 84d3 	bhi.w	8023268 <_strtod_l+0xba0>
 80228c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80228c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80228c6:	4681      	mov	r9, r0
 80228c8:	2000      	movs	r0, #0
 80228ca:	4605      	mov	r5, r0
 80228cc:	3a30      	subs	r2, #48	@ 0x30
 80228ce:	f100 0301 	add.w	r3, r0, #1
 80228d2:	d02a      	beq.n	802292a <_strtod_l+0x262>
 80228d4:	4499      	add	r9, r3
 80228d6:	eb00 0c05 	add.w	ip, r0, r5
 80228da:	462b      	mov	r3, r5
 80228dc:	210a      	movs	r1, #10
 80228de:	4563      	cmp	r3, ip
 80228e0:	d10d      	bne.n	80228fe <_strtod_l+0x236>
 80228e2:	1c69      	adds	r1, r5, #1
 80228e4:	4401      	add	r1, r0
 80228e6:	4428      	add	r0, r5
 80228e8:	2808      	cmp	r0, #8
 80228ea:	dc16      	bgt.n	802291a <_strtod_l+0x252>
 80228ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80228ee:	230a      	movs	r3, #10
 80228f0:	fb03 2300 	mla	r3, r3, r0, r2
 80228f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80228f6:	2300      	movs	r3, #0
 80228f8:	e018      	b.n	802292c <_strtod_l+0x264>
 80228fa:	4638      	mov	r0, r7
 80228fc:	e7da      	b.n	80228b4 <_strtod_l+0x1ec>
 80228fe:	2b08      	cmp	r3, #8
 8022900:	f103 0301 	add.w	r3, r3, #1
 8022904:	dc03      	bgt.n	802290e <_strtod_l+0x246>
 8022906:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8022908:	434e      	muls	r6, r1
 802290a:	960a      	str	r6, [sp, #40]	@ 0x28
 802290c:	e7e7      	b.n	80228de <_strtod_l+0x216>
 802290e:	2b10      	cmp	r3, #16
 8022910:	bfde      	ittt	le
 8022912:	9e08      	ldrle	r6, [sp, #32]
 8022914:	434e      	mulle	r6, r1
 8022916:	9608      	strle	r6, [sp, #32]
 8022918:	e7e1      	b.n	80228de <_strtod_l+0x216>
 802291a:	280f      	cmp	r0, #15
 802291c:	dceb      	bgt.n	80228f6 <_strtod_l+0x22e>
 802291e:	9808      	ldr	r0, [sp, #32]
 8022920:	230a      	movs	r3, #10
 8022922:	fb03 2300 	mla	r3, r3, r0, r2
 8022926:	9308      	str	r3, [sp, #32]
 8022928:	e7e5      	b.n	80228f6 <_strtod_l+0x22e>
 802292a:	4629      	mov	r1, r5
 802292c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802292e:	1c50      	adds	r0, r2, #1
 8022930:	9019      	str	r0, [sp, #100]	@ 0x64
 8022932:	7852      	ldrb	r2, [r2, #1]
 8022934:	4618      	mov	r0, r3
 8022936:	460d      	mov	r5, r1
 8022938:	e7b1      	b.n	802289e <_strtod_l+0x1d6>
 802293a:	f04f 0900 	mov.w	r9, #0
 802293e:	2301      	movs	r3, #1
 8022940:	e77d      	b.n	802283e <_strtod_l+0x176>
 8022942:	f04f 0c00 	mov.w	ip, #0
 8022946:	1ca2      	adds	r2, r4, #2
 8022948:	9219      	str	r2, [sp, #100]	@ 0x64
 802294a:	78a2      	ldrb	r2, [r4, #2]
 802294c:	e785      	b.n	802285a <_strtod_l+0x192>
 802294e:	f04f 0c01 	mov.w	ip, #1
 8022952:	e7f8      	b.n	8022946 <_strtod_l+0x27e>
 8022954:	08030c34 	.word	0x08030c34
 8022958:	08030c1c 	.word	0x08030c1c
 802295c:	7ff00000 	.word	0x7ff00000
 8022960:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022962:	1c51      	adds	r1, r2, #1
 8022964:	9119      	str	r1, [sp, #100]	@ 0x64
 8022966:	7852      	ldrb	r2, [r2, #1]
 8022968:	2a30      	cmp	r2, #48	@ 0x30
 802296a:	d0f9      	beq.n	8022960 <_strtod_l+0x298>
 802296c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8022970:	2908      	cmp	r1, #8
 8022972:	f63f af78 	bhi.w	8022866 <_strtod_l+0x19e>
 8022976:	3a30      	subs	r2, #48	@ 0x30
 8022978:	920e      	str	r2, [sp, #56]	@ 0x38
 802297a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802297c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802297e:	f04f 080a 	mov.w	r8, #10
 8022982:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022984:	1c56      	adds	r6, r2, #1
 8022986:	9619      	str	r6, [sp, #100]	@ 0x64
 8022988:	7852      	ldrb	r2, [r2, #1]
 802298a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802298e:	f1be 0f09 	cmp.w	lr, #9
 8022992:	d939      	bls.n	8022a08 <_strtod_l+0x340>
 8022994:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022996:	1a76      	subs	r6, r6, r1
 8022998:	2e08      	cmp	r6, #8
 802299a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802299e:	dc03      	bgt.n	80229a8 <_strtod_l+0x2e0>
 80229a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80229a2:	4588      	cmp	r8, r1
 80229a4:	bfa8      	it	ge
 80229a6:	4688      	movge	r8, r1
 80229a8:	f1bc 0f00 	cmp.w	ip, #0
 80229ac:	d001      	beq.n	80229b2 <_strtod_l+0x2ea>
 80229ae:	f1c8 0800 	rsb	r8, r8, #0
 80229b2:	2d00      	cmp	r5, #0
 80229b4:	d14e      	bne.n	8022a54 <_strtod_l+0x38c>
 80229b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80229b8:	4308      	orrs	r0, r1
 80229ba:	f47f aebe 	bne.w	802273a <_strtod_l+0x72>
 80229be:	2b00      	cmp	r3, #0
 80229c0:	f47f aed6 	bne.w	8022770 <_strtod_l+0xa8>
 80229c4:	2a69      	cmp	r2, #105	@ 0x69
 80229c6:	d028      	beq.n	8022a1a <_strtod_l+0x352>
 80229c8:	dc25      	bgt.n	8022a16 <_strtod_l+0x34e>
 80229ca:	2a49      	cmp	r2, #73	@ 0x49
 80229cc:	d025      	beq.n	8022a1a <_strtod_l+0x352>
 80229ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80229d0:	f47f aece 	bne.w	8022770 <_strtod_l+0xa8>
 80229d4:	499b      	ldr	r1, [pc, #620]	@ (8022c44 <_strtod_l+0x57c>)
 80229d6:	a819      	add	r0, sp, #100	@ 0x64
 80229d8:	f003 f8d2 	bl	8025b80 <__match>
 80229dc:	2800      	cmp	r0, #0
 80229de:	f43f aec7 	beq.w	8022770 <_strtod_l+0xa8>
 80229e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80229e4:	781b      	ldrb	r3, [r3, #0]
 80229e6:	2b28      	cmp	r3, #40	@ 0x28
 80229e8:	d12e      	bne.n	8022a48 <_strtod_l+0x380>
 80229ea:	4997      	ldr	r1, [pc, #604]	@ (8022c48 <_strtod_l+0x580>)
 80229ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80229ee:	a819      	add	r0, sp, #100	@ 0x64
 80229f0:	f003 f8da 	bl	8025ba8 <__hexnan>
 80229f4:	2805      	cmp	r0, #5
 80229f6:	d127      	bne.n	8022a48 <_strtod_l+0x380>
 80229f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80229fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80229fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8022a02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8022a06:	e698      	b.n	802273a <_strtod_l+0x72>
 8022a08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022a0a:	fb08 2101 	mla	r1, r8, r1, r2
 8022a0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8022a12:	920e      	str	r2, [sp, #56]	@ 0x38
 8022a14:	e7b5      	b.n	8022982 <_strtod_l+0x2ba>
 8022a16:	2a6e      	cmp	r2, #110	@ 0x6e
 8022a18:	e7da      	b.n	80229d0 <_strtod_l+0x308>
 8022a1a:	498c      	ldr	r1, [pc, #560]	@ (8022c4c <_strtod_l+0x584>)
 8022a1c:	a819      	add	r0, sp, #100	@ 0x64
 8022a1e:	f003 f8af 	bl	8025b80 <__match>
 8022a22:	2800      	cmp	r0, #0
 8022a24:	f43f aea4 	beq.w	8022770 <_strtod_l+0xa8>
 8022a28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022a2a:	4989      	ldr	r1, [pc, #548]	@ (8022c50 <_strtod_l+0x588>)
 8022a2c:	3b01      	subs	r3, #1
 8022a2e:	a819      	add	r0, sp, #100	@ 0x64
 8022a30:	9319      	str	r3, [sp, #100]	@ 0x64
 8022a32:	f003 f8a5 	bl	8025b80 <__match>
 8022a36:	b910      	cbnz	r0, 8022a3e <_strtod_l+0x376>
 8022a38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022a3a:	3301      	adds	r3, #1
 8022a3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8022a3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8022c60 <_strtod_l+0x598>
 8022a42:	f04f 0a00 	mov.w	sl, #0
 8022a46:	e678      	b.n	802273a <_strtod_l+0x72>
 8022a48:	4882      	ldr	r0, [pc, #520]	@ (8022c54 <_strtod_l+0x58c>)
 8022a4a:	f001 ff61 	bl	8024910 <nan>
 8022a4e:	ec5b ab10 	vmov	sl, fp, d0
 8022a52:	e672      	b.n	802273a <_strtod_l+0x72>
 8022a54:	eba8 0309 	sub.w	r3, r8, r9
 8022a58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a5c:	2f00      	cmp	r7, #0
 8022a5e:	bf08      	it	eq
 8022a60:	462f      	moveq	r7, r5
 8022a62:	2d10      	cmp	r5, #16
 8022a64:	462c      	mov	r4, r5
 8022a66:	bfa8      	it	ge
 8022a68:	2410      	movge	r4, #16
 8022a6a:	f7e5 fc93 	bl	8008394 <__aeabi_ui2d>
 8022a6e:	2d09      	cmp	r5, #9
 8022a70:	4682      	mov	sl, r0
 8022a72:	468b      	mov	fp, r1
 8022a74:	dc13      	bgt.n	8022a9e <_strtod_l+0x3d6>
 8022a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	f43f ae5e 	beq.w	802273a <_strtod_l+0x72>
 8022a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a80:	dd78      	ble.n	8022b74 <_strtod_l+0x4ac>
 8022a82:	2b16      	cmp	r3, #22
 8022a84:	dc5f      	bgt.n	8022b46 <_strtod_l+0x47e>
 8022a86:	4974      	ldr	r1, [pc, #464]	@ (8022c58 <_strtod_l+0x590>)
 8022a88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8022a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022a90:	4652      	mov	r2, sl
 8022a92:	465b      	mov	r3, fp
 8022a94:	f7e5 fcf8 	bl	8008488 <__aeabi_dmul>
 8022a98:	4682      	mov	sl, r0
 8022a9a:	468b      	mov	fp, r1
 8022a9c:	e64d      	b.n	802273a <_strtod_l+0x72>
 8022a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8022c58 <_strtod_l+0x590>)
 8022aa0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022aa4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8022aa8:	f7e5 fcee 	bl	8008488 <__aeabi_dmul>
 8022aac:	4682      	mov	sl, r0
 8022aae:	9808      	ldr	r0, [sp, #32]
 8022ab0:	468b      	mov	fp, r1
 8022ab2:	f7e5 fc6f 	bl	8008394 <__aeabi_ui2d>
 8022ab6:	4602      	mov	r2, r0
 8022ab8:	460b      	mov	r3, r1
 8022aba:	4650      	mov	r0, sl
 8022abc:	4659      	mov	r1, fp
 8022abe:	f7e5 fb2d 	bl	800811c <__adddf3>
 8022ac2:	2d0f      	cmp	r5, #15
 8022ac4:	4682      	mov	sl, r0
 8022ac6:	468b      	mov	fp, r1
 8022ac8:	ddd5      	ble.n	8022a76 <_strtod_l+0x3ae>
 8022aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022acc:	1b2c      	subs	r4, r5, r4
 8022ace:	441c      	add	r4, r3
 8022ad0:	2c00      	cmp	r4, #0
 8022ad2:	f340 8096 	ble.w	8022c02 <_strtod_l+0x53a>
 8022ad6:	f014 030f 	ands.w	r3, r4, #15
 8022ada:	d00a      	beq.n	8022af2 <_strtod_l+0x42a>
 8022adc:	495e      	ldr	r1, [pc, #376]	@ (8022c58 <_strtod_l+0x590>)
 8022ade:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8022ae2:	4652      	mov	r2, sl
 8022ae4:	465b      	mov	r3, fp
 8022ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022aea:	f7e5 fccd 	bl	8008488 <__aeabi_dmul>
 8022aee:	4682      	mov	sl, r0
 8022af0:	468b      	mov	fp, r1
 8022af2:	f034 040f 	bics.w	r4, r4, #15
 8022af6:	d073      	beq.n	8022be0 <_strtod_l+0x518>
 8022af8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8022afc:	dd48      	ble.n	8022b90 <_strtod_l+0x4c8>
 8022afe:	2400      	movs	r4, #0
 8022b00:	46a0      	mov	r8, r4
 8022b02:	940a      	str	r4, [sp, #40]	@ 0x28
 8022b04:	46a1      	mov	r9, r4
 8022b06:	9a05      	ldr	r2, [sp, #20]
 8022b08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8022c60 <_strtod_l+0x598>
 8022b0c:	2322      	movs	r3, #34	@ 0x22
 8022b0e:	6013      	str	r3, [r2, #0]
 8022b10:	f04f 0a00 	mov.w	sl, #0
 8022b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	f43f ae0f 	beq.w	802273a <_strtod_l+0x72>
 8022b1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022b1e:	9805      	ldr	r0, [sp, #20]
 8022b20:	f003 f964 	bl	8025dec <_Bfree>
 8022b24:	9805      	ldr	r0, [sp, #20]
 8022b26:	4649      	mov	r1, r9
 8022b28:	f003 f960 	bl	8025dec <_Bfree>
 8022b2c:	9805      	ldr	r0, [sp, #20]
 8022b2e:	4641      	mov	r1, r8
 8022b30:	f003 f95c 	bl	8025dec <_Bfree>
 8022b34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022b36:	9805      	ldr	r0, [sp, #20]
 8022b38:	f003 f958 	bl	8025dec <_Bfree>
 8022b3c:	9805      	ldr	r0, [sp, #20]
 8022b3e:	4621      	mov	r1, r4
 8022b40:	f003 f954 	bl	8025dec <_Bfree>
 8022b44:	e5f9      	b.n	802273a <_strtod_l+0x72>
 8022b46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022b48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8022b4c:	4293      	cmp	r3, r2
 8022b4e:	dbbc      	blt.n	8022aca <_strtod_l+0x402>
 8022b50:	4c41      	ldr	r4, [pc, #260]	@ (8022c58 <_strtod_l+0x590>)
 8022b52:	f1c5 050f 	rsb	r5, r5, #15
 8022b56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8022b5a:	4652      	mov	r2, sl
 8022b5c:	465b      	mov	r3, fp
 8022b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022b62:	f7e5 fc91 	bl	8008488 <__aeabi_dmul>
 8022b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b68:	1b5d      	subs	r5, r3, r5
 8022b6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8022b6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8022b72:	e78f      	b.n	8022a94 <_strtod_l+0x3cc>
 8022b74:	3316      	adds	r3, #22
 8022b76:	dba8      	blt.n	8022aca <_strtod_l+0x402>
 8022b78:	4b37      	ldr	r3, [pc, #220]	@ (8022c58 <_strtod_l+0x590>)
 8022b7a:	eba9 0808 	sub.w	r8, r9, r8
 8022b7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8022b82:	e9d8 2300 	ldrd	r2, r3, [r8]
 8022b86:	4650      	mov	r0, sl
 8022b88:	4659      	mov	r1, fp
 8022b8a:	f7e5 fda7 	bl	80086dc <__aeabi_ddiv>
 8022b8e:	e783      	b.n	8022a98 <_strtod_l+0x3d0>
 8022b90:	4b32      	ldr	r3, [pc, #200]	@ (8022c5c <_strtod_l+0x594>)
 8022b92:	9308      	str	r3, [sp, #32]
 8022b94:	2300      	movs	r3, #0
 8022b96:	1124      	asrs	r4, r4, #4
 8022b98:	4650      	mov	r0, sl
 8022b9a:	4659      	mov	r1, fp
 8022b9c:	461e      	mov	r6, r3
 8022b9e:	2c01      	cmp	r4, #1
 8022ba0:	dc21      	bgt.n	8022be6 <_strtod_l+0x51e>
 8022ba2:	b10b      	cbz	r3, 8022ba8 <_strtod_l+0x4e0>
 8022ba4:	4682      	mov	sl, r0
 8022ba6:	468b      	mov	fp, r1
 8022ba8:	492c      	ldr	r1, [pc, #176]	@ (8022c5c <_strtod_l+0x594>)
 8022baa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8022bae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8022bb2:	4652      	mov	r2, sl
 8022bb4:	465b      	mov	r3, fp
 8022bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022bba:	f7e5 fc65 	bl	8008488 <__aeabi_dmul>
 8022bbe:	4b28      	ldr	r3, [pc, #160]	@ (8022c60 <_strtod_l+0x598>)
 8022bc0:	460a      	mov	r2, r1
 8022bc2:	400b      	ands	r3, r1
 8022bc4:	4927      	ldr	r1, [pc, #156]	@ (8022c64 <_strtod_l+0x59c>)
 8022bc6:	428b      	cmp	r3, r1
 8022bc8:	4682      	mov	sl, r0
 8022bca:	d898      	bhi.n	8022afe <_strtod_l+0x436>
 8022bcc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8022bd0:	428b      	cmp	r3, r1
 8022bd2:	bf86      	itte	hi
 8022bd4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8022c68 <_strtod_l+0x5a0>
 8022bd8:	f04f 3aff 	movhi.w	sl, #4294967295
 8022bdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8022be0:	2300      	movs	r3, #0
 8022be2:	9308      	str	r3, [sp, #32]
 8022be4:	e07a      	b.n	8022cdc <_strtod_l+0x614>
 8022be6:	07e2      	lsls	r2, r4, #31
 8022be8:	d505      	bpl.n	8022bf6 <_strtod_l+0x52e>
 8022bea:	9b08      	ldr	r3, [sp, #32]
 8022bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bf0:	f7e5 fc4a 	bl	8008488 <__aeabi_dmul>
 8022bf4:	2301      	movs	r3, #1
 8022bf6:	9a08      	ldr	r2, [sp, #32]
 8022bf8:	3208      	adds	r2, #8
 8022bfa:	3601      	adds	r6, #1
 8022bfc:	1064      	asrs	r4, r4, #1
 8022bfe:	9208      	str	r2, [sp, #32]
 8022c00:	e7cd      	b.n	8022b9e <_strtod_l+0x4d6>
 8022c02:	d0ed      	beq.n	8022be0 <_strtod_l+0x518>
 8022c04:	4264      	negs	r4, r4
 8022c06:	f014 020f 	ands.w	r2, r4, #15
 8022c0a:	d00a      	beq.n	8022c22 <_strtod_l+0x55a>
 8022c0c:	4b12      	ldr	r3, [pc, #72]	@ (8022c58 <_strtod_l+0x590>)
 8022c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022c12:	4650      	mov	r0, sl
 8022c14:	4659      	mov	r1, fp
 8022c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c1a:	f7e5 fd5f 	bl	80086dc <__aeabi_ddiv>
 8022c1e:	4682      	mov	sl, r0
 8022c20:	468b      	mov	fp, r1
 8022c22:	1124      	asrs	r4, r4, #4
 8022c24:	d0dc      	beq.n	8022be0 <_strtod_l+0x518>
 8022c26:	2c1f      	cmp	r4, #31
 8022c28:	dd20      	ble.n	8022c6c <_strtod_l+0x5a4>
 8022c2a:	2400      	movs	r4, #0
 8022c2c:	46a0      	mov	r8, r4
 8022c2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8022c30:	46a1      	mov	r9, r4
 8022c32:	9a05      	ldr	r2, [sp, #20]
 8022c34:	2322      	movs	r3, #34	@ 0x22
 8022c36:	f04f 0a00 	mov.w	sl, #0
 8022c3a:	f04f 0b00 	mov.w	fp, #0
 8022c3e:	6013      	str	r3, [r2, #0]
 8022c40:	e768      	b.n	8022b14 <_strtod_l+0x44c>
 8022c42:	bf00      	nop
 8022c44:	08030d7e 	.word	0x08030d7e
 8022c48:	08030c20 	.word	0x08030c20
 8022c4c:	08030d76 	.word	0x08030d76
 8022c50:	08030e26 	.word	0x08030e26
 8022c54:	08030c1b 	.word	0x08030c1b
 8022c58:	08030f88 	.word	0x08030f88
 8022c5c:	08030f60 	.word	0x08030f60
 8022c60:	7ff00000 	.word	0x7ff00000
 8022c64:	7ca00000 	.word	0x7ca00000
 8022c68:	7fefffff 	.word	0x7fefffff
 8022c6c:	f014 0310 	ands.w	r3, r4, #16
 8022c70:	bf18      	it	ne
 8022c72:	236a      	movne	r3, #106	@ 0x6a
 8022c74:	4ea9      	ldr	r6, [pc, #676]	@ (8022f1c <_strtod_l+0x854>)
 8022c76:	9308      	str	r3, [sp, #32]
 8022c78:	4650      	mov	r0, sl
 8022c7a:	4659      	mov	r1, fp
 8022c7c:	2300      	movs	r3, #0
 8022c7e:	07e2      	lsls	r2, r4, #31
 8022c80:	d504      	bpl.n	8022c8c <_strtod_l+0x5c4>
 8022c82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8022c86:	f7e5 fbff 	bl	8008488 <__aeabi_dmul>
 8022c8a:	2301      	movs	r3, #1
 8022c8c:	1064      	asrs	r4, r4, #1
 8022c8e:	f106 0608 	add.w	r6, r6, #8
 8022c92:	d1f4      	bne.n	8022c7e <_strtod_l+0x5b6>
 8022c94:	b10b      	cbz	r3, 8022c9a <_strtod_l+0x5d2>
 8022c96:	4682      	mov	sl, r0
 8022c98:	468b      	mov	fp, r1
 8022c9a:	9b08      	ldr	r3, [sp, #32]
 8022c9c:	b1b3      	cbz	r3, 8022ccc <_strtod_l+0x604>
 8022c9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8022ca2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8022ca6:	2b00      	cmp	r3, #0
 8022ca8:	4659      	mov	r1, fp
 8022caa:	dd0f      	ble.n	8022ccc <_strtod_l+0x604>
 8022cac:	2b1f      	cmp	r3, #31
 8022cae:	dd55      	ble.n	8022d5c <_strtod_l+0x694>
 8022cb0:	2b34      	cmp	r3, #52	@ 0x34
 8022cb2:	bfde      	ittt	le
 8022cb4:	f04f 33ff 	movle.w	r3, #4294967295
 8022cb8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8022cbc:	4093      	lslle	r3, r2
 8022cbe:	f04f 0a00 	mov.w	sl, #0
 8022cc2:	bfcc      	ite	gt
 8022cc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8022cc8:	ea03 0b01 	andle.w	fp, r3, r1
 8022ccc:	2200      	movs	r2, #0
 8022cce:	2300      	movs	r3, #0
 8022cd0:	4650      	mov	r0, sl
 8022cd2:	4659      	mov	r1, fp
 8022cd4:	f7e5 fe40 	bl	8008958 <__aeabi_dcmpeq>
 8022cd8:	2800      	cmp	r0, #0
 8022cda:	d1a6      	bne.n	8022c2a <_strtod_l+0x562>
 8022cdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022cde:	9300      	str	r3, [sp, #0]
 8022ce0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8022ce2:	9805      	ldr	r0, [sp, #20]
 8022ce4:	462b      	mov	r3, r5
 8022ce6:	463a      	mov	r2, r7
 8022ce8:	f003 f8e8 	bl	8025ebc <__s2b>
 8022cec:	900a      	str	r0, [sp, #40]	@ 0x28
 8022cee:	2800      	cmp	r0, #0
 8022cf0:	f43f af05 	beq.w	8022afe <_strtod_l+0x436>
 8022cf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022cf6:	2a00      	cmp	r2, #0
 8022cf8:	eba9 0308 	sub.w	r3, r9, r8
 8022cfc:	bfa8      	it	ge
 8022cfe:	2300      	movge	r3, #0
 8022d00:	9312      	str	r3, [sp, #72]	@ 0x48
 8022d02:	2400      	movs	r4, #0
 8022d04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022d08:	9316      	str	r3, [sp, #88]	@ 0x58
 8022d0a:	46a0      	mov	r8, r4
 8022d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022d0e:	9805      	ldr	r0, [sp, #20]
 8022d10:	6859      	ldr	r1, [r3, #4]
 8022d12:	f003 f82b 	bl	8025d6c <_Balloc>
 8022d16:	4681      	mov	r9, r0
 8022d18:	2800      	cmp	r0, #0
 8022d1a:	f43f aef4 	beq.w	8022b06 <_strtod_l+0x43e>
 8022d1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022d20:	691a      	ldr	r2, [r3, #16]
 8022d22:	3202      	adds	r2, #2
 8022d24:	f103 010c 	add.w	r1, r3, #12
 8022d28:	0092      	lsls	r2, r2, #2
 8022d2a:	300c      	adds	r0, #12
 8022d2c:	f001 fddf 	bl	80248ee <memcpy>
 8022d30:	ec4b ab10 	vmov	d0, sl, fp
 8022d34:	9805      	ldr	r0, [sp, #20]
 8022d36:	aa1c      	add	r2, sp, #112	@ 0x70
 8022d38:	a91b      	add	r1, sp, #108	@ 0x6c
 8022d3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8022d3e:	f003 fbf9 	bl	8026534 <__d2b>
 8022d42:	901a      	str	r0, [sp, #104]	@ 0x68
 8022d44:	2800      	cmp	r0, #0
 8022d46:	f43f aede 	beq.w	8022b06 <_strtod_l+0x43e>
 8022d4a:	9805      	ldr	r0, [sp, #20]
 8022d4c:	2101      	movs	r1, #1
 8022d4e:	f003 f94b 	bl	8025fe8 <__i2b>
 8022d52:	4680      	mov	r8, r0
 8022d54:	b948      	cbnz	r0, 8022d6a <_strtod_l+0x6a2>
 8022d56:	f04f 0800 	mov.w	r8, #0
 8022d5a:	e6d4      	b.n	8022b06 <_strtod_l+0x43e>
 8022d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8022d60:	fa02 f303 	lsl.w	r3, r2, r3
 8022d64:	ea03 0a0a 	and.w	sl, r3, sl
 8022d68:	e7b0      	b.n	8022ccc <_strtod_l+0x604>
 8022d6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8022d6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8022d6e:	2d00      	cmp	r5, #0
 8022d70:	bfab      	itete	ge
 8022d72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8022d74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8022d76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8022d78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8022d7a:	bfac      	ite	ge
 8022d7c:	18ef      	addge	r7, r5, r3
 8022d7e:	1b5e      	sublt	r6, r3, r5
 8022d80:	9b08      	ldr	r3, [sp, #32]
 8022d82:	1aed      	subs	r5, r5, r3
 8022d84:	4415      	add	r5, r2
 8022d86:	4b66      	ldr	r3, [pc, #408]	@ (8022f20 <_strtod_l+0x858>)
 8022d88:	3d01      	subs	r5, #1
 8022d8a:	429d      	cmp	r5, r3
 8022d8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8022d90:	da50      	bge.n	8022e34 <_strtod_l+0x76c>
 8022d92:	1b5b      	subs	r3, r3, r5
 8022d94:	2b1f      	cmp	r3, #31
 8022d96:	eba2 0203 	sub.w	r2, r2, r3
 8022d9a:	f04f 0101 	mov.w	r1, #1
 8022d9e:	dc3d      	bgt.n	8022e1c <_strtod_l+0x754>
 8022da0:	fa01 f303 	lsl.w	r3, r1, r3
 8022da4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022da6:	2300      	movs	r3, #0
 8022da8:	9310      	str	r3, [sp, #64]	@ 0x40
 8022daa:	18bd      	adds	r5, r7, r2
 8022dac:	9b08      	ldr	r3, [sp, #32]
 8022dae:	42af      	cmp	r7, r5
 8022db0:	4416      	add	r6, r2
 8022db2:	441e      	add	r6, r3
 8022db4:	463b      	mov	r3, r7
 8022db6:	bfa8      	it	ge
 8022db8:	462b      	movge	r3, r5
 8022dba:	42b3      	cmp	r3, r6
 8022dbc:	bfa8      	it	ge
 8022dbe:	4633      	movge	r3, r6
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	bfc2      	ittt	gt
 8022dc4:	1aed      	subgt	r5, r5, r3
 8022dc6:	1af6      	subgt	r6, r6, r3
 8022dc8:	1aff      	subgt	r7, r7, r3
 8022dca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022dcc:	2b00      	cmp	r3, #0
 8022dce:	dd16      	ble.n	8022dfe <_strtod_l+0x736>
 8022dd0:	4641      	mov	r1, r8
 8022dd2:	9805      	ldr	r0, [sp, #20]
 8022dd4:	461a      	mov	r2, r3
 8022dd6:	f003 f9c7 	bl	8026168 <__pow5mult>
 8022dda:	4680      	mov	r8, r0
 8022ddc:	2800      	cmp	r0, #0
 8022dde:	d0ba      	beq.n	8022d56 <_strtod_l+0x68e>
 8022de0:	4601      	mov	r1, r0
 8022de2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022de4:	9805      	ldr	r0, [sp, #20]
 8022de6:	f003 f915 	bl	8026014 <__multiply>
 8022dea:	900e      	str	r0, [sp, #56]	@ 0x38
 8022dec:	2800      	cmp	r0, #0
 8022dee:	f43f ae8a 	beq.w	8022b06 <_strtod_l+0x43e>
 8022df2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022df4:	9805      	ldr	r0, [sp, #20]
 8022df6:	f002 fff9 	bl	8025dec <_Bfree>
 8022dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022dfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8022dfe:	2d00      	cmp	r5, #0
 8022e00:	dc1d      	bgt.n	8022e3e <_strtod_l+0x776>
 8022e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	dd23      	ble.n	8022e50 <_strtod_l+0x788>
 8022e08:	4649      	mov	r1, r9
 8022e0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022e0c:	9805      	ldr	r0, [sp, #20]
 8022e0e:	f003 f9ab 	bl	8026168 <__pow5mult>
 8022e12:	4681      	mov	r9, r0
 8022e14:	b9e0      	cbnz	r0, 8022e50 <_strtod_l+0x788>
 8022e16:	f04f 0900 	mov.w	r9, #0
 8022e1a:	e674      	b.n	8022b06 <_strtod_l+0x43e>
 8022e1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8022e20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8022e24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8022e28:	35e2      	adds	r5, #226	@ 0xe2
 8022e2a:	fa01 f305 	lsl.w	r3, r1, r5
 8022e2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8022e30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8022e32:	e7ba      	b.n	8022daa <_strtod_l+0x6e2>
 8022e34:	2300      	movs	r3, #0
 8022e36:	9310      	str	r3, [sp, #64]	@ 0x40
 8022e38:	2301      	movs	r3, #1
 8022e3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022e3c:	e7b5      	b.n	8022daa <_strtod_l+0x6e2>
 8022e3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022e40:	9805      	ldr	r0, [sp, #20]
 8022e42:	462a      	mov	r2, r5
 8022e44:	f003 f9ea 	bl	802621c <__lshift>
 8022e48:	901a      	str	r0, [sp, #104]	@ 0x68
 8022e4a:	2800      	cmp	r0, #0
 8022e4c:	d1d9      	bne.n	8022e02 <_strtod_l+0x73a>
 8022e4e:	e65a      	b.n	8022b06 <_strtod_l+0x43e>
 8022e50:	2e00      	cmp	r6, #0
 8022e52:	dd07      	ble.n	8022e64 <_strtod_l+0x79c>
 8022e54:	4649      	mov	r1, r9
 8022e56:	9805      	ldr	r0, [sp, #20]
 8022e58:	4632      	mov	r2, r6
 8022e5a:	f003 f9df 	bl	802621c <__lshift>
 8022e5e:	4681      	mov	r9, r0
 8022e60:	2800      	cmp	r0, #0
 8022e62:	d0d8      	beq.n	8022e16 <_strtod_l+0x74e>
 8022e64:	2f00      	cmp	r7, #0
 8022e66:	dd08      	ble.n	8022e7a <_strtod_l+0x7b2>
 8022e68:	4641      	mov	r1, r8
 8022e6a:	9805      	ldr	r0, [sp, #20]
 8022e6c:	463a      	mov	r2, r7
 8022e6e:	f003 f9d5 	bl	802621c <__lshift>
 8022e72:	4680      	mov	r8, r0
 8022e74:	2800      	cmp	r0, #0
 8022e76:	f43f ae46 	beq.w	8022b06 <_strtod_l+0x43e>
 8022e7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8022e7c:	9805      	ldr	r0, [sp, #20]
 8022e7e:	464a      	mov	r2, r9
 8022e80:	f003 fa54 	bl	802632c <__mdiff>
 8022e84:	4604      	mov	r4, r0
 8022e86:	2800      	cmp	r0, #0
 8022e88:	f43f ae3d 	beq.w	8022b06 <_strtod_l+0x43e>
 8022e8c:	68c3      	ldr	r3, [r0, #12]
 8022e8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022e90:	2300      	movs	r3, #0
 8022e92:	60c3      	str	r3, [r0, #12]
 8022e94:	4641      	mov	r1, r8
 8022e96:	f003 fa2d 	bl	80262f4 <__mcmp>
 8022e9a:	2800      	cmp	r0, #0
 8022e9c:	da46      	bge.n	8022f2c <_strtod_l+0x864>
 8022e9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022ea0:	ea53 030a 	orrs.w	r3, r3, sl
 8022ea4:	d16c      	bne.n	8022f80 <_strtod_l+0x8b8>
 8022ea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022eaa:	2b00      	cmp	r3, #0
 8022eac:	d168      	bne.n	8022f80 <_strtod_l+0x8b8>
 8022eae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8022eb2:	0d1b      	lsrs	r3, r3, #20
 8022eb4:	051b      	lsls	r3, r3, #20
 8022eb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8022eba:	d961      	bls.n	8022f80 <_strtod_l+0x8b8>
 8022ebc:	6963      	ldr	r3, [r4, #20]
 8022ebe:	b913      	cbnz	r3, 8022ec6 <_strtod_l+0x7fe>
 8022ec0:	6923      	ldr	r3, [r4, #16]
 8022ec2:	2b01      	cmp	r3, #1
 8022ec4:	dd5c      	ble.n	8022f80 <_strtod_l+0x8b8>
 8022ec6:	4621      	mov	r1, r4
 8022ec8:	2201      	movs	r2, #1
 8022eca:	9805      	ldr	r0, [sp, #20]
 8022ecc:	f003 f9a6 	bl	802621c <__lshift>
 8022ed0:	4641      	mov	r1, r8
 8022ed2:	4604      	mov	r4, r0
 8022ed4:	f003 fa0e 	bl	80262f4 <__mcmp>
 8022ed8:	2800      	cmp	r0, #0
 8022eda:	dd51      	ble.n	8022f80 <_strtod_l+0x8b8>
 8022edc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8022ee0:	9a08      	ldr	r2, [sp, #32]
 8022ee2:	0d1b      	lsrs	r3, r3, #20
 8022ee4:	051b      	lsls	r3, r3, #20
 8022ee6:	2a00      	cmp	r2, #0
 8022ee8:	d06b      	beq.n	8022fc2 <_strtod_l+0x8fa>
 8022eea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8022eee:	d868      	bhi.n	8022fc2 <_strtod_l+0x8fa>
 8022ef0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8022ef4:	f67f ae9d 	bls.w	8022c32 <_strtod_l+0x56a>
 8022ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8022f24 <_strtod_l+0x85c>)
 8022efa:	4650      	mov	r0, sl
 8022efc:	4659      	mov	r1, fp
 8022efe:	2200      	movs	r2, #0
 8022f00:	f7e5 fac2 	bl	8008488 <__aeabi_dmul>
 8022f04:	4b08      	ldr	r3, [pc, #32]	@ (8022f28 <_strtod_l+0x860>)
 8022f06:	400b      	ands	r3, r1
 8022f08:	4682      	mov	sl, r0
 8022f0a:	468b      	mov	fp, r1
 8022f0c:	2b00      	cmp	r3, #0
 8022f0e:	f47f ae05 	bne.w	8022b1c <_strtod_l+0x454>
 8022f12:	9a05      	ldr	r2, [sp, #20]
 8022f14:	2322      	movs	r3, #34	@ 0x22
 8022f16:	6013      	str	r3, [r2, #0]
 8022f18:	e600      	b.n	8022b1c <_strtod_l+0x454>
 8022f1a:	bf00      	nop
 8022f1c:	08030c48 	.word	0x08030c48
 8022f20:	fffffc02 	.word	0xfffffc02
 8022f24:	39500000 	.word	0x39500000
 8022f28:	7ff00000 	.word	0x7ff00000
 8022f2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8022f30:	d165      	bne.n	8022ffe <_strtod_l+0x936>
 8022f32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022f34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022f38:	b35a      	cbz	r2, 8022f92 <_strtod_l+0x8ca>
 8022f3a:	4a9f      	ldr	r2, [pc, #636]	@ (80231b8 <_strtod_l+0xaf0>)
 8022f3c:	4293      	cmp	r3, r2
 8022f3e:	d12b      	bne.n	8022f98 <_strtod_l+0x8d0>
 8022f40:	9b08      	ldr	r3, [sp, #32]
 8022f42:	4651      	mov	r1, sl
 8022f44:	b303      	cbz	r3, 8022f88 <_strtod_l+0x8c0>
 8022f46:	4b9d      	ldr	r3, [pc, #628]	@ (80231bc <_strtod_l+0xaf4>)
 8022f48:	465a      	mov	r2, fp
 8022f4a:	4013      	ands	r3, r2
 8022f4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8022f50:	f04f 32ff 	mov.w	r2, #4294967295
 8022f54:	d81b      	bhi.n	8022f8e <_strtod_l+0x8c6>
 8022f56:	0d1b      	lsrs	r3, r3, #20
 8022f58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8022f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8022f60:	4299      	cmp	r1, r3
 8022f62:	d119      	bne.n	8022f98 <_strtod_l+0x8d0>
 8022f64:	4b96      	ldr	r3, [pc, #600]	@ (80231c0 <_strtod_l+0xaf8>)
 8022f66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f68:	429a      	cmp	r2, r3
 8022f6a:	d102      	bne.n	8022f72 <_strtod_l+0x8aa>
 8022f6c:	3101      	adds	r1, #1
 8022f6e:	f43f adca 	beq.w	8022b06 <_strtod_l+0x43e>
 8022f72:	4b92      	ldr	r3, [pc, #584]	@ (80231bc <_strtod_l+0xaf4>)
 8022f74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f76:	401a      	ands	r2, r3
 8022f78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8022f7c:	f04f 0a00 	mov.w	sl, #0
 8022f80:	9b08      	ldr	r3, [sp, #32]
 8022f82:	2b00      	cmp	r3, #0
 8022f84:	d1b8      	bne.n	8022ef8 <_strtod_l+0x830>
 8022f86:	e5c9      	b.n	8022b1c <_strtod_l+0x454>
 8022f88:	f04f 33ff 	mov.w	r3, #4294967295
 8022f8c:	e7e8      	b.n	8022f60 <_strtod_l+0x898>
 8022f8e:	4613      	mov	r3, r2
 8022f90:	e7e6      	b.n	8022f60 <_strtod_l+0x898>
 8022f92:	ea53 030a 	orrs.w	r3, r3, sl
 8022f96:	d0a1      	beq.n	8022edc <_strtod_l+0x814>
 8022f98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022f9a:	b1db      	cbz	r3, 8022fd4 <_strtod_l+0x90c>
 8022f9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f9e:	4213      	tst	r3, r2
 8022fa0:	d0ee      	beq.n	8022f80 <_strtod_l+0x8b8>
 8022fa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022fa4:	9a08      	ldr	r2, [sp, #32]
 8022fa6:	4650      	mov	r0, sl
 8022fa8:	4659      	mov	r1, fp
 8022faa:	b1bb      	cbz	r3, 8022fdc <_strtod_l+0x914>
 8022fac:	f7ff fb6c 	bl	8022688 <sulp>
 8022fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022fb4:	ec53 2b10 	vmov	r2, r3, d0
 8022fb8:	f7e5 f8b0 	bl	800811c <__adddf3>
 8022fbc:	4682      	mov	sl, r0
 8022fbe:	468b      	mov	fp, r1
 8022fc0:	e7de      	b.n	8022f80 <_strtod_l+0x8b8>
 8022fc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8022fc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8022fca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8022fce:	f04f 3aff 	mov.w	sl, #4294967295
 8022fd2:	e7d5      	b.n	8022f80 <_strtod_l+0x8b8>
 8022fd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022fd6:	ea13 0f0a 	tst.w	r3, sl
 8022fda:	e7e1      	b.n	8022fa0 <_strtod_l+0x8d8>
 8022fdc:	f7ff fb54 	bl	8022688 <sulp>
 8022fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022fe4:	ec53 2b10 	vmov	r2, r3, d0
 8022fe8:	f7e5 f896 	bl	8008118 <__aeabi_dsub>
 8022fec:	2200      	movs	r2, #0
 8022fee:	2300      	movs	r3, #0
 8022ff0:	4682      	mov	sl, r0
 8022ff2:	468b      	mov	fp, r1
 8022ff4:	f7e5 fcb0 	bl	8008958 <__aeabi_dcmpeq>
 8022ff8:	2800      	cmp	r0, #0
 8022ffa:	d0c1      	beq.n	8022f80 <_strtod_l+0x8b8>
 8022ffc:	e619      	b.n	8022c32 <_strtod_l+0x56a>
 8022ffe:	4641      	mov	r1, r8
 8023000:	4620      	mov	r0, r4
 8023002:	f003 faef 	bl	80265e4 <__ratio>
 8023006:	ec57 6b10 	vmov	r6, r7, d0
 802300a:	2200      	movs	r2, #0
 802300c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8023010:	4630      	mov	r0, r6
 8023012:	4639      	mov	r1, r7
 8023014:	f7e5 fcb4 	bl	8008980 <__aeabi_dcmple>
 8023018:	2800      	cmp	r0, #0
 802301a:	d06f      	beq.n	80230fc <_strtod_l+0xa34>
 802301c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802301e:	2b00      	cmp	r3, #0
 8023020:	d17a      	bne.n	8023118 <_strtod_l+0xa50>
 8023022:	f1ba 0f00 	cmp.w	sl, #0
 8023026:	d158      	bne.n	80230da <_strtod_l+0xa12>
 8023028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802302a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802302e:	2b00      	cmp	r3, #0
 8023030:	d15a      	bne.n	80230e8 <_strtod_l+0xa20>
 8023032:	4b64      	ldr	r3, [pc, #400]	@ (80231c4 <_strtod_l+0xafc>)
 8023034:	2200      	movs	r2, #0
 8023036:	4630      	mov	r0, r6
 8023038:	4639      	mov	r1, r7
 802303a:	f7e5 fc97 	bl	800896c <__aeabi_dcmplt>
 802303e:	2800      	cmp	r0, #0
 8023040:	d159      	bne.n	80230f6 <_strtod_l+0xa2e>
 8023042:	4630      	mov	r0, r6
 8023044:	4639      	mov	r1, r7
 8023046:	4b60      	ldr	r3, [pc, #384]	@ (80231c8 <_strtod_l+0xb00>)
 8023048:	2200      	movs	r2, #0
 802304a:	f7e5 fa1d 	bl	8008488 <__aeabi_dmul>
 802304e:	4606      	mov	r6, r0
 8023050:	460f      	mov	r7, r1
 8023052:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8023056:	9606      	str	r6, [sp, #24]
 8023058:	9307      	str	r3, [sp, #28]
 802305a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802305e:	4d57      	ldr	r5, [pc, #348]	@ (80231bc <_strtod_l+0xaf4>)
 8023060:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8023064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023066:	401d      	ands	r5, r3
 8023068:	4b58      	ldr	r3, [pc, #352]	@ (80231cc <_strtod_l+0xb04>)
 802306a:	429d      	cmp	r5, r3
 802306c:	f040 80b2 	bne.w	80231d4 <_strtod_l+0xb0c>
 8023070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023072:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8023076:	ec4b ab10 	vmov	d0, sl, fp
 802307a:	f003 f9eb 	bl	8026454 <__ulp>
 802307e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023082:	ec51 0b10 	vmov	r0, r1, d0
 8023086:	f7e5 f9ff 	bl	8008488 <__aeabi_dmul>
 802308a:	4652      	mov	r2, sl
 802308c:	465b      	mov	r3, fp
 802308e:	f7e5 f845 	bl	800811c <__adddf3>
 8023092:	460b      	mov	r3, r1
 8023094:	4949      	ldr	r1, [pc, #292]	@ (80231bc <_strtod_l+0xaf4>)
 8023096:	4a4e      	ldr	r2, [pc, #312]	@ (80231d0 <_strtod_l+0xb08>)
 8023098:	4019      	ands	r1, r3
 802309a:	4291      	cmp	r1, r2
 802309c:	4682      	mov	sl, r0
 802309e:	d942      	bls.n	8023126 <_strtod_l+0xa5e>
 80230a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80230a2:	4b47      	ldr	r3, [pc, #284]	@ (80231c0 <_strtod_l+0xaf8>)
 80230a4:	429a      	cmp	r2, r3
 80230a6:	d103      	bne.n	80230b0 <_strtod_l+0x9e8>
 80230a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230aa:	3301      	adds	r3, #1
 80230ac:	f43f ad2b 	beq.w	8022b06 <_strtod_l+0x43e>
 80230b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80231c0 <_strtod_l+0xaf8>
 80230b4:	f04f 3aff 	mov.w	sl, #4294967295
 80230b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80230ba:	9805      	ldr	r0, [sp, #20]
 80230bc:	f002 fe96 	bl	8025dec <_Bfree>
 80230c0:	9805      	ldr	r0, [sp, #20]
 80230c2:	4649      	mov	r1, r9
 80230c4:	f002 fe92 	bl	8025dec <_Bfree>
 80230c8:	9805      	ldr	r0, [sp, #20]
 80230ca:	4641      	mov	r1, r8
 80230cc:	f002 fe8e 	bl	8025dec <_Bfree>
 80230d0:	9805      	ldr	r0, [sp, #20]
 80230d2:	4621      	mov	r1, r4
 80230d4:	f002 fe8a 	bl	8025dec <_Bfree>
 80230d8:	e618      	b.n	8022d0c <_strtod_l+0x644>
 80230da:	f1ba 0f01 	cmp.w	sl, #1
 80230de:	d103      	bne.n	80230e8 <_strtod_l+0xa20>
 80230e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	f43f ada5 	beq.w	8022c32 <_strtod_l+0x56a>
 80230e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8023198 <_strtod_l+0xad0>
 80230ec:	4f35      	ldr	r7, [pc, #212]	@ (80231c4 <_strtod_l+0xafc>)
 80230ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80230f2:	2600      	movs	r6, #0
 80230f4:	e7b1      	b.n	802305a <_strtod_l+0x992>
 80230f6:	4f34      	ldr	r7, [pc, #208]	@ (80231c8 <_strtod_l+0xb00>)
 80230f8:	2600      	movs	r6, #0
 80230fa:	e7aa      	b.n	8023052 <_strtod_l+0x98a>
 80230fc:	4b32      	ldr	r3, [pc, #200]	@ (80231c8 <_strtod_l+0xb00>)
 80230fe:	4630      	mov	r0, r6
 8023100:	4639      	mov	r1, r7
 8023102:	2200      	movs	r2, #0
 8023104:	f7e5 f9c0 	bl	8008488 <__aeabi_dmul>
 8023108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802310a:	4606      	mov	r6, r0
 802310c:	460f      	mov	r7, r1
 802310e:	2b00      	cmp	r3, #0
 8023110:	d09f      	beq.n	8023052 <_strtod_l+0x98a>
 8023112:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8023116:	e7a0      	b.n	802305a <_strtod_l+0x992>
 8023118:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80231a0 <_strtod_l+0xad8>
 802311c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8023120:	ec57 6b17 	vmov	r6, r7, d7
 8023124:	e799      	b.n	802305a <_strtod_l+0x992>
 8023126:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802312a:	9b08      	ldr	r3, [sp, #32]
 802312c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8023130:	2b00      	cmp	r3, #0
 8023132:	d1c1      	bne.n	80230b8 <_strtod_l+0x9f0>
 8023134:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8023138:	0d1b      	lsrs	r3, r3, #20
 802313a:	051b      	lsls	r3, r3, #20
 802313c:	429d      	cmp	r5, r3
 802313e:	d1bb      	bne.n	80230b8 <_strtod_l+0x9f0>
 8023140:	4630      	mov	r0, r6
 8023142:	4639      	mov	r1, r7
 8023144:	f7e5 fd00 	bl	8008b48 <__aeabi_d2lz>
 8023148:	f7e5 f970 	bl	800842c <__aeabi_l2d>
 802314c:	4602      	mov	r2, r0
 802314e:	460b      	mov	r3, r1
 8023150:	4630      	mov	r0, r6
 8023152:	4639      	mov	r1, r7
 8023154:	f7e4 ffe0 	bl	8008118 <__aeabi_dsub>
 8023158:	460b      	mov	r3, r1
 802315a:	4602      	mov	r2, r0
 802315c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8023160:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8023164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023166:	ea46 060a 	orr.w	r6, r6, sl
 802316a:	431e      	orrs	r6, r3
 802316c:	d06f      	beq.n	802324e <_strtod_l+0xb86>
 802316e:	a30e      	add	r3, pc, #56	@ (adr r3, 80231a8 <_strtod_l+0xae0>)
 8023170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023174:	f7e5 fbfa 	bl	800896c <__aeabi_dcmplt>
 8023178:	2800      	cmp	r0, #0
 802317a:	f47f accf 	bne.w	8022b1c <_strtod_l+0x454>
 802317e:	a30c      	add	r3, pc, #48	@ (adr r3, 80231b0 <_strtod_l+0xae8>)
 8023180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023184:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8023188:	f7e5 fc0e 	bl	80089a8 <__aeabi_dcmpgt>
 802318c:	2800      	cmp	r0, #0
 802318e:	d093      	beq.n	80230b8 <_strtod_l+0x9f0>
 8023190:	e4c4      	b.n	8022b1c <_strtod_l+0x454>
 8023192:	bf00      	nop
 8023194:	f3af 8000 	nop.w
 8023198:	00000000 	.word	0x00000000
 802319c:	bff00000 	.word	0xbff00000
 80231a0:	00000000 	.word	0x00000000
 80231a4:	3ff00000 	.word	0x3ff00000
 80231a8:	94a03595 	.word	0x94a03595
 80231ac:	3fdfffff 	.word	0x3fdfffff
 80231b0:	35afe535 	.word	0x35afe535
 80231b4:	3fe00000 	.word	0x3fe00000
 80231b8:	000fffff 	.word	0x000fffff
 80231bc:	7ff00000 	.word	0x7ff00000
 80231c0:	7fefffff 	.word	0x7fefffff
 80231c4:	3ff00000 	.word	0x3ff00000
 80231c8:	3fe00000 	.word	0x3fe00000
 80231cc:	7fe00000 	.word	0x7fe00000
 80231d0:	7c9fffff 	.word	0x7c9fffff
 80231d4:	9b08      	ldr	r3, [sp, #32]
 80231d6:	b323      	cbz	r3, 8023222 <_strtod_l+0xb5a>
 80231d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80231dc:	d821      	bhi.n	8023222 <_strtod_l+0xb5a>
 80231de:	a328      	add	r3, pc, #160	@ (adr r3, 8023280 <_strtod_l+0xbb8>)
 80231e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e4:	4630      	mov	r0, r6
 80231e6:	4639      	mov	r1, r7
 80231e8:	f7e5 fbca 	bl	8008980 <__aeabi_dcmple>
 80231ec:	b1a0      	cbz	r0, 8023218 <_strtod_l+0xb50>
 80231ee:	4639      	mov	r1, r7
 80231f0:	4630      	mov	r0, r6
 80231f2:	f7e5 fc21 	bl	8008a38 <__aeabi_d2uiz>
 80231f6:	2801      	cmp	r0, #1
 80231f8:	bf38      	it	cc
 80231fa:	2001      	movcc	r0, #1
 80231fc:	f7e5 f8ca 	bl	8008394 <__aeabi_ui2d>
 8023200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023202:	4606      	mov	r6, r0
 8023204:	460f      	mov	r7, r1
 8023206:	b9fb      	cbnz	r3, 8023248 <_strtod_l+0xb80>
 8023208:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802320c:	9014      	str	r0, [sp, #80]	@ 0x50
 802320e:	9315      	str	r3, [sp, #84]	@ 0x54
 8023210:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8023214:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8023218:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802321a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802321e:	1b5b      	subs	r3, r3, r5
 8023220:	9311      	str	r3, [sp, #68]	@ 0x44
 8023222:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8023226:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802322a:	f003 f913 	bl	8026454 <__ulp>
 802322e:	4650      	mov	r0, sl
 8023230:	ec53 2b10 	vmov	r2, r3, d0
 8023234:	4659      	mov	r1, fp
 8023236:	f7e5 f927 	bl	8008488 <__aeabi_dmul>
 802323a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802323e:	f7e4 ff6d 	bl	800811c <__adddf3>
 8023242:	4682      	mov	sl, r0
 8023244:	468b      	mov	fp, r1
 8023246:	e770      	b.n	802312a <_strtod_l+0xa62>
 8023248:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802324c:	e7e0      	b.n	8023210 <_strtod_l+0xb48>
 802324e:	a30e      	add	r3, pc, #56	@ (adr r3, 8023288 <_strtod_l+0xbc0>)
 8023250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023254:	f7e5 fb8a 	bl	800896c <__aeabi_dcmplt>
 8023258:	e798      	b.n	802318c <_strtod_l+0xac4>
 802325a:	2300      	movs	r3, #0
 802325c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802325e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023260:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023262:	6013      	str	r3, [r2, #0]
 8023264:	f7ff ba6d 	b.w	8022742 <_strtod_l+0x7a>
 8023268:	2a65      	cmp	r2, #101	@ 0x65
 802326a:	f43f ab66 	beq.w	802293a <_strtod_l+0x272>
 802326e:	2a45      	cmp	r2, #69	@ 0x45
 8023270:	f43f ab63 	beq.w	802293a <_strtod_l+0x272>
 8023274:	2301      	movs	r3, #1
 8023276:	f7ff bb9e 	b.w	80229b6 <_strtod_l+0x2ee>
 802327a:	bf00      	nop
 802327c:	f3af 8000 	nop.w
 8023280:	ffc00000 	.word	0xffc00000
 8023284:	41dfffff 	.word	0x41dfffff
 8023288:	94a03595 	.word	0x94a03595
 802328c:	3fcfffff 	.word	0x3fcfffff

08023290 <_strtod_r>:
 8023290:	4b01      	ldr	r3, [pc, #4]	@ (8023298 <_strtod_r+0x8>)
 8023292:	f7ff ba19 	b.w	80226c8 <_strtod_l>
 8023296:	bf00      	nop
 8023298:	200004a8 	.word	0x200004a8

0802329c <_strtol_l.constprop.0>:
 802329c:	2b24      	cmp	r3, #36	@ 0x24
 802329e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80232a2:	4686      	mov	lr, r0
 80232a4:	4690      	mov	r8, r2
 80232a6:	d801      	bhi.n	80232ac <_strtol_l.constprop.0+0x10>
 80232a8:	2b01      	cmp	r3, #1
 80232aa:	d106      	bne.n	80232ba <_strtol_l.constprop.0+0x1e>
 80232ac:	f001 faea 	bl	8024884 <__errno>
 80232b0:	2316      	movs	r3, #22
 80232b2:	6003      	str	r3, [r0, #0]
 80232b4:	2000      	movs	r0, #0
 80232b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232ba:	4834      	ldr	r0, [pc, #208]	@ (802338c <_strtol_l.constprop.0+0xf0>)
 80232bc:	460d      	mov	r5, r1
 80232be:	462a      	mov	r2, r5
 80232c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80232c4:	5d06      	ldrb	r6, [r0, r4]
 80232c6:	f016 0608 	ands.w	r6, r6, #8
 80232ca:	d1f8      	bne.n	80232be <_strtol_l.constprop.0+0x22>
 80232cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80232ce:	d12d      	bne.n	802332c <_strtol_l.constprop.0+0x90>
 80232d0:	782c      	ldrb	r4, [r5, #0]
 80232d2:	2601      	movs	r6, #1
 80232d4:	1c95      	adds	r5, r2, #2
 80232d6:	f033 0210 	bics.w	r2, r3, #16
 80232da:	d109      	bne.n	80232f0 <_strtol_l.constprop.0+0x54>
 80232dc:	2c30      	cmp	r4, #48	@ 0x30
 80232de:	d12a      	bne.n	8023336 <_strtol_l.constprop.0+0x9a>
 80232e0:	782a      	ldrb	r2, [r5, #0]
 80232e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80232e6:	2a58      	cmp	r2, #88	@ 0x58
 80232e8:	d125      	bne.n	8023336 <_strtol_l.constprop.0+0x9a>
 80232ea:	786c      	ldrb	r4, [r5, #1]
 80232ec:	2310      	movs	r3, #16
 80232ee:	3502      	adds	r5, #2
 80232f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80232f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80232f8:	2200      	movs	r2, #0
 80232fa:	fbbc f9f3 	udiv	r9, ip, r3
 80232fe:	4610      	mov	r0, r2
 8023300:	fb03 ca19 	mls	sl, r3, r9, ip
 8023304:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023308:	2f09      	cmp	r7, #9
 802330a:	d81b      	bhi.n	8023344 <_strtol_l.constprop.0+0xa8>
 802330c:	463c      	mov	r4, r7
 802330e:	42a3      	cmp	r3, r4
 8023310:	dd27      	ble.n	8023362 <_strtol_l.constprop.0+0xc6>
 8023312:	1c57      	adds	r7, r2, #1
 8023314:	d007      	beq.n	8023326 <_strtol_l.constprop.0+0x8a>
 8023316:	4581      	cmp	r9, r0
 8023318:	d320      	bcc.n	802335c <_strtol_l.constprop.0+0xc0>
 802331a:	d101      	bne.n	8023320 <_strtol_l.constprop.0+0x84>
 802331c:	45a2      	cmp	sl, r4
 802331e:	db1d      	blt.n	802335c <_strtol_l.constprop.0+0xc0>
 8023320:	fb00 4003 	mla	r0, r0, r3, r4
 8023324:	2201      	movs	r2, #1
 8023326:	f815 4b01 	ldrb.w	r4, [r5], #1
 802332a:	e7eb      	b.n	8023304 <_strtol_l.constprop.0+0x68>
 802332c:	2c2b      	cmp	r4, #43	@ 0x2b
 802332e:	bf04      	itt	eq
 8023330:	782c      	ldrbeq	r4, [r5, #0]
 8023332:	1c95      	addeq	r5, r2, #2
 8023334:	e7cf      	b.n	80232d6 <_strtol_l.constprop.0+0x3a>
 8023336:	2b00      	cmp	r3, #0
 8023338:	d1da      	bne.n	80232f0 <_strtol_l.constprop.0+0x54>
 802333a:	2c30      	cmp	r4, #48	@ 0x30
 802333c:	bf0c      	ite	eq
 802333e:	2308      	moveq	r3, #8
 8023340:	230a      	movne	r3, #10
 8023342:	e7d5      	b.n	80232f0 <_strtol_l.constprop.0+0x54>
 8023344:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8023348:	2f19      	cmp	r7, #25
 802334a:	d801      	bhi.n	8023350 <_strtol_l.constprop.0+0xb4>
 802334c:	3c37      	subs	r4, #55	@ 0x37
 802334e:	e7de      	b.n	802330e <_strtol_l.constprop.0+0x72>
 8023350:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8023354:	2f19      	cmp	r7, #25
 8023356:	d804      	bhi.n	8023362 <_strtol_l.constprop.0+0xc6>
 8023358:	3c57      	subs	r4, #87	@ 0x57
 802335a:	e7d8      	b.n	802330e <_strtol_l.constprop.0+0x72>
 802335c:	f04f 32ff 	mov.w	r2, #4294967295
 8023360:	e7e1      	b.n	8023326 <_strtol_l.constprop.0+0x8a>
 8023362:	1c53      	adds	r3, r2, #1
 8023364:	d108      	bne.n	8023378 <_strtol_l.constprop.0+0xdc>
 8023366:	2322      	movs	r3, #34	@ 0x22
 8023368:	f8ce 3000 	str.w	r3, [lr]
 802336c:	4660      	mov	r0, ip
 802336e:	f1b8 0f00 	cmp.w	r8, #0
 8023372:	d0a0      	beq.n	80232b6 <_strtol_l.constprop.0+0x1a>
 8023374:	1e69      	subs	r1, r5, #1
 8023376:	e006      	b.n	8023386 <_strtol_l.constprop.0+0xea>
 8023378:	b106      	cbz	r6, 802337c <_strtol_l.constprop.0+0xe0>
 802337a:	4240      	negs	r0, r0
 802337c:	f1b8 0f00 	cmp.w	r8, #0
 8023380:	d099      	beq.n	80232b6 <_strtol_l.constprop.0+0x1a>
 8023382:	2a00      	cmp	r2, #0
 8023384:	d1f6      	bne.n	8023374 <_strtol_l.constprop.0+0xd8>
 8023386:	f8c8 1000 	str.w	r1, [r8]
 802338a:	e794      	b.n	80232b6 <_strtol_l.constprop.0+0x1a>
 802338c:	08030c71 	.word	0x08030c71

08023390 <_strtol_r>:
 8023390:	f7ff bf84 	b.w	802329c <_strtol_l.constprop.0>

08023394 <swapfunc>:
 8023394:	2b02      	cmp	r3, #2
 8023396:	b510      	push	{r4, lr}
 8023398:	d00a      	beq.n	80233b0 <swapfunc+0x1c>
 802339a:	0892      	lsrs	r2, r2, #2
 802339c:	3a01      	subs	r2, #1
 802339e:	6803      	ldr	r3, [r0, #0]
 80233a0:	680c      	ldr	r4, [r1, #0]
 80233a2:	f840 4b04 	str.w	r4, [r0], #4
 80233a6:	2a00      	cmp	r2, #0
 80233a8:	f841 3b04 	str.w	r3, [r1], #4
 80233ac:	dcf6      	bgt.n	802339c <swapfunc+0x8>
 80233ae:	bd10      	pop	{r4, pc}
 80233b0:	4402      	add	r2, r0
 80233b2:	780c      	ldrb	r4, [r1, #0]
 80233b4:	7803      	ldrb	r3, [r0, #0]
 80233b6:	f800 4b01 	strb.w	r4, [r0], #1
 80233ba:	f801 3b01 	strb.w	r3, [r1], #1
 80233be:	1a13      	subs	r3, r2, r0
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	dcf6      	bgt.n	80233b2 <swapfunc+0x1e>
 80233c4:	e7f3      	b.n	80233ae <swapfunc+0x1a>

080233c6 <med3.constprop.0>:
 80233c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233c8:	460f      	mov	r7, r1
 80233ca:	4616      	mov	r6, r2
 80233cc:	4604      	mov	r4, r0
 80233ce:	461d      	mov	r5, r3
 80233d0:	4798      	blx	r3
 80233d2:	2800      	cmp	r0, #0
 80233d4:	4631      	mov	r1, r6
 80233d6:	4638      	mov	r0, r7
 80233d8:	da0c      	bge.n	80233f4 <med3.constprop.0+0x2e>
 80233da:	47a8      	blx	r5
 80233dc:	2800      	cmp	r0, #0
 80233de:	da02      	bge.n	80233e6 <med3.constprop.0+0x20>
 80233e0:	463c      	mov	r4, r7
 80233e2:	4620      	mov	r0, r4
 80233e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80233e6:	4631      	mov	r1, r6
 80233e8:	4620      	mov	r0, r4
 80233ea:	47a8      	blx	r5
 80233ec:	2800      	cmp	r0, #0
 80233ee:	daf8      	bge.n	80233e2 <med3.constprop.0+0x1c>
 80233f0:	4634      	mov	r4, r6
 80233f2:	e7f6      	b.n	80233e2 <med3.constprop.0+0x1c>
 80233f4:	47a8      	blx	r5
 80233f6:	2800      	cmp	r0, #0
 80233f8:	dcf2      	bgt.n	80233e0 <med3.constprop.0+0x1a>
 80233fa:	4631      	mov	r1, r6
 80233fc:	4620      	mov	r0, r4
 80233fe:	47a8      	blx	r5
 8023400:	2800      	cmp	r0, #0
 8023402:	daf5      	bge.n	80233f0 <med3.constprop.0+0x2a>
 8023404:	e7ed      	b.n	80233e2 <med3.constprop.0+0x1c>

08023406 <qsort>:
 8023406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802340a:	b095      	sub	sp, #84	@ 0x54
 802340c:	4606      	mov	r6, r0
 802340e:	9300      	str	r3, [sp, #0]
 8023410:	ea40 0302 	orr.w	r3, r0, r2
 8023414:	079b      	lsls	r3, r3, #30
 8023416:	4614      	mov	r4, r2
 8023418:	d118      	bne.n	802344c <qsort+0x46>
 802341a:	f1b2 0804 	subs.w	r8, r2, #4
 802341e:	bf18      	it	ne
 8023420:	f04f 0801 	movne.w	r8, #1
 8023424:	2300      	movs	r3, #0
 8023426:	9301      	str	r3, [sp, #4]
 8023428:	fb04 f701 	mul.w	r7, r4, r1
 802342c:	19f3      	adds	r3, r6, r7
 802342e:	2906      	cmp	r1, #6
 8023430:	eb06 0b04 	add.w	fp, r6, r4
 8023434:	9302      	str	r3, [sp, #8]
 8023436:	d828      	bhi.n	802348a <qsort+0x84>
 8023438:	9b02      	ldr	r3, [sp, #8]
 802343a:	459b      	cmp	fp, r3
 802343c:	d310      	bcc.n	8023460 <qsort+0x5a>
 802343e:	9b01      	ldr	r3, [sp, #4]
 8023440:	2b00      	cmp	r3, #0
 8023442:	f040 8117 	bne.w	8023674 <qsort+0x26e>
 8023446:	b015      	add	sp, #84	@ 0x54
 8023448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802344c:	f04f 0802 	mov.w	r8, #2
 8023450:	e7e8      	b.n	8023424 <qsort+0x1e>
 8023452:	4643      	mov	r3, r8
 8023454:	4622      	mov	r2, r4
 8023456:	4639      	mov	r1, r7
 8023458:	4628      	mov	r0, r5
 802345a:	f7ff ff9b 	bl	8023394 <swapfunc>
 802345e:	e00f      	b.n	8023480 <qsort+0x7a>
 8023460:	465d      	mov	r5, fp
 8023462:	e00e      	b.n	8023482 <qsort+0x7c>
 8023464:	1b2f      	subs	r7, r5, r4
 8023466:	9b00      	ldr	r3, [sp, #0]
 8023468:	4629      	mov	r1, r5
 802346a:	4638      	mov	r0, r7
 802346c:	4798      	blx	r3
 802346e:	2800      	cmp	r0, #0
 8023470:	dd09      	ble.n	8023486 <qsort+0x80>
 8023472:	f1b8 0f00 	cmp.w	r8, #0
 8023476:	d1ec      	bne.n	8023452 <qsort+0x4c>
 8023478:	682b      	ldr	r3, [r5, #0]
 802347a:	683a      	ldr	r2, [r7, #0]
 802347c:	602a      	str	r2, [r5, #0]
 802347e:	603b      	str	r3, [r7, #0]
 8023480:	463d      	mov	r5, r7
 8023482:	42ae      	cmp	r6, r5
 8023484:	d3ee      	bcc.n	8023464 <qsort+0x5e>
 8023486:	44a3      	add	fp, r4
 8023488:	e7d6      	b.n	8023438 <qsort+0x32>
 802348a:	ea4f 0951 	mov.w	r9, r1, lsr #1
 802348e:	1b3f      	subs	r7, r7, r4
 8023490:	2907      	cmp	r1, #7
 8023492:	fb04 6909 	mla	r9, r4, r9, r6
 8023496:	4437      	add	r7, r6
 8023498:	d021      	beq.n	80234de <qsort+0xd8>
 802349a:	2928      	cmp	r1, #40	@ 0x28
 802349c:	d944      	bls.n	8023528 <qsort+0x122>
 802349e:	08cd      	lsrs	r5, r1, #3
 80234a0:	4365      	muls	r5, r4
 80234a2:	9b00      	ldr	r3, [sp, #0]
 80234a4:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80234a8:	1971      	adds	r1, r6, r5
 80234aa:	4630      	mov	r0, r6
 80234ac:	f7ff ff8b 	bl	80233c6 <med3.constprop.0>
 80234b0:	4649      	mov	r1, r9
 80234b2:	eb09 0205 	add.w	r2, r9, r5
 80234b6:	9b00      	ldr	r3, [sp, #0]
 80234b8:	4682      	mov	sl, r0
 80234ba:	1b48      	subs	r0, r1, r5
 80234bc:	f7ff ff83 	bl	80233c6 <med3.constprop.0>
 80234c0:	463a      	mov	r2, r7
 80234c2:	9b00      	ldr	r3, [sp, #0]
 80234c4:	4681      	mov	r9, r0
 80234c6:	1b79      	subs	r1, r7, r5
 80234c8:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80234cc:	f7ff ff7b 	bl	80233c6 <med3.constprop.0>
 80234d0:	4602      	mov	r2, r0
 80234d2:	4649      	mov	r1, r9
 80234d4:	9b00      	ldr	r3, [sp, #0]
 80234d6:	4650      	mov	r0, sl
 80234d8:	f7ff ff75 	bl	80233c6 <med3.constprop.0>
 80234dc:	4681      	mov	r9, r0
 80234de:	f1b8 0f00 	cmp.w	r8, #0
 80234e2:	d124      	bne.n	802352e <qsort+0x128>
 80234e4:	6833      	ldr	r3, [r6, #0]
 80234e6:	f8d9 2000 	ldr.w	r2, [r9]
 80234ea:	6032      	str	r2, [r6, #0]
 80234ec:	f8c9 3000 	str.w	r3, [r9]
 80234f0:	46d9      	mov	r9, fp
 80234f2:	46ba      	mov	sl, r7
 80234f4:	465d      	mov	r5, fp
 80234f6:	2300      	movs	r3, #0
 80234f8:	45b9      	cmp	r9, r7
 80234fa:	d857      	bhi.n	80235ac <qsort+0x1a6>
 80234fc:	9303      	str	r3, [sp, #12]
 80234fe:	4631      	mov	r1, r6
 8023500:	9b00      	ldr	r3, [sp, #0]
 8023502:	4648      	mov	r0, r9
 8023504:	4798      	blx	r3
 8023506:	2800      	cmp	r0, #0
 8023508:	9b03      	ldr	r3, [sp, #12]
 802350a:	dc2c      	bgt.n	8023566 <qsort+0x160>
 802350c:	d10a      	bne.n	8023524 <qsort+0x11e>
 802350e:	f1b8 0f00 	cmp.w	r8, #0
 8023512:	d113      	bne.n	802353c <qsort+0x136>
 8023514:	682b      	ldr	r3, [r5, #0]
 8023516:	f8d9 2000 	ldr.w	r2, [r9]
 802351a:	602a      	str	r2, [r5, #0]
 802351c:	f8c9 3000 	str.w	r3, [r9]
 8023520:	4425      	add	r5, r4
 8023522:	2301      	movs	r3, #1
 8023524:	44a1      	add	r9, r4
 8023526:	e7e7      	b.n	80234f8 <qsort+0xf2>
 8023528:	463a      	mov	r2, r7
 802352a:	46b2      	mov	sl, r6
 802352c:	e7d1      	b.n	80234d2 <qsort+0xcc>
 802352e:	4643      	mov	r3, r8
 8023530:	4622      	mov	r2, r4
 8023532:	4649      	mov	r1, r9
 8023534:	4630      	mov	r0, r6
 8023536:	f7ff ff2d 	bl	8023394 <swapfunc>
 802353a:	e7d9      	b.n	80234f0 <qsort+0xea>
 802353c:	4643      	mov	r3, r8
 802353e:	4622      	mov	r2, r4
 8023540:	4649      	mov	r1, r9
 8023542:	4628      	mov	r0, r5
 8023544:	f7ff ff26 	bl	8023394 <swapfunc>
 8023548:	e7ea      	b.n	8023520 <qsort+0x11a>
 802354a:	d10b      	bne.n	8023564 <qsort+0x15e>
 802354c:	f1b8 0f00 	cmp.w	r8, #0
 8023550:	d11e      	bne.n	8023590 <qsort+0x18a>
 8023552:	683b      	ldr	r3, [r7, #0]
 8023554:	f8da 2000 	ldr.w	r2, [sl]
 8023558:	603a      	str	r2, [r7, #0]
 802355a:	f8ca 3000 	str.w	r3, [sl]
 802355e:	ebaa 0a04 	sub.w	sl, sl, r4
 8023562:	2301      	movs	r3, #1
 8023564:	1b3f      	subs	r7, r7, r4
 8023566:	45b9      	cmp	r9, r7
 8023568:	d820      	bhi.n	80235ac <qsort+0x1a6>
 802356a:	9303      	str	r3, [sp, #12]
 802356c:	4631      	mov	r1, r6
 802356e:	9b00      	ldr	r3, [sp, #0]
 8023570:	4638      	mov	r0, r7
 8023572:	4798      	blx	r3
 8023574:	2800      	cmp	r0, #0
 8023576:	9b03      	ldr	r3, [sp, #12]
 8023578:	dae7      	bge.n	802354a <qsort+0x144>
 802357a:	f1b8 0f00 	cmp.w	r8, #0
 802357e:	d10e      	bne.n	802359e <qsort+0x198>
 8023580:	f8d9 3000 	ldr.w	r3, [r9]
 8023584:	683a      	ldr	r2, [r7, #0]
 8023586:	f8c9 2000 	str.w	r2, [r9]
 802358a:	603b      	str	r3, [r7, #0]
 802358c:	1b3f      	subs	r7, r7, r4
 802358e:	e7c8      	b.n	8023522 <qsort+0x11c>
 8023590:	4643      	mov	r3, r8
 8023592:	4622      	mov	r2, r4
 8023594:	4651      	mov	r1, sl
 8023596:	4638      	mov	r0, r7
 8023598:	f7ff fefc 	bl	8023394 <swapfunc>
 802359c:	e7df      	b.n	802355e <qsort+0x158>
 802359e:	4643      	mov	r3, r8
 80235a0:	4622      	mov	r2, r4
 80235a2:	4639      	mov	r1, r7
 80235a4:	4648      	mov	r0, r9
 80235a6:	f7ff fef5 	bl	8023394 <swapfunc>
 80235aa:	e7ef      	b.n	802358c <qsort+0x186>
 80235ac:	b9fb      	cbnz	r3, 80235ee <qsort+0x1e8>
 80235ae:	9b02      	ldr	r3, [sp, #8]
 80235b0:	459b      	cmp	fp, r3
 80235b2:	f4bf af44 	bcs.w	802343e <qsort+0x38>
 80235b6:	465d      	mov	r5, fp
 80235b8:	e015      	b.n	80235e6 <qsort+0x1e0>
 80235ba:	4643      	mov	r3, r8
 80235bc:	4622      	mov	r2, r4
 80235be:	4639      	mov	r1, r7
 80235c0:	4628      	mov	r0, r5
 80235c2:	f7ff fee7 	bl	8023394 <swapfunc>
 80235c6:	e00d      	b.n	80235e4 <qsort+0x1de>
 80235c8:	1b2f      	subs	r7, r5, r4
 80235ca:	9b00      	ldr	r3, [sp, #0]
 80235cc:	4629      	mov	r1, r5
 80235ce:	4638      	mov	r0, r7
 80235d0:	4798      	blx	r3
 80235d2:	2800      	cmp	r0, #0
 80235d4:	dd09      	ble.n	80235ea <qsort+0x1e4>
 80235d6:	f1b8 0f00 	cmp.w	r8, #0
 80235da:	d1ee      	bne.n	80235ba <qsort+0x1b4>
 80235dc:	682b      	ldr	r3, [r5, #0]
 80235de:	683a      	ldr	r2, [r7, #0]
 80235e0:	602a      	str	r2, [r5, #0]
 80235e2:	603b      	str	r3, [r7, #0]
 80235e4:	463d      	mov	r5, r7
 80235e6:	42ae      	cmp	r6, r5
 80235e8:	d3ee      	bcc.n	80235c8 <qsort+0x1c2>
 80235ea:	44a3      	add	fp, r4
 80235ec:	e7df      	b.n	80235ae <qsort+0x1a8>
 80235ee:	eba9 0b05 	sub.w	fp, r9, r5
 80235f2:	1baa      	subs	r2, r5, r6
 80235f4:	455a      	cmp	r2, fp
 80235f6:	bfa8      	it	ge
 80235f8:	465a      	movge	r2, fp
 80235fa:	b12a      	cbz	r2, 8023608 <qsort+0x202>
 80235fc:	4643      	mov	r3, r8
 80235fe:	eba9 0102 	sub.w	r1, r9, r2
 8023602:	4630      	mov	r0, r6
 8023604:	f7ff fec6 	bl	8023394 <swapfunc>
 8023608:	9b02      	ldr	r3, [sp, #8]
 802360a:	eba3 020a 	sub.w	r2, r3, sl
 802360e:	ebaa 0507 	sub.w	r5, sl, r7
 8023612:	1b12      	subs	r2, r2, r4
 8023614:	42aa      	cmp	r2, r5
 8023616:	bf28      	it	cs
 8023618:	462a      	movcs	r2, r5
 802361a:	b12a      	cbz	r2, 8023628 <qsort+0x222>
 802361c:	9902      	ldr	r1, [sp, #8]
 802361e:	4643      	mov	r3, r8
 8023620:	1a89      	subs	r1, r1, r2
 8023622:	4648      	mov	r0, r9
 8023624:	f7ff feb6 	bl	8023394 <swapfunc>
 8023628:	9b02      	ldr	r3, [sp, #8]
 802362a:	455d      	cmp	r5, fp
 802362c:	465f      	mov	r7, fp
 802362e:	eba3 0005 	sub.w	r0, r3, r5
 8023632:	d904      	bls.n	802363e <qsort+0x238>
 8023634:	4633      	mov	r3, r6
 8023636:	462f      	mov	r7, r5
 8023638:	4606      	mov	r6, r0
 802363a:	465d      	mov	r5, fp
 802363c:	4618      	mov	r0, r3
 802363e:	42a5      	cmp	r5, r4
 8023640:	d921      	bls.n	8023686 <qsort+0x280>
 8023642:	fbb5 f1f4 	udiv	r1, r5, r4
 8023646:	9b01      	ldr	r3, [sp, #4]
 8023648:	2b07      	cmp	r3, #7
 802364a:	d80d      	bhi.n	8023668 <qsort+0x262>
 802364c:	fbb7 f7f4 	udiv	r7, r7, r4
 8023650:	aa14      	add	r2, sp, #80	@ 0x50
 8023652:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023656:	f843 6c40 	str.w	r6, [r3, #-64]
 802365a:	f843 7c3c 	str.w	r7, [r3, #-60]
 802365e:	9b01      	ldr	r3, [sp, #4]
 8023660:	3301      	adds	r3, #1
 8023662:	9301      	str	r3, [sp, #4]
 8023664:	4606      	mov	r6, r0
 8023666:	e6df      	b.n	8023428 <qsort+0x22>
 8023668:	9b00      	ldr	r3, [sp, #0]
 802366a:	4622      	mov	r2, r4
 802366c:	f7ff fecb 	bl	8023406 <qsort>
 8023670:	42a7      	cmp	r7, r4
 8023672:	d80b      	bhi.n	802368c <qsort+0x286>
 8023674:	9b01      	ldr	r3, [sp, #4]
 8023676:	aa14      	add	r2, sp, #80	@ 0x50
 8023678:	3b01      	subs	r3, #1
 802367a:	9301      	str	r3, [sp, #4]
 802367c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023680:	e953 0110 	ldrd	r0, r1, [r3, #-64]	@ 0x40
 8023684:	e7ee      	b.n	8023664 <qsort+0x25e>
 8023686:	42a7      	cmp	r7, r4
 8023688:	f67f aed9 	bls.w	802343e <qsort+0x38>
 802368c:	fbb7 f1f4 	udiv	r1, r7, r4
 8023690:	4630      	mov	r0, r6
 8023692:	e7e7      	b.n	8023664 <qsort+0x25e>

08023694 <__cvt>:
 8023694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023698:	ec57 6b10 	vmov	r6, r7, d0
 802369c:	2f00      	cmp	r7, #0
 802369e:	460c      	mov	r4, r1
 80236a0:	4619      	mov	r1, r3
 80236a2:	463b      	mov	r3, r7
 80236a4:	bfbb      	ittet	lt
 80236a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80236aa:	461f      	movlt	r7, r3
 80236ac:	2300      	movge	r3, #0
 80236ae:	232d      	movlt	r3, #45	@ 0x2d
 80236b0:	700b      	strb	r3, [r1, #0]
 80236b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80236b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80236b8:	4691      	mov	r9, r2
 80236ba:	f023 0820 	bic.w	r8, r3, #32
 80236be:	bfbc      	itt	lt
 80236c0:	4632      	movlt	r2, r6
 80236c2:	4616      	movlt	r6, r2
 80236c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80236c8:	d005      	beq.n	80236d6 <__cvt+0x42>
 80236ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80236ce:	d100      	bne.n	80236d2 <__cvt+0x3e>
 80236d0:	3401      	adds	r4, #1
 80236d2:	2102      	movs	r1, #2
 80236d4:	e000      	b.n	80236d8 <__cvt+0x44>
 80236d6:	2103      	movs	r1, #3
 80236d8:	ab03      	add	r3, sp, #12
 80236da:	9301      	str	r3, [sp, #4]
 80236dc:	ab02      	add	r3, sp, #8
 80236de:	9300      	str	r3, [sp, #0]
 80236e0:	ec47 6b10 	vmov	d0, r6, r7
 80236e4:	4653      	mov	r3, sl
 80236e6:	4622      	mov	r2, r4
 80236e8:	f001 f9b2 	bl	8024a50 <_dtoa_r>
 80236ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80236f0:	4605      	mov	r5, r0
 80236f2:	d119      	bne.n	8023728 <__cvt+0x94>
 80236f4:	f019 0f01 	tst.w	r9, #1
 80236f8:	d00e      	beq.n	8023718 <__cvt+0x84>
 80236fa:	eb00 0904 	add.w	r9, r0, r4
 80236fe:	2200      	movs	r2, #0
 8023700:	2300      	movs	r3, #0
 8023702:	4630      	mov	r0, r6
 8023704:	4639      	mov	r1, r7
 8023706:	f7e5 f927 	bl	8008958 <__aeabi_dcmpeq>
 802370a:	b108      	cbz	r0, 8023710 <__cvt+0x7c>
 802370c:	f8cd 900c 	str.w	r9, [sp, #12]
 8023710:	2230      	movs	r2, #48	@ 0x30
 8023712:	9b03      	ldr	r3, [sp, #12]
 8023714:	454b      	cmp	r3, r9
 8023716:	d31e      	bcc.n	8023756 <__cvt+0xc2>
 8023718:	9b03      	ldr	r3, [sp, #12]
 802371a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802371c:	1b5b      	subs	r3, r3, r5
 802371e:	4628      	mov	r0, r5
 8023720:	6013      	str	r3, [r2, #0]
 8023722:	b004      	add	sp, #16
 8023724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802372c:	eb00 0904 	add.w	r9, r0, r4
 8023730:	d1e5      	bne.n	80236fe <__cvt+0x6a>
 8023732:	7803      	ldrb	r3, [r0, #0]
 8023734:	2b30      	cmp	r3, #48	@ 0x30
 8023736:	d10a      	bne.n	802374e <__cvt+0xba>
 8023738:	2200      	movs	r2, #0
 802373a:	2300      	movs	r3, #0
 802373c:	4630      	mov	r0, r6
 802373e:	4639      	mov	r1, r7
 8023740:	f7e5 f90a 	bl	8008958 <__aeabi_dcmpeq>
 8023744:	b918      	cbnz	r0, 802374e <__cvt+0xba>
 8023746:	f1c4 0401 	rsb	r4, r4, #1
 802374a:	f8ca 4000 	str.w	r4, [sl]
 802374e:	f8da 3000 	ldr.w	r3, [sl]
 8023752:	4499      	add	r9, r3
 8023754:	e7d3      	b.n	80236fe <__cvt+0x6a>
 8023756:	1c59      	adds	r1, r3, #1
 8023758:	9103      	str	r1, [sp, #12]
 802375a:	701a      	strb	r2, [r3, #0]
 802375c:	e7d9      	b.n	8023712 <__cvt+0x7e>

0802375e <__exponent>:
 802375e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023760:	2900      	cmp	r1, #0
 8023762:	bfba      	itte	lt
 8023764:	4249      	neglt	r1, r1
 8023766:	232d      	movlt	r3, #45	@ 0x2d
 8023768:	232b      	movge	r3, #43	@ 0x2b
 802376a:	2909      	cmp	r1, #9
 802376c:	7002      	strb	r2, [r0, #0]
 802376e:	7043      	strb	r3, [r0, #1]
 8023770:	dd29      	ble.n	80237c6 <__exponent+0x68>
 8023772:	f10d 0307 	add.w	r3, sp, #7
 8023776:	461d      	mov	r5, r3
 8023778:	270a      	movs	r7, #10
 802377a:	461a      	mov	r2, r3
 802377c:	fbb1 f6f7 	udiv	r6, r1, r7
 8023780:	fb07 1416 	mls	r4, r7, r6, r1
 8023784:	3430      	adds	r4, #48	@ 0x30
 8023786:	f802 4c01 	strb.w	r4, [r2, #-1]
 802378a:	460c      	mov	r4, r1
 802378c:	2c63      	cmp	r4, #99	@ 0x63
 802378e:	f103 33ff 	add.w	r3, r3, #4294967295
 8023792:	4631      	mov	r1, r6
 8023794:	dcf1      	bgt.n	802377a <__exponent+0x1c>
 8023796:	3130      	adds	r1, #48	@ 0x30
 8023798:	1e94      	subs	r4, r2, #2
 802379a:	f803 1c01 	strb.w	r1, [r3, #-1]
 802379e:	1c41      	adds	r1, r0, #1
 80237a0:	4623      	mov	r3, r4
 80237a2:	42ab      	cmp	r3, r5
 80237a4:	d30a      	bcc.n	80237bc <__exponent+0x5e>
 80237a6:	f10d 0309 	add.w	r3, sp, #9
 80237aa:	1a9b      	subs	r3, r3, r2
 80237ac:	42ac      	cmp	r4, r5
 80237ae:	bf88      	it	hi
 80237b0:	2300      	movhi	r3, #0
 80237b2:	3302      	adds	r3, #2
 80237b4:	4403      	add	r3, r0
 80237b6:	1a18      	subs	r0, r3, r0
 80237b8:	b003      	add	sp, #12
 80237ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80237bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80237c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80237c4:	e7ed      	b.n	80237a2 <__exponent+0x44>
 80237c6:	2330      	movs	r3, #48	@ 0x30
 80237c8:	3130      	adds	r1, #48	@ 0x30
 80237ca:	7083      	strb	r3, [r0, #2]
 80237cc:	70c1      	strb	r1, [r0, #3]
 80237ce:	1d03      	adds	r3, r0, #4
 80237d0:	e7f1      	b.n	80237b6 <__exponent+0x58>
	...

080237d4 <_printf_float>:
 80237d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237d8:	b08d      	sub	sp, #52	@ 0x34
 80237da:	460c      	mov	r4, r1
 80237dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80237e0:	4616      	mov	r6, r2
 80237e2:	461f      	mov	r7, r3
 80237e4:	4605      	mov	r5, r0
 80237e6:	f000 fff3 	bl	80247d0 <_localeconv_r>
 80237ea:	6803      	ldr	r3, [r0, #0]
 80237ec:	9304      	str	r3, [sp, #16]
 80237ee:	4618      	mov	r0, r3
 80237f0:	f7e4 fc86 	bl	8008100 <strlen>
 80237f4:	2300      	movs	r3, #0
 80237f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80237f8:	f8d8 3000 	ldr.w	r3, [r8]
 80237fc:	9005      	str	r0, [sp, #20]
 80237fe:	3307      	adds	r3, #7
 8023800:	f023 0307 	bic.w	r3, r3, #7
 8023804:	f103 0208 	add.w	r2, r3, #8
 8023808:	f894 a018 	ldrb.w	sl, [r4, #24]
 802380c:	f8d4 b000 	ldr.w	fp, [r4]
 8023810:	f8c8 2000 	str.w	r2, [r8]
 8023814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023818:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802381c:	9307      	str	r3, [sp, #28]
 802381e:	f8cd 8018 	str.w	r8, [sp, #24]
 8023822:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8023826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802382a:	4b9c      	ldr	r3, [pc, #624]	@ (8023a9c <_printf_float+0x2c8>)
 802382c:	f04f 32ff 	mov.w	r2, #4294967295
 8023830:	f7e5 f8c4 	bl	80089bc <__aeabi_dcmpun>
 8023834:	bb70      	cbnz	r0, 8023894 <_printf_float+0xc0>
 8023836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802383a:	4b98      	ldr	r3, [pc, #608]	@ (8023a9c <_printf_float+0x2c8>)
 802383c:	f04f 32ff 	mov.w	r2, #4294967295
 8023840:	f7e5 f89e 	bl	8008980 <__aeabi_dcmple>
 8023844:	bb30      	cbnz	r0, 8023894 <_printf_float+0xc0>
 8023846:	2200      	movs	r2, #0
 8023848:	2300      	movs	r3, #0
 802384a:	4640      	mov	r0, r8
 802384c:	4649      	mov	r1, r9
 802384e:	f7e5 f88d 	bl	800896c <__aeabi_dcmplt>
 8023852:	b110      	cbz	r0, 802385a <_printf_float+0x86>
 8023854:	232d      	movs	r3, #45	@ 0x2d
 8023856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802385a:	4a91      	ldr	r2, [pc, #580]	@ (8023aa0 <_printf_float+0x2cc>)
 802385c:	4b91      	ldr	r3, [pc, #580]	@ (8023aa4 <_printf_float+0x2d0>)
 802385e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8023862:	bf94      	ite	ls
 8023864:	4690      	movls	r8, r2
 8023866:	4698      	movhi	r8, r3
 8023868:	2303      	movs	r3, #3
 802386a:	6123      	str	r3, [r4, #16]
 802386c:	f02b 0304 	bic.w	r3, fp, #4
 8023870:	6023      	str	r3, [r4, #0]
 8023872:	f04f 0900 	mov.w	r9, #0
 8023876:	9700      	str	r7, [sp, #0]
 8023878:	4633      	mov	r3, r6
 802387a:	aa0b      	add	r2, sp, #44	@ 0x2c
 802387c:	4621      	mov	r1, r4
 802387e:	4628      	mov	r0, r5
 8023880:	f000 f9d2 	bl	8023c28 <_printf_common>
 8023884:	3001      	adds	r0, #1
 8023886:	f040 808d 	bne.w	80239a4 <_printf_float+0x1d0>
 802388a:	f04f 30ff 	mov.w	r0, #4294967295
 802388e:	b00d      	add	sp, #52	@ 0x34
 8023890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023894:	4642      	mov	r2, r8
 8023896:	464b      	mov	r3, r9
 8023898:	4640      	mov	r0, r8
 802389a:	4649      	mov	r1, r9
 802389c:	f7e5 f88e 	bl	80089bc <__aeabi_dcmpun>
 80238a0:	b140      	cbz	r0, 80238b4 <_printf_float+0xe0>
 80238a2:	464b      	mov	r3, r9
 80238a4:	2b00      	cmp	r3, #0
 80238a6:	bfbc      	itt	lt
 80238a8:	232d      	movlt	r3, #45	@ 0x2d
 80238aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80238ae:	4a7e      	ldr	r2, [pc, #504]	@ (8023aa8 <_printf_float+0x2d4>)
 80238b0:	4b7e      	ldr	r3, [pc, #504]	@ (8023aac <_printf_float+0x2d8>)
 80238b2:	e7d4      	b.n	802385e <_printf_float+0x8a>
 80238b4:	6863      	ldr	r3, [r4, #4]
 80238b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80238ba:	9206      	str	r2, [sp, #24]
 80238bc:	1c5a      	adds	r2, r3, #1
 80238be:	d13b      	bne.n	8023938 <_printf_float+0x164>
 80238c0:	2306      	movs	r3, #6
 80238c2:	6063      	str	r3, [r4, #4]
 80238c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80238c8:	2300      	movs	r3, #0
 80238ca:	6022      	str	r2, [r4, #0]
 80238cc:	9303      	str	r3, [sp, #12]
 80238ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80238d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80238d4:	ab09      	add	r3, sp, #36	@ 0x24
 80238d6:	9300      	str	r3, [sp, #0]
 80238d8:	6861      	ldr	r1, [r4, #4]
 80238da:	ec49 8b10 	vmov	d0, r8, r9
 80238de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80238e2:	4628      	mov	r0, r5
 80238e4:	f7ff fed6 	bl	8023694 <__cvt>
 80238e8:	9b06      	ldr	r3, [sp, #24]
 80238ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80238ec:	2b47      	cmp	r3, #71	@ 0x47
 80238ee:	4680      	mov	r8, r0
 80238f0:	d129      	bne.n	8023946 <_printf_float+0x172>
 80238f2:	1cc8      	adds	r0, r1, #3
 80238f4:	db02      	blt.n	80238fc <_printf_float+0x128>
 80238f6:	6863      	ldr	r3, [r4, #4]
 80238f8:	4299      	cmp	r1, r3
 80238fa:	dd41      	ble.n	8023980 <_printf_float+0x1ac>
 80238fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8023900:	fa5f fa8a 	uxtb.w	sl, sl
 8023904:	3901      	subs	r1, #1
 8023906:	4652      	mov	r2, sl
 8023908:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802390c:	9109      	str	r1, [sp, #36]	@ 0x24
 802390e:	f7ff ff26 	bl	802375e <__exponent>
 8023912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023914:	1813      	adds	r3, r2, r0
 8023916:	2a01      	cmp	r2, #1
 8023918:	4681      	mov	r9, r0
 802391a:	6123      	str	r3, [r4, #16]
 802391c:	dc02      	bgt.n	8023924 <_printf_float+0x150>
 802391e:	6822      	ldr	r2, [r4, #0]
 8023920:	07d2      	lsls	r2, r2, #31
 8023922:	d501      	bpl.n	8023928 <_printf_float+0x154>
 8023924:	3301      	adds	r3, #1
 8023926:	6123      	str	r3, [r4, #16]
 8023928:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802392c:	2b00      	cmp	r3, #0
 802392e:	d0a2      	beq.n	8023876 <_printf_float+0xa2>
 8023930:	232d      	movs	r3, #45	@ 0x2d
 8023932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023936:	e79e      	b.n	8023876 <_printf_float+0xa2>
 8023938:	9a06      	ldr	r2, [sp, #24]
 802393a:	2a47      	cmp	r2, #71	@ 0x47
 802393c:	d1c2      	bne.n	80238c4 <_printf_float+0xf0>
 802393e:	2b00      	cmp	r3, #0
 8023940:	d1c0      	bne.n	80238c4 <_printf_float+0xf0>
 8023942:	2301      	movs	r3, #1
 8023944:	e7bd      	b.n	80238c2 <_printf_float+0xee>
 8023946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802394a:	d9db      	bls.n	8023904 <_printf_float+0x130>
 802394c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8023950:	d118      	bne.n	8023984 <_printf_float+0x1b0>
 8023952:	2900      	cmp	r1, #0
 8023954:	6863      	ldr	r3, [r4, #4]
 8023956:	dd0b      	ble.n	8023970 <_printf_float+0x19c>
 8023958:	6121      	str	r1, [r4, #16]
 802395a:	b913      	cbnz	r3, 8023962 <_printf_float+0x18e>
 802395c:	6822      	ldr	r2, [r4, #0]
 802395e:	07d0      	lsls	r0, r2, #31
 8023960:	d502      	bpl.n	8023968 <_printf_float+0x194>
 8023962:	3301      	adds	r3, #1
 8023964:	440b      	add	r3, r1
 8023966:	6123      	str	r3, [r4, #16]
 8023968:	65a1      	str	r1, [r4, #88]	@ 0x58
 802396a:	f04f 0900 	mov.w	r9, #0
 802396e:	e7db      	b.n	8023928 <_printf_float+0x154>
 8023970:	b913      	cbnz	r3, 8023978 <_printf_float+0x1a4>
 8023972:	6822      	ldr	r2, [r4, #0]
 8023974:	07d2      	lsls	r2, r2, #31
 8023976:	d501      	bpl.n	802397c <_printf_float+0x1a8>
 8023978:	3302      	adds	r3, #2
 802397a:	e7f4      	b.n	8023966 <_printf_float+0x192>
 802397c:	2301      	movs	r3, #1
 802397e:	e7f2      	b.n	8023966 <_printf_float+0x192>
 8023980:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8023984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023986:	4299      	cmp	r1, r3
 8023988:	db05      	blt.n	8023996 <_printf_float+0x1c2>
 802398a:	6823      	ldr	r3, [r4, #0]
 802398c:	6121      	str	r1, [r4, #16]
 802398e:	07d8      	lsls	r0, r3, #31
 8023990:	d5ea      	bpl.n	8023968 <_printf_float+0x194>
 8023992:	1c4b      	adds	r3, r1, #1
 8023994:	e7e7      	b.n	8023966 <_printf_float+0x192>
 8023996:	2900      	cmp	r1, #0
 8023998:	bfd4      	ite	le
 802399a:	f1c1 0202 	rsble	r2, r1, #2
 802399e:	2201      	movgt	r2, #1
 80239a0:	4413      	add	r3, r2
 80239a2:	e7e0      	b.n	8023966 <_printf_float+0x192>
 80239a4:	6823      	ldr	r3, [r4, #0]
 80239a6:	055a      	lsls	r2, r3, #21
 80239a8:	d407      	bmi.n	80239ba <_printf_float+0x1e6>
 80239aa:	6923      	ldr	r3, [r4, #16]
 80239ac:	4642      	mov	r2, r8
 80239ae:	4631      	mov	r1, r6
 80239b0:	4628      	mov	r0, r5
 80239b2:	47b8      	blx	r7
 80239b4:	3001      	adds	r0, #1
 80239b6:	d12b      	bne.n	8023a10 <_printf_float+0x23c>
 80239b8:	e767      	b.n	802388a <_printf_float+0xb6>
 80239ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80239be:	f240 80dd 	bls.w	8023b7c <_printf_float+0x3a8>
 80239c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80239c6:	2200      	movs	r2, #0
 80239c8:	2300      	movs	r3, #0
 80239ca:	f7e4 ffc5 	bl	8008958 <__aeabi_dcmpeq>
 80239ce:	2800      	cmp	r0, #0
 80239d0:	d033      	beq.n	8023a3a <_printf_float+0x266>
 80239d2:	4a37      	ldr	r2, [pc, #220]	@ (8023ab0 <_printf_float+0x2dc>)
 80239d4:	2301      	movs	r3, #1
 80239d6:	4631      	mov	r1, r6
 80239d8:	4628      	mov	r0, r5
 80239da:	47b8      	blx	r7
 80239dc:	3001      	adds	r0, #1
 80239de:	f43f af54 	beq.w	802388a <_printf_float+0xb6>
 80239e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80239e6:	4543      	cmp	r3, r8
 80239e8:	db02      	blt.n	80239f0 <_printf_float+0x21c>
 80239ea:	6823      	ldr	r3, [r4, #0]
 80239ec:	07d8      	lsls	r0, r3, #31
 80239ee:	d50f      	bpl.n	8023a10 <_printf_float+0x23c>
 80239f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80239f4:	4631      	mov	r1, r6
 80239f6:	4628      	mov	r0, r5
 80239f8:	47b8      	blx	r7
 80239fa:	3001      	adds	r0, #1
 80239fc:	f43f af45 	beq.w	802388a <_printf_float+0xb6>
 8023a00:	f04f 0900 	mov.w	r9, #0
 8023a04:	f108 38ff 	add.w	r8, r8, #4294967295
 8023a08:	f104 0a1a 	add.w	sl, r4, #26
 8023a0c:	45c8      	cmp	r8, r9
 8023a0e:	dc09      	bgt.n	8023a24 <_printf_float+0x250>
 8023a10:	6823      	ldr	r3, [r4, #0]
 8023a12:	079b      	lsls	r3, r3, #30
 8023a14:	f100 8103 	bmi.w	8023c1e <_printf_float+0x44a>
 8023a18:	68e0      	ldr	r0, [r4, #12]
 8023a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023a1c:	4298      	cmp	r0, r3
 8023a1e:	bfb8      	it	lt
 8023a20:	4618      	movlt	r0, r3
 8023a22:	e734      	b.n	802388e <_printf_float+0xba>
 8023a24:	2301      	movs	r3, #1
 8023a26:	4652      	mov	r2, sl
 8023a28:	4631      	mov	r1, r6
 8023a2a:	4628      	mov	r0, r5
 8023a2c:	47b8      	blx	r7
 8023a2e:	3001      	adds	r0, #1
 8023a30:	f43f af2b 	beq.w	802388a <_printf_float+0xb6>
 8023a34:	f109 0901 	add.w	r9, r9, #1
 8023a38:	e7e8      	b.n	8023a0c <_printf_float+0x238>
 8023a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a3c:	2b00      	cmp	r3, #0
 8023a3e:	dc39      	bgt.n	8023ab4 <_printf_float+0x2e0>
 8023a40:	4a1b      	ldr	r2, [pc, #108]	@ (8023ab0 <_printf_float+0x2dc>)
 8023a42:	2301      	movs	r3, #1
 8023a44:	4631      	mov	r1, r6
 8023a46:	4628      	mov	r0, r5
 8023a48:	47b8      	blx	r7
 8023a4a:	3001      	adds	r0, #1
 8023a4c:	f43f af1d 	beq.w	802388a <_printf_float+0xb6>
 8023a50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8023a54:	ea59 0303 	orrs.w	r3, r9, r3
 8023a58:	d102      	bne.n	8023a60 <_printf_float+0x28c>
 8023a5a:	6823      	ldr	r3, [r4, #0]
 8023a5c:	07d9      	lsls	r1, r3, #31
 8023a5e:	d5d7      	bpl.n	8023a10 <_printf_float+0x23c>
 8023a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023a64:	4631      	mov	r1, r6
 8023a66:	4628      	mov	r0, r5
 8023a68:	47b8      	blx	r7
 8023a6a:	3001      	adds	r0, #1
 8023a6c:	f43f af0d 	beq.w	802388a <_printf_float+0xb6>
 8023a70:	f04f 0a00 	mov.w	sl, #0
 8023a74:	f104 0b1a 	add.w	fp, r4, #26
 8023a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a7a:	425b      	negs	r3, r3
 8023a7c:	4553      	cmp	r3, sl
 8023a7e:	dc01      	bgt.n	8023a84 <_printf_float+0x2b0>
 8023a80:	464b      	mov	r3, r9
 8023a82:	e793      	b.n	80239ac <_printf_float+0x1d8>
 8023a84:	2301      	movs	r3, #1
 8023a86:	465a      	mov	r2, fp
 8023a88:	4631      	mov	r1, r6
 8023a8a:	4628      	mov	r0, r5
 8023a8c:	47b8      	blx	r7
 8023a8e:	3001      	adds	r0, #1
 8023a90:	f43f aefb 	beq.w	802388a <_printf_float+0xb6>
 8023a94:	f10a 0a01 	add.w	sl, sl, #1
 8023a98:	e7ee      	b.n	8023a78 <_printf_float+0x2a4>
 8023a9a:	bf00      	nop
 8023a9c:	7fefffff 	.word	0x7fefffff
 8023aa0:	08030d71 	.word	0x08030d71
 8023aa4:	08030d75 	.word	0x08030d75
 8023aa8:	08030d79 	.word	0x08030d79
 8023aac:	08030d7d 	.word	0x08030d7d
 8023ab0:	08030d81 	.word	0x08030d81
 8023ab4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023ab6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8023aba:	4553      	cmp	r3, sl
 8023abc:	bfa8      	it	ge
 8023abe:	4653      	movge	r3, sl
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	4699      	mov	r9, r3
 8023ac4:	dc36      	bgt.n	8023b34 <_printf_float+0x360>
 8023ac6:	f04f 0b00 	mov.w	fp, #0
 8023aca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023ace:	f104 021a 	add.w	r2, r4, #26
 8023ad2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023ad4:	9306      	str	r3, [sp, #24]
 8023ad6:	eba3 0309 	sub.w	r3, r3, r9
 8023ada:	455b      	cmp	r3, fp
 8023adc:	dc31      	bgt.n	8023b42 <_printf_float+0x36e>
 8023ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ae0:	459a      	cmp	sl, r3
 8023ae2:	dc3a      	bgt.n	8023b5a <_printf_float+0x386>
 8023ae4:	6823      	ldr	r3, [r4, #0]
 8023ae6:	07da      	lsls	r2, r3, #31
 8023ae8:	d437      	bmi.n	8023b5a <_printf_float+0x386>
 8023aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023aec:	ebaa 0903 	sub.w	r9, sl, r3
 8023af0:	9b06      	ldr	r3, [sp, #24]
 8023af2:	ebaa 0303 	sub.w	r3, sl, r3
 8023af6:	4599      	cmp	r9, r3
 8023af8:	bfa8      	it	ge
 8023afa:	4699      	movge	r9, r3
 8023afc:	f1b9 0f00 	cmp.w	r9, #0
 8023b00:	dc33      	bgt.n	8023b6a <_printf_float+0x396>
 8023b02:	f04f 0800 	mov.w	r8, #0
 8023b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023b0a:	f104 0b1a 	add.w	fp, r4, #26
 8023b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023b10:	ebaa 0303 	sub.w	r3, sl, r3
 8023b14:	eba3 0309 	sub.w	r3, r3, r9
 8023b18:	4543      	cmp	r3, r8
 8023b1a:	f77f af79 	ble.w	8023a10 <_printf_float+0x23c>
 8023b1e:	2301      	movs	r3, #1
 8023b20:	465a      	mov	r2, fp
 8023b22:	4631      	mov	r1, r6
 8023b24:	4628      	mov	r0, r5
 8023b26:	47b8      	blx	r7
 8023b28:	3001      	adds	r0, #1
 8023b2a:	f43f aeae 	beq.w	802388a <_printf_float+0xb6>
 8023b2e:	f108 0801 	add.w	r8, r8, #1
 8023b32:	e7ec      	b.n	8023b0e <_printf_float+0x33a>
 8023b34:	4642      	mov	r2, r8
 8023b36:	4631      	mov	r1, r6
 8023b38:	4628      	mov	r0, r5
 8023b3a:	47b8      	blx	r7
 8023b3c:	3001      	adds	r0, #1
 8023b3e:	d1c2      	bne.n	8023ac6 <_printf_float+0x2f2>
 8023b40:	e6a3      	b.n	802388a <_printf_float+0xb6>
 8023b42:	2301      	movs	r3, #1
 8023b44:	4631      	mov	r1, r6
 8023b46:	4628      	mov	r0, r5
 8023b48:	9206      	str	r2, [sp, #24]
 8023b4a:	47b8      	blx	r7
 8023b4c:	3001      	adds	r0, #1
 8023b4e:	f43f ae9c 	beq.w	802388a <_printf_float+0xb6>
 8023b52:	9a06      	ldr	r2, [sp, #24]
 8023b54:	f10b 0b01 	add.w	fp, fp, #1
 8023b58:	e7bb      	b.n	8023ad2 <_printf_float+0x2fe>
 8023b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023b5e:	4631      	mov	r1, r6
 8023b60:	4628      	mov	r0, r5
 8023b62:	47b8      	blx	r7
 8023b64:	3001      	adds	r0, #1
 8023b66:	d1c0      	bne.n	8023aea <_printf_float+0x316>
 8023b68:	e68f      	b.n	802388a <_printf_float+0xb6>
 8023b6a:	9a06      	ldr	r2, [sp, #24]
 8023b6c:	464b      	mov	r3, r9
 8023b6e:	4442      	add	r2, r8
 8023b70:	4631      	mov	r1, r6
 8023b72:	4628      	mov	r0, r5
 8023b74:	47b8      	blx	r7
 8023b76:	3001      	adds	r0, #1
 8023b78:	d1c3      	bne.n	8023b02 <_printf_float+0x32e>
 8023b7a:	e686      	b.n	802388a <_printf_float+0xb6>
 8023b7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8023b80:	f1ba 0f01 	cmp.w	sl, #1
 8023b84:	dc01      	bgt.n	8023b8a <_printf_float+0x3b6>
 8023b86:	07db      	lsls	r3, r3, #31
 8023b88:	d536      	bpl.n	8023bf8 <_printf_float+0x424>
 8023b8a:	2301      	movs	r3, #1
 8023b8c:	4642      	mov	r2, r8
 8023b8e:	4631      	mov	r1, r6
 8023b90:	4628      	mov	r0, r5
 8023b92:	47b8      	blx	r7
 8023b94:	3001      	adds	r0, #1
 8023b96:	f43f ae78 	beq.w	802388a <_printf_float+0xb6>
 8023b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023b9e:	4631      	mov	r1, r6
 8023ba0:	4628      	mov	r0, r5
 8023ba2:	47b8      	blx	r7
 8023ba4:	3001      	adds	r0, #1
 8023ba6:	f43f ae70 	beq.w	802388a <_printf_float+0xb6>
 8023baa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8023bae:	2200      	movs	r2, #0
 8023bb0:	2300      	movs	r3, #0
 8023bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023bb6:	f7e4 fecf 	bl	8008958 <__aeabi_dcmpeq>
 8023bba:	b9c0      	cbnz	r0, 8023bee <_printf_float+0x41a>
 8023bbc:	4653      	mov	r3, sl
 8023bbe:	f108 0201 	add.w	r2, r8, #1
 8023bc2:	4631      	mov	r1, r6
 8023bc4:	4628      	mov	r0, r5
 8023bc6:	47b8      	blx	r7
 8023bc8:	3001      	adds	r0, #1
 8023bca:	d10c      	bne.n	8023be6 <_printf_float+0x412>
 8023bcc:	e65d      	b.n	802388a <_printf_float+0xb6>
 8023bce:	2301      	movs	r3, #1
 8023bd0:	465a      	mov	r2, fp
 8023bd2:	4631      	mov	r1, r6
 8023bd4:	4628      	mov	r0, r5
 8023bd6:	47b8      	blx	r7
 8023bd8:	3001      	adds	r0, #1
 8023bda:	f43f ae56 	beq.w	802388a <_printf_float+0xb6>
 8023bde:	f108 0801 	add.w	r8, r8, #1
 8023be2:	45d0      	cmp	r8, sl
 8023be4:	dbf3      	blt.n	8023bce <_printf_float+0x3fa>
 8023be6:	464b      	mov	r3, r9
 8023be8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8023bec:	e6df      	b.n	80239ae <_printf_float+0x1da>
 8023bee:	f04f 0800 	mov.w	r8, #0
 8023bf2:	f104 0b1a 	add.w	fp, r4, #26
 8023bf6:	e7f4      	b.n	8023be2 <_printf_float+0x40e>
 8023bf8:	2301      	movs	r3, #1
 8023bfa:	4642      	mov	r2, r8
 8023bfc:	e7e1      	b.n	8023bc2 <_printf_float+0x3ee>
 8023bfe:	2301      	movs	r3, #1
 8023c00:	464a      	mov	r2, r9
 8023c02:	4631      	mov	r1, r6
 8023c04:	4628      	mov	r0, r5
 8023c06:	47b8      	blx	r7
 8023c08:	3001      	adds	r0, #1
 8023c0a:	f43f ae3e 	beq.w	802388a <_printf_float+0xb6>
 8023c0e:	f108 0801 	add.w	r8, r8, #1
 8023c12:	68e3      	ldr	r3, [r4, #12]
 8023c14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023c16:	1a5b      	subs	r3, r3, r1
 8023c18:	4543      	cmp	r3, r8
 8023c1a:	dcf0      	bgt.n	8023bfe <_printf_float+0x42a>
 8023c1c:	e6fc      	b.n	8023a18 <_printf_float+0x244>
 8023c1e:	f04f 0800 	mov.w	r8, #0
 8023c22:	f104 0919 	add.w	r9, r4, #25
 8023c26:	e7f4      	b.n	8023c12 <_printf_float+0x43e>

08023c28 <_printf_common>:
 8023c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023c2c:	4616      	mov	r6, r2
 8023c2e:	4698      	mov	r8, r3
 8023c30:	688a      	ldr	r2, [r1, #8]
 8023c32:	690b      	ldr	r3, [r1, #16]
 8023c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023c38:	4293      	cmp	r3, r2
 8023c3a:	bfb8      	it	lt
 8023c3c:	4613      	movlt	r3, r2
 8023c3e:	6033      	str	r3, [r6, #0]
 8023c40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023c44:	4607      	mov	r7, r0
 8023c46:	460c      	mov	r4, r1
 8023c48:	b10a      	cbz	r2, 8023c4e <_printf_common+0x26>
 8023c4a:	3301      	adds	r3, #1
 8023c4c:	6033      	str	r3, [r6, #0]
 8023c4e:	6823      	ldr	r3, [r4, #0]
 8023c50:	0699      	lsls	r1, r3, #26
 8023c52:	bf42      	ittt	mi
 8023c54:	6833      	ldrmi	r3, [r6, #0]
 8023c56:	3302      	addmi	r3, #2
 8023c58:	6033      	strmi	r3, [r6, #0]
 8023c5a:	6825      	ldr	r5, [r4, #0]
 8023c5c:	f015 0506 	ands.w	r5, r5, #6
 8023c60:	d106      	bne.n	8023c70 <_printf_common+0x48>
 8023c62:	f104 0a19 	add.w	sl, r4, #25
 8023c66:	68e3      	ldr	r3, [r4, #12]
 8023c68:	6832      	ldr	r2, [r6, #0]
 8023c6a:	1a9b      	subs	r3, r3, r2
 8023c6c:	42ab      	cmp	r3, r5
 8023c6e:	dc26      	bgt.n	8023cbe <_printf_common+0x96>
 8023c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023c74:	6822      	ldr	r2, [r4, #0]
 8023c76:	3b00      	subs	r3, #0
 8023c78:	bf18      	it	ne
 8023c7a:	2301      	movne	r3, #1
 8023c7c:	0692      	lsls	r2, r2, #26
 8023c7e:	d42b      	bmi.n	8023cd8 <_printf_common+0xb0>
 8023c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023c84:	4641      	mov	r1, r8
 8023c86:	4638      	mov	r0, r7
 8023c88:	47c8      	blx	r9
 8023c8a:	3001      	adds	r0, #1
 8023c8c:	d01e      	beq.n	8023ccc <_printf_common+0xa4>
 8023c8e:	6823      	ldr	r3, [r4, #0]
 8023c90:	6922      	ldr	r2, [r4, #16]
 8023c92:	f003 0306 	and.w	r3, r3, #6
 8023c96:	2b04      	cmp	r3, #4
 8023c98:	bf02      	ittt	eq
 8023c9a:	68e5      	ldreq	r5, [r4, #12]
 8023c9c:	6833      	ldreq	r3, [r6, #0]
 8023c9e:	1aed      	subeq	r5, r5, r3
 8023ca0:	68a3      	ldr	r3, [r4, #8]
 8023ca2:	bf0c      	ite	eq
 8023ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023ca8:	2500      	movne	r5, #0
 8023caa:	4293      	cmp	r3, r2
 8023cac:	bfc4      	itt	gt
 8023cae:	1a9b      	subgt	r3, r3, r2
 8023cb0:	18ed      	addgt	r5, r5, r3
 8023cb2:	2600      	movs	r6, #0
 8023cb4:	341a      	adds	r4, #26
 8023cb6:	42b5      	cmp	r5, r6
 8023cb8:	d11a      	bne.n	8023cf0 <_printf_common+0xc8>
 8023cba:	2000      	movs	r0, #0
 8023cbc:	e008      	b.n	8023cd0 <_printf_common+0xa8>
 8023cbe:	2301      	movs	r3, #1
 8023cc0:	4652      	mov	r2, sl
 8023cc2:	4641      	mov	r1, r8
 8023cc4:	4638      	mov	r0, r7
 8023cc6:	47c8      	blx	r9
 8023cc8:	3001      	adds	r0, #1
 8023cca:	d103      	bne.n	8023cd4 <_printf_common+0xac>
 8023ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8023cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023cd4:	3501      	adds	r5, #1
 8023cd6:	e7c6      	b.n	8023c66 <_printf_common+0x3e>
 8023cd8:	18e1      	adds	r1, r4, r3
 8023cda:	1c5a      	adds	r2, r3, #1
 8023cdc:	2030      	movs	r0, #48	@ 0x30
 8023cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023ce2:	4422      	add	r2, r4
 8023ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023ce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023cec:	3302      	adds	r3, #2
 8023cee:	e7c7      	b.n	8023c80 <_printf_common+0x58>
 8023cf0:	2301      	movs	r3, #1
 8023cf2:	4622      	mov	r2, r4
 8023cf4:	4641      	mov	r1, r8
 8023cf6:	4638      	mov	r0, r7
 8023cf8:	47c8      	blx	r9
 8023cfa:	3001      	adds	r0, #1
 8023cfc:	d0e6      	beq.n	8023ccc <_printf_common+0xa4>
 8023cfe:	3601      	adds	r6, #1
 8023d00:	e7d9      	b.n	8023cb6 <_printf_common+0x8e>
	...

08023d04 <_printf_i>:
 8023d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023d08:	7e0f      	ldrb	r7, [r1, #24]
 8023d0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023d0c:	2f78      	cmp	r7, #120	@ 0x78
 8023d0e:	4691      	mov	r9, r2
 8023d10:	4680      	mov	r8, r0
 8023d12:	460c      	mov	r4, r1
 8023d14:	469a      	mov	sl, r3
 8023d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023d1a:	d807      	bhi.n	8023d2c <_printf_i+0x28>
 8023d1c:	2f62      	cmp	r7, #98	@ 0x62
 8023d1e:	d80a      	bhi.n	8023d36 <_printf_i+0x32>
 8023d20:	2f00      	cmp	r7, #0
 8023d22:	f000 80d2 	beq.w	8023eca <_printf_i+0x1c6>
 8023d26:	2f58      	cmp	r7, #88	@ 0x58
 8023d28:	f000 80b9 	beq.w	8023e9e <_printf_i+0x19a>
 8023d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023d34:	e03a      	b.n	8023dac <_printf_i+0xa8>
 8023d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023d3a:	2b15      	cmp	r3, #21
 8023d3c:	d8f6      	bhi.n	8023d2c <_printf_i+0x28>
 8023d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8023d44 <_printf_i+0x40>)
 8023d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023d44:	08023d9d 	.word	0x08023d9d
 8023d48:	08023db1 	.word	0x08023db1
 8023d4c:	08023d2d 	.word	0x08023d2d
 8023d50:	08023d2d 	.word	0x08023d2d
 8023d54:	08023d2d 	.word	0x08023d2d
 8023d58:	08023d2d 	.word	0x08023d2d
 8023d5c:	08023db1 	.word	0x08023db1
 8023d60:	08023d2d 	.word	0x08023d2d
 8023d64:	08023d2d 	.word	0x08023d2d
 8023d68:	08023d2d 	.word	0x08023d2d
 8023d6c:	08023d2d 	.word	0x08023d2d
 8023d70:	08023eb1 	.word	0x08023eb1
 8023d74:	08023ddb 	.word	0x08023ddb
 8023d78:	08023e6b 	.word	0x08023e6b
 8023d7c:	08023d2d 	.word	0x08023d2d
 8023d80:	08023d2d 	.word	0x08023d2d
 8023d84:	08023ed3 	.word	0x08023ed3
 8023d88:	08023d2d 	.word	0x08023d2d
 8023d8c:	08023ddb 	.word	0x08023ddb
 8023d90:	08023d2d 	.word	0x08023d2d
 8023d94:	08023d2d 	.word	0x08023d2d
 8023d98:	08023e73 	.word	0x08023e73
 8023d9c:	6833      	ldr	r3, [r6, #0]
 8023d9e:	1d1a      	adds	r2, r3, #4
 8023da0:	681b      	ldr	r3, [r3, #0]
 8023da2:	6032      	str	r2, [r6, #0]
 8023da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023dac:	2301      	movs	r3, #1
 8023dae:	e09d      	b.n	8023eec <_printf_i+0x1e8>
 8023db0:	6833      	ldr	r3, [r6, #0]
 8023db2:	6820      	ldr	r0, [r4, #0]
 8023db4:	1d19      	adds	r1, r3, #4
 8023db6:	6031      	str	r1, [r6, #0]
 8023db8:	0606      	lsls	r6, r0, #24
 8023dba:	d501      	bpl.n	8023dc0 <_printf_i+0xbc>
 8023dbc:	681d      	ldr	r5, [r3, #0]
 8023dbe:	e003      	b.n	8023dc8 <_printf_i+0xc4>
 8023dc0:	0645      	lsls	r5, r0, #25
 8023dc2:	d5fb      	bpl.n	8023dbc <_printf_i+0xb8>
 8023dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023dc8:	2d00      	cmp	r5, #0
 8023dca:	da03      	bge.n	8023dd4 <_printf_i+0xd0>
 8023dcc:	232d      	movs	r3, #45	@ 0x2d
 8023dce:	426d      	negs	r5, r5
 8023dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023dd4:	4859      	ldr	r0, [pc, #356]	@ (8023f3c <_printf_i+0x238>)
 8023dd6:	230a      	movs	r3, #10
 8023dd8:	e011      	b.n	8023dfe <_printf_i+0xfa>
 8023dda:	6821      	ldr	r1, [r4, #0]
 8023ddc:	6833      	ldr	r3, [r6, #0]
 8023dde:	0608      	lsls	r0, r1, #24
 8023de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8023de4:	d402      	bmi.n	8023dec <_printf_i+0xe8>
 8023de6:	0649      	lsls	r1, r1, #25
 8023de8:	bf48      	it	mi
 8023dea:	b2ad      	uxthmi	r5, r5
 8023dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8023dee:	4853      	ldr	r0, [pc, #332]	@ (8023f3c <_printf_i+0x238>)
 8023df0:	6033      	str	r3, [r6, #0]
 8023df2:	bf14      	ite	ne
 8023df4:	230a      	movne	r3, #10
 8023df6:	2308      	moveq	r3, #8
 8023df8:	2100      	movs	r1, #0
 8023dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023dfe:	6866      	ldr	r6, [r4, #4]
 8023e00:	60a6      	str	r6, [r4, #8]
 8023e02:	2e00      	cmp	r6, #0
 8023e04:	bfa2      	ittt	ge
 8023e06:	6821      	ldrge	r1, [r4, #0]
 8023e08:	f021 0104 	bicge.w	r1, r1, #4
 8023e0c:	6021      	strge	r1, [r4, #0]
 8023e0e:	b90d      	cbnz	r5, 8023e14 <_printf_i+0x110>
 8023e10:	2e00      	cmp	r6, #0
 8023e12:	d04b      	beq.n	8023eac <_printf_i+0x1a8>
 8023e14:	4616      	mov	r6, r2
 8023e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8023e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8023e1e:	5dc7      	ldrb	r7, [r0, r7]
 8023e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023e24:	462f      	mov	r7, r5
 8023e26:	42bb      	cmp	r3, r7
 8023e28:	460d      	mov	r5, r1
 8023e2a:	d9f4      	bls.n	8023e16 <_printf_i+0x112>
 8023e2c:	2b08      	cmp	r3, #8
 8023e2e:	d10b      	bne.n	8023e48 <_printf_i+0x144>
 8023e30:	6823      	ldr	r3, [r4, #0]
 8023e32:	07df      	lsls	r7, r3, #31
 8023e34:	d508      	bpl.n	8023e48 <_printf_i+0x144>
 8023e36:	6923      	ldr	r3, [r4, #16]
 8023e38:	6861      	ldr	r1, [r4, #4]
 8023e3a:	4299      	cmp	r1, r3
 8023e3c:	bfde      	ittt	le
 8023e3e:	2330      	movle	r3, #48	@ 0x30
 8023e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023e48:	1b92      	subs	r2, r2, r6
 8023e4a:	6122      	str	r2, [r4, #16]
 8023e4c:	f8cd a000 	str.w	sl, [sp]
 8023e50:	464b      	mov	r3, r9
 8023e52:	aa03      	add	r2, sp, #12
 8023e54:	4621      	mov	r1, r4
 8023e56:	4640      	mov	r0, r8
 8023e58:	f7ff fee6 	bl	8023c28 <_printf_common>
 8023e5c:	3001      	adds	r0, #1
 8023e5e:	d14a      	bne.n	8023ef6 <_printf_i+0x1f2>
 8023e60:	f04f 30ff 	mov.w	r0, #4294967295
 8023e64:	b004      	add	sp, #16
 8023e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023e6a:	6823      	ldr	r3, [r4, #0]
 8023e6c:	f043 0320 	orr.w	r3, r3, #32
 8023e70:	6023      	str	r3, [r4, #0]
 8023e72:	4833      	ldr	r0, [pc, #204]	@ (8023f40 <_printf_i+0x23c>)
 8023e74:	2778      	movs	r7, #120	@ 0x78
 8023e76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023e7a:	6823      	ldr	r3, [r4, #0]
 8023e7c:	6831      	ldr	r1, [r6, #0]
 8023e7e:	061f      	lsls	r7, r3, #24
 8023e80:	f851 5b04 	ldr.w	r5, [r1], #4
 8023e84:	d402      	bmi.n	8023e8c <_printf_i+0x188>
 8023e86:	065f      	lsls	r7, r3, #25
 8023e88:	bf48      	it	mi
 8023e8a:	b2ad      	uxthmi	r5, r5
 8023e8c:	6031      	str	r1, [r6, #0]
 8023e8e:	07d9      	lsls	r1, r3, #31
 8023e90:	bf44      	itt	mi
 8023e92:	f043 0320 	orrmi.w	r3, r3, #32
 8023e96:	6023      	strmi	r3, [r4, #0]
 8023e98:	b11d      	cbz	r5, 8023ea2 <_printf_i+0x19e>
 8023e9a:	2310      	movs	r3, #16
 8023e9c:	e7ac      	b.n	8023df8 <_printf_i+0xf4>
 8023e9e:	4827      	ldr	r0, [pc, #156]	@ (8023f3c <_printf_i+0x238>)
 8023ea0:	e7e9      	b.n	8023e76 <_printf_i+0x172>
 8023ea2:	6823      	ldr	r3, [r4, #0]
 8023ea4:	f023 0320 	bic.w	r3, r3, #32
 8023ea8:	6023      	str	r3, [r4, #0]
 8023eaa:	e7f6      	b.n	8023e9a <_printf_i+0x196>
 8023eac:	4616      	mov	r6, r2
 8023eae:	e7bd      	b.n	8023e2c <_printf_i+0x128>
 8023eb0:	6833      	ldr	r3, [r6, #0]
 8023eb2:	6825      	ldr	r5, [r4, #0]
 8023eb4:	6961      	ldr	r1, [r4, #20]
 8023eb6:	1d18      	adds	r0, r3, #4
 8023eb8:	6030      	str	r0, [r6, #0]
 8023eba:	062e      	lsls	r6, r5, #24
 8023ebc:	681b      	ldr	r3, [r3, #0]
 8023ebe:	d501      	bpl.n	8023ec4 <_printf_i+0x1c0>
 8023ec0:	6019      	str	r1, [r3, #0]
 8023ec2:	e002      	b.n	8023eca <_printf_i+0x1c6>
 8023ec4:	0668      	lsls	r0, r5, #25
 8023ec6:	d5fb      	bpl.n	8023ec0 <_printf_i+0x1bc>
 8023ec8:	8019      	strh	r1, [r3, #0]
 8023eca:	2300      	movs	r3, #0
 8023ecc:	6123      	str	r3, [r4, #16]
 8023ece:	4616      	mov	r6, r2
 8023ed0:	e7bc      	b.n	8023e4c <_printf_i+0x148>
 8023ed2:	6833      	ldr	r3, [r6, #0]
 8023ed4:	1d1a      	adds	r2, r3, #4
 8023ed6:	6032      	str	r2, [r6, #0]
 8023ed8:	681e      	ldr	r6, [r3, #0]
 8023eda:	6862      	ldr	r2, [r4, #4]
 8023edc:	2100      	movs	r1, #0
 8023ede:	4630      	mov	r0, r6
 8023ee0:	f7e4 f8be 	bl	8008060 <memchr>
 8023ee4:	b108      	cbz	r0, 8023eea <_printf_i+0x1e6>
 8023ee6:	1b80      	subs	r0, r0, r6
 8023ee8:	6060      	str	r0, [r4, #4]
 8023eea:	6863      	ldr	r3, [r4, #4]
 8023eec:	6123      	str	r3, [r4, #16]
 8023eee:	2300      	movs	r3, #0
 8023ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023ef4:	e7aa      	b.n	8023e4c <_printf_i+0x148>
 8023ef6:	6923      	ldr	r3, [r4, #16]
 8023ef8:	4632      	mov	r2, r6
 8023efa:	4649      	mov	r1, r9
 8023efc:	4640      	mov	r0, r8
 8023efe:	47d0      	blx	sl
 8023f00:	3001      	adds	r0, #1
 8023f02:	d0ad      	beq.n	8023e60 <_printf_i+0x15c>
 8023f04:	6823      	ldr	r3, [r4, #0]
 8023f06:	079b      	lsls	r3, r3, #30
 8023f08:	d413      	bmi.n	8023f32 <_printf_i+0x22e>
 8023f0a:	68e0      	ldr	r0, [r4, #12]
 8023f0c:	9b03      	ldr	r3, [sp, #12]
 8023f0e:	4298      	cmp	r0, r3
 8023f10:	bfb8      	it	lt
 8023f12:	4618      	movlt	r0, r3
 8023f14:	e7a6      	b.n	8023e64 <_printf_i+0x160>
 8023f16:	2301      	movs	r3, #1
 8023f18:	4632      	mov	r2, r6
 8023f1a:	4649      	mov	r1, r9
 8023f1c:	4640      	mov	r0, r8
 8023f1e:	47d0      	blx	sl
 8023f20:	3001      	adds	r0, #1
 8023f22:	d09d      	beq.n	8023e60 <_printf_i+0x15c>
 8023f24:	3501      	adds	r5, #1
 8023f26:	68e3      	ldr	r3, [r4, #12]
 8023f28:	9903      	ldr	r1, [sp, #12]
 8023f2a:	1a5b      	subs	r3, r3, r1
 8023f2c:	42ab      	cmp	r3, r5
 8023f2e:	dcf2      	bgt.n	8023f16 <_printf_i+0x212>
 8023f30:	e7eb      	b.n	8023f0a <_printf_i+0x206>
 8023f32:	2500      	movs	r5, #0
 8023f34:	f104 0619 	add.w	r6, r4, #25
 8023f38:	e7f5      	b.n	8023f26 <_printf_i+0x222>
 8023f3a:	bf00      	nop
 8023f3c:	08030d83 	.word	0x08030d83
 8023f40:	08030d94 	.word	0x08030d94

08023f44 <_scanf_float>:
 8023f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f48:	b087      	sub	sp, #28
 8023f4a:	4617      	mov	r7, r2
 8023f4c:	9303      	str	r3, [sp, #12]
 8023f4e:	688b      	ldr	r3, [r1, #8]
 8023f50:	1e5a      	subs	r2, r3, #1
 8023f52:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8023f56:	bf81      	itttt	hi
 8023f58:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8023f5c:	eb03 0b05 	addhi.w	fp, r3, r5
 8023f60:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8023f64:	608b      	strhi	r3, [r1, #8]
 8023f66:	680b      	ldr	r3, [r1, #0]
 8023f68:	460a      	mov	r2, r1
 8023f6a:	f04f 0500 	mov.w	r5, #0
 8023f6e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8023f72:	f842 3b1c 	str.w	r3, [r2], #28
 8023f76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8023f7a:	4680      	mov	r8, r0
 8023f7c:	460c      	mov	r4, r1
 8023f7e:	bf98      	it	ls
 8023f80:	f04f 0b00 	movls.w	fp, #0
 8023f84:	9201      	str	r2, [sp, #4]
 8023f86:	4616      	mov	r6, r2
 8023f88:	46aa      	mov	sl, r5
 8023f8a:	46a9      	mov	r9, r5
 8023f8c:	9502      	str	r5, [sp, #8]
 8023f8e:	68a2      	ldr	r2, [r4, #8]
 8023f90:	b152      	cbz	r2, 8023fa8 <_scanf_float+0x64>
 8023f92:	683b      	ldr	r3, [r7, #0]
 8023f94:	781b      	ldrb	r3, [r3, #0]
 8023f96:	2b4e      	cmp	r3, #78	@ 0x4e
 8023f98:	d864      	bhi.n	8024064 <_scanf_float+0x120>
 8023f9a:	2b40      	cmp	r3, #64	@ 0x40
 8023f9c:	d83c      	bhi.n	8024018 <_scanf_float+0xd4>
 8023f9e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8023fa2:	b2c8      	uxtb	r0, r1
 8023fa4:	280e      	cmp	r0, #14
 8023fa6:	d93a      	bls.n	802401e <_scanf_float+0xda>
 8023fa8:	f1b9 0f00 	cmp.w	r9, #0
 8023fac:	d003      	beq.n	8023fb6 <_scanf_float+0x72>
 8023fae:	6823      	ldr	r3, [r4, #0]
 8023fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8023fb4:	6023      	str	r3, [r4, #0]
 8023fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023fba:	f1ba 0f01 	cmp.w	sl, #1
 8023fbe:	f200 8117 	bhi.w	80241f0 <_scanf_float+0x2ac>
 8023fc2:	9b01      	ldr	r3, [sp, #4]
 8023fc4:	429e      	cmp	r6, r3
 8023fc6:	f200 8108 	bhi.w	80241da <_scanf_float+0x296>
 8023fca:	2001      	movs	r0, #1
 8023fcc:	b007      	add	sp, #28
 8023fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fd2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8023fd6:	2a0d      	cmp	r2, #13
 8023fd8:	d8e6      	bhi.n	8023fa8 <_scanf_float+0x64>
 8023fda:	a101      	add	r1, pc, #4	@ (adr r1, 8023fe0 <_scanf_float+0x9c>)
 8023fdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8023fe0:	08024127 	.word	0x08024127
 8023fe4:	08023fa9 	.word	0x08023fa9
 8023fe8:	08023fa9 	.word	0x08023fa9
 8023fec:	08023fa9 	.word	0x08023fa9
 8023ff0:	08024187 	.word	0x08024187
 8023ff4:	0802415f 	.word	0x0802415f
 8023ff8:	08023fa9 	.word	0x08023fa9
 8023ffc:	08023fa9 	.word	0x08023fa9
 8024000:	08024135 	.word	0x08024135
 8024004:	08023fa9 	.word	0x08023fa9
 8024008:	08023fa9 	.word	0x08023fa9
 802400c:	08023fa9 	.word	0x08023fa9
 8024010:	08023fa9 	.word	0x08023fa9
 8024014:	080240ed 	.word	0x080240ed
 8024018:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 802401c:	e7db      	b.n	8023fd6 <_scanf_float+0x92>
 802401e:	290e      	cmp	r1, #14
 8024020:	d8c2      	bhi.n	8023fa8 <_scanf_float+0x64>
 8024022:	a001      	add	r0, pc, #4	@ (adr r0, 8024028 <_scanf_float+0xe4>)
 8024024:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8024028:	080240dd 	.word	0x080240dd
 802402c:	08023fa9 	.word	0x08023fa9
 8024030:	080240dd 	.word	0x080240dd
 8024034:	08024173 	.word	0x08024173
 8024038:	08023fa9 	.word	0x08023fa9
 802403c:	08024085 	.word	0x08024085
 8024040:	080240c3 	.word	0x080240c3
 8024044:	080240c3 	.word	0x080240c3
 8024048:	080240c3 	.word	0x080240c3
 802404c:	080240c3 	.word	0x080240c3
 8024050:	080240c3 	.word	0x080240c3
 8024054:	080240c3 	.word	0x080240c3
 8024058:	080240c3 	.word	0x080240c3
 802405c:	080240c3 	.word	0x080240c3
 8024060:	080240c3 	.word	0x080240c3
 8024064:	2b6e      	cmp	r3, #110	@ 0x6e
 8024066:	d809      	bhi.n	802407c <_scanf_float+0x138>
 8024068:	2b60      	cmp	r3, #96	@ 0x60
 802406a:	d8b2      	bhi.n	8023fd2 <_scanf_float+0x8e>
 802406c:	2b54      	cmp	r3, #84	@ 0x54
 802406e:	d07b      	beq.n	8024168 <_scanf_float+0x224>
 8024070:	2b59      	cmp	r3, #89	@ 0x59
 8024072:	d199      	bne.n	8023fa8 <_scanf_float+0x64>
 8024074:	2d07      	cmp	r5, #7
 8024076:	d197      	bne.n	8023fa8 <_scanf_float+0x64>
 8024078:	2508      	movs	r5, #8
 802407a:	e02c      	b.n	80240d6 <_scanf_float+0x192>
 802407c:	2b74      	cmp	r3, #116	@ 0x74
 802407e:	d073      	beq.n	8024168 <_scanf_float+0x224>
 8024080:	2b79      	cmp	r3, #121	@ 0x79
 8024082:	e7f6      	b.n	8024072 <_scanf_float+0x12e>
 8024084:	6821      	ldr	r1, [r4, #0]
 8024086:	05c8      	lsls	r0, r1, #23
 8024088:	d51b      	bpl.n	80240c2 <_scanf_float+0x17e>
 802408a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 802408e:	6021      	str	r1, [r4, #0]
 8024090:	f109 0901 	add.w	r9, r9, #1
 8024094:	f1bb 0f00 	cmp.w	fp, #0
 8024098:	d003      	beq.n	80240a2 <_scanf_float+0x15e>
 802409a:	3201      	adds	r2, #1
 802409c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80240a0:	60a2      	str	r2, [r4, #8]
 80240a2:	68a3      	ldr	r3, [r4, #8]
 80240a4:	3b01      	subs	r3, #1
 80240a6:	60a3      	str	r3, [r4, #8]
 80240a8:	6923      	ldr	r3, [r4, #16]
 80240aa:	3301      	adds	r3, #1
 80240ac:	6123      	str	r3, [r4, #16]
 80240ae:	687b      	ldr	r3, [r7, #4]
 80240b0:	3b01      	subs	r3, #1
 80240b2:	2b00      	cmp	r3, #0
 80240b4:	607b      	str	r3, [r7, #4]
 80240b6:	f340 8087 	ble.w	80241c8 <_scanf_float+0x284>
 80240ba:	683b      	ldr	r3, [r7, #0]
 80240bc:	3301      	adds	r3, #1
 80240be:	603b      	str	r3, [r7, #0]
 80240c0:	e765      	b.n	8023f8e <_scanf_float+0x4a>
 80240c2:	eb1a 0105 	adds.w	r1, sl, r5
 80240c6:	f47f af6f 	bne.w	8023fa8 <_scanf_float+0x64>
 80240ca:	6822      	ldr	r2, [r4, #0]
 80240cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80240d0:	6022      	str	r2, [r4, #0]
 80240d2:	460d      	mov	r5, r1
 80240d4:	468a      	mov	sl, r1
 80240d6:	f806 3b01 	strb.w	r3, [r6], #1
 80240da:	e7e2      	b.n	80240a2 <_scanf_float+0x15e>
 80240dc:	6822      	ldr	r2, [r4, #0]
 80240de:	0610      	lsls	r0, r2, #24
 80240e0:	f57f af62 	bpl.w	8023fa8 <_scanf_float+0x64>
 80240e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80240e8:	6022      	str	r2, [r4, #0]
 80240ea:	e7f4      	b.n	80240d6 <_scanf_float+0x192>
 80240ec:	f1ba 0f00 	cmp.w	sl, #0
 80240f0:	d10e      	bne.n	8024110 <_scanf_float+0x1cc>
 80240f2:	f1b9 0f00 	cmp.w	r9, #0
 80240f6:	d10e      	bne.n	8024116 <_scanf_float+0x1d2>
 80240f8:	6822      	ldr	r2, [r4, #0]
 80240fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80240fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024102:	d108      	bne.n	8024116 <_scanf_float+0x1d2>
 8024104:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024108:	6022      	str	r2, [r4, #0]
 802410a:	f04f 0a01 	mov.w	sl, #1
 802410e:	e7e2      	b.n	80240d6 <_scanf_float+0x192>
 8024110:	f1ba 0f02 	cmp.w	sl, #2
 8024114:	d055      	beq.n	80241c2 <_scanf_float+0x27e>
 8024116:	2d01      	cmp	r5, #1
 8024118:	d002      	beq.n	8024120 <_scanf_float+0x1dc>
 802411a:	2d04      	cmp	r5, #4
 802411c:	f47f af44 	bne.w	8023fa8 <_scanf_float+0x64>
 8024120:	3501      	adds	r5, #1
 8024122:	b2ed      	uxtb	r5, r5
 8024124:	e7d7      	b.n	80240d6 <_scanf_float+0x192>
 8024126:	f1ba 0f01 	cmp.w	sl, #1
 802412a:	f47f af3d 	bne.w	8023fa8 <_scanf_float+0x64>
 802412e:	f04f 0a02 	mov.w	sl, #2
 8024132:	e7d0      	b.n	80240d6 <_scanf_float+0x192>
 8024134:	b97d      	cbnz	r5, 8024156 <_scanf_float+0x212>
 8024136:	f1b9 0f00 	cmp.w	r9, #0
 802413a:	f47f af38 	bne.w	8023fae <_scanf_float+0x6a>
 802413e:	6822      	ldr	r2, [r4, #0]
 8024140:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8024144:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8024148:	f040 8108 	bne.w	802435c <_scanf_float+0x418>
 802414c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8024150:	6022      	str	r2, [r4, #0]
 8024152:	2501      	movs	r5, #1
 8024154:	e7bf      	b.n	80240d6 <_scanf_float+0x192>
 8024156:	2d03      	cmp	r5, #3
 8024158:	d0e2      	beq.n	8024120 <_scanf_float+0x1dc>
 802415a:	2d05      	cmp	r5, #5
 802415c:	e7de      	b.n	802411c <_scanf_float+0x1d8>
 802415e:	2d02      	cmp	r5, #2
 8024160:	f47f af22 	bne.w	8023fa8 <_scanf_float+0x64>
 8024164:	2503      	movs	r5, #3
 8024166:	e7b6      	b.n	80240d6 <_scanf_float+0x192>
 8024168:	2d06      	cmp	r5, #6
 802416a:	f47f af1d 	bne.w	8023fa8 <_scanf_float+0x64>
 802416e:	2507      	movs	r5, #7
 8024170:	e7b1      	b.n	80240d6 <_scanf_float+0x192>
 8024172:	6822      	ldr	r2, [r4, #0]
 8024174:	0591      	lsls	r1, r2, #22
 8024176:	f57f af17 	bpl.w	8023fa8 <_scanf_float+0x64>
 802417a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 802417e:	6022      	str	r2, [r4, #0]
 8024180:	f8cd 9008 	str.w	r9, [sp, #8]
 8024184:	e7a7      	b.n	80240d6 <_scanf_float+0x192>
 8024186:	6822      	ldr	r2, [r4, #0]
 8024188:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 802418c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8024190:	d006      	beq.n	80241a0 <_scanf_float+0x25c>
 8024192:	0550      	lsls	r0, r2, #21
 8024194:	f57f af08 	bpl.w	8023fa8 <_scanf_float+0x64>
 8024198:	f1b9 0f00 	cmp.w	r9, #0
 802419c:	f000 80de 	beq.w	802435c <_scanf_float+0x418>
 80241a0:	0591      	lsls	r1, r2, #22
 80241a2:	bf58      	it	pl
 80241a4:	9902      	ldrpl	r1, [sp, #8]
 80241a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80241aa:	bf58      	it	pl
 80241ac:	eba9 0101 	subpl.w	r1, r9, r1
 80241b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80241b4:	bf58      	it	pl
 80241b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80241ba:	6022      	str	r2, [r4, #0]
 80241bc:	f04f 0900 	mov.w	r9, #0
 80241c0:	e789      	b.n	80240d6 <_scanf_float+0x192>
 80241c2:	f04f 0a03 	mov.w	sl, #3
 80241c6:	e786      	b.n	80240d6 <_scanf_float+0x192>
 80241c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80241cc:	4639      	mov	r1, r7
 80241ce:	4640      	mov	r0, r8
 80241d0:	4798      	blx	r3
 80241d2:	2800      	cmp	r0, #0
 80241d4:	f43f aedb 	beq.w	8023f8e <_scanf_float+0x4a>
 80241d8:	e6e6      	b.n	8023fa8 <_scanf_float+0x64>
 80241da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80241de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80241e2:	463a      	mov	r2, r7
 80241e4:	4640      	mov	r0, r8
 80241e6:	4798      	blx	r3
 80241e8:	6923      	ldr	r3, [r4, #16]
 80241ea:	3b01      	subs	r3, #1
 80241ec:	6123      	str	r3, [r4, #16]
 80241ee:	e6e8      	b.n	8023fc2 <_scanf_float+0x7e>
 80241f0:	1e6b      	subs	r3, r5, #1
 80241f2:	2b06      	cmp	r3, #6
 80241f4:	d824      	bhi.n	8024240 <_scanf_float+0x2fc>
 80241f6:	2d02      	cmp	r5, #2
 80241f8:	d836      	bhi.n	8024268 <_scanf_float+0x324>
 80241fa:	9b01      	ldr	r3, [sp, #4]
 80241fc:	429e      	cmp	r6, r3
 80241fe:	f67f aee4 	bls.w	8023fca <_scanf_float+0x86>
 8024202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802420a:	463a      	mov	r2, r7
 802420c:	4640      	mov	r0, r8
 802420e:	4798      	blx	r3
 8024210:	6923      	ldr	r3, [r4, #16]
 8024212:	3b01      	subs	r3, #1
 8024214:	6123      	str	r3, [r4, #16]
 8024216:	e7f0      	b.n	80241fa <_scanf_float+0x2b6>
 8024218:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802421c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8024220:	463a      	mov	r2, r7
 8024222:	4640      	mov	r0, r8
 8024224:	4798      	blx	r3
 8024226:	6923      	ldr	r3, [r4, #16]
 8024228:	3b01      	subs	r3, #1
 802422a:	6123      	str	r3, [r4, #16]
 802422c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024230:	fa5f fa8a 	uxtb.w	sl, sl
 8024234:	f1ba 0f02 	cmp.w	sl, #2
 8024238:	d1ee      	bne.n	8024218 <_scanf_float+0x2d4>
 802423a:	3d03      	subs	r5, #3
 802423c:	b2ed      	uxtb	r5, r5
 802423e:	1b76      	subs	r6, r6, r5
 8024240:	6823      	ldr	r3, [r4, #0]
 8024242:	05da      	lsls	r2, r3, #23
 8024244:	d530      	bpl.n	80242a8 <_scanf_float+0x364>
 8024246:	055b      	lsls	r3, r3, #21
 8024248:	d511      	bpl.n	802426e <_scanf_float+0x32a>
 802424a:	9b01      	ldr	r3, [sp, #4]
 802424c:	429e      	cmp	r6, r3
 802424e:	f67f aebc 	bls.w	8023fca <_scanf_float+0x86>
 8024252:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024256:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802425a:	463a      	mov	r2, r7
 802425c:	4640      	mov	r0, r8
 802425e:	4798      	blx	r3
 8024260:	6923      	ldr	r3, [r4, #16]
 8024262:	3b01      	subs	r3, #1
 8024264:	6123      	str	r3, [r4, #16]
 8024266:	e7f0      	b.n	802424a <_scanf_float+0x306>
 8024268:	46aa      	mov	sl, r5
 802426a:	46b3      	mov	fp, r6
 802426c:	e7de      	b.n	802422c <_scanf_float+0x2e8>
 802426e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8024272:	6923      	ldr	r3, [r4, #16]
 8024274:	2965      	cmp	r1, #101	@ 0x65
 8024276:	f103 33ff 	add.w	r3, r3, #4294967295
 802427a:	f106 35ff 	add.w	r5, r6, #4294967295
 802427e:	6123      	str	r3, [r4, #16]
 8024280:	d00c      	beq.n	802429c <_scanf_float+0x358>
 8024282:	2945      	cmp	r1, #69	@ 0x45
 8024284:	d00a      	beq.n	802429c <_scanf_float+0x358>
 8024286:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802428a:	463a      	mov	r2, r7
 802428c:	4640      	mov	r0, r8
 802428e:	4798      	blx	r3
 8024290:	6923      	ldr	r3, [r4, #16]
 8024292:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8024296:	3b01      	subs	r3, #1
 8024298:	1eb5      	subs	r5, r6, #2
 802429a:	6123      	str	r3, [r4, #16]
 802429c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80242a0:	463a      	mov	r2, r7
 80242a2:	4640      	mov	r0, r8
 80242a4:	4798      	blx	r3
 80242a6:	462e      	mov	r6, r5
 80242a8:	6822      	ldr	r2, [r4, #0]
 80242aa:	f012 0210 	ands.w	r2, r2, #16
 80242ae:	d001      	beq.n	80242b4 <_scanf_float+0x370>
 80242b0:	2000      	movs	r0, #0
 80242b2:	e68b      	b.n	8023fcc <_scanf_float+0x88>
 80242b4:	7032      	strb	r2, [r6, #0]
 80242b6:	6823      	ldr	r3, [r4, #0]
 80242b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80242bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80242c0:	d11c      	bne.n	80242fc <_scanf_float+0x3b8>
 80242c2:	9b02      	ldr	r3, [sp, #8]
 80242c4:	454b      	cmp	r3, r9
 80242c6:	eba3 0209 	sub.w	r2, r3, r9
 80242ca:	d123      	bne.n	8024314 <_scanf_float+0x3d0>
 80242cc:	9901      	ldr	r1, [sp, #4]
 80242ce:	2200      	movs	r2, #0
 80242d0:	4640      	mov	r0, r8
 80242d2:	f7fe ffdd 	bl	8023290 <_strtod_r>
 80242d6:	9b03      	ldr	r3, [sp, #12]
 80242d8:	6821      	ldr	r1, [r4, #0]
 80242da:	681b      	ldr	r3, [r3, #0]
 80242dc:	f011 0f02 	tst.w	r1, #2
 80242e0:	ec57 6b10 	vmov	r6, r7, d0
 80242e4:	f103 0204 	add.w	r2, r3, #4
 80242e8:	d01f      	beq.n	802432a <_scanf_float+0x3e6>
 80242ea:	9903      	ldr	r1, [sp, #12]
 80242ec:	600a      	str	r2, [r1, #0]
 80242ee:	681b      	ldr	r3, [r3, #0]
 80242f0:	e9c3 6700 	strd	r6, r7, [r3]
 80242f4:	68e3      	ldr	r3, [r4, #12]
 80242f6:	3301      	adds	r3, #1
 80242f8:	60e3      	str	r3, [r4, #12]
 80242fa:	e7d9      	b.n	80242b0 <_scanf_float+0x36c>
 80242fc:	9b04      	ldr	r3, [sp, #16]
 80242fe:	2b00      	cmp	r3, #0
 8024300:	d0e4      	beq.n	80242cc <_scanf_float+0x388>
 8024302:	9905      	ldr	r1, [sp, #20]
 8024304:	230a      	movs	r3, #10
 8024306:	3101      	adds	r1, #1
 8024308:	4640      	mov	r0, r8
 802430a:	f7ff f841 	bl	8023390 <_strtol_r>
 802430e:	9b04      	ldr	r3, [sp, #16]
 8024310:	9e05      	ldr	r6, [sp, #20]
 8024312:	1ac2      	subs	r2, r0, r3
 8024314:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8024318:	429e      	cmp	r6, r3
 802431a:	bf28      	it	cs
 802431c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8024320:	4910      	ldr	r1, [pc, #64]	@ (8024364 <_scanf_float+0x420>)
 8024322:	4630      	mov	r0, r6
 8024324:	f000 f8f6 	bl	8024514 <siprintf>
 8024328:	e7d0      	b.n	80242cc <_scanf_float+0x388>
 802432a:	f011 0f04 	tst.w	r1, #4
 802432e:	9903      	ldr	r1, [sp, #12]
 8024330:	600a      	str	r2, [r1, #0]
 8024332:	d1dc      	bne.n	80242ee <_scanf_float+0x3aa>
 8024334:	681d      	ldr	r5, [r3, #0]
 8024336:	4632      	mov	r2, r6
 8024338:	463b      	mov	r3, r7
 802433a:	4630      	mov	r0, r6
 802433c:	4639      	mov	r1, r7
 802433e:	f7e4 fb3d 	bl	80089bc <__aeabi_dcmpun>
 8024342:	b128      	cbz	r0, 8024350 <_scanf_float+0x40c>
 8024344:	4808      	ldr	r0, [pc, #32]	@ (8024368 <_scanf_float+0x424>)
 8024346:	f000 faeb 	bl	8024920 <nanf>
 802434a:	ed85 0a00 	vstr	s0, [r5]
 802434e:	e7d1      	b.n	80242f4 <_scanf_float+0x3b0>
 8024350:	4630      	mov	r0, r6
 8024352:	4639      	mov	r1, r7
 8024354:	f7e4 fb90 	bl	8008a78 <__aeabi_d2f>
 8024358:	6028      	str	r0, [r5, #0]
 802435a:	e7cb      	b.n	80242f4 <_scanf_float+0x3b0>
 802435c:	f04f 0900 	mov.w	r9, #0
 8024360:	e629      	b.n	8023fb6 <_scanf_float+0x72>
 8024362:	bf00      	nop
 8024364:	08030da5 	.word	0x08030da5
 8024368:	08030c1b 	.word	0x08030c1b

0802436c <std>:
 802436c:	2300      	movs	r3, #0
 802436e:	b510      	push	{r4, lr}
 8024370:	4604      	mov	r4, r0
 8024372:	e9c0 3300 	strd	r3, r3, [r0]
 8024376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802437a:	6083      	str	r3, [r0, #8]
 802437c:	8181      	strh	r1, [r0, #12]
 802437e:	6643      	str	r3, [r0, #100]	@ 0x64
 8024380:	81c2      	strh	r2, [r0, #14]
 8024382:	6183      	str	r3, [r0, #24]
 8024384:	4619      	mov	r1, r3
 8024386:	2208      	movs	r2, #8
 8024388:	305c      	adds	r0, #92	@ 0x5c
 802438a:	f000 f950 	bl	802462e <memset>
 802438e:	4b0d      	ldr	r3, [pc, #52]	@ (80243c4 <std+0x58>)
 8024390:	6263      	str	r3, [r4, #36]	@ 0x24
 8024392:	4b0d      	ldr	r3, [pc, #52]	@ (80243c8 <std+0x5c>)
 8024394:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024396:	4b0d      	ldr	r3, [pc, #52]	@ (80243cc <std+0x60>)
 8024398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802439a:	4b0d      	ldr	r3, [pc, #52]	@ (80243d0 <std+0x64>)
 802439c:	6323      	str	r3, [r4, #48]	@ 0x30
 802439e:	4b0d      	ldr	r3, [pc, #52]	@ (80243d4 <std+0x68>)
 80243a0:	6224      	str	r4, [r4, #32]
 80243a2:	429c      	cmp	r4, r3
 80243a4:	d006      	beq.n	80243b4 <std+0x48>
 80243a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80243aa:	4294      	cmp	r4, r2
 80243ac:	d002      	beq.n	80243b4 <std+0x48>
 80243ae:	33d0      	adds	r3, #208	@ 0xd0
 80243b0:	429c      	cmp	r4, r3
 80243b2:	d105      	bne.n	80243c0 <std+0x54>
 80243b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80243b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80243bc:	f000 ba8c 	b.w	80248d8 <__retarget_lock_init_recursive>
 80243c0:	bd10      	pop	{r4, pc}
 80243c2:	bf00      	nop
 80243c4:	08024555 	.word	0x08024555
 80243c8:	08024577 	.word	0x08024577
 80243cc:	080245af 	.word	0x080245af
 80243d0:	080245d3 	.word	0x080245d3
 80243d4:	20002804 	.word	0x20002804

080243d8 <stdio_exit_handler>:
 80243d8:	4a02      	ldr	r2, [pc, #8]	@ (80243e4 <stdio_exit_handler+0xc>)
 80243da:	4903      	ldr	r1, [pc, #12]	@ (80243e8 <stdio_exit_handler+0x10>)
 80243dc:	4803      	ldr	r0, [pc, #12]	@ (80243ec <stdio_exit_handler+0x14>)
 80243de:	f000 b87b 	b.w	80244d8 <_fwalk_sglue>
 80243e2:	bf00      	nop
 80243e4:	2000049c 	.word	0x2000049c
 80243e8:	08026d35 	.word	0x08026d35
 80243ec:	20000618 	.word	0x20000618

080243f0 <cleanup_stdio>:
 80243f0:	6841      	ldr	r1, [r0, #4]
 80243f2:	4b0c      	ldr	r3, [pc, #48]	@ (8024424 <cleanup_stdio+0x34>)
 80243f4:	4299      	cmp	r1, r3
 80243f6:	b510      	push	{r4, lr}
 80243f8:	4604      	mov	r4, r0
 80243fa:	d001      	beq.n	8024400 <cleanup_stdio+0x10>
 80243fc:	f002 fc9a 	bl	8026d34 <_fflush_r>
 8024400:	68a1      	ldr	r1, [r4, #8]
 8024402:	4b09      	ldr	r3, [pc, #36]	@ (8024428 <cleanup_stdio+0x38>)
 8024404:	4299      	cmp	r1, r3
 8024406:	d002      	beq.n	802440e <cleanup_stdio+0x1e>
 8024408:	4620      	mov	r0, r4
 802440a:	f002 fc93 	bl	8026d34 <_fflush_r>
 802440e:	68e1      	ldr	r1, [r4, #12]
 8024410:	4b06      	ldr	r3, [pc, #24]	@ (802442c <cleanup_stdio+0x3c>)
 8024412:	4299      	cmp	r1, r3
 8024414:	d004      	beq.n	8024420 <cleanup_stdio+0x30>
 8024416:	4620      	mov	r0, r4
 8024418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802441c:	f002 bc8a 	b.w	8026d34 <_fflush_r>
 8024420:	bd10      	pop	{r4, pc}
 8024422:	bf00      	nop
 8024424:	20002804 	.word	0x20002804
 8024428:	2000286c 	.word	0x2000286c
 802442c:	200028d4 	.word	0x200028d4

08024430 <global_stdio_init.part.0>:
 8024430:	b510      	push	{r4, lr}
 8024432:	4b0b      	ldr	r3, [pc, #44]	@ (8024460 <global_stdio_init.part.0+0x30>)
 8024434:	4c0b      	ldr	r4, [pc, #44]	@ (8024464 <global_stdio_init.part.0+0x34>)
 8024436:	4a0c      	ldr	r2, [pc, #48]	@ (8024468 <global_stdio_init.part.0+0x38>)
 8024438:	601a      	str	r2, [r3, #0]
 802443a:	4620      	mov	r0, r4
 802443c:	2200      	movs	r2, #0
 802443e:	2104      	movs	r1, #4
 8024440:	f7ff ff94 	bl	802436c <std>
 8024444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8024448:	2201      	movs	r2, #1
 802444a:	2109      	movs	r1, #9
 802444c:	f7ff ff8e 	bl	802436c <std>
 8024450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8024454:	2202      	movs	r2, #2
 8024456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802445a:	2112      	movs	r1, #18
 802445c:	f7ff bf86 	b.w	802436c <std>
 8024460:	2000293c 	.word	0x2000293c
 8024464:	20002804 	.word	0x20002804
 8024468:	080243d9 	.word	0x080243d9

0802446c <__sfp_lock_acquire>:
 802446c:	4801      	ldr	r0, [pc, #4]	@ (8024474 <__sfp_lock_acquire+0x8>)
 802446e:	f000 ba34 	b.w	80248da <__retarget_lock_acquire_recursive>
 8024472:	bf00      	nop
 8024474:	20002945 	.word	0x20002945

08024478 <__sfp_lock_release>:
 8024478:	4801      	ldr	r0, [pc, #4]	@ (8024480 <__sfp_lock_release+0x8>)
 802447a:	f000 ba2f 	b.w	80248dc <__retarget_lock_release_recursive>
 802447e:	bf00      	nop
 8024480:	20002945 	.word	0x20002945

08024484 <__sinit>:
 8024484:	b510      	push	{r4, lr}
 8024486:	4604      	mov	r4, r0
 8024488:	f7ff fff0 	bl	802446c <__sfp_lock_acquire>
 802448c:	6a23      	ldr	r3, [r4, #32]
 802448e:	b11b      	cbz	r3, 8024498 <__sinit+0x14>
 8024490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024494:	f7ff bff0 	b.w	8024478 <__sfp_lock_release>
 8024498:	4b04      	ldr	r3, [pc, #16]	@ (80244ac <__sinit+0x28>)
 802449a:	6223      	str	r3, [r4, #32]
 802449c:	4b04      	ldr	r3, [pc, #16]	@ (80244b0 <__sinit+0x2c>)
 802449e:	681b      	ldr	r3, [r3, #0]
 80244a0:	2b00      	cmp	r3, #0
 80244a2:	d1f5      	bne.n	8024490 <__sinit+0xc>
 80244a4:	f7ff ffc4 	bl	8024430 <global_stdio_init.part.0>
 80244a8:	e7f2      	b.n	8024490 <__sinit+0xc>
 80244aa:	bf00      	nop
 80244ac:	080243f1 	.word	0x080243f1
 80244b0:	2000293c 	.word	0x2000293c

080244b4 <fiprintf>:
 80244b4:	b40e      	push	{r1, r2, r3}
 80244b6:	b503      	push	{r0, r1, lr}
 80244b8:	4601      	mov	r1, r0
 80244ba:	ab03      	add	r3, sp, #12
 80244bc:	4805      	ldr	r0, [pc, #20]	@ (80244d4 <fiprintf+0x20>)
 80244be:	f853 2b04 	ldr.w	r2, [r3], #4
 80244c2:	6800      	ldr	r0, [r0, #0]
 80244c4:	9301      	str	r3, [sp, #4]
 80244c6:	f002 fa99 	bl	80269fc <_vfiprintf_r>
 80244ca:	b002      	add	sp, #8
 80244cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80244d0:	b003      	add	sp, #12
 80244d2:	4770      	bx	lr
 80244d4:	20000614 	.word	0x20000614

080244d8 <_fwalk_sglue>:
 80244d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80244dc:	4607      	mov	r7, r0
 80244de:	4688      	mov	r8, r1
 80244e0:	4614      	mov	r4, r2
 80244e2:	2600      	movs	r6, #0
 80244e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80244e8:	f1b9 0901 	subs.w	r9, r9, #1
 80244ec:	d505      	bpl.n	80244fa <_fwalk_sglue+0x22>
 80244ee:	6824      	ldr	r4, [r4, #0]
 80244f0:	2c00      	cmp	r4, #0
 80244f2:	d1f7      	bne.n	80244e4 <_fwalk_sglue+0xc>
 80244f4:	4630      	mov	r0, r6
 80244f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80244fa:	89ab      	ldrh	r3, [r5, #12]
 80244fc:	2b01      	cmp	r3, #1
 80244fe:	d907      	bls.n	8024510 <_fwalk_sglue+0x38>
 8024500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024504:	3301      	adds	r3, #1
 8024506:	d003      	beq.n	8024510 <_fwalk_sglue+0x38>
 8024508:	4629      	mov	r1, r5
 802450a:	4638      	mov	r0, r7
 802450c:	47c0      	blx	r8
 802450e:	4306      	orrs	r6, r0
 8024510:	3568      	adds	r5, #104	@ 0x68
 8024512:	e7e9      	b.n	80244e8 <_fwalk_sglue+0x10>

08024514 <siprintf>:
 8024514:	b40e      	push	{r1, r2, r3}
 8024516:	b500      	push	{lr}
 8024518:	b09c      	sub	sp, #112	@ 0x70
 802451a:	ab1d      	add	r3, sp, #116	@ 0x74
 802451c:	9002      	str	r0, [sp, #8]
 802451e:	9006      	str	r0, [sp, #24]
 8024520:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8024524:	4809      	ldr	r0, [pc, #36]	@ (802454c <siprintf+0x38>)
 8024526:	9107      	str	r1, [sp, #28]
 8024528:	9104      	str	r1, [sp, #16]
 802452a:	4909      	ldr	r1, [pc, #36]	@ (8024550 <siprintf+0x3c>)
 802452c:	f853 2b04 	ldr.w	r2, [r3], #4
 8024530:	9105      	str	r1, [sp, #20]
 8024532:	6800      	ldr	r0, [r0, #0]
 8024534:	9301      	str	r3, [sp, #4]
 8024536:	a902      	add	r1, sp, #8
 8024538:	f002 f93a 	bl	80267b0 <_svfiprintf_r>
 802453c:	9b02      	ldr	r3, [sp, #8]
 802453e:	2200      	movs	r2, #0
 8024540:	701a      	strb	r2, [r3, #0]
 8024542:	b01c      	add	sp, #112	@ 0x70
 8024544:	f85d eb04 	ldr.w	lr, [sp], #4
 8024548:	b003      	add	sp, #12
 802454a:	4770      	bx	lr
 802454c:	20000614 	.word	0x20000614
 8024550:	ffff0208 	.word	0xffff0208

08024554 <__sread>:
 8024554:	b510      	push	{r4, lr}
 8024556:	460c      	mov	r4, r1
 8024558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802455c:	f000 f95e 	bl	802481c <_read_r>
 8024560:	2800      	cmp	r0, #0
 8024562:	bfab      	itete	ge
 8024564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8024566:	89a3      	ldrhlt	r3, [r4, #12]
 8024568:	181b      	addge	r3, r3, r0
 802456a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802456e:	bfac      	ite	ge
 8024570:	6563      	strge	r3, [r4, #84]	@ 0x54
 8024572:	81a3      	strhlt	r3, [r4, #12]
 8024574:	bd10      	pop	{r4, pc}

08024576 <__swrite>:
 8024576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802457a:	461f      	mov	r7, r3
 802457c:	898b      	ldrh	r3, [r1, #12]
 802457e:	05db      	lsls	r3, r3, #23
 8024580:	4605      	mov	r5, r0
 8024582:	460c      	mov	r4, r1
 8024584:	4616      	mov	r6, r2
 8024586:	d505      	bpl.n	8024594 <__swrite+0x1e>
 8024588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802458c:	2302      	movs	r3, #2
 802458e:	2200      	movs	r2, #0
 8024590:	f000 f932 	bl	80247f8 <_lseek_r>
 8024594:	89a3      	ldrh	r3, [r4, #12]
 8024596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802459a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802459e:	81a3      	strh	r3, [r4, #12]
 80245a0:	4632      	mov	r2, r6
 80245a2:	463b      	mov	r3, r7
 80245a4:	4628      	mov	r0, r5
 80245a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80245aa:	f000 b959 	b.w	8024860 <_write_r>

080245ae <__sseek>:
 80245ae:	b510      	push	{r4, lr}
 80245b0:	460c      	mov	r4, r1
 80245b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80245b6:	f000 f91f 	bl	80247f8 <_lseek_r>
 80245ba:	1c43      	adds	r3, r0, #1
 80245bc:	89a3      	ldrh	r3, [r4, #12]
 80245be:	bf15      	itete	ne
 80245c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80245c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80245c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80245ca:	81a3      	strheq	r3, [r4, #12]
 80245cc:	bf18      	it	ne
 80245ce:	81a3      	strhne	r3, [r4, #12]
 80245d0:	bd10      	pop	{r4, pc}

080245d2 <__sclose>:
 80245d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80245d6:	f000 b8ff 	b.w	80247d8 <_close_r>

080245da <memcmp>:
 80245da:	b510      	push	{r4, lr}
 80245dc:	3901      	subs	r1, #1
 80245de:	4402      	add	r2, r0
 80245e0:	4290      	cmp	r0, r2
 80245e2:	d101      	bne.n	80245e8 <memcmp+0xe>
 80245e4:	2000      	movs	r0, #0
 80245e6:	e005      	b.n	80245f4 <memcmp+0x1a>
 80245e8:	7803      	ldrb	r3, [r0, #0]
 80245ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80245ee:	42a3      	cmp	r3, r4
 80245f0:	d001      	beq.n	80245f6 <memcmp+0x1c>
 80245f2:	1b18      	subs	r0, r3, r4
 80245f4:	bd10      	pop	{r4, pc}
 80245f6:	3001      	adds	r0, #1
 80245f8:	e7f2      	b.n	80245e0 <memcmp+0x6>

080245fa <memmove>:
 80245fa:	4288      	cmp	r0, r1
 80245fc:	b510      	push	{r4, lr}
 80245fe:	eb01 0402 	add.w	r4, r1, r2
 8024602:	d902      	bls.n	802460a <memmove+0x10>
 8024604:	4284      	cmp	r4, r0
 8024606:	4623      	mov	r3, r4
 8024608:	d807      	bhi.n	802461a <memmove+0x20>
 802460a:	1e43      	subs	r3, r0, #1
 802460c:	42a1      	cmp	r1, r4
 802460e:	d008      	beq.n	8024622 <memmove+0x28>
 8024610:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024614:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024618:	e7f8      	b.n	802460c <memmove+0x12>
 802461a:	4402      	add	r2, r0
 802461c:	4601      	mov	r1, r0
 802461e:	428a      	cmp	r2, r1
 8024620:	d100      	bne.n	8024624 <memmove+0x2a>
 8024622:	bd10      	pop	{r4, pc}
 8024624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024628:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802462c:	e7f7      	b.n	802461e <memmove+0x24>

0802462e <memset>:
 802462e:	4402      	add	r2, r0
 8024630:	4603      	mov	r3, r0
 8024632:	4293      	cmp	r3, r2
 8024634:	d100      	bne.n	8024638 <memset+0xa>
 8024636:	4770      	bx	lr
 8024638:	f803 1b01 	strb.w	r1, [r3], #1
 802463c:	e7f9      	b.n	8024632 <memset+0x4>

0802463e <strcat>:
 802463e:	b510      	push	{r4, lr}
 8024640:	4602      	mov	r2, r0
 8024642:	7814      	ldrb	r4, [r2, #0]
 8024644:	4613      	mov	r3, r2
 8024646:	3201      	adds	r2, #1
 8024648:	2c00      	cmp	r4, #0
 802464a:	d1fa      	bne.n	8024642 <strcat+0x4>
 802464c:	3b01      	subs	r3, #1
 802464e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024656:	2a00      	cmp	r2, #0
 8024658:	d1f9      	bne.n	802464e <strcat+0x10>
 802465a:	bd10      	pop	{r4, pc}

0802465c <strchr>:
 802465c:	b2c9      	uxtb	r1, r1
 802465e:	4603      	mov	r3, r0
 8024660:	4618      	mov	r0, r3
 8024662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024666:	b112      	cbz	r2, 802466e <strchr+0x12>
 8024668:	428a      	cmp	r2, r1
 802466a:	d1f9      	bne.n	8024660 <strchr+0x4>
 802466c:	4770      	bx	lr
 802466e:	2900      	cmp	r1, #0
 8024670:	bf18      	it	ne
 8024672:	2000      	movne	r0, #0
 8024674:	4770      	bx	lr

08024676 <strncmp>:
 8024676:	b510      	push	{r4, lr}
 8024678:	b16a      	cbz	r2, 8024696 <strncmp+0x20>
 802467a:	3901      	subs	r1, #1
 802467c:	1884      	adds	r4, r0, r2
 802467e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024682:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8024686:	429a      	cmp	r2, r3
 8024688:	d103      	bne.n	8024692 <strncmp+0x1c>
 802468a:	42a0      	cmp	r0, r4
 802468c:	d001      	beq.n	8024692 <strncmp+0x1c>
 802468e:	2a00      	cmp	r2, #0
 8024690:	d1f5      	bne.n	802467e <strncmp+0x8>
 8024692:	1ad0      	subs	r0, r2, r3
 8024694:	bd10      	pop	{r4, pc}
 8024696:	4610      	mov	r0, r2
 8024698:	e7fc      	b.n	8024694 <strncmp+0x1e>

0802469a <strncpy>:
 802469a:	b510      	push	{r4, lr}
 802469c:	3901      	subs	r1, #1
 802469e:	4603      	mov	r3, r0
 80246a0:	b132      	cbz	r2, 80246b0 <strncpy+0x16>
 80246a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80246a6:	f803 4b01 	strb.w	r4, [r3], #1
 80246aa:	3a01      	subs	r2, #1
 80246ac:	2c00      	cmp	r4, #0
 80246ae:	d1f7      	bne.n	80246a0 <strncpy+0x6>
 80246b0:	441a      	add	r2, r3
 80246b2:	2100      	movs	r1, #0
 80246b4:	4293      	cmp	r3, r2
 80246b6:	d100      	bne.n	80246ba <strncpy+0x20>
 80246b8:	bd10      	pop	{r4, pc}
 80246ba:	f803 1b01 	strb.w	r1, [r3], #1
 80246be:	e7f9      	b.n	80246b4 <strncpy+0x1a>

080246c0 <strrchr>:
 80246c0:	b538      	push	{r3, r4, r5, lr}
 80246c2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 80246c6:	4603      	mov	r3, r0
 80246c8:	d10e      	bne.n	80246e8 <strrchr+0x28>
 80246ca:	4621      	mov	r1, r4
 80246cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80246d0:	f7ff bfc4 	b.w	802465c <strchr>
 80246d4:	1c43      	adds	r3, r0, #1
 80246d6:	4605      	mov	r5, r0
 80246d8:	4621      	mov	r1, r4
 80246da:	4618      	mov	r0, r3
 80246dc:	f7ff ffbe 	bl	802465c <strchr>
 80246e0:	2800      	cmp	r0, #0
 80246e2:	d1f7      	bne.n	80246d4 <strrchr+0x14>
 80246e4:	4628      	mov	r0, r5
 80246e6:	bd38      	pop	{r3, r4, r5, pc}
 80246e8:	2500      	movs	r5, #0
 80246ea:	e7f5      	b.n	80246d8 <strrchr+0x18>

080246ec <strtok>:
 80246ec:	4b16      	ldr	r3, [pc, #88]	@ (8024748 <strtok+0x5c>)
 80246ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80246f2:	681f      	ldr	r7, [r3, #0]
 80246f4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80246f6:	4605      	mov	r5, r0
 80246f8:	460e      	mov	r6, r1
 80246fa:	b9ec      	cbnz	r4, 8024738 <strtok+0x4c>
 80246fc:	2050      	movs	r0, #80	@ 0x50
 80246fe:	f7fd fecd 	bl	802249c <malloc>
 8024702:	4602      	mov	r2, r0
 8024704:	6478      	str	r0, [r7, #68]	@ 0x44
 8024706:	b920      	cbnz	r0, 8024712 <strtok+0x26>
 8024708:	4b10      	ldr	r3, [pc, #64]	@ (802474c <strtok+0x60>)
 802470a:	4811      	ldr	r0, [pc, #68]	@ (8024750 <strtok+0x64>)
 802470c:	215b      	movs	r1, #91	@ 0x5b
 802470e:	f7fd fe8b 	bl	8022428 <__assert_func>
 8024712:	e9c0 4400 	strd	r4, r4, [r0]
 8024716:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802471a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802471e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8024722:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8024726:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 802472a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 802472e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8024732:	6184      	str	r4, [r0, #24]
 8024734:	7704      	strb	r4, [r0, #28]
 8024736:	6244      	str	r4, [r0, #36]	@ 0x24
 8024738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802473a:	4631      	mov	r1, r6
 802473c:	4628      	mov	r0, r5
 802473e:	2301      	movs	r3, #1
 8024740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024744:	f000 b806 	b.w	8024754 <__strtok_r>
 8024748:	20000614 	.word	0x20000614
 802474c:	08030daa 	.word	0x08030daa
 8024750:	08030dc1 	.word	0x08030dc1

08024754 <__strtok_r>:
 8024754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024756:	4604      	mov	r4, r0
 8024758:	b908      	cbnz	r0, 802475e <__strtok_r+0xa>
 802475a:	6814      	ldr	r4, [r2, #0]
 802475c:	b144      	cbz	r4, 8024770 <__strtok_r+0x1c>
 802475e:	4620      	mov	r0, r4
 8024760:	f814 5b01 	ldrb.w	r5, [r4], #1
 8024764:	460f      	mov	r7, r1
 8024766:	f817 6b01 	ldrb.w	r6, [r7], #1
 802476a:	b91e      	cbnz	r6, 8024774 <__strtok_r+0x20>
 802476c:	b965      	cbnz	r5, 8024788 <__strtok_r+0x34>
 802476e:	6015      	str	r5, [r2, #0]
 8024770:	2000      	movs	r0, #0
 8024772:	e005      	b.n	8024780 <__strtok_r+0x2c>
 8024774:	42b5      	cmp	r5, r6
 8024776:	d1f6      	bne.n	8024766 <__strtok_r+0x12>
 8024778:	2b00      	cmp	r3, #0
 802477a:	d1f0      	bne.n	802475e <__strtok_r+0xa>
 802477c:	6014      	str	r4, [r2, #0]
 802477e:	7003      	strb	r3, [r0, #0]
 8024780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024782:	461c      	mov	r4, r3
 8024784:	e00c      	b.n	80247a0 <__strtok_r+0x4c>
 8024786:	b915      	cbnz	r5, 802478e <__strtok_r+0x3a>
 8024788:	f814 3b01 	ldrb.w	r3, [r4], #1
 802478c:	460e      	mov	r6, r1
 802478e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8024792:	42ab      	cmp	r3, r5
 8024794:	d1f7      	bne.n	8024786 <__strtok_r+0x32>
 8024796:	2b00      	cmp	r3, #0
 8024798:	d0f3      	beq.n	8024782 <__strtok_r+0x2e>
 802479a:	2300      	movs	r3, #0
 802479c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80247a0:	6014      	str	r4, [r2, #0]
 80247a2:	e7ed      	b.n	8024780 <__strtok_r+0x2c>

080247a4 <strstr>:
 80247a4:	780a      	ldrb	r2, [r1, #0]
 80247a6:	b570      	push	{r4, r5, r6, lr}
 80247a8:	b96a      	cbnz	r2, 80247c6 <strstr+0x22>
 80247aa:	bd70      	pop	{r4, r5, r6, pc}
 80247ac:	429a      	cmp	r2, r3
 80247ae:	d109      	bne.n	80247c4 <strstr+0x20>
 80247b0:	460c      	mov	r4, r1
 80247b2:	4605      	mov	r5, r0
 80247b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80247b8:	2b00      	cmp	r3, #0
 80247ba:	d0f6      	beq.n	80247aa <strstr+0x6>
 80247bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80247c0:	429e      	cmp	r6, r3
 80247c2:	d0f7      	beq.n	80247b4 <strstr+0x10>
 80247c4:	3001      	adds	r0, #1
 80247c6:	7803      	ldrb	r3, [r0, #0]
 80247c8:	2b00      	cmp	r3, #0
 80247ca:	d1ef      	bne.n	80247ac <strstr+0x8>
 80247cc:	4618      	mov	r0, r3
 80247ce:	e7ec      	b.n	80247aa <strstr+0x6>

080247d0 <_localeconv_r>:
 80247d0:	4800      	ldr	r0, [pc, #0]	@ (80247d4 <_localeconv_r+0x4>)
 80247d2:	4770      	bx	lr
 80247d4:	20000598 	.word	0x20000598

080247d8 <_close_r>:
 80247d8:	b538      	push	{r3, r4, r5, lr}
 80247da:	4d06      	ldr	r5, [pc, #24]	@ (80247f4 <_close_r+0x1c>)
 80247dc:	2300      	movs	r3, #0
 80247de:	4604      	mov	r4, r0
 80247e0:	4608      	mov	r0, r1
 80247e2:	602b      	str	r3, [r5, #0]
 80247e4:	f7e7 ff88 	bl	800c6f8 <_close>
 80247e8:	1c43      	adds	r3, r0, #1
 80247ea:	d102      	bne.n	80247f2 <_close_r+0x1a>
 80247ec:	682b      	ldr	r3, [r5, #0]
 80247ee:	b103      	cbz	r3, 80247f2 <_close_r+0x1a>
 80247f0:	6023      	str	r3, [r4, #0]
 80247f2:	bd38      	pop	{r3, r4, r5, pc}
 80247f4:	20002940 	.word	0x20002940

080247f8 <_lseek_r>:
 80247f8:	b538      	push	{r3, r4, r5, lr}
 80247fa:	4d07      	ldr	r5, [pc, #28]	@ (8024818 <_lseek_r+0x20>)
 80247fc:	4604      	mov	r4, r0
 80247fe:	4608      	mov	r0, r1
 8024800:	4611      	mov	r1, r2
 8024802:	2200      	movs	r2, #0
 8024804:	602a      	str	r2, [r5, #0]
 8024806:	461a      	mov	r2, r3
 8024808:	f7e7 ff80 	bl	800c70c <_lseek>
 802480c:	1c43      	adds	r3, r0, #1
 802480e:	d102      	bne.n	8024816 <_lseek_r+0x1e>
 8024810:	682b      	ldr	r3, [r5, #0]
 8024812:	b103      	cbz	r3, 8024816 <_lseek_r+0x1e>
 8024814:	6023      	str	r3, [r4, #0]
 8024816:	bd38      	pop	{r3, r4, r5, pc}
 8024818:	20002940 	.word	0x20002940

0802481c <_read_r>:
 802481c:	b538      	push	{r3, r4, r5, lr}
 802481e:	4d07      	ldr	r5, [pc, #28]	@ (802483c <_read_r+0x20>)
 8024820:	4604      	mov	r4, r0
 8024822:	4608      	mov	r0, r1
 8024824:	4611      	mov	r1, r2
 8024826:	2200      	movs	r2, #0
 8024828:	602a      	str	r2, [r5, #0]
 802482a:	461a      	mov	r2, r3
 802482c:	f7e7 ff46 	bl	800c6bc <_read>
 8024830:	1c43      	adds	r3, r0, #1
 8024832:	d102      	bne.n	802483a <_read_r+0x1e>
 8024834:	682b      	ldr	r3, [r5, #0]
 8024836:	b103      	cbz	r3, 802483a <_read_r+0x1e>
 8024838:	6023      	str	r3, [r4, #0]
 802483a:	bd38      	pop	{r3, r4, r5, pc}
 802483c:	20002940 	.word	0x20002940

08024840 <_sbrk_r>:
 8024840:	b538      	push	{r3, r4, r5, lr}
 8024842:	4d06      	ldr	r5, [pc, #24]	@ (802485c <_sbrk_r+0x1c>)
 8024844:	2300      	movs	r3, #0
 8024846:	4604      	mov	r4, r0
 8024848:	4608      	mov	r0, r1
 802484a:	602b      	str	r3, [r5, #0]
 802484c:	f7e7 ff60 	bl	800c710 <_sbrk>
 8024850:	1c43      	adds	r3, r0, #1
 8024852:	d102      	bne.n	802485a <_sbrk_r+0x1a>
 8024854:	682b      	ldr	r3, [r5, #0]
 8024856:	b103      	cbz	r3, 802485a <_sbrk_r+0x1a>
 8024858:	6023      	str	r3, [r4, #0]
 802485a:	bd38      	pop	{r3, r4, r5, pc}
 802485c:	20002940 	.word	0x20002940

08024860 <_write_r>:
 8024860:	b538      	push	{r3, r4, r5, lr}
 8024862:	4d07      	ldr	r5, [pc, #28]	@ (8024880 <_write_r+0x20>)
 8024864:	4604      	mov	r4, r0
 8024866:	4608      	mov	r0, r1
 8024868:	4611      	mov	r1, r2
 802486a:	2200      	movs	r2, #0
 802486c:	602a      	str	r2, [r5, #0]
 802486e:	461a      	mov	r2, r3
 8024870:	f7e7 ff34 	bl	800c6dc <_write>
 8024874:	1c43      	adds	r3, r0, #1
 8024876:	d102      	bne.n	802487e <_write_r+0x1e>
 8024878:	682b      	ldr	r3, [r5, #0]
 802487a:	b103      	cbz	r3, 802487e <_write_r+0x1e>
 802487c:	6023      	str	r3, [r4, #0]
 802487e:	bd38      	pop	{r3, r4, r5, pc}
 8024880:	20002940 	.word	0x20002940

08024884 <__errno>:
 8024884:	4b01      	ldr	r3, [pc, #4]	@ (802488c <__errno+0x8>)
 8024886:	6818      	ldr	r0, [r3, #0]
 8024888:	4770      	bx	lr
 802488a:	bf00      	nop
 802488c:	20000614 	.word	0x20000614

08024890 <__libc_init_array>:
 8024890:	b570      	push	{r4, r5, r6, lr}
 8024892:	4d0d      	ldr	r5, [pc, #52]	@ (80248c8 <__libc_init_array+0x38>)
 8024894:	4c0d      	ldr	r4, [pc, #52]	@ (80248cc <__libc_init_array+0x3c>)
 8024896:	1b64      	subs	r4, r4, r5
 8024898:	10a4      	asrs	r4, r4, #2
 802489a:	2600      	movs	r6, #0
 802489c:	42a6      	cmp	r6, r4
 802489e:	d109      	bne.n	80248b4 <__libc_init_array+0x24>
 80248a0:	4d0b      	ldr	r5, [pc, #44]	@ (80248d0 <__libc_init_array+0x40>)
 80248a2:	4c0c      	ldr	r4, [pc, #48]	@ (80248d4 <__libc_init_array+0x44>)
 80248a4:	f004 f8ea 	bl	8028a7c <_init>
 80248a8:	1b64      	subs	r4, r4, r5
 80248aa:	10a4      	asrs	r4, r4, #2
 80248ac:	2600      	movs	r6, #0
 80248ae:	42a6      	cmp	r6, r4
 80248b0:	d105      	bne.n	80248be <__libc_init_array+0x2e>
 80248b2:	bd70      	pop	{r4, r5, r6, pc}
 80248b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80248b8:	4798      	blx	r3
 80248ba:	3601      	adds	r6, #1
 80248bc:	e7ee      	b.n	802489c <__libc_init_array+0xc>
 80248be:	f855 3b04 	ldr.w	r3, [r5], #4
 80248c2:	4798      	blx	r3
 80248c4:	3601      	adds	r6, #1
 80248c6:	e7f2      	b.n	80248ae <__libc_init_array+0x1e>
 80248c8:	080314c8 	.word	0x080314c8
 80248cc:	080314c8 	.word	0x080314c8
 80248d0:	080314c8 	.word	0x080314c8
 80248d4:	080314cc 	.word	0x080314cc

080248d8 <__retarget_lock_init_recursive>:
 80248d8:	4770      	bx	lr

080248da <__retarget_lock_acquire_recursive>:
 80248da:	4770      	bx	lr

080248dc <__retarget_lock_release_recursive>:
 80248dc:	4770      	bx	lr

080248de <strcpy>:
 80248de:	4603      	mov	r3, r0
 80248e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80248e4:	f803 2b01 	strb.w	r2, [r3], #1
 80248e8:	2a00      	cmp	r2, #0
 80248ea:	d1f9      	bne.n	80248e0 <strcpy+0x2>
 80248ec:	4770      	bx	lr

080248ee <memcpy>:
 80248ee:	440a      	add	r2, r1
 80248f0:	4291      	cmp	r1, r2
 80248f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80248f6:	d100      	bne.n	80248fa <memcpy+0xc>
 80248f8:	4770      	bx	lr
 80248fa:	b510      	push	{r4, lr}
 80248fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024904:	4291      	cmp	r1, r2
 8024906:	d1f9      	bne.n	80248fc <memcpy+0xe>
 8024908:	bd10      	pop	{r4, pc}
 802490a:	0000      	movs	r0, r0
 802490c:	0000      	movs	r0, r0
	...

08024910 <nan>:
 8024910:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8024918 <nan+0x8>
 8024914:	4770      	bx	lr
 8024916:	bf00      	nop
 8024918:	00000000 	.word	0x00000000
 802491c:	7ff80000 	.word	0x7ff80000

08024920 <nanf>:
 8024920:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8024928 <nanf+0x8>
 8024924:	4770      	bx	lr
 8024926:	bf00      	nop
 8024928:	7fc00000 	.word	0x7fc00000

0802492c <abort>:
 802492c:	b508      	push	{r3, lr}
 802492e:	2006      	movs	r0, #6
 8024930:	f002 fae4 	bl	8026efc <raise>
 8024934:	2001      	movs	r0, #1
 8024936:	f7e7 febb 	bl	800c6b0 <_exit>

0802493a <quorem>:
 802493a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802493e:	6903      	ldr	r3, [r0, #16]
 8024940:	690c      	ldr	r4, [r1, #16]
 8024942:	42a3      	cmp	r3, r4
 8024944:	4607      	mov	r7, r0
 8024946:	db7e      	blt.n	8024a46 <quorem+0x10c>
 8024948:	3c01      	subs	r4, #1
 802494a:	f101 0814 	add.w	r8, r1, #20
 802494e:	00a3      	lsls	r3, r4, #2
 8024950:	f100 0514 	add.w	r5, r0, #20
 8024954:	9300      	str	r3, [sp, #0]
 8024956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802495a:	9301      	str	r3, [sp, #4]
 802495c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8024960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024964:	3301      	adds	r3, #1
 8024966:	429a      	cmp	r2, r3
 8024968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802496c:	fbb2 f6f3 	udiv	r6, r2, r3
 8024970:	d32e      	bcc.n	80249d0 <quorem+0x96>
 8024972:	f04f 0a00 	mov.w	sl, #0
 8024976:	46c4      	mov	ip, r8
 8024978:	46ae      	mov	lr, r5
 802497a:	46d3      	mov	fp, sl
 802497c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8024980:	b298      	uxth	r0, r3
 8024982:	fb06 a000 	mla	r0, r6, r0, sl
 8024986:	0c02      	lsrs	r2, r0, #16
 8024988:	0c1b      	lsrs	r3, r3, #16
 802498a:	fb06 2303 	mla	r3, r6, r3, r2
 802498e:	f8de 2000 	ldr.w	r2, [lr]
 8024992:	b280      	uxth	r0, r0
 8024994:	b292      	uxth	r2, r2
 8024996:	1a12      	subs	r2, r2, r0
 8024998:	445a      	add	r2, fp
 802499a:	f8de 0000 	ldr.w	r0, [lr]
 802499e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80249a2:	b29b      	uxth	r3, r3
 80249a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80249a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80249ac:	b292      	uxth	r2, r2
 80249ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80249b2:	45e1      	cmp	r9, ip
 80249b4:	f84e 2b04 	str.w	r2, [lr], #4
 80249b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80249bc:	d2de      	bcs.n	802497c <quorem+0x42>
 80249be:	9b00      	ldr	r3, [sp, #0]
 80249c0:	58eb      	ldr	r3, [r5, r3]
 80249c2:	b92b      	cbnz	r3, 80249d0 <quorem+0x96>
 80249c4:	9b01      	ldr	r3, [sp, #4]
 80249c6:	3b04      	subs	r3, #4
 80249c8:	429d      	cmp	r5, r3
 80249ca:	461a      	mov	r2, r3
 80249cc:	d32f      	bcc.n	8024a2e <quorem+0xf4>
 80249ce:	613c      	str	r4, [r7, #16]
 80249d0:	4638      	mov	r0, r7
 80249d2:	f001 fc8f 	bl	80262f4 <__mcmp>
 80249d6:	2800      	cmp	r0, #0
 80249d8:	db25      	blt.n	8024a26 <quorem+0xec>
 80249da:	4629      	mov	r1, r5
 80249dc:	2000      	movs	r0, #0
 80249de:	f858 2b04 	ldr.w	r2, [r8], #4
 80249e2:	f8d1 c000 	ldr.w	ip, [r1]
 80249e6:	fa1f fe82 	uxth.w	lr, r2
 80249ea:	fa1f f38c 	uxth.w	r3, ip
 80249ee:	eba3 030e 	sub.w	r3, r3, lr
 80249f2:	4403      	add	r3, r0
 80249f4:	0c12      	lsrs	r2, r2, #16
 80249f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80249fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80249fe:	b29b      	uxth	r3, r3
 8024a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024a04:	45c1      	cmp	r9, r8
 8024a06:	f841 3b04 	str.w	r3, [r1], #4
 8024a0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8024a0e:	d2e6      	bcs.n	80249de <quorem+0xa4>
 8024a10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024a14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024a18:	b922      	cbnz	r2, 8024a24 <quorem+0xea>
 8024a1a:	3b04      	subs	r3, #4
 8024a1c:	429d      	cmp	r5, r3
 8024a1e:	461a      	mov	r2, r3
 8024a20:	d30b      	bcc.n	8024a3a <quorem+0x100>
 8024a22:	613c      	str	r4, [r7, #16]
 8024a24:	3601      	adds	r6, #1
 8024a26:	4630      	mov	r0, r6
 8024a28:	b003      	add	sp, #12
 8024a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a2e:	6812      	ldr	r2, [r2, #0]
 8024a30:	3b04      	subs	r3, #4
 8024a32:	2a00      	cmp	r2, #0
 8024a34:	d1cb      	bne.n	80249ce <quorem+0x94>
 8024a36:	3c01      	subs	r4, #1
 8024a38:	e7c6      	b.n	80249c8 <quorem+0x8e>
 8024a3a:	6812      	ldr	r2, [r2, #0]
 8024a3c:	3b04      	subs	r3, #4
 8024a3e:	2a00      	cmp	r2, #0
 8024a40:	d1ef      	bne.n	8024a22 <quorem+0xe8>
 8024a42:	3c01      	subs	r4, #1
 8024a44:	e7ea      	b.n	8024a1c <quorem+0xe2>
 8024a46:	2000      	movs	r0, #0
 8024a48:	e7ee      	b.n	8024a28 <quorem+0xee>
 8024a4a:	0000      	movs	r0, r0
 8024a4c:	0000      	movs	r0, r0
	...

08024a50 <_dtoa_r>:
 8024a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a54:	69c7      	ldr	r7, [r0, #28]
 8024a56:	b099      	sub	sp, #100	@ 0x64
 8024a58:	ed8d 0b02 	vstr	d0, [sp, #8]
 8024a5c:	ec55 4b10 	vmov	r4, r5, d0
 8024a60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8024a62:	9109      	str	r1, [sp, #36]	@ 0x24
 8024a64:	4683      	mov	fp, r0
 8024a66:	920e      	str	r2, [sp, #56]	@ 0x38
 8024a68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024a6a:	b97f      	cbnz	r7, 8024a8c <_dtoa_r+0x3c>
 8024a6c:	2010      	movs	r0, #16
 8024a6e:	f7fd fd15 	bl	802249c <malloc>
 8024a72:	4602      	mov	r2, r0
 8024a74:	f8cb 001c 	str.w	r0, [fp, #28]
 8024a78:	b920      	cbnz	r0, 8024a84 <_dtoa_r+0x34>
 8024a7a:	4ba7      	ldr	r3, [pc, #668]	@ (8024d18 <_dtoa_r+0x2c8>)
 8024a7c:	21ef      	movs	r1, #239	@ 0xef
 8024a7e:	48a7      	ldr	r0, [pc, #668]	@ (8024d1c <_dtoa_r+0x2cc>)
 8024a80:	f7fd fcd2 	bl	8022428 <__assert_func>
 8024a84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8024a88:	6007      	str	r7, [r0, #0]
 8024a8a:	60c7      	str	r7, [r0, #12]
 8024a8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8024a90:	6819      	ldr	r1, [r3, #0]
 8024a92:	b159      	cbz	r1, 8024aac <_dtoa_r+0x5c>
 8024a94:	685a      	ldr	r2, [r3, #4]
 8024a96:	604a      	str	r2, [r1, #4]
 8024a98:	2301      	movs	r3, #1
 8024a9a:	4093      	lsls	r3, r2
 8024a9c:	608b      	str	r3, [r1, #8]
 8024a9e:	4658      	mov	r0, fp
 8024aa0:	f001 f9a4 	bl	8025dec <_Bfree>
 8024aa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8024aa8:	2200      	movs	r2, #0
 8024aaa:	601a      	str	r2, [r3, #0]
 8024aac:	1e2b      	subs	r3, r5, #0
 8024aae:	bfb9      	ittee	lt
 8024ab0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8024ab4:	9303      	strlt	r3, [sp, #12]
 8024ab6:	2300      	movge	r3, #0
 8024ab8:	6033      	strge	r3, [r6, #0]
 8024aba:	9f03      	ldr	r7, [sp, #12]
 8024abc:	4b98      	ldr	r3, [pc, #608]	@ (8024d20 <_dtoa_r+0x2d0>)
 8024abe:	bfbc      	itt	lt
 8024ac0:	2201      	movlt	r2, #1
 8024ac2:	6032      	strlt	r2, [r6, #0]
 8024ac4:	43bb      	bics	r3, r7
 8024ac6:	d112      	bne.n	8024aee <_dtoa_r+0x9e>
 8024ac8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024aca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8024ace:	6013      	str	r3, [r2, #0]
 8024ad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8024ad4:	4323      	orrs	r3, r4
 8024ad6:	f000 854d 	beq.w	8025574 <_dtoa_r+0xb24>
 8024ada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024adc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8024d34 <_dtoa_r+0x2e4>
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	f000 854f 	beq.w	8025584 <_dtoa_r+0xb34>
 8024ae6:	f10a 0303 	add.w	r3, sl, #3
 8024aea:	f000 bd49 	b.w	8025580 <_dtoa_r+0xb30>
 8024aee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024af2:	2200      	movs	r2, #0
 8024af4:	ec51 0b17 	vmov	r0, r1, d7
 8024af8:	2300      	movs	r3, #0
 8024afa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8024afe:	f7e3 ff2b 	bl	8008958 <__aeabi_dcmpeq>
 8024b02:	4680      	mov	r8, r0
 8024b04:	b158      	cbz	r0, 8024b1e <_dtoa_r+0xce>
 8024b06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024b08:	2301      	movs	r3, #1
 8024b0a:	6013      	str	r3, [r2, #0]
 8024b0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024b0e:	b113      	cbz	r3, 8024b16 <_dtoa_r+0xc6>
 8024b10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024b12:	4b84      	ldr	r3, [pc, #528]	@ (8024d24 <_dtoa_r+0x2d4>)
 8024b14:	6013      	str	r3, [r2, #0]
 8024b16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8024d38 <_dtoa_r+0x2e8>
 8024b1a:	f000 bd33 	b.w	8025584 <_dtoa_r+0xb34>
 8024b1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8024b22:	aa16      	add	r2, sp, #88	@ 0x58
 8024b24:	a917      	add	r1, sp, #92	@ 0x5c
 8024b26:	4658      	mov	r0, fp
 8024b28:	f001 fd04 	bl	8026534 <__d2b>
 8024b2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8024b30:	4681      	mov	r9, r0
 8024b32:	2e00      	cmp	r6, #0
 8024b34:	d077      	beq.n	8024c26 <_dtoa_r+0x1d6>
 8024b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024b38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8024b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8024b44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8024b48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8024b4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8024b50:	4619      	mov	r1, r3
 8024b52:	2200      	movs	r2, #0
 8024b54:	4b74      	ldr	r3, [pc, #464]	@ (8024d28 <_dtoa_r+0x2d8>)
 8024b56:	f7e3 fadf 	bl	8008118 <__aeabi_dsub>
 8024b5a:	a369      	add	r3, pc, #420	@ (adr r3, 8024d00 <_dtoa_r+0x2b0>)
 8024b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b60:	f7e3 fc92 	bl	8008488 <__aeabi_dmul>
 8024b64:	a368      	add	r3, pc, #416	@ (adr r3, 8024d08 <_dtoa_r+0x2b8>)
 8024b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b6a:	f7e3 fad7 	bl	800811c <__adddf3>
 8024b6e:	4604      	mov	r4, r0
 8024b70:	4630      	mov	r0, r6
 8024b72:	460d      	mov	r5, r1
 8024b74:	f7e3 fc1e 	bl	80083b4 <__aeabi_i2d>
 8024b78:	a365      	add	r3, pc, #404	@ (adr r3, 8024d10 <_dtoa_r+0x2c0>)
 8024b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b7e:	f7e3 fc83 	bl	8008488 <__aeabi_dmul>
 8024b82:	4602      	mov	r2, r0
 8024b84:	460b      	mov	r3, r1
 8024b86:	4620      	mov	r0, r4
 8024b88:	4629      	mov	r1, r5
 8024b8a:	f7e3 fac7 	bl	800811c <__adddf3>
 8024b8e:	4604      	mov	r4, r0
 8024b90:	460d      	mov	r5, r1
 8024b92:	f7e3 ff29 	bl	80089e8 <__aeabi_d2iz>
 8024b96:	2200      	movs	r2, #0
 8024b98:	4607      	mov	r7, r0
 8024b9a:	2300      	movs	r3, #0
 8024b9c:	4620      	mov	r0, r4
 8024b9e:	4629      	mov	r1, r5
 8024ba0:	f7e3 fee4 	bl	800896c <__aeabi_dcmplt>
 8024ba4:	b140      	cbz	r0, 8024bb8 <_dtoa_r+0x168>
 8024ba6:	4638      	mov	r0, r7
 8024ba8:	f7e3 fc04 	bl	80083b4 <__aeabi_i2d>
 8024bac:	4622      	mov	r2, r4
 8024bae:	462b      	mov	r3, r5
 8024bb0:	f7e3 fed2 	bl	8008958 <__aeabi_dcmpeq>
 8024bb4:	b900      	cbnz	r0, 8024bb8 <_dtoa_r+0x168>
 8024bb6:	3f01      	subs	r7, #1
 8024bb8:	2f16      	cmp	r7, #22
 8024bba:	d851      	bhi.n	8024c60 <_dtoa_r+0x210>
 8024bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8024d2c <_dtoa_r+0x2dc>)
 8024bbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8024bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8024bca:	f7e3 fecf 	bl	800896c <__aeabi_dcmplt>
 8024bce:	2800      	cmp	r0, #0
 8024bd0:	d048      	beq.n	8024c64 <_dtoa_r+0x214>
 8024bd2:	3f01      	subs	r7, #1
 8024bd4:	2300      	movs	r3, #0
 8024bd6:	9312      	str	r3, [sp, #72]	@ 0x48
 8024bd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024bda:	1b9b      	subs	r3, r3, r6
 8024bdc:	1e5a      	subs	r2, r3, #1
 8024bde:	bf44      	itt	mi
 8024be0:	f1c3 0801 	rsbmi	r8, r3, #1
 8024be4:	2300      	movmi	r3, #0
 8024be6:	9208      	str	r2, [sp, #32]
 8024be8:	bf54      	ite	pl
 8024bea:	f04f 0800 	movpl.w	r8, #0
 8024bee:	9308      	strmi	r3, [sp, #32]
 8024bf0:	2f00      	cmp	r7, #0
 8024bf2:	db39      	blt.n	8024c68 <_dtoa_r+0x218>
 8024bf4:	9b08      	ldr	r3, [sp, #32]
 8024bf6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8024bf8:	443b      	add	r3, r7
 8024bfa:	9308      	str	r3, [sp, #32]
 8024bfc:	2300      	movs	r3, #0
 8024bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8024c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c02:	2b09      	cmp	r3, #9
 8024c04:	d864      	bhi.n	8024cd0 <_dtoa_r+0x280>
 8024c06:	2b05      	cmp	r3, #5
 8024c08:	bfc4      	itt	gt
 8024c0a:	3b04      	subgt	r3, #4
 8024c0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8024c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c10:	f1a3 0302 	sub.w	r3, r3, #2
 8024c14:	bfcc      	ite	gt
 8024c16:	2400      	movgt	r4, #0
 8024c18:	2401      	movle	r4, #1
 8024c1a:	2b03      	cmp	r3, #3
 8024c1c:	d863      	bhi.n	8024ce6 <_dtoa_r+0x296>
 8024c1e:	e8df f003 	tbb	[pc, r3]
 8024c22:	372a      	.short	0x372a
 8024c24:	5535      	.short	0x5535
 8024c26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8024c2a:	441e      	add	r6, r3
 8024c2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8024c30:	2b20      	cmp	r3, #32
 8024c32:	bfc1      	itttt	gt
 8024c34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8024c38:	409f      	lslgt	r7, r3
 8024c3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8024c3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8024c42:	bfd6      	itet	le
 8024c44:	f1c3 0320 	rsble	r3, r3, #32
 8024c48:	ea47 0003 	orrgt.w	r0, r7, r3
 8024c4c:	fa04 f003 	lslle.w	r0, r4, r3
 8024c50:	f7e3 fba0 	bl	8008394 <__aeabi_ui2d>
 8024c54:	2201      	movs	r2, #1
 8024c56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8024c5a:	3e01      	subs	r6, #1
 8024c5c:	9214      	str	r2, [sp, #80]	@ 0x50
 8024c5e:	e777      	b.n	8024b50 <_dtoa_r+0x100>
 8024c60:	2301      	movs	r3, #1
 8024c62:	e7b8      	b.n	8024bd6 <_dtoa_r+0x186>
 8024c64:	9012      	str	r0, [sp, #72]	@ 0x48
 8024c66:	e7b7      	b.n	8024bd8 <_dtoa_r+0x188>
 8024c68:	427b      	negs	r3, r7
 8024c6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8024c6c:	2300      	movs	r3, #0
 8024c6e:	eba8 0807 	sub.w	r8, r8, r7
 8024c72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024c74:	e7c4      	b.n	8024c00 <_dtoa_r+0x1b0>
 8024c76:	2300      	movs	r3, #0
 8024c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c7c:	2b00      	cmp	r3, #0
 8024c7e:	dc35      	bgt.n	8024cec <_dtoa_r+0x29c>
 8024c80:	2301      	movs	r3, #1
 8024c82:	9300      	str	r3, [sp, #0]
 8024c84:	9307      	str	r3, [sp, #28]
 8024c86:	461a      	mov	r2, r3
 8024c88:	920e      	str	r2, [sp, #56]	@ 0x38
 8024c8a:	e00b      	b.n	8024ca4 <_dtoa_r+0x254>
 8024c8c:	2301      	movs	r3, #1
 8024c8e:	e7f3      	b.n	8024c78 <_dtoa_r+0x228>
 8024c90:	2300      	movs	r3, #0
 8024c92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c96:	18fb      	adds	r3, r7, r3
 8024c98:	9300      	str	r3, [sp, #0]
 8024c9a:	3301      	adds	r3, #1
 8024c9c:	2b01      	cmp	r3, #1
 8024c9e:	9307      	str	r3, [sp, #28]
 8024ca0:	bfb8      	it	lt
 8024ca2:	2301      	movlt	r3, #1
 8024ca4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8024ca8:	2100      	movs	r1, #0
 8024caa:	2204      	movs	r2, #4
 8024cac:	f102 0514 	add.w	r5, r2, #20
 8024cb0:	429d      	cmp	r5, r3
 8024cb2:	d91f      	bls.n	8024cf4 <_dtoa_r+0x2a4>
 8024cb4:	6041      	str	r1, [r0, #4]
 8024cb6:	4658      	mov	r0, fp
 8024cb8:	f001 f858 	bl	8025d6c <_Balloc>
 8024cbc:	4682      	mov	sl, r0
 8024cbe:	2800      	cmp	r0, #0
 8024cc0:	d13c      	bne.n	8024d3c <_dtoa_r+0x2ec>
 8024cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8024d30 <_dtoa_r+0x2e0>)
 8024cc4:	4602      	mov	r2, r0
 8024cc6:	f240 11af 	movw	r1, #431	@ 0x1af
 8024cca:	e6d8      	b.n	8024a7e <_dtoa_r+0x2e>
 8024ccc:	2301      	movs	r3, #1
 8024cce:	e7e0      	b.n	8024c92 <_dtoa_r+0x242>
 8024cd0:	2401      	movs	r4, #1
 8024cd2:	2300      	movs	r3, #0
 8024cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024cd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8024cdc:	9300      	str	r3, [sp, #0]
 8024cde:	9307      	str	r3, [sp, #28]
 8024ce0:	2200      	movs	r2, #0
 8024ce2:	2312      	movs	r3, #18
 8024ce4:	e7d0      	b.n	8024c88 <_dtoa_r+0x238>
 8024ce6:	2301      	movs	r3, #1
 8024ce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024cea:	e7f5      	b.n	8024cd8 <_dtoa_r+0x288>
 8024cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024cee:	9300      	str	r3, [sp, #0]
 8024cf0:	9307      	str	r3, [sp, #28]
 8024cf2:	e7d7      	b.n	8024ca4 <_dtoa_r+0x254>
 8024cf4:	3101      	adds	r1, #1
 8024cf6:	0052      	lsls	r2, r2, #1
 8024cf8:	e7d8      	b.n	8024cac <_dtoa_r+0x25c>
 8024cfa:	bf00      	nop
 8024cfc:	f3af 8000 	nop.w
 8024d00:	636f4361 	.word	0x636f4361
 8024d04:	3fd287a7 	.word	0x3fd287a7
 8024d08:	8b60c8b3 	.word	0x8b60c8b3
 8024d0c:	3fc68a28 	.word	0x3fc68a28
 8024d10:	509f79fb 	.word	0x509f79fb
 8024d14:	3fd34413 	.word	0x3fd34413
 8024d18:	08030daa 	.word	0x08030daa
 8024d1c:	08030e30 	.word	0x08030e30
 8024d20:	7ff00000 	.word	0x7ff00000
 8024d24:	08030d82 	.word	0x08030d82
 8024d28:	3ff80000 	.word	0x3ff80000
 8024d2c:	08030f88 	.word	0x08030f88
 8024d30:	08030e88 	.word	0x08030e88
 8024d34:	08030e2c 	.word	0x08030e2c
 8024d38:	08030d81 	.word	0x08030d81
 8024d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8024d40:	6018      	str	r0, [r3, #0]
 8024d42:	9b07      	ldr	r3, [sp, #28]
 8024d44:	2b0e      	cmp	r3, #14
 8024d46:	f200 80a4 	bhi.w	8024e92 <_dtoa_r+0x442>
 8024d4a:	2c00      	cmp	r4, #0
 8024d4c:	f000 80a1 	beq.w	8024e92 <_dtoa_r+0x442>
 8024d50:	2f00      	cmp	r7, #0
 8024d52:	dd33      	ble.n	8024dbc <_dtoa_r+0x36c>
 8024d54:	4bad      	ldr	r3, [pc, #692]	@ (802500c <_dtoa_r+0x5bc>)
 8024d56:	f007 020f 	and.w	r2, r7, #15
 8024d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024d5e:	ed93 7b00 	vldr	d7, [r3]
 8024d62:	05f8      	lsls	r0, r7, #23
 8024d64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8024d68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8024d6c:	d516      	bpl.n	8024d9c <_dtoa_r+0x34c>
 8024d6e:	4ba8      	ldr	r3, [pc, #672]	@ (8025010 <_dtoa_r+0x5c0>)
 8024d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8024d74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8024d78:	f7e3 fcb0 	bl	80086dc <__aeabi_ddiv>
 8024d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024d80:	f004 040f 	and.w	r4, r4, #15
 8024d84:	2603      	movs	r6, #3
 8024d86:	4da2      	ldr	r5, [pc, #648]	@ (8025010 <_dtoa_r+0x5c0>)
 8024d88:	b954      	cbnz	r4, 8024da0 <_dtoa_r+0x350>
 8024d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024d92:	f7e3 fca3 	bl	80086dc <__aeabi_ddiv>
 8024d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024d9a:	e028      	b.n	8024dee <_dtoa_r+0x39e>
 8024d9c:	2602      	movs	r6, #2
 8024d9e:	e7f2      	b.n	8024d86 <_dtoa_r+0x336>
 8024da0:	07e1      	lsls	r1, r4, #31
 8024da2:	d508      	bpl.n	8024db6 <_dtoa_r+0x366>
 8024da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024da8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024dac:	f7e3 fb6c 	bl	8008488 <__aeabi_dmul>
 8024db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024db4:	3601      	adds	r6, #1
 8024db6:	1064      	asrs	r4, r4, #1
 8024db8:	3508      	adds	r5, #8
 8024dba:	e7e5      	b.n	8024d88 <_dtoa_r+0x338>
 8024dbc:	f000 80d2 	beq.w	8024f64 <_dtoa_r+0x514>
 8024dc0:	427c      	negs	r4, r7
 8024dc2:	4b92      	ldr	r3, [pc, #584]	@ (802500c <_dtoa_r+0x5bc>)
 8024dc4:	4d92      	ldr	r5, [pc, #584]	@ (8025010 <_dtoa_r+0x5c0>)
 8024dc6:	f004 020f 	and.w	r2, r4, #15
 8024dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024dd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8024dd6:	f7e3 fb57 	bl	8008488 <__aeabi_dmul>
 8024dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024dde:	1124      	asrs	r4, r4, #4
 8024de0:	2300      	movs	r3, #0
 8024de2:	2602      	movs	r6, #2
 8024de4:	2c00      	cmp	r4, #0
 8024de6:	f040 80b2 	bne.w	8024f4e <_dtoa_r+0x4fe>
 8024dea:	2b00      	cmp	r3, #0
 8024dec:	d1d3      	bne.n	8024d96 <_dtoa_r+0x346>
 8024dee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024df0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	f000 80b7 	beq.w	8024f68 <_dtoa_r+0x518>
 8024dfa:	4b86      	ldr	r3, [pc, #536]	@ (8025014 <_dtoa_r+0x5c4>)
 8024dfc:	2200      	movs	r2, #0
 8024dfe:	4620      	mov	r0, r4
 8024e00:	4629      	mov	r1, r5
 8024e02:	f7e3 fdb3 	bl	800896c <__aeabi_dcmplt>
 8024e06:	2800      	cmp	r0, #0
 8024e08:	f000 80ae 	beq.w	8024f68 <_dtoa_r+0x518>
 8024e0c:	9b07      	ldr	r3, [sp, #28]
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	f000 80aa 	beq.w	8024f68 <_dtoa_r+0x518>
 8024e14:	9b00      	ldr	r3, [sp, #0]
 8024e16:	2b00      	cmp	r3, #0
 8024e18:	dd37      	ble.n	8024e8a <_dtoa_r+0x43a>
 8024e1a:	1e7b      	subs	r3, r7, #1
 8024e1c:	9304      	str	r3, [sp, #16]
 8024e1e:	4620      	mov	r0, r4
 8024e20:	4b7d      	ldr	r3, [pc, #500]	@ (8025018 <_dtoa_r+0x5c8>)
 8024e22:	2200      	movs	r2, #0
 8024e24:	4629      	mov	r1, r5
 8024e26:	f7e3 fb2f 	bl	8008488 <__aeabi_dmul>
 8024e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024e2e:	9c00      	ldr	r4, [sp, #0]
 8024e30:	3601      	adds	r6, #1
 8024e32:	4630      	mov	r0, r6
 8024e34:	f7e3 fabe 	bl	80083b4 <__aeabi_i2d>
 8024e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024e3c:	f7e3 fb24 	bl	8008488 <__aeabi_dmul>
 8024e40:	4b76      	ldr	r3, [pc, #472]	@ (802501c <_dtoa_r+0x5cc>)
 8024e42:	2200      	movs	r2, #0
 8024e44:	f7e3 f96a 	bl	800811c <__adddf3>
 8024e48:	4605      	mov	r5, r0
 8024e4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8024e4e:	2c00      	cmp	r4, #0
 8024e50:	f040 808d 	bne.w	8024f6e <_dtoa_r+0x51e>
 8024e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024e58:	4b71      	ldr	r3, [pc, #452]	@ (8025020 <_dtoa_r+0x5d0>)
 8024e5a:	2200      	movs	r2, #0
 8024e5c:	f7e3 f95c 	bl	8008118 <__aeabi_dsub>
 8024e60:	4602      	mov	r2, r0
 8024e62:	460b      	mov	r3, r1
 8024e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024e68:	462a      	mov	r2, r5
 8024e6a:	4633      	mov	r3, r6
 8024e6c:	f7e3 fd9c 	bl	80089a8 <__aeabi_dcmpgt>
 8024e70:	2800      	cmp	r0, #0
 8024e72:	f040 828b 	bne.w	802538c <_dtoa_r+0x93c>
 8024e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024e7a:	462a      	mov	r2, r5
 8024e7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8024e80:	f7e3 fd74 	bl	800896c <__aeabi_dcmplt>
 8024e84:	2800      	cmp	r0, #0
 8024e86:	f040 8128 	bne.w	80250da <_dtoa_r+0x68a>
 8024e8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8024e8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8024e92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	f2c0 815a 	blt.w	802514e <_dtoa_r+0x6fe>
 8024e9a:	2f0e      	cmp	r7, #14
 8024e9c:	f300 8157 	bgt.w	802514e <_dtoa_r+0x6fe>
 8024ea0:	4b5a      	ldr	r3, [pc, #360]	@ (802500c <_dtoa_r+0x5bc>)
 8024ea2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8024ea6:	ed93 7b00 	vldr	d7, [r3]
 8024eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	ed8d 7b00 	vstr	d7, [sp]
 8024eb2:	da03      	bge.n	8024ebc <_dtoa_r+0x46c>
 8024eb4:	9b07      	ldr	r3, [sp, #28]
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	f340 8101 	ble.w	80250be <_dtoa_r+0x66e>
 8024ebc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8024ec0:	4656      	mov	r6, sl
 8024ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024ec6:	4620      	mov	r0, r4
 8024ec8:	4629      	mov	r1, r5
 8024eca:	f7e3 fc07 	bl	80086dc <__aeabi_ddiv>
 8024ece:	f7e3 fd8b 	bl	80089e8 <__aeabi_d2iz>
 8024ed2:	4680      	mov	r8, r0
 8024ed4:	f7e3 fa6e 	bl	80083b4 <__aeabi_i2d>
 8024ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024edc:	f7e3 fad4 	bl	8008488 <__aeabi_dmul>
 8024ee0:	4602      	mov	r2, r0
 8024ee2:	460b      	mov	r3, r1
 8024ee4:	4620      	mov	r0, r4
 8024ee6:	4629      	mov	r1, r5
 8024ee8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8024eec:	f7e3 f914 	bl	8008118 <__aeabi_dsub>
 8024ef0:	f806 4b01 	strb.w	r4, [r6], #1
 8024ef4:	9d07      	ldr	r5, [sp, #28]
 8024ef6:	eba6 040a 	sub.w	r4, r6, sl
 8024efa:	42a5      	cmp	r5, r4
 8024efc:	4602      	mov	r2, r0
 8024efe:	460b      	mov	r3, r1
 8024f00:	f040 8117 	bne.w	8025132 <_dtoa_r+0x6e2>
 8024f04:	f7e3 f90a 	bl	800811c <__adddf3>
 8024f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024f0c:	4604      	mov	r4, r0
 8024f0e:	460d      	mov	r5, r1
 8024f10:	f7e3 fd4a 	bl	80089a8 <__aeabi_dcmpgt>
 8024f14:	2800      	cmp	r0, #0
 8024f16:	f040 80f9 	bne.w	802510c <_dtoa_r+0x6bc>
 8024f1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024f1e:	4620      	mov	r0, r4
 8024f20:	4629      	mov	r1, r5
 8024f22:	f7e3 fd19 	bl	8008958 <__aeabi_dcmpeq>
 8024f26:	b118      	cbz	r0, 8024f30 <_dtoa_r+0x4e0>
 8024f28:	f018 0f01 	tst.w	r8, #1
 8024f2c:	f040 80ee 	bne.w	802510c <_dtoa_r+0x6bc>
 8024f30:	4649      	mov	r1, r9
 8024f32:	4658      	mov	r0, fp
 8024f34:	f000 ff5a 	bl	8025dec <_Bfree>
 8024f38:	2300      	movs	r3, #0
 8024f3a:	7033      	strb	r3, [r6, #0]
 8024f3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024f3e:	3701      	adds	r7, #1
 8024f40:	601f      	str	r7, [r3, #0]
 8024f42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024f44:	2b00      	cmp	r3, #0
 8024f46:	f000 831d 	beq.w	8025584 <_dtoa_r+0xb34>
 8024f4a:	601e      	str	r6, [r3, #0]
 8024f4c:	e31a      	b.n	8025584 <_dtoa_r+0xb34>
 8024f4e:	07e2      	lsls	r2, r4, #31
 8024f50:	d505      	bpl.n	8024f5e <_dtoa_r+0x50e>
 8024f52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024f56:	f7e3 fa97 	bl	8008488 <__aeabi_dmul>
 8024f5a:	3601      	adds	r6, #1
 8024f5c:	2301      	movs	r3, #1
 8024f5e:	1064      	asrs	r4, r4, #1
 8024f60:	3508      	adds	r5, #8
 8024f62:	e73f      	b.n	8024de4 <_dtoa_r+0x394>
 8024f64:	2602      	movs	r6, #2
 8024f66:	e742      	b.n	8024dee <_dtoa_r+0x39e>
 8024f68:	9c07      	ldr	r4, [sp, #28]
 8024f6a:	9704      	str	r7, [sp, #16]
 8024f6c:	e761      	b.n	8024e32 <_dtoa_r+0x3e2>
 8024f6e:	4b27      	ldr	r3, [pc, #156]	@ (802500c <_dtoa_r+0x5bc>)
 8024f70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024f72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024f76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024f7a:	4454      	add	r4, sl
 8024f7c:	2900      	cmp	r1, #0
 8024f7e:	d053      	beq.n	8025028 <_dtoa_r+0x5d8>
 8024f80:	4928      	ldr	r1, [pc, #160]	@ (8025024 <_dtoa_r+0x5d4>)
 8024f82:	2000      	movs	r0, #0
 8024f84:	f7e3 fbaa 	bl	80086dc <__aeabi_ddiv>
 8024f88:	4633      	mov	r3, r6
 8024f8a:	462a      	mov	r2, r5
 8024f8c:	f7e3 f8c4 	bl	8008118 <__aeabi_dsub>
 8024f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8024f94:	4656      	mov	r6, sl
 8024f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024f9a:	f7e3 fd25 	bl	80089e8 <__aeabi_d2iz>
 8024f9e:	4605      	mov	r5, r0
 8024fa0:	f7e3 fa08 	bl	80083b4 <__aeabi_i2d>
 8024fa4:	4602      	mov	r2, r0
 8024fa6:	460b      	mov	r3, r1
 8024fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024fac:	f7e3 f8b4 	bl	8008118 <__aeabi_dsub>
 8024fb0:	3530      	adds	r5, #48	@ 0x30
 8024fb2:	4602      	mov	r2, r0
 8024fb4:	460b      	mov	r3, r1
 8024fb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024fba:	f806 5b01 	strb.w	r5, [r6], #1
 8024fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8024fc2:	f7e3 fcd3 	bl	800896c <__aeabi_dcmplt>
 8024fc6:	2800      	cmp	r0, #0
 8024fc8:	d171      	bne.n	80250ae <_dtoa_r+0x65e>
 8024fca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024fce:	4911      	ldr	r1, [pc, #68]	@ (8025014 <_dtoa_r+0x5c4>)
 8024fd0:	2000      	movs	r0, #0
 8024fd2:	f7e3 f8a1 	bl	8008118 <__aeabi_dsub>
 8024fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8024fda:	f7e3 fcc7 	bl	800896c <__aeabi_dcmplt>
 8024fde:	2800      	cmp	r0, #0
 8024fe0:	f040 8095 	bne.w	802510e <_dtoa_r+0x6be>
 8024fe4:	42a6      	cmp	r6, r4
 8024fe6:	f43f af50 	beq.w	8024e8a <_dtoa_r+0x43a>
 8024fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8024fee:	4b0a      	ldr	r3, [pc, #40]	@ (8025018 <_dtoa_r+0x5c8>)
 8024ff0:	2200      	movs	r2, #0
 8024ff2:	f7e3 fa49 	bl	8008488 <__aeabi_dmul>
 8024ff6:	4b08      	ldr	r3, [pc, #32]	@ (8025018 <_dtoa_r+0x5c8>)
 8024ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8024ffc:	2200      	movs	r2, #0
 8024ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025002:	f7e3 fa41 	bl	8008488 <__aeabi_dmul>
 8025006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802500a:	e7c4      	b.n	8024f96 <_dtoa_r+0x546>
 802500c:	08030f88 	.word	0x08030f88
 8025010:	08030f60 	.word	0x08030f60
 8025014:	3ff00000 	.word	0x3ff00000
 8025018:	40240000 	.word	0x40240000
 802501c:	401c0000 	.word	0x401c0000
 8025020:	40140000 	.word	0x40140000
 8025024:	3fe00000 	.word	0x3fe00000
 8025028:	4631      	mov	r1, r6
 802502a:	4628      	mov	r0, r5
 802502c:	f7e3 fa2c 	bl	8008488 <__aeabi_dmul>
 8025030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8025034:	9415      	str	r4, [sp, #84]	@ 0x54
 8025036:	4656      	mov	r6, sl
 8025038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802503c:	f7e3 fcd4 	bl	80089e8 <__aeabi_d2iz>
 8025040:	4605      	mov	r5, r0
 8025042:	f7e3 f9b7 	bl	80083b4 <__aeabi_i2d>
 8025046:	4602      	mov	r2, r0
 8025048:	460b      	mov	r3, r1
 802504a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802504e:	f7e3 f863 	bl	8008118 <__aeabi_dsub>
 8025052:	3530      	adds	r5, #48	@ 0x30
 8025054:	f806 5b01 	strb.w	r5, [r6], #1
 8025058:	4602      	mov	r2, r0
 802505a:	460b      	mov	r3, r1
 802505c:	42a6      	cmp	r6, r4
 802505e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025062:	f04f 0200 	mov.w	r2, #0
 8025066:	d124      	bne.n	80250b2 <_dtoa_r+0x662>
 8025068:	4bac      	ldr	r3, [pc, #688]	@ (802531c <_dtoa_r+0x8cc>)
 802506a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802506e:	f7e3 f855 	bl	800811c <__adddf3>
 8025072:	4602      	mov	r2, r0
 8025074:	460b      	mov	r3, r1
 8025076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802507a:	f7e3 fc95 	bl	80089a8 <__aeabi_dcmpgt>
 802507e:	2800      	cmp	r0, #0
 8025080:	d145      	bne.n	802510e <_dtoa_r+0x6be>
 8025082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8025086:	49a5      	ldr	r1, [pc, #660]	@ (802531c <_dtoa_r+0x8cc>)
 8025088:	2000      	movs	r0, #0
 802508a:	f7e3 f845 	bl	8008118 <__aeabi_dsub>
 802508e:	4602      	mov	r2, r0
 8025090:	460b      	mov	r3, r1
 8025092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025096:	f7e3 fc69 	bl	800896c <__aeabi_dcmplt>
 802509a:	2800      	cmp	r0, #0
 802509c:	f43f aef5 	beq.w	8024e8a <_dtoa_r+0x43a>
 80250a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80250a2:	1e73      	subs	r3, r6, #1
 80250a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80250a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80250aa:	2b30      	cmp	r3, #48	@ 0x30
 80250ac:	d0f8      	beq.n	80250a0 <_dtoa_r+0x650>
 80250ae:	9f04      	ldr	r7, [sp, #16]
 80250b0:	e73e      	b.n	8024f30 <_dtoa_r+0x4e0>
 80250b2:	4b9b      	ldr	r3, [pc, #620]	@ (8025320 <_dtoa_r+0x8d0>)
 80250b4:	f7e3 f9e8 	bl	8008488 <__aeabi_dmul>
 80250b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80250bc:	e7bc      	b.n	8025038 <_dtoa_r+0x5e8>
 80250be:	d10c      	bne.n	80250da <_dtoa_r+0x68a>
 80250c0:	4b98      	ldr	r3, [pc, #608]	@ (8025324 <_dtoa_r+0x8d4>)
 80250c2:	2200      	movs	r2, #0
 80250c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80250c8:	f7e3 f9de 	bl	8008488 <__aeabi_dmul>
 80250cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80250d0:	f7e3 fc60 	bl	8008994 <__aeabi_dcmpge>
 80250d4:	2800      	cmp	r0, #0
 80250d6:	f000 8157 	beq.w	8025388 <_dtoa_r+0x938>
 80250da:	2400      	movs	r4, #0
 80250dc:	4625      	mov	r5, r4
 80250de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80250e0:	43db      	mvns	r3, r3
 80250e2:	9304      	str	r3, [sp, #16]
 80250e4:	4656      	mov	r6, sl
 80250e6:	2700      	movs	r7, #0
 80250e8:	4621      	mov	r1, r4
 80250ea:	4658      	mov	r0, fp
 80250ec:	f000 fe7e 	bl	8025dec <_Bfree>
 80250f0:	2d00      	cmp	r5, #0
 80250f2:	d0dc      	beq.n	80250ae <_dtoa_r+0x65e>
 80250f4:	b12f      	cbz	r7, 8025102 <_dtoa_r+0x6b2>
 80250f6:	42af      	cmp	r7, r5
 80250f8:	d003      	beq.n	8025102 <_dtoa_r+0x6b2>
 80250fa:	4639      	mov	r1, r7
 80250fc:	4658      	mov	r0, fp
 80250fe:	f000 fe75 	bl	8025dec <_Bfree>
 8025102:	4629      	mov	r1, r5
 8025104:	4658      	mov	r0, fp
 8025106:	f000 fe71 	bl	8025dec <_Bfree>
 802510a:	e7d0      	b.n	80250ae <_dtoa_r+0x65e>
 802510c:	9704      	str	r7, [sp, #16]
 802510e:	4633      	mov	r3, r6
 8025110:	461e      	mov	r6, r3
 8025112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025116:	2a39      	cmp	r2, #57	@ 0x39
 8025118:	d107      	bne.n	802512a <_dtoa_r+0x6da>
 802511a:	459a      	cmp	sl, r3
 802511c:	d1f8      	bne.n	8025110 <_dtoa_r+0x6c0>
 802511e:	9a04      	ldr	r2, [sp, #16]
 8025120:	3201      	adds	r2, #1
 8025122:	9204      	str	r2, [sp, #16]
 8025124:	2230      	movs	r2, #48	@ 0x30
 8025126:	f88a 2000 	strb.w	r2, [sl]
 802512a:	781a      	ldrb	r2, [r3, #0]
 802512c:	3201      	adds	r2, #1
 802512e:	701a      	strb	r2, [r3, #0]
 8025130:	e7bd      	b.n	80250ae <_dtoa_r+0x65e>
 8025132:	4b7b      	ldr	r3, [pc, #492]	@ (8025320 <_dtoa_r+0x8d0>)
 8025134:	2200      	movs	r2, #0
 8025136:	f7e3 f9a7 	bl	8008488 <__aeabi_dmul>
 802513a:	2200      	movs	r2, #0
 802513c:	2300      	movs	r3, #0
 802513e:	4604      	mov	r4, r0
 8025140:	460d      	mov	r5, r1
 8025142:	f7e3 fc09 	bl	8008958 <__aeabi_dcmpeq>
 8025146:	2800      	cmp	r0, #0
 8025148:	f43f aebb 	beq.w	8024ec2 <_dtoa_r+0x472>
 802514c:	e6f0      	b.n	8024f30 <_dtoa_r+0x4e0>
 802514e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025150:	2a00      	cmp	r2, #0
 8025152:	f000 80db 	beq.w	802530c <_dtoa_r+0x8bc>
 8025156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025158:	2a01      	cmp	r2, #1
 802515a:	f300 80bf 	bgt.w	80252dc <_dtoa_r+0x88c>
 802515e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025160:	2a00      	cmp	r2, #0
 8025162:	f000 80b7 	beq.w	80252d4 <_dtoa_r+0x884>
 8025166:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802516a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802516c:	4646      	mov	r6, r8
 802516e:	9a08      	ldr	r2, [sp, #32]
 8025170:	2101      	movs	r1, #1
 8025172:	441a      	add	r2, r3
 8025174:	4658      	mov	r0, fp
 8025176:	4498      	add	r8, r3
 8025178:	9208      	str	r2, [sp, #32]
 802517a:	f000 ff35 	bl	8025fe8 <__i2b>
 802517e:	4605      	mov	r5, r0
 8025180:	b15e      	cbz	r6, 802519a <_dtoa_r+0x74a>
 8025182:	9b08      	ldr	r3, [sp, #32]
 8025184:	2b00      	cmp	r3, #0
 8025186:	dd08      	ble.n	802519a <_dtoa_r+0x74a>
 8025188:	42b3      	cmp	r3, r6
 802518a:	9a08      	ldr	r2, [sp, #32]
 802518c:	bfa8      	it	ge
 802518e:	4633      	movge	r3, r6
 8025190:	eba8 0803 	sub.w	r8, r8, r3
 8025194:	1af6      	subs	r6, r6, r3
 8025196:	1ad3      	subs	r3, r2, r3
 8025198:	9308      	str	r3, [sp, #32]
 802519a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802519c:	b1f3      	cbz	r3, 80251dc <_dtoa_r+0x78c>
 802519e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80251a0:	2b00      	cmp	r3, #0
 80251a2:	f000 80b7 	beq.w	8025314 <_dtoa_r+0x8c4>
 80251a6:	b18c      	cbz	r4, 80251cc <_dtoa_r+0x77c>
 80251a8:	4629      	mov	r1, r5
 80251aa:	4622      	mov	r2, r4
 80251ac:	4658      	mov	r0, fp
 80251ae:	f000 ffdb 	bl	8026168 <__pow5mult>
 80251b2:	464a      	mov	r2, r9
 80251b4:	4601      	mov	r1, r0
 80251b6:	4605      	mov	r5, r0
 80251b8:	4658      	mov	r0, fp
 80251ba:	f000 ff2b 	bl	8026014 <__multiply>
 80251be:	4649      	mov	r1, r9
 80251c0:	9004      	str	r0, [sp, #16]
 80251c2:	4658      	mov	r0, fp
 80251c4:	f000 fe12 	bl	8025dec <_Bfree>
 80251c8:	9b04      	ldr	r3, [sp, #16]
 80251ca:	4699      	mov	r9, r3
 80251cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80251ce:	1b1a      	subs	r2, r3, r4
 80251d0:	d004      	beq.n	80251dc <_dtoa_r+0x78c>
 80251d2:	4649      	mov	r1, r9
 80251d4:	4658      	mov	r0, fp
 80251d6:	f000 ffc7 	bl	8026168 <__pow5mult>
 80251da:	4681      	mov	r9, r0
 80251dc:	2101      	movs	r1, #1
 80251de:	4658      	mov	r0, fp
 80251e0:	f000 ff02 	bl	8025fe8 <__i2b>
 80251e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80251e6:	4604      	mov	r4, r0
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	f000 81cf 	beq.w	802558c <_dtoa_r+0xb3c>
 80251ee:	461a      	mov	r2, r3
 80251f0:	4601      	mov	r1, r0
 80251f2:	4658      	mov	r0, fp
 80251f4:	f000 ffb8 	bl	8026168 <__pow5mult>
 80251f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251fa:	2b01      	cmp	r3, #1
 80251fc:	4604      	mov	r4, r0
 80251fe:	f300 8095 	bgt.w	802532c <_dtoa_r+0x8dc>
 8025202:	9b02      	ldr	r3, [sp, #8]
 8025204:	2b00      	cmp	r3, #0
 8025206:	f040 8087 	bne.w	8025318 <_dtoa_r+0x8c8>
 802520a:	9b03      	ldr	r3, [sp, #12]
 802520c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025210:	2b00      	cmp	r3, #0
 8025212:	f040 8089 	bne.w	8025328 <_dtoa_r+0x8d8>
 8025216:	9b03      	ldr	r3, [sp, #12]
 8025218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802521c:	0d1b      	lsrs	r3, r3, #20
 802521e:	051b      	lsls	r3, r3, #20
 8025220:	b12b      	cbz	r3, 802522e <_dtoa_r+0x7de>
 8025222:	9b08      	ldr	r3, [sp, #32]
 8025224:	3301      	adds	r3, #1
 8025226:	9308      	str	r3, [sp, #32]
 8025228:	f108 0801 	add.w	r8, r8, #1
 802522c:	2301      	movs	r3, #1
 802522e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025232:	2b00      	cmp	r3, #0
 8025234:	f000 81b0 	beq.w	8025598 <_dtoa_r+0xb48>
 8025238:	6923      	ldr	r3, [r4, #16]
 802523a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802523e:	6918      	ldr	r0, [r3, #16]
 8025240:	f000 fe86 	bl	8025f50 <__hi0bits>
 8025244:	f1c0 0020 	rsb	r0, r0, #32
 8025248:	9b08      	ldr	r3, [sp, #32]
 802524a:	4418      	add	r0, r3
 802524c:	f010 001f 	ands.w	r0, r0, #31
 8025250:	d077      	beq.n	8025342 <_dtoa_r+0x8f2>
 8025252:	f1c0 0320 	rsb	r3, r0, #32
 8025256:	2b04      	cmp	r3, #4
 8025258:	dd6b      	ble.n	8025332 <_dtoa_r+0x8e2>
 802525a:	9b08      	ldr	r3, [sp, #32]
 802525c:	f1c0 001c 	rsb	r0, r0, #28
 8025260:	4403      	add	r3, r0
 8025262:	4480      	add	r8, r0
 8025264:	4406      	add	r6, r0
 8025266:	9308      	str	r3, [sp, #32]
 8025268:	f1b8 0f00 	cmp.w	r8, #0
 802526c:	dd05      	ble.n	802527a <_dtoa_r+0x82a>
 802526e:	4649      	mov	r1, r9
 8025270:	4642      	mov	r2, r8
 8025272:	4658      	mov	r0, fp
 8025274:	f000 ffd2 	bl	802621c <__lshift>
 8025278:	4681      	mov	r9, r0
 802527a:	9b08      	ldr	r3, [sp, #32]
 802527c:	2b00      	cmp	r3, #0
 802527e:	dd05      	ble.n	802528c <_dtoa_r+0x83c>
 8025280:	4621      	mov	r1, r4
 8025282:	461a      	mov	r2, r3
 8025284:	4658      	mov	r0, fp
 8025286:	f000 ffc9 	bl	802621c <__lshift>
 802528a:	4604      	mov	r4, r0
 802528c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802528e:	2b00      	cmp	r3, #0
 8025290:	d059      	beq.n	8025346 <_dtoa_r+0x8f6>
 8025292:	4621      	mov	r1, r4
 8025294:	4648      	mov	r0, r9
 8025296:	f001 f82d 	bl	80262f4 <__mcmp>
 802529a:	2800      	cmp	r0, #0
 802529c:	da53      	bge.n	8025346 <_dtoa_r+0x8f6>
 802529e:	1e7b      	subs	r3, r7, #1
 80252a0:	9304      	str	r3, [sp, #16]
 80252a2:	4649      	mov	r1, r9
 80252a4:	2300      	movs	r3, #0
 80252a6:	220a      	movs	r2, #10
 80252a8:	4658      	mov	r0, fp
 80252aa:	f000 fdc1 	bl	8025e30 <__multadd>
 80252ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80252b0:	4681      	mov	r9, r0
 80252b2:	2b00      	cmp	r3, #0
 80252b4:	f000 8172 	beq.w	802559c <_dtoa_r+0xb4c>
 80252b8:	2300      	movs	r3, #0
 80252ba:	4629      	mov	r1, r5
 80252bc:	220a      	movs	r2, #10
 80252be:	4658      	mov	r0, fp
 80252c0:	f000 fdb6 	bl	8025e30 <__multadd>
 80252c4:	9b00      	ldr	r3, [sp, #0]
 80252c6:	2b00      	cmp	r3, #0
 80252c8:	4605      	mov	r5, r0
 80252ca:	dc67      	bgt.n	802539c <_dtoa_r+0x94c>
 80252cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252ce:	2b02      	cmp	r3, #2
 80252d0:	dc41      	bgt.n	8025356 <_dtoa_r+0x906>
 80252d2:	e063      	b.n	802539c <_dtoa_r+0x94c>
 80252d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80252d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80252da:	e746      	b.n	802516a <_dtoa_r+0x71a>
 80252dc:	9b07      	ldr	r3, [sp, #28]
 80252de:	1e5c      	subs	r4, r3, #1
 80252e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80252e2:	42a3      	cmp	r3, r4
 80252e4:	bfbf      	itttt	lt
 80252e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80252e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80252ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80252ec:	1ae3      	sublt	r3, r4, r3
 80252ee:	bfb4      	ite	lt
 80252f0:	18d2      	addlt	r2, r2, r3
 80252f2:	1b1c      	subge	r4, r3, r4
 80252f4:	9b07      	ldr	r3, [sp, #28]
 80252f6:	bfbc      	itt	lt
 80252f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80252fa:	2400      	movlt	r4, #0
 80252fc:	2b00      	cmp	r3, #0
 80252fe:	bfb5      	itete	lt
 8025300:	eba8 0603 	sublt.w	r6, r8, r3
 8025304:	9b07      	ldrge	r3, [sp, #28]
 8025306:	2300      	movlt	r3, #0
 8025308:	4646      	movge	r6, r8
 802530a:	e730      	b.n	802516e <_dtoa_r+0x71e>
 802530c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802530e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025310:	4646      	mov	r6, r8
 8025312:	e735      	b.n	8025180 <_dtoa_r+0x730>
 8025314:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025316:	e75c      	b.n	80251d2 <_dtoa_r+0x782>
 8025318:	2300      	movs	r3, #0
 802531a:	e788      	b.n	802522e <_dtoa_r+0x7de>
 802531c:	3fe00000 	.word	0x3fe00000
 8025320:	40240000 	.word	0x40240000
 8025324:	40140000 	.word	0x40140000
 8025328:	9b02      	ldr	r3, [sp, #8]
 802532a:	e780      	b.n	802522e <_dtoa_r+0x7de>
 802532c:	2300      	movs	r3, #0
 802532e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025330:	e782      	b.n	8025238 <_dtoa_r+0x7e8>
 8025332:	d099      	beq.n	8025268 <_dtoa_r+0x818>
 8025334:	9a08      	ldr	r2, [sp, #32]
 8025336:	331c      	adds	r3, #28
 8025338:	441a      	add	r2, r3
 802533a:	4498      	add	r8, r3
 802533c:	441e      	add	r6, r3
 802533e:	9208      	str	r2, [sp, #32]
 8025340:	e792      	b.n	8025268 <_dtoa_r+0x818>
 8025342:	4603      	mov	r3, r0
 8025344:	e7f6      	b.n	8025334 <_dtoa_r+0x8e4>
 8025346:	9b07      	ldr	r3, [sp, #28]
 8025348:	9704      	str	r7, [sp, #16]
 802534a:	2b00      	cmp	r3, #0
 802534c:	dc20      	bgt.n	8025390 <_dtoa_r+0x940>
 802534e:	9300      	str	r3, [sp, #0]
 8025350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025352:	2b02      	cmp	r3, #2
 8025354:	dd1e      	ble.n	8025394 <_dtoa_r+0x944>
 8025356:	9b00      	ldr	r3, [sp, #0]
 8025358:	2b00      	cmp	r3, #0
 802535a:	f47f aec0 	bne.w	80250de <_dtoa_r+0x68e>
 802535e:	4621      	mov	r1, r4
 8025360:	2205      	movs	r2, #5
 8025362:	4658      	mov	r0, fp
 8025364:	f000 fd64 	bl	8025e30 <__multadd>
 8025368:	4601      	mov	r1, r0
 802536a:	4604      	mov	r4, r0
 802536c:	4648      	mov	r0, r9
 802536e:	f000 ffc1 	bl	80262f4 <__mcmp>
 8025372:	2800      	cmp	r0, #0
 8025374:	f77f aeb3 	ble.w	80250de <_dtoa_r+0x68e>
 8025378:	4656      	mov	r6, sl
 802537a:	2331      	movs	r3, #49	@ 0x31
 802537c:	f806 3b01 	strb.w	r3, [r6], #1
 8025380:	9b04      	ldr	r3, [sp, #16]
 8025382:	3301      	adds	r3, #1
 8025384:	9304      	str	r3, [sp, #16]
 8025386:	e6ae      	b.n	80250e6 <_dtoa_r+0x696>
 8025388:	9c07      	ldr	r4, [sp, #28]
 802538a:	9704      	str	r7, [sp, #16]
 802538c:	4625      	mov	r5, r4
 802538e:	e7f3      	b.n	8025378 <_dtoa_r+0x928>
 8025390:	9b07      	ldr	r3, [sp, #28]
 8025392:	9300      	str	r3, [sp, #0]
 8025394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025396:	2b00      	cmp	r3, #0
 8025398:	f000 8104 	beq.w	80255a4 <_dtoa_r+0xb54>
 802539c:	2e00      	cmp	r6, #0
 802539e:	dd05      	ble.n	80253ac <_dtoa_r+0x95c>
 80253a0:	4629      	mov	r1, r5
 80253a2:	4632      	mov	r2, r6
 80253a4:	4658      	mov	r0, fp
 80253a6:	f000 ff39 	bl	802621c <__lshift>
 80253aa:	4605      	mov	r5, r0
 80253ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80253ae:	2b00      	cmp	r3, #0
 80253b0:	d05a      	beq.n	8025468 <_dtoa_r+0xa18>
 80253b2:	6869      	ldr	r1, [r5, #4]
 80253b4:	4658      	mov	r0, fp
 80253b6:	f000 fcd9 	bl	8025d6c <_Balloc>
 80253ba:	4606      	mov	r6, r0
 80253bc:	b928      	cbnz	r0, 80253ca <_dtoa_r+0x97a>
 80253be:	4b84      	ldr	r3, [pc, #528]	@ (80255d0 <_dtoa_r+0xb80>)
 80253c0:	4602      	mov	r2, r0
 80253c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80253c6:	f7ff bb5a 	b.w	8024a7e <_dtoa_r+0x2e>
 80253ca:	692a      	ldr	r2, [r5, #16]
 80253cc:	3202      	adds	r2, #2
 80253ce:	0092      	lsls	r2, r2, #2
 80253d0:	f105 010c 	add.w	r1, r5, #12
 80253d4:	300c      	adds	r0, #12
 80253d6:	f7ff fa8a 	bl	80248ee <memcpy>
 80253da:	2201      	movs	r2, #1
 80253dc:	4631      	mov	r1, r6
 80253de:	4658      	mov	r0, fp
 80253e0:	f000 ff1c 	bl	802621c <__lshift>
 80253e4:	f10a 0301 	add.w	r3, sl, #1
 80253e8:	9307      	str	r3, [sp, #28]
 80253ea:	9b00      	ldr	r3, [sp, #0]
 80253ec:	4453      	add	r3, sl
 80253ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80253f0:	9b02      	ldr	r3, [sp, #8]
 80253f2:	f003 0301 	and.w	r3, r3, #1
 80253f6:	462f      	mov	r7, r5
 80253f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80253fa:	4605      	mov	r5, r0
 80253fc:	9b07      	ldr	r3, [sp, #28]
 80253fe:	4621      	mov	r1, r4
 8025400:	3b01      	subs	r3, #1
 8025402:	4648      	mov	r0, r9
 8025404:	9300      	str	r3, [sp, #0]
 8025406:	f7ff fa98 	bl	802493a <quorem>
 802540a:	4639      	mov	r1, r7
 802540c:	9002      	str	r0, [sp, #8]
 802540e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025412:	4648      	mov	r0, r9
 8025414:	f000 ff6e 	bl	80262f4 <__mcmp>
 8025418:	462a      	mov	r2, r5
 802541a:	9008      	str	r0, [sp, #32]
 802541c:	4621      	mov	r1, r4
 802541e:	4658      	mov	r0, fp
 8025420:	f000 ff84 	bl	802632c <__mdiff>
 8025424:	68c2      	ldr	r2, [r0, #12]
 8025426:	4606      	mov	r6, r0
 8025428:	bb02      	cbnz	r2, 802546c <_dtoa_r+0xa1c>
 802542a:	4601      	mov	r1, r0
 802542c:	4648      	mov	r0, r9
 802542e:	f000 ff61 	bl	80262f4 <__mcmp>
 8025432:	4602      	mov	r2, r0
 8025434:	4631      	mov	r1, r6
 8025436:	4658      	mov	r0, fp
 8025438:	920e      	str	r2, [sp, #56]	@ 0x38
 802543a:	f000 fcd7 	bl	8025dec <_Bfree>
 802543e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025440:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025442:	9e07      	ldr	r6, [sp, #28]
 8025444:	ea43 0102 	orr.w	r1, r3, r2
 8025448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802544a:	4319      	orrs	r1, r3
 802544c:	d110      	bne.n	8025470 <_dtoa_r+0xa20>
 802544e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025452:	d029      	beq.n	80254a8 <_dtoa_r+0xa58>
 8025454:	9b08      	ldr	r3, [sp, #32]
 8025456:	2b00      	cmp	r3, #0
 8025458:	dd02      	ble.n	8025460 <_dtoa_r+0xa10>
 802545a:	9b02      	ldr	r3, [sp, #8]
 802545c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8025460:	9b00      	ldr	r3, [sp, #0]
 8025462:	f883 8000 	strb.w	r8, [r3]
 8025466:	e63f      	b.n	80250e8 <_dtoa_r+0x698>
 8025468:	4628      	mov	r0, r5
 802546a:	e7bb      	b.n	80253e4 <_dtoa_r+0x994>
 802546c:	2201      	movs	r2, #1
 802546e:	e7e1      	b.n	8025434 <_dtoa_r+0x9e4>
 8025470:	9b08      	ldr	r3, [sp, #32]
 8025472:	2b00      	cmp	r3, #0
 8025474:	db04      	blt.n	8025480 <_dtoa_r+0xa30>
 8025476:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025478:	430b      	orrs	r3, r1
 802547a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802547c:	430b      	orrs	r3, r1
 802547e:	d120      	bne.n	80254c2 <_dtoa_r+0xa72>
 8025480:	2a00      	cmp	r2, #0
 8025482:	dded      	ble.n	8025460 <_dtoa_r+0xa10>
 8025484:	4649      	mov	r1, r9
 8025486:	2201      	movs	r2, #1
 8025488:	4658      	mov	r0, fp
 802548a:	f000 fec7 	bl	802621c <__lshift>
 802548e:	4621      	mov	r1, r4
 8025490:	4681      	mov	r9, r0
 8025492:	f000 ff2f 	bl	80262f4 <__mcmp>
 8025496:	2800      	cmp	r0, #0
 8025498:	dc03      	bgt.n	80254a2 <_dtoa_r+0xa52>
 802549a:	d1e1      	bne.n	8025460 <_dtoa_r+0xa10>
 802549c:	f018 0f01 	tst.w	r8, #1
 80254a0:	d0de      	beq.n	8025460 <_dtoa_r+0xa10>
 80254a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80254a6:	d1d8      	bne.n	802545a <_dtoa_r+0xa0a>
 80254a8:	9a00      	ldr	r2, [sp, #0]
 80254aa:	2339      	movs	r3, #57	@ 0x39
 80254ac:	7013      	strb	r3, [r2, #0]
 80254ae:	4633      	mov	r3, r6
 80254b0:	461e      	mov	r6, r3
 80254b2:	3b01      	subs	r3, #1
 80254b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80254b8:	2a39      	cmp	r2, #57	@ 0x39
 80254ba:	d052      	beq.n	8025562 <_dtoa_r+0xb12>
 80254bc:	3201      	adds	r2, #1
 80254be:	701a      	strb	r2, [r3, #0]
 80254c0:	e612      	b.n	80250e8 <_dtoa_r+0x698>
 80254c2:	2a00      	cmp	r2, #0
 80254c4:	dd07      	ble.n	80254d6 <_dtoa_r+0xa86>
 80254c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80254ca:	d0ed      	beq.n	80254a8 <_dtoa_r+0xa58>
 80254cc:	9a00      	ldr	r2, [sp, #0]
 80254ce:	f108 0301 	add.w	r3, r8, #1
 80254d2:	7013      	strb	r3, [r2, #0]
 80254d4:	e608      	b.n	80250e8 <_dtoa_r+0x698>
 80254d6:	9b07      	ldr	r3, [sp, #28]
 80254d8:	9a07      	ldr	r2, [sp, #28]
 80254da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80254de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80254e0:	4293      	cmp	r3, r2
 80254e2:	d028      	beq.n	8025536 <_dtoa_r+0xae6>
 80254e4:	4649      	mov	r1, r9
 80254e6:	2300      	movs	r3, #0
 80254e8:	220a      	movs	r2, #10
 80254ea:	4658      	mov	r0, fp
 80254ec:	f000 fca0 	bl	8025e30 <__multadd>
 80254f0:	42af      	cmp	r7, r5
 80254f2:	4681      	mov	r9, r0
 80254f4:	f04f 0300 	mov.w	r3, #0
 80254f8:	f04f 020a 	mov.w	r2, #10
 80254fc:	4639      	mov	r1, r7
 80254fe:	4658      	mov	r0, fp
 8025500:	d107      	bne.n	8025512 <_dtoa_r+0xac2>
 8025502:	f000 fc95 	bl	8025e30 <__multadd>
 8025506:	4607      	mov	r7, r0
 8025508:	4605      	mov	r5, r0
 802550a:	9b07      	ldr	r3, [sp, #28]
 802550c:	3301      	adds	r3, #1
 802550e:	9307      	str	r3, [sp, #28]
 8025510:	e774      	b.n	80253fc <_dtoa_r+0x9ac>
 8025512:	f000 fc8d 	bl	8025e30 <__multadd>
 8025516:	4629      	mov	r1, r5
 8025518:	4607      	mov	r7, r0
 802551a:	2300      	movs	r3, #0
 802551c:	220a      	movs	r2, #10
 802551e:	4658      	mov	r0, fp
 8025520:	f000 fc86 	bl	8025e30 <__multadd>
 8025524:	4605      	mov	r5, r0
 8025526:	e7f0      	b.n	802550a <_dtoa_r+0xaba>
 8025528:	9b00      	ldr	r3, [sp, #0]
 802552a:	2b00      	cmp	r3, #0
 802552c:	bfcc      	ite	gt
 802552e:	461e      	movgt	r6, r3
 8025530:	2601      	movle	r6, #1
 8025532:	4456      	add	r6, sl
 8025534:	2700      	movs	r7, #0
 8025536:	4649      	mov	r1, r9
 8025538:	2201      	movs	r2, #1
 802553a:	4658      	mov	r0, fp
 802553c:	f000 fe6e 	bl	802621c <__lshift>
 8025540:	4621      	mov	r1, r4
 8025542:	4681      	mov	r9, r0
 8025544:	f000 fed6 	bl	80262f4 <__mcmp>
 8025548:	2800      	cmp	r0, #0
 802554a:	dcb0      	bgt.n	80254ae <_dtoa_r+0xa5e>
 802554c:	d102      	bne.n	8025554 <_dtoa_r+0xb04>
 802554e:	f018 0f01 	tst.w	r8, #1
 8025552:	d1ac      	bne.n	80254ae <_dtoa_r+0xa5e>
 8025554:	4633      	mov	r3, r6
 8025556:	461e      	mov	r6, r3
 8025558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802555c:	2a30      	cmp	r2, #48	@ 0x30
 802555e:	d0fa      	beq.n	8025556 <_dtoa_r+0xb06>
 8025560:	e5c2      	b.n	80250e8 <_dtoa_r+0x698>
 8025562:	459a      	cmp	sl, r3
 8025564:	d1a4      	bne.n	80254b0 <_dtoa_r+0xa60>
 8025566:	9b04      	ldr	r3, [sp, #16]
 8025568:	3301      	adds	r3, #1
 802556a:	9304      	str	r3, [sp, #16]
 802556c:	2331      	movs	r3, #49	@ 0x31
 802556e:	f88a 3000 	strb.w	r3, [sl]
 8025572:	e5b9      	b.n	80250e8 <_dtoa_r+0x698>
 8025574:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025576:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80255d4 <_dtoa_r+0xb84>
 802557a:	b11b      	cbz	r3, 8025584 <_dtoa_r+0xb34>
 802557c:	f10a 0308 	add.w	r3, sl, #8
 8025580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025582:	6013      	str	r3, [r2, #0]
 8025584:	4650      	mov	r0, sl
 8025586:	b019      	add	sp, #100	@ 0x64
 8025588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802558c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802558e:	2b01      	cmp	r3, #1
 8025590:	f77f ae37 	ble.w	8025202 <_dtoa_r+0x7b2>
 8025594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025596:	930a      	str	r3, [sp, #40]	@ 0x28
 8025598:	2001      	movs	r0, #1
 802559a:	e655      	b.n	8025248 <_dtoa_r+0x7f8>
 802559c:	9b00      	ldr	r3, [sp, #0]
 802559e:	2b00      	cmp	r3, #0
 80255a0:	f77f aed6 	ble.w	8025350 <_dtoa_r+0x900>
 80255a4:	4656      	mov	r6, sl
 80255a6:	4621      	mov	r1, r4
 80255a8:	4648      	mov	r0, r9
 80255aa:	f7ff f9c6 	bl	802493a <quorem>
 80255ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80255b2:	f806 8b01 	strb.w	r8, [r6], #1
 80255b6:	9b00      	ldr	r3, [sp, #0]
 80255b8:	eba6 020a 	sub.w	r2, r6, sl
 80255bc:	4293      	cmp	r3, r2
 80255be:	ddb3      	ble.n	8025528 <_dtoa_r+0xad8>
 80255c0:	4649      	mov	r1, r9
 80255c2:	2300      	movs	r3, #0
 80255c4:	220a      	movs	r2, #10
 80255c6:	4658      	mov	r0, fp
 80255c8:	f000 fc32 	bl	8025e30 <__multadd>
 80255cc:	4681      	mov	r9, r0
 80255ce:	e7ea      	b.n	80255a6 <_dtoa_r+0xb56>
 80255d0:	08030e88 	.word	0x08030e88
 80255d4:	08030e23 	.word	0x08030e23

080255d8 <_free_r>:
 80255d8:	b538      	push	{r3, r4, r5, lr}
 80255da:	4605      	mov	r5, r0
 80255dc:	2900      	cmp	r1, #0
 80255de:	d041      	beq.n	8025664 <_free_r+0x8c>
 80255e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80255e4:	1f0c      	subs	r4, r1, #4
 80255e6:	2b00      	cmp	r3, #0
 80255e8:	bfb8      	it	lt
 80255ea:	18e4      	addlt	r4, r4, r3
 80255ec:	f7fd f808 	bl	8022600 <__malloc_lock>
 80255f0:	4a1d      	ldr	r2, [pc, #116]	@ (8025668 <_free_r+0x90>)
 80255f2:	6813      	ldr	r3, [r2, #0]
 80255f4:	b933      	cbnz	r3, 8025604 <_free_r+0x2c>
 80255f6:	6063      	str	r3, [r4, #4]
 80255f8:	6014      	str	r4, [r2, #0]
 80255fa:	4628      	mov	r0, r5
 80255fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025600:	f7fd b804 	b.w	802260c <__malloc_unlock>
 8025604:	42a3      	cmp	r3, r4
 8025606:	d908      	bls.n	802561a <_free_r+0x42>
 8025608:	6820      	ldr	r0, [r4, #0]
 802560a:	1821      	adds	r1, r4, r0
 802560c:	428b      	cmp	r3, r1
 802560e:	bf01      	itttt	eq
 8025610:	6819      	ldreq	r1, [r3, #0]
 8025612:	685b      	ldreq	r3, [r3, #4]
 8025614:	1809      	addeq	r1, r1, r0
 8025616:	6021      	streq	r1, [r4, #0]
 8025618:	e7ed      	b.n	80255f6 <_free_r+0x1e>
 802561a:	461a      	mov	r2, r3
 802561c:	685b      	ldr	r3, [r3, #4]
 802561e:	b10b      	cbz	r3, 8025624 <_free_r+0x4c>
 8025620:	42a3      	cmp	r3, r4
 8025622:	d9fa      	bls.n	802561a <_free_r+0x42>
 8025624:	6811      	ldr	r1, [r2, #0]
 8025626:	1850      	adds	r0, r2, r1
 8025628:	42a0      	cmp	r0, r4
 802562a:	d10b      	bne.n	8025644 <_free_r+0x6c>
 802562c:	6820      	ldr	r0, [r4, #0]
 802562e:	4401      	add	r1, r0
 8025630:	1850      	adds	r0, r2, r1
 8025632:	4283      	cmp	r3, r0
 8025634:	6011      	str	r1, [r2, #0]
 8025636:	d1e0      	bne.n	80255fa <_free_r+0x22>
 8025638:	6818      	ldr	r0, [r3, #0]
 802563a:	685b      	ldr	r3, [r3, #4]
 802563c:	6053      	str	r3, [r2, #4]
 802563e:	4408      	add	r0, r1
 8025640:	6010      	str	r0, [r2, #0]
 8025642:	e7da      	b.n	80255fa <_free_r+0x22>
 8025644:	d902      	bls.n	802564c <_free_r+0x74>
 8025646:	230c      	movs	r3, #12
 8025648:	602b      	str	r3, [r5, #0]
 802564a:	e7d6      	b.n	80255fa <_free_r+0x22>
 802564c:	6820      	ldr	r0, [r4, #0]
 802564e:	1821      	adds	r1, r4, r0
 8025650:	428b      	cmp	r3, r1
 8025652:	bf04      	itt	eq
 8025654:	6819      	ldreq	r1, [r3, #0]
 8025656:	685b      	ldreq	r3, [r3, #4]
 8025658:	6063      	str	r3, [r4, #4]
 802565a:	bf04      	itt	eq
 802565c:	1809      	addeq	r1, r1, r0
 802565e:	6021      	streq	r1, [r4, #0]
 8025660:	6054      	str	r4, [r2, #4]
 8025662:	e7ca      	b.n	80255fa <_free_r+0x22>
 8025664:	bd38      	pop	{r3, r4, r5, pc}
 8025666:	bf00      	nop
 8025668:	20002800 	.word	0x20002800

0802566c <rshift>:
 802566c:	6903      	ldr	r3, [r0, #16]
 802566e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8025672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025676:	ea4f 1261 	mov.w	r2, r1, asr #5
 802567a:	f100 0414 	add.w	r4, r0, #20
 802567e:	dd45      	ble.n	802570c <rshift+0xa0>
 8025680:	f011 011f 	ands.w	r1, r1, #31
 8025684:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8025688:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802568c:	d10c      	bne.n	80256a8 <rshift+0x3c>
 802568e:	f100 0710 	add.w	r7, r0, #16
 8025692:	4629      	mov	r1, r5
 8025694:	42b1      	cmp	r1, r6
 8025696:	d334      	bcc.n	8025702 <rshift+0x96>
 8025698:	1a9b      	subs	r3, r3, r2
 802569a:	009b      	lsls	r3, r3, #2
 802569c:	1eea      	subs	r2, r5, #3
 802569e:	4296      	cmp	r6, r2
 80256a0:	bf38      	it	cc
 80256a2:	2300      	movcc	r3, #0
 80256a4:	4423      	add	r3, r4
 80256a6:	e015      	b.n	80256d4 <rshift+0x68>
 80256a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80256ac:	f1c1 0820 	rsb	r8, r1, #32
 80256b0:	40cf      	lsrs	r7, r1
 80256b2:	f105 0e04 	add.w	lr, r5, #4
 80256b6:	46a1      	mov	r9, r4
 80256b8:	4576      	cmp	r6, lr
 80256ba:	46f4      	mov	ip, lr
 80256bc:	d815      	bhi.n	80256ea <rshift+0x7e>
 80256be:	1a9a      	subs	r2, r3, r2
 80256c0:	0092      	lsls	r2, r2, #2
 80256c2:	3a04      	subs	r2, #4
 80256c4:	3501      	adds	r5, #1
 80256c6:	42ae      	cmp	r6, r5
 80256c8:	bf38      	it	cc
 80256ca:	2200      	movcc	r2, #0
 80256cc:	18a3      	adds	r3, r4, r2
 80256ce:	50a7      	str	r7, [r4, r2]
 80256d0:	b107      	cbz	r7, 80256d4 <rshift+0x68>
 80256d2:	3304      	adds	r3, #4
 80256d4:	1b1a      	subs	r2, r3, r4
 80256d6:	42a3      	cmp	r3, r4
 80256d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80256dc:	bf08      	it	eq
 80256de:	2300      	moveq	r3, #0
 80256e0:	6102      	str	r2, [r0, #16]
 80256e2:	bf08      	it	eq
 80256e4:	6143      	streq	r3, [r0, #20]
 80256e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80256ea:	f8dc c000 	ldr.w	ip, [ip]
 80256ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80256f2:	ea4c 0707 	orr.w	r7, ip, r7
 80256f6:	f849 7b04 	str.w	r7, [r9], #4
 80256fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80256fe:	40cf      	lsrs	r7, r1
 8025700:	e7da      	b.n	80256b8 <rshift+0x4c>
 8025702:	f851 cb04 	ldr.w	ip, [r1], #4
 8025706:	f847 cf04 	str.w	ip, [r7, #4]!
 802570a:	e7c3      	b.n	8025694 <rshift+0x28>
 802570c:	4623      	mov	r3, r4
 802570e:	e7e1      	b.n	80256d4 <rshift+0x68>

08025710 <__hexdig_fun>:
 8025710:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8025714:	2b09      	cmp	r3, #9
 8025716:	d802      	bhi.n	802571e <__hexdig_fun+0xe>
 8025718:	3820      	subs	r0, #32
 802571a:	b2c0      	uxtb	r0, r0
 802571c:	4770      	bx	lr
 802571e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8025722:	2b05      	cmp	r3, #5
 8025724:	d801      	bhi.n	802572a <__hexdig_fun+0x1a>
 8025726:	3847      	subs	r0, #71	@ 0x47
 8025728:	e7f7      	b.n	802571a <__hexdig_fun+0xa>
 802572a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802572e:	2b05      	cmp	r3, #5
 8025730:	d801      	bhi.n	8025736 <__hexdig_fun+0x26>
 8025732:	3827      	subs	r0, #39	@ 0x27
 8025734:	e7f1      	b.n	802571a <__hexdig_fun+0xa>
 8025736:	2000      	movs	r0, #0
 8025738:	4770      	bx	lr
	...

0802573c <__gethex>:
 802573c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025740:	b085      	sub	sp, #20
 8025742:	468a      	mov	sl, r1
 8025744:	9302      	str	r3, [sp, #8]
 8025746:	680b      	ldr	r3, [r1, #0]
 8025748:	9001      	str	r0, [sp, #4]
 802574a:	4690      	mov	r8, r2
 802574c:	1c9c      	adds	r4, r3, #2
 802574e:	46a1      	mov	r9, r4
 8025750:	f814 0b01 	ldrb.w	r0, [r4], #1
 8025754:	2830      	cmp	r0, #48	@ 0x30
 8025756:	d0fa      	beq.n	802574e <__gethex+0x12>
 8025758:	eba9 0303 	sub.w	r3, r9, r3
 802575c:	f1a3 0b02 	sub.w	fp, r3, #2
 8025760:	f7ff ffd6 	bl	8025710 <__hexdig_fun>
 8025764:	4605      	mov	r5, r0
 8025766:	2800      	cmp	r0, #0
 8025768:	d168      	bne.n	802583c <__gethex+0x100>
 802576a:	49a0      	ldr	r1, [pc, #640]	@ (80259ec <__gethex+0x2b0>)
 802576c:	2201      	movs	r2, #1
 802576e:	4648      	mov	r0, r9
 8025770:	f7fe ff81 	bl	8024676 <strncmp>
 8025774:	4607      	mov	r7, r0
 8025776:	2800      	cmp	r0, #0
 8025778:	d167      	bne.n	802584a <__gethex+0x10e>
 802577a:	f899 0001 	ldrb.w	r0, [r9, #1]
 802577e:	4626      	mov	r6, r4
 8025780:	f7ff ffc6 	bl	8025710 <__hexdig_fun>
 8025784:	2800      	cmp	r0, #0
 8025786:	d062      	beq.n	802584e <__gethex+0x112>
 8025788:	4623      	mov	r3, r4
 802578a:	7818      	ldrb	r0, [r3, #0]
 802578c:	2830      	cmp	r0, #48	@ 0x30
 802578e:	4699      	mov	r9, r3
 8025790:	f103 0301 	add.w	r3, r3, #1
 8025794:	d0f9      	beq.n	802578a <__gethex+0x4e>
 8025796:	f7ff ffbb 	bl	8025710 <__hexdig_fun>
 802579a:	fab0 f580 	clz	r5, r0
 802579e:	096d      	lsrs	r5, r5, #5
 80257a0:	f04f 0b01 	mov.w	fp, #1
 80257a4:	464a      	mov	r2, r9
 80257a6:	4616      	mov	r6, r2
 80257a8:	3201      	adds	r2, #1
 80257aa:	7830      	ldrb	r0, [r6, #0]
 80257ac:	f7ff ffb0 	bl	8025710 <__hexdig_fun>
 80257b0:	2800      	cmp	r0, #0
 80257b2:	d1f8      	bne.n	80257a6 <__gethex+0x6a>
 80257b4:	498d      	ldr	r1, [pc, #564]	@ (80259ec <__gethex+0x2b0>)
 80257b6:	2201      	movs	r2, #1
 80257b8:	4630      	mov	r0, r6
 80257ba:	f7fe ff5c 	bl	8024676 <strncmp>
 80257be:	2800      	cmp	r0, #0
 80257c0:	d13f      	bne.n	8025842 <__gethex+0x106>
 80257c2:	b944      	cbnz	r4, 80257d6 <__gethex+0x9a>
 80257c4:	1c74      	adds	r4, r6, #1
 80257c6:	4622      	mov	r2, r4
 80257c8:	4616      	mov	r6, r2
 80257ca:	3201      	adds	r2, #1
 80257cc:	7830      	ldrb	r0, [r6, #0]
 80257ce:	f7ff ff9f 	bl	8025710 <__hexdig_fun>
 80257d2:	2800      	cmp	r0, #0
 80257d4:	d1f8      	bne.n	80257c8 <__gethex+0x8c>
 80257d6:	1ba4      	subs	r4, r4, r6
 80257d8:	00a7      	lsls	r7, r4, #2
 80257da:	7833      	ldrb	r3, [r6, #0]
 80257dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80257e0:	2b50      	cmp	r3, #80	@ 0x50
 80257e2:	d13e      	bne.n	8025862 <__gethex+0x126>
 80257e4:	7873      	ldrb	r3, [r6, #1]
 80257e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80257e8:	d033      	beq.n	8025852 <__gethex+0x116>
 80257ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80257ec:	d034      	beq.n	8025858 <__gethex+0x11c>
 80257ee:	1c71      	adds	r1, r6, #1
 80257f0:	2400      	movs	r4, #0
 80257f2:	7808      	ldrb	r0, [r1, #0]
 80257f4:	f7ff ff8c 	bl	8025710 <__hexdig_fun>
 80257f8:	1e43      	subs	r3, r0, #1
 80257fa:	b2db      	uxtb	r3, r3
 80257fc:	2b18      	cmp	r3, #24
 80257fe:	d830      	bhi.n	8025862 <__gethex+0x126>
 8025800:	f1a0 0210 	sub.w	r2, r0, #16
 8025804:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8025808:	f7ff ff82 	bl	8025710 <__hexdig_fun>
 802580c:	f100 3cff 	add.w	ip, r0, #4294967295
 8025810:	fa5f fc8c 	uxtb.w	ip, ip
 8025814:	f1bc 0f18 	cmp.w	ip, #24
 8025818:	f04f 030a 	mov.w	r3, #10
 802581c:	d91e      	bls.n	802585c <__gethex+0x120>
 802581e:	b104      	cbz	r4, 8025822 <__gethex+0xe6>
 8025820:	4252      	negs	r2, r2
 8025822:	4417      	add	r7, r2
 8025824:	f8ca 1000 	str.w	r1, [sl]
 8025828:	b1ed      	cbz	r5, 8025866 <__gethex+0x12a>
 802582a:	f1bb 0f00 	cmp.w	fp, #0
 802582e:	bf0c      	ite	eq
 8025830:	2506      	moveq	r5, #6
 8025832:	2500      	movne	r5, #0
 8025834:	4628      	mov	r0, r5
 8025836:	b005      	add	sp, #20
 8025838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802583c:	2500      	movs	r5, #0
 802583e:	462c      	mov	r4, r5
 8025840:	e7b0      	b.n	80257a4 <__gethex+0x68>
 8025842:	2c00      	cmp	r4, #0
 8025844:	d1c7      	bne.n	80257d6 <__gethex+0x9a>
 8025846:	4627      	mov	r7, r4
 8025848:	e7c7      	b.n	80257da <__gethex+0x9e>
 802584a:	464e      	mov	r6, r9
 802584c:	462f      	mov	r7, r5
 802584e:	2501      	movs	r5, #1
 8025850:	e7c3      	b.n	80257da <__gethex+0x9e>
 8025852:	2400      	movs	r4, #0
 8025854:	1cb1      	adds	r1, r6, #2
 8025856:	e7cc      	b.n	80257f2 <__gethex+0xb6>
 8025858:	2401      	movs	r4, #1
 802585a:	e7fb      	b.n	8025854 <__gethex+0x118>
 802585c:	fb03 0002 	mla	r0, r3, r2, r0
 8025860:	e7ce      	b.n	8025800 <__gethex+0xc4>
 8025862:	4631      	mov	r1, r6
 8025864:	e7de      	b.n	8025824 <__gethex+0xe8>
 8025866:	eba6 0309 	sub.w	r3, r6, r9
 802586a:	3b01      	subs	r3, #1
 802586c:	4629      	mov	r1, r5
 802586e:	2b07      	cmp	r3, #7
 8025870:	dc0a      	bgt.n	8025888 <__gethex+0x14c>
 8025872:	9801      	ldr	r0, [sp, #4]
 8025874:	f000 fa7a 	bl	8025d6c <_Balloc>
 8025878:	4604      	mov	r4, r0
 802587a:	b940      	cbnz	r0, 802588e <__gethex+0x152>
 802587c:	4b5c      	ldr	r3, [pc, #368]	@ (80259f0 <__gethex+0x2b4>)
 802587e:	4602      	mov	r2, r0
 8025880:	21e4      	movs	r1, #228	@ 0xe4
 8025882:	485c      	ldr	r0, [pc, #368]	@ (80259f4 <__gethex+0x2b8>)
 8025884:	f7fc fdd0 	bl	8022428 <__assert_func>
 8025888:	3101      	adds	r1, #1
 802588a:	105b      	asrs	r3, r3, #1
 802588c:	e7ef      	b.n	802586e <__gethex+0x132>
 802588e:	f100 0a14 	add.w	sl, r0, #20
 8025892:	2300      	movs	r3, #0
 8025894:	4655      	mov	r5, sl
 8025896:	469b      	mov	fp, r3
 8025898:	45b1      	cmp	r9, r6
 802589a:	d337      	bcc.n	802590c <__gethex+0x1d0>
 802589c:	f845 bb04 	str.w	fp, [r5], #4
 80258a0:	eba5 050a 	sub.w	r5, r5, sl
 80258a4:	10ad      	asrs	r5, r5, #2
 80258a6:	6125      	str	r5, [r4, #16]
 80258a8:	4658      	mov	r0, fp
 80258aa:	f000 fb51 	bl	8025f50 <__hi0bits>
 80258ae:	016d      	lsls	r5, r5, #5
 80258b0:	f8d8 6000 	ldr.w	r6, [r8]
 80258b4:	1a2d      	subs	r5, r5, r0
 80258b6:	42b5      	cmp	r5, r6
 80258b8:	dd54      	ble.n	8025964 <__gethex+0x228>
 80258ba:	1bad      	subs	r5, r5, r6
 80258bc:	4629      	mov	r1, r5
 80258be:	4620      	mov	r0, r4
 80258c0:	f000 fee5 	bl	802668e <__any_on>
 80258c4:	4681      	mov	r9, r0
 80258c6:	b178      	cbz	r0, 80258e8 <__gethex+0x1ac>
 80258c8:	1e6b      	subs	r3, r5, #1
 80258ca:	1159      	asrs	r1, r3, #5
 80258cc:	f003 021f 	and.w	r2, r3, #31
 80258d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80258d4:	f04f 0901 	mov.w	r9, #1
 80258d8:	fa09 f202 	lsl.w	r2, r9, r2
 80258dc:	420a      	tst	r2, r1
 80258de:	d003      	beq.n	80258e8 <__gethex+0x1ac>
 80258e0:	454b      	cmp	r3, r9
 80258e2:	dc36      	bgt.n	8025952 <__gethex+0x216>
 80258e4:	f04f 0902 	mov.w	r9, #2
 80258e8:	4629      	mov	r1, r5
 80258ea:	4620      	mov	r0, r4
 80258ec:	f7ff febe 	bl	802566c <rshift>
 80258f0:	442f      	add	r7, r5
 80258f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80258f6:	42bb      	cmp	r3, r7
 80258f8:	da42      	bge.n	8025980 <__gethex+0x244>
 80258fa:	9801      	ldr	r0, [sp, #4]
 80258fc:	4621      	mov	r1, r4
 80258fe:	f000 fa75 	bl	8025dec <_Bfree>
 8025902:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025904:	2300      	movs	r3, #0
 8025906:	6013      	str	r3, [r2, #0]
 8025908:	25a3      	movs	r5, #163	@ 0xa3
 802590a:	e793      	b.n	8025834 <__gethex+0xf8>
 802590c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8025910:	2a2e      	cmp	r2, #46	@ 0x2e
 8025912:	d012      	beq.n	802593a <__gethex+0x1fe>
 8025914:	2b20      	cmp	r3, #32
 8025916:	d104      	bne.n	8025922 <__gethex+0x1e6>
 8025918:	f845 bb04 	str.w	fp, [r5], #4
 802591c:	f04f 0b00 	mov.w	fp, #0
 8025920:	465b      	mov	r3, fp
 8025922:	7830      	ldrb	r0, [r6, #0]
 8025924:	9303      	str	r3, [sp, #12]
 8025926:	f7ff fef3 	bl	8025710 <__hexdig_fun>
 802592a:	9b03      	ldr	r3, [sp, #12]
 802592c:	f000 000f 	and.w	r0, r0, #15
 8025930:	4098      	lsls	r0, r3
 8025932:	ea4b 0b00 	orr.w	fp, fp, r0
 8025936:	3304      	adds	r3, #4
 8025938:	e7ae      	b.n	8025898 <__gethex+0x15c>
 802593a:	45b1      	cmp	r9, r6
 802593c:	d8ea      	bhi.n	8025914 <__gethex+0x1d8>
 802593e:	492b      	ldr	r1, [pc, #172]	@ (80259ec <__gethex+0x2b0>)
 8025940:	9303      	str	r3, [sp, #12]
 8025942:	2201      	movs	r2, #1
 8025944:	4630      	mov	r0, r6
 8025946:	f7fe fe96 	bl	8024676 <strncmp>
 802594a:	9b03      	ldr	r3, [sp, #12]
 802594c:	2800      	cmp	r0, #0
 802594e:	d1e1      	bne.n	8025914 <__gethex+0x1d8>
 8025950:	e7a2      	b.n	8025898 <__gethex+0x15c>
 8025952:	1ea9      	subs	r1, r5, #2
 8025954:	4620      	mov	r0, r4
 8025956:	f000 fe9a 	bl	802668e <__any_on>
 802595a:	2800      	cmp	r0, #0
 802595c:	d0c2      	beq.n	80258e4 <__gethex+0x1a8>
 802595e:	f04f 0903 	mov.w	r9, #3
 8025962:	e7c1      	b.n	80258e8 <__gethex+0x1ac>
 8025964:	da09      	bge.n	802597a <__gethex+0x23e>
 8025966:	1b75      	subs	r5, r6, r5
 8025968:	4621      	mov	r1, r4
 802596a:	9801      	ldr	r0, [sp, #4]
 802596c:	462a      	mov	r2, r5
 802596e:	f000 fc55 	bl	802621c <__lshift>
 8025972:	1b7f      	subs	r7, r7, r5
 8025974:	4604      	mov	r4, r0
 8025976:	f100 0a14 	add.w	sl, r0, #20
 802597a:	f04f 0900 	mov.w	r9, #0
 802597e:	e7b8      	b.n	80258f2 <__gethex+0x1b6>
 8025980:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025984:	42bd      	cmp	r5, r7
 8025986:	dd6f      	ble.n	8025a68 <__gethex+0x32c>
 8025988:	1bed      	subs	r5, r5, r7
 802598a:	42ae      	cmp	r6, r5
 802598c:	dc34      	bgt.n	80259f8 <__gethex+0x2bc>
 802598e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8025992:	2b02      	cmp	r3, #2
 8025994:	d022      	beq.n	80259dc <__gethex+0x2a0>
 8025996:	2b03      	cmp	r3, #3
 8025998:	d024      	beq.n	80259e4 <__gethex+0x2a8>
 802599a:	2b01      	cmp	r3, #1
 802599c:	d115      	bne.n	80259ca <__gethex+0x28e>
 802599e:	42ae      	cmp	r6, r5
 80259a0:	d113      	bne.n	80259ca <__gethex+0x28e>
 80259a2:	2e01      	cmp	r6, #1
 80259a4:	d10b      	bne.n	80259be <__gethex+0x282>
 80259a6:	9a02      	ldr	r2, [sp, #8]
 80259a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80259ac:	6013      	str	r3, [r2, #0]
 80259ae:	2301      	movs	r3, #1
 80259b0:	6123      	str	r3, [r4, #16]
 80259b2:	f8ca 3000 	str.w	r3, [sl]
 80259b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80259b8:	2562      	movs	r5, #98	@ 0x62
 80259ba:	601c      	str	r4, [r3, #0]
 80259bc:	e73a      	b.n	8025834 <__gethex+0xf8>
 80259be:	1e71      	subs	r1, r6, #1
 80259c0:	4620      	mov	r0, r4
 80259c2:	f000 fe64 	bl	802668e <__any_on>
 80259c6:	2800      	cmp	r0, #0
 80259c8:	d1ed      	bne.n	80259a6 <__gethex+0x26a>
 80259ca:	9801      	ldr	r0, [sp, #4]
 80259cc:	4621      	mov	r1, r4
 80259ce:	f000 fa0d 	bl	8025dec <_Bfree>
 80259d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80259d4:	2300      	movs	r3, #0
 80259d6:	6013      	str	r3, [r2, #0]
 80259d8:	2550      	movs	r5, #80	@ 0x50
 80259da:	e72b      	b.n	8025834 <__gethex+0xf8>
 80259dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80259de:	2b00      	cmp	r3, #0
 80259e0:	d1f3      	bne.n	80259ca <__gethex+0x28e>
 80259e2:	e7e0      	b.n	80259a6 <__gethex+0x26a>
 80259e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80259e6:	2b00      	cmp	r3, #0
 80259e8:	d1dd      	bne.n	80259a6 <__gethex+0x26a>
 80259ea:	e7ee      	b.n	80259ca <__gethex+0x28e>
 80259ec:	08030c1c 	.word	0x08030c1c
 80259f0:	08030e88 	.word	0x08030e88
 80259f4:	08030e99 	.word	0x08030e99
 80259f8:	1e6f      	subs	r7, r5, #1
 80259fa:	f1b9 0f00 	cmp.w	r9, #0
 80259fe:	d130      	bne.n	8025a62 <__gethex+0x326>
 8025a00:	b127      	cbz	r7, 8025a0c <__gethex+0x2d0>
 8025a02:	4639      	mov	r1, r7
 8025a04:	4620      	mov	r0, r4
 8025a06:	f000 fe42 	bl	802668e <__any_on>
 8025a0a:	4681      	mov	r9, r0
 8025a0c:	117a      	asrs	r2, r7, #5
 8025a0e:	2301      	movs	r3, #1
 8025a10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8025a14:	f007 071f 	and.w	r7, r7, #31
 8025a18:	40bb      	lsls	r3, r7
 8025a1a:	4213      	tst	r3, r2
 8025a1c:	4629      	mov	r1, r5
 8025a1e:	4620      	mov	r0, r4
 8025a20:	bf18      	it	ne
 8025a22:	f049 0902 	orrne.w	r9, r9, #2
 8025a26:	f7ff fe21 	bl	802566c <rshift>
 8025a2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8025a2e:	1b76      	subs	r6, r6, r5
 8025a30:	2502      	movs	r5, #2
 8025a32:	f1b9 0f00 	cmp.w	r9, #0
 8025a36:	d047      	beq.n	8025ac8 <__gethex+0x38c>
 8025a38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8025a3c:	2b02      	cmp	r3, #2
 8025a3e:	d015      	beq.n	8025a6c <__gethex+0x330>
 8025a40:	2b03      	cmp	r3, #3
 8025a42:	d017      	beq.n	8025a74 <__gethex+0x338>
 8025a44:	2b01      	cmp	r3, #1
 8025a46:	d109      	bne.n	8025a5c <__gethex+0x320>
 8025a48:	f019 0f02 	tst.w	r9, #2
 8025a4c:	d006      	beq.n	8025a5c <__gethex+0x320>
 8025a4e:	f8da 3000 	ldr.w	r3, [sl]
 8025a52:	ea49 0903 	orr.w	r9, r9, r3
 8025a56:	f019 0f01 	tst.w	r9, #1
 8025a5a:	d10e      	bne.n	8025a7a <__gethex+0x33e>
 8025a5c:	f045 0510 	orr.w	r5, r5, #16
 8025a60:	e032      	b.n	8025ac8 <__gethex+0x38c>
 8025a62:	f04f 0901 	mov.w	r9, #1
 8025a66:	e7d1      	b.n	8025a0c <__gethex+0x2d0>
 8025a68:	2501      	movs	r5, #1
 8025a6a:	e7e2      	b.n	8025a32 <__gethex+0x2f6>
 8025a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a6e:	f1c3 0301 	rsb	r3, r3, #1
 8025a72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a76:	2b00      	cmp	r3, #0
 8025a78:	d0f0      	beq.n	8025a5c <__gethex+0x320>
 8025a7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8025a7e:	f104 0314 	add.w	r3, r4, #20
 8025a82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8025a86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8025a8a:	f04f 0c00 	mov.w	ip, #0
 8025a8e:	4618      	mov	r0, r3
 8025a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8025a94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8025a98:	d01b      	beq.n	8025ad2 <__gethex+0x396>
 8025a9a:	3201      	adds	r2, #1
 8025a9c:	6002      	str	r2, [r0, #0]
 8025a9e:	2d02      	cmp	r5, #2
 8025aa0:	f104 0314 	add.w	r3, r4, #20
 8025aa4:	d13c      	bne.n	8025b20 <__gethex+0x3e4>
 8025aa6:	f8d8 2000 	ldr.w	r2, [r8]
 8025aaa:	3a01      	subs	r2, #1
 8025aac:	42b2      	cmp	r2, r6
 8025aae:	d109      	bne.n	8025ac4 <__gethex+0x388>
 8025ab0:	1171      	asrs	r1, r6, #5
 8025ab2:	2201      	movs	r2, #1
 8025ab4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8025ab8:	f006 061f 	and.w	r6, r6, #31
 8025abc:	fa02 f606 	lsl.w	r6, r2, r6
 8025ac0:	421e      	tst	r6, r3
 8025ac2:	d13a      	bne.n	8025b3a <__gethex+0x3fe>
 8025ac4:	f045 0520 	orr.w	r5, r5, #32
 8025ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025aca:	601c      	str	r4, [r3, #0]
 8025acc:	9b02      	ldr	r3, [sp, #8]
 8025ace:	601f      	str	r7, [r3, #0]
 8025ad0:	e6b0      	b.n	8025834 <__gethex+0xf8>
 8025ad2:	4299      	cmp	r1, r3
 8025ad4:	f843 cc04 	str.w	ip, [r3, #-4]
 8025ad8:	d8d9      	bhi.n	8025a8e <__gethex+0x352>
 8025ada:	68a3      	ldr	r3, [r4, #8]
 8025adc:	459b      	cmp	fp, r3
 8025ade:	db17      	blt.n	8025b10 <__gethex+0x3d4>
 8025ae0:	6861      	ldr	r1, [r4, #4]
 8025ae2:	9801      	ldr	r0, [sp, #4]
 8025ae4:	3101      	adds	r1, #1
 8025ae6:	f000 f941 	bl	8025d6c <_Balloc>
 8025aea:	4681      	mov	r9, r0
 8025aec:	b918      	cbnz	r0, 8025af6 <__gethex+0x3ba>
 8025aee:	4b1a      	ldr	r3, [pc, #104]	@ (8025b58 <__gethex+0x41c>)
 8025af0:	4602      	mov	r2, r0
 8025af2:	2184      	movs	r1, #132	@ 0x84
 8025af4:	e6c5      	b.n	8025882 <__gethex+0x146>
 8025af6:	6922      	ldr	r2, [r4, #16]
 8025af8:	3202      	adds	r2, #2
 8025afa:	f104 010c 	add.w	r1, r4, #12
 8025afe:	0092      	lsls	r2, r2, #2
 8025b00:	300c      	adds	r0, #12
 8025b02:	f7fe fef4 	bl	80248ee <memcpy>
 8025b06:	4621      	mov	r1, r4
 8025b08:	9801      	ldr	r0, [sp, #4]
 8025b0a:	f000 f96f 	bl	8025dec <_Bfree>
 8025b0e:	464c      	mov	r4, r9
 8025b10:	6923      	ldr	r3, [r4, #16]
 8025b12:	1c5a      	adds	r2, r3, #1
 8025b14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8025b18:	6122      	str	r2, [r4, #16]
 8025b1a:	2201      	movs	r2, #1
 8025b1c:	615a      	str	r2, [r3, #20]
 8025b1e:	e7be      	b.n	8025a9e <__gethex+0x362>
 8025b20:	6922      	ldr	r2, [r4, #16]
 8025b22:	455a      	cmp	r2, fp
 8025b24:	dd0b      	ble.n	8025b3e <__gethex+0x402>
 8025b26:	2101      	movs	r1, #1
 8025b28:	4620      	mov	r0, r4
 8025b2a:	f7ff fd9f 	bl	802566c <rshift>
 8025b2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025b32:	3701      	adds	r7, #1
 8025b34:	42bb      	cmp	r3, r7
 8025b36:	f6ff aee0 	blt.w	80258fa <__gethex+0x1be>
 8025b3a:	2501      	movs	r5, #1
 8025b3c:	e7c2      	b.n	8025ac4 <__gethex+0x388>
 8025b3e:	f016 061f 	ands.w	r6, r6, #31
 8025b42:	d0fa      	beq.n	8025b3a <__gethex+0x3fe>
 8025b44:	4453      	add	r3, sl
 8025b46:	f1c6 0620 	rsb	r6, r6, #32
 8025b4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8025b4e:	f000 f9ff 	bl	8025f50 <__hi0bits>
 8025b52:	42b0      	cmp	r0, r6
 8025b54:	dbe7      	blt.n	8025b26 <__gethex+0x3ea>
 8025b56:	e7f0      	b.n	8025b3a <__gethex+0x3fe>
 8025b58:	08030e88 	.word	0x08030e88

08025b5c <L_shift>:
 8025b5c:	f1c2 0208 	rsb	r2, r2, #8
 8025b60:	0092      	lsls	r2, r2, #2
 8025b62:	b570      	push	{r4, r5, r6, lr}
 8025b64:	f1c2 0620 	rsb	r6, r2, #32
 8025b68:	6843      	ldr	r3, [r0, #4]
 8025b6a:	6804      	ldr	r4, [r0, #0]
 8025b6c:	fa03 f506 	lsl.w	r5, r3, r6
 8025b70:	432c      	orrs	r4, r5
 8025b72:	40d3      	lsrs	r3, r2
 8025b74:	6004      	str	r4, [r0, #0]
 8025b76:	f840 3f04 	str.w	r3, [r0, #4]!
 8025b7a:	4288      	cmp	r0, r1
 8025b7c:	d3f4      	bcc.n	8025b68 <L_shift+0xc>
 8025b7e:	bd70      	pop	{r4, r5, r6, pc}

08025b80 <__match>:
 8025b80:	b530      	push	{r4, r5, lr}
 8025b82:	6803      	ldr	r3, [r0, #0]
 8025b84:	3301      	adds	r3, #1
 8025b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025b8a:	b914      	cbnz	r4, 8025b92 <__match+0x12>
 8025b8c:	6003      	str	r3, [r0, #0]
 8025b8e:	2001      	movs	r0, #1
 8025b90:	bd30      	pop	{r4, r5, pc}
 8025b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025b96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8025b9a:	2d19      	cmp	r5, #25
 8025b9c:	bf98      	it	ls
 8025b9e:	3220      	addls	r2, #32
 8025ba0:	42a2      	cmp	r2, r4
 8025ba2:	d0f0      	beq.n	8025b86 <__match+0x6>
 8025ba4:	2000      	movs	r0, #0
 8025ba6:	e7f3      	b.n	8025b90 <__match+0x10>

08025ba8 <__hexnan>:
 8025ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bac:	680b      	ldr	r3, [r1, #0]
 8025bae:	6801      	ldr	r1, [r0, #0]
 8025bb0:	115e      	asrs	r6, r3, #5
 8025bb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8025bb6:	f013 031f 	ands.w	r3, r3, #31
 8025bba:	b087      	sub	sp, #28
 8025bbc:	bf18      	it	ne
 8025bbe:	3604      	addne	r6, #4
 8025bc0:	2500      	movs	r5, #0
 8025bc2:	1f37      	subs	r7, r6, #4
 8025bc4:	4682      	mov	sl, r0
 8025bc6:	4690      	mov	r8, r2
 8025bc8:	9301      	str	r3, [sp, #4]
 8025bca:	f846 5c04 	str.w	r5, [r6, #-4]
 8025bce:	46b9      	mov	r9, r7
 8025bd0:	463c      	mov	r4, r7
 8025bd2:	9502      	str	r5, [sp, #8]
 8025bd4:	46ab      	mov	fp, r5
 8025bd6:	784a      	ldrb	r2, [r1, #1]
 8025bd8:	1c4b      	adds	r3, r1, #1
 8025bda:	9303      	str	r3, [sp, #12]
 8025bdc:	b342      	cbz	r2, 8025c30 <__hexnan+0x88>
 8025bde:	4610      	mov	r0, r2
 8025be0:	9105      	str	r1, [sp, #20]
 8025be2:	9204      	str	r2, [sp, #16]
 8025be4:	f7ff fd94 	bl	8025710 <__hexdig_fun>
 8025be8:	2800      	cmp	r0, #0
 8025bea:	d151      	bne.n	8025c90 <__hexnan+0xe8>
 8025bec:	9a04      	ldr	r2, [sp, #16]
 8025bee:	9905      	ldr	r1, [sp, #20]
 8025bf0:	2a20      	cmp	r2, #32
 8025bf2:	d818      	bhi.n	8025c26 <__hexnan+0x7e>
 8025bf4:	9b02      	ldr	r3, [sp, #8]
 8025bf6:	459b      	cmp	fp, r3
 8025bf8:	dd13      	ble.n	8025c22 <__hexnan+0x7a>
 8025bfa:	454c      	cmp	r4, r9
 8025bfc:	d206      	bcs.n	8025c0c <__hexnan+0x64>
 8025bfe:	2d07      	cmp	r5, #7
 8025c00:	dc04      	bgt.n	8025c0c <__hexnan+0x64>
 8025c02:	462a      	mov	r2, r5
 8025c04:	4649      	mov	r1, r9
 8025c06:	4620      	mov	r0, r4
 8025c08:	f7ff ffa8 	bl	8025b5c <L_shift>
 8025c0c:	4544      	cmp	r4, r8
 8025c0e:	d952      	bls.n	8025cb6 <__hexnan+0x10e>
 8025c10:	2300      	movs	r3, #0
 8025c12:	f1a4 0904 	sub.w	r9, r4, #4
 8025c16:	f844 3c04 	str.w	r3, [r4, #-4]
 8025c1a:	f8cd b008 	str.w	fp, [sp, #8]
 8025c1e:	464c      	mov	r4, r9
 8025c20:	461d      	mov	r5, r3
 8025c22:	9903      	ldr	r1, [sp, #12]
 8025c24:	e7d7      	b.n	8025bd6 <__hexnan+0x2e>
 8025c26:	2a29      	cmp	r2, #41	@ 0x29
 8025c28:	d157      	bne.n	8025cda <__hexnan+0x132>
 8025c2a:	3102      	adds	r1, #2
 8025c2c:	f8ca 1000 	str.w	r1, [sl]
 8025c30:	f1bb 0f00 	cmp.w	fp, #0
 8025c34:	d051      	beq.n	8025cda <__hexnan+0x132>
 8025c36:	454c      	cmp	r4, r9
 8025c38:	d206      	bcs.n	8025c48 <__hexnan+0xa0>
 8025c3a:	2d07      	cmp	r5, #7
 8025c3c:	dc04      	bgt.n	8025c48 <__hexnan+0xa0>
 8025c3e:	462a      	mov	r2, r5
 8025c40:	4649      	mov	r1, r9
 8025c42:	4620      	mov	r0, r4
 8025c44:	f7ff ff8a 	bl	8025b5c <L_shift>
 8025c48:	4544      	cmp	r4, r8
 8025c4a:	d936      	bls.n	8025cba <__hexnan+0x112>
 8025c4c:	f1a8 0204 	sub.w	r2, r8, #4
 8025c50:	4623      	mov	r3, r4
 8025c52:	f853 1b04 	ldr.w	r1, [r3], #4
 8025c56:	f842 1f04 	str.w	r1, [r2, #4]!
 8025c5a:	429f      	cmp	r7, r3
 8025c5c:	d2f9      	bcs.n	8025c52 <__hexnan+0xaa>
 8025c5e:	1b3b      	subs	r3, r7, r4
 8025c60:	f023 0303 	bic.w	r3, r3, #3
 8025c64:	3304      	adds	r3, #4
 8025c66:	3401      	adds	r4, #1
 8025c68:	3e03      	subs	r6, #3
 8025c6a:	42b4      	cmp	r4, r6
 8025c6c:	bf88      	it	hi
 8025c6e:	2304      	movhi	r3, #4
 8025c70:	4443      	add	r3, r8
 8025c72:	2200      	movs	r2, #0
 8025c74:	f843 2b04 	str.w	r2, [r3], #4
 8025c78:	429f      	cmp	r7, r3
 8025c7a:	d2fb      	bcs.n	8025c74 <__hexnan+0xcc>
 8025c7c:	683b      	ldr	r3, [r7, #0]
 8025c7e:	b91b      	cbnz	r3, 8025c88 <__hexnan+0xe0>
 8025c80:	4547      	cmp	r7, r8
 8025c82:	d128      	bne.n	8025cd6 <__hexnan+0x12e>
 8025c84:	2301      	movs	r3, #1
 8025c86:	603b      	str	r3, [r7, #0]
 8025c88:	2005      	movs	r0, #5
 8025c8a:	b007      	add	sp, #28
 8025c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c90:	3501      	adds	r5, #1
 8025c92:	2d08      	cmp	r5, #8
 8025c94:	f10b 0b01 	add.w	fp, fp, #1
 8025c98:	dd06      	ble.n	8025ca8 <__hexnan+0x100>
 8025c9a:	4544      	cmp	r4, r8
 8025c9c:	d9c1      	bls.n	8025c22 <__hexnan+0x7a>
 8025c9e:	2300      	movs	r3, #0
 8025ca0:	f844 3c04 	str.w	r3, [r4, #-4]
 8025ca4:	2501      	movs	r5, #1
 8025ca6:	3c04      	subs	r4, #4
 8025ca8:	6822      	ldr	r2, [r4, #0]
 8025caa:	f000 000f 	and.w	r0, r0, #15
 8025cae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8025cb2:	6020      	str	r0, [r4, #0]
 8025cb4:	e7b5      	b.n	8025c22 <__hexnan+0x7a>
 8025cb6:	2508      	movs	r5, #8
 8025cb8:	e7b3      	b.n	8025c22 <__hexnan+0x7a>
 8025cba:	9b01      	ldr	r3, [sp, #4]
 8025cbc:	2b00      	cmp	r3, #0
 8025cbe:	d0dd      	beq.n	8025c7c <__hexnan+0xd4>
 8025cc0:	f1c3 0320 	rsb	r3, r3, #32
 8025cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8025cc8:	40da      	lsrs	r2, r3
 8025cca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8025cce:	4013      	ands	r3, r2
 8025cd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8025cd4:	e7d2      	b.n	8025c7c <__hexnan+0xd4>
 8025cd6:	3f04      	subs	r7, #4
 8025cd8:	e7d0      	b.n	8025c7c <__hexnan+0xd4>
 8025cda:	2004      	movs	r0, #4
 8025cdc:	e7d5      	b.n	8025c8a <__hexnan+0xe2>
	...

08025ce0 <_mallinfo_r>:
 8025ce0:	b570      	push	{r4, r5, r6, lr}
 8025ce2:	4c16      	ldr	r4, [pc, #88]	@ (8025d3c <_mallinfo_r+0x5c>)
 8025ce4:	4605      	mov	r5, r0
 8025ce6:	4608      	mov	r0, r1
 8025ce8:	460e      	mov	r6, r1
 8025cea:	f7fc fc89 	bl	8022600 <__malloc_lock>
 8025cee:	6823      	ldr	r3, [r4, #0]
 8025cf0:	b14b      	cbz	r3, 8025d06 <_mallinfo_r+0x26>
 8025cf2:	2100      	movs	r1, #0
 8025cf4:	4630      	mov	r0, r6
 8025cf6:	f7fe fda3 	bl	8024840 <_sbrk_r>
 8025cfa:	1c42      	adds	r2, r0, #1
 8025cfc:	bf18      	it	ne
 8025cfe:	6822      	ldrne	r2, [r4, #0]
 8025d00:	4603      	mov	r3, r0
 8025d02:	bf18      	it	ne
 8025d04:	1a83      	subne	r3, r0, r2
 8025d06:	4a0e      	ldr	r2, [pc, #56]	@ (8025d40 <_mallinfo_r+0x60>)
 8025d08:	6811      	ldr	r1, [r2, #0]
 8025d0a:	2200      	movs	r2, #0
 8025d0c:	b991      	cbnz	r1, 8025d34 <_mallinfo_r+0x54>
 8025d0e:	4c0d      	ldr	r4, [pc, #52]	@ (8025d44 <_mallinfo_r+0x64>)
 8025d10:	4630      	mov	r0, r6
 8025d12:	6023      	str	r3, [r4, #0]
 8025d14:	1a9b      	subs	r3, r3, r2
 8025d16:	6222      	str	r2, [r4, #32]
 8025d18:	61e3      	str	r3, [r4, #28]
 8025d1a:	f7fc fc77 	bl	802260c <__malloc_unlock>
 8025d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025d20:	462e      	mov	r6, r5
 8025d22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8025d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025d26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8025d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025d2c:	e886 0003 	stmia.w	r6, {r0, r1}
 8025d30:	4628      	mov	r0, r5
 8025d32:	bd70      	pop	{r4, r5, r6, pc}
 8025d34:	6808      	ldr	r0, [r1, #0]
 8025d36:	6849      	ldr	r1, [r1, #4]
 8025d38:	4402      	add	r2, r0
 8025d3a:	e7e7      	b.n	8025d0c <_mallinfo_r+0x2c>
 8025d3c:	200027fc 	.word	0x200027fc
 8025d40:	20002800 	.word	0x20002800
 8025d44:	20002948 	.word	0x20002948

08025d48 <__ascii_mbtowc>:
 8025d48:	b082      	sub	sp, #8
 8025d4a:	b901      	cbnz	r1, 8025d4e <__ascii_mbtowc+0x6>
 8025d4c:	a901      	add	r1, sp, #4
 8025d4e:	b142      	cbz	r2, 8025d62 <__ascii_mbtowc+0x1a>
 8025d50:	b14b      	cbz	r3, 8025d66 <__ascii_mbtowc+0x1e>
 8025d52:	7813      	ldrb	r3, [r2, #0]
 8025d54:	600b      	str	r3, [r1, #0]
 8025d56:	7812      	ldrb	r2, [r2, #0]
 8025d58:	1e10      	subs	r0, r2, #0
 8025d5a:	bf18      	it	ne
 8025d5c:	2001      	movne	r0, #1
 8025d5e:	b002      	add	sp, #8
 8025d60:	4770      	bx	lr
 8025d62:	4610      	mov	r0, r2
 8025d64:	e7fb      	b.n	8025d5e <__ascii_mbtowc+0x16>
 8025d66:	f06f 0001 	mvn.w	r0, #1
 8025d6a:	e7f8      	b.n	8025d5e <__ascii_mbtowc+0x16>

08025d6c <_Balloc>:
 8025d6c:	b570      	push	{r4, r5, r6, lr}
 8025d6e:	69c6      	ldr	r6, [r0, #28]
 8025d70:	4604      	mov	r4, r0
 8025d72:	460d      	mov	r5, r1
 8025d74:	b976      	cbnz	r6, 8025d94 <_Balloc+0x28>
 8025d76:	2010      	movs	r0, #16
 8025d78:	f7fc fb90 	bl	802249c <malloc>
 8025d7c:	4602      	mov	r2, r0
 8025d7e:	61e0      	str	r0, [r4, #28]
 8025d80:	b920      	cbnz	r0, 8025d8c <_Balloc+0x20>
 8025d82:	4b18      	ldr	r3, [pc, #96]	@ (8025de4 <_Balloc+0x78>)
 8025d84:	4818      	ldr	r0, [pc, #96]	@ (8025de8 <_Balloc+0x7c>)
 8025d86:	216b      	movs	r1, #107	@ 0x6b
 8025d88:	f7fc fb4e 	bl	8022428 <__assert_func>
 8025d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025d90:	6006      	str	r6, [r0, #0]
 8025d92:	60c6      	str	r6, [r0, #12]
 8025d94:	69e6      	ldr	r6, [r4, #28]
 8025d96:	68f3      	ldr	r3, [r6, #12]
 8025d98:	b183      	cbz	r3, 8025dbc <_Balloc+0x50>
 8025d9a:	69e3      	ldr	r3, [r4, #28]
 8025d9c:	68db      	ldr	r3, [r3, #12]
 8025d9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025da2:	b9b8      	cbnz	r0, 8025dd4 <_Balloc+0x68>
 8025da4:	2101      	movs	r1, #1
 8025da6:	fa01 f605 	lsl.w	r6, r1, r5
 8025daa:	1d72      	adds	r2, r6, #5
 8025dac:	0092      	lsls	r2, r2, #2
 8025dae:	4620      	mov	r0, r4
 8025db0:	f7fc fb60 	bl	8022474 <_calloc_r>
 8025db4:	b160      	cbz	r0, 8025dd0 <_Balloc+0x64>
 8025db6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025dba:	e00e      	b.n	8025dda <_Balloc+0x6e>
 8025dbc:	2221      	movs	r2, #33	@ 0x21
 8025dbe:	2104      	movs	r1, #4
 8025dc0:	4620      	mov	r0, r4
 8025dc2:	f7fc fb57 	bl	8022474 <_calloc_r>
 8025dc6:	69e3      	ldr	r3, [r4, #28]
 8025dc8:	60f0      	str	r0, [r6, #12]
 8025dca:	68db      	ldr	r3, [r3, #12]
 8025dcc:	2b00      	cmp	r3, #0
 8025dce:	d1e4      	bne.n	8025d9a <_Balloc+0x2e>
 8025dd0:	2000      	movs	r0, #0
 8025dd2:	bd70      	pop	{r4, r5, r6, pc}
 8025dd4:	6802      	ldr	r2, [r0, #0]
 8025dd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025dda:	2300      	movs	r3, #0
 8025ddc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025de0:	e7f7      	b.n	8025dd2 <_Balloc+0x66>
 8025de2:	bf00      	nop
 8025de4:	08030daa 	.word	0x08030daa
 8025de8:	08030ef9 	.word	0x08030ef9

08025dec <_Bfree>:
 8025dec:	b570      	push	{r4, r5, r6, lr}
 8025dee:	69c6      	ldr	r6, [r0, #28]
 8025df0:	4605      	mov	r5, r0
 8025df2:	460c      	mov	r4, r1
 8025df4:	b976      	cbnz	r6, 8025e14 <_Bfree+0x28>
 8025df6:	2010      	movs	r0, #16
 8025df8:	f7fc fb50 	bl	802249c <malloc>
 8025dfc:	4602      	mov	r2, r0
 8025dfe:	61e8      	str	r0, [r5, #28]
 8025e00:	b920      	cbnz	r0, 8025e0c <_Bfree+0x20>
 8025e02:	4b09      	ldr	r3, [pc, #36]	@ (8025e28 <_Bfree+0x3c>)
 8025e04:	4809      	ldr	r0, [pc, #36]	@ (8025e2c <_Bfree+0x40>)
 8025e06:	218f      	movs	r1, #143	@ 0x8f
 8025e08:	f7fc fb0e 	bl	8022428 <__assert_func>
 8025e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025e10:	6006      	str	r6, [r0, #0]
 8025e12:	60c6      	str	r6, [r0, #12]
 8025e14:	b13c      	cbz	r4, 8025e26 <_Bfree+0x3a>
 8025e16:	69eb      	ldr	r3, [r5, #28]
 8025e18:	6862      	ldr	r2, [r4, #4]
 8025e1a:	68db      	ldr	r3, [r3, #12]
 8025e1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025e20:	6021      	str	r1, [r4, #0]
 8025e22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025e26:	bd70      	pop	{r4, r5, r6, pc}
 8025e28:	08030daa 	.word	0x08030daa
 8025e2c:	08030ef9 	.word	0x08030ef9

08025e30 <__multadd>:
 8025e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e34:	690d      	ldr	r5, [r1, #16]
 8025e36:	4607      	mov	r7, r0
 8025e38:	460c      	mov	r4, r1
 8025e3a:	461e      	mov	r6, r3
 8025e3c:	f101 0c14 	add.w	ip, r1, #20
 8025e40:	2000      	movs	r0, #0
 8025e42:	f8dc 3000 	ldr.w	r3, [ip]
 8025e46:	b299      	uxth	r1, r3
 8025e48:	fb02 6101 	mla	r1, r2, r1, r6
 8025e4c:	0c1e      	lsrs	r6, r3, #16
 8025e4e:	0c0b      	lsrs	r3, r1, #16
 8025e50:	fb02 3306 	mla	r3, r2, r6, r3
 8025e54:	b289      	uxth	r1, r1
 8025e56:	3001      	adds	r0, #1
 8025e58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025e5c:	4285      	cmp	r5, r0
 8025e5e:	f84c 1b04 	str.w	r1, [ip], #4
 8025e62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8025e66:	dcec      	bgt.n	8025e42 <__multadd+0x12>
 8025e68:	b30e      	cbz	r6, 8025eae <__multadd+0x7e>
 8025e6a:	68a3      	ldr	r3, [r4, #8]
 8025e6c:	42ab      	cmp	r3, r5
 8025e6e:	dc19      	bgt.n	8025ea4 <__multadd+0x74>
 8025e70:	6861      	ldr	r1, [r4, #4]
 8025e72:	4638      	mov	r0, r7
 8025e74:	3101      	adds	r1, #1
 8025e76:	f7ff ff79 	bl	8025d6c <_Balloc>
 8025e7a:	4680      	mov	r8, r0
 8025e7c:	b928      	cbnz	r0, 8025e8a <__multadd+0x5a>
 8025e7e:	4602      	mov	r2, r0
 8025e80:	4b0c      	ldr	r3, [pc, #48]	@ (8025eb4 <__multadd+0x84>)
 8025e82:	480d      	ldr	r0, [pc, #52]	@ (8025eb8 <__multadd+0x88>)
 8025e84:	21ba      	movs	r1, #186	@ 0xba
 8025e86:	f7fc facf 	bl	8022428 <__assert_func>
 8025e8a:	6922      	ldr	r2, [r4, #16]
 8025e8c:	3202      	adds	r2, #2
 8025e8e:	f104 010c 	add.w	r1, r4, #12
 8025e92:	0092      	lsls	r2, r2, #2
 8025e94:	300c      	adds	r0, #12
 8025e96:	f7fe fd2a 	bl	80248ee <memcpy>
 8025e9a:	4621      	mov	r1, r4
 8025e9c:	4638      	mov	r0, r7
 8025e9e:	f7ff ffa5 	bl	8025dec <_Bfree>
 8025ea2:	4644      	mov	r4, r8
 8025ea4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8025ea8:	3501      	adds	r5, #1
 8025eaa:	615e      	str	r6, [r3, #20]
 8025eac:	6125      	str	r5, [r4, #16]
 8025eae:	4620      	mov	r0, r4
 8025eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025eb4:	08030e88 	.word	0x08030e88
 8025eb8:	08030ef9 	.word	0x08030ef9

08025ebc <__s2b>:
 8025ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ec0:	460c      	mov	r4, r1
 8025ec2:	4615      	mov	r5, r2
 8025ec4:	461f      	mov	r7, r3
 8025ec6:	2209      	movs	r2, #9
 8025ec8:	3308      	adds	r3, #8
 8025eca:	4606      	mov	r6, r0
 8025ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8025ed0:	2100      	movs	r1, #0
 8025ed2:	2201      	movs	r2, #1
 8025ed4:	429a      	cmp	r2, r3
 8025ed6:	db09      	blt.n	8025eec <__s2b+0x30>
 8025ed8:	4630      	mov	r0, r6
 8025eda:	f7ff ff47 	bl	8025d6c <_Balloc>
 8025ede:	b940      	cbnz	r0, 8025ef2 <__s2b+0x36>
 8025ee0:	4602      	mov	r2, r0
 8025ee2:	4b19      	ldr	r3, [pc, #100]	@ (8025f48 <__s2b+0x8c>)
 8025ee4:	4819      	ldr	r0, [pc, #100]	@ (8025f4c <__s2b+0x90>)
 8025ee6:	21d3      	movs	r1, #211	@ 0xd3
 8025ee8:	f7fc fa9e 	bl	8022428 <__assert_func>
 8025eec:	0052      	lsls	r2, r2, #1
 8025eee:	3101      	adds	r1, #1
 8025ef0:	e7f0      	b.n	8025ed4 <__s2b+0x18>
 8025ef2:	9b08      	ldr	r3, [sp, #32]
 8025ef4:	6143      	str	r3, [r0, #20]
 8025ef6:	2d09      	cmp	r5, #9
 8025ef8:	f04f 0301 	mov.w	r3, #1
 8025efc:	6103      	str	r3, [r0, #16]
 8025efe:	dd16      	ble.n	8025f2e <__s2b+0x72>
 8025f00:	f104 0909 	add.w	r9, r4, #9
 8025f04:	46c8      	mov	r8, r9
 8025f06:	442c      	add	r4, r5
 8025f08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8025f0c:	4601      	mov	r1, r0
 8025f0e:	3b30      	subs	r3, #48	@ 0x30
 8025f10:	220a      	movs	r2, #10
 8025f12:	4630      	mov	r0, r6
 8025f14:	f7ff ff8c 	bl	8025e30 <__multadd>
 8025f18:	45a0      	cmp	r8, r4
 8025f1a:	d1f5      	bne.n	8025f08 <__s2b+0x4c>
 8025f1c:	f1a5 0408 	sub.w	r4, r5, #8
 8025f20:	444c      	add	r4, r9
 8025f22:	1b2d      	subs	r5, r5, r4
 8025f24:	1963      	adds	r3, r4, r5
 8025f26:	42bb      	cmp	r3, r7
 8025f28:	db04      	blt.n	8025f34 <__s2b+0x78>
 8025f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025f2e:	340a      	adds	r4, #10
 8025f30:	2509      	movs	r5, #9
 8025f32:	e7f6      	b.n	8025f22 <__s2b+0x66>
 8025f34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025f38:	4601      	mov	r1, r0
 8025f3a:	3b30      	subs	r3, #48	@ 0x30
 8025f3c:	220a      	movs	r2, #10
 8025f3e:	4630      	mov	r0, r6
 8025f40:	f7ff ff76 	bl	8025e30 <__multadd>
 8025f44:	e7ee      	b.n	8025f24 <__s2b+0x68>
 8025f46:	bf00      	nop
 8025f48:	08030e88 	.word	0x08030e88
 8025f4c:	08030ef9 	.word	0x08030ef9

08025f50 <__hi0bits>:
 8025f50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8025f54:	4603      	mov	r3, r0
 8025f56:	bf36      	itet	cc
 8025f58:	0403      	lslcc	r3, r0, #16
 8025f5a:	2000      	movcs	r0, #0
 8025f5c:	2010      	movcc	r0, #16
 8025f5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8025f62:	bf3c      	itt	cc
 8025f64:	021b      	lslcc	r3, r3, #8
 8025f66:	3008      	addcc	r0, #8
 8025f68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8025f6c:	bf3c      	itt	cc
 8025f6e:	011b      	lslcc	r3, r3, #4
 8025f70:	3004      	addcc	r0, #4
 8025f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025f76:	bf3c      	itt	cc
 8025f78:	009b      	lslcc	r3, r3, #2
 8025f7a:	3002      	addcc	r0, #2
 8025f7c:	2b00      	cmp	r3, #0
 8025f7e:	db05      	blt.n	8025f8c <__hi0bits+0x3c>
 8025f80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8025f84:	f100 0001 	add.w	r0, r0, #1
 8025f88:	bf08      	it	eq
 8025f8a:	2020      	moveq	r0, #32
 8025f8c:	4770      	bx	lr

08025f8e <__lo0bits>:
 8025f8e:	6803      	ldr	r3, [r0, #0]
 8025f90:	4602      	mov	r2, r0
 8025f92:	f013 0007 	ands.w	r0, r3, #7
 8025f96:	d00b      	beq.n	8025fb0 <__lo0bits+0x22>
 8025f98:	07d9      	lsls	r1, r3, #31
 8025f9a:	d421      	bmi.n	8025fe0 <__lo0bits+0x52>
 8025f9c:	0798      	lsls	r0, r3, #30
 8025f9e:	bf49      	itett	mi
 8025fa0:	085b      	lsrmi	r3, r3, #1
 8025fa2:	089b      	lsrpl	r3, r3, #2
 8025fa4:	2001      	movmi	r0, #1
 8025fa6:	6013      	strmi	r3, [r2, #0]
 8025fa8:	bf5c      	itt	pl
 8025faa:	6013      	strpl	r3, [r2, #0]
 8025fac:	2002      	movpl	r0, #2
 8025fae:	4770      	bx	lr
 8025fb0:	b299      	uxth	r1, r3
 8025fb2:	b909      	cbnz	r1, 8025fb8 <__lo0bits+0x2a>
 8025fb4:	0c1b      	lsrs	r3, r3, #16
 8025fb6:	2010      	movs	r0, #16
 8025fb8:	b2d9      	uxtb	r1, r3
 8025fba:	b909      	cbnz	r1, 8025fc0 <__lo0bits+0x32>
 8025fbc:	3008      	adds	r0, #8
 8025fbe:	0a1b      	lsrs	r3, r3, #8
 8025fc0:	0719      	lsls	r1, r3, #28
 8025fc2:	bf04      	itt	eq
 8025fc4:	091b      	lsreq	r3, r3, #4
 8025fc6:	3004      	addeq	r0, #4
 8025fc8:	0799      	lsls	r1, r3, #30
 8025fca:	bf04      	itt	eq
 8025fcc:	089b      	lsreq	r3, r3, #2
 8025fce:	3002      	addeq	r0, #2
 8025fd0:	07d9      	lsls	r1, r3, #31
 8025fd2:	d403      	bmi.n	8025fdc <__lo0bits+0x4e>
 8025fd4:	085b      	lsrs	r3, r3, #1
 8025fd6:	f100 0001 	add.w	r0, r0, #1
 8025fda:	d003      	beq.n	8025fe4 <__lo0bits+0x56>
 8025fdc:	6013      	str	r3, [r2, #0]
 8025fde:	4770      	bx	lr
 8025fe0:	2000      	movs	r0, #0
 8025fe2:	4770      	bx	lr
 8025fe4:	2020      	movs	r0, #32
 8025fe6:	4770      	bx	lr

08025fe8 <__i2b>:
 8025fe8:	b510      	push	{r4, lr}
 8025fea:	460c      	mov	r4, r1
 8025fec:	2101      	movs	r1, #1
 8025fee:	f7ff febd 	bl	8025d6c <_Balloc>
 8025ff2:	4602      	mov	r2, r0
 8025ff4:	b928      	cbnz	r0, 8026002 <__i2b+0x1a>
 8025ff6:	4b05      	ldr	r3, [pc, #20]	@ (802600c <__i2b+0x24>)
 8025ff8:	4805      	ldr	r0, [pc, #20]	@ (8026010 <__i2b+0x28>)
 8025ffa:	f240 1145 	movw	r1, #325	@ 0x145
 8025ffe:	f7fc fa13 	bl	8022428 <__assert_func>
 8026002:	2301      	movs	r3, #1
 8026004:	6144      	str	r4, [r0, #20]
 8026006:	6103      	str	r3, [r0, #16]
 8026008:	bd10      	pop	{r4, pc}
 802600a:	bf00      	nop
 802600c:	08030e88 	.word	0x08030e88
 8026010:	08030ef9 	.word	0x08030ef9

08026014 <__multiply>:
 8026014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026018:	4614      	mov	r4, r2
 802601a:	690a      	ldr	r2, [r1, #16]
 802601c:	6923      	ldr	r3, [r4, #16]
 802601e:	429a      	cmp	r2, r3
 8026020:	bfa8      	it	ge
 8026022:	4623      	movge	r3, r4
 8026024:	460f      	mov	r7, r1
 8026026:	bfa4      	itt	ge
 8026028:	460c      	movge	r4, r1
 802602a:	461f      	movge	r7, r3
 802602c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8026030:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8026034:	68a3      	ldr	r3, [r4, #8]
 8026036:	6861      	ldr	r1, [r4, #4]
 8026038:	eb0a 0609 	add.w	r6, sl, r9
 802603c:	42b3      	cmp	r3, r6
 802603e:	b085      	sub	sp, #20
 8026040:	bfb8      	it	lt
 8026042:	3101      	addlt	r1, #1
 8026044:	f7ff fe92 	bl	8025d6c <_Balloc>
 8026048:	b930      	cbnz	r0, 8026058 <__multiply+0x44>
 802604a:	4602      	mov	r2, r0
 802604c:	4b44      	ldr	r3, [pc, #272]	@ (8026160 <__multiply+0x14c>)
 802604e:	4845      	ldr	r0, [pc, #276]	@ (8026164 <__multiply+0x150>)
 8026050:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8026054:	f7fc f9e8 	bl	8022428 <__assert_func>
 8026058:	f100 0514 	add.w	r5, r0, #20
 802605c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026060:	462b      	mov	r3, r5
 8026062:	2200      	movs	r2, #0
 8026064:	4543      	cmp	r3, r8
 8026066:	d321      	bcc.n	80260ac <__multiply+0x98>
 8026068:	f107 0114 	add.w	r1, r7, #20
 802606c:	f104 0214 	add.w	r2, r4, #20
 8026070:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8026074:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8026078:	9302      	str	r3, [sp, #8]
 802607a:	1b13      	subs	r3, r2, r4
 802607c:	3b15      	subs	r3, #21
 802607e:	f023 0303 	bic.w	r3, r3, #3
 8026082:	3304      	adds	r3, #4
 8026084:	f104 0715 	add.w	r7, r4, #21
 8026088:	42ba      	cmp	r2, r7
 802608a:	bf38      	it	cc
 802608c:	2304      	movcc	r3, #4
 802608e:	9301      	str	r3, [sp, #4]
 8026090:	9b02      	ldr	r3, [sp, #8]
 8026092:	9103      	str	r1, [sp, #12]
 8026094:	428b      	cmp	r3, r1
 8026096:	d80c      	bhi.n	80260b2 <__multiply+0x9e>
 8026098:	2e00      	cmp	r6, #0
 802609a:	dd03      	ble.n	80260a4 <__multiply+0x90>
 802609c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80260a0:	2b00      	cmp	r3, #0
 80260a2:	d05b      	beq.n	802615c <__multiply+0x148>
 80260a4:	6106      	str	r6, [r0, #16]
 80260a6:	b005      	add	sp, #20
 80260a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260ac:	f843 2b04 	str.w	r2, [r3], #4
 80260b0:	e7d8      	b.n	8026064 <__multiply+0x50>
 80260b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80260b6:	f1ba 0f00 	cmp.w	sl, #0
 80260ba:	d024      	beq.n	8026106 <__multiply+0xf2>
 80260bc:	f104 0e14 	add.w	lr, r4, #20
 80260c0:	46a9      	mov	r9, r5
 80260c2:	f04f 0c00 	mov.w	ip, #0
 80260c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80260ca:	f8d9 3000 	ldr.w	r3, [r9]
 80260ce:	fa1f fb87 	uxth.w	fp, r7
 80260d2:	b29b      	uxth	r3, r3
 80260d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80260d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80260dc:	f8d9 7000 	ldr.w	r7, [r9]
 80260e0:	4463      	add	r3, ip
 80260e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80260e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80260ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80260ee:	b29b      	uxth	r3, r3
 80260f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80260f4:	4572      	cmp	r2, lr
 80260f6:	f849 3b04 	str.w	r3, [r9], #4
 80260fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80260fe:	d8e2      	bhi.n	80260c6 <__multiply+0xb2>
 8026100:	9b01      	ldr	r3, [sp, #4]
 8026102:	f845 c003 	str.w	ip, [r5, r3]
 8026106:	9b03      	ldr	r3, [sp, #12]
 8026108:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802610c:	3104      	adds	r1, #4
 802610e:	f1b9 0f00 	cmp.w	r9, #0
 8026112:	d021      	beq.n	8026158 <__multiply+0x144>
 8026114:	682b      	ldr	r3, [r5, #0]
 8026116:	f104 0c14 	add.w	ip, r4, #20
 802611a:	46ae      	mov	lr, r5
 802611c:	f04f 0a00 	mov.w	sl, #0
 8026120:	f8bc b000 	ldrh.w	fp, [ip]
 8026124:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8026128:	fb09 770b 	mla	r7, r9, fp, r7
 802612c:	4457      	add	r7, sl
 802612e:	b29b      	uxth	r3, r3
 8026130:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026134:	f84e 3b04 	str.w	r3, [lr], #4
 8026138:	f85c 3b04 	ldr.w	r3, [ip], #4
 802613c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026140:	f8be 3000 	ldrh.w	r3, [lr]
 8026144:	fb09 330a 	mla	r3, r9, sl, r3
 8026148:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802614c:	4562      	cmp	r2, ip
 802614e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026152:	d8e5      	bhi.n	8026120 <__multiply+0x10c>
 8026154:	9f01      	ldr	r7, [sp, #4]
 8026156:	51eb      	str	r3, [r5, r7]
 8026158:	3504      	adds	r5, #4
 802615a:	e799      	b.n	8026090 <__multiply+0x7c>
 802615c:	3e01      	subs	r6, #1
 802615e:	e79b      	b.n	8026098 <__multiply+0x84>
 8026160:	08030e88 	.word	0x08030e88
 8026164:	08030ef9 	.word	0x08030ef9

08026168 <__pow5mult>:
 8026168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802616c:	4615      	mov	r5, r2
 802616e:	f012 0203 	ands.w	r2, r2, #3
 8026172:	4607      	mov	r7, r0
 8026174:	460e      	mov	r6, r1
 8026176:	d007      	beq.n	8026188 <__pow5mult+0x20>
 8026178:	4c25      	ldr	r4, [pc, #148]	@ (8026210 <__pow5mult+0xa8>)
 802617a:	3a01      	subs	r2, #1
 802617c:	2300      	movs	r3, #0
 802617e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026182:	f7ff fe55 	bl	8025e30 <__multadd>
 8026186:	4606      	mov	r6, r0
 8026188:	10ad      	asrs	r5, r5, #2
 802618a:	d03d      	beq.n	8026208 <__pow5mult+0xa0>
 802618c:	69fc      	ldr	r4, [r7, #28]
 802618e:	b97c      	cbnz	r4, 80261b0 <__pow5mult+0x48>
 8026190:	2010      	movs	r0, #16
 8026192:	f7fc f983 	bl	802249c <malloc>
 8026196:	4602      	mov	r2, r0
 8026198:	61f8      	str	r0, [r7, #28]
 802619a:	b928      	cbnz	r0, 80261a8 <__pow5mult+0x40>
 802619c:	4b1d      	ldr	r3, [pc, #116]	@ (8026214 <__pow5mult+0xac>)
 802619e:	481e      	ldr	r0, [pc, #120]	@ (8026218 <__pow5mult+0xb0>)
 80261a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80261a4:	f7fc f940 	bl	8022428 <__assert_func>
 80261a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80261ac:	6004      	str	r4, [r0, #0]
 80261ae:	60c4      	str	r4, [r0, #12]
 80261b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80261b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80261b8:	b94c      	cbnz	r4, 80261ce <__pow5mult+0x66>
 80261ba:	f240 2171 	movw	r1, #625	@ 0x271
 80261be:	4638      	mov	r0, r7
 80261c0:	f7ff ff12 	bl	8025fe8 <__i2b>
 80261c4:	2300      	movs	r3, #0
 80261c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80261ca:	4604      	mov	r4, r0
 80261cc:	6003      	str	r3, [r0, #0]
 80261ce:	f04f 0900 	mov.w	r9, #0
 80261d2:	07eb      	lsls	r3, r5, #31
 80261d4:	d50a      	bpl.n	80261ec <__pow5mult+0x84>
 80261d6:	4631      	mov	r1, r6
 80261d8:	4622      	mov	r2, r4
 80261da:	4638      	mov	r0, r7
 80261dc:	f7ff ff1a 	bl	8026014 <__multiply>
 80261e0:	4631      	mov	r1, r6
 80261e2:	4680      	mov	r8, r0
 80261e4:	4638      	mov	r0, r7
 80261e6:	f7ff fe01 	bl	8025dec <_Bfree>
 80261ea:	4646      	mov	r6, r8
 80261ec:	106d      	asrs	r5, r5, #1
 80261ee:	d00b      	beq.n	8026208 <__pow5mult+0xa0>
 80261f0:	6820      	ldr	r0, [r4, #0]
 80261f2:	b938      	cbnz	r0, 8026204 <__pow5mult+0x9c>
 80261f4:	4622      	mov	r2, r4
 80261f6:	4621      	mov	r1, r4
 80261f8:	4638      	mov	r0, r7
 80261fa:	f7ff ff0b 	bl	8026014 <__multiply>
 80261fe:	6020      	str	r0, [r4, #0]
 8026200:	f8c0 9000 	str.w	r9, [r0]
 8026204:	4604      	mov	r4, r0
 8026206:	e7e4      	b.n	80261d2 <__pow5mult+0x6a>
 8026208:	4630      	mov	r0, r6
 802620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802620e:	bf00      	nop
 8026210:	08030f54 	.word	0x08030f54
 8026214:	08030daa 	.word	0x08030daa
 8026218:	08030ef9 	.word	0x08030ef9

0802621c <__lshift>:
 802621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026220:	460c      	mov	r4, r1
 8026222:	6849      	ldr	r1, [r1, #4]
 8026224:	6923      	ldr	r3, [r4, #16]
 8026226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802622a:	68a3      	ldr	r3, [r4, #8]
 802622c:	4607      	mov	r7, r0
 802622e:	4691      	mov	r9, r2
 8026230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026234:	f108 0601 	add.w	r6, r8, #1
 8026238:	42b3      	cmp	r3, r6
 802623a:	db0b      	blt.n	8026254 <__lshift+0x38>
 802623c:	4638      	mov	r0, r7
 802623e:	f7ff fd95 	bl	8025d6c <_Balloc>
 8026242:	4605      	mov	r5, r0
 8026244:	b948      	cbnz	r0, 802625a <__lshift+0x3e>
 8026246:	4602      	mov	r2, r0
 8026248:	4b28      	ldr	r3, [pc, #160]	@ (80262ec <__lshift+0xd0>)
 802624a:	4829      	ldr	r0, [pc, #164]	@ (80262f0 <__lshift+0xd4>)
 802624c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8026250:	f7fc f8ea 	bl	8022428 <__assert_func>
 8026254:	3101      	adds	r1, #1
 8026256:	005b      	lsls	r3, r3, #1
 8026258:	e7ee      	b.n	8026238 <__lshift+0x1c>
 802625a:	2300      	movs	r3, #0
 802625c:	f100 0114 	add.w	r1, r0, #20
 8026260:	f100 0210 	add.w	r2, r0, #16
 8026264:	4618      	mov	r0, r3
 8026266:	4553      	cmp	r3, sl
 8026268:	db33      	blt.n	80262d2 <__lshift+0xb6>
 802626a:	6920      	ldr	r0, [r4, #16]
 802626c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026270:	f104 0314 	add.w	r3, r4, #20
 8026274:	f019 091f 	ands.w	r9, r9, #31
 8026278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802627c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026280:	d02b      	beq.n	80262da <__lshift+0xbe>
 8026282:	f1c9 0e20 	rsb	lr, r9, #32
 8026286:	468a      	mov	sl, r1
 8026288:	2200      	movs	r2, #0
 802628a:	6818      	ldr	r0, [r3, #0]
 802628c:	fa00 f009 	lsl.w	r0, r0, r9
 8026290:	4310      	orrs	r0, r2
 8026292:	f84a 0b04 	str.w	r0, [sl], #4
 8026296:	f853 2b04 	ldr.w	r2, [r3], #4
 802629a:	459c      	cmp	ip, r3
 802629c:	fa22 f20e 	lsr.w	r2, r2, lr
 80262a0:	d8f3      	bhi.n	802628a <__lshift+0x6e>
 80262a2:	ebac 0304 	sub.w	r3, ip, r4
 80262a6:	3b15      	subs	r3, #21
 80262a8:	f023 0303 	bic.w	r3, r3, #3
 80262ac:	3304      	adds	r3, #4
 80262ae:	f104 0015 	add.w	r0, r4, #21
 80262b2:	4584      	cmp	ip, r0
 80262b4:	bf38      	it	cc
 80262b6:	2304      	movcc	r3, #4
 80262b8:	50ca      	str	r2, [r1, r3]
 80262ba:	b10a      	cbz	r2, 80262c0 <__lshift+0xa4>
 80262bc:	f108 0602 	add.w	r6, r8, #2
 80262c0:	3e01      	subs	r6, #1
 80262c2:	4638      	mov	r0, r7
 80262c4:	612e      	str	r6, [r5, #16]
 80262c6:	4621      	mov	r1, r4
 80262c8:	f7ff fd90 	bl	8025dec <_Bfree>
 80262cc:	4628      	mov	r0, r5
 80262ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80262d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80262d6:	3301      	adds	r3, #1
 80262d8:	e7c5      	b.n	8026266 <__lshift+0x4a>
 80262da:	3904      	subs	r1, #4
 80262dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80262e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80262e4:	459c      	cmp	ip, r3
 80262e6:	d8f9      	bhi.n	80262dc <__lshift+0xc0>
 80262e8:	e7ea      	b.n	80262c0 <__lshift+0xa4>
 80262ea:	bf00      	nop
 80262ec:	08030e88 	.word	0x08030e88
 80262f0:	08030ef9 	.word	0x08030ef9

080262f4 <__mcmp>:
 80262f4:	690a      	ldr	r2, [r1, #16]
 80262f6:	4603      	mov	r3, r0
 80262f8:	6900      	ldr	r0, [r0, #16]
 80262fa:	1a80      	subs	r0, r0, r2
 80262fc:	b530      	push	{r4, r5, lr}
 80262fe:	d10e      	bne.n	802631e <__mcmp+0x2a>
 8026300:	3314      	adds	r3, #20
 8026302:	3114      	adds	r1, #20
 8026304:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026308:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802630c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8026310:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026314:	4295      	cmp	r5, r2
 8026316:	d003      	beq.n	8026320 <__mcmp+0x2c>
 8026318:	d205      	bcs.n	8026326 <__mcmp+0x32>
 802631a:	f04f 30ff 	mov.w	r0, #4294967295
 802631e:	bd30      	pop	{r4, r5, pc}
 8026320:	42a3      	cmp	r3, r4
 8026322:	d3f3      	bcc.n	802630c <__mcmp+0x18>
 8026324:	e7fb      	b.n	802631e <__mcmp+0x2a>
 8026326:	2001      	movs	r0, #1
 8026328:	e7f9      	b.n	802631e <__mcmp+0x2a>
	...

0802632c <__mdiff>:
 802632c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026330:	4689      	mov	r9, r1
 8026332:	4606      	mov	r6, r0
 8026334:	4611      	mov	r1, r2
 8026336:	4648      	mov	r0, r9
 8026338:	4614      	mov	r4, r2
 802633a:	f7ff ffdb 	bl	80262f4 <__mcmp>
 802633e:	1e05      	subs	r5, r0, #0
 8026340:	d112      	bne.n	8026368 <__mdiff+0x3c>
 8026342:	4629      	mov	r1, r5
 8026344:	4630      	mov	r0, r6
 8026346:	f7ff fd11 	bl	8025d6c <_Balloc>
 802634a:	4602      	mov	r2, r0
 802634c:	b928      	cbnz	r0, 802635a <__mdiff+0x2e>
 802634e:	4b3f      	ldr	r3, [pc, #252]	@ (802644c <__mdiff+0x120>)
 8026350:	f240 2137 	movw	r1, #567	@ 0x237
 8026354:	483e      	ldr	r0, [pc, #248]	@ (8026450 <__mdiff+0x124>)
 8026356:	f7fc f867 	bl	8022428 <__assert_func>
 802635a:	2301      	movs	r3, #1
 802635c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026360:	4610      	mov	r0, r2
 8026362:	b003      	add	sp, #12
 8026364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026368:	bfbc      	itt	lt
 802636a:	464b      	movlt	r3, r9
 802636c:	46a1      	movlt	r9, r4
 802636e:	4630      	mov	r0, r6
 8026370:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8026374:	bfba      	itte	lt
 8026376:	461c      	movlt	r4, r3
 8026378:	2501      	movlt	r5, #1
 802637a:	2500      	movge	r5, #0
 802637c:	f7ff fcf6 	bl	8025d6c <_Balloc>
 8026380:	4602      	mov	r2, r0
 8026382:	b918      	cbnz	r0, 802638c <__mdiff+0x60>
 8026384:	4b31      	ldr	r3, [pc, #196]	@ (802644c <__mdiff+0x120>)
 8026386:	f240 2145 	movw	r1, #581	@ 0x245
 802638a:	e7e3      	b.n	8026354 <__mdiff+0x28>
 802638c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8026390:	6926      	ldr	r6, [r4, #16]
 8026392:	60c5      	str	r5, [r0, #12]
 8026394:	f109 0310 	add.w	r3, r9, #16
 8026398:	f109 0514 	add.w	r5, r9, #20
 802639c:	f104 0e14 	add.w	lr, r4, #20
 80263a0:	f100 0b14 	add.w	fp, r0, #20
 80263a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80263a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80263ac:	9301      	str	r3, [sp, #4]
 80263ae:	46d9      	mov	r9, fp
 80263b0:	f04f 0c00 	mov.w	ip, #0
 80263b4:	9b01      	ldr	r3, [sp, #4]
 80263b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80263ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80263be:	9301      	str	r3, [sp, #4]
 80263c0:	fa1f f38a 	uxth.w	r3, sl
 80263c4:	4619      	mov	r1, r3
 80263c6:	b283      	uxth	r3, r0
 80263c8:	1acb      	subs	r3, r1, r3
 80263ca:	0c00      	lsrs	r0, r0, #16
 80263cc:	4463      	add	r3, ip
 80263ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80263d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80263d6:	b29b      	uxth	r3, r3
 80263d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80263dc:	4576      	cmp	r6, lr
 80263de:	f849 3b04 	str.w	r3, [r9], #4
 80263e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80263e6:	d8e5      	bhi.n	80263b4 <__mdiff+0x88>
 80263e8:	1b33      	subs	r3, r6, r4
 80263ea:	3b15      	subs	r3, #21
 80263ec:	f023 0303 	bic.w	r3, r3, #3
 80263f0:	3415      	adds	r4, #21
 80263f2:	3304      	adds	r3, #4
 80263f4:	42a6      	cmp	r6, r4
 80263f6:	bf38      	it	cc
 80263f8:	2304      	movcc	r3, #4
 80263fa:	441d      	add	r5, r3
 80263fc:	445b      	add	r3, fp
 80263fe:	461e      	mov	r6, r3
 8026400:	462c      	mov	r4, r5
 8026402:	4544      	cmp	r4, r8
 8026404:	d30e      	bcc.n	8026424 <__mdiff+0xf8>
 8026406:	f108 0103 	add.w	r1, r8, #3
 802640a:	1b49      	subs	r1, r1, r5
 802640c:	f021 0103 	bic.w	r1, r1, #3
 8026410:	3d03      	subs	r5, #3
 8026412:	45a8      	cmp	r8, r5
 8026414:	bf38      	it	cc
 8026416:	2100      	movcc	r1, #0
 8026418:	440b      	add	r3, r1
 802641a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802641e:	b191      	cbz	r1, 8026446 <__mdiff+0x11a>
 8026420:	6117      	str	r7, [r2, #16]
 8026422:	e79d      	b.n	8026360 <__mdiff+0x34>
 8026424:	f854 1b04 	ldr.w	r1, [r4], #4
 8026428:	46e6      	mov	lr, ip
 802642a:	0c08      	lsrs	r0, r1, #16
 802642c:	fa1c fc81 	uxtah	ip, ip, r1
 8026430:	4471      	add	r1, lr
 8026432:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8026436:	b289      	uxth	r1, r1
 8026438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802643c:	f846 1b04 	str.w	r1, [r6], #4
 8026440:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026444:	e7dd      	b.n	8026402 <__mdiff+0xd6>
 8026446:	3f01      	subs	r7, #1
 8026448:	e7e7      	b.n	802641a <__mdiff+0xee>
 802644a:	bf00      	nop
 802644c:	08030e88 	.word	0x08030e88
 8026450:	08030ef9 	.word	0x08030ef9

08026454 <__ulp>:
 8026454:	b082      	sub	sp, #8
 8026456:	ed8d 0b00 	vstr	d0, [sp]
 802645a:	9a01      	ldr	r2, [sp, #4]
 802645c:	4b0f      	ldr	r3, [pc, #60]	@ (802649c <__ulp+0x48>)
 802645e:	4013      	ands	r3, r2
 8026460:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8026464:	2b00      	cmp	r3, #0
 8026466:	dc08      	bgt.n	802647a <__ulp+0x26>
 8026468:	425b      	negs	r3, r3
 802646a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802646e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026472:	da04      	bge.n	802647e <__ulp+0x2a>
 8026474:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8026478:	4113      	asrs	r3, r2
 802647a:	2200      	movs	r2, #0
 802647c:	e008      	b.n	8026490 <__ulp+0x3c>
 802647e:	f1a2 0314 	sub.w	r3, r2, #20
 8026482:	2b1e      	cmp	r3, #30
 8026484:	bfda      	itte	le
 8026486:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802648a:	40da      	lsrle	r2, r3
 802648c:	2201      	movgt	r2, #1
 802648e:	2300      	movs	r3, #0
 8026490:	4619      	mov	r1, r3
 8026492:	4610      	mov	r0, r2
 8026494:	ec41 0b10 	vmov	d0, r0, r1
 8026498:	b002      	add	sp, #8
 802649a:	4770      	bx	lr
 802649c:	7ff00000 	.word	0x7ff00000

080264a0 <__b2d>:
 80264a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80264a4:	6906      	ldr	r6, [r0, #16]
 80264a6:	f100 0814 	add.w	r8, r0, #20
 80264aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80264ae:	1f37      	subs	r7, r6, #4
 80264b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80264b4:	4610      	mov	r0, r2
 80264b6:	f7ff fd4b 	bl	8025f50 <__hi0bits>
 80264ba:	f1c0 0320 	rsb	r3, r0, #32
 80264be:	280a      	cmp	r0, #10
 80264c0:	600b      	str	r3, [r1, #0]
 80264c2:	491b      	ldr	r1, [pc, #108]	@ (8026530 <__b2d+0x90>)
 80264c4:	dc15      	bgt.n	80264f2 <__b2d+0x52>
 80264c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80264ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80264ce:	45b8      	cmp	r8, r7
 80264d0:	ea43 0501 	orr.w	r5, r3, r1
 80264d4:	bf34      	ite	cc
 80264d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80264da:	2300      	movcs	r3, #0
 80264dc:	3015      	adds	r0, #21
 80264de:	fa02 f000 	lsl.w	r0, r2, r0
 80264e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80264e6:	4303      	orrs	r3, r0
 80264e8:	461c      	mov	r4, r3
 80264ea:	ec45 4b10 	vmov	d0, r4, r5
 80264ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80264f2:	45b8      	cmp	r8, r7
 80264f4:	bf3a      	itte	cc
 80264f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80264fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80264fe:	2300      	movcs	r3, #0
 8026500:	380b      	subs	r0, #11
 8026502:	d012      	beq.n	802652a <__b2d+0x8a>
 8026504:	f1c0 0120 	rsb	r1, r0, #32
 8026508:	fa23 f401 	lsr.w	r4, r3, r1
 802650c:	4082      	lsls	r2, r0
 802650e:	4322      	orrs	r2, r4
 8026510:	4547      	cmp	r7, r8
 8026512:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8026516:	bf8c      	ite	hi
 8026518:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802651c:	2200      	movls	r2, #0
 802651e:	4083      	lsls	r3, r0
 8026520:	40ca      	lsrs	r2, r1
 8026522:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8026526:	4313      	orrs	r3, r2
 8026528:	e7de      	b.n	80264e8 <__b2d+0x48>
 802652a:	ea42 0501 	orr.w	r5, r2, r1
 802652e:	e7db      	b.n	80264e8 <__b2d+0x48>
 8026530:	3ff00000 	.word	0x3ff00000

08026534 <__d2b>:
 8026534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026538:	460f      	mov	r7, r1
 802653a:	2101      	movs	r1, #1
 802653c:	ec59 8b10 	vmov	r8, r9, d0
 8026540:	4616      	mov	r6, r2
 8026542:	f7ff fc13 	bl	8025d6c <_Balloc>
 8026546:	4604      	mov	r4, r0
 8026548:	b930      	cbnz	r0, 8026558 <__d2b+0x24>
 802654a:	4602      	mov	r2, r0
 802654c:	4b23      	ldr	r3, [pc, #140]	@ (80265dc <__d2b+0xa8>)
 802654e:	4824      	ldr	r0, [pc, #144]	@ (80265e0 <__d2b+0xac>)
 8026550:	f240 310f 	movw	r1, #783	@ 0x30f
 8026554:	f7fb ff68 	bl	8022428 <__assert_func>
 8026558:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802655c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026560:	b10d      	cbz	r5, 8026566 <__d2b+0x32>
 8026562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026566:	9301      	str	r3, [sp, #4]
 8026568:	f1b8 0300 	subs.w	r3, r8, #0
 802656c:	d023      	beq.n	80265b6 <__d2b+0x82>
 802656e:	4668      	mov	r0, sp
 8026570:	9300      	str	r3, [sp, #0]
 8026572:	f7ff fd0c 	bl	8025f8e <__lo0bits>
 8026576:	e9dd 1200 	ldrd	r1, r2, [sp]
 802657a:	b1d0      	cbz	r0, 80265b2 <__d2b+0x7e>
 802657c:	f1c0 0320 	rsb	r3, r0, #32
 8026580:	fa02 f303 	lsl.w	r3, r2, r3
 8026584:	430b      	orrs	r3, r1
 8026586:	40c2      	lsrs	r2, r0
 8026588:	6163      	str	r3, [r4, #20]
 802658a:	9201      	str	r2, [sp, #4]
 802658c:	9b01      	ldr	r3, [sp, #4]
 802658e:	61a3      	str	r3, [r4, #24]
 8026590:	2b00      	cmp	r3, #0
 8026592:	bf0c      	ite	eq
 8026594:	2201      	moveq	r2, #1
 8026596:	2202      	movne	r2, #2
 8026598:	6122      	str	r2, [r4, #16]
 802659a:	b1a5      	cbz	r5, 80265c6 <__d2b+0x92>
 802659c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80265a0:	4405      	add	r5, r0
 80265a2:	603d      	str	r5, [r7, #0]
 80265a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80265a8:	6030      	str	r0, [r6, #0]
 80265aa:	4620      	mov	r0, r4
 80265ac:	b003      	add	sp, #12
 80265ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80265b2:	6161      	str	r1, [r4, #20]
 80265b4:	e7ea      	b.n	802658c <__d2b+0x58>
 80265b6:	a801      	add	r0, sp, #4
 80265b8:	f7ff fce9 	bl	8025f8e <__lo0bits>
 80265bc:	9b01      	ldr	r3, [sp, #4]
 80265be:	6163      	str	r3, [r4, #20]
 80265c0:	3020      	adds	r0, #32
 80265c2:	2201      	movs	r2, #1
 80265c4:	e7e8      	b.n	8026598 <__d2b+0x64>
 80265c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80265ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80265ce:	6038      	str	r0, [r7, #0]
 80265d0:	6918      	ldr	r0, [r3, #16]
 80265d2:	f7ff fcbd 	bl	8025f50 <__hi0bits>
 80265d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80265da:	e7e5      	b.n	80265a8 <__d2b+0x74>
 80265dc:	08030e88 	.word	0x08030e88
 80265e0:	08030ef9 	.word	0x08030ef9

080265e4 <__ratio>:
 80265e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265e8:	b085      	sub	sp, #20
 80265ea:	e9cd 1000 	strd	r1, r0, [sp]
 80265ee:	a902      	add	r1, sp, #8
 80265f0:	f7ff ff56 	bl	80264a0 <__b2d>
 80265f4:	9800      	ldr	r0, [sp, #0]
 80265f6:	a903      	add	r1, sp, #12
 80265f8:	ec55 4b10 	vmov	r4, r5, d0
 80265fc:	f7ff ff50 	bl	80264a0 <__b2d>
 8026600:	9b01      	ldr	r3, [sp, #4]
 8026602:	6919      	ldr	r1, [r3, #16]
 8026604:	9b00      	ldr	r3, [sp, #0]
 8026606:	691b      	ldr	r3, [r3, #16]
 8026608:	1ac9      	subs	r1, r1, r3
 802660a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802660e:	1a9b      	subs	r3, r3, r2
 8026610:	ec5b ab10 	vmov	sl, fp, d0
 8026614:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8026618:	2b00      	cmp	r3, #0
 802661a:	bfce      	itee	gt
 802661c:	462a      	movgt	r2, r5
 802661e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026622:	465a      	movle	r2, fp
 8026624:	462f      	mov	r7, r5
 8026626:	46d9      	mov	r9, fp
 8026628:	bfcc      	ite	gt
 802662a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802662e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8026632:	464b      	mov	r3, r9
 8026634:	4652      	mov	r2, sl
 8026636:	4620      	mov	r0, r4
 8026638:	4639      	mov	r1, r7
 802663a:	f7e2 f84f 	bl	80086dc <__aeabi_ddiv>
 802663e:	ec41 0b10 	vmov	d0, r0, r1
 8026642:	b005      	add	sp, #20
 8026644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026648 <__copybits>:
 8026648:	3901      	subs	r1, #1
 802664a:	b570      	push	{r4, r5, r6, lr}
 802664c:	1149      	asrs	r1, r1, #5
 802664e:	6914      	ldr	r4, [r2, #16]
 8026650:	3101      	adds	r1, #1
 8026652:	f102 0314 	add.w	r3, r2, #20
 8026656:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802665a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802665e:	1f05      	subs	r5, r0, #4
 8026660:	42a3      	cmp	r3, r4
 8026662:	d30c      	bcc.n	802667e <__copybits+0x36>
 8026664:	1aa3      	subs	r3, r4, r2
 8026666:	3b11      	subs	r3, #17
 8026668:	f023 0303 	bic.w	r3, r3, #3
 802666c:	3211      	adds	r2, #17
 802666e:	42a2      	cmp	r2, r4
 8026670:	bf88      	it	hi
 8026672:	2300      	movhi	r3, #0
 8026674:	4418      	add	r0, r3
 8026676:	2300      	movs	r3, #0
 8026678:	4288      	cmp	r0, r1
 802667a:	d305      	bcc.n	8026688 <__copybits+0x40>
 802667c:	bd70      	pop	{r4, r5, r6, pc}
 802667e:	f853 6b04 	ldr.w	r6, [r3], #4
 8026682:	f845 6f04 	str.w	r6, [r5, #4]!
 8026686:	e7eb      	b.n	8026660 <__copybits+0x18>
 8026688:	f840 3b04 	str.w	r3, [r0], #4
 802668c:	e7f4      	b.n	8026678 <__copybits+0x30>

0802668e <__any_on>:
 802668e:	f100 0214 	add.w	r2, r0, #20
 8026692:	6900      	ldr	r0, [r0, #16]
 8026694:	114b      	asrs	r3, r1, #5
 8026696:	4298      	cmp	r0, r3
 8026698:	b510      	push	{r4, lr}
 802669a:	db11      	blt.n	80266c0 <__any_on+0x32>
 802669c:	dd0a      	ble.n	80266b4 <__any_on+0x26>
 802669e:	f011 011f 	ands.w	r1, r1, #31
 80266a2:	d007      	beq.n	80266b4 <__any_on+0x26>
 80266a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80266a8:	fa24 f001 	lsr.w	r0, r4, r1
 80266ac:	fa00 f101 	lsl.w	r1, r0, r1
 80266b0:	428c      	cmp	r4, r1
 80266b2:	d10b      	bne.n	80266cc <__any_on+0x3e>
 80266b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80266b8:	4293      	cmp	r3, r2
 80266ba:	d803      	bhi.n	80266c4 <__any_on+0x36>
 80266bc:	2000      	movs	r0, #0
 80266be:	bd10      	pop	{r4, pc}
 80266c0:	4603      	mov	r3, r0
 80266c2:	e7f7      	b.n	80266b4 <__any_on+0x26>
 80266c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80266c8:	2900      	cmp	r1, #0
 80266ca:	d0f5      	beq.n	80266b8 <__any_on+0x2a>
 80266cc:	2001      	movs	r0, #1
 80266ce:	e7f6      	b.n	80266be <__any_on+0x30>

080266d0 <_malloc_usable_size_r>:
 80266d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80266d4:	1f18      	subs	r0, r3, #4
 80266d6:	2b00      	cmp	r3, #0
 80266d8:	bfbc      	itt	lt
 80266da:	580b      	ldrlt	r3, [r1, r0]
 80266dc:	18c0      	addlt	r0, r0, r3
 80266de:	4770      	bx	lr

080266e0 <__ascii_wctomb>:
 80266e0:	4603      	mov	r3, r0
 80266e2:	4608      	mov	r0, r1
 80266e4:	b141      	cbz	r1, 80266f8 <__ascii_wctomb+0x18>
 80266e6:	2aff      	cmp	r2, #255	@ 0xff
 80266e8:	d904      	bls.n	80266f4 <__ascii_wctomb+0x14>
 80266ea:	228a      	movs	r2, #138	@ 0x8a
 80266ec:	601a      	str	r2, [r3, #0]
 80266ee:	f04f 30ff 	mov.w	r0, #4294967295
 80266f2:	4770      	bx	lr
 80266f4:	700a      	strb	r2, [r1, #0]
 80266f6:	2001      	movs	r0, #1
 80266f8:	4770      	bx	lr

080266fa <__ssputs_r>:
 80266fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80266fe:	688e      	ldr	r6, [r1, #8]
 8026700:	461f      	mov	r7, r3
 8026702:	42be      	cmp	r6, r7
 8026704:	680b      	ldr	r3, [r1, #0]
 8026706:	4682      	mov	sl, r0
 8026708:	460c      	mov	r4, r1
 802670a:	4690      	mov	r8, r2
 802670c:	d82d      	bhi.n	802676a <__ssputs_r+0x70>
 802670e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026712:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8026716:	d026      	beq.n	8026766 <__ssputs_r+0x6c>
 8026718:	6965      	ldr	r5, [r4, #20]
 802671a:	6909      	ldr	r1, [r1, #16]
 802671c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026720:	eba3 0901 	sub.w	r9, r3, r1
 8026724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026728:	1c7b      	adds	r3, r7, #1
 802672a:	444b      	add	r3, r9
 802672c:	106d      	asrs	r5, r5, #1
 802672e:	429d      	cmp	r5, r3
 8026730:	bf38      	it	cc
 8026732:	461d      	movcc	r5, r3
 8026734:	0553      	lsls	r3, r2, #21
 8026736:	d527      	bpl.n	8026788 <__ssputs_r+0x8e>
 8026738:	4629      	mov	r1, r5
 802673a:	f7fb fee1 	bl	8022500 <_malloc_r>
 802673e:	4606      	mov	r6, r0
 8026740:	b360      	cbz	r0, 802679c <__ssputs_r+0xa2>
 8026742:	6921      	ldr	r1, [r4, #16]
 8026744:	464a      	mov	r2, r9
 8026746:	f7fe f8d2 	bl	80248ee <memcpy>
 802674a:	89a3      	ldrh	r3, [r4, #12]
 802674c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8026750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026754:	81a3      	strh	r3, [r4, #12]
 8026756:	6126      	str	r6, [r4, #16]
 8026758:	6165      	str	r5, [r4, #20]
 802675a:	444e      	add	r6, r9
 802675c:	eba5 0509 	sub.w	r5, r5, r9
 8026760:	6026      	str	r6, [r4, #0]
 8026762:	60a5      	str	r5, [r4, #8]
 8026764:	463e      	mov	r6, r7
 8026766:	42be      	cmp	r6, r7
 8026768:	d900      	bls.n	802676c <__ssputs_r+0x72>
 802676a:	463e      	mov	r6, r7
 802676c:	6820      	ldr	r0, [r4, #0]
 802676e:	4632      	mov	r2, r6
 8026770:	4641      	mov	r1, r8
 8026772:	f7fd ff42 	bl	80245fa <memmove>
 8026776:	68a3      	ldr	r3, [r4, #8]
 8026778:	1b9b      	subs	r3, r3, r6
 802677a:	60a3      	str	r3, [r4, #8]
 802677c:	6823      	ldr	r3, [r4, #0]
 802677e:	4433      	add	r3, r6
 8026780:	6023      	str	r3, [r4, #0]
 8026782:	2000      	movs	r0, #0
 8026784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026788:	462a      	mov	r2, r5
 802678a:	f7fb ff4f 	bl	802262c <_realloc_r>
 802678e:	4606      	mov	r6, r0
 8026790:	2800      	cmp	r0, #0
 8026792:	d1e0      	bne.n	8026756 <__ssputs_r+0x5c>
 8026794:	6921      	ldr	r1, [r4, #16]
 8026796:	4650      	mov	r0, sl
 8026798:	f7fe ff1e 	bl	80255d8 <_free_r>
 802679c:	230c      	movs	r3, #12
 802679e:	f8ca 3000 	str.w	r3, [sl]
 80267a2:	89a3      	ldrh	r3, [r4, #12]
 80267a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80267a8:	81a3      	strh	r3, [r4, #12]
 80267aa:	f04f 30ff 	mov.w	r0, #4294967295
 80267ae:	e7e9      	b.n	8026784 <__ssputs_r+0x8a>

080267b0 <_svfiprintf_r>:
 80267b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267b4:	4698      	mov	r8, r3
 80267b6:	898b      	ldrh	r3, [r1, #12]
 80267b8:	061b      	lsls	r3, r3, #24
 80267ba:	b09d      	sub	sp, #116	@ 0x74
 80267bc:	4607      	mov	r7, r0
 80267be:	460d      	mov	r5, r1
 80267c0:	4614      	mov	r4, r2
 80267c2:	d510      	bpl.n	80267e6 <_svfiprintf_r+0x36>
 80267c4:	690b      	ldr	r3, [r1, #16]
 80267c6:	b973      	cbnz	r3, 80267e6 <_svfiprintf_r+0x36>
 80267c8:	2140      	movs	r1, #64	@ 0x40
 80267ca:	f7fb fe99 	bl	8022500 <_malloc_r>
 80267ce:	6028      	str	r0, [r5, #0]
 80267d0:	6128      	str	r0, [r5, #16]
 80267d2:	b930      	cbnz	r0, 80267e2 <_svfiprintf_r+0x32>
 80267d4:	230c      	movs	r3, #12
 80267d6:	603b      	str	r3, [r7, #0]
 80267d8:	f04f 30ff 	mov.w	r0, #4294967295
 80267dc:	b01d      	add	sp, #116	@ 0x74
 80267de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267e2:	2340      	movs	r3, #64	@ 0x40
 80267e4:	616b      	str	r3, [r5, #20]
 80267e6:	2300      	movs	r3, #0
 80267e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80267ea:	2320      	movs	r3, #32
 80267ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80267f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80267f4:	2330      	movs	r3, #48	@ 0x30
 80267f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8026994 <_svfiprintf_r+0x1e4>
 80267fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80267fe:	f04f 0901 	mov.w	r9, #1
 8026802:	4623      	mov	r3, r4
 8026804:	469a      	mov	sl, r3
 8026806:	f813 2b01 	ldrb.w	r2, [r3], #1
 802680a:	b10a      	cbz	r2, 8026810 <_svfiprintf_r+0x60>
 802680c:	2a25      	cmp	r2, #37	@ 0x25
 802680e:	d1f9      	bne.n	8026804 <_svfiprintf_r+0x54>
 8026810:	ebba 0b04 	subs.w	fp, sl, r4
 8026814:	d00b      	beq.n	802682e <_svfiprintf_r+0x7e>
 8026816:	465b      	mov	r3, fp
 8026818:	4622      	mov	r2, r4
 802681a:	4629      	mov	r1, r5
 802681c:	4638      	mov	r0, r7
 802681e:	f7ff ff6c 	bl	80266fa <__ssputs_r>
 8026822:	3001      	adds	r0, #1
 8026824:	f000 80a7 	beq.w	8026976 <_svfiprintf_r+0x1c6>
 8026828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802682a:	445a      	add	r2, fp
 802682c:	9209      	str	r2, [sp, #36]	@ 0x24
 802682e:	f89a 3000 	ldrb.w	r3, [sl]
 8026832:	2b00      	cmp	r3, #0
 8026834:	f000 809f 	beq.w	8026976 <_svfiprintf_r+0x1c6>
 8026838:	2300      	movs	r3, #0
 802683a:	f04f 32ff 	mov.w	r2, #4294967295
 802683e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026842:	f10a 0a01 	add.w	sl, sl, #1
 8026846:	9304      	str	r3, [sp, #16]
 8026848:	9307      	str	r3, [sp, #28]
 802684a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802684e:	931a      	str	r3, [sp, #104]	@ 0x68
 8026850:	4654      	mov	r4, sl
 8026852:	2205      	movs	r2, #5
 8026854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026858:	484e      	ldr	r0, [pc, #312]	@ (8026994 <_svfiprintf_r+0x1e4>)
 802685a:	f7e1 fc01 	bl	8008060 <memchr>
 802685e:	9a04      	ldr	r2, [sp, #16]
 8026860:	b9d8      	cbnz	r0, 802689a <_svfiprintf_r+0xea>
 8026862:	06d0      	lsls	r0, r2, #27
 8026864:	bf44      	itt	mi
 8026866:	2320      	movmi	r3, #32
 8026868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802686c:	0711      	lsls	r1, r2, #28
 802686e:	bf44      	itt	mi
 8026870:	232b      	movmi	r3, #43	@ 0x2b
 8026872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026876:	f89a 3000 	ldrb.w	r3, [sl]
 802687a:	2b2a      	cmp	r3, #42	@ 0x2a
 802687c:	d015      	beq.n	80268aa <_svfiprintf_r+0xfa>
 802687e:	9a07      	ldr	r2, [sp, #28]
 8026880:	4654      	mov	r4, sl
 8026882:	2000      	movs	r0, #0
 8026884:	f04f 0c0a 	mov.w	ip, #10
 8026888:	4621      	mov	r1, r4
 802688a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802688e:	3b30      	subs	r3, #48	@ 0x30
 8026890:	2b09      	cmp	r3, #9
 8026892:	d94b      	bls.n	802692c <_svfiprintf_r+0x17c>
 8026894:	b1b0      	cbz	r0, 80268c4 <_svfiprintf_r+0x114>
 8026896:	9207      	str	r2, [sp, #28]
 8026898:	e014      	b.n	80268c4 <_svfiprintf_r+0x114>
 802689a:	eba0 0308 	sub.w	r3, r0, r8
 802689e:	fa09 f303 	lsl.w	r3, r9, r3
 80268a2:	4313      	orrs	r3, r2
 80268a4:	9304      	str	r3, [sp, #16]
 80268a6:	46a2      	mov	sl, r4
 80268a8:	e7d2      	b.n	8026850 <_svfiprintf_r+0xa0>
 80268aa:	9b03      	ldr	r3, [sp, #12]
 80268ac:	1d19      	adds	r1, r3, #4
 80268ae:	681b      	ldr	r3, [r3, #0]
 80268b0:	9103      	str	r1, [sp, #12]
 80268b2:	2b00      	cmp	r3, #0
 80268b4:	bfbb      	ittet	lt
 80268b6:	425b      	neglt	r3, r3
 80268b8:	f042 0202 	orrlt.w	r2, r2, #2
 80268bc:	9307      	strge	r3, [sp, #28]
 80268be:	9307      	strlt	r3, [sp, #28]
 80268c0:	bfb8      	it	lt
 80268c2:	9204      	strlt	r2, [sp, #16]
 80268c4:	7823      	ldrb	r3, [r4, #0]
 80268c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80268c8:	d10a      	bne.n	80268e0 <_svfiprintf_r+0x130>
 80268ca:	7863      	ldrb	r3, [r4, #1]
 80268cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80268ce:	d132      	bne.n	8026936 <_svfiprintf_r+0x186>
 80268d0:	9b03      	ldr	r3, [sp, #12]
 80268d2:	1d1a      	adds	r2, r3, #4
 80268d4:	681b      	ldr	r3, [r3, #0]
 80268d6:	9203      	str	r2, [sp, #12]
 80268d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80268dc:	3402      	adds	r4, #2
 80268de:	9305      	str	r3, [sp, #20]
 80268e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80269a4 <_svfiprintf_r+0x1f4>
 80268e4:	7821      	ldrb	r1, [r4, #0]
 80268e6:	2203      	movs	r2, #3
 80268e8:	4650      	mov	r0, sl
 80268ea:	f7e1 fbb9 	bl	8008060 <memchr>
 80268ee:	b138      	cbz	r0, 8026900 <_svfiprintf_r+0x150>
 80268f0:	9b04      	ldr	r3, [sp, #16]
 80268f2:	eba0 000a 	sub.w	r0, r0, sl
 80268f6:	2240      	movs	r2, #64	@ 0x40
 80268f8:	4082      	lsls	r2, r0
 80268fa:	4313      	orrs	r3, r2
 80268fc:	3401      	adds	r4, #1
 80268fe:	9304      	str	r3, [sp, #16]
 8026900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026904:	4824      	ldr	r0, [pc, #144]	@ (8026998 <_svfiprintf_r+0x1e8>)
 8026906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802690a:	2206      	movs	r2, #6
 802690c:	f7e1 fba8 	bl	8008060 <memchr>
 8026910:	2800      	cmp	r0, #0
 8026912:	d036      	beq.n	8026982 <_svfiprintf_r+0x1d2>
 8026914:	4b21      	ldr	r3, [pc, #132]	@ (802699c <_svfiprintf_r+0x1ec>)
 8026916:	bb1b      	cbnz	r3, 8026960 <_svfiprintf_r+0x1b0>
 8026918:	9b03      	ldr	r3, [sp, #12]
 802691a:	3307      	adds	r3, #7
 802691c:	f023 0307 	bic.w	r3, r3, #7
 8026920:	3308      	adds	r3, #8
 8026922:	9303      	str	r3, [sp, #12]
 8026924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026926:	4433      	add	r3, r6
 8026928:	9309      	str	r3, [sp, #36]	@ 0x24
 802692a:	e76a      	b.n	8026802 <_svfiprintf_r+0x52>
 802692c:	fb0c 3202 	mla	r2, ip, r2, r3
 8026930:	460c      	mov	r4, r1
 8026932:	2001      	movs	r0, #1
 8026934:	e7a8      	b.n	8026888 <_svfiprintf_r+0xd8>
 8026936:	2300      	movs	r3, #0
 8026938:	3401      	adds	r4, #1
 802693a:	9305      	str	r3, [sp, #20]
 802693c:	4619      	mov	r1, r3
 802693e:	f04f 0c0a 	mov.w	ip, #10
 8026942:	4620      	mov	r0, r4
 8026944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026948:	3a30      	subs	r2, #48	@ 0x30
 802694a:	2a09      	cmp	r2, #9
 802694c:	d903      	bls.n	8026956 <_svfiprintf_r+0x1a6>
 802694e:	2b00      	cmp	r3, #0
 8026950:	d0c6      	beq.n	80268e0 <_svfiprintf_r+0x130>
 8026952:	9105      	str	r1, [sp, #20]
 8026954:	e7c4      	b.n	80268e0 <_svfiprintf_r+0x130>
 8026956:	fb0c 2101 	mla	r1, ip, r1, r2
 802695a:	4604      	mov	r4, r0
 802695c:	2301      	movs	r3, #1
 802695e:	e7f0      	b.n	8026942 <_svfiprintf_r+0x192>
 8026960:	ab03      	add	r3, sp, #12
 8026962:	9300      	str	r3, [sp, #0]
 8026964:	462a      	mov	r2, r5
 8026966:	4b0e      	ldr	r3, [pc, #56]	@ (80269a0 <_svfiprintf_r+0x1f0>)
 8026968:	a904      	add	r1, sp, #16
 802696a:	4638      	mov	r0, r7
 802696c:	f7fc ff32 	bl	80237d4 <_printf_float>
 8026970:	1c42      	adds	r2, r0, #1
 8026972:	4606      	mov	r6, r0
 8026974:	d1d6      	bne.n	8026924 <_svfiprintf_r+0x174>
 8026976:	89ab      	ldrh	r3, [r5, #12]
 8026978:	065b      	lsls	r3, r3, #25
 802697a:	f53f af2d 	bmi.w	80267d8 <_svfiprintf_r+0x28>
 802697e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026980:	e72c      	b.n	80267dc <_svfiprintf_r+0x2c>
 8026982:	ab03      	add	r3, sp, #12
 8026984:	9300      	str	r3, [sp, #0]
 8026986:	462a      	mov	r2, r5
 8026988:	4b05      	ldr	r3, [pc, #20]	@ (80269a0 <_svfiprintf_r+0x1f0>)
 802698a:	a904      	add	r1, sp, #16
 802698c:	4638      	mov	r0, r7
 802698e:	f7fd f9b9 	bl	8023d04 <_printf_i>
 8026992:	e7ed      	b.n	8026970 <_svfiprintf_r+0x1c0>
 8026994:	08031050 	.word	0x08031050
 8026998:	0803105a 	.word	0x0803105a
 802699c:	080237d5 	.word	0x080237d5
 80269a0:	080266fb 	.word	0x080266fb
 80269a4:	08031056 	.word	0x08031056

080269a8 <__sfputc_r>:
 80269a8:	6893      	ldr	r3, [r2, #8]
 80269aa:	3b01      	subs	r3, #1
 80269ac:	2b00      	cmp	r3, #0
 80269ae:	b410      	push	{r4}
 80269b0:	6093      	str	r3, [r2, #8]
 80269b2:	da08      	bge.n	80269c6 <__sfputc_r+0x1e>
 80269b4:	6994      	ldr	r4, [r2, #24]
 80269b6:	42a3      	cmp	r3, r4
 80269b8:	db01      	blt.n	80269be <__sfputc_r+0x16>
 80269ba:	290a      	cmp	r1, #10
 80269bc:	d103      	bne.n	80269c6 <__sfputc_r+0x1e>
 80269be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80269c2:	f000 b9df 	b.w	8026d84 <__swbuf_r>
 80269c6:	6813      	ldr	r3, [r2, #0]
 80269c8:	1c58      	adds	r0, r3, #1
 80269ca:	6010      	str	r0, [r2, #0]
 80269cc:	7019      	strb	r1, [r3, #0]
 80269ce:	4608      	mov	r0, r1
 80269d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80269d4:	4770      	bx	lr

080269d6 <__sfputs_r>:
 80269d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269d8:	4606      	mov	r6, r0
 80269da:	460f      	mov	r7, r1
 80269dc:	4614      	mov	r4, r2
 80269de:	18d5      	adds	r5, r2, r3
 80269e0:	42ac      	cmp	r4, r5
 80269e2:	d101      	bne.n	80269e8 <__sfputs_r+0x12>
 80269e4:	2000      	movs	r0, #0
 80269e6:	e007      	b.n	80269f8 <__sfputs_r+0x22>
 80269e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80269ec:	463a      	mov	r2, r7
 80269ee:	4630      	mov	r0, r6
 80269f0:	f7ff ffda 	bl	80269a8 <__sfputc_r>
 80269f4:	1c43      	adds	r3, r0, #1
 80269f6:	d1f3      	bne.n	80269e0 <__sfputs_r+0xa>
 80269f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080269fc <_vfiprintf_r>:
 80269fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a00:	460d      	mov	r5, r1
 8026a02:	b09d      	sub	sp, #116	@ 0x74
 8026a04:	4614      	mov	r4, r2
 8026a06:	4698      	mov	r8, r3
 8026a08:	4606      	mov	r6, r0
 8026a0a:	b118      	cbz	r0, 8026a14 <_vfiprintf_r+0x18>
 8026a0c:	6a03      	ldr	r3, [r0, #32]
 8026a0e:	b90b      	cbnz	r3, 8026a14 <_vfiprintf_r+0x18>
 8026a10:	f7fd fd38 	bl	8024484 <__sinit>
 8026a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026a16:	07d9      	lsls	r1, r3, #31
 8026a18:	d405      	bmi.n	8026a26 <_vfiprintf_r+0x2a>
 8026a1a:	89ab      	ldrh	r3, [r5, #12]
 8026a1c:	059a      	lsls	r2, r3, #22
 8026a1e:	d402      	bmi.n	8026a26 <_vfiprintf_r+0x2a>
 8026a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026a22:	f7fd ff5a 	bl	80248da <__retarget_lock_acquire_recursive>
 8026a26:	89ab      	ldrh	r3, [r5, #12]
 8026a28:	071b      	lsls	r3, r3, #28
 8026a2a:	d501      	bpl.n	8026a30 <_vfiprintf_r+0x34>
 8026a2c:	692b      	ldr	r3, [r5, #16]
 8026a2e:	b99b      	cbnz	r3, 8026a58 <_vfiprintf_r+0x5c>
 8026a30:	4629      	mov	r1, r5
 8026a32:	4630      	mov	r0, r6
 8026a34:	f000 f9e4 	bl	8026e00 <__swsetup_r>
 8026a38:	b170      	cbz	r0, 8026a58 <_vfiprintf_r+0x5c>
 8026a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026a3c:	07dc      	lsls	r4, r3, #31
 8026a3e:	d504      	bpl.n	8026a4a <_vfiprintf_r+0x4e>
 8026a40:	f04f 30ff 	mov.w	r0, #4294967295
 8026a44:	b01d      	add	sp, #116	@ 0x74
 8026a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a4a:	89ab      	ldrh	r3, [r5, #12]
 8026a4c:	0598      	lsls	r0, r3, #22
 8026a4e:	d4f7      	bmi.n	8026a40 <_vfiprintf_r+0x44>
 8026a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026a52:	f7fd ff43 	bl	80248dc <__retarget_lock_release_recursive>
 8026a56:	e7f3      	b.n	8026a40 <_vfiprintf_r+0x44>
 8026a58:	2300      	movs	r3, #0
 8026a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a5c:	2320      	movs	r3, #32
 8026a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8026a66:	2330      	movs	r3, #48	@ 0x30
 8026a68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8026c18 <_vfiprintf_r+0x21c>
 8026a6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026a70:	f04f 0901 	mov.w	r9, #1
 8026a74:	4623      	mov	r3, r4
 8026a76:	469a      	mov	sl, r3
 8026a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026a7c:	b10a      	cbz	r2, 8026a82 <_vfiprintf_r+0x86>
 8026a7e:	2a25      	cmp	r2, #37	@ 0x25
 8026a80:	d1f9      	bne.n	8026a76 <_vfiprintf_r+0x7a>
 8026a82:	ebba 0b04 	subs.w	fp, sl, r4
 8026a86:	d00b      	beq.n	8026aa0 <_vfiprintf_r+0xa4>
 8026a88:	465b      	mov	r3, fp
 8026a8a:	4622      	mov	r2, r4
 8026a8c:	4629      	mov	r1, r5
 8026a8e:	4630      	mov	r0, r6
 8026a90:	f7ff ffa1 	bl	80269d6 <__sfputs_r>
 8026a94:	3001      	adds	r0, #1
 8026a96:	f000 80a7 	beq.w	8026be8 <_vfiprintf_r+0x1ec>
 8026a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026a9c:	445a      	add	r2, fp
 8026a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8026aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8026aa4:	2b00      	cmp	r3, #0
 8026aa6:	f000 809f 	beq.w	8026be8 <_vfiprintf_r+0x1ec>
 8026aaa:	2300      	movs	r3, #0
 8026aac:	f04f 32ff 	mov.w	r2, #4294967295
 8026ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026ab4:	f10a 0a01 	add.w	sl, sl, #1
 8026ab8:	9304      	str	r3, [sp, #16]
 8026aba:	9307      	str	r3, [sp, #28]
 8026abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8026ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8026ac2:	4654      	mov	r4, sl
 8026ac4:	2205      	movs	r2, #5
 8026ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026aca:	4853      	ldr	r0, [pc, #332]	@ (8026c18 <_vfiprintf_r+0x21c>)
 8026acc:	f7e1 fac8 	bl	8008060 <memchr>
 8026ad0:	9a04      	ldr	r2, [sp, #16]
 8026ad2:	b9d8      	cbnz	r0, 8026b0c <_vfiprintf_r+0x110>
 8026ad4:	06d1      	lsls	r1, r2, #27
 8026ad6:	bf44      	itt	mi
 8026ad8:	2320      	movmi	r3, #32
 8026ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026ade:	0713      	lsls	r3, r2, #28
 8026ae0:	bf44      	itt	mi
 8026ae2:	232b      	movmi	r3, #43	@ 0x2b
 8026ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8026aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8026aee:	d015      	beq.n	8026b1c <_vfiprintf_r+0x120>
 8026af0:	9a07      	ldr	r2, [sp, #28]
 8026af2:	4654      	mov	r4, sl
 8026af4:	2000      	movs	r0, #0
 8026af6:	f04f 0c0a 	mov.w	ip, #10
 8026afa:	4621      	mov	r1, r4
 8026afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026b00:	3b30      	subs	r3, #48	@ 0x30
 8026b02:	2b09      	cmp	r3, #9
 8026b04:	d94b      	bls.n	8026b9e <_vfiprintf_r+0x1a2>
 8026b06:	b1b0      	cbz	r0, 8026b36 <_vfiprintf_r+0x13a>
 8026b08:	9207      	str	r2, [sp, #28]
 8026b0a:	e014      	b.n	8026b36 <_vfiprintf_r+0x13a>
 8026b0c:	eba0 0308 	sub.w	r3, r0, r8
 8026b10:	fa09 f303 	lsl.w	r3, r9, r3
 8026b14:	4313      	orrs	r3, r2
 8026b16:	9304      	str	r3, [sp, #16]
 8026b18:	46a2      	mov	sl, r4
 8026b1a:	e7d2      	b.n	8026ac2 <_vfiprintf_r+0xc6>
 8026b1c:	9b03      	ldr	r3, [sp, #12]
 8026b1e:	1d19      	adds	r1, r3, #4
 8026b20:	681b      	ldr	r3, [r3, #0]
 8026b22:	9103      	str	r1, [sp, #12]
 8026b24:	2b00      	cmp	r3, #0
 8026b26:	bfbb      	ittet	lt
 8026b28:	425b      	neglt	r3, r3
 8026b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8026b2e:	9307      	strge	r3, [sp, #28]
 8026b30:	9307      	strlt	r3, [sp, #28]
 8026b32:	bfb8      	it	lt
 8026b34:	9204      	strlt	r2, [sp, #16]
 8026b36:	7823      	ldrb	r3, [r4, #0]
 8026b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8026b3a:	d10a      	bne.n	8026b52 <_vfiprintf_r+0x156>
 8026b3c:	7863      	ldrb	r3, [r4, #1]
 8026b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8026b40:	d132      	bne.n	8026ba8 <_vfiprintf_r+0x1ac>
 8026b42:	9b03      	ldr	r3, [sp, #12]
 8026b44:	1d1a      	adds	r2, r3, #4
 8026b46:	681b      	ldr	r3, [r3, #0]
 8026b48:	9203      	str	r2, [sp, #12]
 8026b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8026b4e:	3402      	adds	r4, #2
 8026b50:	9305      	str	r3, [sp, #20]
 8026b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8026c28 <_vfiprintf_r+0x22c>
 8026b56:	7821      	ldrb	r1, [r4, #0]
 8026b58:	2203      	movs	r2, #3
 8026b5a:	4650      	mov	r0, sl
 8026b5c:	f7e1 fa80 	bl	8008060 <memchr>
 8026b60:	b138      	cbz	r0, 8026b72 <_vfiprintf_r+0x176>
 8026b62:	9b04      	ldr	r3, [sp, #16]
 8026b64:	eba0 000a 	sub.w	r0, r0, sl
 8026b68:	2240      	movs	r2, #64	@ 0x40
 8026b6a:	4082      	lsls	r2, r0
 8026b6c:	4313      	orrs	r3, r2
 8026b6e:	3401      	adds	r4, #1
 8026b70:	9304      	str	r3, [sp, #16]
 8026b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026b76:	4829      	ldr	r0, [pc, #164]	@ (8026c1c <_vfiprintf_r+0x220>)
 8026b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8026b7c:	2206      	movs	r2, #6
 8026b7e:	f7e1 fa6f 	bl	8008060 <memchr>
 8026b82:	2800      	cmp	r0, #0
 8026b84:	d03f      	beq.n	8026c06 <_vfiprintf_r+0x20a>
 8026b86:	4b26      	ldr	r3, [pc, #152]	@ (8026c20 <_vfiprintf_r+0x224>)
 8026b88:	bb1b      	cbnz	r3, 8026bd2 <_vfiprintf_r+0x1d6>
 8026b8a:	9b03      	ldr	r3, [sp, #12]
 8026b8c:	3307      	adds	r3, #7
 8026b8e:	f023 0307 	bic.w	r3, r3, #7
 8026b92:	3308      	adds	r3, #8
 8026b94:	9303      	str	r3, [sp, #12]
 8026b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b98:	443b      	add	r3, r7
 8026b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8026b9c:	e76a      	b.n	8026a74 <_vfiprintf_r+0x78>
 8026b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8026ba2:	460c      	mov	r4, r1
 8026ba4:	2001      	movs	r0, #1
 8026ba6:	e7a8      	b.n	8026afa <_vfiprintf_r+0xfe>
 8026ba8:	2300      	movs	r3, #0
 8026baa:	3401      	adds	r4, #1
 8026bac:	9305      	str	r3, [sp, #20]
 8026bae:	4619      	mov	r1, r3
 8026bb0:	f04f 0c0a 	mov.w	ip, #10
 8026bb4:	4620      	mov	r0, r4
 8026bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026bba:	3a30      	subs	r2, #48	@ 0x30
 8026bbc:	2a09      	cmp	r2, #9
 8026bbe:	d903      	bls.n	8026bc8 <_vfiprintf_r+0x1cc>
 8026bc0:	2b00      	cmp	r3, #0
 8026bc2:	d0c6      	beq.n	8026b52 <_vfiprintf_r+0x156>
 8026bc4:	9105      	str	r1, [sp, #20]
 8026bc6:	e7c4      	b.n	8026b52 <_vfiprintf_r+0x156>
 8026bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8026bcc:	4604      	mov	r4, r0
 8026bce:	2301      	movs	r3, #1
 8026bd0:	e7f0      	b.n	8026bb4 <_vfiprintf_r+0x1b8>
 8026bd2:	ab03      	add	r3, sp, #12
 8026bd4:	9300      	str	r3, [sp, #0]
 8026bd6:	462a      	mov	r2, r5
 8026bd8:	4b12      	ldr	r3, [pc, #72]	@ (8026c24 <_vfiprintf_r+0x228>)
 8026bda:	a904      	add	r1, sp, #16
 8026bdc:	4630      	mov	r0, r6
 8026bde:	f7fc fdf9 	bl	80237d4 <_printf_float>
 8026be2:	4607      	mov	r7, r0
 8026be4:	1c78      	adds	r0, r7, #1
 8026be6:	d1d6      	bne.n	8026b96 <_vfiprintf_r+0x19a>
 8026be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026bea:	07d9      	lsls	r1, r3, #31
 8026bec:	d405      	bmi.n	8026bfa <_vfiprintf_r+0x1fe>
 8026bee:	89ab      	ldrh	r3, [r5, #12]
 8026bf0:	059a      	lsls	r2, r3, #22
 8026bf2:	d402      	bmi.n	8026bfa <_vfiprintf_r+0x1fe>
 8026bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026bf6:	f7fd fe71 	bl	80248dc <__retarget_lock_release_recursive>
 8026bfa:	89ab      	ldrh	r3, [r5, #12]
 8026bfc:	065b      	lsls	r3, r3, #25
 8026bfe:	f53f af1f 	bmi.w	8026a40 <_vfiprintf_r+0x44>
 8026c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026c04:	e71e      	b.n	8026a44 <_vfiprintf_r+0x48>
 8026c06:	ab03      	add	r3, sp, #12
 8026c08:	9300      	str	r3, [sp, #0]
 8026c0a:	462a      	mov	r2, r5
 8026c0c:	4b05      	ldr	r3, [pc, #20]	@ (8026c24 <_vfiprintf_r+0x228>)
 8026c0e:	a904      	add	r1, sp, #16
 8026c10:	4630      	mov	r0, r6
 8026c12:	f7fd f877 	bl	8023d04 <_printf_i>
 8026c16:	e7e4      	b.n	8026be2 <_vfiprintf_r+0x1e6>
 8026c18:	08031050 	.word	0x08031050
 8026c1c:	0803105a 	.word	0x0803105a
 8026c20:	080237d5 	.word	0x080237d5
 8026c24:	080269d7 	.word	0x080269d7
 8026c28:	08031056 	.word	0x08031056

08026c2c <__sflush_r>:
 8026c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026c34:	0716      	lsls	r6, r2, #28
 8026c36:	4605      	mov	r5, r0
 8026c38:	460c      	mov	r4, r1
 8026c3a:	d454      	bmi.n	8026ce6 <__sflush_r+0xba>
 8026c3c:	684b      	ldr	r3, [r1, #4]
 8026c3e:	2b00      	cmp	r3, #0
 8026c40:	dc02      	bgt.n	8026c48 <__sflush_r+0x1c>
 8026c42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8026c44:	2b00      	cmp	r3, #0
 8026c46:	dd48      	ble.n	8026cda <__sflush_r+0xae>
 8026c48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026c4a:	2e00      	cmp	r6, #0
 8026c4c:	d045      	beq.n	8026cda <__sflush_r+0xae>
 8026c4e:	2300      	movs	r3, #0
 8026c50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8026c54:	682f      	ldr	r7, [r5, #0]
 8026c56:	6a21      	ldr	r1, [r4, #32]
 8026c58:	602b      	str	r3, [r5, #0]
 8026c5a:	d030      	beq.n	8026cbe <__sflush_r+0x92>
 8026c5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026c5e:	89a3      	ldrh	r3, [r4, #12]
 8026c60:	0759      	lsls	r1, r3, #29
 8026c62:	d505      	bpl.n	8026c70 <__sflush_r+0x44>
 8026c64:	6863      	ldr	r3, [r4, #4]
 8026c66:	1ad2      	subs	r2, r2, r3
 8026c68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026c6a:	b10b      	cbz	r3, 8026c70 <__sflush_r+0x44>
 8026c6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026c6e:	1ad2      	subs	r2, r2, r3
 8026c70:	2300      	movs	r3, #0
 8026c72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026c74:	6a21      	ldr	r1, [r4, #32]
 8026c76:	4628      	mov	r0, r5
 8026c78:	47b0      	blx	r6
 8026c7a:	1c43      	adds	r3, r0, #1
 8026c7c:	89a3      	ldrh	r3, [r4, #12]
 8026c7e:	d106      	bne.n	8026c8e <__sflush_r+0x62>
 8026c80:	6829      	ldr	r1, [r5, #0]
 8026c82:	291d      	cmp	r1, #29
 8026c84:	d82b      	bhi.n	8026cde <__sflush_r+0xb2>
 8026c86:	4a2a      	ldr	r2, [pc, #168]	@ (8026d30 <__sflush_r+0x104>)
 8026c88:	410a      	asrs	r2, r1
 8026c8a:	07d6      	lsls	r6, r2, #31
 8026c8c:	d427      	bmi.n	8026cde <__sflush_r+0xb2>
 8026c8e:	2200      	movs	r2, #0
 8026c90:	6062      	str	r2, [r4, #4]
 8026c92:	04d9      	lsls	r1, r3, #19
 8026c94:	6922      	ldr	r2, [r4, #16]
 8026c96:	6022      	str	r2, [r4, #0]
 8026c98:	d504      	bpl.n	8026ca4 <__sflush_r+0x78>
 8026c9a:	1c42      	adds	r2, r0, #1
 8026c9c:	d101      	bne.n	8026ca2 <__sflush_r+0x76>
 8026c9e:	682b      	ldr	r3, [r5, #0]
 8026ca0:	b903      	cbnz	r3, 8026ca4 <__sflush_r+0x78>
 8026ca2:	6560      	str	r0, [r4, #84]	@ 0x54
 8026ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026ca6:	602f      	str	r7, [r5, #0]
 8026ca8:	b1b9      	cbz	r1, 8026cda <__sflush_r+0xae>
 8026caa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026cae:	4299      	cmp	r1, r3
 8026cb0:	d002      	beq.n	8026cb8 <__sflush_r+0x8c>
 8026cb2:	4628      	mov	r0, r5
 8026cb4:	f7fe fc90 	bl	80255d8 <_free_r>
 8026cb8:	2300      	movs	r3, #0
 8026cba:	6363      	str	r3, [r4, #52]	@ 0x34
 8026cbc:	e00d      	b.n	8026cda <__sflush_r+0xae>
 8026cbe:	2301      	movs	r3, #1
 8026cc0:	4628      	mov	r0, r5
 8026cc2:	47b0      	blx	r6
 8026cc4:	4602      	mov	r2, r0
 8026cc6:	1c50      	adds	r0, r2, #1
 8026cc8:	d1c9      	bne.n	8026c5e <__sflush_r+0x32>
 8026cca:	682b      	ldr	r3, [r5, #0]
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	d0c6      	beq.n	8026c5e <__sflush_r+0x32>
 8026cd0:	2b1d      	cmp	r3, #29
 8026cd2:	d001      	beq.n	8026cd8 <__sflush_r+0xac>
 8026cd4:	2b16      	cmp	r3, #22
 8026cd6:	d11e      	bne.n	8026d16 <__sflush_r+0xea>
 8026cd8:	602f      	str	r7, [r5, #0]
 8026cda:	2000      	movs	r0, #0
 8026cdc:	e022      	b.n	8026d24 <__sflush_r+0xf8>
 8026cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026ce2:	b21b      	sxth	r3, r3
 8026ce4:	e01b      	b.n	8026d1e <__sflush_r+0xf2>
 8026ce6:	690f      	ldr	r7, [r1, #16]
 8026ce8:	2f00      	cmp	r7, #0
 8026cea:	d0f6      	beq.n	8026cda <__sflush_r+0xae>
 8026cec:	0793      	lsls	r3, r2, #30
 8026cee:	680e      	ldr	r6, [r1, #0]
 8026cf0:	bf08      	it	eq
 8026cf2:	694b      	ldreq	r3, [r1, #20]
 8026cf4:	600f      	str	r7, [r1, #0]
 8026cf6:	bf18      	it	ne
 8026cf8:	2300      	movne	r3, #0
 8026cfa:	eba6 0807 	sub.w	r8, r6, r7
 8026cfe:	608b      	str	r3, [r1, #8]
 8026d00:	f1b8 0f00 	cmp.w	r8, #0
 8026d04:	dde9      	ble.n	8026cda <__sflush_r+0xae>
 8026d06:	6a21      	ldr	r1, [r4, #32]
 8026d08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026d0a:	4643      	mov	r3, r8
 8026d0c:	463a      	mov	r2, r7
 8026d0e:	4628      	mov	r0, r5
 8026d10:	47b0      	blx	r6
 8026d12:	2800      	cmp	r0, #0
 8026d14:	dc08      	bgt.n	8026d28 <__sflush_r+0xfc>
 8026d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026d1e:	81a3      	strh	r3, [r4, #12]
 8026d20:	f04f 30ff 	mov.w	r0, #4294967295
 8026d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026d28:	4407      	add	r7, r0
 8026d2a:	eba8 0800 	sub.w	r8, r8, r0
 8026d2e:	e7e7      	b.n	8026d00 <__sflush_r+0xd4>
 8026d30:	dfbffffe 	.word	0xdfbffffe

08026d34 <_fflush_r>:
 8026d34:	b538      	push	{r3, r4, r5, lr}
 8026d36:	690b      	ldr	r3, [r1, #16]
 8026d38:	4605      	mov	r5, r0
 8026d3a:	460c      	mov	r4, r1
 8026d3c:	b913      	cbnz	r3, 8026d44 <_fflush_r+0x10>
 8026d3e:	2500      	movs	r5, #0
 8026d40:	4628      	mov	r0, r5
 8026d42:	bd38      	pop	{r3, r4, r5, pc}
 8026d44:	b118      	cbz	r0, 8026d4e <_fflush_r+0x1a>
 8026d46:	6a03      	ldr	r3, [r0, #32]
 8026d48:	b90b      	cbnz	r3, 8026d4e <_fflush_r+0x1a>
 8026d4a:	f7fd fb9b 	bl	8024484 <__sinit>
 8026d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026d52:	2b00      	cmp	r3, #0
 8026d54:	d0f3      	beq.n	8026d3e <_fflush_r+0xa>
 8026d56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026d58:	07d0      	lsls	r0, r2, #31
 8026d5a:	d404      	bmi.n	8026d66 <_fflush_r+0x32>
 8026d5c:	0599      	lsls	r1, r3, #22
 8026d5e:	d402      	bmi.n	8026d66 <_fflush_r+0x32>
 8026d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026d62:	f7fd fdba 	bl	80248da <__retarget_lock_acquire_recursive>
 8026d66:	4628      	mov	r0, r5
 8026d68:	4621      	mov	r1, r4
 8026d6a:	f7ff ff5f 	bl	8026c2c <__sflush_r>
 8026d6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026d70:	07da      	lsls	r2, r3, #31
 8026d72:	4605      	mov	r5, r0
 8026d74:	d4e4      	bmi.n	8026d40 <_fflush_r+0xc>
 8026d76:	89a3      	ldrh	r3, [r4, #12]
 8026d78:	059b      	lsls	r3, r3, #22
 8026d7a:	d4e1      	bmi.n	8026d40 <_fflush_r+0xc>
 8026d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026d7e:	f7fd fdad 	bl	80248dc <__retarget_lock_release_recursive>
 8026d82:	e7dd      	b.n	8026d40 <_fflush_r+0xc>

08026d84 <__swbuf_r>:
 8026d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d86:	460e      	mov	r6, r1
 8026d88:	4614      	mov	r4, r2
 8026d8a:	4605      	mov	r5, r0
 8026d8c:	b118      	cbz	r0, 8026d96 <__swbuf_r+0x12>
 8026d8e:	6a03      	ldr	r3, [r0, #32]
 8026d90:	b90b      	cbnz	r3, 8026d96 <__swbuf_r+0x12>
 8026d92:	f7fd fb77 	bl	8024484 <__sinit>
 8026d96:	69a3      	ldr	r3, [r4, #24]
 8026d98:	60a3      	str	r3, [r4, #8]
 8026d9a:	89a3      	ldrh	r3, [r4, #12]
 8026d9c:	071a      	lsls	r2, r3, #28
 8026d9e:	d501      	bpl.n	8026da4 <__swbuf_r+0x20>
 8026da0:	6923      	ldr	r3, [r4, #16]
 8026da2:	b943      	cbnz	r3, 8026db6 <__swbuf_r+0x32>
 8026da4:	4621      	mov	r1, r4
 8026da6:	4628      	mov	r0, r5
 8026da8:	f000 f82a 	bl	8026e00 <__swsetup_r>
 8026dac:	b118      	cbz	r0, 8026db6 <__swbuf_r+0x32>
 8026dae:	f04f 37ff 	mov.w	r7, #4294967295
 8026db2:	4638      	mov	r0, r7
 8026db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026db6:	6823      	ldr	r3, [r4, #0]
 8026db8:	6922      	ldr	r2, [r4, #16]
 8026dba:	1a98      	subs	r0, r3, r2
 8026dbc:	6963      	ldr	r3, [r4, #20]
 8026dbe:	b2f6      	uxtb	r6, r6
 8026dc0:	4283      	cmp	r3, r0
 8026dc2:	4637      	mov	r7, r6
 8026dc4:	dc05      	bgt.n	8026dd2 <__swbuf_r+0x4e>
 8026dc6:	4621      	mov	r1, r4
 8026dc8:	4628      	mov	r0, r5
 8026dca:	f7ff ffb3 	bl	8026d34 <_fflush_r>
 8026dce:	2800      	cmp	r0, #0
 8026dd0:	d1ed      	bne.n	8026dae <__swbuf_r+0x2a>
 8026dd2:	68a3      	ldr	r3, [r4, #8]
 8026dd4:	3b01      	subs	r3, #1
 8026dd6:	60a3      	str	r3, [r4, #8]
 8026dd8:	6823      	ldr	r3, [r4, #0]
 8026dda:	1c5a      	adds	r2, r3, #1
 8026ddc:	6022      	str	r2, [r4, #0]
 8026dde:	701e      	strb	r6, [r3, #0]
 8026de0:	6962      	ldr	r2, [r4, #20]
 8026de2:	1c43      	adds	r3, r0, #1
 8026de4:	429a      	cmp	r2, r3
 8026de6:	d004      	beq.n	8026df2 <__swbuf_r+0x6e>
 8026de8:	89a3      	ldrh	r3, [r4, #12]
 8026dea:	07db      	lsls	r3, r3, #31
 8026dec:	d5e1      	bpl.n	8026db2 <__swbuf_r+0x2e>
 8026dee:	2e0a      	cmp	r6, #10
 8026df0:	d1df      	bne.n	8026db2 <__swbuf_r+0x2e>
 8026df2:	4621      	mov	r1, r4
 8026df4:	4628      	mov	r0, r5
 8026df6:	f7ff ff9d 	bl	8026d34 <_fflush_r>
 8026dfa:	2800      	cmp	r0, #0
 8026dfc:	d0d9      	beq.n	8026db2 <__swbuf_r+0x2e>
 8026dfe:	e7d6      	b.n	8026dae <__swbuf_r+0x2a>

08026e00 <__swsetup_r>:
 8026e00:	b538      	push	{r3, r4, r5, lr}
 8026e02:	4b29      	ldr	r3, [pc, #164]	@ (8026ea8 <__swsetup_r+0xa8>)
 8026e04:	4605      	mov	r5, r0
 8026e06:	6818      	ldr	r0, [r3, #0]
 8026e08:	460c      	mov	r4, r1
 8026e0a:	b118      	cbz	r0, 8026e14 <__swsetup_r+0x14>
 8026e0c:	6a03      	ldr	r3, [r0, #32]
 8026e0e:	b90b      	cbnz	r3, 8026e14 <__swsetup_r+0x14>
 8026e10:	f7fd fb38 	bl	8024484 <__sinit>
 8026e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e18:	0719      	lsls	r1, r3, #28
 8026e1a:	d422      	bmi.n	8026e62 <__swsetup_r+0x62>
 8026e1c:	06da      	lsls	r2, r3, #27
 8026e1e:	d407      	bmi.n	8026e30 <__swsetup_r+0x30>
 8026e20:	2209      	movs	r2, #9
 8026e22:	602a      	str	r2, [r5, #0]
 8026e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026e28:	81a3      	strh	r3, [r4, #12]
 8026e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8026e2e:	e033      	b.n	8026e98 <__swsetup_r+0x98>
 8026e30:	0758      	lsls	r0, r3, #29
 8026e32:	d512      	bpl.n	8026e5a <__swsetup_r+0x5a>
 8026e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026e36:	b141      	cbz	r1, 8026e4a <__swsetup_r+0x4a>
 8026e38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026e3c:	4299      	cmp	r1, r3
 8026e3e:	d002      	beq.n	8026e46 <__swsetup_r+0x46>
 8026e40:	4628      	mov	r0, r5
 8026e42:	f7fe fbc9 	bl	80255d8 <_free_r>
 8026e46:	2300      	movs	r3, #0
 8026e48:	6363      	str	r3, [r4, #52]	@ 0x34
 8026e4a:	89a3      	ldrh	r3, [r4, #12]
 8026e4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8026e50:	81a3      	strh	r3, [r4, #12]
 8026e52:	2300      	movs	r3, #0
 8026e54:	6063      	str	r3, [r4, #4]
 8026e56:	6923      	ldr	r3, [r4, #16]
 8026e58:	6023      	str	r3, [r4, #0]
 8026e5a:	89a3      	ldrh	r3, [r4, #12]
 8026e5c:	f043 0308 	orr.w	r3, r3, #8
 8026e60:	81a3      	strh	r3, [r4, #12]
 8026e62:	6923      	ldr	r3, [r4, #16]
 8026e64:	b94b      	cbnz	r3, 8026e7a <__swsetup_r+0x7a>
 8026e66:	89a3      	ldrh	r3, [r4, #12]
 8026e68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026e70:	d003      	beq.n	8026e7a <__swsetup_r+0x7a>
 8026e72:	4621      	mov	r1, r4
 8026e74:	4628      	mov	r0, r5
 8026e76:	f000 f883 	bl	8026f80 <__smakebuf_r>
 8026e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e7e:	f013 0201 	ands.w	r2, r3, #1
 8026e82:	d00a      	beq.n	8026e9a <__swsetup_r+0x9a>
 8026e84:	2200      	movs	r2, #0
 8026e86:	60a2      	str	r2, [r4, #8]
 8026e88:	6962      	ldr	r2, [r4, #20]
 8026e8a:	4252      	negs	r2, r2
 8026e8c:	61a2      	str	r2, [r4, #24]
 8026e8e:	6922      	ldr	r2, [r4, #16]
 8026e90:	b942      	cbnz	r2, 8026ea4 <__swsetup_r+0xa4>
 8026e92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8026e96:	d1c5      	bne.n	8026e24 <__swsetup_r+0x24>
 8026e98:	bd38      	pop	{r3, r4, r5, pc}
 8026e9a:	0799      	lsls	r1, r3, #30
 8026e9c:	bf58      	it	pl
 8026e9e:	6962      	ldrpl	r2, [r4, #20]
 8026ea0:	60a2      	str	r2, [r4, #8]
 8026ea2:	e7f4      	b.n	8026e8e <__swsetup_r+0x8e>
 8026ea4:	2000      	movs	r0, #0
 8026ea6:	e7f7      	b.n	8026e98 <__swsetup_r+0x98>
 8026ea8:	20000614 	.word	0x20000614

08026eac <_raise_r>:
 8026eac:	291f      	cmp	r1, #31
 8026eae:	b538      	push	{r3, r4, r5, lr}
 8026eb0:	4605      	mov	r5, r0
 8026eb2:	460c      	mov	r4, r1
 8026eb4:	d904      	bls.n	8026ec0 <_raise_r+0x14>
 8026eb6:	2316      	movs	r3, #22
 8026eb8:	6003      	str	r3, [r0, #0]
 8026eba:	f04f 30ff 	mov.w	r0, #4294967295
 8026ebe:	bd38      	pop	{r3, r4, r5, pc}
 8026ec0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8026ec2:	b112      	cbz	r2, 8026eca <_raise_r+0x1e>
 8026ec4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026ec8:	b94b      	cbnz	r3, 8026ede <_raise_r+0x32>
 8026eca:	4628      	mov	r0, r5
 8026ecc:	f000 f830 	bl	8026f30 <_getpid_r>
 8026ed0:	4622      	mov	r2, r4
 8026ed2:	4601      	mov	r1, r0
 8026ed4:	4628      	mov	r0, r5
 8026ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026eda:	f000 b817 	b.w	8026f0c <_kill_r>
 8026ede:	2b01      	cmp	r3, #1
 8026ee0:	d00a      	beq.n	8026ef8 <_raise_r+0x4c>
 8026ee2:	1c59      	adds	r1, r3, #1
 8026ee4:	d103      	bne.n	8026eee <_raise_r+0x42>
 8026ee6:	2316      	movs	r3, #22
 8026ee8:	6003      	str	r3, [r0, #0]
 8026eea:	2001      	movs	r0, #1
 8026eec:	e7e7      	b.n	8026ebe <_raise_r+0x12>
 8026eee:	2100      	movs	r1, #0
 8026ef0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8026ef4:	4620      	mov	r0, r4
 8026ef6:	4798      	blx	r3
 8026ef8:	2000      	movs	r0, #0
 8026efa:	e7e0      	b.n	8026ebe <_raise_r+0x12>

08026efc <raise>:
 8026efc:	4b02      	ldr	r3, [pc, #8]	@ (8026f08 <raise+0xc>)
 8026efe:	4601      	mov	r1, r0
 8026f00:	6818      	ldr	r0, [r3, #0]
 8026f02:	f7ff bfd3 	b.w	8026eac <_raise_r>
 8026f06:	bf00      	nop
 8026f08:	20000614 	.word	0x20000614

08026f0c <_kill_r>:
 8026f0c:	b538      	push	{r3, r4, r5, lr}
 8026f0e:	4d07      	ldr	r5, [pc, #28]	@ (8026f2c <_kill_r+0x20>)
 8026f10:	2300      	movs	r3, #0
 8026f12:	4604      	mov	r4, r0
 8026f14:	4608      	mov	r0, r1
 8026f16:	4611      	mov	r1, r2
 8026f18:	602b      	str	r3, [r5, #0]
 8026f1a:	f7e5 fbc1 	bl	800c6a0 <_kill>
 8026f1e:	1c43      	adds	r3, r0, #1
 8026f20:	d102      	bne.n	8026f28 <_kill_r+0x1c>
 8026f22:	682b      	ldr	r3, [r5, #0]
 8026f24:	b103      	cbz	r3, 8026f28 <_kill_r+0x1c>
 8026f26:	6023      	str	r3, [r4, #0]
 8026f28:	bd38      	pop	{r3, r4, r5, pc}
 8026f2a:	bf00      	nop
 8026f2c:	20002940 	.word	0x20002940

08026f30 <_getpid_r>:
 8026f30:	f7e5 bbb4 	b.w	800c69c <_getpid>

08026f34 <__swhatbuf_r>:
 8026f34:	b570      	push	{r4, r5, r6, lr}
 8026f36:	460c      	mov	r4, r1
 8026f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026f3c:	2900      	cmp	r1, #0
 8026f3e:	b096      	sub	sp, #88	@ 0x58
 8026f40:	4615      	mov	r5, r2
 8026f42:	461e      	mov	r6, r3
 8026f44:	da0d      	bge.n	8026f62 <__swhatbuf_r+0x2e>
 8026f46:	89a3      	ldrh	r3, [r4, #12]
 8026f48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026f4c:	f04f 0100 	mov.w	r1, #0
 8026f50:	bf14      	ite	ne
 8026f52:	2340      	movne	r3, #64	@ 0x40
 8026f54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026f58:	2000      	movs	r0, #0
 8026f5a:	6031      	str	r1, [r6, #0]
 8026f5c:	602b      	str	r3, [r5, #0]
 8026f5e:	b016      	add	sp, #88	@ 0x58
 8026f60:	bd70      	pop	{r4, r5, r6, pc}
 8026f62:	466a      	mov	r2, sp
 8026f64:	f000 f848 	bl	8026ff8 <_fstat_r>
 8026f68:	2800      	cmp	r0, #0
 8026f6a:	dbec      	blt.n	8026f46 <__swhatbuf_r+0x12>
 8026f6c:	9901      	ldr	r1, [sp, #4]
 8026f6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026f72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026f76:	4259      	negs	r1, r3
 8026f78:	4159      	adcs	r1, r3
 8026f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026f7e:	e7eb      	b.n	8026f58 <__swhatbuf_r+0x24>

08026f80 <__smakebuf_r>:
 8026f80:	898b      	ldrh	r3, [r1, #12]
 8026f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026f84:	079d      	lsls	r5, r3, #30
 8026f86:	4606      	mov	r6, r0
 8026f88:	460c      	mov	r4, r1
 8026f8a:	d507      	bpl.n	8026f9c <__smakebuf_r+0x1c>
 8026f8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026f90:	6023      	str	r3, [r4, #0]
 8026f92:	6123      	str	r3, [r4, #16]
 8026f94:	2301      	movs	r3, #1
 8026f96:	6163      	str	r3, [r4, #20]
 8026f98:	b003      	add	sp, #12
 8026f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026f9c:	ab01      	add	r3, sp, #4
 8026f9e:	466a      	mov	r2, sp
 8026fa0:	f7ff ffc8 	bl	8026f34 <__swhatbuf_r>
 8026fa4:	9f00      	ldr	r7, [sp, #0]
 8026fa6:	4605      	mov	r5, r0
 8026fa8:	4639      	mov	r1, r7
 8026faa:	4630      	mov	r0, r6
 8026fac:	f7fb faa8 	bl	8022500 <_malloc_r>
 8026fb0:	b948      	cbnz	r0, 8026fc6 <__smakebuf_r+0x46>
 8026fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026fb6:	059a      	lsls	r2, r3, #22
 8026fb8:	d4ee      	bmi.n	8026f98 <__smakebuf_r+0x18>
 8026fba:	f023 0303 	bic.w	r3, r3, #3
 8026fbe:	f043 0302 	orr.w	r3, r3, #2
 8026fc2:	81a3      	strh	r3, [r4, #12]
 8026fc4:	e7e2      	b.n	8026f8c <__smakebuf_r+0xc>
 8026fc6:	89a3      	ldrh	r3, [r4, #12]
 8026fc8:	6020      	str	r0, [r4, #0]
 8026fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026fce:	81a3      	strh	r3, [r4, #12]
 8026fd0:	9b01      	ldr	r3, [sp, #4]
 8026fd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8026fd6:	b15b      	cbz	r3, 8026ff0 <__smakebuf_r+0x70>
 8026fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026fdc:	4630      	mov	r0, r6
 8026fde:	f000 f81d 	bl	802701c <_isatty_r>
 8026fe2:	b128      	cbz	r0, 8026ff0 <__smakebuf_r+0x70>
 8026fe4:	89a3      	ldrh	r3, [r4, #12]
 8026fe6:	f023 0303 	bic.w	r3, r3, #3
 8026fea:	f043 0301 	orr.w	r3, r3, #1
 8026fee:	81a3      	strh	r3, [r4, #12]
 8026ff0:	89a3      	ldrh	r3, [r4, #12]
 8026ff2:	431d      	orrs	r5, r3
 8026ff4:	81a5      	strh	r5, [r4, #12]
 8026ff6:	e7cf      	b.n	8026f98 <__smakebuf_r+0x18>

08026ff8 <_fstat_r>:
 8026ff8:	b538      	push	{r3, r4, r5, lr}
 8026ffa:	4d07      	ldr	r5, [pc, #28]	@ (8027018 <_fstat_r+0x20>)
 8026ffc:	2300      	movs	r3, #0
 8026ffe:	4604      	mov	r4, r0
 8027000:	4608      	mov	r0, r1
 8027002:	4611      	mov	r1, r2
 8027004:	602b      	str	r3, [r5, #0]
 8027006:	f7e5 fb7a 	bl	800c6fe <_fstat>
 802700a:	1c43      	adds	r3, r0, #1
 802700c:	d102      	bne.n	8027014 <_fstat_r+0x1c>
 802700e:	682b      	ldr	r3, [r5, #0]
 8027010:	b103      	cbz	r3, 8027014 <_fstat_r+0x1c>
 8027012:	6023      	str	r3, [r4, #0]
 8027014:	bd38      	pop	{r3, r4, r5, pc}
 8027016:	bf00      	nop
 8027018:	20002940 	.word	0x20002940

0802701c <_isatty_r>:
 802701c:	b538      	push	{r3, r4, r5, lr}
 802701e:	4d06      	ldr	r5, [pc, #24]	@ (8027038 <_isatty_r+0x1c>)
 8027020:	2300      	movs	r3, #0
 8027022:	4604      	mov	r4, r0
 8027024:	4608      	mov	r0, r1
 8027026:	602b      	str	r3, [r5, #0]
 8027028:	f7e5 fb6e 	bl	800c708 <_isatty>
 802702c:	1c43      	adds	r3, r0, #1
 802702e:	d102      	bne.n	8027036 <_isatty_r+0x1a>
 8027030:	682b      	ldr	r3, [r5, #0]
 8027032:	b103      	cbz	r3, 8027036 <_isatty_r+0x1a>
 8027034:	6023      	str	r3, [r4, #0]
 8027036:	bd38      	pop	{r3, r4, r5, pc}
 8027038:	20002940 	.word	0x20002940

0802703c <atan2>:
 802703c:	f000 ba30 	b.w	80274a0 <__ieee754_atan2>

08027040 <powf>:
 8027040:	b508      	push	{r3, lr}
 8027042:	ed2d 8b04 	vpush	{d8-d9}
 8027046:	eeb0 8a60 	vmov.f32	s16, s1
 802704a:	eeb0 9a40 	vmov.f32	s18, s0
 802704e:	f000 fe0f 	bl	8027c70 <__ieee754_powf>
 8027052:	eeb4 8a48 	vcmp.f32	s16, s16
 8027056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802705a:	eef0 8a40 	vmov.f32	s17, s0
 802705e:	d63e      	bvs.n	80270de <powf+0x9e>
 8027060:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8027064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027068:	d112      	bne.n	8027090 <powf+0x50>
 802706a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027072:	d039      	beq.n	80270e8 <powf+0xa8>
 8027074:	eeb0 0a48 	vmov.f32	s0, s16
 8027078:	f000 f90e 	bl	8027298 <finitef>
 802707c:	b378      	cbz	r0, 80270de <powf+0x9e>
 802707e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027086:	d52a      	bpl.n	80270de <powf+0x9e>
 8027088:	f7fd fbfc 	bl	8024884 <__errno>
 802708c:	2322      	movs	r3, #34	@ 0x22
 802708e:	e014      	b.n	80270ba <powf+0x7a>
 8027090:	f000 f902 	bl	8027298 <finitef>
 8027094:	b998      	cbnz	r0, 80270be <powf+0x7e>
 8027096:	eeb0 0a49 	vmov.f32	s0, s18
 802709a:	f000 f8fd 	bl	8027298 <finitef>
 802709e:	b170      	cbz	r0, 80270be <powf+0x7e>
 80270a0:	eeb0 0a48 	vmov.f32	s0, s16
 80270a4:	f000 f8f8 	bl	8027298 <finitef>
 80270a8:	b148      	cbz	r0, 80270be <powf+0x7e>
 80270aa:	eef4 8a68 	vcmp.f32	s17, s17
 80270ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270b2:	d7e9      	bvc.n	8027088 <powf+0x48>
 80270b4:	f7fd fbe6 	bl	8024884 <__errno>
 80270b8:	2321      	movs	r3, #33	@ 0x21
 80270ba:	6003      	str	r3, [r0, #0]
 80270bc:	e00f      	b.n	80270de <powf+0x9e>
 80270be:	eef5 8a40 	vcmp.f32	s17, #0.0
 80270c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270c6:	d10a      	bne.n	80270de <powf+0x9e>
 80270c8:	eeb0 0a49 	vmov.f32	s0, s18
 80270cc:	f000 f8e4 	bl	8027298 <finitef>
 80270d0:	b128      	cbz	r0, 80270de <powf+0x9e>
 80270d2:	eeb0 0a48 	vmov.f32	s0, s16
 80270d6:	f000 f8df 	bl	8027298 <finitef>
 80270da:	2800      	cmp	r0, #0
 80270dc:	d1d4      	bne.n	8027088 <powf+0x48>
 80270de:	eeb0 0a68 	vmov.f32	s0, s17
 80270e2:	ecbd 8b04 	vpop	{d8-d9}
 80270e6:	bd08      	pop	{r3, pc}
 80270e8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80270ec:	e7f7      	b.n	80270de <powf+0x9e>
	...

080270f0 <sqrtf>:
 80270f0:	b508      	push	{r3, lr}
 80270f2:	ed2d 8b02 	vpush	{d8}
 80270f6:	eeb0 8a40 	vmov.f32	s16, s0
 80270fa:	f000 f904 	bl	8027306 <__ieee754_sqrtf>
 80270fe:	eeb4 8a48 	vcmp.f32	s16, s16
 8027102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027106:	d60c      	bvs.n	8027122 <sqrtf+0x32>
 8027108:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8027128 <sqrtf+0x38>
 802710c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8027110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027114:	d505      	bpl.n	8027122 <sqrtf+0x32>
 8027116:	f7fd fbb5 	bl	8024884 <__errno>
 802711a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802711e:	2321      	movs	r3, #33	@ 0x21
 8027120:	6003      	str	r3, [r0, #0]
 8027122:	ecbd 8b02 	vpop	{d8}
 8027126:	bd08      	pop	{r3, pc}
 8027128:	00000000 	.word	0x00000000

0802712c <cosf>:
 802712c:	ee10 3a10 	vmov	r3, s0
 8027130:	b507      	push	{r0, r1, r2, lr}
 8027132:	4a1e      	ldr	r2, [pc, #120]	@ (80271ac <cosf+0x80>)
 8027134:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027138:	4293      	cmp	r3, r2
 802713a:	d806      	bhi.n	802714a <cosf+0x1e>
 802713c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80271b0 <cosf+0x84>
 8027140:	b003      	add	sp, #12
 8027142:	f85d eb04 	ldr.w	lr, [sp], #4
 8027146:	f000 bc13 	b.w	8027970 <__kernel_cosf>
 802714a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802714e:	d304      	bcc.n	802715a <cosf+0x2e>
 8027150:	ee30 0a40 	vsub.f32	s0, s0, s0
 8027154:	b003      	add	sp, #12
 8027156:	f85d fb04 	ldr.w	pc, [sp], #4
 802715a:	4668      	mov	r0, sp
 802715c:	f001 f858 	bl	8028210 <__ieee754_rem_pio2f>
 8027160:	f000 0003 	and.w	r0, r0, #3
 8027164:	2801      	cmp	r0, #1
 8027166:	d009      	beq.n	802717c <cosf+0x50>
 8027168:	2802      	cmp	r0, #2
 802716a:	d010      	beq.n	802718e <cosf+0x62>
 802716c:	b9b0      	cbnz	r0, 802719c <cosf+0x70>
 802716e:	eddd 0a01 	vldr	s1, [sp, #4]
 8027172:	ed9d 0a00 	vldr	s0, [sp]
 8027176:	f000 fbfb 	bl	8027970 <__kernel_cosf>
 802717a:	e7eb      	b.n	8027154 <cosf+0x28>
 802717c:	eddd 0a01 	vldr	s1, [sp, #4]
 8027180:	ed9d 0a00 	vldr	s0, [sp]
 8027184:	f000 fc4c 	bl	8027a20 <__kernel_sinf>
 8027188:	eeb1 0a40 	vneg.f32	s0, s0
 802718c:	e7e2      	b.n	8027154 <cosf+0x28>
 802718e:	eddd 0a01 	vldr	s1, [sp, #4]
 8027192:	ed9d 0a00 	vldr	s0, [sp]
 8027196:	f000 fbeb 	bl	8027970 <__kernel_cosf>
 802719a:	e7f5      	b.n	8027188 <cosf+0x5c>
 802719c:	eddd 0a01 	vldr	s1, [sp, #4]
 80271a0:	ed9d 0a00 	vldr	s0, [sp]
 80271a4:	2001      	movs	r0, #1
 80271a6:	f000 fc3b 	bl	8027a20 <__kernel_sinf>
 80271aa:	e7d3      	b.n	8027154 <cosf+0x28>
 80271ac:	3f490fd8 	.word	0x3f490fd8
 80271b0:	00000000 	.word	0x00000000

080271b4 <sinf>:
 80271b4:	ee10 3a10 	vmov	r3, s0
 80271b8:	b507      	push	{r0, r1, r2, lr}
 80271ba:	4a1f      	ldr	r2, [pc, #124]	@ (8027238 <sinf+0x84>)
 80271bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80271c0:	4293      	cmp	r3, r2
 80271c2:	d807      	bhi.n	80271d4 <sinf+0x20>
 80271c4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 802723c <sinf+0x88>
 80271c8:	2000      	movs	r0, #0
 80271ca:	b003      	add	sp, #12
 80271cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80271d0:	f000 bc26 	b.w	8027a20 <__kernel_sinf>
 80271d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80271d8:	d304      	bcc.n	80271e4 <sinf+0x30>
 80271da:	ee30 0a40 	vsub.f32	s0, s0, s0
 80271de:	b003      	add	sp, #12
 80271e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80271e4:	4668      	mov	r0, sp
 80271e6:	f001 f813 	bl	8028210 <__ieee754_rem_pio2f>
 80271ea:	f000 0003 	and.w	r0, r0, #3
 80271ee:	2801      	cmp	r0, #1
 80271f0:	d00a      	beq.n	8027208 <sinf+0x54>
 80271f2:	2802      	cmp	r0, #2
 80271f4:	d00f      	beq.n	8027216 <sinf+0x62>
 80271f6:	b9c0      	cbnz	r0, 802722a <sinf+0x76>
 80271f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80271fc:	ed9d 0a00 	vldr	s0, [sp]
 8027200:	2001      	movs	r0, #1
 8027202:	f000 fc0d 	bl	8027a20 <__kernel_sinf>
 8027206:	e7ea      	b.n	80271de <sinf+0x2a>
 8027208:	eddd 0a01 	vldr	s1, [sp, #4]
 802720c:	ed9d 0a00 	vldr	s0, [sp]
 8027210:	f000 fbae 	bl	8027970 <__kernel_cosf>
 8027214:	e7e3      	b.n	80271de <sinf+0x2a>
 8027216:	eddd 0a01 	vldr	s1, [sp, #4]
 802721a:	ed9d 0a00 	vldr	s0, [sp]
 802721e:	2001      	movs	r0, #1
 8027220:	f000 fbfe 	bl	8027a20 <__kernel_sinf>
 8027224:	eeb1 0a40 	vneg.f32	s0, s0
 8027228:	e7d9      	b.n	80271de <sinf+0x2a>
 802722a:	eddd 0a01 	vldr	s1, [sp, #4]
 802722e:	ed9d 0a00 	vldr	s0, [sp]
 8027232:	f000 fb9d 	bl	8027970 <__kernel_cosf>
 8027236:	e7f5      	b.n	8027224 <sinf+0x70>
 8027238:	3f490fd8 	.word	0x3f490fd8
 802723c:	00000000 	.word	0x00000000

08027240 <tanf>:
 8027240:	ee10 3a10 	vmov	r3, s0
 8027244:	b507      	push	{r0, r1, r2, lr}
 8027246:	4a12      	ldr	r2, [pc, #72]	@ (8027290 <tanf+0x50>)
 8027248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802724c:	4293      	cmp	r3, r2
 802724e:	d807      	bhi.n	8027260 <tanf+0x20>
 8027250:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8027294 <tanf+0x54>
 8027254:	2001      	movs	r0, #1
 8027256:	b003      	add	sp, #12
 8027258:	f85d eb04 	ldr.w	lr, [sp], #4
 802725c:	f000 bc28 	b.w	8027ab0 <__kernel_tanf>
 8027260:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8027264:	d304      	bcc.n	8027270 <tanf+0x30>
 8027266:	ee30 0a40 	vsub.f32	s0, s0, s0
 802726a:	b003      	add	sp, #12
 802726c:	f85d fb04 	ldr.w	pc, [sp], #4
 8027270:	4668      	mov	r0, sp
 8027272:	f000 ffcd 	bl	8028210 <__ieee754_rem_pio2f>
 8027276:	0040      	lsls	r0, r0, #1
 8027278:	f000 0002 	and.w	r0, r0, #2
 802727c:	eddd 0a01 	vldr	s1, [sp, #4]
 8027280:	ed9d 0a00 	vldr	s0, [sp]
 8027284:	f1c0 0001 	rsb	r0, r0, #1
 8027288:	f000 fc12 	bl	8027ab0 <__kernel_tanf>
 802728c:	e7ed      	b.n	802726a <tanf+0x2a>
 802728e:	bf00      	nop
 8027290:	3f490fda 	.word	0x3f490fda
 8027294:	00000000 	.word	0x00000000

08027298 <finitef>:
 8027298:	ee10 3a10 	vmov	r3, s0
 802729c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80272a0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80272a4:	bfac      	ite	ge
 80272a6:	2000      	movge	r0, #0
 80272a8:	2001      	movlt	r0, #1
 80272aa:	4770      	bx	lr

080272ac <lroundf>:
 80272ac:	ee10 1a10 	vmov	r1, s0
 80272b0:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 80272b4:	2900      	cmp	r1, #0
 80272b6:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 80272ba:	bfb4      	ite	lt
 80272bc:	f04f 30ff 	movlt.w	r0, #4294967295
 80272c0:	2001      	movge	r0, #1
 80272c2:	2a1e      	cmp	r2, #30
 80272c4:	dc1a      	bgt.n	80272fc <lroundf+0x50>
 80272c6:	2a00      	cmp	r2, #0
 80272c8:	da03      	bge.n	80272d2 <lroundf+0x26>
 80272ca:	3201      	adds	r2, #1
 80272cc:	bf18      	it	ne
 80272ce:	2000      	movne	r0, #0
 80272d0:	4770      	bx	lr
 80272d2:	2a16      	cmp	r2, #22
 80272d4:	bfd8      	it	le
 80272d6:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 80272da:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80272de:	bfd8      	it	le
 80272e0:	4113      	asrle	r3, r2
 80272e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80272e6:	bfcd      	iteet	gt
 80272e8:	3b96      	subgt	r3, #150	@ 0x96
 80272ea:	185b      	addle	r3, r3, r1
 80272ec:	f1c2 0217 	rsble	r2, r2, #23
 80272f0:	fa01 f303 	lslgt.w	r3, r1, r3
 80272f4:	bfd8      	it	le
 80272f6:	40d3      	lsrle	r3, r2
 80272f8:	4358      	muls	r0, r3
 80272fa:	4770      	bx	lr
 80272fc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027300:	ee17 0a90 	vmov	r0, s15
 8027304:	4770      	bx	lr

08027306 <__ieee754_sqrtf>:
 8027306:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802730a:	4770      	bx	lr

0802730c <ceilf>:
 802730c:	ee10 3a10 	vmov	r3, s0
 8027310:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027314:	3a7f      	subs	r2, #127	@ 0x7f
 8027316:	2a16      	cmp	r2, #22
 8027318:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 802731c:	dc2a      	bgt.n	8027374 <ceilf+0x68>
 802731e:	2a00      	cmp	r2, #0
 8027320:	da11      	bge.n	8027346 <ceilf+0x3a>
 8027322:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8027388 <ceilf+0x7c>
 8027326:	ee30 0a27 	vadd.f32	s0, s0, s15
 802732a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802732e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027332:	dd05      	ble.n	8027340 <ceilf+0x34>
 8027334:	2b00      	cmp	r3, #0
 8027336:	db23      	blt.n	8027380 <ceilf+0x74>
 8027338:	2900      	cmp	r1, #0
 802733a:	bf18      	it	ne
 802733c:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 8027340:	ee00 3a10 	vmov	s0, r3
 8027344:	4770      	bx	lr
 8027346:	4911      	ldr	r1, [pc, #68]	@ (802738c <ceilf+0x80>)
 8027348:	4111      	asrs	r1, r2
 802734a:	420b      	tst	r3, r1
 802734c:	d0fa      	beq.n	8027344 <ceilf+0x38>
 802734e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8027388 <ceilf+0x7c>
 8027352:	ee30 0a27 	vadd.f32	s0, s0, s15
 8027356:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802735e:	ddef      	ble.n	8027340 <ceilf+0x34>
 8027360:	2b00      	cmp	r3, #0
 8027362:	bfc2      	ittt	gt
 8027364:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 8027368:	fa40 f202 	asrgt.w	r2, r0, r2
 802736c:	189b      	addgt	r3, r3, r2
 802736e:	ea23 0301 	bic.w	r3, r3, r1
 8027372:	e7e5      	b.n	8027340 <ceilf+0x34>
 8027374:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8027378:	d3e4      	bcc.n	8027344 <ceilf+0x38>
 802737a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802737e:	4770      	bx	lr
 8027380:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8027384:	e7dc      	b.n	8027340 <ceilf+0x34>
 8027386:	bf00      	nop
 8027388:	7149f2ca 	.word	0x7149f2ca
 802738c:	007fffff 	.word	0x007fffff

08027390 <floorf>:
 8027390:	ee10 3a10 	vmov	r3, s0
 8027394:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027398:	3a7f      	subs	r2, #127	@ 0x7f
 802739a:	2a16      	cmp	r2, #22
 802739c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80273a0:	dc2b      	bgt.n	80273fa <floorf+0x6a>
 80273a2:	2a00      	cmp	r2, #0
 80273a4:	da12      	bge.n	80273cc <floorf+0x3c>
 80273a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802740c <floorf+0x7c>
 80273aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80273ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80273b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273b6:	dd06      	ble.n	80273c6 <floorf+0x36>
 80273b8:	2b00      	cmp	r3, #0
 80273ba:	da24      	bge.n	8027406 <floorf+0x76>
 80273bc:	2900      	cmp	r1, #0
 80273be:	4b14      	ldr	r3, [pc, #80]	@ (8027410 <floorf+0x80>)
 80273c0:	bf08      	it	eq
 80273c2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80273c6:	ee00 3a10 	vmov	s0, r3
 80273ca:	4770      	bx	lr
 80273cc:	4911      	ldr	r1, [pc, #68]	@ (8027414 <floorf+0x84>)
 80273ce:	4111      	asrs	r1, r2
 80273d0:	420b      	tst	r3, r1
 80273d2:	d0fa      	beq.n	80273ca <floorf+0x3a>
 80273d4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 802740c <floorf+0x7c>
 80273d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80273dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80273e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273e4:	ddef      	ble.n	80273c6 <floorf+0x36>
 80273e6:	2b00      	cmp	r3, #0
 80273e8:	bfbe      	ittt	lt
 80273ea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80273ee:	fa40 f202 	asrlt.w	r2, r0, r2
 80273f2:	189b      	addlt	r3, r3, r2
 80273f4:	ea23 0301 	bic.w	r3, r3, r1
 80273f8:	e7e5      	b.n	80273c6 <floorf+0x36>
 80273fa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80273fe:	d3e4      	bcc.n	80273ca <floorf+0x3a>
 8027400:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027404:	4770      	bx	lr
 8027406:	2300      	movs	r3, #0
 8027408:	e7dd      	b.n	80273c6 <floorf+0x36>
 802740a:	bf00      	nop
 802740c:	7149f2ca 	.word	0x7149f2ca
 8027410:	bf800000 	.word	0xbf800000
 8027414:	007fffff 	.word	0x007fffff

08027418 <roundf>:
 8027418:	ee10 0a10 	vmov	r0, s0
 802741c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8027420:	3a7f      	subs	r2, #127	@ 0x7f
 8027422:	2a16      	cmp	r2, #22
 8027424:	dc15      	bgt.n	8027452 <roundf+0x3a>
 8027426:	2a00      	cmp	r2, #0
 8027428:	da08      	bge.n	802743c <roundf+0x24>
 802742a:	3201      	adds	r2, #1
 802742c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8027430:	d101      	bne.n	8027436 <roundf+0x1e>
 8027432:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8027436:	ee00 3a10 	vmov	s0, r3
 802743a:	4770      	bx	lr
 802743c:	4907      	ldr	r1, [pc, #28]	@ (802745c <roundf+0x44>)
 802743e:	4111      	asrs	r1, r2
 8027440:	4201      	tst	r1, r0
 8027442:	d0fa      	beq.n	802743a <roundf+0x22>
 8027444:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8027448:	4113      	asrs	r3, r2
 802744a:	4403      	add	r3, r0
 802744c:	ea23 0301 	bic.w	r3, r3, r1
 8027450:	e7f1      	b.n	8027436 <roundf+0x1e>
 8027452:	2a80      	cmp	r2, #128	@ 0x80
 8027454:	d1f1      	bne.n	802743a <roundf+0x22>
 8027456:	ee30 0a00 	vadd.f32	s0, s0, s0
 802745a:	4770      	bx	lr
 802745c:	007fffff 	.word	0x007fffff

08027460 <truncf>:
 8027460:	ee10 0a10 	vmov	r0, s0
 8027464:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8027468:	3a7f      	subs	r2, #127	@ 0x7f
 802746a:	2a16      	cmp	r2, #22
 802746c:	dc0e      	bgt.n	802748c <truncf+0x2c>
 802746e:	2a00      	cmp	r2, #0
 8027470:	bfa4      	itt	ge
 8027472:	4909      	ldrge	r1, [pc, #36]	@ (8027498 <truncf+0x38>)
 8027474:	fa41 f202 	asrge.w	r2, r1, r2
 8027478:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 802747c:	bfa5      	ittet	ge
 802747e:	4002      	andge	r2, r0
 8027480:	4313      	orrge	r3, r2
 8027482:	ee00 3a10 	vmovlt	s0, r3
 8027486:	ee00 3a10 	vmovge	s0, r3
 802748a:	4770      	bx	lr
 802748c:	2a80      	cmp	r2, #128	@ 0x80
 802748e:	bf08      	it	eq
 8027490:	ee30 0a00 	vaddeq.f32	s0, s0, s0
 8027494:	4770      	bx	lr
 8027496:	bf00      	nop
 8027498:	ff800000 	.word	0xff800000
 802749c:	00000000 	.word	0x00000000

080274a0 <__ieee754_atan2>:
 80274a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80274a4:	ec57 6b11 	vmov	r6, r7, d1
 80274a8:	4273      	negs	r3, r6
 80274aa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8027628 <__ieee754_atan2+0x188>
 80274ae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80274b2:	4333      	orrs	r3, r6
 80274b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80274b8:	4543      	cmp	r3, r8
 80274ba:	ec51 0b10 	vmov	r0, r1, d0
 80274be:	4635      	mov	r5, r6
 80274c0:	d809      	bhi.n	80274d6 <__ieee754_atan2+0x36>
 80274c2:	4244      	negs	r4, r0
 80274c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80274c8:	4304      	orrs	r4, r0
 80274ca:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80274ce:	4544      	cmp	r4, r8
 80274d0:	468e      	mov	lr, r1
 80274d2:	4681      	mov	r9, r0
 80274d4:	d907      	bls.n	80274e6 <__ieee754_atan2+0x46>
 80274d6:	4632      	mov	r2, r6
 80274d8:	463b      	mov	r3, r7
 80274da:	f7e0 fe1f 	bl	800811c <__adddf3>
 80274de:	ec41 0b10 	vmov	d0, r0, r1
 80274e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80274e6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80274ea:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80274ee:	4334      	orrs	r4, r6
 80274f0:	d103      	bne.n	80274fa <__ieee754_atan2+0x5a>
 80274f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80274f6:	f000 b89b 	b.w	8027630 <atan>
 80274fa:	17bc      	asrs	r4, r7, #30
 80274fc:	f004 0402 	and.w	r4, r4, #2
 8027500:	ea53 0909 	orrs.w	r9, r3, r9
 8027504:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8027508:	d107      	bne.n	802751a <__ieee754_atan2+0x7a>
 802750a:	2c02      	cmp	r4, #2
 802750c:	d05f      	beq.n	80275ce <__ieee754_atan2+0x12e>
 802750e:	2c03      	cmp	r4, #3
 8027510:	d1e5      	bne.n	80274de <__ieee754_atan2+0x3e>
 8027512:	a141      	add	r1, pc, #260	@ (adr r1, 8027618 <__ieee754_atan2+0x178>)
 8027514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027518:	e7e1      	b.n	80274de <__ieee754_atan2+0x3e>
 802751a:	4315      	orrs	r5, r2
 802751c:	d106      	bne.n	802752c <__ieee754_atan2+0x8c>
 802751e:	f1be 0f00 	cmp.w	lr, #0
 8027522:	da5f      	bge.n	80275e4 <__ieee754_atan2+0x144>
 8027524:	a13e      	add	r1, pc, #248	@ (adr r1, 8027620 <__ieee754_atan2+0x180>)
 8027526:	e9d1 0100 	ldrd	r0, r1, [r1]
 802752a:	e7d8      	b.n	80274de <__ieee754_atan2+0x3e>
 802752c:	4542      	cmp	r2, r8
 802752e:	d10f      	bne.n	8027550 <__ieee754_atan2+0xb0>
 8027530:	4293      	cmp	r3, r2
 8027532:	f104 34ff 	add.w	r4, r4, #4294967295
 8027536:	d107      	bne.n	8027548 <__ieee754_atan2+0xa8>
 8027538:	2c02      	cmp	r4, #2
 802753a:	d84c      	bhi.n	80275d6 <__ieee754_atan2+0x136>
 802753c:	4b34      	ldr	r3, [pc, #208]	@ (8027610 <__ieee754_atan2+0x170>)
 802753e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027546:	e7ca      	b.n	80274de <__ieee754_atan2+0x3e>
 8027548:	2c02      	cmp	r4, #2
 802754a:	d848      	bhi.n	80275de <__ieee754_atan2+0x13e>
 802754c:	4b31      	ldr	r3, [pc, #196]	@ (8027614 <__ieee754_atan2+0x174>)
 802754e:	e7f6      	b.n	802753e <__ieee754_atan2+0x9e>
 8027550:	4543      	cmp	r3, r8
 8027552:	d0e4      	beq.n	802751e <__ieee754_atan2+0x7e>
 8027554:	1a9b      	subs	r3, r3, r2
 8027556:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 802755a:	ea4f 5223 	mov.w	r2, r3, asr #20
 802755e:	da1e      	bge.n	802759e <__ieee754_atan2+0xfe>
 8027560:	2f00      	cmp	r7, #0
 8027562:	da01      	bge.n	8027568 <__ieee754_atan2+0xc8>
 8027564:	323c      	adds	r2, #60	@ 0x3c
 8027566:	db1e      	blt.n	80275a6 <__ieee754_atan2+0x106>
 8027568:	4632      	mov	r2, r6
 802756a:	463b      	mov	r3, r7
 802756c:	f7e1 f8b6 	bl	80086dc <__aeabi_ddiv>
 8027570:	ec41 0b10 	vmov	d0, r0, r1
 8027574:	f000 f9f4 	bl	8027960 <fabs>
 8027578:	f000 f85a 	bl	8027630 <atan>
 802757c:	ec51 0b10 	vmov	r0, r1, d0
 8027580:	2c01      	cmp	r4, #1
 8027582:	d013      	beq.n	80275ac <__ieee754_atan2+0x10c>
 8027584:	2c02      	cmp	r4, #2
 8027586:	d015      	beq.n	80275b4 <__ieee754_atan2+0x114>
 8027588:	2c00      	cmp	r4, #0
 802758a:	d0a8      	beq.n	80274de <__ieee754_atan2+0x3e>
 802758c:	a318      	add	r3, pc, #96	@ (adr r3, 80275f0 <__ieee754_atan2+0x150>)
 802758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027592:	f7e0 fdc1 	bl	8008118 <__aeabi_dsub>
 8027596:	a318      	add	r3, pc, #96	@ (adr r3, 80275f8 <__ieee754_atan2+0x158>)
 8027598:	e9d3 2300 	ldrd	r2, r3, [r3]
 802759c:	e014      	b.n	80275c8 <__ieee754_atan2+0x128>
 802759e:	a118      	add	r1, pc, #96	@ (adr r1, 8027600 <__ieee754_atan2+0x160>)
 80275a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80275a4:	e7ec      	b.n	8027580 <__ieee754_atan2+0xe0>
 80275a6:	2000      	movs	r0, #0
 80275a8:	2100      	movs	r1, #0
 80275aa:	e7e9      	b.n	8027580 <__ieee754_atan2+0xe0>
 80275ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80275b0:	4619      	mov	r1, r3
 80275b2:	e794      	b.n	80274de <__ieee754_atan2+0x3e>
 80275b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80275f0 <__ieee754_atan2+0x150>)
 80275b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275ba:	f7e0 fdad 	bl	8008118 <__aeabi_dsub>
 80275be:	4602      	mov	r2, r0
 80275c0:	460b      	mov	r3, r1
 80275c2:	a10d      	add	r1, pc, #52	@ (adr r1, 80275f8 <__ieee754_atan2+0x158>)
 80275c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80275c8:	f7e0 fda6 	bl	8008118 <__aeabi_dsub>
 80275cc:	e787      	b.n	80274de <__ieee754_atan2+0x3e>
 80275ce:	a10a      	add	r1, pc, #40	@ (adr r1, 80275f8 <__ieee754_atan2+0x158>)
 80275d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80275d4:	e783      	b.n	80274de <__ieee754_atan2+0x3e>
 80275d6:	a10c      	add	r1, pc, #48	@ (adr r1, 8027608 <__ieee754_atan2+0x168>)
 80275d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80275dc:	e77f      	b.n	80274de <__ieee754_atan2+0x3e>
 80275de:	2000      	movs	r0, #0
 80275e0:	2100      	movs	r1, #0
 80275e2:	e77c      	b.n	80274de <__ieee754_atan2+0x3e>
 80275e4:	a106      	add	r1, pc, #24	@ (adr r1, 8027600 <__ieee754_atan2+0x160>)
 80275e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80275ea:	e778      	b.n	80274de <__ieee754_atan2+0x3e>
 80275ec:	f3af 8000 	nop.w
 80275f0:	33145c07 	.word	0x33145c07
 80275f4:	3ca1a626 	.word	0x3ca1a626
 80275f8:	54442d18 	.word	0x54442d18
 80275fc:	400921fb 	.word	0x400921fb
 8027600:	54442d18 	.word	0x54442d18
 8027604:	3ff921fb 	.word	0x3ff921fb
 8027608:	54442d18 	.word	0x54442d18
 802760c:	3fe921fb 	.word	0x3fe921fb
 8027610:	08031080 	.word	0x08031080
 8027614:	08031068 	.word	0x08031068
 8027618:	54442d18 	.word	0x54442d18
 802761c:	c00921fb 	.word	0xc00921fb
 8027620:	54442d18 	.word	0x54442d18
 8027624:	bff921fb 	.word	0xbff921fb
 8027628:	7ff00000 	.word	0x7ff00000
 802762c:	00000000 	.word	0x00000000

08027630 <atan>:
 8027630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027634:	ec55 4b10 	vmov	r4, r5, d0
 8027638:	4bbf      	ldr	r3, [pc, #764]	@ (8027938 <atan+0x308>)
 802763a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 802763e:	429e      	cmp	r6, r3
 8027640:	46ab      	mov	fp, r5
 8027642:	d918      	bls.n	8027676 <atan+0x46>
 8027644:	4bbd      	ldr	r3, [pc, #756]	@ (802793c <atan+0x30c>)
 8027646:	429e      	cmp	r6, r3
 8027648:	d801      	bhi.n	802764e <atan+0x1e>
 802764a:	d109      	bne.n	8027660 <atan+0x30>
 802764c:	b144      	cbz	r4, 8027660 <atan+0x30>
 802764e:	4622      	mov	r2, r4
 8027650:	462b      	mov	r3, r5
 8027652:	4620      	mov	r0, r4
 8027654:	4629      	mov	r1, r5
 8027656:	f7e0 fd61 	bl	800811c <__adddf3>
 802765a:	4604      	mov	r4, r0
 802765c:	460d      	mov	r5, r1
 802765e:	e006      	b.n	802766e <atan+0x3e>
 8027660:	f1bb 0f00 	cmp.w	fp, #0
 8027664:	f340 812b 	ble.w	80278be <atan+0x28e>
 8027668:	a597      	add	r5, pc, #604	@ (adr r5, 80278c8 <atan+0x298>)
 802766a:	e9d5 4500 	ldrd	r4, r5, [r5]
 802766e:	ec45 4b10 	vmov	d0, r4, r5
 8027672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027676:	4bb2      	ldr	r3, [pc, #712]	@ (8027940 <atan+0x310>)
 8027678:	429e      	cmp	r6, r3
 802767a:	d813      	bhi.n	80276a4 <atan+0x74>
 802767c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8027680:	429e      	cmp	r6, r3
 8027682:	d80c      	bhi.n	802769e <atan+0x6e>
 8027684:	a392      	add	r3, pc, #584	@ (adr r3, 80278d0 <atan+0x2a0>)
 8027686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802768a:	4620      	mov	r0, r4
 802768c:	4629      	mov	r1, r5
 802768e:	f7e0 fd45 	bl	800811c <__adddf3>
 8027692:	4bac      	ldr	r3, [pc, #688]	@ (8027944 <atan+0x314>)
 8027694:	2200      	movs	r2, #0
 8027696:	f7e1 f987 	bl	80089a8 <__aeabi_dcmpgt>
 802769a:	2800      	cmp	r0, #0
 802769c:	d1e7      	bne.n	802766e <atan+0x3e>
 802769e:	f04f 3aff 	mov.w	sl, #4294967295
 80276a2:	e029      	b.n	80276f8 <atan+0xc8>
 80276a4:	f000 f95c 	bl	8027960 <fabs>
 80276a8:	4ba7      	ldr	r3, [pc, #668]	@ (8027948 <atan+0x318>)
 80276aa:	429e      	cmp	r6, r3
 80276ac:	ec55 4b10 	vmov	r4, r5, d0
 80276b0:	f200 80bc 	bhi.w	802782c <atan+0x1fc>
 80276b4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80276b8:	429e      	cmp	r6, r3
 80276ba:	f200 809e 	bhi.w	80277fa <atan+0x1ca>
 80276be:	4622      	mov	r2, r4
 80276c0:	462b      	mov	r3, r5
 80276c2:	4620      	mov	r0, r4
 80276c4:	4629      	mov	r1, r5
 80276c6:	f7e0 fd29 	bl	800811c <__adddf3>
 80276ca:	4b9e      	ldr	r3, [pc, #632]	@ (8027944 <atan+0x314>)
 80276cc:	2200      	movs	r2, #0
 80276ce:	f7e0 fd23 	bl	8008118 <__aeabi_dsub>
 80276d2:	2200      	movs	r2, #0
 80276d4:	4606      	mov	r6, r0
 80276d6:	460f      	mov	r7, r1
 80276d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80276dc:	4620      	mov	r0, r4
 80276de:	4629      	mov	r1, r5
 80276e0:	f7e0 fd1c 	bl	800811c <__adddf3>
 80276e4:	4602      	mov	r2, r0
 80276e6:	460b      	mov	r3, r1
 80276e8:	4630      	mov	r0, r6
 80276ea:	4639      	mov	r1, r7
 80276ec:	f7e0 fff6 	bl	80086dc <__aeabi_ddiv>
 80276f0:	f04f 0a00 	mov.w	sl, #0
 80276f4:	4604      	mov	r4, r0
 80276f6:	460d      	mov	r5, r1
 80276f8:	4622      	mov	r2, r4
 80276fa:	462b      	mov	r3, r5
 80276fc:	4620      	mov	r0, r4
 80276fe:	4629      	mov	r1, r5
 8027700:	f7e0 fec2 	bl	8008488 <__aeabi_dmul>
 8027704:	4602      	mov	r2, r0
 8027706:	460b      	mov	r3, r1
 8027708:	4680      	mov	r8, r0
 802770a:	4689      	mov	r9, r1
 802770c:	f7e0 febc 	bl	8008488 <__aeabi_dmul>
 8027710:	a371      	add	r3, pc, #452	@ (adr r3, 80278d8 <atan+0x2a8>)
 8027712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027716:	4606      	mov	r6, r0
 8027718:	460f      	mov	r7, r1
 802771a:	f7e0 feb5 	bl	8008488 <__aeabi_dmul>
 802771e:	a370      	add	r3, pc, #448	@ (adr r3, 80278e0 <atan+0x2b0>)
 8027720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027724:	f7e0 fcfa 	bl	800811c <__adddf3>
 8027728:	4632      	mov	r2, r6
 802772a:	463b      	mov	r3, r7
 802772c:	f7e0 feac 	bl	8008488 <__aeabi_dmul>
 8027730:	a36d      	add	r3, pc, #436	@ (adr r3, 80278e8 <atan+0x2b8>)
 8027732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027736:	f7e0 fcf1 	bl	800811c <__adddf3>
 802773a:	4632      	mov	r2, r6
 802773c:	463b      	mov	r3, r7
 802773e:	f7e0 fea3 	bl	8008488 <__aeabi_dmul>
 8027742:	a36b      	add	r3, pc, #428	@ (adr r3, 80278f0 <atan+0x2c0>)
 8027744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027748:	f7e0 fce8 	bl	800811c <__adddf3>
 802774c:	4632      	mov	r2, r6
 802774e:	463b      	mov	r3, r7
 8027750:	f7e0 fe9a 	bl	8008488 <__aeabi_dmul>
 8027754:	a368      	add	r3, pc, #416	@ (adr r3, 80278f8 <atan+0x2c8>)
 8027756:	e9d3 2300 	ldrd	r2, r3, [r3]
 802775a:	f7e0 fcdf 	bl	800811c <__adddf3>
 802775e:	4632      	mov	r2, r6
 8027760:	463b      	mov	r3, r7
 8027762:	f7e0 fe91 	bl	8008488 <__aeabi_dmul>
 8027766:	a366      	add	r3, pc, #408	@ (adr r3, 8027900 <atan+0x2d0>)
 8027768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802776c:	f7e0 fcd6 	bl	800811c <__adddf3>
 8027770:	4642      	mov	r2, r8
 8027772:	464b      	mov	r3, r9
 8027774:	f7e0 fe88 	bl	8008488 <__aeabi_dmul>
 8027778:	a363      	add	r3, pc, #396	@ (adr r3, 8027908 <atan+0x2d8>)
 802777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802777e:	4680      	mov	r8, r0
 8027780:	4689      	mov	r9, r1
 8027782:	4630      	mov	r0, r6
 8027784:	4639      	mov	r1, r7
 8027786:	f7e0 fe7f 	bl	8008488 <__aeabi_dmul>
 802778a:	a361      	add	r3, pc, #388	@ (adr r3, 8027910 <atan+0x2e0>)
 802778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027790:	f7e0 fcc2 	bl	8008118 <__aeabi_dsub>
 8027794:	4632      	mov	r2, r6
 8027796:	463b      	mov	r3, r7
 8027798:	f7e0 fe76 	bl	8008488 <__aeabi_dmul>
 802779c:	a35e      	add	r3, pc, #376	@ (adr r3, 8027918 <atan+0x2e8>)
 802779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277a2:	f7e0 fcb9 	bl	8008118 <__aeabi_dsub>
 80277a6:	4632      	mov	r2, r6
 80277a8:	463b      	mov	r3, r7
 80277aa:	f7e0 fe6d 	bl	8008488 <__aeabi_dmul>
 80277ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8027920 <atan+0x2f0>)
 80277b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277b4:	f7e0 fcb0 	bl	8008118 <__aeabi_dsub>
 80277b8:	4632      	mov	r2, r6
 80277ba:	463b      	mov	r3, r7
 80277bc:	f7e0 fe64 	bl	8008488 <__aeabi_dmul>
 80277c0:	a359      	add	r3, pc, #356	@ (adr r3, 8027928 <atan+0x2f8>)
 80277c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277c6:	f7e0 fca7 	bl	8008118 <__aeabi_dsub>
 80277ca:	4632      	mov	r2, r6
 80277cc:	463b      	mov	r3, r7
 80277ce:	f7e0 fe5b 	bl	8008488 <__aeabi_dmul>
 80277d2:	4602      	mov	r2, r0
 80277d4:	460b      	mov	r3, r1
 80277d6:	4640      	mov	r0, r8
 80277d8:	4649      	mov	r1, r9
 80277da:	f7e0 fc9f 	bl	800811c <__adddf3>
 80277de:	4622      	mov	r2, r4
 80277e0:	462b      	mov	r3, r5
 80277e2:	f7e0 fe51 	bl	8008488 <__aeabi_dmul>
 80277e6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80277ea:	4602      	mov	r2, r0
 80277ec:	460b      	mov	r3, r1
 80277ee:	d148      	bne.n	8027882 <atan+0x252>
 80277f0:	4620      	mov	r0, r4
 80277f2:	4629      	mov	r1, r5
 80277f4:	f7e0 fc90 	bl	8008118 <__aeabi_dsub>
 80277f8:	e72f      	b.n	802765a <atan+0x2a>
 80277fa:	4b52      	ldr	r3, [pc, #328]	@ (8027944 <atan+0x314>)
 80277fc:	2200      	movs	r2, #0
 80277fe:	4620      	mov	r0, r4
 8027800:	4629      	mov	r1, r5
 8027802:	f7e0 fc89 	bl	8008118 <__aeabi_dsub>
 8027806:	4b4f      	ldr	r3, [pc, #316]	@ (8027944 <atan+0x314>)
 8027808:	4606      	mov	r6, r0
 802780a:	460f      	mov	r7, r1
 802780c:	2200      	movs	r2, #0
 802780e:	4620      	mov	r0, r4
 8027810:	4629      	mov	r1, r5
 8027812:	f7e0 fc83 	bl	800811c <__adddf3>
 8027816:	4602      	mov	r2, r0
 8027818:	460b      	mov	r3, r1
 802781a:	4630      	mov	r0, r6
 802781c:	4639      	mov	r1, r7
 802781e:	f7e0 ff5d 	bl	80086dc <__aeabi_ddiv>
 8027822:	f04f 0a01 	mov.w	sl, #1
 8027826:	4604      	mov	r4, r0
 8027828:	460d      	mov	r5, r1
 802782a:	e765      	b.n	80276f8 <atan+0xc8>
 802782c:	4b47      	ldr	r3, [pc, #284]	@ (802794c <atan+0x31c>)
 802782e:	429e      	cmp	r6, r3
 8027830:	d21c      	bcs.n	802786c <atan+0x23c>
 8027832:	4b47      	ldr	r3, [pc, #284]	@ (8027950 <atan+0x320>)
 8027834:	2200      	movs	r2, #0
 8027836:	4620      	mov	r0, r4
 8027838:	4629      	mov	r1, r5
 802783a:	f7e0 fc6d 	bl	8008118 <__aeabi_dsub>
 802783e:	4b44      	ldr	r3, [pc, #272]	@ (8027950 <atan+0x320>)
 8027840:	4606      	mov	r6, r0
 8027842:	460f      	mov	r7, r1
 8027844:	2200      	movs	r2, #0
 8027846:	4620      	mov	r0, r4
 8027848:	4629      	mov	r1, r5
 802784a:	f7e0 fe1d 	bl	8008488 <__aeabi_dmul>
 802784e:	4b3d      	ldr	r3, [pc, #244]	@ (8027944 <atan+0x314>)
 8027850:	2200      	movs	r2, #0
 8027852:	f7e0 fc63 	bl	800811c <__adddf3>
 8027856:	4602      	mov	r2, r0
 8027858:	460b      	mov	r3, r1
 802785a:	4630      	mov	r0, r6
 802785c:	4639      	mov	r1, r7
 802785e:	f7e0 ff3d 	bl	80086dc <__aeabi_ddiv>
 8027862:	f04f 0a02 	mov.w	sl, #2
 8027866:	4604      	mov	r4, r0
 8027868:	460d      	mov	r5, r1
 802786a:	e745      	b.n	80276f8 <atan+0xc8>
 802786c:	4622      	mov	r2, r4
 802786e:	462b      	mov	r3, r5
 8027870:	4938      	ldr	r1, [pc, #224]	@ (8027954 <atan+0x324>)
 8027872:	2000      	movs	r0, #0
 8027874:	f7e0 ff32 	bl	80086dc <__aeabi_ddiv>
 8027878:	f04f 0a03 	mov.w	sl, #3
 802787c:	4604      	mov	r4, r0
 802787e:	460d      	mov	r5, r1
 8027880:	e73a      	b.n	80276f8 <atan+0xc8>
 8027882:	4b35      	ldr	r3, [pc, #212]	@ (8027958 <atan+0x328>)
 8027884:	4e35      	ldr	r6, [pc, #212]	@ (802795c <atan+0x32c>)
 8027886:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802788e:	f7e0 fc43 	bl	8008118 <__aeabi_dsub>
 8027892:	4622      	mov	r2, r4
 8027894:	462b      	mov	r3, r5
 8027896:	f7e0 fc3f 	bl	8008118 <__aeabi_dsub>
 802789a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 802789e:	4602      	mov	r2, r0
 80278a0:	460b      	mov	r3, r1
 80278a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80278a6:	f7e0 fc37 	bl	8008118 <__aeabi_dsub>
 80278aa:	f1bb 0f00 	cmp.w	fp, #0
 80278ae:	4604      	mov	r4, r0
 80278b0:	460d      	mov	r5, r1
 80278b2:	f6bf aedc 	bge.w	802766e <atan+0x3e>
 80278b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80278ba:	461d      	mov	r5, r3
 80278bc:	e6d7      	b.n	802766e <atan+0x3e>
 80278be:	a51c      	add	r5, pc, #112	@ (adr r5, 8027930 <atan+0x300>)
 80278c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80278c4:	e6d3      	b.n	802766e <atan+0x3e>
 80278c6:	bf00      	nop
 80278c8:	54442d18 	.word	0x54442d18
 80278cc:	3ff921fb 	.word	0x3ff921fb
 80278d0:	8800759c 	.word	0x8800759c
 80278d4:	7e37e43c 	.word	0x7e37e43c
 80278d8:	e322da11 	.word	0xe322da11
 80278dc:	3f90ad3a 	.word	0x3f90ad3a
 80278e0:	24760deb 	.word	0x24760deb
 80278e4:	3fa97b4b 	.word	0x3fa97b4b
 80278e8:	a0d03d51 	.word	0xa0d03d51
 80278ec:	3fb10d66 	.word	0x3fb10d66
 80278f0:	c54c206e 	.word	0xc54c206e
 80278f4:	3fb745cd 	.word	0x3fb745cd
 80278f8:	920083ff 	.word	0x920083ff
 80278fc:	3fc24924 	.word	0x3fc24924
 8027900:	5555550d 	.word	0x5555550d
 8027904:	3fd55555 	.word	0x3fd55555
 8027908:	2c6a6c2f 	.word	0x2c6a6c2f
 802790c:	bfa2b444 	.word	0xbfa2b444
 8027910:	52defd9a 	.word	0x52defd9a
 8027914:	3fadde2d 	.word	0x3fadde2d
 8027918:	af749a6d 	.word	0xaf749a6d
 802791c:	3fb3b0f2 	.word	0x3fb3b0f2
 8027920:	fe231671 	.word	0xfe231671
 8027924:	3fbc71c6 	.word	0x3fbc71c6
 8027928:	9998ebc4 	.word	0x9998ebc4
 802792c:	3fc99999 	.word	0x3fc99999
 8027930:	54442d18 	.word	0x54442d18
 8027934:	bff921fb 	.word	0xbff921fb
 8027938:	440fffff 	.word	0x440fffff
 802793c:	7ff00000 	.word	0x7ff00000
 8027940:	3fdbffff 	.word	0x3fdbffff
 8027944:	3ff00000 	.word	0x3ff00000
 8027948:	3ff2ffff 	.word	0x3ff2ffff
 802794c:	40038000 	.word	0x40038000
 8027950:	3ff80000 	.word	0x3ff80000
 8027954:	bff00000 	.word	0xbff00000
 8027958:	08031098 	.word	0x08031098
 802795c:	080310b8 	.word	0x080310b8

08027960 <fabs>:
 8027960:	ec51 0b10 	vmov	r0, r1, d0
 8027964:	4602      	mov	r2, r0
 8027966:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802796a:	ec43 2b10 	vmov	d0, r2, r3
 802796e:	4770      	bx	lr

08027970 <__kernel_cosf>:
 8027970:	ee10 3a10 	vmov	r3, s0
 8027974:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027978:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802797c:	eef0 6a40 	vmov.f32	s13, s0
 8027980:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8027984:	d204      	bcs.n	8027990 <__kernel_cosf+0x20>
 8027986:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 802798a:	ee17 2a90 	vmov	r2, s15
 802798e:	b342      	cbz	r2, 80279e2 <__kernel_cosf+0x72>
 8027990:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8027994:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8027a00 <__kernel_cosf+0x90>
 8027998:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8027a04 <__kernel_cosf+0x94>
 802799c:	4a1a      	ldr	r2, [pc, #104]	@ (8027a08 <__kernel_cosf+0x98>)
 802799e:	eea7 6a27 	vfma.f32	s12, s14, s15
 80279a2:	4293      	cmp	r3, r2
 80279a4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8027a0c <__kernel_cosf+0x9c>
 80279a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80279ac:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8027a10 <__kernel_cosf+0xa0>
 80279b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80279b4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8027a14 <__kernel_cosf+0xa4>
 80279b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80279bc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8027a18 <__kernel_cosf+0xa8>
 80279c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80279c4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80279c8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80279cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80279d0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80279d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80279d8:	d804      	bhi.n	80279e4 <__kernel_cosf+0x74>
 80279da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80279de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80279e2:	4770      	bx	lr
 80279e4:	4a0d      	ldr	r2, [pc, #52]	@ (8027a1c <__kernel_cosf+0xac>)
 80279e6:	4293      	cmp	r3, r2
 80279e8:	bf9a      	itte	ls
 80279ea:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80279ee:	ee07 3a10 	vmovls	s14, r3
 80279f2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80279f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80279fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80279fe:	e7ec      	b.n	80279da <__kernel_cosf+0x6a>
 8027a00:	ad47d74e 	.word	0xad47d74e
 8027a04:	310f74f6 	.word	0x310f74f6
 8027a08:	3e999999 	.word	0x3e999999
 8027a0c:	b493f27c 	.word	0xb493f27c
 8027a10:	37d00d01 	.word	0x37d00d01
 8027a14:	bab60b61 	.word	0xbab60b61
 8027a18:	3d2aaaab 	.word	0x3d2aaaab
 8027a1c:	3f480000 	.word	0x3f480000

08027a20 <__kernel_sinf>:
 8027a20:	ee10 3a10 	vmov	r3, s0
 8027a24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027a28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8027a2c:	d204      	bcs.n	8027a38 <__kernel_sinf+0x18>
 8027a2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027a32:	ee17 3a90 	vmov	r3, s15
 8027a36:	b35b      	cbz	r3, 8027a90 <__kernel_sinf+0x70>
 8027a38:	ee20 7a00 	vmul.f32	s14, s0, s0
 8027a3c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8027a94 <__kernel_sinf+0x74>
 8027a40:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8027a98 <__kernel_sinf+0x78>
 8027a44:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027a48:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8027a9c <__kernel_sinf+0x7c>
 8027a4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027a50:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8027aa0 <__kernel_sinf+0x80>
 8027a54:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027a58:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8027aa4 <__kernel_sinf+0x84>
 8027a5c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8027a60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027a64:	b930      	cbnz	r0, 8027a74 <__kernel_sinf+0x54>
 8027a66:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8027aa8 <__kernel_sinf+0x88>
 8027a6a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027a6e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8027a72:	4770      	bx	lr
 8027a74:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8027a78:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8027a7c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8027a80:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8027a84:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8027aac <__kernel_sinf+0x8c>
 8027a88:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8027a8c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8027a90:	4770      	bx	lr
 8027a92:	bf00      	nop
 8027a94:	2f2ec9d3 	.word	0x2f2ec9d3
 8027a98:	b2d72f34 	.word	0xb2d72f34
 8027a9c:	3638ef1b 	.word	0x3638ef1b
 8027aa0:	b9500d01 	.word	0xb9500d01
 8027aa4:	3c088889 	.word	0x3c088889
 8027aa8:	be2aaaab 	.word	0xbe2aaaab
 8027aac:	3e2aaaab 	.word	0x3e2aaaab

08027ab0 <__kernel_tanf>:
 8027ab0:	b508      	push	{r3, lr}
 8027ab2:	ee10 3a10 	vmov	r3, s0
 8027ab6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8027aba:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8027abe:	eef0 7a40 	vmov.f32	s15, s0
 8027ac2:	d217      	bcs.n	8027af4 <__kernel_tanf+0x44>
 8027ac4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8027ac8:	ee17 1a10 	vmov	r1, s14
 8027acc:	bb41      	cbnz	r1, 8027b20 <__kernel_tanf+0x70>
 8027ace:	1c43      	adds	r3, r0, #1
 8027ad0:	4313      	orrs	r3, r2
 8027ad2:	d108      	bne.n	8027ae6 <__kernel_tanf+0x36>
 8027ad4:	f000 fccc 	bl	8028470 <fabsf>
 8027ad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027adc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8027ae4:	bd08      	pop	{r3, pc}
 8027ae6:	2801      	cmp	r0, #1
 8027ae8:	d0fa      	beq.n	8027ae0 <__kernel_tanf+0x30>
 8027aea:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8027aee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027af2:	e7f5      	b.n	8027ae0 <__kernel_tanf+0x30>
 8027af4:	494c      	ldr	r1, [pc, #304]	@ (8027c28 <__kernel_tanf+0x178>)
 8027af6:	428a      	cmp	r2, r1
 8027af8:	d312      	bcc.n	8027b20 <__kernel_tanf+0x70>
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8027c2c <__kernel_tanf+0x17c>
 8027b00:	bfb8      	it	lt
 8027b02:	eef1 7a40 	vneglt.f32	s15, s0
 8027b06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027b0a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8027c30 <__kernel_tanf+0x180>
 8027b0e:	bfb8      	it	lt
 8027b10:	eef1 0a60 	vneglt.f32	s1, s1
 8027b14:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8027b18:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8027c34 <__kernel_tanf+0x184>
 8027b1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027b20:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8027b24:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8027c38 <__kernel_tanf+0x188>
 8027b28:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8027c3c <__kernel_tanf+0x18c>
 8027b2c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8027c40 <__kernel_tanf+0x190>
 8027b30:	493d      	ldr	r1, [pc, #244]	@ (8027c28 <__kernel_tanf+0x178>)
 8027b32:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8027b36:	428a      	cmp	r2, r1
 8027b38:	eea7 6a25 	vfma.f32	s12, s14, s11
 8027b3c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8027c44 <__kernel_tanf+0x194>
 8027b40:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027b44:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8027c48 <__kernel_tanf+0x198>
 8027b48:	eea5 6a87 	vfma.f32	s12, s11, s14
 8027b4c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8027c4c <__kernel_tanf+0x19c>
 8027b50:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027b54:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8027c50 <__kernel_tanf+0x1a0>
 8027b58:	eea5 6a87 	vfma.f32	s12, s11, s14
 8027b5c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8027c54 <__kernel_tanf+0x1a4>
 8027b60:	eee7 5a05 	vfma.f32	s11, s14, s10
 8027b64:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8027c58 <__kernel_tanf+0x1a8>
 8027b68:	eea5 5a87 	vfma.f32	s10, s11, s14
 8027b6c:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8027c5c <__kernel_tanf+0x1ac>
 8027b70:	eee5 5a07 	vfma.f32	s11, s10, s14
 8027b74:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8027c60 <__kernel_tanf+0x1b0>
 8027b78:	eea5 5a87 	vfma.f32	s10, s11, s14
 8027b7c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8027c64 <__kernel_tanf+0x1b4>
 8027b80:	eee5 5a07 	vfma.f32	s11, s10, s14
 8027b84:	eeb0 7a46 	vmov.f32	s14, s12
 8027b88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027b8c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8027b90:	eeb0 6a60 	vmov.f32	s12, s1
 8027b94:	eea7 6a05 	vfma.f32	s12, s14, s10
 8027b98:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8027c68 <__kernel_tanf+0x1b8>
 8027b9c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8027ba0:	eee5 0a07 	vfma.f32	s1, s10, s14
 8027ba4:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8027ba8:	d31d      	bcc.n	8027be6 <__kernel_tanf+0x136>
 8027baa:	ee07 0a10 	vmov	s14, r0
 8027bae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027bb2:	ee26 5a06 	vmul.f32	s10, s12, s12
 8027bb6:	ee36 6a07 	vadd.f32	s12, s12, s14
 8027bba:	179b      	asrs	r3, r3, #30
 8027bbc:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8027bc0:	f003 0302 	and.w	r3, r3, #2
 8027bc4:	f1c3 0301 	rsb	r3, r3, #1
 8027bc8:	ee06 3a90 	vmov	s13, r3
 8027bcc:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8027bd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8027bd4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8027bd8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8027bdc:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8027be0:	ee66 7a87 	vmul.f32	s15, s13, s14
 8027be4:	e77c      	b.n	8027ae0 <__kernel_tanf+0x30>
 8027be6:	2801      	cmp	r0, #1
 8027be8:	d01b      	beq.n	8027c22 <__kernel_tanf+0x172>
 8027bea:	4b20      	ldr	r3, [pc, #128]	@ (8027c6c <__kernel_tanf+0x1bc>)
 8027bec:	ee16 2a10 	vmov	r2, s12
 8027bf0:	401a      	ands	r2, r3
 8027bf2:	ee05 2a90 	vmov	s11, r2
 8027bf6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8027bfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027bfe:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027c02:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8027c06:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8027c0a:	ee16 2a90 	vmov	r2, s13
 8027c0e:	4013      	ands	r3, r2
 8027c10:	ee07 3a90 	vmov	s15, r3
 8027c14:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8027c18:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8027c1c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8027c20:	e75e      	b.n	8027ae0 <__kernel_tanf+0x30>
 8027c22:	eef0 7a46 	vmov.f32	s15, s12
 8027c26:	e75b      	b.n	8027ae0 <__kernel_tanf+0x30>
 8027c28:	3f2ca140 	.word	0x3f2ca140
 8027c2c:	3f490fda 	.word	0x3f490fda
 8027c30:	33222168 	.word	0x33222168
 8027c34:	00000000 	.word	0x00000000
 8027c38:	b79bae5f 	.word	0xb79bae5f
 8027c3c:	38a3f445 	.word	0x38a3f445
 8027c40:	37d95384 	.word	0x37d95384
 8027c44:	3a1a26c8 	.word	0x3a1a26c8
 8027c48:	3b6b6916 	.word	0x3b6b6916
 8027c4c:	3cb327a4 	.word	0x3cb327a4
 8027c50:	3e088889 	.word	0x3e088889
 8027c54:	3895c07a 	.word	0x3895c07a
 8027c58:	398137b9 	.word	0x398137b9
 8027c5c:	3abede48 	.word	0x3abede48
 8027c60:	3c11371f 	.word	0x3c11371f
 8027c64:	3d5d0dd1 	.word	0x3d5d0dd1
 8027c68:	3eaaaaab 	.word	0x3eaaaaab
 8027c6c:	fffff000 	.word	0xfffff000

08027c70 <__ieee754_powf>:
 8027c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027c74:	ee10 4a90 	vmov	r4, s1
 8027c78:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8027c7c:	ed2d 8b02 	vpush	{d8}
 8027c80:	ee10 6a10 	vmov	r6, s0
 8027c84:	eeb0 8a40 	vmov.f32	s16, s0
 8027c88:	eef0 8a60 	vmov.f32	s17, s1
 8027c8c:	d10c      	bne.n	8027ca8 <__ieee754_powf+0x38>
 8027c8e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8027c92:	0076      	lsls	r6, r6, #1
 8027c94:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8027c98:	f240 829c 	bls.w	80281d4 <__ieee754_powf+0x564>
 8027c9c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8027ca0:	ecbd 8b02 	vpop	{d8}
 8027ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027ca8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8027cac:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8027cb0:	d802      	bhi.n	8027cb8 <__ieee754_powf+0x48>
 8027cb2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8027cb6:	d908      	bls.n	8027cca <__ieee754_powf+0x5a>
 8027cb8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8027cbc:	d1ee      	bne.n	8027c9c <__ieee754_powf+0x2c>
 8027cbe:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8027cc2:	0064      	lsls	r4, r4, #1
 8027cc4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8027cc8:	e7e6      	b.n	8027c98 <__ieee754_powf+0x28>
 8027cca:	2e00      	cmp	r6, #0
 8027ccc:	da1e      	bge.n	8027d0c <__ieee754_powf+0x9c>
 8027cce:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8027cd2:	d22b      	bcs.n	8027d2c <__ieee754_powf+0xbc>
 8027cd4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8027cd8:	d332      	bcc.n	8027d40 <__ieee754_powf+0xd0>
 8027cda:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8027cde:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8027ce2:	fa49 f503 	asr.w	r5, r9, r3
 8027ce6:	fa05 f303 	lsl.w	r3, r5, r3
 8027cea:	454b      	cmp	r3, r9
 8027cec:	d126      	bne.n	8027d3c <__ieee754_powf+0xcc>
 8027cee:	f005 0501 	and.w	r5, r5, #1
 8027cf2:	f1c5 0502 	rsb	r5, r5, #2
 8027cf6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8027cfa:	d122      	bne.n	8027d42 <__ieee754_powf+0xd2>
 8027cfc:	2c00      	cmp	r4, #0
 8027cfe:	f280 826f 	bge.w	80281e0 <__ieee754_powf+0x570>
 8027d02:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8027d06:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8027d0a:	e7c9      	b.n	8027ca0 <__ieee754_powf+0x30>
 8027d0c:	2500      	movs	r5, #0
 8027d0e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8027d12:	d1f0      	bne.n	8027cf6 <__ieee754_powf+0x86>
 8027d14:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8027d18:	f000 825c 	beq.w	80281d4 <__ieee754_powf+0x564>
 8027d1c:	d908      	bls.n	8027d30 <__ieee754_powf+0xc0>
 8027d1e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8028080 <__ieee754_powf+0x410>
 8027d22:	2c00      	cmp	r4, #0
 8027d24:	bfa8      	it	ge
 8027d26:	eeb0 0a68 	vmovge.f32	s0, s17
 8027d2a:	e7b9      	b.n	8027ca0 <__ieee754_powf+0x30>
 8027d2c:	2502      	movs	r5, #2
 8027d2e:	e7ee      	b.n	8027d0e <__ieee754_powf+0x9e>
 8027d30:	2c00      	cmp	r4, #0
 8027d32:	f280 8252 	bge.w	80281da <__ieee754_powf+0x56a>
 8027d36:	eeb1 0a68 	vneg.f32	s0, s17
 8027d3a:	e7b1      	b.n	8027ca0 <__ieee754_powf+0x30>
 8027d3c:	2500      	movs	r5, #0
 8027d3e:	e7da      	b.n	8027cf6 <__ieee754_powf+0x86>
 8027d40:	2500      	movs	r5, #0
 8027d42:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8027d46:	d102      	bne.n	8027d4e <__ieee754_powf+0xde>
 8027d48:	ee28 0a08 	vmul.f32	s0, s16, s16
 8027d4c:	e7a8      	b.n	8027ca0 <__ieee754_powf+0x30>
 8027d4e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8027d52:	d109      	bne.n	8027d68 <__ieee754_powf+0xf8>
 8027d54:	2e00      	cmp	r6, #0
 8027d56:	db07      	blt.n	8027d68 <__ieee754_powf+0xf8>
 8027d58:	eeb0 0a48 	vmov.f32	s0, s16
 8027d5c:	ecbd 8b02 	vpop	{d8}
 8027d60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027d64:	f7ff bacf 	b.w	8027306 <__ieee754_sqrtf>
 8027d68:	eeb0 0a48 	vmov.f32	s0, s16
 8027d6c:	f000 fb80 	bl	8028470 <fabsf>
 8027d70:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8027d74:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8027d78:	4647      	mov	r7, r8
 8027d7a:	d002      	beq.n	8027d82 <__ieee754_powf+0x112>
 8027d7c:	f1b8 0f00 	cmp.w	r8, #0
 8027d80:	d117      	bne.n	8027db2 <__ieee754_powf+0x142>
 8027d82:	2c00      	cmp	r4, #0
 8027d84:	bfbc      	itt	lt
 8027d86:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8027d8a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8027d8e:	2e00      	cmp	r6, #0
 8027d90:	da86      	bge.n	8027ca0 <__ieee754_powf+0x30>
 8027d92:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8027d96:	ea58 0805 	orrs.w	r8, r8, r5
 8027d9a:	d104      	bne.n	8027da6 <__ieee754_powf+0x136>
 8027d9c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8027da0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8027da4:	e77c      	b.n	8027ca0 <__ieee754_powf+0x30>
 8027da6:	2d01      	cmp	r5, #1
 8027da8:	f47f af7a 	bne.w	8027ca0 <__ieee754_powf+0x30>
 8027dac:	eeb1 0a40 	vneg.f32	s0, s0
 8027db0:	e776      	b.n	8027ca0 <__ieee754_powf+0x30>
 8027db2:	0ff0      	lsrs	r0, r6, #31
 8027db4:	3801      	subs	r0, #1
 8027db6:	ea55 0300 	orrs.w	r3, r5, r0
 8027dba:	d104      	bne.n	8027dc6 <__ieee754_powf+0x156>
 8027dbc:	ee38 8a48 	vsub.f32	s16, s16, s16
 8027dc0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8027dc4:	e76c      	b.n	8027ca0 <__ieee754_powf+0x30>
 8027dc6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8027dca:	d973      	bls.n	8027eb4 <__ieee754_powf+0x244>
 8027dcc:	4bad      	ldr	r3, [pc, #692]	@ (8028084 <__ieee754_powf+0x414>)
 8027dce:	4598      	cmp	r8, r3
 8027dd0:	d808      	bhi.n	8027de4 <__ieee754_powf+0x174>
 8027dd2:	2c00      	cmp	r4, #0
 8027dd4:	da0b      	bge.n	8027dee <__ieee754_powf+0x17e>
 8027dd6:	2000      	movs	r0, #0
 8027dd8:	ecbd 8b02 	vpop	{d8}
 8027ddc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027de0:	f000 bbd4 	b.w	802858c <__math_oflowf>
 8027de4:	4ba8      	ldr	r3, [pc, #672]	@ (8028088 <__ieee754_powf+0x418>)
 8027de6:	4598      	cmp	r8, r3
 8027de8:	d908      	bls.n	8027dfc <__ieee754_powf+0x18c>
 8027dea:	2c00      	cmp	r4, #0
 8027dec:	dcf3      	bgt.n	8027dd6 <__ieee754_powf+0x166>
 8027dee:	2000      	movs	r0, #0
 8027df0:	ecbd 8b02 	vpop	{d8}
 8027df4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027df8:	f000 bbc2 	b.w	8028580 <__math_uflowf>
 8027dfc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8027e00:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027e04:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 802808c <__ieee754_powf+0x41c>
 8027e08:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8027e0c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8027e10:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8027e14:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8027e18:	ee20 7a00 	vmul.f32	s14, s0, s0
 8027e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027e20:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8028090 <__ieee754_powf+0x420>
 8027e24:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8027e28:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8028094 <__ieee754_powf+0x424>
 8027e2c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027e30:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8028098 <__ieee754_powf+0x428>
 8027e34:	eef0 6a67 	vmov.f32	s13, s15
 8027e38:	eee0 6a07 	vfma.f32	s13, s0, s14
 8027e3c:	ee16 3a90 	vmov	r3, s13
 8027e40:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8027e44:	f023 030f 	bic.w	r3, r3, #15
 8027e48:	ee06 3a90 	vmov	s13, r3
 8027e4c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8027e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027e54:	3d01      	subs	r5, #1
 8027e56:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8027e5a:	4305      	orrs	r5, r0
 8027e5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027e60:	f024 040f 	bic.w	r4, r4, #15
 8027e64:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8027e68:	bf18      	it	ne
 8027e6a:	eeb0 8a47 	vmovne.f32	s16, s14
 8027e6e:	ee07 4a10 	vmov	s14, r4
 8027e72:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8027e76:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8027e7a:	ee07 3a90 	vmov	s15, r3
 8027e7e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8027e82:	ee07 4a10 	vmov	s14, r4
 8027e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027e8a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8027e8e:	ee17 1a10 	vmov	r1, s14
 8027e92:	2900      	cmp	r1, #0
 8027e94:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8027e98:	f340 80dd 	ble.w	8028056 <__ieee754_powf+0x3e6>
 8027e9c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8027ea0:	f240 80ca 	bls.w	8028038 <__ieee754_powf+0x3c8>
 8027ea4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027eac:	bf4c      	ite	mi
 8027eae:	2001      	movmi	r0, #1
 8027eb0:	2000      	movpl	r0, #0
 8027eb2:	e791      	b.n	8027dd8 <__ieee754_powf+0x168>
 8027eb4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8027eb8:	bf01      	itttt	eq
 8027eba:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 802809c <__ieee754_powf+0x42c>
 8027ebe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8027ec2:	f06f 0317 	mvneq.w	r3, #23
 8027ec6:	ee17 7a90 	vmoveq	r7, s15
 8027eca:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8027ece:	bf18      	it	ne
 8027ed0:	2300      	movne	r3, #0
 8027ed2:	3a7f      	subs	r2, #127	@ 0x7f
 8027ed4:	441a      	add	r2, r3
 8027ed6:	4b72      	ldr	r3, [pc, #456]	@ (80280a0 <__ieee754_powf+0x430>)
 8027ed8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8027edc:	429f      	cmp	r7, r3
 8027ede:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8027ee2:	dd06      	ble.n	8027ef2 <__ieee754_powf+0x282>
 8027ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80280a4 <__ieee754_powf+0x434>)
 8027ee6:	429f      	cmp	r7, r3
 8027ee8:	f340 80a4 	ble.w	8028034 <__ieee754_powf+0x3c4>
 8027eec:	3201      	adds	r2, #1
 8027eee:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8027ef2:	2600      	movs	r6, #0
 8027ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80280a8 <__ieee754_powf+0x438>)
 8027ef6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8027efa:	ee07 1a10 	vmov	s14, r1
 8027efe:	edd3 5a00 	vldr	s11, [r3]
 8027f02:	4b6a      	ldr	r3, [pc, #424]	@ (80280ac <__ieee754_powf+0x43c>)
 8027f04:	ee75 7a87 	vadd.f32	s15, s11, s14
 8027f08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8027f0c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8027f10:	1049      	asrs	r1, r1, #1
 8027f12:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8027f16:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8027f1a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8027f1e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8027f22:	ee07 1a90 	vmov	s15, r1
 8027f26:	ee26 5a24 	vmul.f32	s10, s12, s9
 8027f2a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8027f2e:	ee15 7a10 	vmov	r7, s10
 8027f32:	401f      	ands	r7, r3
 8027f34:	ee06 7a90 	vmov	s13, r7
 8027f38:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8027f3c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8027f40:	ee65 7a05 	vmul.f32	s15, s10, s10
 8027f44:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8027f48:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80280b0 <__ieee754_powf+0x440>
 8027f4c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80280b4 <__ieee754_powf+0x444>
 8027f50:	eee7 5a87 	vfma.f32	s11, s15, s14
 8027f54:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80280b8 <__ieee754_powf+0x448>
 8027f58:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8027f5c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 802808c <__ieee754_powf+0x41c>
 8027f60:	eee7 5a27 	vfma.f32	s11, s14, s15
 8027f64:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80280bc <__ieee754_powf+0x44c>
 8027f68:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8027f6c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80280c0 <__ieee754_powf+0x450>
 8027f70:	ee26 6a24 	vmul.f32	s12, s12, s9
 8027f74:	eee7 5a27 	vfma.f32	s11, s14, s15
 8027f78:	ee35 7a26 	vadd.f32	s14, s10, s13
 8027f7c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8027f80:	ee27 7a06 	vmul.f32	s14, s14, s12
 8027f84:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8027f88:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8027f8c:	eef0 5a67 	vmov.f32	s11, s15
 8027f90:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8027f94:	ee75 5a87 	vadd.f32	s11, s11, s14
 8027f98:	ee15 1a90 	vmov	r1, s11
 8027f9c:	4019      	ands	r1, r3
 8027f9e:	ee05 1a90 	vmov	s11, r1
 8027fa2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8027fa6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8027faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027fae:	ee67 7a85 	vmul.f32	s15, s15, s10
 8027fb2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027fb6:	eeb0 6a67 	vmov.f32	s12, s15
 8027fba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8027fbe:	ee16 1a10 	vmov	r1, s12
 8027fc2:	4019      	ands	r1, r3
 8027fc4:	ee06 1a10 	vmov	s12, r1
 8027fc8:	eeb0 7a46 	vmov.f32	s14, s12
 8027fcc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8027fd0:	493c      	ldr	r1, [pc, #240]	@ (80280c4 <__ieee754_powf+0x454>)
 8027fd2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8027fd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027fda:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80280c8 <__ieee754_powf+0x458>
 8027fde:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80280cc <__ieee754_powf+0x45c>
 8027fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027fe6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80280d0 <__ieee754_powf+0x460>
 8027fea:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027fee:	ed91 7a00 	vldr	s14, [r1]
 8027ff2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027ff6:	ee07 2a10 	vmov	s14, r2
 8027ffa:	eef0 6a67 	vmov.f32	s13, s15
 8027ffe:	4a35      	ldr	r2, [pc, #212]	@ (80280d4 <__ieee754_powf+0x464>)
 8028000:	eee6 6a25 	vfma.f32	s13, s12, s11
 8028004:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8028008:	ed92 5a00 	vldr	s10, [r2]
 802800c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8028010:	ee76 6a85 	vadd.f32	s13, s13, s10
 8028014:	ee76 6a87 	vadd.f32	s13, s13, s14
 8028018:	ee16 2a90 	vmov	r2, s13
 802801c:	4013      	ands	r3, r2
 802801e:	ee06 3a90 	vmov	s13, r3
 8028022:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8028026:	ee37 7a45 	vsub.f32	s14, s14, s10
 802802a:	eea6 7a65 	vfms.f32	s14, s12, s11
 802802e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028032:	e70f      	b.n	8027e54 <__ieee754_powf+0x1e4>
 8028034:	2601      	movs	r6, #1
 8028036:	e75d      	b.n	8027ef4 <__ieee754_powf+0x284>
 8028038:	d152      	bne.n	80280e0 <__ieee754_powf+0x470>
 802803a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80280d8 <__ieee754_powf+0x468>
 802803e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8028042:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8028046:	eef4 6ac7 	vcmpe.f32	s13, s14
 802804a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802804e:	f73f af29 	bgt.w	8027ea4 <__ieee754_powf+0x234>
 8028052:	2386      	movs	r3, #134	@ 0x86
 8028054:	e048      	b.n	80280e8 <__ieee754_powf+0x478>
 8028056:	4a21      	ldr	r2, [pc, #132]	@ (80280dc <__ieee754_powf+0x46c>)
 8028058:	4293      	cmp	r3, r2
 802805a:	d907      	bls.n	802806c <__ieee754_powf+0x3fc>
 802805c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8028060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028064:	bf4c      	ite	mi
 8028066:	2001      	movmi	r0, #1
 8028068:	2000      	movpl	r0, #0
 802806a:	e6c1      	b.n	8027df0 <__ieee754_powf+0x180>
 802806c:	d138      	bne.n	80280e0 <__ieee754_powf+0x470>
 802806e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8028072:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8028076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802807a:	dbea      	blt.n	8028052 <__ieee754_powf+0x3e2>
 802807c:	e7ee      	b.n	802805c <__ieee754_powf+0x3ec>
 802807e:	bf00      	nop
 8028080:	00000000 	.word	0x00000000
 8028084:	3f7ffff3 	.word	0x3f7ffff3
 8028088:	3f800007 	.word	0x3f800007
 802808c:	3eaaaaab 	.word	0x3eaaaaab
 8028090:	3fb8aa3b 	.word	0x3fb8aa3b
 8028094:	36eca570 	.word	0x36eca570
 8028098:	3fb8aa00 	.word	0x3fb8aa00
 802809c:	4b800000 	.word	0x4b800000
 80280a0:	001cc471 	.word	0x001cc471
 80280a4:	005db3d6 	.word	0x005db3d6
 80280a8:	080310e8 	.word	0x080310e8
 80280ac:	fffff000 	.word	0xfffff000
 80280b0:	3e6c3255 	.word	0x3e6c3255
 80280b4:	3e53f142 	.word	0x3e53f142
 80280b8:	3e8ba305 	.word	0x3e8ba305
 80280bc:	3edb6db7 	.word	0x3edb6db7
 80280c0:	3f19999a 	.word	0x3f19999a
 80280c4:	080310d8 	.word	0x080310d8
 80280c8:	3f76384f 	.word	0x3f76384f
 80280cc:	3f763800 	.word	0x3f763800
 80280d0:	369dc3a0 	.word	0x369dc3a0
 80280d4:	080310e0 	.word	0x080310e0
 80280d8:	3338aa3c 	.word	0x3338aa3c
 80280dc:	43160000 	.word	0x43160000
 80280e0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80280e4:	d971      	bls.n	80281ca <__ieee754_powf+0x55a>
 80280e6:	15db      	asrs	r3, r3, #23
 80280e8:	3b7e      	subs	r3, #126	@ 0x7e
 80280ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80280ee:	4118      	asrs	r0, r3
 80280f0:	4408      	add	r0, r1
 80280f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80280f6:	4a3c      	ldr	r2, [pc, #240]	@ (80281e8 <__ieee754_powf+0x578>)
 80280f8:	3b7f      	subs	r3, #127	@ 0x7f
 80280fa:	411a      	asrs	r2, r3
 80280fc:	4002      	ands	r2, r0
 80280fe:	ee07 2a10 	vmov	s14, r2
 8028102:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8028106:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 802810a:	f1c3 0317 	rsb	r3, r3, #23
 802810e:	4118      	asrs	r0, r3
 8028110:	2900      	cmp	r1, #0
 8028112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028116:	bfb8      	it	lt
 8028118:	4240      	neglt	r0, r0
 802811a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 802811e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80281ec <__ieee754_powf+0x57c>
 8028122:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80281f0 <__ieee754_powf+0x580>
 8028126:	ee17 3a10 	vmov	r3, s14
 802812a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 802812e:	f023 030f 	bic.w	r3, r3, #15
 8028132:	ee07 3a10 	vmov	s14, r3
 8028136:	ee77 7a67 	vsub.f32	s15, s14, s15
 802813a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802813e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8028142:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80281f4 <__ieee754_powf+0x584>
 8028146:	ee67 7a27 	vmul.f32	s15, s14, s15
 802814a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 802814e:	eef0 6a67 	vmov.f32	s13, s15
 8028152:	eee7 6a06 	vfma.f32	s13, s14, s12
 8028156:	eef0 5a66 	vmov.f32	s11, s13
 802815a:	eee7 5a46 	vfms.f32	s11, s14, s12
 802815e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8028162:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8028166:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80281f8 <__ieee754_powf+0x588>
 802816a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80281fc <__ieee754_powf+0x58c>
 802816e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8028172:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8028200 <__ieee754_powf+0x590>
 8028176:	eee6 5a07 	vfma.f32	s11, s12, s14
 802817a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8028204 <__ieee754_powf+0x594>
 802817e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8028182:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8028208 <__ieee754_powf+0x598>
 8028186:	eee6 5a07 	vfma.f32	s11, s12, s14
 802818a:	eeb0 6a66 	vmov.f32	s12, s13
 802818e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8028192:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8028196:	ee66 5a86 	vmul.f32	s11, s13, s12
 802819a:	ee36 6a47 	vsub.f32	s12, s12, s14
 802819e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80281a2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80281a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80281aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80281ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80281b2:	ee10 3a10 	vmov	r3, s0
 80281b6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80281ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80281be:	da06      	bge.n	80281ce <__ieee754_powf+0x55e>
 80281c0:	f000 f95e 	bl	8028480 <scalbnf>
 80281c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80281c8:	e56a      	b.n	8027ca0 <__ieee754_powf+0x30>
 80281ca:	2000      	movs	r0, #0
 80281cc:	e7a5      	b.n	802811a <__ieee754_powf+0x4aa>
 80281ce:	ee00 3a10 	vmov	s0, r3
 80281d2:	e7f7      	b.n	80281c4 <__ieee754_powf+0x554>
 80281d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80281d8:	e562      	b.n	8027ca0 <__ieee754_powf+0x30>
 80281da:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 802820c <__ieee754_powf+0x59c>
 80281de:	e55f      	b.n	8027ca0 <__ieee754_powf+0x30>
 80281e0:	eeb0 0a48 	vmov.f32	s0, s16
 80281e4:	e55c      	b.n	8027ca0 <__ieee754_powf+0x30>
 80281e6:	bf00      	nop
 80281e8:	ff800000 	.word	0xff800000
 80281ec:	3f317218 	.word	0x3f317218
 80281f0:	3f317200 	.word	0x3f317200
 80281f4:	35bfbe8c 	.word	0x35bfbe8c
 80281f8:	b5ddea0e 	.word	0xb5ddea0e
 80281fc:	3331bb4c 	.word	0x3331bb4c
 8028200:	388ab355 	.word	0x388ab355
 8028204:	bb360b61 	.word	0xbb360b61
 8028208:	3e2aaaab 	.word	0x3e2aaaab
 802820c:	00000000 	.word	0x00000000

08028210 <__ieee754_rem_pio2f>:
 8028210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028212:	ee10 6a10 	vmov	r6, s0
 8028216:	4b88      	ldr	r3, [pc, #544]	@ (8028438 <__ieee754_rem_pio2f+0x228>)
 8028218:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 802821c:	429d      	cmp	r5, r3
 802821e:	b087      	sub	sp, #28
 8028220:	4604      	mov	r4, r0
 8028222:	d805      	bhi.n	8028230 <__ieee754_rem_pio2f+0x20>
 8028224:	2300      	movs	r3, #0
 8028226:	ed80 0a00 	vstr	s0, [r0]
 802822a:	6043      	str	r3, [r0, #4]
 802822c:	2000      	movs	r0, #0
 802822e:	e022      	b.n	8028276 <__ieee754_rem_pio2f+0x66>
 8028230:	4b82      	ldr	r3, [pc, #520]	@ (802843c <__ieee754_rem_pio2f+0x22c>)
 8028232:	429d      	cmp	r5, r3
 8028234:	d83a      	bhi.n	80282ac <__ieee754_rem_pio2f+0x9c>
 8028236:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 802823a:	2e00      	cmp	r6, #0
 802823c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8028440 <__ieee754_rem_pio2f+0x230>
 8028240:	4a80      	ldr	r2, [pc, #512]	@ (8028444 <__ieee754_rem_pio2f+0x234>)
 8028242:	f023 030f 	bic.w	r3, r3, #15
 8028246:	dd18      	ble.n	802827a <__ieee754_rem_pio2f+0x6a>
 8028248:	4293      	cmp	r3, r2
 802824a:	ee70 7a47 	vsub.f32	s15, s0, s14
 802824e:	bf09      	itett	eq
 8028250:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8028448 <__ieee754_rem_pio2f+0x238>
 8028254:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 802844c <__ieee754_rem_pio2f+0x23c>
 8028258:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8028450 <__ieee754_rem_pio2f+0x240>
 802825c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8028260:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8028264:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028268:	ed80 7a00 	vstr	s14, [r0]
 802826c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8028270:	edc0 7a01 	vstr	s15, [r0, #4]
 8028274:	2001      	movs	r0, #1
 8028276:	b007      	add	sp, #28
 8028278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802827a:	4293      	cmp	r3, r2
 802827c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8028280:	bf09      	itett	eq
 8028282:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8028448 <__ieee754_rem_pio2f+0x238>
 8028286:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 802844c <__ieee754_rem_pio2f+0x23c>
 802828a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8028450 <__ieee754_rem_pio2f+0x240>
 802828e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8028292:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028296:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802829a:	ed80 7a00 	vstr	s14, [r0]
 802829e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80282a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80282a6:	f04f 30ff 	mov.w	r0, #4294967295
 80282aa:	e7e4      	b.n	8028276 <__ieee754_rem_pio2f+0x66>
 80282ac:	4b69      	ldr	r3, [pc, #420]	@ (8028454 <__ieee754_rem_pio2f+0x244>)
 80282ae:	429d      	cmp	r5, r3
 80282b0:	d873      	bhi.n	802839a <__ieee754_rem_pio2f+0x18a>
 80282b2:	f000 f8dd 	bl	8028470 <fabsf>
 80282b6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8028458 <__ieee754_rem_pio2f+0x248>
 80282ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80282be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80282c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80282c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80282ca:	ee17 0a90 	vmov	r0, s15
 80282ce:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8028440 <__ieee754_rem_pio2f+0x230>
 80282d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80282d6:	281f      	cmp	r0, #31
 80282d8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802844c <__ieee754_rem_pio2f+0x23c>
 80282dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80282e0:	eeb1 6a47 	vneg.f32	s12, s14
 80282e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80282e8:	ee16 1a90 	vmov	r1, s13
 80282ec:	dc09      	bgt.n	8028302 <__ieee754_rem_pio2f+0xf2>
 80282ee:	4a5b      	ldr	r2, [pc, #364]	@ (802845c <__ieee754_rem_pio2f+0x24c>)
 80282f0:	1e47      	subs	r7, r0, #1
 80282f2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80282f6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80282fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80282fe:	4293      	cmp	r3, r2
 8028300:	d107      	bne.n	8028312 <__ieee754_rem_pio2f+0x102>
 8028302:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8028306:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 802830a:	2a08      	cmp	r2, #8
 802830c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8028310:	dc14      	bgt.n	802833c <__ieee754_rem_pio2f+0x12c>
 8028312:	6021      	str	r1, [r4, #0]
 8028314:	ed94 7a00 	vldr	s14, [r4]
 8028318:	ee30 0a47 	vsub.f32	s0, s0, s14
 802831c:	2e00      	cmp	r6, #0
 802831e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8028322:	ed84 0a01 	vstr	s0, [r4, #4]
 8028326:	daa6      	bge.n	8028276 <__ieee754_rem_pio2f+0x66>
 8028328:	eeb1 7a47 	vneg.f32	s14, s14
 802832c:	eeb1 0a40 	vneg.f32	s0, s0
 8028330:	ed84 7a00 	vstr	s14, [r4]
 8028334:	ed84 0a01 	vstr	s0, [r4, #4]
 8028338:	4240      	negs	r0, r0
 802833a:	e79c      	b.n	8028276 <__ieee754_rem_pio2f+0x66>
 802833c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8028448 <__ieee754_rem_pio2f+0x238>
 8028340:	eef0 6a40 	vmov.f32	s13, s0
 8028344:	eee6 6a25 	vfma.f32	s13, s12, s11
 8028348:	ee70 7a66 	vsub.f32	s15, s0, s13
 802834c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8028350:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8028450 <__ieee754_rem_pio2f+0x240>
 8028354:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8028358:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802835c:	ee15 2a90 	vmov	r2, s11
 8028360:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8028364:	1a5b      	subs	r3, r3, r1
 8028366:	2b19      	cmp	r3, #25
 8028368:	dc04      	bgt.n	8028374 <__ieee754_rem_pio2f+0x164>
 802836a:	edc4 5a00 	vstr	s11, [r4]
 802836e:	eeb0 0a66 	vmov.f32	s0, s13
 8028372:	e7cf      	b.n	8028314 <__ieee754_rem_pio2f+0x104>
 8028374:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8028460 <__ieee754_rem_pio2f+0x250>
 8028378:	eeb0 0a66 	vmov.f32	s0, s13
 802837c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8028380:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8028384:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8028464 <__ieee754_rem_pio2f+0x254>
 8028388:	eee6 7a25 	vfma.f32	s15, s12, s11
 802838c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8028390:	ee30 7a67 	vsub.f32	s14, s0, s15
 8028394:	ed84 7a00 	vstr	s14, [r4]
 8028398:	e7bc      	b.n	8028314 <__ieee754_rem_pio2f+0x104>
 802839a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 802839e:	d306      	bcc.n	80283ae <__ieee754_rem_pio2f+0x19e>
 80283a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80283a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80283a8:	edc0 7a00 	vstr	s15, [r0]
 80283ac:	e73e      	b.n	802822c <__ieee754_rem_pio2f+0x1c>
 80283ae:	15ea      	asrs	r2, r5, #23
 80283b0:	3a86      	subs	r2, #134	@ 0x86
 80283b2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80283b6:	ee07 3a90 	vmov	s15, r3
 80283ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80283be:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8028468 <__ieee754_rem_pio2f+0x258>
 80283c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80283c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80283ca:	ed8d 7a03 	vstr	s14, [sp, #12]
 80283ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80283d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80283d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80283da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80283de:	ed8d 7a04 	vstr	s14, [sp, #16]
 80283e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80283e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80283ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283ee:	edcd 7a05 	vstr	s15, [sp, #20]
 80283f2:	d11e      	bne.n	8028432 <__ieee754_rem_pio2f+0x222>
 80283f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80283f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283fc:	bf0c      	ite	eq
 80283fe:	2301      	moveq	r3, #1
 8028400:	2302      	movne	r3, #2
 8028402:	491a      	ldr	r1, [pc, #104]	@ (802846c <__ieee754_rem_pio2f+0x25c>)
 8028404:	9101      	str	r1, [sp, #4]
 8028406:	2102      	movs	r1, #2
 8028408:	9100      	str	r1, [sp, #0]
 802840a:	a803      	add	r0, sp, #12
 802840c:	4621      	mov	r1, r4
 802840e:	f000 f8c3 	bl	8028598 <__kernel_rem_pio2f>
 8028412:	2e00      	cmp	r6, #0
 8028414:	f6bf af2f 	bge.w	8028276 <__ieee754_rem_pio2f+0x66>
 8028418:	edd4 7a00 	vldr	s15, [r4]
 802841c:	eef1 7a67 	vneg.f32	s15, s15
 8028420:	edc4 7a00 	vstr	s15, [r4]
 8028424:	edd4 7a01 	vldr	s15, [r4, #4]
 8028428:	eef1 7a67 	vneg.f32	s15, s15
 802842c:	edc4 7a01 	vstr	s15, [r4, #4]
 8028430:	e782      	b.n	8028338 <__ieee754_rem_pio2f+0x128>
 8028432:	2303      	movs	r3, #3
 8028434:	e7e5      	b.n	8028402 <__ieee754_rem_pio2f+0x1f2>
 8028436:	bf00      	nop
 8028438:	3f490fd8 	.word	0x3f490fd8
 802843c:	4016cbe3 	.word	0x4016cbe3
 8028440:	3fc90f80 	.word	0x3fc90f80
 8028444:	3fc90fd0 	.word	0x3fc90fd0
 8028448:	37354400 	.word	0x37354400
 802844c:	37354443 	.word	0x37354443
 8028450:	2e85a308 	.word	0x2e85a308
 8028454:	43490f80 	.word	0x43490f80
 8028458:	3f22f984 	.word	0x3f22f984
 802845c:	080310f0 	.word	0x080310f0
 8028460:	2e85a300 	.word	0x2e85a300
 8028464:	248d3132 	.word	0x248d3132
 8028468:	43800000 	.word	0x43800000
 802846c:	08031170 	.word	0x08031170

08028470 <fabsf>:
 8028470:	ee10 3a10 	vmov	r3, s0
 8028474:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8028478:	ee00 3a10 	vmov	s0, r3
 802847c:	4770      	bx	lr
	...

08028480 <scalbnf>:
 8028480:	ee10 3a10 	vmov	r3, s0
 8028484:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8028488:	d02b      	beq.n	80284e2 <scalbnf+0x62>
 802848a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 802848e:	d302      	bcc.n	8028496 <scalbnf+0x16>
 8028490:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028494:	4770      	bx	lr
 8028496:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 802849a:	d123      	bne.n	80284e4 <scalbnf+0x64>
 802849c:	4b24      	ldr	r3, [pc, #144]	@ (8028530 <scalbnf+0xb0>)
 802849e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8028534 <scalbnf+0xb4>
 80284a2:	4298      	cmp	r0, r3
 80284a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80284a8:	db17      	blt.n	80284da <scalbnf+0x5a>
 80284aa:	ee10 3a10 	vmov	r3, s0
 80284ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80284b2:	3a19      	subs	r2, #25
 80284b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80284b8:	4288      	cmp	r0, r1
 80284ba:	dd15      	ble.n	80284e8 <scalbnf+0x68>
 80284bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8028538 <scalbnf+0xb8>
 80284c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 802853c <scalbnf+0xbc>
 80284c4:	ee10 3a10 	vmov	r3, s0
 80284c8:	eeb0 7a67 	vmov.f32	s14, s15
 80284cc:	2b00      	cmp	r3, #0
 80284ce:	bfb8      	it	lt
 80284d0:	eef0 7a66 	vmovlt.f32	s15, s13
 80284d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80284d8:	4770      	bx	lr
 80284da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8028540 <scalbnf+0xc0>
 80284de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80284e2:	4770      	bx	lr
 80284e4:	0dd2      	lsrs	r2, r2, #23
 80284e6:	e7e5      	b.n	80284b4 <scalbnf+0x34>
 80284e8:	4410      	add	r0, r2
 80284ea:	28fe      	cmp	r0, #254	@ 0xfe
 80284ec:	dce6      	bgt.n	80284bc <scalbnf+0x3c>
 80284ee:	2800      	cmp	r0, #0
 80284f0:	dd06      	ble.n	8028500 <scalbnf+0x80>
 80284f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80284f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80284fa:	ee00 3a10 	vmov	s0, r3
 80284fe:	4770      	bx	lr
 8028500:	f110 0f16 	cmn.w	r0, #22
 8028504:	da09      	bge.n	802851a <scalbnf+0x9a>
 8028506:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8028540 <scalbnf+0xc0>
 802850a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8028544 <scalbnf+0xc4>
 802850e:	ee10 3a10 	vmov	r3, s0
 8028512:	eeb0 7a67 	vmov.f32	s14, s15
 8028516:	2b00      	cmp	r3, #0
 8028518:	e7d9      	b.n	80284ce <scalbnf+0x4e>
 802851a:	3019      	adds	r0, #25
 802851c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8028520:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028524:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8028548 <scalbnf+0xc8>
 8028528:	ee07 3a90 	vmov	s15, r3
 802852c:	e7d7      	b.n	80284de <scalbnf+0x5e>
 802852e:	bf00      	nop
 8028530:	ffff3cb0 	.word	0xffff3cb0
 8028534:	4c000000 	.word	0x4c000000
 8028538:	7149f2ca 	.word	0x7149f2ca
 802853c:	f149f2ca 	.word	0xf149f2ca
 8028540:	0da24260 	.word	0x0da24260
 8028544:	8da24260 	.word	0x8da24260
 8028548:	33000000 	.word	0x33000000

0802854c <with_errnof>:
 802854c:	b510      	push	{r4, lr}
 802854e:	ed2d 8b02 	vpush	{d8}
 8028552:	eeb0 8a40 	vmov.f32	s16, s0
 8028556:	4604      	mov	r4, r0
 8028558:	f7fc f994 	bl	8024884 <__errno>
 802855c:	eeb0 0a48 	vmov.f32	s0, s16
 8028560:	ecbd 8b02 	vpop	{d8}
 8028564:	6004      	str	r4, [r0, #0]
 8028566:	bd10      	pop	{r4, pc}

08028568 <xflowf>:
 8028568:	b130      	cbz	r0, 8028578 <xflowf+0x10>
 802856a:	eef1 7a40 	vneg.f32	s15, s0
 802856e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028572:	2022      	movs	r0, #34	@ 0x22
 8028574:	f7ff bfea 	b.w	802854c <with_errnof>
 8028578:	eef0 7a40 	vmov.f32	s15, s0
 802857c:	e7f7      	b.n	802856e <xflowf+0x6>
	...

08028580 <__math_uflowf>:
 8028580:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8028588 <__math_uflowf+0x8>
 8028584:	f7ff bff0 	b.w	8028568 <xflowf>
 8028588:	10000000 	.word	0x10000000

0802858c <__math_oflowf>:
 802858c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8028594 <__math_oflowf+0x8>
 8028590:	f7ff bfea 	b.w	8028568 <xflowf>
 8028594:	70000000 	.word	0x70000000

08028598 <__kernel_rem_pio2f>:
 8028598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802859c:	ed2d 8b04 	vpush	{d8-d9}
 80285a0:	b0d9      	sub	sp, #356	@ 0x164
 80285a2:	4690      	mov	r8, r2
 80285a4:	9001      	str	r0, [sp, #4]
 80285a6:	4ab9      	ldr	r2, [pc, #740]	@ (802888c <__kernel_rem_pio2f+0x2f4>)
 80285a8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80285aa:	f118 0f04 	cmn.w	r8, #4
 80285ae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80285b2:	460f      	mov	r7, r1
 80285b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80285b8:	db27      	blt.n	802860a <__kernel_rem_pio2f+0x72>
 80285ba:	f1b8 0203 	subs.w	r2, r8, #3
 80285be:	bf48      	it	mi
 80285c0:	f108 0204 	addmi.w	r2, r8, #4
 80285c4:	10d2      	asrs	r2, r2, #3
 80285c6:	1c55      	adds	r5, r2, #1
 80285c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80285ca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 802889c <__kernel_rem_pio2f+0x304>
 80285ce:	00e8      	lsls	r0, r5, #3
 80285d0:	eba2 060b 	sub.w	r6, r2, fp
 80285d4:	9002      	str	r0, [sp, #8]
 80285d6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80285da:	eb0a 0c0b 	add.w	ip, sl, fp
 80285de:	ac1c      	add	r4, sp, #112	@ 0x70
 80285e0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80285e4:	2000      	movs	r0, #0
 80285e6:	4560      	cmp	r0, ip
 80285e8:	dd11      	ble.n	802860e <__kernel_rem_pio2f+0x76>
 80285ea:	a91c      	add	r1, sp, #112	@ 0x70
 80285ec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80285f0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80285f4:	f04f 0c00 	mov.w	ip, #0
 80285f8:	45d4      	cmp	ip, sl
 80285fa:	dc27      	bgt.n	802864c <__kernel_rem_pio2f+0xb4>
 80285fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8028600:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 802889c <__kernel_rem_pio2f+0x304>
 8028604:	4606      	mov	r6, r0
 8028606:	2400      	movs	r4, #0
 8028608:	e016      	b.n	8028638 <__kernel_rem_pio2f+0xa0>
 802860a:	2200      	movs	r2, #0
 802860c:	e7db      	b.n	80285c6 <__kernel_rem_pio2f+0x2e>
 802860e:	42c6      	cmn	r6, r0
 8028610:	bf5d      	ittte	pl
 8028612:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8028616:	ee07 1a90 	vmovpl	s15, r1
 802861a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802861e:	eef0 7a47 	vmovmi.f32	s15, s14
 8028622:	ece4 7a01 	vstmia	r4!, {s15}
 8028626:	3001      	adds	r0, #1
 8028628:	e7dd      	b.n	80285e6 <__kernel_rem_pio2f+0x4e>
 802862a:	ecfe 6a01 	vldmia	lr!, {s13}
 802862e:	ed96 7a00 	vldr	s14, [r6]
 8028632:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028636:	3401      	adds	r4, #1
 8028638:	455c      	cmp	r4, fp
 802863a:	f1a6 0604 	sub.w	r6, r6, #4
 802863e:	ddf4      	ble.n	802862a <__kernel_rem_pio2f+0x92>
 8028640:	ece9 7a01 	vstmia	r9!, {s15}
 8028644:	f10c 0c01 	add.w	ip, ip, #1
 8028648:	3004      	adds	r0, #4
 802864a:	e7d5      	b.n	80285f8 <__kernel_rem_pio2f+0x60>
 802864c:	a908      	add	r1, sp, #32
 802864e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8028652:	9104      	str	r1, [sp, #16]
 8028654:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8028656:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8028898 <__kernel_rem_pio2f+0x300>
 802865a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8028894 <__kernel_rem_pio2f+0x2fc>
 802865e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8028662:	9203      	str	r2, [sp, #12]
 8028664:	4654      	mov	r4, sl
 8028666:	00a2      	lsls	r2, r4, #2
 8028668:	9205      	str	r2, [sp, #20]
 802866a:	aa58      	add	r2, sp, #352	@ 0x160
 802866c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8028670:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8028674:	a944      	add	r1, sp, #272	@ 0x110
 8028676:	aa08      	add	r2, sp, #32
 8028678:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 802867c:	4694      	mov	ip, r2
 802867e:	4626      	mov	r6, r4
 8028680:	2e00      	cmp	r6, #0
 8028682:	f1a0 0004 	sub.w	r0, r0, #4
 8028686:	dc4c      	bgt.n	8028722 <__kernel_rem_pio2f+0x18a>
 8028688:	4628      	mov	r0, r5
 802868a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802868e:	f7ff fef7 	bl	8028480 <scalbnf>
 8028692:	eeb0 8a40 	vmov.f32	s16, s0
 8028696:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 802869a:	ee28 0a00 	vmul.f32	s0, s16, s0
 802869e:	f7fe fe77 	bl	8027390 <floorf>
 80286a2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80286a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80286aa:	2d00      	cmp	r5, #0
 80286ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80286b0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80286b4:	ee17 9a90 	vmov	r9, s15
 80286b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80286bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80286c0:	dd41      	ble.n	8028746 <__kernel_rem_pio2f+0x1ae>
 80286c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80286c6:	a908      	add	r1, sp, #32
 80286c8:	f1c5 0e08 	rsb	lr, r5, #8
 80286cc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80286d0:	fa46 f00e 	asr.w	r0, r6, lr
 80286d4:	4481      	add	r9, r0
 80286d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80286da:	1a36      	subs	r6, r6, r0
 80286dc:	f1c5 0007 	rsb	r0, r5, #7
 80286e0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80286e4:	4106      	asrs	r6, r0
 80286e6:	2e00      	cmp	r6, #0
 80286e8:	dd3c      	ble.n	8028764 <__kernel_rem_pio2f+0x1cc>
 80286ea:	f04f 0e00 	mov.w	lr, #0
 80286ee:	f109 0901 	add.w	r9, r9, #1
 80286f2:	4670      	mov	r0, lr
 80286f4:	4574      	cmp	r4, lr
 80286f6:	dc68      	bgt.n	80287ca <__kernel_rem_pio2f+0x232>
 80286f8:	2d00      	cmp	r5, #0
 80286fa:	dd03      	ble.n	8028704 <__kernel_rem_pio2f+0x16c>
 80286fc:	2d01      	cmp	r5, #1
 80286fe:	d074      	beq.n	80287ea <__kernel_rem_pio2f+0x252>
 8028700:	2d02      	cmp	r5, #2
 8028702:	d07d      	beq.n	8028800 <__kernel_rem_pio2f+0x268>
 8028704:	2e02      	cmp	r6, #2
 8028706:	d12d      	bne.n	8028764 <__kernel_rem_pio2f+0x1cc>
 8028708:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802870c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8028710:	b340      	cbz	r0, 8028764 <__kernel_rem_pio2f+0x1cc>
 8028712:	4628      	mov	r0, r5
 8028714:	9306      	str	r3, [sp, #24]
 8028716:	f7ff feb3 	bl	8028480 <scalbnf>
 802871a:	9b06      	ldr	r3, [sp, #24]
 802871c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8028720:	e020      	b.n	8028764 <__kernel_rem_pio2f+0x1cc>
 8028722:	ee60 7a28 	vmul.f32	s15, s0, s17
 8028726:	3e01      	subs	r6, #1
 8028728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802872c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028730:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8028734:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028738:	ecac 0a01 	vstmia	ip!, {s0}
 802873c:	ed90 0a00 	vldr	s0, [r0]
 8028740:	ee37 0a80 	vadd.f32	s0, s15, s0
 8028744:	e79c      	b.n	8028680 <__kernel_rem_pio2f+0xe8>
 8028746:	d105      	bne.n	8028754 <__kernel_rem_pio2f+0x1bc>
 8028748:	1e60      	subs	r0, r4, #1
 802874a:	a908      	add	r1, sp, #32
 802874c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8028750:	11f6      	asrs	r6, r6, #7
 8028752:	e7c8      	b.n	80286e6 <__kernel_rem_pio2f+0x14e>
 8028754:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8028758:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802875c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028760:	da31      	bge.n	80287c6 <__kernel_rem_pio2f+0x22e>
 8028762:	2600      	movs	r6, #0
 8028764:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8028768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802876c:	f040 8098 	bne.w	80288a0 <__kernel_rem_pio2f+0x308>
 8028770:	1e60      	subs	r0, r4, #1
 8028772:	2200      	movs	r2, #0
 8028774:	4550      	cmp	r0, sl
 8028776:	da4b      	bge.n	8028810 <__kernel_rem_pio2f+0x278>
 8028778:	2a00      	cmp	r2, #0
 802877a:	d065      	beq.n	8028848 <__kernel_rem_pio2f+0x2b0>
 802877c:	3c01      	subs	r4, #1
 802877e:	ab08      	add	r3, sp, #32
 8028780:	3d08      	subs	r5, #8
 8028782:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8028786:	2b00      	cmp	r3, #0
 8028788:	d0f8      	beq.n	802877c <__kernel_rem_pio2f+0x1e4>
 802878a:	4628      	mov	r0, r5
 802878c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8028790:	f7ff fe76 	bl	8028480 <scalbnf>
 8028794:	1c63      	adds	r3, r4, #1
 8028796:	aa44      	add	r2, sp, #272	@ 0x110
 8028798:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8028898 <__kernel_rem_pio2f+0x300>
 802879c:	0099      	lsls	r1, r3, #2
 802879e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80287a2:	4623      	mov	r3, r4
 80287a4:	2b00      	cmp	r3, #0
 80287a6:	f280 80a9 	bge.w	80288fc <__kernel_rem_pio2f+0x364>
 80287aa:	4623      	mov	r3, r4
 80287ac:	2b00      	cmp	r3, #0
 80287ae:	f2c0 80c7 	blt.w	8028940 <__kernel_rem_pio2f+0x3a8>
 80287b2:	aa44      	add	r2, sp, #272	@ 0x110
 80287b4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80287b8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8028890 <__kernel_rem_pio2f+0x2f8>
 80287bc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 802889c <__kernel_rem_pio2f+0x304>
 80287c0:	2000      	movs	r0, #0
 80287c2:	1ae2      	subs	r2, r4, r3
 80287c4:	e0b1      	b.n	802892a <__kernel_rem_pio2f+0x392>
 80287c6:	2602      	movs	r6, #2
 80287c8:	e78f      	b.n	80286ea <__kernel_rem_pio2f+0x152>
 80287ca:	f852 1b04 	ldr.w	r1, [r2], #4
 80287ce:	b948      	cbnz	r0, 80287e4 <__kernel_rem_pio2f+0x24c>
 80287d0:	b121      	cbz	r1, 80287dc <__kernel_rem_pio2f+0x244>
 80287d2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80287d6:	f842 1c04 	str.w	r1, [r2, #-4]
 80287da:	2101      	movs	r1, #1
 80287dc:	f10e 0e01 	add.w	lr, lr, #1
 80287e0:	4608      	mov	r0, r1
 80287e2:	e787      	b.n	80286f4 <__kernel_rem_pio2f+0x15c>
 80287e4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80287e8:	e7f5      	b.n	80287d6 <__kernel_rem_pio2f+0x23e>
 80287ea:	f104 3cff 	add.w	ip, r4, #4294967295
 80287ee:	aa08      	add	r2, sp, #32
 80287f0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80287f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80287f8:	a908      	add	r1, sp, #32
 80287fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80287fe:	e781      	b.n	8028704 <__kernel_rem_pio2f+0x16c>
 8028800:	f104 3cff 	add.w	ip, r4, #4294967295
 8028804:	aa08      	add	r2, sp, #32
 8028806:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802880a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802880e:	e7f3      	b.n	80287f8 <__kernel_rem_pio2f+0x260>
 8028810:	a908      	add	r1, sp, #32
 8028812:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8028816:	3801      	subs	r0, #1
 8028818:	430a      	orrs	r2, r1
 802881a:	e7ab      	b.n	8028774 <__kernel_rem_pio2f+0x1dc>
 802881c:	3201      	adds	r2, #1
 802881e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8028822:	2e00      	cmp	r6, #0
 8028824:	d0fa      	beq.n	802881c <__kernel_rem_pio2f+0x284>
 8028826:	9905      	ldr	r1, [sp, #20]
 8028828:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 802882c:	eb0d 0001 	add.w	r0, sp, r1
 8028830:	18e6      	adds	r6, r4, r3
 8028832:	a91c      	add	r1, sp, #112	@ 0x70
 8028834:	f104 0c01 	add.w	ip, r4, #1
 8028838:	384c      	subs	r0, #76	@ 0x4c
 802883a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 802883e:	4422      	add	r2, r4
 8028840:	4562      	cmp	r2, ip
 8028842:	da04      	bge.n	802884e <__kernel_rem_pio2f+0x2b6>
 8028844:	4614      	mov	r4, r2
 8028846:	e70e      	b.n	8028666 <__kernel_rem_pio2f+0xce>
 8028848:	9804      	ldr	r0, [sp, #16]
 802884a:	2201      	movs	r2, #1
 802884c:	e7e7      	b.n	802881e <__kernel_rem_pio2f+0x286>
 802884e:	9903      	ldr	r1, [sp, #12]
 8028850:	f8dd e004 	ldr.w	lr, [sp, #4]
 8028854:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8028858:	9105      	str	r1, [sp, #20]
 802885a:	ee07 1a90 	vmov	s15, r1
 802885e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028862:	2400      	movs	r4, #0
 8028864:	ece6 7a01 	vstmia	r6!, {s15}
 8028868:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 802889c <__kernel_rem_pio2f+0x304>
 802886c:	46b1      	mov	r9, r6
 802886e:	455c      	cmp	r4, fp
 8028870:	dd04      	ble.n	802887c <__kernel_rem_pio2f+0x2e4>
 8028872:	ece0 7a01 	vstmia	r0!, {s15}
 8028876:	f10c 0c01 	add.w	ip, ip, #1
 802887a:	e7e1      	b.n	8028840 <__kernel_rem_pio2f+0x2a8>
 802887c:	ecfe 6a01 	vldmia	lr!, {s13}
 8028880:	ed39 7a01 	vldmdb	r9!, {s14}
 8028884:	3401      	adds	r4, #1
 8028886:	eee6 7a87 	vfma.f32	s15, s13, s14
 802888a:	e7f0      	b.n	802886e <__kernel_rem_pio2f+0x2d6>
 802888c:	080314b4 	.word	0x080314b4
 8028890:	08031488 	.word	0x08031488
 8028894:	43800000 	.word	0x43800000
 8028898:	3b800000 	.word	0x3b800000
 802889c:	00000000 	.word	0x00000000
 80288a0:	9b02      	ldr	r3, [sp, #8]
 80288a2:	eeb0 0a48 	vmov.f32	s0, s16
 80288a6:	eba3 0008 	sub.w	r0, r3, r8
 80288aa:	f7ff fde9 	bl	8028480 <scalbnf>
 80288ae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8028894 <__kernel_rem_pio2f+0x2fc>
 80288b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80288b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80288ba:	db19      	blt.n	80288f0 <__kernel_rem_pio2f+0x358>
 80288bc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8028898 <__kernel_rem_pio2f+0x300>
 80288c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80288c4:	aa08      	add	r2, sp, #32
 80288c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80288ca:	3508      	adds	r5, #8
 80288cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80288d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80288d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80288d8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80288dc:	ee10 3a10 	vmov	r3, s0
 80288e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80288e4:	ee17 3a90 	vmov	r3, s15
 80288e8:	3401      	adds	r4, #1
 80288ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80288ee:	e74c      	b.n	802878a <__kernel_rem_pio2f+0x1f2>
 80288f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80288f4:	aa08      	add	r2, sp, #32
 80288f6:	ee10 3a10 	vmov	r3, s0
 80288fa:	e7f6      	b.n	80288ea <__kernel_rem_pio2f+0x352>
 80288fc:	a808      	add	r0, sp, #32
 80288fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8028902:	9001      	str	r0, [sp, #4]
 8028904:	ee07 0a90 	vmov	s15, r0
 8028908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802890c:	3b01      	subs	r3, #1
 802890e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8028912:	ee20 0a07 	vmul.f32	s0, s0, s14
 8028916:	ed62 7a01 	vstmdb	r2!, {s15}
 802891a:	e743      	b.n	80287a4 <__kernel_rem_pio2f+0x20c>
 802891c:	ecfc 6a01 	vldmia	ip!, {s13}
 8028920:	ecb5 7a01 	vldmia	r5!, {s14}
 8028924:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028928:	3001      	adds	r0, #1
 802892a:	4550      	cmp	r0, sl
 802892c:	dc01      	bgt.n	8028932 <__kernel_rem_pio2f+0x39a>
 802892e:	4282      	cmp	r2, r0
 8028930:	daf4      	bge.n	802891c <__kernel_rem_pio2f+0x384>
 8028932:	a858      	add	r0, sp, #352	@ 0x160
 8028934:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8028938:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 802893c:	3b01      	subs	r3, #1
 802893e:	e735      	b.n	80287ac <__kernel_rem_pio2f+0x214>
 8028940:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8028942:	2b02      	cmp	r3, #2
 8028944:	dc09      	bgt.n	802895a <__kernel_rem_pio2f+0x3c2>
 8028946:	2b00      	cmp	r3, #0
 8028948:	dc2b      	bgt.n	80289a2 <__kernel_rem_pio2f+0x40a>
 802894a:	d044      	beq.n	80289d6 <__kernel_rem_pio2f+0x43e>
 802894c:	f009 0007 	and.w	r0, r9, #7
 8028950:	b059      	add	sp, #356	@ 0x164
 8028952:	ecbd 8b04 	vpop	{d8-d9}
 8028956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802895a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 802895c:	2b03      	cmp	r3, #3
 802895e:	d1f5      	bne.n	802894c <__kernel_rem_pio2f+0x3b4>
 8028960:	aa30      	add	r2, sp, #192	@ 0xc0
 8028962:	1f0b      	subs	r3, r1, #4
 8028964:	4413      	add	r3, r2
 8028966:	461a      	mov	r2, r3
 8028968:	4620      	mov	r0, r4
 802896a:	2800      	cmp	r0, #0
 802896c:	f1a2 0204 	sub.w	r2, r2, #4
 8028970:	dc52      	bgt.n	8028a18 <__kernel_rem_pio2f+0x480>
 8028972:	4622      	mov	r2, r4
 8028974:	2a01      	cmp	r2, #1
 8028976:	f1a3 0304 	sub.w	r3, r3, #4
 802897a:	dc5d      	bgt.n	8028a38 <__kernel_rem_pio2f+0x4a0>
 802897c:	ab30      	add	r3, sp, #192	@ 0xc0
 802897e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 802889c <__kernel_rem_pio2f+0x304>
 8028982:	440b      	add	r3, r1
 8028984:	2c01      	cmp	r4, #1
 8028986:	dc67      	bgt.n	8028a58 <__kernel_rem_pio2f+0x4c0>
 8028988:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 802898c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8028990:	2e00      	cmp	r6, #0
 8028992:	d167      	bne.n	8028a64 <__kernel_rem_pio2f+0x4cc>
 8028994:	edc7 6a00 	vstr	s13, [r7]
 8028998:	ed87 7a01 	vstr	s14, [r7, #4]
 802899c:	edc7 7a02 	vstr	s15, [r7, #8]
 80289a0:	e7d4      	b.n	802894c <__kernel_rem_pio2f+0x3b4>
 80289a2:	ab30      	add	r3, sp, #192	@ 0xc0
 80289a4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 802889c <__kernel_rem_pio2f+0x304>
 80289a8:	440b      	add	r3, r1
 80289aa:	4622      	mov	r2, r4
 80289ac:	2a00      	cmp	r2, #0
 80289ae:	da24      	bge.n	80289fa <__kernel_rem_pio2f+0x462>
 80289b0:	b34e      	cbz	r6, 8028a06 <__kernel_rem_pio2f+0x46e>
 80289b2:	eef1 7a47 	vneg.f32	s15, s14
 80289b6:	edc7 7a00 	vstr	s15, [r7]
 80289ba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80289be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80289c2:	aa31      	add	r2, sp, #196	@ 0xc4
 80289c4:	2301      	movs	r3, #1
 80289c6:	429c      	cmp	r4, r3
 80289c8:	da20      	bge.n	8028a0c <__kernel_rem_pio2f+0x474>
 80289ca:	b10e      	cbz	r6, 80289d0 <__kernel_rem_pio2f+0x438>
 80289cc:	eef1 7a67 	vneg.f32	s15, s15
 80289d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80289d4:	e7ba      	b.n	802894c <__kernel_rem_pio2f+0x3b4>
 80289d6:	ab30      	add	r3, sp, #192	@ 0xc0
 80289d8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 802889c <__kernel_rem_pio2f+0x304>
 80289dc:	440b      	add	r3, r1
 80289de:	2c00      	cmp	r4, #0
 80289e0:	da05      	bge.n	80289ee <__kernel_rem_pio2f+0x456>
 80289e2:	b10e      	cbz	r6, 80289e8 <__kernel_rem_pio2f+0x450>
 80289e4:	eef1 7a67 	vneg.f32	s15, s15
 80289e8:	edc7 7a00 	vstr	s15, [r7]
 80289ec:	e7ae      	b.n	802894c <__kernel_rem_pio2f+0x3b4>
 80289ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80289f2:	3c01      	subs	r4, #1
 80289f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80289f8:	e7f1      	b.n	80289de <__kernel_rem_pio2f+0x446>
 80289fa:	ed73 7a01 	vldmdb	r3!, {s15}
 80289fe:	3a01      	subs	r2, #1
 8028a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8028a04:	e7d2      	b.n	80289ac <__kernel_rem_pio2f+0x414>
 8028a06:	eef0 7a47 	vmov.f32	s15, s14
 8028a0a:	e7d4      	b.n	80289b6 <__kernel_rem_pio2f+0x41e>
 8028a0c:	ecb2 7a01 	vldmia	r2!, {s14}
 8028a10:	3301      	adds	r3, #1
 8028a12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028a16:	e7d6      	b.n	80289c6 <__kernel_rem_pio2f+0x42e>
 8028a18:	edd2 7a00 	vldr	s15, [r2]
 8028a1c:	edd2 6a01 	vldr	s13, [r2, #4]
 8028a20:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028a24:	3801      	subs	r0, #1
 8028a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028a2a:	ed82 7a00 	vstr	s14, [r2]
 8028a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028a32:	edc2 7a01 	vstr	s15, [r2, #4]
 8028a36:	e798      	b.n	802896a <__kernel_rem_pio2f+0x3d2>
 8028a38:	edd3 7a00 	vldr	s15, [r3]
 8028a3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8028a40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028a44:	3a01      	subs	r2, #1
 8028a46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028a4a:	ed83 7a00 	vstr	s14, [r3]
 8028a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028a52:	edc3 7a01 	vstr	s15, [r3, #4]
 8028a56:	e78d      	b.n	8028974 <__kernel_rem_pio2f+0x3dc>
 8028a58:	ed33 7a01 	vldmdb	r3!, {s14}
 8028a5c:	3c01      	subs	r4, #1
 8028a5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028a62:	e78f      	b.n	8028984 <__kernel_rem_pio2f+0x3ec>
 8028a64:	eef1 6a66 	vneg.f32	s13, s13
 8028a68:	eeb1 7a47 	vneg.f32	s14, s14
 8028a6c:	edc7 6a00 	vstr	s13, [r7]
 8028a70:	ed87 7a01 	vstr	s14, [r7, #4]
 8028a74:	eef1 7a67 	vneg.f32	s15, s15
 8028a78:	e790      	b.n	802899c <__kernel_rem_pio2f+0x404>
 8028a7a:	bf00      	nop

08028a7c <_init>:
 8028a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028a7e:	bf00      	nop
 8028a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028a82:	bc08      	pop	{r3}
 8028a84:	469e      	mov	lr, r3
 8028a86:	4770      	bx	lr

08028a88 <_fini>:
 8028a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028a8a:	bf00      	nop
 8028a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028a8e:	bc08      	pop	{r3}
 8028a90:	469e      	mov	lr, r3
 8028a92:	4770      	bx	lr
